# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 6094d96e46e845d3a6b1f19aa3647309
#: ../../internals/contributing/writing-code/coding-style.txt:3
msgid "Coding style"
msgstr ""

# b00dea63f38148d2933b713bf961ac5c
#: ../../internals/contributing/writing-code/coding-style.txt:5
msgid ""
"Please follow these coding standards when writing code for inclusion in "
"Django."
msgstr ""

# a682b69360a0427d851c5d79b6089001
#: ../../internals/contributing/writing-code/coding-style.txt:10
msgid "Python style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:12
msgid ""
"Please conform to the indentation style dictated in the ``.editorconfig`` "
"file. We recommend using a text editor with `EditorConfig`_ support to avoid "
"indentation and whitespace issues. The Python files use 4 spaces for "
"indentation and the HTML files use 2 spaces."
msgstr ""

# 586e2d410d774f4d8931edc7f6634bdb
#: ../../internals/contributing/writing-code/coding-style.txt:17
msgid "Unless otherwise specified, follow :pep:`8`."
msgstr ""

# a990fb822aa841e08de143dade129b88
#: ../../internals/contributing/writing-code/coding-style.txt:19
msgid ""
"Use `flake8`_ to check for problems in this area. Note that our ``setup."
"cfg`` file contains some excluded files (deprecated modules we don't care "
"about cleaning up and some third-party code that Django vendors) as well as "
"some excluded errors that we don't consider as gross violations. Remember "
"that :pep:`8` is only a guide, so respect the style of the surrounding code "
"as a primary goal."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:26
msgid ""
"An exception to :pep:`8` is our rules on line lengths. Don't limit lines of "
"code to 79 characters if it means the code looks significantly uglier or is "
"harder to read. We allow up to 119 characters as this is the width of GitHub "
"code review; anything longer requires horizontal scrolling which makes "
"review more difficult. This check is included when you run ``flake8``. "
"Documentation, comments, and docstrings should be wrapped at 79 characters, "
"even though :pep:`8` suggests 72."
msgstr ""

# 2f33859ef3364542a79c46f186a979c3
#: ../../internals/contributing/writing-code/coding-style.txt:34
msgid "Use four spaces for indentation."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:36
msgid "Use four space hanging indentation rather than vertical alignment::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:43
msgid "Instead of::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:48
msgid ""
"This makes better use of space and avoids having to realign strings if the "
"length of the first line changes."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:51
msgid ""
"Use single quotes for strings, or a double quote if the the string contains "
"a single quote. Don't waste time doing unrelated refactoring of existing "
"code to conform to this style."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:55
msgid ""
"Avoid use of \"we\" in comments, e.g. \"Loop over\" rather than \"We loop "
"over\"."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:57
msgid ""
"Use underscores, not camelCase, for variable, function and method names (i."
"e. ``poll.get_unique_voters()``, not ``poll.getUniqueVoters()``)."
msgstr ""

# 72cc32def7784d3ba35f89cb380e3a99
#: ../../internals/contributing/writing-code/coding-style.txt:60
msgid ""
"Use ``InitialCaps`` for class names (or for factory functions that return "
"classes)."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:63
msgid "In docstrings, follow the style of existing docstrings and :pep:`257`."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:65
msgid ""
"In tests, use :meth:`~django.test.SimpleTestCase.assertRaisesMessage` "
"instead of :meth:`~unittest.TestCase.assertRaises` so you can check the "
"exception message. Use :meth:`~unittest.TestCase.assertRaisesRegex` only if "
"you need regular expression matching."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:70
msgid ""
"In test docstrings, state the expected behavior that each test demonstrates. "
"Don't include preambles such as \"Tests that\" or \"Ensures that\"."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:73
msgid ""
"Reserve ticket references for obscure issues where the ticket has additional "
"details that can't be easily described in docstrings or comments. Include "
"the ticket number at the end of a sentence like this::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:86
msgid "Imports"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:88
msgid ""
"Use `isort <https://github.com/timothycrosley/isort#readme>`_ to automate "
"import sorting using the guidelines below."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:91
msgid "Quick start:"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:98
msgid ""
"This runs ``isort`` recursively from your current directory, modifying any "
"files that don't conform to the guidelines. If you need to have imports out "
"of order (to avoid a circular import, for example) use a comment like this::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:104
msgid ""
"Put imports in these groups: future, standard library, third-party "
"libraries, other Django components, local Django component, try/excepts. "
"Sort lines in each group alphabetically by the full module name. Place all "
"``import module`` statements before ``from module import objects`` in each "
"section. Use absolute imports for other Django components and relative "
"imports for local components."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:110
msgid ""
"On each line, alphabetize the items with the upper case items grouped before "
"the lower case items."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:113
msgid ""
"Break long lines using parentheses and indent continuation lines by 4 "
"spaces. Include a trailing comma after the last import and put the closing "
"parenthesis on its own line."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:117
msgid ""
"Use a single blank line between the last import and any module level code, "
"and use two blank lines above the first function or class."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:120
msgid "For example (comments are for explanatory purposes only):"
msgstr ""

# 06bca904b0ee4170becd449048bd02f3
#: ../../internals/contributing/writing-code/coding-style.txt:157
msgid "Use convenience imports whenever available. For example, do this::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:161
msgid "instead of::"
msgstr ""

# 22d8c4e414eb4e31a7ea03d16b5bfbef
#: ../../internals/contributing/writing-code/coding-style.txt:166
msgid "Template style"
msgstr ""

# fb5de3cf3ba74f839c737e54b65a8989
#: ../../internals/contributing/writing-code/coding-style.txt:168
msgid ""
"In Django template code, put one (and only one) space between the curly "
"brackets and the tag contents."
msgstr ""

# e4d7c23adc6f482897cd6e614ae3f711
#: ../../internals/contributing/writing-code/coding-style.txt:171
msgid "Do this:"
msgstr ""

# f3ad0ee33fe84d76b42c1a40d21cdc7d
#: ../../internals/contributing/writing-code/coding-style.txt:177
msgid "Don't do this:"
msgstr ""

# 5774347419a94d81803bd6971aeaccc9
#: ../../internals/contributing/writing-code/coding-style.txt:184
msgid "View style"
msgstr ""

# e73f00a95db24d6ca577d44d093aa7d8
#: ../../internals/contributing/writing-code/coding-style.txt:186
msgid ""
"In Django views, the first parameter in a view function should be called "
"``request``."
msgstr ""

# 6b757d3bbb9643219607a72feb53beb2
# ad1034f3078242199e060df90ae0237c
# 1e1b1a83ac204408aa97e7beb0ee9efa
#: ../../internals/contributing/writing-code/coding-style.txt:189
#: ../../internals/contributing/writing-code/coding-style.txt:205
#: ../../internals/contributing/writing-code/coding-style.txt:220
msgid "Do this::"
msgstr ""

# f5f595554fb7442681585aa98f38735c
# 155ca5e77218479c8dc6241cabdf5d8c
# 82e6df2b0c7740f4b3a2fbb3dc08f52d
#: ../../internals/contributing/writing-code/coding-style.txt:194
#: ../../internals/contributing/writing-code/coding-style.txt:211
#: ../../internals/contributing/writing-code/coding-style.txt:229
msgid "Don't do this::"
msgstr ""

# 4253522d3b6e4364a8d089633125eb97
#: ../../internals/contributing/writing-code/coding-style.txt:200
msgid "Model style"
msgstr ""

# be1f9c90e99c4948ad296a92d4587572
#: ../../internals/contributing/writing-code/coding-style.txt:202
msgid ""
"Field names should be all lowercase, using underscores instead of camelCase."
msgstr ""

# 1390076c65ff47ac8d89578989ae4983
#: ../../internals/contributing/writing-code/coding-style.txt:217
msgid ""
"The ``class Meta`` should appear *after* the fields are defined, with a "
"single blank line separating the fields and the class definition."
msgstr ""

# ac296912cd5e4a99b5c8b751c0c486f9
#: ../../internals/contributing/writing-code/coding-style.txt:237
msgid "Don't do this, either::"
msgstr ""

# 24ab342de8b04470b75f36d903c10f38
#: ../../internals/contributing/writing-code/coding-style.txt:246
msgid ""
"The order of model inner classes and standard methods should be as follows "
"(noting that these are not all required):"
msgstr ""

# 4977a344a80342ebaf15ac9d2ee9a2a7
#: ../../internals/contributing/writing-code/coding-style.txt:249
msgid "All database fields"
msgstr ""

# db9dd433c1264e2896e24651587d6d82
#: ../../internals/contributing/writing-code/coding-style.txt:250
msgid "Custom manager attributes"
msgstr ""

# a0e34a26ec0b47bfa6f77db3330c9a95
#: ../../internals/contributing/writing-code/coding-style.txt:251
msgid "``class Meta``"
msgstr ""

# 458dee06307547afbc0efa8eae0c64a1
#: ../../internals/contributing/writing-code/coding-style.txt:252
msgid "``def __str__()``"
msgstr ""

# 32fad75a1f544bdb99e56e90b5df8658
#: ../../internals/contributing/writing-code/coding-style.txt:253
msgid "``def save()``"
msgstr ""

# 5884ee8856634df5b89e0ca57e35e240
#: ../../internals/contributing/writing-code/coding-style.txt:254
msgid "``def get_absolute_url()``"
msgstr ""

# 141be0ddda7b4c23bffd24ed44eaf818
#: ../../internals/contributing/writing-code/coding-style.txt:255
msgid "Any custom methods"
msgstr ""

# afbaa8aa6f994a4c84211a6f6eb68283
#: ../../internals/contributing/writing-code/coding-style.txt:257
msgid ""
"If ``choices`` is defined for a given model field, define each choice as a "
"tuple of tuples, with an all-uppercase name as a class attribute on the "
"model. Example::"
msgstr ""

# 107636d49d7443ff9a15734a120dc5cf
#: ../../internals/contributing/writing-code/coding-style.txt:270
msgid "Use of ``django.conf.settings``"
msgstr ""

# 92a0e74b623d4285b3565bf87d7e101e
#: ../../internals/contributing/writing-code/coding-style.txt:272
msgid ""
"Modules should not in general use settings stored in ``django.conf."
"settings`` at the top level (i.e. evaluated when the module is imported). "
"The explanation for this is as follows:"
msgstr ""

# 67746e2e40b64f8cad7dc38f3b40067f
#: ../../internals/contributing/writing-code/coding-style.txt:276
msgid ""
"Manual configuration of settings (i.e. not relying on the "
"``DJANGO_SETTINGS_MODULE`` environment variable) is allowed and possible as "
"follows::"
msgstr ""

# f996dd686c0b45a6af252e9922fdb4b2
#: ../../internals/contributing/writing-code/coding-style.txt:284
msgid ""
"However, if any setting is accessed before the ``settings.configure`` line, "
"this will not work. (Internally, ``settings`` is a ``LazyObject`` which "
"configures itself automatically when the settings are accessed if it has not "
"already been configured)."
msgstr ""

# 0111a942583e4c3292390cc1a86061e2
#: ../../internals/contributing/writing-code/coding-style.txt:289
msgid "So, if there is a module containing some code as follows::"
msgstr ""

# 09c2166769e044aa9ef3abb9cea49f64
#: ../../internals/contributing/writing-code/coding-style.txt:296
msgid ""
"...then importing this module will cause the settings object to be "
"configured. That means that the ability for third parties to import the "
"module at the top level is incompatible with the ability to configure the "
"settings object manually, or makes it very difficult in some circumstances."
msgstr ""

# 67715cea2b0042f683f54cee404f0c32
#: ../../internals/contributing/writing-code/coding-style.txt:301
msgid ""
"Instead of the above code, a level of laziness or indirection must be used, "
"such as ``django.utils.functional.LazyObject``, ``django.utils.functional."
"lazy()`` or ``lambda``."
msgstr ""

# 0a0b422aab0545c7b925f56eb91ce2a2
#: ../../internals/contributing/writing-code/coding-style.txt:306
msgid "Miscellaneous"
msgstr ""

# 96b513ba98c449498350b489ef12e8d7
#: ../../internals/contributing/writing-code/coding-style.txt:308
msgid ""
"Mark all strings for internationalization; see the :doc:`i18n documentation "
"</topics/i18n/index>` for details."
msgstr ""

# 6f248b6fa28b4c1b9ad41c74f2fef022
#: ../../internals/contributing/writing-code/coding-style.txt:311
msgid ""
"Remove ``import`` statements that are no longer used when you change code. "
"`flake8`_ will identify these imports for you. If an unused import needs to "
"remain for backwards-compatibility, mark the end of with ``# NOQA`` to "
"silence the flake8 warning."
msgstr ""

# 2d54394c671643ed8a2f092822c0398f
#: ../../internals/contributing/writing-code/coding-style.txt:316
msgid ""
"Systematically remove all trailing whitespaces from your code as those add "
"unnecessary bytes, add visual clutter to the patches and can also "
"occasionally cause unnecessary merge conflicts. Some IDE's can be configured "
"to automatically remove them and most VCS tools can be set to highlight them "
"in diff outputs."
msgstr ""

# 3ca92fe2ea264dd08c3f9a5e46719277
#: ../../internals/contributing/writing-code/coding-style.txt:322
msgid ""
"Please don't put your name in the code you contribute. Our policy is to keep "
"contributors' names in the ``AUTHORS`` file distributed with Django -- not "
"scattered throughout the codebase itself. Feel free to include a change to "
"the ``AUTHORS`` file in your patch if you make more than a single trivial "
"change."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:329
msgid "JavaScript style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:331
msgid ""
"For details about the JavaScript code style used by Django, see :doc:"
"`javascript`."
msgstr ""
