# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 17d7360ad10d466091b1961b789ea88a
#: ../../internals/contributing/writing-code/working-with-git.txt:3
msgid "Working with Git and GitHub"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:5
msgid ""
"This section explains how the community can contribute code to Django via "
"pull requests. If you're interested in how committers handle them, see :doc:"
"`../committing-code`."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:9
msgid ""
"Below, we are going to show how to create a GitHub pull request containing "
"the changes for Trac ticket #xxxxx. By creating a fully-ready pull request, "
"you will make the reviewer's job easier, meaning that your work is more "
"likely to be merged into Django."
msgstr ""

# 99ef6760d10c4e9da4886a26ed1175b9
#: ../../internals/contributing/writing-code/working-with-git.txt:14
msgid ""
"You could also upload a traditional patch to Trac, but it's less practical "
"for reviews."
msgstr ""

# 5d4dae12344e4061a599194dedc9bdcd
#: ../../internals/contributing/writing-code/working-with-git.txt:18
msgid "Installing Git"
msgstr ""

# 25c44e6507404bfc875aae02c7919cd3
#: ../../internals/contributing/writing-code/working-with-git.txt:20
msgid ""
"Django uses `Git`_ for its source control. You can `download <http://git-scm."
"com/download>`_ Git, but it's often easier to install with your operating "
"system's package manager."
msgstr ""

# 67b242680ef243bf8073b116b57929ec
#: ../../internals/contributing/writing-code/working-with-git.txt:24
msgid ""
"Django's `Git repository`_ is hosted on `GitHub`_, and it is recommended "
"that you also work using GitHub."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:27
msgid ""
"After installing Git, the first thing you should do is setup your name and "
"email::"
msgstr ""

# f37bf35fc2fe449bbe9a490776d88a9d
#: ../../internals/contributing/writing-code/working-with-git.txt:33
msgid ""
"Note that ``user.name`` should be your real name, not your GitHub nick. "
"GitHub should know the email you use in the ``user.email`` field, as this "
"will be used to associate your commits with your GitHub account."
msgstr ""

# b916f2bf258344a78368c6c1099e2bb2
#: ../../internals/contributing/writing-code/working-with-git.txt:42
msgid "Setting up local repository"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:44
msgid ""
"When you have created your GitHub account, with the nick \"GitHub_nick\", "
"and `forked Django's repository <https://github.com/django/django/fork>`__, "
"create a local copy of your fork::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:50
msgid ""
"This will create a new directory \"django\", containing a clone of your "
"GitHub repository. The rest of the git commands on this page need to be run "
"within the cloned directory, so switch to it now::"
msgstr ""

# 80640e28ae17487da2bc113926450cf3
#: ../../internals/contributing/writing-code/working-with-git.txt:56
msgid "Your GitHub repository will be called \"origin\" in Git."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:58
msgid ""
"You should also setup ``django/django`` as an \"upstream\" remote (that is, "
"tell git that the reference Django repository was the source of your fork of "
"it)::"
msgstr ""

# d8d1318e4c7e478daa2d6afc0fbd6f80
#: ../../internals/contributing/writing-code/working-with-git.txt:64
msgid "You can add other remotes similarly, for example::"
msgstr ""

# 8d6ba54fb59d48d49cfd3c4853f8990a
#: ../../internals/contributing/writing-code/working-with-git.txt:69
msgid "Working on a ticket"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:71
msgid ""
"When working on a ticket, create a new branch for the work, and base that "
"work on upstream/master::"
msgstr ""

# 882f1ce8433f48a8833808f7d5559c6c
#: ../../internals/contributing/writing-code/working-with-git.txt:76
msgid ""
"The -b flag creates a new branch for you locally. Don't hesitate to create "
"new branches even for the smallest things - that's what they are there for."
msgstr ""

# f9525634621948ee982ecdbd3cc1e2d6
#: ../../internals/contributing/writing-code/working-with-git.txt:79
msgid "If instead you were working for a fix on the 1.4 branch, you would do::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:83
msgid ""
"Assume the work is carried on the ticket_xxxxx branch. Make some changes and "
"commit them::"
msgstr ""

# 88e8fa49ecd144abbb154d1e4e539ccf
#: ../../internals/contributing/writing-code/working-with-git.txt:88
msgid ""
"When writing the commit message, follow the :ref:`commit message guidelines "
"<committing-guidelines>` to ease the work of the committer. If you're "
"uncomfortable with English, try at least to describe precisely what the "
"commit does."
msgstr ""

# af17597009f34769a9933659fbe6f5c8
#: ../../internals/contributing/writing-code/working-with-git.txt:93
msgid ""
"If you need to do additional work on your branch, commit as often as "
"necessary::"
msgstr ""

# c3457e14c0bd41e7a88ed9507311f1b0
#: ../../internals/contributing/writing-code/working-with-git.txt:99
msgid "Publishing work"
msgstr ""

# 5554da49dedc4f789478e13cd9b386d4
#: ../../internals/contributing/writing-code/working-with-git.txt:101
msgid "You can publish your work on GitHub just by doing::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:105
msgid ""
"When you go to your GitHub page, you will notice a new branch has been "
"created."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:107
msgid ""
"If you are working on a Trac ticket, you should mention in the ticket that "
"your work is available from branch ticket_xxxxx of your GitHub repo. Include "
"a link to your branch."
msgstr ""

# c0d80296c3dc44d19d4623fec06ed7ba
#: ../../internals/contributing/writing-code/working-with-git.txt:111
msgid ""
"Note that the above branch is called a \"topic branch\" in Git parlance. You "
"are free to rewrite the history of this branch, by using ``git rebase`` for "
"example. Other people shouldn't base their work on such a branch, because "
"their clone would become corrupt when you edit commits."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:116
msgid ""
"There are also \"public branches\". These are branches other people are "
"supposed to fork, so the history of these branches should never change. Good "
"examples of public branches are the ``master`` and ``stable/A.B.x`` branches "
"in the ``django/django`` repository."
msgstr ""

# f6eddc5f618d463a91f18b38b0e7f3cb
#: ../../internals/contributing/writing-code/working-with-git.txt:121
msgid ""
"When you think your work is ready to be pulled into Django, you should "
"create a pull request at GitHub. A good pull request means:"
msgstr ""

# 08286bc8cbff46b2b06216a0d22b5af1
#: ../../internals/contributing/writing-code/working-with-git.txt:124
msgid ""
"commits with one logical change in each, following the :doc:`coding style "
"<coding-style>`,"
msgstr ""

# b95f3fade83e486fbd5b15fd57a582ca
#: ../../internals/contributing/writing-code/working-with-git.txt:127
msgid ""
"well-formed messages for each commit: a summary line and then paragraphs "
"wrapped at 72 characters thereafter -- see the :ref:`committing guidelines "
"<committing-guidelines>` for more details,"
msgstr ""

# aa0bc737003a430d9456bf9b40718501
#: ../../internals/contributing/writing-code/working-with-git.txt:131
msgid ""
"documentation and tests, if needed -- actually tests are always needed, "
"except for documentation changes."
msgstr ""

# cb8bacb35d304a5098712b974d7f6ecf
#: ../../internals/contributing/writing-code/working-with-git.txt:134
msgid ""
"The test suite must pass and the documentation must build without warnings."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:136
msgid ""
"Once you have created your pull request, you should add a comment in the "
"related Trac ticket explaining what you've done. In particular, you should "
"note the environment in which you ran the tests, for instance: \"all tests "
"pass under SQLite and MySQL\"."
msgstr ""

# 4708827c7190457bad3169830aa71afc
#: ../../internals/contributing/writing-code/working-with-git.txt:141
msgid ""
"Pull requests at GitHub have only two states: open and closed. The committer "
"who will deal with your pull request has only two options: merge it or close "
"it. For this reason, it isn't useful to make a pull request until the code "
"is ready for merging -- or sufficiently close that a committer will finish "
"it himself."
msgstr ""

# aea2429b35594aa88c3b722ced3af6d6
#: ../../internals/contributing/writing-code/working-with-git.txt:148
msgid "Rebasing branches"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:150
msgid ""
"In the example above, you created two commits, the \"Fixed ticket_xxxxx\" "
"commit and \"Added two more tests\" commit."
msgstr ""

# b63e160ba9a44ba8be8fb8499d2b085d
#: ../../internals/contributing/writing-code/working-with-git.txt:153
msgid ""
"We do not want to have the entire history of your working process in your "
"repository. Your commit \"Added two more tests\" would be unhelpful noise. "
"Instead, we would rather only have one commit containing all your work."
msgstr ""

# 48fdec5075da4434b098feb59c7be4b0
#: ../../internals/contributing/writing-code/working-with-git.txt:157
msgid ""
"To rework the history of your branch you can squash the commits into one by "
"using interactive rebase::"
msgstr ""

# ed1dc727180e418092961fbfe102fdaa
#: ../../internals/contributing/writing-code/working-with-git.txt:162
msgid ""
"The HEAD~2 above is shorthand for two latest commits. The above command will "
"open an editor showing the two commits, prefixed with the word \"pick\"."
msgstr ""

# eb693fa70f0d425dbc0718a0e0bff7c2
#: ../../internals/contributing/writing-code/working-with-git.txt:165
msgid ""
"Change \"pick\" on the second line to \"squash\" instead. This will keep the "
"first commit, and squash the second commit into the first one. Save and quit "
"the editor. A second editor window should open, so you can reword the commit "
"message for the commit now that it includes both your steps."
msgstr ""

# 9692cc1ced5d48da881fcb191f69c611
#: ../../internals/contributing/writing-code/working-with-git.txt:170
msgid ""
"You can also use the \"edit\" option in rebase. This way you can change a "
"single commit, for example to fix a typo in a docstring::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:182
msgid ""
"If your topic branch is already published at GitHub, for example if you're "
"making minor changes to take into account a review, you will need to force-"
"push the changes::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:188
msgid ""
"Note that this will rewrite history of ticket_xxxxx - if you check the "
"commit hashes before and after the operation at GitHub you will notice that "
"the commit hashes do not match anymore. This is acceptable, as the branch is "
"merely a topic branch, and nobody should be basing their work on it."
msgstr ""

# f59372016e6449a0b76af8e4a48f03b7
#: ../../internals/contributing/writing-code/working-with-git.txt:194
msgid "After upstream has changed"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:196
msgid ""
"When upstream (``django/django``) has changed, you should rebase your work. "
"To do this, use::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:202
msgid ""
"The work is automatically rebased using the branch you forked on, in the "
"example case using ``upstream/master``."
msgstr ""

# d1d3d4cea5904baabbcbc5526d35198f
#: ../../internals/contributing/writing-code/working-with-git.txt:205
msgid ""
"The rebase command removes all your local commits temporarily, applies the "
"upstream commits, and then applies your local commits again on the work."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:208
msgid ""
"If there are merge conflicts, you will need to resolve them and then use "
"``git rebase --continue``. At any point you can use ``git rebase --abort`` "
"to return to the original state."
msgstr ""

# 63870958dc644b5283eb87a3409acb1a
#: ../../internals/contributing/writing-code/working-with-git.txt:212
msgid "Note that you want to *rebase* on upstream, not *merge* the upstream."
msgstr ""

# 6c49ed4fa37d4c99bead82ae2a674fdf
#: ../../internals/contributing/writing-code/working-with-git.txt:214
msgid ""
"The reason for this is that by rebasing, your commits will always be *on top "
"of* the upstream's work, not *mixed in with* the changes in the upstream. "
"This way your branch will contain only commits related to its topic, which "
"makes squashing easier."
msgstr ""

# c268522105754055a58ff79af467a2fd
#: ../../internals/contributing/writing-code/working-with-git.txt:220
msgid "After review"
msgstr ""

# da3c7f607c234294a3b7b8b78831f2c0
#: ../../internals/contributing/writing-code/working-with-git.txt:222
msgid ""
"It is unusual to get any non-trivial amount of code into core without "
"changes requested by reviewers. In this case, it is often a good idea to add "
"the changes as one incremental commit to your work. This allows the reviewer "
"to easily check what changes you have done."
msgstr ""

# 079f506e3b2d4d0c9d8041cd29062ac4
#: ../../internals/contributing/writing-code/working-with-git.txt:227
msgid ""
"In this case, do the changes required by the reviewer. Commit as often as "
"necessary. Before publishing the changes, rebase your work. If you added two "
"commits, you would run::"
msgstr ""

# c0b2f22a93e04c86acad87178b959546
#: ../../internals/contributing/writing-code/working-with-git.txt:233
msgid ""
"Squash the second commit into the first. Write a commit message along the "
"lines of::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:241
msgid ""
"Finally, push your work back to your GitHub repository. Since you didn't "
"touch the public commits during the rebase, you should not need to force-"
"push::"
msgstr ""

# 48f2c8e9f33a44a79ca71bff72386673
#: ../../internals/contributing/writing-code/working-with-git.txt:246
msgid "Your pull request should now contain the new commit too."
msgstr ""

# abedcfa07c9e4c619cb985dcb2c42125
#: ../../internals/contributing/writing-code/working-with-git.txt:248
msgid ""
"Note that the committer is likely to squash the review commit into the "
"previous commit when committing the code."
msgstr ""

# 3b340b7a2c0544ac86a19550945aabb6
#: ../../internals/contributing/writing-code/working-with-git.txt:252
msgid "Working on a patch"
msgstr ""

# adcc61412d734fc0b95071fd8ff41a4f
#: ../../internals/contributing/writing-code/working-with-git.txt:254
msgid ""
"One of the ways that developers can contribute to Django is by reviewing "
"patches. Those patches will typically exist as pull requests on GitHub and "
"can be easily integrated into your local repository::"
msgstr ""

# 5591734dbe2e496eb500500b1c9db0e2
#: ../../internals/contributing/writing-code/working-with-git.txt:261
msgid ""
"This will create a new branch and then apply the changes from the pull "
"request to it. At this point you can run the tests or do anything else you "
"need to do to investigate the quality of the patch."
msgstr ""

# 0cb6b69a1b4b4c08bf114755104a90da
#: ../../internals/contributing/writing-code/working-with-git.txt:265
msgid ""
"For more detail on working with pull requests see the :ref:`guidelines for "
"committers <handling-pull-requests>`."
msgstr ""

# 41dba3cd85d24cf2a1618fa757ea8e6a
#: ../../internals/contributing/writing-code/working-with-git.txt:269
msgid "Summary"
msgstr ""

# 742eda982b674d32b92da7a7f7a185c6
#: ../../internals/contributing/writing-code/working-with-git.txt:271
msgid "Work on GitHub if you can."
msgstr ""

# 0449669ba11c4155a478cea8d1312146
#: ../../internals/contributing/writing-code/working-with-git.txt:272
msgid "Announce your work on the Trac ticket by linking to your GitHub branch."
msgstr ""

# a25085b4ae4d4df38cd02c1eaca0d975
#: ../../internals/contributing/writing-code/working-with-git.txt:273
msgid "When you have something ready, make a pull request."
msgstr ""

# d73e4158ac0b4cd0bd9c8e11fc931427
#: ../../internals/contributing/writing-code/working-with-git.txt:274
msgid "Make your pull requests as good as you can."
msgstr ""

# d24b9d87640d42ee9f66ffc8eac4abd6
#: ../../internals/contributing/writing-code/working-with-git.txt:275
msgid ""
"When doing fixes to your work, use ``git rebase -i`` to squash the commits."
msgstr ""

# c8463061da0e4090a6a5674fe83de36f
#: ../../internals/contributing/writing-code/working-with-git.txt:276
msgid "When upstream has changed, do ``git fetch upstream; git rebase``."
msgstr ""
