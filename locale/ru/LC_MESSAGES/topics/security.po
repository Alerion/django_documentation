# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2017-11-29 11:07+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 450e6efcb3bc430db307f8c4c1770dbd
#: ../../topics/security.txt:3
msgid "Security in Django"
msgstr "Безопасность в Django"

# 3ced7b1411754d1ea5c65646602bc260
#: ../../topics/security.txt:5
msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""
"Этот документ рассматривает возможности Django с точки зрения безопасности. "
"В документе приведены советы по защите сайтов, созданных с помощью Django."

# ff8008a6e1f84fc4990b2a7a5f3cd194
#: ../../topics/security.txt:11
msgid "Cross site scripting (XSS) protection"
msgstr "Защита от межсайтового скриптинга (XSS)"

# 2579951fa8f744149c2f36692fe5f10a
#: ../../topics/security.txt:15
msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or Web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""
"XSS атаки позволяют пользователю вставить собственные JS скрипты в браузеры "
"других пользователей. Это достигается с помощью сохранения вредоносных "
"скриптов в базе данных, которые затем запрашиваются и отображаются "
"браузерами других пользователей, или принуждением пользователя нажать на "
"ссылку, которая позволит вредоносному скрипту выполниться в браузере "
"пользователя. Однако, XSS атаки могут происходить из любого недоверенного "
"источника данных, такого как куки или веб сервисы, в случае когда данные "
"были недостаточно очищены перед их размещением на странице."

# 8e03c004720d40d185592a8d1997b91a
#: ../../topics/security.txt:23
msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""
"Использование шаблонов Django защищает вас от большинства XSS атак. Тем не "
"менее, важно понимать, какую именно защиту они обеспечивают и где находится "
"граница их возможностей."

# 58305516562c48fe800cc69603690f11
#: ../../topics/security.txt:27
msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>` "
"which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not "
"protect the following:"
msgstr ""
"Шаблоны Django :ref:`экранируют специальные символы <automatic-html-"
"escaping>`, которые обычно создают проблемы для HTML. И хотя экранирование "
"защищает пользователя от большинства видов вредоносного ввода, оно не "
"является панацеей. Например, оно не защитит от такого:"

# ecc1dbdf9f2549d28a189ce525cdf515
#: ../../topics/security.txt:38
msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML. (Quoting the attribute value would fix this case.)"
msgstr ""
"Если ``var`` содержит ``'class1 onmouseover=javascript:func()'``, то это "
"может вылиться в неавторизованный запуск JavaScript, здесь всё зависит от "
"того, как браузер интерпретирует несовершенный HTML. (Установка кавычек "
"вокруг значения атрибута решает данную проблему.)"

# 48009e527cb1418fa069eabf46fb8f72
#: ../../topics/security.txt:42
msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :tfilter:`safe` template tag, :mod:`mark_safe "
"<django.utils.safestring>`, and when autoescape is turned off."
msgstr ""
"Важно обратить особое внимание на использование ``is_safe`` совместно с "
"сторонними шаблонными тегами, с шаблонным тегом :ttag:`safe`, с :mod:"
"`mark_safe <django.utils.safestring>` и когда автоматическое экранирование "
"отключено."

# 7f7f5e62c32f42f19dc8702cd3510537
#: ../../topics/security.txt:46
msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require "
"escaping."
msgstr ""
"Дополнительно, если вы используйте шаблонную систему для вывода контента, "
"отличного от HTML, то там могут быть отдельные символы и слова, которые "
"требуют экранирования."

# 6f8ce6840d6844c48b6a974b2fc3e28b
#: ../../topics/security.txt:50
msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""
"Вы также должны быть очень осторожны при сохранении HTML в базе данных, "
"особенно в случае, когда этот HTML будет отображаться впоследствии."

# 7c18b51d014841368720c8162ba2d892
#: ../../topics/security.txt:55
msgid "Cross site request forgery (CSRF) protection"
msgstr "Защита от подделки межсайтового запроса (CSRF)"

# 4ba54a2e538e49bfbd1e60b2a81dc6a0
#: ../../topics/security.txt:57
msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials "
"of another user without that user's knowledge or consent."
msgstr ""
"CSRF атаки позволяют недобросовестному пользователю выполнять действия от "
"имени другого пользователя, без ведома последнего или его согласия."

# dabde4b25c544a4ba0b8e8e971f09dab
#: ../../topics/security.txt:60
msgid ""
"Django has built-in protection against most types of CSRF attacks, providing "
"you have :ref:`enabled and used it <using-csrf>` where appropriate. However, "
"as with any mitigation technique, there are limitations. For example, it is "
"possible to disable the CSRF module globally or for particular views. You "
"should only do this if you know what you are doing. There are other :ref:"
"`limitations <csrf-limitations>` if your site has subdomains that are "
"outside of your control."
msgstr ""
"Django обладает встроенной защитой против большинства типов CSRF атак, если "
"вы :ref:`активировали и использовали её <using-csrf>` там, где это "
"необходимо.  Однако, как это обычно бывает, существуют ограничения. "
"Например, есть возможность отключить защиту CSRF глобально или на уровне "
"отдельного представления. Такое можно делать, только если вы точно уверены в "
"своих действиях. Существуют другие :ref:`ограничения <csrf-limitations>`, "
"если у вашего сайта есть поддомены, не находящиеся под вашим управлением."

# 3edd9a105bab4bdebbf29a13dfc118b6
#: ../../topics/security.txt:68
#, fuzzy
msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a secret in "
"each POST request. This ensures that a malicious user cannot \"replay\" a "
"form POST to your website and have another logged in user unwittingly submit "
"that form. The malicious user would have to know the secret, which is user "
"specific (using a cookie)."
msgstr ""
":ref:`CSRF защита работает <how-csrf-works>`, проверяя метку с текущим "
"временем в каждом POST запросе. Она не позволяет злоумышленнику просто "
"сформировать POST запрос формы к вашему сайту и создать возможность другому "
"авторизованному пользователю нечаянно отправить эту форму. Злоумышленнику "
"потребуется знать содержимое секретной метки, которое зависит от "
"пользователя (используются куки)."

# e4b30cff46e8405c9b72472c5a7b4c0e
#: ../../topics/security.txt:74
msgid ""
"When deployed with :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` will check that the HTTP referer header is set to a "
"URL on the same origin (including subdomain and port). Because HTTPS "
"provides additional security, it is imperative to ensure connections use "
"HTTPS where it is available by forwarding insecure connection requests and "
"using HSTS for supported browsers."
msgstr ""
"При работе через :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` будет проверять, что заголовок HTTP Referer "
"установлен на URL того же источника (включая поддомен и порт). Так как HTTPS "
"предоставляет дополнительную защиту, надо всегда проверять, что соединения "
"используют его всегда, перенаправляя на HTTPS запросы по незащищённым "
"соединениям и используя HSTS для браузеров, которые это поддерживают."

# 7b6fa66f0059442e97ef545950dd92a4
#: ../../topics/security.txt:81
msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless "
"it is absolutely necessary."
msgstr ""
"Будьте очень внимательны, декорируя представления с помощью ``csrf_exempt``, "
"когда в этом нет явной необходимости."

# 930b664e2d2b4655beecbe8c0e4baf52
#: ../../topics/security.txt:87
msgid "SQL injection protection"
msgstr "Защита от внедрения SQL"

# 52be30f499864f6c915547a92261066a
#: ../../topics/security.txt:89
msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""
"Внедрение SQL — это тип атаки, когда недобросовестный пользователь имеет "
"возможность выполнить в базе данных определённый SQL запрос. Результатом "
"выполнения такого запроса может быть удаление или даже утечка данных."

#: ../../topics/security.txt:93
msgid ""
"Django's querysets are protected from SQL injection since their queries are "
"constructed using query parameterization. A query's SQL code is defined "
"separately from the query's parameters. Since parameters may be user-"
"provided and therefore unsafe, they are escaped by the underlying database "
"driver."
msgstr ""
"Забросы через Django ORM защищены от SQL-инъекции т.к. они формируются с "
"использованием параметров запроса. SQL код запроса отделен от параметров "
"запроса. Т.к. параметры запроса могут поступать от пользователя и быть не "
"безопасными, они экранируют на уровне драйвера базы данных."

# 2dd6df27ec224b1ca473109377fd4978
#: ../../topics/security.txt:98
msgid ""
"Django also gives developers power to write :ref:`raw queries <executing-raw-"
"queries>` or execute :ref:`custom sql <executing-custom-sql>`. These "
"capabilities should be used sparingly and you should always be careful to "
"properly escape any parameters that the user can control. In addition, you "
"should exercise caution when using :meth:`~django.db.models.query.QuerySet."
"extra` and :class:`~django.db.models.expressions.RawSQL`."
msgstr ""
"Django предоставляет разработчикам возможность писать :ref:`запросы напрямую "
"<executing-raw-queries>` или выполнять :ref:`собственные запросы <executing-"
"custom-sql>`. Эти возможности следует использовать умеренно и всегда "
"обращать пристальное внимание на экранирование всех параметров, которые "
"предоставлены пользователем. Также следует проявлять осторожность при "
"использовании :meth:`~django.db.models.query.QuerySet.extra` и :class:"
"`~django.db.models.expressions.RawSQL`."

# d5387e5907b94c07a09c0cbcb2e118e9
#: ../../topics/security.txt:106
msgid "Clickjacking protection"
msgstr "Защита от скликивания"

# f421de120c924fc1a339f3763f7170ff
#: ../../topics/security.txt:108
msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""
" Скликивание — это атака, при которой вредоносный сайт подменяет другой сайт "
"используя <iframe>.  В результате этой атаки ничего не подозревающий "
"пользователь принуждается к выполнению определённых действий на целевом "
"сайте."

# 7ad760b278ae4002a38746d241a7ae47
#: ../../topics/security.txt:112
msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware <django.middleware."
"clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can "
"prevent a site from being rendered inside a frame. It is possible to disable "
"the protection on a per view basis or to configure the exact header value "
"sent."
msgstr ""
"Django предоставляет :ref:`защиту от этой атаки <clickjacking-prevention>` в "
"виде модуля :mod:`X-Frame-Options <django.middleware.clickjacking."
"XFrameOptionsMiddleware>`, который, при использовании соответствующего "
"браузера, может предотвратить отображение сайта внутри фрейма. Есть "
"возможность отключить данную защиту для выбранных представлений или "
"настроить значение отправляемого заголовка."

# b4751e045054492ca0df3a342f431786
#: ../../topics/security.txt:119
msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""
"Этот функциональный слой настоятельно рекомендуется использовать на любом "
"сайте, страницы которого не должны отображаться внутри другого сайта. Можно "
"позволить такое отображение для простых страниц."

# 12b46a70479840a9b3133fd2ccd2a7c3
#: ../../topics/security.txt:126
msgid "SSL/HTTPS"
msgstr "SSL/HTTPS"

# 3c89d32871294676a6d1c654d1620afc
#: ../../topics/security.txt:128
msgid ""
"It is always better for security to deploy your site behind HTTPS. Without "
"this, it is possible for malicious network users to sniff authentication "
"credentials or any other information transferred between client and server, "
"and in some cases -- **active** network attackers -- to alter data that is "
"sent in either direction."
msgstr ""
"Лучше предоставлять доступ к вашему сайту только через HTTPS. При отсутствии "
"HTTPS злоумышленник имеет возможность перехватывать аутентификационные "
"данные или любую другую информацию, передаваемую между клиентом и сервером. "
"А в случае **активной** атаки — может даже изменять данные, передаваемые в "
"любом направлении."

# 29f6d898a5d64b9295cf2e8237d3416a
#: ../../topics/security.txt:134
msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps you may need:"
msgstr ""
"Если вам нужна защита, предоставляемая HTTPS, и на сервере произведена "
"соответствующая настройка ПО, то надо выполнить ещё несколько шагов, чтобы "
"быть уверенным в защите своей информации:"

# 5b96cf01542f4af4adeecdecfa714fb3
#: ../../topics/security.txt:137
msgid ""
"If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have "
"understood the warnings there thoroughly. Failure to do this can result in "
"CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""
"При необходимости, установите параметр конфигурации :setting:"
"`SECURE_PROXY_SSL_HEADER`, чтобы показать, что вы поняли все предупреждения. "
"Отказ от этого может привести к CSRF проблемам, а отказ сделать это "
"правильно также может быть опасен!"

# 56c1fedc6e434e5c84e9f884db899584
#: ../../topics/security.txt:142
msgid ""
"Set :setting:`SECURE_SSL_REDIRECT` to ``True``, so that requests over HTTP "
"are redirected to HTTPS."
msgstr ""
"Настройте перенаправление HTTP запросов на HTTPS, указав ``True`` в :setting:"
"`SECURE_SSL_REDIRECT`."

# 4fe3b8e457ca460e81ee8716f0d06753
#: ../../topics/security.txt:145
msgid ""
"Please note the caveats under :setting:`SECURE_PROXY_SSL_HEADER`. For the "
"case of a reverse proxy, it may be easier or more secure to configure the "
"main Web server to do the redirect to HTTPS."
msgstr ""
"Пожалуйста, обратите внимание на недостатки :setting:"
"`SECURE_PROXY_SSL_HEADER`. Для случая обратного прокси, может быть проще или "
"более безопасно настроить главный веб сервер для перенаправление запросов по "
"HTTPS."

# 247d2dbbc5e04fe6b095c75f579ca71a
#: ../../topics/security.txt:149
msgid "Use 'secure' cookies."
msgstr "Использование 'безопасных' куки."

# 6ee97d8f690a4921939062ac0362a5f1
#: ../../topics/security.txt:151
msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason, "
"you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to "
"only send these cookies over HTTPS connections. Note that this will mean "
"that sessions will not work over HTTP, and the CSRF protection will prevent "
"any POST data being accepted over HTTP (which will be fine if you are "
"redirecting all HTTP traffic to HTTPS)."
msgstr ""
"Если браузер изначально подключается через HTTP, что характерно для "
"большинства браузеров, есть возможность утечки существующих кук. По этой "
"причине вам сделать установить параметры :setting:`SESSION_COOKIE_SECURE` и :"
"setting:`CSRF_COOKIE_SECURE` в ``True``. Это заставить браузер отправлять "
"такие куки только через HTTPS. Следует отметить, это сделает невозможным "
"работу сессий через HTTP, а CSRF защита не будет принимать POST данные, "
"полученные через HTTP (это решается с помощью перенаправления HTTP трафика "
"через HTTPS)."

# 444151bb90544e5bbd2cfb06c4ecae1f
#: ../../topics/security.txt:160
msgid "Use :ref:`http-strict-transport-security` (HSTS)"
msgstr "Использование :ref:`http-strict-transport-security` (HSTS)"

# d1787643929144a8873c7933f777087a
#: ../../topics/security.txt:162
msgid ""
"HSTS is an HTTP header that informs a browser that all future connections to "
"a particular site should always use HTTPS. Combined with redirecting "
"requests over HTTP to HTTPS, this will ensure that connections always enjoy "
"the added security of SSL provided one successful connection has occurred. "
"HSTS may either be configured with :setting:`SECURE_HSTS_SECONDS`, :setting:"
"`SECURE_HSTS_INCLUDE_SUBDOMAINS`, and :setting:`SECURE_HSTS_PRELOAD`, or on "
"the Web server."
msgstr ""
"HSTS является HTTP заголовком, который информирует браузер, что все "
"следующие соединения к конкретному сайту всегда должны использовать HTTPS. "
"Дополняя это перенаправлением HTTP запросов на HTTPS, мы получаем "
"дополнительную защиту от использования SSL. HSTS может быть настроен с "
"помощью настроек :setting:`SECURE_HSTS_SECONDS`, :setting:"
"`SECURE_HSTS_INCLUDE_SUBDOMAINS` и :setting:`SECURE_HSTS_PRELOAD`, или на "
"web-сервере."

# 18e68e9c25e64111a99118d65cb1b2e3
#: ../../topics/security.txt:173
msgid "Host header validation"
msgstr "Проверка заголовка хоста"

# 9db85548f445459c97273708b1f9f5df
#: ../../topics/security.txt:175
msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, a fake ``Host`` value can be used for Cross-Site Request "
"Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""
"Django использует заголовок ``Host``, предоставляемый клиентом, для создания "
"URL в определённых случаях. Несмотря на то, что эти данные безопасны с точки "
"зрения Cross Site Scripting атак, поддельный заголовок ``Host`` может быть "
"использован для атак CSRF, подмены кэша и для подмены ссылок в сообщениях "
"электронной почты."

# 0b46467a5b044256b4f6feebfa5010e0
#: ../../topics/security.txt:180
msgid ""
"Because even seemingly-secure web server configurations are susceptible to "
"fake ``Host`` headers, Django validates ``Host`` headers against the :"
"setting:`ALLOWED_HOSTS` setting in the :meth:`django.http.HttpRequest."
"get_host()` method."
msgstr ""
"Поскольку даже по-видимому безопасные конфигурации веб-сервера восприимчивы "
"к поддельным заголовкам ``Host`` заголовки, Django проверяет этот заголовок "
"относительно параметра конфигурации :setting:`ALLOWED_HOSTS` с помощью "
"метода :meth:`django.http.HttpRequest.get_host()`."

# d42ac4a186954196b508970e16a311cf
#: ../../topics/security.txt:185
msgid ""
"This validation only applies via :meth:`~django.http.HttpRequest."
"get_host()`; if your code accesses the ``Host`` header directly from "
"``request.META`` you are bypassing this security protection."
msgstr ""
"Эта проверка применяется только через :meth:`~django.http.HttpRequest."
"get_host()`. Если ваш код получает содержимое заголовка ``Host`` напрямую из "
"``request.META``, то вы игнорируете эту защиту."

# f7e855e01f644f05a11a7cf977a1b20c
#: ../../topics/security.txt:189
msgid "For more details see the full :setting:`ALLOWED_HOSTS` documentation."
msgstr ""
"Для подробностей смотрите полную документацию на параметр конфигурации :"
"setting:`ALLOWED_HOSTS`."

# 0c9af4e246a54fb291fbc5cb3e387c69
#: ../../topics/security.txt:193
msgid ""
"Previous versions of this document recommended configuring your web server "
"to ensure it validates incoming HTTP ``Host`` headers. While this is still "
"recommended, in many common web servers a configuration that seems to "
"validate the ``Host`` header may not in fact do so. For instance, even if "
"Apache is configured such that your Django site is served from a non-default "
"virtual host with the ``ServerName`` set, it is still possible for an HTTP "
"request to match this virtual host and supply a fake ``Host`` header. Thus, "
"Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather "
"than relying on web server configuration."
msgstr ""
"Предыдущие версии этого документа рекомендовали настраивать ваш веб сервер "
"на проверку входящих HTTP заголовков ``Host``. Рекомендация всё ещё в силе, "
"на многих веб-серверах используется конфигурация, которая не проверяет "
"заголовок ``Host``, хотя по всем признакам должна это делать. Например, даже "
"если Apache настроен таким образом, что ваш сайт работает на нестандартном "
"виртуальном узле с установленным ``ServerName``, всё ещё есть возможность "
"предоставить поддельный заголовок для этого узла. Таким образом, Django "
"теперь требует явного определения параметра конфигурации :setting:"
"`ALLOWED_HOSTS`, не доверяя конфигурации самого веб сервера."

# e29bd8a87c184967bf95e925fe38dee8
#: ../../topics/security.txt:203
msgid ""
"Additionally, Django requires you to explicitly enable support for the ``X-"
"Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST` setting) if "
"your configuration requires it."
msgstr ""
"Дополнительно Django требует явную активацию поддержки заголовка ``X-"
"Forwarded-Host`` (через параметр конфигурации :setting:"
"`USE_X_FORWARDED_HOST`), если ваша конфигурация в нём нуждается."

#: ../../topics/security.txt:208
msgid "Referrer policy"
msgstr ""

#: ../../topics/security.txt:210
msgid ""
"Browsers use the ``Referer`` header as a way to send information to a site "
"about how users got there. By setting a *Referrer Policy* you can help to "
"protect the privacy of your users, restricting under which circumstances the "
"``Referer`` header is set. See :ref:`the referrer policy section of the "
"security middleware reference <referrer-policy>` for details."
msgstr ""

# 18d4c9d3d5f944508764dd903491df7b
#: ../../topics/security.txt:217
msgid "Session security"
msgstr "Безопасность сессий"

# 5f95461328e84c81bcf7e1db508405b1
#: ../../topics/security.txt:219
msgid ""
"Similar to the :ref:`CSRF limitations <csrf-limitations>` requiring a site "
"to be deployed such that untrusted users don't have access to any "
"subdomains, :mod:`django.contrib.sessions` also has limitations. See :ref:"
"`the session topic guide section on security <topics-session-security>` for "
"details."
msgstr ""
"Аналогично требованиям :ref:`ограничений CSRF <csrf-limitations>`, чтобы "
"сайт был настроен так, чтобы недоверенные пользователи не имели доступа ни к "
"одному поддомену, :mod:`django.contrib.sessions` также имеет ограничения. "
"Обратитесь к :ref:`разделу по безопасной настройке сессий <topics-session-"
"security>` для подробностей."

# c41a5873cc024936b8c07e40f9b680aa
#: ../../topics/security.txt:227
msgid "User-uploaded content"
msgstr "Контент, загружаемый пользователями"

# f7e10f9ea6c44acea5e6705fc202980c
#: ../../topics/security.txt:230
msgid ""
"Consider :ref:`serving static files from a cloud service or CDN <staticfiles-"
"from-cdn>` to avoid some of these issues."
msgstr ""
"Обратите внимание на :ref:`раздачу файлов из облачного сервиса или CDN "
"<staticfiles-from-cdn>` для избежания некоторых из этих проблем."

# 271807741fae4ffe97fc0a3f4658bddf
#: ../../topics/security.txt:233
msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your Web server configuration to a reasonable size in order "
"to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""
"Если ваш сайт принимает файлы, настоятельно советуем ограничить размер таких "
"загрузок в конфигурации веб сервера для предотвращения атак на отказ сервиса "
"(DOS). В случае Apache это легко можно сделать с помощью директивы "
"LimitRequestBody_."

# 369fcbc5ff5a45949ab0fe9a364d6051
#: ../../topics/security.txt:238
msgid ""
"If you are serving your own static files, be sure that handlers like "
"Apache's ``mod_php``, which would execute static files as code, are "
"disabled. You don't want users to be able to execute arbitrary code by "
"uploading and requesting a specially crafted file."
msgstr ""
"Если вы самостоятельно раздаете статические файлы, убедитесь, что "
"обработчики, как ``mod_php`` в Apache, который будет выполнять статические "
"файлы в виде кода, будут отключены. Вы же не хотите, чтобы пользователи "
"могли выполнить произвольный код путем загрузки и запроса специально "
"созданного файла."

# 8ee62e36aeef4311b881d3e77a552b2f
#: ../../topics/security.txt:243
msgid ""
"Django's media upload handling poses some vulnerabilities when that media is "
"served in ways that do not follow security best practices. Specifically, an "
"HTML file can be uploaded as an image if that file contains a valid PNG "
"header followed by malicious HTML. This file will pass verification of the "
"library that Django uses for :class:`~django.db.models.ImageField` image "
"processing (Pillow). When this file is subsequently displayed to a user, it "
"may be displayed as HTML depending on the type and configuration of your web "
"server."
msgstr ""
"Обработка загрузки медиа файлов в Django имеет некоторые уязвимости, если "
"медиа файлы раздаются без учета некоторых правил безопасности. В частности, "
"HTML файл может быть загружен в виде изображения, если этот файл содержит "
"правильный заголовок PNG с последующим вредоносным HTML. Этот файл будет "
"проходить проверку библиотеками, которые Django использует для обработки "
"изображений (Pillow) в :class:`~django.db.models.ImageField`. Когда этот "
"файл впоследствии отображается для пользователя, он может отображаться как "
"HTML в зависимости от типа и конфигурации веб-сервера."

# 2cd2b93d55994f908bae309726856ffe
#: ../../topics/security.txt:252
msgid ""
"No bulletproof technical solution exists at the framework level to safely "
"validate all user uploaded file content, however, there are some other steps "
"you can take to mitigate these attacks:"
msgstr ""
"Не существует идеального технического решения на уровне Django для "
"безопасной проверки всех типов файлов, которые могут загрузить другие "
"пользователи. Однако, можно предпринять некоторые другие способы, чтобы "
"обезопасить себя от атаки:"

# 55b36b89c98b4227a167a7873a0e45a3
#: ../../topics/security.txt:256
msgid ""
"One class of attacks can be prevented by always serving user uploaded "
"content from a distinct top-level or second-level domain. This prevents any "
"exploit blocked by `same-origin policy`_ protections such as cross site "
"scripting. For example, if your site runs on ``example.com``, you would want "
"to serve uploaded content (the :setting:`MEDIA_URL` setting) from something "
"like ``usercontent-example.com``. It's *not* sufficient to serve content "
"from a subdomain like ``usercontent.example.com``."
msgstr ""
"Один класс атак можно предотвратить путем раздачи медиа файлов с отдельного "
"домена верхнего уровня или второго уровня. Это предотвращает любые "
"эксплойты, которые могут быть заблокированы `same-origin policy`_, таких как "
"межсайтовый скриптинг. Например, если ваш сайт работает на ``example.com``, "
"вам следует раздавать медиа файлы (настройка :setting:`MEDIA_URL`) с другого "
"домена, например ``usercontent-example.com``. Но *не* достаточно раздавать "
"медиа файлы с поддомен вида ``usercontent.example.com``."

# 51e29388d28340bfb3927c936a9189e4
#: ../../topics/security.txt:264
msgid ""
"Beyond this, applications may choose to define a whitelist of allowable file "
"extensions for user uploaded files and configure the web server to only "
"serve such files."
msgstr ""
"Помимо этого, приложения могут определять белый список допустимых расширений "
"файлов для загружаемых пользователем файлов и настроить веб-сервер чтобы "
"раздавать только такие файлы."

# 4b86731ffeb045a8b9e9fbff35703764
#: ../../topics/security.txt:273
msgid "Additional security topics"
msgstr "Дополнительные вопросы безопасности"

# c7d617a71f98424c9fdea729d970d12d
#: ../../topics/security.txt:275
msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the Web server, operating system and other components."
msgstr ""
"Несмотря на то, что Django предоставляет защиту прямо из коробки, правильная "
"установка вашего приложения всё ещё имеет значение. Также важно иметь "
"правильно настроенный веб сервер, операционную систему и другие компоненты."

# 36167d243dc042a5b6eeaaa9c246c3ed
#: ../../topics/security.txt:279
msgid ""
"Make sure that your Python code is outside of the Web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""
"Код вашего приложения должен находиться вне корня веб сервера. Это не "
"позволит случайно отобразить его в виде текста или выполнить его."

# aae5bf9cdd424f7b940d02a36639c208
#: ../../topics/security.txt:282
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""
"Будьте осторожны с любыми файлами, которые :ref:`загружены пользователями "
"<file-upload-security>`."

# 31412de1cb9943d2bb101dc5dddd2d2e
#: ../../topics/security.txt:283
msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or Web server module to throttle these requests."
msgstr ""
"Django не ограничивает количество запросов при аутентификации пользователей. "
"Для того, чтобы защититься от перебора логина/пароля, вы можете поставить "
"дополнительное приложение для Django или модуль для веб сервера, чтобы "
"ограничивать такие запросы."

# 949ca73bcfbf450fa649d489aef1fec0
#: ../../topics/security.txt:286
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr "Храните содержимое параметра :setting:`SECRET_KEY` в секрете."

# 6a22091ac28548af8e2f40e3ff29ac91
#: ../../topics/security.txt:287
msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""
"Хорошей идеей будет ограничить доступ к вашей системе кэширования и к базе "
"данных с помощью фаервола."

#: ../../topics/security.txt:289
msgid ""
"Take a look at the Open Web Application Security Project (OWASP) `Top 10 "
"list`_ which identifies some common vulnerabilities in web applications. "
"While Django has tools to address some of the issues, other issues must be "
"accounted for in the design of your project."
msgstr ""
"Обратите внимание на список `Топ 10 уязвимостей <https://www.owasp.org/index."
"php/Top_10_2013-Top_10>`_ на сайте Open Web Application Security Project "
"(OWASP). Хотя Django содержит инструменты для защиты от некоторых из них, "
"остальные должны быть учтены в архитектуре вашего проекта."

#~ msgid "Markup library"
#~ msgstr "Библиотека Markup"

#~ msgid ""
#~ "If you use :mod:`django.contrib.markup`, you need to ensure that the "
#~ "filters are only used on trusted input, or that you have correctly "
#~ "configured them to ensure they do not allow raw HTML output. See the "
#~ "documentation of that module for more information."
#~ msgstr ""
#~ "При использовании :mod:`django.contrib.markup`, удостоверьтесь что все "
#~ "аргументы для фильтров безопасны, или используйте их таким образом, что "
#~ "бы весь HTML результат был экранирован. Подробности смотрите в "
#~ "документации модуля."
