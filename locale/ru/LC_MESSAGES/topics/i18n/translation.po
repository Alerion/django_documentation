# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2016-03-22 12:35+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 6a364a1d691c40209dd51147f889fe51
#: ../../topics/i18n/translation.txt:3
msgid "Translation"
msgstr "Перевод"

# 894479b86efc4f6a9bc7d634eac4aaca
#: ../../topics/i18n/translation.txt:8
msgid "Overview"
msgstr "Введение"

# 760d02a4f0d94b43937d58910063804c
#: ../../topics/i18n/translation.txt:10
msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"number of hooks to your Python code and templates. These hooks are called :"
"term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for "
"this text is available in that language.\" It's your responsibility to mark "
"translatable strings; the system can only translate strings it knows about."
msgstr ""
"Для наделения вашего Django проекта возможностью представлять контент на "
"разных языках потребуется немного доработать код и шаблоны. Под доработкой "
"имеется в виду добавление :term:`переводимых строк <translation string>`. "
"Они говорят Django: \"Этот текст должен быть переведён на язык конечного "
"пользователя, если для этого языка предоставлен перевод.\" Вашей задачей "
"является маркировка соответствующих строк, как подлежащих переводу. Система "
"может обеспечивать перевод только тех строк, на которые вы ей указали."

# b8aa081a41bb4879bd926a3a551b4b07
#: ../../topics/i18n/translation.txt:17
msgid ""
"Django then provides utilities to extract the translation strings into a :"
"term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""
"Django предоставляет утилиты для извлечения переводимых строк в :term:`файл "
"сообщений`. Этот файл является удобным средством, которое позволяет "
"переводчикам делать свою работу. После того, как перевод строк этого файла "
"завершён, файл должен быть скомпилирован. Этот процесс обеспечивает набор "
"средств GNU gettext."

# 44d5b91485f7476cbbcf33c1e9a1a434
#: ../../topics/i18n/translation.txt:23
msgid ""
"Once this is done, Django takes care of translating Web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""
"При наличии скомпилированного ресурса с переводом строк, Django обеспечивает "
"автоматический перевод веб приложений для каждого доступного языка, в "
"соответствии с языковыми настройками пользователя."

# abe7cb329d7643168f352080d85b2c36
#: ../../topics/i18n/translation.txt:26
msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery."
msgstr ""
"Механизм интернационализации Django включен по умолчанию, т.е. в "
"определённых местах фреймворка всегда присутствует небольшая трата ресурсов "
"на его работу. Если вы не используете интернационализацию, то вам следует "
"потратить пару секунд на установку :setting:`USE_I18N = False <USE_I18N>` в "
"файле конфигурации. Это позволит Django выполнять некоторую оптимизацию, не "
"подгружая библиотеки интернационализации."

# 670c47f22c7f4688b4ae727c25f6fb3d
#: ../../topics/i18n/translation.txt:34
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls if Django should implement format localization. See :doc:`/topics/"
"i18n/formatting` for more details."
msgstr ""
"Есть также независимый, но связанный параметр :setting:`USE_L10N`, который "
"управляет применением локального форматирования для данных. Обратитесь к :"
"doc:`/topics/i18n/formatting` для получения подробностей."

# e352594397cb441ea88dc46d413a310f
#: ../../topics/i18n/translation.txt:40
#, fuzzy
msgid ""
"Make sure you've activated translation for your project (the fastest way is "
"to check if :setting:`MIDDLEWARE` includes :mod:`django.middleware.locale."
"LocaleMiddleware`). If you haven't yet, see :ref:`how-django-discovers-"
"language-preference`."
msgstr ""
"Удостоверьтесь, что вы активировали механизм перевода для вашего проекта, "
"для этого достаточно проверить наличие :mod:`django.middleware.locale."
"LocaleMiddleware` в параметре конфигурации :setting:`MIDDLEWARE_CLASSES`. "
"Если механизм не активирован, то обратитесь к :ref:`how-django-discovers-"
"language-preference`."

# 4e0aef0b83b1453b81bd666d0a8bcd65
#: ../../topics/i18n/translation.txt:46
msgid "Internationalization: in Python code"
msgstr "Интернационализация в коде"

# ba4504303a0844008f9e65d3444d3cb7
#: ../../topics/i18n/translation.txt:49
msgid "Standard translation"
msgstr "Обычный перевод"

# 1bef5dcd40c049339b2bf3b93f3c1b76
#: ../../topics/i18n/translation.txt:51
msgid ""
"Specify a translation string by using the function :func:`~django.utils."
"translation.ugettext`. It's convention to import this as a shorter alias, "
"``_``, to save typing."
msgstr ""
"Укажите переводимую строку с помощью функции :func:`~django.utils."
"translation.ugettext`. Удобно импортировать её с помощью краткого "
"псевдонима, ``_`` (символ подчеркивания), чтобы сократить затраты на ввод."

# 9004d3d0e5f0447a8f94b1a357f3daa0
#: ../../topics/i18n/translation.txt:56
msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""
"Модуль ``gettext`` стандартной библиотеки языка Python определяет ``_()`` в "
"качестве псевдонима для ``gettext()`` в глобальном пространстве имён. В "
"Django мы решили не следовать этой практике по следующим причинам:"

# ebe13eaed3cb4e10aea8e192e71cbd99
#: ../../topics/i18n/translation.txt:60
msgid ""
"For international character set (Unicode) support, :func:`~django.utils."
"translation.ugettext` is more useful than ``gettext()``. Sometimes, you "
"should be using :func:`~django.utils.translation.ugettext_lazy` as the "
"default translation method for a particular file. Without ``_()`` in the "
"global namespace, the developer has to think about which is the most "
"appropriate translation function."
msgstr ""
"Для поддержки интернационального набора символов (Unicode), функция :func:"
"`~django.utils.translation.ugettext` гораздо более полезна, чем "
"``gettext()``. Иногда вам потребуется использовать функцию :func:`~django."
"utils.translation.ugettext_lazy` в качестве стандартного метода выделения "
"переводимой строки в определённом файле. При отсутствии ``_()`` в глобальном "
"пространстве имён разработчик сам решает какая функция будет ему наиболее "
"полезна в каждом конкретном случае."

# ec442c1241724b28af3f76ba1aaf7b23
#: ../../topics/i18n/translation.txt:68
msgid ""
"The underscore character (``_``) is used to represent \"the previous result"
"\" in Python's interactive shell and doctest tests. Installing a global "
"``_()`` function causes interference. Explicitly importing ``ugettext()`` as "
"``_()`` avoids this problem."
msgstr ""
"Символ подчёркивания (``_``) используется в интерактивном интерпретаторе "
"Python и в доктестах в качестве \"результата предыдущей операции\". "
"Определение глобальной функции ``_()`` приведёт к путанице. Явное "
"импортирование ``ugettext()`` в виде ``_()`` решает эту проблему."

#: ../../topics/i18n/translation.txt:73
msgid "What functions may be aliased as ``_``?"
msgstr ""

#: ../../topics/i18n/translation.txt:75
msgid ""
"Because of how ``xgettext`` (used by :djadmin:`makemessages`) works, only "
"functions that take a single string argument can be imported as ``_``:"
msgstr ""

# 49b92d47dda247d48791d92765178da1
#: ../../topics/i18n/translation.txt:78
#, fuzzy
msgid ":func:`~django.utils.translation.gettext`"
msgstr ""
"Перевод подстроки выполняется с помощью функции :func:`~django.utils."
"translation.ugettext`."

# 49b92d47dda247d48791d92765178da1
#: ../../topics/i18n/translation.txt:79
#, fuzzy
msgid ":func:`~django.utils.translation.gettext_lazy`"
msgstr ""
"Перевод подстроки выполняется с помощью функции :func:`~django.utils."
"translation.ugettext`."

# 49b92d47dda247d48791d92765178da1
#: ../../topics/i18n/translation.txt:80
#, fuzzy
msgid ":func:`~django.utils.translation.ugettext`"
msgstr ""
"Перевод подстроки выполняется с помощью функции :func:`~django.utils."
"translation.ugettext`."

# 49b92d47dda247d48791d92765178da1
#: ../../topics/i18n/translation.txt:81
#, fuzzy
msgid ":func:`~django.utils.translation.ugettext_lazy`"
msgstr ""
"Перевод подстроки выполняется с помощью функции :func:`~django.utils."
"translation.ugettext`."

# 6b514d6ecde74654843b9ab9005d90be
#: ../../topics/i18n/translation.txt:83
msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""
"В данном примере, текст ``\"Welcome to my site.\"`` помечается как "
"переводимая строка::"

# 03d49d5ecb37415e86b23064b7fbcd2c
#: ../../topics/i18n/translation.txt:93
msgid ""
"Obviously, you could code this without using the alias. This example is "
"identical to the previous one::"
msgstr ""
"Очевидно, что вы можете делать тоже самое без использования псевдонима. Этот "
"пример идентичен предыдущему::"

# 71977c9d887f4add80b7fd081982f54c
#: ../../topics/i18n/translation.txt:103
msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""
"Перевод работает с вычисляемыми значениями. Этот пример идентичен предыдущим "
"двум::"

# a3f94f45b85543fe898cda8747bae37c
#: ../../topics/i18n/translation.txt:111
msgid "Translation works on variables. Again, here's an identical example::"
msgstr "Перевод работает с переменными. И снова, аналогичный пример::"

# 230dcc75443d4852b3635e88d83d1b5f
#: ../../topics/i18n/translation.txt:118
msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin:"
"`django-admin makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""
"(Проблема при использовании переменных или вычисляемых значений, как в "
"предыдущих двух примерах, в том, что утилита для поиска переводимых строк, :"
"djadmin:`django-admin makemessages <makemessages>`, не сможет найти эти "
"строки. Далее мы подробно рассмотрим :djadmin:`makemessages`.)"

# 62414ccdf2f343a4ac4b8e7eec9373f4
#: ../../topics/i18n/translation.txt:123
msgid ""
"The strings you pass to ``_()`` or ``ugettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""
"Строка, передаваемая в ``_()`` или ``ugettext()``, может принимать "
"заполнители (placeholders), определённые стандартом языка Python для строк. "
"Пример::"

# 8950c72e94614eada8cab7191a994e20
#: ../../topics/i18n/translation.txt:130
msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November 26."
"\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` -- "
"with the month and the day placeholders swapped."
msgstr ""
"Такой подход позволяет при необходимости менять порядок слов при переводе. "
"Например, английский текст ``\"Today is November 26.\"`` может быть "
"переведён на испанский как ``\"Hoy es 26 de Noviembre.\"``. Как видно, "
"заполнители для месяца и дня поменялись местами."

# 51bd7a2b54b24051aa1a7745b6010380
#: ../../topics/i18n/translation.txt:135
msgid ""
"For this reason, you should use named-string interpolation (e.g., ``"
"%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) "
"whenever you have more than a single parameter. If you used positional "
"interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""
"По этой причине, вы должны использовать именованные заполнители (т.е., ``"
"%(day)s``) вместо позиционных (т.е., ``%s`` или ``%d``), в случае, если в "
"строку подставляется больше одного параметра. При использовании позиционных "
"заполнителей переводчики не будут иметь возможность изменять оригинальный "
"порядок слов."

# a9fd890574204a80b46cbf5de5fedbc4
#: ../../topics/i18n/translation.txt:143
msgid "Comments for translators"
msgstr "Комментарии для переводчиков"

# 442f425a51564b4f921bfb5743828930
#: ../../topics/i18n/translation.txt:145
msgid ""
"If you would like to give translators hints about a translatable string, you "
"can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""
"Если необходимо дать переводчикам подсказку по переводимой строке, вы можете "
"добавить комментарий с префиксом ``Translators`` в строке предшествующей "
"переводимой, например::"

# aee9211b2b8444ec8b615ce18788d081
#: ../../topics/i18n/translation.txt:153
msgid ""
"The comment will then appear in the resulting ``.po`` file associated with "
"the translatable construct located below it and should also be displayed by "
"most translation tools."
msgstr ""
"Комментарий появится в результирующем ``.po`` файле, который связан с "
"переводимой конструкцией расположенной далее, и должен быть отображён "
"большинством средств перевода."

# 4a6a0869130f46869fad1a5449ab91c0
#: ../../topics/i18n/translation.txt:157
msgid ""
"Just for completeness, this is the corresponding fragment of the resulting "
"``.po`` file:"
msgstr "Для полноты изложения приведём соответствующий фрагмент ``.po`` файла:"

# 575df41a00c943b392106411a4bdb224
#: ../../topics/i18n/translation.txt:167
msgid ""
"This also works in templates. See :ref:`translator-comments-in-templates` "
"for more details."
msgstr ""
"Этот подход также работает в шаблонах. Обратитесь к :ref:`translator-"
"comments-in-templates` для подробностей."

# 73825a7dea3a423cb0b617825b613d19
#: ../../topics/i18n/translation.txt:171
msgid "Marking strings as no-op"
msgstr "Пометка строк как no-op"

# 8c5417a164ca430aae4ec8d76ce557b0
#: ../../topics/i18n/translation.txt:173
msgid ""
"Use the function :func:`django.utils.translation.ugettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""
"Используйте функцию :func:`django.utils.translation.ugettext_noop()` для "
"пометки строки как переводимой, но не переводя её. Такая строка будет "
"переведена позже с помощью переменной."

# d4232908790441bb9295c3e9e36ec670
#: ../../topics/i18n/translation.txt:177
msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings "
"in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""
"Используйте этот подход в случае, когда у вас есть строковые константы, "
"которые должны быть сохранены в исходном коде по причине того, что они "
"изменяются системой или пользователями Примером могут служить строки из базы "
"данных, которые следует переводить в самый последний момент, перед "
"непосредственным их отображением пользователю."

# 32ce1b6d946f4e9ca015467106f18302
#: ../../topics/i18n/translation.txt:183
msgid "Pluralization"
msgstr "Множественное число"

# 62d329a0462e48a5b5da404df1f1f5c2
#: ../../topics/i18n/translation.txt:185
msgid ""
"Use the function :func:`django.utils.translation.ungettext()` to specify "
"pluralized messages."
msgstr ""
"Используйте функцию :func:`django.utils.translation.ungettext()` для "
"указания сообщений во множественном числе."

# dd0c5a070232432aa281ef72bbcf97d7
#: ../../topics/i18n/translation.txt:188
msgid ""
"``ungettext`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""
"Функция ``ungettext`` принимает три аргумента: строка в единственном числе, "
"строка во множественном числе и количество объектов."

# e699db39d85447bf967521cd2d74db4d
#: ../../topics/i18n/translation.txt:191
msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is "
"greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""
"Эта функция очень полезна, когда требуется локализовать Django приложение на "
"языки, в которых количество и сложность `множественных форм <https://www.gnu."
"org/software/gettext/manual/gettext.html#Plural-forms>`_ превышает два "
"варианта как в английском языке ('object' для единственного числа и "
"'objects' для всех остальных случаем, когда ``count`` отличается от единицы, "
"независимо от своего значения.)"

# e19aec5a81384b4e9897b9a2be8da486
# 44c8c78b1dae4b159991e218ee3449f4
# 8350bf47ee7d49b0b2afe2d64f63aebf
#: ../../topics/i18n/translation.txt:198 ../../topics/i18n/translation.txt:300
#: ../../topics/i18n/translation.txt:2025
msgid "For example::"
msgstr "Например::"

# 89c2705be335428f960d477fb876e251
#: ../../topics/i18n/translation.txt:212
msgid ""
"In this example the number of objects is passed to the translation languages "
"as the ``count`` variable."
msgstr ""
"В этом примере количество объектов передаётся в перевод в переменной "
"``count``."

# 7619712c35414458b64675b6d411dbb2
#: ../../topics/i18n/translation.txt:215
msgid ""
"Note that pluralization is complicated and works differently in each "
"language. Comparing ``count`` to 1 isn't always the correct rule. This code "
"looks sophisticated, but will produce incorrect results for some languages::"
msgstr ""
"Следует отметить, что приведение существительного к множественному числу "
"является непростой задачей и работает по-разному в каждом языке. Сравнение "
"``count`` с 1 не всегда будет корректным правилом. Следующий код выглядит "
"разумно, но будет выдавать неверный результат для некоторых языков::"

# ab431a3acb554b22bd9865577931930b
#: ../../topics/i18n/translation.txt:237
msgid ""
"Don't try to implement your own singular-or-plural logic, it won't be "
"correct. In a case like this, consider something like the following::"
msgstr ""
"Не стоит пытаться реализовать собственную логику для создания множественного "
"числа, она не будет работать корректно. В этом случае, рассмотрите "
"использование следующего подхода::"

# 9bcb6227d8f1410a8997516cd1b3d43f
#: ../../topics/i18n/translation.txt:253
msgid ""
"When using ``ungettext()``, make sure you use a single name for every "
"extrapolated variable included in the literal. In the examples above, note "
"how we used the ``name`` Python variable in both translation strings. This "
"example, besides being incorrect in some languages as noted above, would "
"fail::"
msgstr ""
"При использовании ``ungettext()``, проверьте, что вы используете уникальное "
"имя для каждой переменной, указанной в строке. В вышеприведённом примере, "
"обратите внимание на то, как мы используем переменную ``name`` в обоих "
"строках. Следующий пример, будучи неверным для некоторых языков, выдаст "
"ошибку::"

# a68ebac683ec4dae8b7be89b806ee792
#: ../../topics/i18n/translation.txt:269
msgid ""
"You would get an error when running :djadmin:`django-admin compilemessages "
"<compilemessages>`::"
msgstr ""
"Вы получите ошибку при запуске :djadmin:`django-admin compilemessages "
"<compilemessages>`::"

#: ../../topics/i18n/translation.txt:274
msgid "Plural form and po files"
msgstr "Множественная форма и файлы перевода"

#: ../../topics/i18n/translation.txt:276
msgid ""
"Django does not support custom plural equations in po files. As all "
"translation catalogs are merged, only the plural form for the main Django po "
"file (in ``django/conf/locale/<lang_code>/LC_MESSAGES/django.po``) is "
"considered. Plural forms in all other po files are ignored. Therefore, you "
"should not use different plural equations in your project or application po "
"files."
msgstr ""
"Django не поддерживает собственные правила множественного числа в файлах "
"перевода. Так как все файлы перевода объединяются вместе, будет "
"использоваться только правило главного файла перевода Django (из ``django/"
"conf/locale/<lang_code>/LC_MESSAGES/django.po``). Правила множественной "
"формы всех остальных *.po файлов будут проигнорированы. Поэтому вам не "
"следует использовать их в вашем проекте и приложении."

# 6839c93d6fdc419cbc340aac249f67ce
#: ../../topics/i18n/translation.txt:286
msgid "Contextual markers"
msgstr "Контекстные маркеры"

# 80d5fe6c40f04c1d9e17b5ed01b0109b
#: ../../topics/i18n/translation.txt:288
msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which "
"refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the :func:`django."
"utils.translation.pgettext()` function, or the :func:`django.utils."
"translation.npgettext()` function if the string needs pluralization. Both "
"take a context string as the first variable."
msgstr ""
"Некоторые слова имеют множество значений, такие как ``\"May\"`` в английском "
"языке, которое может означать название месяца или глагол. Для упрощения "
"жизни переводчиков вы можете использовать функцию :func:`django.utils."
"translation.pgettext()` или функцию :func:`django.utils.translation."
"npgettext()`, для множественного числа. Обе функции принимают описание "
"контекста в качестве первого аргумента."

# 42650b9e5ca941a7854172fa854013c3
#: ../../topics/i18n/translation.txt:295
msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there "
"are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different "
"translation for each of them."
msgstr ""
"В результате, в файле ``.po``, переводимая строка появится столько раз, "
"сколько есть различных контекстов для неё (контекстная информация будет "
"указана в строке ``msgctxt``), позволяя перевести каждую из них в "
"соответствии со смыслом."

# 6a0847db235e49348b3b9d490ba4d8d3
#: ../../topics/i18n/translation.txt:306
msgid "or::"
msgstr "или::"

# 783df8d91daa4a1d9ed938dfe3497e35
#: ../../topics/i18n/translation.txt:315
msgid "will appear in the ``.po`` file as:"
msgstr "появится в файле ``.po`` в виде:"

# 0930ec5502a54b03bc1171014d29032e
#: ../../topics/i18n/translation.txt:323
msgid ""
"Contextual markers are also supported by the :ttag:`trans` and :ttag:"
"`blocktrans` template tags."
msgstr ""
"Контекстные маркеры также поддерживаются шаблонными тегами :ttag:`trans` и :"
"ttag:`blocktrans`."

# a96bdcc3015048759b2a32b16e89803a
#: ../../topics/i18n/translation.txt:329
msgid "Lazy translation"
msgstr "Ленивый перевод"

# 98ad5b0128fa41ba85fd6dc24dae6100
#: ../../topics/i18n/translation.txt:331
msgid ""
"Use the lazy versions of translation functions in :mod:`django.utils."
"translation` (easily recognizable by the ``lazy`` suffix in their names) to "
"translate strings lazily -- when the value is accessed rather than when "
"they're called."
msgstr ""
"Используйте ленивые версии функций перевода из :mod:`django.utils."
"translation` (их легко опознать по суффиксу ``lazy`` в их именах) для "
"отложенного перевода строк -- перевод производится во время обращения к "
"строке, а не когда вызывается функция."

# 689bb2906837411c89878ea8cfd25de3
#: ../../topics/i18n/translation.txt:336
msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""
"Эти функции хранят ленивую ссылку на строку, не на её перевод. Сам перевод "
"будет выполнен во время использования строки в строковом контексте, "
"например, во время обработки шаблона."

# e9d81fcd15dc41aa98fe0440c4f09dfe
#: ../../topics/i18n/translation.txt:340
msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr "Это полезно, когда функция перевода вызывается при загрузке модуля."

# e15fe79b876745b9a7e1d9ca41dc4359
#: ../../topics/i18n/translation.txt:343
msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""
"Такое может легко произойти во время определения моделей, форм или модельных "
"форм, так как в Django их поля реализованы в виде атрибутов класса. По этой "
"причине, надо использовать ленивый перевод в следующих случаях:"

# 13f4e65a29724ca586fb939063790dd5
#: ../../topics/i18n/translation.txt:349
msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""
"Поля модели и связанные с ними значения атрибутов ``verbose_name`` и "
"``help_text``"

# 11f0d60558c745c4b1034a85c61350f4
#: ../../topics/i18n/translation.txt:351
msgid ""
"For example, to translate the help text of the *name* field in the following "
"model, do the following::"
msgstr ""
"Например, для перевода подсказки для поля *name* в следующей модели, "
"действуйте так::"

# 2f41caa479ff45a0902e3bc3a1bee1d0
#: ../../topics/i18n/translation.txt:360
msgid ""
"You can mark names of :class:`~django.db.models.ForeignKey`, :class:`~django."
"db.models.ManyToManyField` or :class:`~django.db.models.OneToOneField` "
"relationship as translatable by using their :attr:`~django.db.models.Options."
"verbose_name` options::"
msgstr ""
"Вы можете перевести имена связей :class:`~django.db.models.ForeignKey`, :"
"class:`~django.db.models.ManyToManyField` или :class:`~django.db.models."
"OneToOneField` с помощью их атрибута :attr:`~django.db.models.Options."
"verbose_name`::"

# 73329c7b9c0143da96c352e67c16a886
#: ../../topics/i18n/translation.txt:373
msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you "
"should provide a lowercase verbose name text for the relation as Django will "
"automatically titlecase it when required."
msgstr ""
"Подобно тому, как вы делаете для :attr:`~django.db.models.Options."
"verbose_name`, вы должны предоставить текст метки (строчными буквами) для "
"связи, а Django автоматически преобразует первую букву в прописную когда это "
"необходимо."

# a779cb26073047a2b0ce89d2bdb93de4
#: ../../topics/i18n/translation.txt:378
msgid "Model verbose names values"
msgstr "Значения для подписи модели"

# 480e8ca507064bdb9872c45d6dbcc3ab
#: ../../topics/i18n/translation.txt:380
msgid ""
"It is recommended to always provide explicit :attr:`~django.db.models."
"Options.verbose_name` and :attr:`~django.db.models.Options."
"verbose_name_plural` options rather than relying on the fallback English-"
"centric and somewhat naïve determination of verbose names Django performs by "
"looking at the model's class name::"
msgstr ""
"Рекомендуется всегда предоставлять явные значения для :attr:`~django.db."
"models.Options.verbose_name` и :attr:`~django.db.models.Options."
"verbose_name_plural`, а не надеяться на механизм их автоматического "
"определения через имя класса::"

# a11766c657b84231aa0713b9b2e21c36
#: ../../topics/i18n/translation.txt:397
msgid "Model methods ``short_description`` attribute values"
msgstr "Значения атрибута ``short_description`` у методов модели"

# 583503d00fbd44b9b1b65a987af227e3
#: ../../topics/i18n/translation.txt:399
msgid ""
"For model methods, you can provide translations to Django and the admin site "
"with the ``short_description`` attribute::"
msgstr ""
"Для методов модели вы можете с помощью атрибута ``short_description`` "
"предоставить перевод для Django и интерфейса администратора::"

# 2fc818c3b319452c9a0dd02add7abe48
#: ../../topics/i18n/translation.txt:418
msgid "Working with lazy translation objects"
msgstr "Работа с ленивыми объектами перевода"

#: ../../topics/i18n/translation.txt:420
msgid ""
"The result of a ``ugettext_lazy()`` call can be used wherever you would use "
"a unicode string (a :class:`str` object) in other Django code, but it may "
"not work with arbitrary Python code. For example, the following won't work "
"because the `requests <https://pypi.python.org/pypi/requests/>`_ library "
"doesn't handle ``ugettext_lazy`` objects::"
msgstr ""

#: ../../topics/i18n/translation.txt:429
msgid ""
"You can avoid such problems by casting ``ugettext_lazy()`` objects to text "
"strings before passing them to non-Django code::"
msgstr ""

#: ../../topics/i18n/translation.txt:434
msgid ""
"Use ``unicode`` in place of ``str`` on Python 2, or :data:`six.text_type` to "
"support Python 2 and 3."
msgstr ""

# e456932a1b884be49457295bbe1a85f8
#: ../../topics/i18n/translation.txt:437
#, fuzzy
msgid ""
"If you try to use a ``ugettext_lazy()`` result where a bytestring (a :class:"
"`bytes` object) is expected, things won't work as expected since a "
"``ugettext_lazy()`` object doesn't know how to convert itself to a "
"bytestring. You can't use a unicode string inside a bytestring, either, so "
"this is consistent with normal Python behavior. For example, putting a "
"unicode proxy into a unicode string is fine::"
msgstr ""
"Результат вызова ``ugettext_lazy()`` может быть использован везде, где "
"требуется юникодная строка (объект типа ``unicode``). Если вы попытаетесь "
"использовать её там, где ожидается обычная строка (объект типа ``str``), то "
"не получите ожидаемый результат, так как объект ``ugettext_lazy()`` не "
"знает, как преобразовать себя в обычную строку. Вы не можете использовать "
"юникодную строку внутри обычной, что, в общем, является обычным поведением в "
"Python. Например::"

#: ../../topics/i18n/translation.txt:446
msgid ""
"But you can't insert a unicode object into a bytestring and nor can you "
"insert a unicode proxy there::"
msgstr ""

# dd362e2596f44ed9ab76e8ddd1d4a687
#: ../../topics/i18n/translation.txt:451
msgid ""
"If you ever see output that looks like ``\"hello <django.utils.functional...>"
"\"``, you have tried to insert the result of ``ugettext_lazy()`` into a "
"bytestring. That's a bug in your code."
msgstr ""
"Если вы встретили нечто подобное ``\"hello <django.utils.functional...>\"``, "
"значит вы попытались вставить результат ``ugettext_lazy()`` в обычную "
"строку. Это ошибка в вашем коде."

# 49f7fe5ada1941a4bd7be7cd58a492b7
#: ../../topics/i18n/translation.txt:455
msgid ""
"If you don't like the long ``ugettext_lazy`` name, you can just alias it as "
"``_`` (underscore), like so::"
msgstr ""
"Если вам не нравится писать такое длинное имя, как ``ugettext_lazy``, в "
"можете создать для него псевдоним ``_`` (символ подчеркивания), вот так::"

# 2601d9fc3f6c47edbb8e8bbf7f674f9d
#: ../../topics/i18n/translation.txt:464
msgid ""
"Using ``ugettext_lazy()`` and ``ungettext_lazy()`` to mark strings in models "
"and utility functions is a common operation. When you're working with these "
"objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""
"Использование ``ugettext_lazy()`` и ``ungettext_lazy()`` для пометки строк в "
"моделях и в прикладных функциях является обычной операцией. Работая с этими "
"объектами в вашем коде, вы должны быть уверены, что вы не преобразовываете "
"их случайно в строки, так как это преобразование должно происходить как "
"можно позже (и будет приниматься во внимание правильная локаль). Это "
"потребует использования вспомогательной функции, описанной далее."

# a96bdcc3015048759b2a32b16e89803a
#: ../../topics/i18n/translation.txt:474
msgid "Lazy translations and plural"
msgstr "Ленивый перевод и перевод множественного числа"

# 3ac4b15687fe48d184eff94dee24b138
#: ../../topics/i18n/translation.txt:476
msgid ""
"When using lazy translation for a plural string (``[u]n[p]gettext_lazy``), "
"you generally don't know the ``number`` argument at the time of the string "
"definition. Therefore, you are authorized to pass a key name instead of an "
"integer as the ``number`` argument. Then ``number`` will be looked up in the "
"dictionary under that key during string interpolation. Here's example::"
msgstr ""
"Используя ленивый перевод для срок с множественным числом "
"(``[u]n[p]gettext_lazy``), вы не знаете значение аргумента ``number`` при "
"определении строки. Однако, вы можете использовать аргумент ``number`` "
"вместо числа. При определении перевода ``number`` будет определяться из "
"переданных аргументов. Например::"

# 6b3cef66653b45b4a6d0010fcb95cb11
#: ../../topics/i18n/translation.txt:494
msgid ""
"If the string contains exactly one unnamed placeholder, you can interpolate "
"directly with the ``number`` argument::"
msgstr ""
"Если строка принимает только один аргумент, вы можете передать "
"непосредственно ``number``::"

# acf36a83d1a54087998f852154a51362
#: ../../topics/i18n/translation.txt:510
#, fuzzy
msgid "Formatting strings: ``format_lazy()``"
msgstr "Объединение строк: string_concat()"

# ea6830b99b7640559f349c1d781bc507
#: ../../topics/i18n/translation.txt:512
#, fuzzy
msgid ""
"Python's :meth:`str.format()` method will not work when either the "
"``format_string`` or any of the arguments to :meth:`str.format()` contains "
"lazy translation objects. Instead, you can use :func:`django.utils.text."
"format_lazy()`, which creates a lazy object that runs the ``str.format()`` "
"method only when the result is included in a string. For example::"
msgstr ""
"Стандартное для Python объединение строк (``''.join([...])``) не будет "
"работать со списками, которые содержат объекты отложенного перевода. Для "
"этого вы можете использовать функцию :func:`django.utils.translation."
"string_concat()`, создающую ленивый объект, который объединяет своё "
"содержимое *и*  преобразует его в строку, только когда результат функции "
"включается в строку. Например::"

# 46615b700d4c4f5e8c256041acd4230d
#: ../../topics/i18n/translation.txt:526
msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""
"В данном случае, отложенный перевод в ``result`` будет преобразован в строку "
"только когда сам ``result`` будет использован в строке (обычно это "
"происходит во время обработки шаблона)."

# 61f96d05b84847a3be700b4826fe0c55
#: ../../topics/i18n/translation.txt:531
msgid "Other uses of lazy in delayed translations"
msgstr "Другое использование ленивости в отложенных переводах"

# 04222bc26d014b8aa43b4d9e2fe715b3
#: ../../topics/i18n/translation.txt:533
msgid ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. For example::"
msgstr ""
"Для остальных случаев, когда вам надо отсрочить перевод, но приходится "
"передавать переводимую строку в качестве аргумента другой функции, вы можете "
"обернуть эту функцию в ленивый вызов. Например::"

# 4c701048eb8948cf9a034c4db7feae5f
#: ../../topics/i18n/translation.txt:544
msgid "And then later::"
msgstr "А затем::"

# 28aecf6baea0430bbc73a37422fba5fe
#: ../../topics/i18n/translation.txt:549
msgid "Localized names of languages"
msgstr "Локализованные названия языков"

# ed0cb915d3374508802b446b436c11ea
#: ../../topics/i18n/translation.txt:553
msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages::"
msgstr ""
"Функция ``get_language_info()`` предоставляет детальную информацию о языках::"

# 82d157ab381a463ea5f3650109a1777b
#: ../../topics/i18n/translation.txt:562
#, fuzzy
msgid ""
"The ``name``, ``name_local``, and ``name_translated`` attributes of the "
"dictionary contain the name of the language in English, in the language "
"itself, and in your current active language respectively.  The ``bidi`` "
"attribute is True only for bi-directional languages."
msgstr ""
"Атрибуты ``name`` и ``name_local`` содержат название языка на английском и "
"на этом самом языке соответственно.  Атрибут ``bidi`` установлен в True "
"только для двунаправленных языков."

# 9e8a0e81ce2e43b7b70132cb7db9e494
#: ../../topics/i18n/translation.txt:567
msgid ""
"The source of the language information is the ``django.conf.locale`` module. "
"Similar access to this information is available for template code. See below."
msgstr ""
"Источником информации о языках является модуль ``django.conf.locale``. "
"Аналогичный доступ к информации о языках есть и на уровне шаблонов. См. "
"далее."

# 82a28e4a1e254864bede1a8b886f07f7
#: ../../topics/i18n/translation.txt:573
msgid "Internationalization: in template code"
msgstr "Интернационализация: в коде шаблонов"

# 8c8c553e980a4c7cb4dedec80804a931
#: ../../topics/i18n/translation.txt:577
msgid ""
"Translations in :doc:`Django templates </ref/templates/language>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template. As with all template tags, this tag needs to be loaded in "
"all templates which use translations, even those templates that extend from "
"other templates which have already loaded the ``i18n`` tag."
msgstr ""
"Для перевода текста в :doc:`шаблонах Django </ref/templates/language>` "
"используют два шаблонных тега и немного отличающийся от Python синтаксис. "
"Чтобы воспользоваться этими тегами, поместите ``{% load i18n %}`` в начало "
"шаблона. Аналогично остальным шаблонным тегам, данный тег должен быть указан "
"во всех шаблонах, которые применяют механизм переводов, даже в тех, которые "
"расширяются из других шаблонов, имеющих в себе тег ``i18n``."

# 7466a2a6fe0244c08921076523cef2fa
#: ../../topics/i18n/translation.txt:587
msgid "``trans`` template tag"
msgstr "Шаблонный тег ``trans``"

# f180dd3bb8184763930118b7a99c01ff
#: ../../topics/i18n/translation.txt:589
msgid ""
"The ``{% trans %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content::"
msgstr ""
"Шаблонный тег ``{% trans %}`` может переводить как обычную строку, "
"заключенную в одинарные или двойные кавычки, так и содержимое переменой::"

# 4cd0c1b1e6d04b78b264774d2bf8fce3
#: ../../topics/i18n/translation.txt:595
msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the "
"translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future::"
msgstr ""
"При использовании опции ``noop``, обращение к переменной происходит, но "
"перевод не выполняется. Это удобно, когда надо пометить контент для перевода "
"в будущем::"

# 49b92d47dda247d48791d92765178da1
#: ../../topics/i18n/translation.txt:601
msgid ""
"Internally, inline translations use an :func:`~django.utils.translation."
"ugettext` call."
msgstr ""
"Перевод подстроки выполняется с помощью функции :func:`~django.utils."
"translation.ugettext`."

# da71a43d3ede486c97813f84baba74f6
#: ../../topics/i18n/translation.txt:604
msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""
"В случае передачи шаблонной переменой (см. выше ``myvar``) в тег, тег "
"сначала преобразовывает её в строку, а затем ищет для неё перевод в "
"каталогах сообщений."

# 28e6eae6318b492db0f3900b49546c4c
#: ../../topics/i18n/translation.txt:608
msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"trans %}``. If your translations require strings with variables "
"(placeholders), use :ttag:`{% blocktrans %}<blocktrans>` instead."
msgstr ""
"Невозможно использовать шаблонные переменные внутри строки для тега ``{% "
"trans %}``. Если же ваш перевод требует наличия переменой в строке, "
"используйте шаблонный тег :ttag:`{% blocktrans %}<blocktrans>`."

# 23fba2b75f3847a1aea8865d04a34346
#: ../../topics/i18n/translation.txt:613 ../../topics/i18n/translation.txt:724
msgid ""
"If you'd like to retrieve a translated string without displaying it, you can "
"use the following syntax::"
msgstr ""
"Если требуется получать переведённые строки без их отображения, то вы можете "
"использовать следующий синтаксис::"

# 6ae0551c39a944f584c46fe462fb2550
#: ../../topics/i18n/translation.txt:621
msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template "
"tags or filters::"
msgstr ""
"На практике вы будете применять это для получения строк, которые "
"используются во множестве мест шаблона или должны быть использованы в "
"качестве аргументов для других шаблонных тегов или фильтров::"

# 8369a7c436e347538486a3816a5543f3
#: ../../topics/i18n/translation.txt:638
msgid ""
"``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` "
"using the ``context`` keyword:"
msgstr ""
"Тег ``{% trans %}`` также поддерживает :ref:`контекстные маркеры<contextual-"
"markers>` с помощью атрибута ``context``:"

# 5f345ca6d1b848bf8d6099982bd9c6fe
#: ../../topics/i18n/translation.txt:648
msgid "``blocktrans`` template tag"
msgstr "Шаблонный тег ``blocktrans``"

# 970a87350d954190b38985ac34b9e9e9
#: ../../topics/i18n/translation.txt:650
msgid ""
"Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to "
"mark complex sentences consisting of literals and variable content for "
"translation by making use of placeholders::"
msgstr ""
"В отличии от тега :ttag:`trans`, тег ``blocktrans`` позволяет отмечать "
"сложные предложения, состоящие из строк и переменных, обеспечивая перевод с "
"помощью подстановок::"

# db6604d9e8ec44ebb3c696a190eb2d2d
#: ../../topics/i18n/translation.txt:656
msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples::"
msgstr ""
"Для перевода шаблонных выражений, скажем, с доступом к атрибутам объекта или "
"с использованием шаблонных фильтров, потребуется связать выражение с "
"локальной переменной для использования внутри переводимого блока. Примеры::"

# fdde6c89b9ff41a09a1308391c5b8db5
#: ../../topics/i18n/translation.txt:668
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""
"Вы можете использовать несколько выражений внутри одного тега "
"``blocktrans``::"

# 68fe976d7ae1407b89ca5785891f78a7
#: ../../topics/i18n/translation.txt:674
msgid ""
"The previous more verbose format is still supported: ``{% blocktrans with "
"book|title as book_t and author|title as author_t %}``"
msgstr ""
"Как и прежде, тег поддерживает старое форматирование: ``{% blocktrans with "
"book|title as book_t and author|title as author_t %}``"

#: ../../topics/i18n/translation.txt:677
msgid ""
"Other block tags (for example ``{% for %}`` or ``{% if %}``) are not allowed "
"inside a ``blocktrans`` tag."
msgstr ""
"Внутри тега ``blocktrans`` запрещается использовать другие блочные теги "
"(например ``{% for %}`` или ``{% if %}``)."

# ce751ec58f904ec0a3833d4c208b59af
#: ../../topics/i18n/translation.txt:680
msgid ""
"If resolving one of the block arguments fails, blocktrans will fall back to "
"the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""
"Если невозможно вычисление хотя бы одного из аргументов блока, тогда тег "
"переключается на язык по умолчанию с помощью функции :func:`~django.utils."
"translation.deactivate_all`."

# 2a5b24c07c784108aa9fc643824afb01
#: ../../topics/i18n/translation.txt:685
msgid "This tag also provides for pluralization. To use it:"
msgstr "Этот тег также поддерживает склонение, например:"

# f7071eddcf6a4658802cb883127fbb10
#: ../../topics/i18n/translation.txt:687
msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""
"Определите переменную ``count`` и свяжите с ней значение счётчика. По этому "
"значению будет выбираться форма склонения."

# a4538a4c011b45dda080da5444d43f74
#: ../../topics/i18n/translation.txt:690
msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` "
"tags."
msgstr ""
"Укажите единственную и множественную формы, разделив их с помощью тега ``{% "
"plural %}`` внутри тегов  ``{% blocktrans %}`` и ``{% endblocktrans %}``."

# 822012d0e68142188b1872a5bf6cf980
#: ../../topics/i18n/translation.txt:694
msgid "An example::"
msgstr "Пример::"

# 0256a2cc5fd942b2bc4abac9e87365c0
#: ../../topics/i18n/translation.txt:702
msgid "A more complex example::"
msgstr "Более сложный пример::"

# 445b4444388b48128dcf51ee583d707f
#: ../../topics/i18n/translation.txt:710
msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktrans`` construct is internally converted to an ``ungettext`` call. "
"This means the same :ref:`notes regarding ungettext variables <pluralization-"
"var-notes>` apply."
msgstr ""
"Когда используете и возможности склонения, и присвоение значения локальным "
"переменным в дополнение к значению счетчика, помните, что конструкция "
"``blocktrans`` на низком уровне преобразовывается в вызов ``ungettext``. Это "
"означает, что к ней применяются :ref:`замечания для переменных ungettext "
"<pluralization-var-notes>`."

# f545c4b0de534a378e2c8cb7f212e5e2
#: ../../topics/i18n/translation.txt:716
msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktrans`` and "
"should be retrieved (and stored) beforehand::"
msgstr ""
"Обратное разрешение URL не можно быть выполнено внутри ``blocktrans`` и "
"должно выполняться заранее::"

# 6ae0551c39a944f584c46fe462fb2550
#: ../../topics/i18n/translation.txt:731
msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template "
"tags or filters."
msgstr ""
"На практике вы будете применять это для получения строк, которые "
"используются во множестве мест шаблона или должны быть использованы в "
"качестве аргументов для других шаблонных тегов или фильтров::"

# 8a010b73cc3145a5bdd478d2efd4406b
#: ../../topics/i18n/translation.txt:735
msgid ""
"``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""
"Тег ``{% blocktrans %}`` также поддерживает :ref:`контекстные "
"маркеры<contextual-markers>` с помощью атрибута ``context``:"

# dd0bda74398b447bb4189eb0dd217358
#: ../../topics/i18n/translation.txt:742
msgid ""
"Another feature ``{% blocktrans %}`` supports is the ``trimmed`` option. "
"This option will remove newline characters from the beginning and the end of "
"the content of the ``{% blocktrans %}`` tag, replace any whitespace at the "
"beginning and end of a line and merge all lines into one using a space "
"character to separate them. This is quite useful for indenting the content "
"of a ``{% blocktrans %}`` tag without having the indentation characters end "
"up in the corresponding entry in the PO file, which makes the translation "
"process easier."
msgstr ""
"Другой особенностью ``{% blocktrans %}`` является поддержка опции "
"``trimmed``. Эта опция удаляет символы завершения строки из начала и конца "
"содержимого данного тега, убирая пробелы в начале и конце строк и объединяя "
"все строки в одну, разделяя их пробелами. Это очень удобно при "
"форматировании контента тега с помощью отступов, так как эти пробелы не "
"попадают в содержимое PO файлов, упрощая процесс перевода."

# 842dbfe2d3744fca826bd23e24bf3b6f
#: ../../topics/i18n/translation.txt:750
msgid "For instance, the following ``{% blocktrans %}`` tag::"
msgstr "Например, следующий тег ``{% blocktrans %}``::"

# 1ac24147f4674140857b3816c3a1e946
#: ../../topics/i18n/translation.txt:757
msgid ""
"will result in the entry ``\"First sentence. Second paragraph.\"`` in the PO "
"file, compared to ``\"\\n  First sentence.\\n  Second sentence.\\n\"``, if "
"the ``trimmed`` option had not been specified."
msgstr ""
"выразится в записи``\"First sentence. Second paragraph.\"`` внутри PO файла, "
"что несравнимо с ``\"\\n  First sentence.\\n  Second sentence.\\n\"``, в "
"случае когда опция ``trimmed`` не используется."

# f349ff009a01489fae9e5cee345a875b
#: ../../topics/i18n/translation.txt:762
msgid "String literals passed to tags and filters"
msgstr "Строки передаваемые в шаблонные теги и фильтры"

# bac67aefb04649398f5c42aeacb69a63
#: ../../topics/i18n/translation.txt:764
msgid ""
"You can translate string literals passed as arguments to tags and filters by "
"using the familiar ``_()`` syntax::"
msgstr ""
"Для перевода строк, передаваемых в теги и фильтры, можно использовать "
"``_()``::"

# b682bff16fd84b969424bb50269f31b7
#: ../../topics/i18n/translation.txt:769
msgid ""
"In this case, both the tag and the filter will see the translated string, so "
"they don't need to be aware of translations."
msgstr ""
"В этом случае, и тег, и фильтр увидят заранее переведённую строку, т.е. им "
"не надо будет беспокоиться о переводе."

# 7e6c8f22410a4dd4bdd4267db9ae7a2d
#: ../../topics/i18n/translation.txt:773
msgid ""
"In this example, the translation infrastructure will be passed the string ``"
"\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""
"В этом примере в модуль перевода будет передана строка ``\"yes,no\"``, а не "
"отдельные строки ``\"yes\"`` и ``\"no\"``. Перевод  этой строки должен "
"содержать запятую так, чтобы код парсера фильтра знал как разбить эту "
"строку. Например, немецкий переводчик может переводить строку ``\"yes,no\"`` "
"как ``\"ja, nein\"``, сохраняя нетронутой запятую."

# a9fd890574204a80b46cbf5de5fedbc4
#: ../../topics/i18n/translation.txt:783
msgid "Comments for translators in templates"
msgstr "Комментарии для переводчиков шаблонов"

# bf5fb25be63d46fbb88f86392831c75c
#: ../../topics/i18n/translation.txt:785
msgid ""
"Just like with :ref:`Python code <translator-comments>`, these notes for "
"translators can be specified using comments, either with the :ttag:`comment` "
"tag:"
msgstr ""
"Аналогично случаю с :ref:`кодом на языке Python <translator-comments>`, "
"такие пометки для переводчиков могут быть сделаны с помощью комментариев, "
"например с помощью тега :ttag:`comment`:"

# 8cf55d6840fb4a6cbacc494970ac28f3
#: ../../topics/i18n/translation.txt:798
msgid ""
"or with the ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-"
"comments>`:"
msgstr ""
"или с помощью ``{#`` ... ``#}`` :ref:`однострочного комментария <template-"
"comments>`:"

# 7608342f58d442a193e64ba3f9af1258
#: ../../topics/i18n/translation.txt:808
msgid ""
"Just for completeness, these are the corresponding fragments of the "
"resulting ``.po`` file:"
msgstr "Для полноты изложения приведём соответствующий фрагмент ``.po`` файла:"

# 637fdc49428643f38f09ec4d5b643d0d
#: ../../topics/i18n/translation.txt:840
msgid "Switching language in templates"
msgstr "Переключения языка в шаблоне"

# 05313b7ade354b48b8d9a66e2838e7b2
#: ../../topics/i18n/translation.txt:842
msgid ""
"If you want to select a language within a template, you can use the "
"``language`` template tag:"
msgstr "Если вы хотите выбрать язык в шаблоне, используйте тег ``language``:"

# 0616e5e136d24ef0b45e3fbbb42814a1
#: ../../topics/i18n/translation.txt:859
msgid ""
"While the first occurrence of \"Welcome to our page\" uses the current "
"language, the second will always be in English."
msgstr ""
"Первая фраза \"Welcome to our page\" будет использовать текущий язык, в то "
"время как вторая будет на Английском."

# efb5f988e4054095aed9e74f1b7ee0f9
#: ../../topics/i18n/translation.txt:865
msgid "Other tags"
msgstr "Другие теги"

# 8890a2561b1747388ec08d6272e3e1e9
#: ../../topics/i18n/translation.txt:867
msgid "These tags also require a ``{% load i18n %}``."
msgstr "Эти теги также требуют наличия ``{% load i18n %}`` в шаблоне."

#: ../../topics/i18n/translation.txt:872
msgid "``get_available_languages``"
msgstr "``get_available_languages``"

# 405fe56f682d4f6c8a5c8498643f1170
#: ../../topics/i18n/translation.txt:874
msgid ""
"``{% get_available_languages as LANGUAGES %}`` returns a list of tuples in "
"which the first element is the :term:`language code` and the second is the "
"language name (translated into the currently active locale)."
msgstr ""
"Шаблонная конструкция ``{% get_available_languages as LANGUAGES %}`` "
"возвращает список кортежей в которых, первый элемент является :term:`кодом "
"языка`, а второй - его названием (переведённым в язык текущей локали)."

#: ../../topics/i18n/translation.txt:881
msgid "``get_current_language``"
msgstr "``get_current_language``"

# 6e355160097e4284baaf10af2a4c8a0d
#: ../../topics/i18n/translation.txt:883
msgid ""
"``{% get_current_language as LANGUAGE_CODE %}`` returns the current user's "
"preferred language as a string. Example: ``en-us``. See :ref:`how-django-"
"discovers-language-preference`."
msgstr ""
"Шаблонная конструкция ``{% get_current_language as LANGUAGE_CODE %}`` "
"возвращает предпочитаемый язык текущего пользователя в виде строки. "
"Например: ``en-us``. Подробности смотрите в :ref:`how-django-discovers-"
"language-preference`."

#: ../../topics/i18n/translation.txt:890
msgid "``get_current_language_bidi``"
msgstr "``get_current_language_bidi``"

# 3177db52f36047c1af2a203f3cf97507
#: ../../topics/i18n/translation.txt:892
msgid ""
"``{% get_current_language_bidi as LANGUAGE_BIDI %}`` returns the current "
"locale's direction. If ``True``, it's a right-to-left language, e.g. Hebrew, "
"Arabic. If ``False`` it's a left-to-right language, e.g. English, French, "
"German, etc."
msgstr ""
"Шаблонная конструкция ``{% get_current_language_bidi as LANGUAGE_BIDI %}`` "
"возвращает направление текста текущей локали. Если ``True``, то имеем дело с "
"\"right-to-left\" языком, т.е.: еврейский, арабский. Если ``False``, то это "
"\"left-to-right\" язык, т.е.: английский, французский, немецкий и так далее."

#: ../../topics/i18n/translation.txt:897
msgid ""
"If you enable the ``django.template.context_processors.i18n`` context "
"processor then each ``RequestContext`` will have access to ``LANGUAGES``, "
"``LANGUAGE_CODE``, and ``LANGUAGE_BIDI`` as defined above."
msgstr ""
"Если вы активировали контекстный процессор ``django.template."
"context_processors.i18n``, то каждый экземпляр ``RequestContext`` будет "
"обладать доступом к переменным ``LANGUAGES``, ``LANGUAGE_CODE`` и "
"``LANGUAGE_BIDI``, описанным выше."

#: ../../topics/i18n/translation.txt:904
msgid "``get_language_info``"
msgstr "``get_language_info``"

# c65b4343de4f44de836bc68d220d40f2
#: ../../topics/i18n/translation.txt:906
msgid ""
"You can also retrieve information about any of the available languages using "
"provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag::"
msgstr ""
"Вы также можете получить информацию о любом доступном языке, используя "
"предоставленные шаблонные теги и фильтры. Для получения информации об одном "
"языке используйте тег ``{% get_language_info %}``::"

# 2c35e16a2c0a4adf948bf8b468a44de1
#: ../../topics/i18n/translation.txt:913
msgid "You can then access the information::"
msgstr "Затем вы можете узнать следующее::"

#: ../../topics/i18n/translation.txt:924
msgid "``get_language_info_list``"
msgstr "``get_language_info_list``"

# 657ab634609944e2b61815d34349cf33
#: ../../topics/i18n/translation.txt:926
msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""
"Также вы можете использовать шаблонный тег ``{% get_language_info_list %}`` "
"для получения информации о списке языков (т.е. об активных языках, которые "
"указаны в параметре конфигурации :setting:`LANGUAGES`). Обратитесь к :ref:"
"`разделу, описывающему представление для переключения языков <set_language-"
"redirect-view>` для получения примера тог, как показать элемент для выбора "
"языка с помощью ``{% get_language_info_list %}``."

# 67c689fd8f444a25abe42aaba05ed19a
#: ../../topics/i18n/translation.txt:932
msgid ""
"In addition to :setting:`LANGUAGES` style list of tuples, ``{% "
"get_language_info_list %}`` supports simple lists of language codes. If you "
"do this in your view:"
msgstr ""
"В дополнение к стилю списка кортежей из параметра конфигурации :setting:"
"`LANGUAGES`, шаблонный тег ``{% get_language_info_list %}`` поддерживает "
"простой список кодов языка. Если вы сделаете следующее в своём представлении:"

# 75e8fc5c5ec748b5838e4b60d5f4f72c
#: ../../topics/i18n/translation.txt:941
msgid "you can iterate over those languages in the template::"
msgstr "вы можете по очереди пройтись по этим языкам в шаблоне::"

# 809dfc8c04484745bd8abcbef48016e6
#: ../../topics/i18n/translation.txt:952
msgid "Template filters"
msgstr "Шаблонные фильтры"

# e33841e4aa774cfd95eaea086a079e6b
#: ../../topics/i18n/translation.txt:954
msgid "There are also simple filters available for convenience:"
msgstr "Также для удобства есть простые фильтры:"

# 64f4b9716e994ab1bd384e045d2475f0
#: ../../topics/i18n/translation.txt:956
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr "``{{ LANGUAGE_CODE|language_name }}`` (\"Немецкий\")"

# 9e6419f138ba40fca23e3266a7f7dd94
#: ../../topics/i18n/translation.txt:957
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"

# 43718e85490c4028bbe9b9b5d3e2d550
#: ../../topics/i18n/translation.txt:958
msgid "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"
msgstr "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"

# 9e6419f138ba40fca23e3266a7f7dd94
#: ../../topics/i18n/translation.txt:959
msgid ""
"``{{ LANGUAGE_CODE|language_name_translated }}`` (\"německy\", when active "
"language is Czech)"
msgstr ""
"``{{ LANGUAGE_CODE|language_name_translated }}`` (\"německy\", для чешского "
"языка)"

# 1fec64a9624548fb9243ca758a4da529
#: ../../topics/i18n/translation.txt:962
msgid "Internationalization: in JavaScript code"
msgstr "Интернационализация на уровне кода JavaScript"

# 340912fa1bfd4435b8e36ef06d121518
#: ../../topics/i18n/translation.txt:966
msgid "Adding translations to JavaScript poses some problems:"
msgstr "Добавление переводов в JavaScript вызывает ряд проблем:"

# 861b3b472be9438ba339098bc36b6e94
#: ../../topics/i18n/translation.txt:968
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr "JavaScript код не имеет доступа к механизму ``gettext``."

# 485f7cc8dd3b4a04a3477435c85d4a2e
#: ../../topics/i18n/translation.txt:970
msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""
"JavaScript код не имеет доступа к файлам ``.po`` или ``.mo``, их надо "
"передавать с сервера."

# ebf79ffc991b46ad80bc2d930c74a941
#: ../../topics/i18n/translation.txt:973
msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""
"Каталог с переводами для JavaScript должен иметь минимально возможный размер."

# f71978e3ebcd406ab425c6b82ffcc865
#: ../../topics/i18n/translation.txt:976
msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within "
"JavaScript."
msgstr ""
"Django предоставляет интегрированное решение для этих проблем. Перевод "
"внедряется в JavaScript, т.е. вы можете использовать ``gettext`` и остальные "
"функции в JavaScript коде."

# 9f41614acf264cc6b5a4a7ed9a364880
#: ../../topics/i18n/translation.txt:980
#, fuzzy
msgid ""
"The main solution to these problems is the following ``JavaScriptCatalog`` "
"view, which generates a JavaScript code library with functions that mimic "
"the ``gettext`` interface, plus an array of translation strings."
msgstr ""
"Основным решением описанных проблем является представление :meth:`django."
"views.i18n.javascript_catalog`, которое выдаёт библиотеку с кодом "
"JavaScript, функции которой реализуют интерфейс ``gettext``, а также массив "
"переведённых строк. Переведённые строки собираются из приложений или Django, "
"в зависимости от того, что вы указали ``info_dict`` или URL. Пути, указанные "
"в параметре конфигурации :setting:`LOCALE_PATHS`, также принимаются во "
"внимание."

# 9026fb8f18494e1d900f38c9c2e8aaa7
#: ../../topics/i18n/translation.txt:987
#, fuzzy
msgid "The ``JavaScriptCatalog`` view"
msgstr "Представление ``javascript_catalog``"

#: ../../topics/i18n/translation.txt:995
msgid ""
"A view that produces a JavaScript code library with functions that mimic the "
"``gettext`` interface, plus an array of translation strings."
msgstr ""

#: ../../topics/i18n/translation.txt:998
msgid "**Attributes**"
msgstr ""

#: ../../topics/i18n/translation.txt:1002
msgid ""
"Translation domain containing strings to add in the view output. Defaults to "
"``'djangojs'``."
msgstr ""

#: ../../topics/i18n/translation.txt:1007
msgid ""
"A list of :attr:`application names <django.apps.AppConfig.name>` among "
"installed applications. Those apps should contain a ``locale`` directory. "
"All those catalogs plus all catalogs found in :setting:`LOCALE_PATHS` (which "
"are always included) are merged into one catalog. Defaults to ``None``, "
"which means that all available translations from all :setting:"
"`INSTALLED_APPS` are provided in the JavaScript output."
msgstr ""

#: ../../topics/i18n/translation.txt:1015
msgid "**Example with default values**::"
msgstr ""

#: ../../topics/i18n/translation.txt:1023
msgid "**Example with custom packages**::"
msgstr ""

#: ../../topics/i18n/translation.txt:1031
msgid ""
"If your root URLconf uses :func:`~django.conf.urls.i18n.i18n_patterns`, "
"``JavaScriptCatalog`` must also be wrapped by ``i18n_patterns()`` for the "
"catalog to be correctly generated."
msgstr ""

# 4b1422c7855141aabb49bf1853e5d449
#: ../../topics/i18n/translation.txt:1035
#, fuzzy
msgid "**Example with** ``i18n_patterns()``::"
msgstr "Перевод шаблонов URL"

# 6fca4570105c427c9b0500f26753d360
#: ../../topics/i18n/translation.txt:1043
#, fuzzy
msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning. This is important in the case of clashing translations for "
"the same literal."
msgstr ""
"Приоритет переводов таков, что пакеты, определённые позже, имеют более "
"высокий приоритет, чем определённые ранее. Это важно, если переводы "
"совпадают в разных приложениях."

#: ../../topics/i18n/translation.txt:1048
#, fuzzy
msgid ""
"If you use more than one ``JavaScriptCatalog`` view on a site and some of "
"them define the same strings, the strings in the catalog that was loaded "
"last take precedence."
msgstr ""
"Если вы используете несколько ``javascript_catalog``, и они содержат "
"одинаковые строки, будет использоваться перевод из последнего каталога."

# 9026fb8f18494e1d900f38c9c2e8aaa7
#: ../../topics/i18n/translation.txt:1053
msgid "The ``javascript_catalog`` view"
msgstr "Представление ``javascript_catalog``"

#: ../../topics/i18n/translation.txt:1059
msgid ""
"``javascript_catalog()`` is deprecated in favor of :class:"
"`JavaScriptCatalog` and will be removed in Django 2.0."
msgstr ""

# 9f41614acf264cc6b5a4a7ed9a364880
#: ../../topics/i18n/translation.txt:1062
msgid ""
"The main solution to these problems is the :meth:`django.views.i18n."
"javascript_catalog` view, which sends out a JavaScript code library with "
"functions that mimic the ``gettext`` interface, plus an array of translation "
"strings. Those translation strings are taken from applications or Django "
"core, according to what you specify in either the ``info_dict`` or the URL. "
"Paths listed in :setting:`LOCALE_PATHS` are also included."
msgstr ""
"Основным решением описанных проблем является представление :meth:`django."
"views.i18n.javascript_catalog`, которое выдаёт библиотеку с кодом "
"JavaScript, функции которой реализуют интерфейс ``gettext``, а также массив "
"переведённых строк. Переведённые строки собираются из приложений или Django, "
"в зависимости от того, что вы указали ``info_dict`` или URL. Пути, указанные "
"в параметре конфигурации :setting:`LOCALE_PATHS`, также принимаются во "
"внимание."

# 157851a990704d579499681ebc21c482
#: ../../topics/i18n/translation.txt:1069
msgid "You hook it up like this::"
msgstr "Вы можете использовать это так::"

# bd0d534598bb4972a842a276534e90bf
#: ../../topics/i18n/translation.txt:1081
msgid ""
"Each string in ``packages`` should be in Python dotted-package syntax (the "
"same format as the strings in :setting:`INSTALLED_APPS`) and should refer to "
"a package that contains a ``locale`` directory. If you specify multiple "
"packages, all those catalogs are merged into one catalog. This is useful if "
"you have JavaScript that uses strings from different applications."
msgstr ""
"Каждая строка в ``packages`` должна быть представлена в точечном формате "
"Python (формат аналогичен формату параметра конфигурации :setting:"
"`INSTALLED_APPS`) и должна ссылаться на пакет, у которого есть каталог "
"``locale``. Если вы указываете несколько пакетов, все их каталоги сообщений "
"будут собраны в единый каталог. Это полезно, если ваш JavaScript код "
"использует строки из нескольких приложений."

# 6fca4570105c427c9b0500f26753d360
#: ../../topics/i18n/translation.txt:1087
msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning, this is important in the case of clashing translations for "
"the same literal."
msgstr ""
"Приоритет переводов таков, что пакеты, определённые позже, имеют более "
"высокий приоритет, чем определённые ранее. Это важно, если переводы "
"совпадают в разных приложениях."

# 34a2d3cda91f46b0a86f58d3002c2b69
#: ../../topics/i18n/translation.txt:1092
msgid ""
"By default, the view uses the ``djangojs`` gettext domain. This can be "
"changed by altering the ``domain`` argument."
msgstr ""
"По умолчанию, представление использует домен ``djangojs`` (речь идёт о "
"домене gettext). Это поведение может быть изменено с помощью аргумента "
"``domain``."

# 96e4b70742d5428aa284596637281bf9
#: ../../topics/i18n/translation.txt:1095
msgid ""
"You can make the view dynamic by putting the packages into the URL pattern::"
msgstr ""
"Вы можете сделать представление динамическим, поместив пакеты в шаблон URL::"

# fac7bc1a571a436bbbc81c802f03b686
#: ../../topics/i18n/translation.txt:1101
msgid ""
"With this, you specify the packages as a list of package names delimited by "
"'+' signs in the URL. This is especially useful if your pages use code from "
"different apps and this changes often and you don't want to pull in one big "
"catalog file. As a security measure, these values can only be either "
"``django.conf`` or any package from the :setting:`INSTALLED_APPS` setting."
msgstr ""
"Используя это, вы определяете пакеты в виде списка их имён, разделённых с "
"помощью знака плюс в URL. Это особенно полезно, если ваши страницы "
"используют код из разных приложений, всегда из разных, и вам не хочется "
"собирать весь перевод в один большой каталог. Для безопасности, все эти "
"значения могут быть взяты либо из ``django.conf``, либо из любого пакета, "
"определённого в параметре конфигурации :setting:`INSTALLED_APPS`."

#: ../../topics/i18n/translation.txt:1107
msgid ""
"You can also split the catalogs in multiple URLs and load them as you need "
"in your sites::"
msgstr ""
"Вы также можете разделить каталоги на несколько URL-ов и загружать их "
"отдельно при необходимости::"

#: ../../topics/i18n/translation.txt:1123
msgid ""
"If you use more than one ``javascript_catalog`` on a site and some of them "
"define the same strings, the strings in the catalog that was loaded last "
"take precedence."
msgstr ""
"Если вы используете несколько ``javascript_catalog``, и они содержат "
"одинаковые строки, будет использоваться перевод из последнего каталога."

# 665a537771ff4ac381825ffe6d228c4b
#: ../../topics/i18n/translation.txt:1127
msgid ""
"The JavaScript translations found in the paths listed in the :setting:"
"`LOCALE_PATHS` setting are also always included. To keep consistency with "
"the translations lookup order algorithm used for Python and templates, the "
"directories listed in :setting:`LOCALE_PATHS` have the highest precedence "
"with the ones appearing first having higher precedence than the ones "
"appearing later."
msgstr ""
"Переводы JavaScript, найденные по путям, перечисленным в параметре "
"конфигурации :setting:`LOCALE_PATHS` всегда используются. Для сохранения "
"целостности в работе алгоритма поиска переводов, используемом для Python и "
"шаблонов, каталоги, указанные в параметре конфигурации :setting:"
"`LOCALE_PATHS` имеют убывающий приоритет от начала к концу."

# a52c93bdf6504c55a2c0a3679df1fdfb
#: ../../topics/i18n/translation.txt:1135
msgid "Using the JavaScript translation catalog"
msgstr "Использование каталога переводов JavaScript"

# 838b8a66c1d1427f837cdd3f6164fbec
#: ../../topics/i18n/translation.txt:1139
msgid ""
"To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""
"Для использования этого каталога, просто запросите динамически генерируемый "
"скрипт, как показано ниже:"

# 442ff0d892324a3f98635b3ea491e312
#: ../../topics/i18n/translation.txt:1145
msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view. "
"When the catalog is loaded, your JavaScript code can use the following "
"methods:"
msgstr ""
"Здесь используется запрос на поиск URL для представления, генерирующего "
"JavaScript-каталог. После загрузки каталога, ваш JavaScript код может "
"использовать следующие методы::"

# 8a9380b1e8e04665968596511ad0d7c4
#: ../../topics/i18n/translation.txt:1148
#: ../../topics/i18n/translation.txt:1158
msgid "``gettext``"
msgstr "``gettext``"

# 8a9380b1e8e04665968596511ad0d7c4
#: ../../topics/i18n/translation.txt:1149
#: ../../topics/i18n/translation.txt:1166
msgid "``ngettext``"
msgstr "``ngettext``"

#: ../../topics/i18n/translation.txt:1150
#: ../../topics/i18n/translation.txt:1176
msgid "``interpolate``"
msgstr "``interpolate``"

#: ../../topics/i18n/translation.txt:1151
#: ../../topics/i18n/translation.txt:1212
msgid "``get_format``"
msgstr "``get_format``"

# 29d8ea63bea84650b91ced3be3487094
#: ../../topics/i18n/translation.txt:1152
#: ../../topics/i18n/translation.txt:1241
msgid "``gettext_noop``"
msgstr "``gettext_noop``"

# 8a9380b1e8e04665968596511ad0d7c4
#: ../../topics/i18n/translation.txt:1153
#: ../../topics/i18n/translation.txt:1252
msgid "``pgettext``"
msgstr "``pgettext``"

# 8a9380b1e8e04665968596511ad0d7c4
#: ../../topics/i18n/translation.txt:1154
#: ../../topics/i18n/translation.txt:1261
msgid "``npgettext``"
msgstr "``npgettext``"

#: ../../topics/i18n/translation.txt:1155
#: ../../topics/i18n/translation.txt:1273
msgid "``pluralidx``"
msgstr "``pluralidx``"

#: ../../topics/i18n/translation.txt:1160
msgid ""
"The ``gettext`` function behaves similarly to the standard ``gettext`` "
"interface within your Python code::"
msgstr ""
"Функция ``gettext`` работает аналогично стандартной функции ``gettext`` "
"Python::"

# ed0cb915d3374508802b446b436c11ea
#: ../../topics/i18n/translation.txt:1168
msgid ""
"The ``ngettext`` function provides an interface to pluralize words and "
"phrases::"
msgstr ""
"Функция ``ngettext`` позволяет получать слова и предложения в множественной "
"формеы::"

# 2111dae3ac0848ac8b168b8531ec8277
#: ../../topics/i18n/translation.txt:1178
msgid ""
"The ``interpolate`` function supports dynamically populating a format "
"string. The interpolation syntax is borrowed from Python, so the "
"``interpolate`` function supports both positional and named interpolation:"
msgstr ""
"Функция ``interpolate`` поддерживает динамическое форматирование строк. "
"Синтаксис интерполяции заимствован из Python, т.е. функция ``interpolate`` "
"поддерживает как позиционные, так и именованные интерполяции:"

# afd5f718dedd42cbb18c759674040875
#: ../../topics/i18n/translation.txt:1182
msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example::"
msgstr ""
"Позиционная интерполяция: ``obj`` содержит объект Array, чьи значения "
"элементов затем последовательно интерполируются в соответствующие "
"подстановки ``fmt``, в порядке их определения. Например::"

# 7556054f8c864f3182137eed17a6c66c
#: ../../topics/i18n/translation.txt:1192
msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as ``true``. ``obj`` contains a JavaScript object or "
"associative array. For example::"
msgstr ""
"Именованная интерполяция: Этот режим выбирается при передаче необязательного "
"параметра ``named`` со значением ``true``. Параметр ``obj`` содержит "
"JavaScript объект или ассоциативный массив. Например::"

# 8ba740292ed24182a9933a0bbb11a55e
#: ../../topics/i18n/translation.txt:1205
msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep "
"it to those cases where you really need it (for example, in conjunction with "
"``ngettext`` to produce proper pluralizations)."
msgstr ""
"Не злоупотребляйте интерполяцией строк, помните: это всё JavaScript, и для "
"проверки используются регулярные выражения. Интерполяция в JavaScript "
"выполняется не так быстро, как на Python, так что используйте её только при "
"реальной необходимости."

#: ../../topics/i18n/translation.txt:1214
msgid ""
"The ``get_format`` function has access to the configured i18n formatting "
"settings and can retrieve the format string for a given setting name::"
msgstr ""
"Функция ``get_format`` предоставляет доступ к настройкам форматирования "
"интернационализации::"

#: ../../topics/i18n/translation.txt:1220
msgid "It has access to the following settings:"
msgstr "Предоставляет доступ к следующим настройкам:"

# 54fa4aea7be44835b7b5b1591d8eddb5
#: ../../topics/i18n/translation.txt:1222
msgid ":setting:`DATE_FORMAT`"
msgstr ":setting:`DATE_FORMAT`"

# cb080fc685bd49fead954eb9295b194e
#: ../../topics/i18n/translation.txt:1223
msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ":setting:`DATE_INPUT_FORMATS`"

# cb080fc685bd49fead954eb9295b194e
#: ../../topics/i18n/translation.txt:1224
msgid ":setting:`DATETIME_FORMAT`"
msgstr ":setting:`DATETIME_FORMAT`"

#: ../../topics/i18n/translation.txt:1225
msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ":setting:`DATETIME_INPUT_FORMATS`"

# 54fa4aea7be44835b7b5b1591d8eddb5
#: ../../topics/i18n/translation.txt:1226
msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ":setting:`DECIMAL_SEPARATOR`"

#: ../../topics/i18n/translation.txt:1227
msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ":setting:`FIRST_DAY_OF_WEEK`"

#: ../../topics/i18n/translation.txt:1228
msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ":setting:`MONTH_DAY_FORMAT`"

# 008f583b6b6f4f42a7c174041b08c5ec
#: ../../topics/i18n/translation.txt:1229
msgid ":setting:`NUMBER_GROUPING`"
msgstr ":setting:`NUMBER_GROUPING`"

#: ../../topics/i18n/translation.txt:1230
msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ":setting:`SHORT_DATE_FORMAT`"

#: ../../topics/i18n/translation.txt:1231
msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ":setting:`SHORT_DATETIME_FORMAT`"

# 54fa4aea7be44835b7b5b1591d8eddb5
#: ../../topics/i18n/translation.txt:1232
msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ":setting:`THOUSAND_SEPARATOR`"

# cb080fc685bd49fead954eb9295b194e
#: ../../topics/i18n/translation.txt:1233
msgid ":setting:`TIME_FORMAT`"
msgstr ":setting:`TIME_FORMAT`"

#: ../../topics/i18n/translation.txt:1234
msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ":setting:`TIME_INPUT_FORMATS`"

#: ../../topics/i18n/translation.txt:1235
msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ":setting:`YEAR_MONTH_FORMAT`"

#: ../../topics/i18n/translation.txt:1237
msgid ""
"This is useful for maintaining formatting consistency with the Python-"
"rendered values."
msgstr ""
"Важно использовать форматирование аналогичное форматированию значений в "
"Python."

#: ../../topics/i18n/translation.txt:1243
msgid ""
"This emulates the ``gettext`` function but does nothing, returning whatever "
"is passed to it::"
msgstr ""
"Эмулирует функцию ``gettext``, но ничего не делает, возвращая переданное "
"значение::"

#: ../../topics/i18n/translation.txt:1248
msgid ""
"This is useful for stubbing out portions of the code that will need "
"translation in the future."
msgstr ""
"Полезно при написании кода, который будет использовать перевод в будущем."

#: ../../topics/i18n/translation.txt:1254
msgid ""
"The ``pgettext`` function behaves like the Python variant (:func:`~django."
"utils.translation.pgettext()`), providing a contextually translated word::"
msgstr ""
"Функция ``pgettext`` работает как и аналогичная функция Python (:func:"
"`~django.utils.translation.pgettext()`), позволяя указать контекст для "
"переводимых строк::"

#: ../../topics/i18n/translation.txt:1263
msgid ""
"The ``npgettext`` function also behaves like the Python variant (:func:"
"`~django.utils.translation.npgettext()`), providing a **pluralized** "
"contextually translated word::"
msgstr ""
"Функция ``npgettext`` работает как и аналогичная функция Python (:func:"
"`~django.utils.translation.npgettext()`), позволяя указать контекст при "
"переводе строк в **множественном числе**::"

#: ../../topics/i18n/translation.txt:1275
msgid ""
"The ``pluralidx`` function works in a similar way to the :tfilter:"
"`pluralize` template filter, determining if a given ``count`` should use a "
"plural form of a word or not::"
msgstr ""
"Функция ``pluralidx`` аналогично шаблонному фильтру :tfilter:`pluralize`, "
"определяя нужно ли использоваться множественную форму для переданного "
"``count``::"

#: ../../topics/i18n/translation.txt:1286
msgid ""
"In the simplest case, if no custom pluralization is needed, this returns "
"``false`` for the integer ``1`` and ``true`` for all other numbers."
msgstr ""
"В самом простом варианте возвращает ``false`` для ``1`` и ``true`` для "
"остальных значений."

#: ../../topics/i18n/translation.txt:1289
msgid ""
"However, pluralization is not this simple in all languages. If the language "
"does not support pluralization, an empty value is provided."
msgstr ""
"Однако, множественная форма не такая простая для всех языков. Если язык не "
"поддерживает множественные формы, будет возвращено пустое значение."

#: ../../topics/i18n/translation.txt:1292
msgid ""
"Additionally, if there are complex rules around pluralization, the catalog "
"view will render a conditional expression. This will evaluate to either a "
"``true`` (should pluralize) or ``false`` (should **not** pluralize) value."
msgstr ""
"Также, если правила множественного числа сложные, каталог будет содержать "
"выражение для их определения. В этом случае будет возвращено ``true`` "
"(множественное число) или ``false`` (**не** множественное)."

# 9026fb8f18494e1d900f38c9c2e8aaa7
#: ../../topics/i18n/translation.txt:1299
#, fuzzy
msgid "The ``JSONCatalog`` view"
msgstr "Представление ``json_catalog``"

#: ../../topics/i18n/translation.txt:1305
#, fuzzy
msgid ""
"In order to use another client-side library to handle translations, you may "
"want to take advantage of the ``JSONCatalog`` view. It's similar to :class:"
"`~django.views.i18n.JavaScriptCatalog` but returns a JSON response."
msgstr ""
"Если вы используете другие клиентские библиотеки для перевода, вам может "
"пригодится представление ``json_catalog()``. Оно работает аналогично :meth:"
"`~django.views.i18n.javascript_catalog`, но возвращает JSON."

#: ../../topics/i18n/translation.txt:1309
msgid ""
"See the documentation for :class:`~django.views.i18n.JavaScriptCatalog` to "
"learn about possible values and use of the ``domain`` and ``packages`` "
"attributes."
msgstr ""

#: ../../topics/i18n/translation.txt:1313
#: ../../topics/i18n/translation.txt:1364
msgid "The response format is as follows:"
msgstr "Формат ответа следующий:"

# 9026fb8f18494e1d900f38c9c2e8aaa7
#: ../../topics/i18n/translation.txt:1330
msgid "The ``json_catalog`` view"
msgstr "Представление ``json_catalog``"

#: ../../topics/i18n/translation.txt:1336
msgid ""
"``json_catalog()`` is deprecated in favor of :class:`JSONCatalog` and will "
"be removed in Django 2.0."
msgstr ""

#: ../../topics/i18n/translation.txt:1339
msgid ""
"In order to use another client-side library to handle translations, you may "
"want to take advantage of the ``json_catalog()`` view. It's similar to :meth:"
"`~django.views.i18n.javascript_catalog` but returns a JSON response."
msgstr ""
"Если вы используете другие клиентские библиотеки для перевода, вам может "
"пригодится представление ``json_catalog()``. Оно работает аналогично :meth:"
"`~django.views.i18n.javascript_catalog`, но возвращает JSON."

# 9f41614acf264cc6b5a4a7ed9a364880
#: ../../topics/i18n/translation.txt:1343
msgid ""
"The JSON object contains i18n formatting settings (those available for "
"`get_format`_), a plural rule (as a ``plural`` part of a GNU gettext "
"``Plural-Forms`` expression), and translation strings. The translation "
"strings are taken from applications or Django's own translations, according "
"to what is specified either via ``urlpatterns`` arguments or as request "
"parameters. Paths listed in :setting:`LOCALE_PATHS` are also included."
msgstr ""
"Объект JSON содержит настройки форматирования интернационализации (те, "
"которые можно получить через `get_format`_), правила определения "
"множественного числа (часть ``plural`` выражения ``Plural-Forms`` для GNU "
"gettext), и строки с переводом. Переведённые строки собираются из приложений "
"или Django, в зависимости от того, что вы указали в ``urlpatterns``, или "
"аргументов запроса. Пути, указанные в параметре конфигурации :setting:"
"`LOCALE_PATHS`, также принимаются во внимание."

#: ../../topics/i18n/translation.txt:1350
msgid ""
"The view is hooked up to your application and configured in the same fashion "
"as :meth:`~django.views.i18n.javascript_catalog` (namely, the ``domain`` and "
"``packages`` arguments behave identically)::"
msgstr ""
"Представление подключается и настраивается как и :meth:`~django.views.i18n."
"javascript_catalog` (аргументы ``domain`` и ``packages``работают "
"аналогично)::"

# 555b8e075e544a2ab045c3fdd28637ca
#: ../../topics/i18n/translation.txt:1381
msgid "Note on performance"
msgstr "Комментарий о производительности"

# c056f3fc845946bbbfc572c48d71cb97
#: ../../topics/i18n/translation.txt:1383
#, fuzzy
msgid ""
"The various JavaScript/JSON i18n views generate the catalog from ``.mo`` "
"files on every request. Since its output is constant, at least for a given "
"version of a site, it's a good candidate for caching."
msgstr ""
"Представление :func:`~django.views.i18n.javascript_catalog` создаёт каталог "
"из ``.mo`` файлов при каждом запросе. И раз вывод предоставления неизменен, "
"как минимум для текущей версии сайта, его следует закэшировать."

# 69ad87b5b7a44cddb324d8f362bf525c
#: ../../topics/i18n/translation.txt:1387
#, fuzzy
msgid ""
"Server-side caching will reduce CPU load. It's easily implemented with the :"
"func:`~django.views.decorators.cache.cache_page` decorator. To trigger cache "
"invalidation when your translations change, provide a version-dependent key "
"prefix, as shown in the example below, or map the view at a version-"
"dependent URL::"
msgstr ""
"Кэширование на стороне сервера снизит нагрузку на ЦПУ. С помощью декоратора :"
"func:`~django.views.decorators.cache.cache_page` организовать кэширование "
"несложно. Для сброса кэша при изменении переведённых ресурсов следует "
"предоставлять префикс, зависящий от номера версии, как это показано на "
"следующем примере, или подключить представление к URL, содержащему номер "
"версии."

# 9bf8a5e774204f3fbec1c4d48de7a3af
#: ../../topics/i18n/translation.txt:1403
#, fuzzy
msgid ""
"Client-side caching will save bandwidth and make your site load faster. If "
"you're using ETags (:class:`~django.middleware.http."
"ConditionalGetMiddleware`), you're already covered. Otherwise, you can "
"apply :ref:`conditional decorators <conditional-decorators>`. In the "
"following example, the cache is invalidated whenever you restart your "
"application server::"
msgstr ""
"Кэширование на стороне клиента экономит пропускную способность и ускоряет "
"отклик сайта. Если вы используете ETags (:setting:`USE_ETAGS = True "
"<USE_ETAGS>`), у вас уже всё включено. С другой стороны, вы можете "
"использовать :ref:`условные декораторы <conditional-decorators>`. В "
"следующем примере, кэш сбрасывается при перезапуске сервера приложений."

# 71173f3554b047c6b6592a861c00111e
#: ../../topics/i18n/translation.txt:1421
msgid ""
"You can even pre-generate the JavaScript catalog as part of your deployment "
"procedure and serve it as a static file. This radical technique is "
"implemented in django-statici18n_."
msgstr ""
"Также вы можете заранее создавать javascript-каталог во время процесса "
"выкладывания кода на сервер и использовать его как статичный файл. Такой "
"подход используется в django-statici18n_."

# 45bd67feda4b42e78f08e9c914278f8f
#: ../../topics/i18n/translation.txt:1430
msgid "Internationalization: in URL patterns"
msgstr "Интернационализация: в шаблонах URL"

# f6b7b145069d436088fbea95bf8ff66b
#: ../../topics/i18n/translation.txt:1434
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr "Django предоставляет два способа интернационализации шаблонов URL:"

# cf4745529ddd45daa6ef4b94081a8434
#: ../../topics/i18n/translation.txt:1436
msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""
"Добавление языкового префикса в начало шаблонов URL, чтобы класс :class:"
"`~django.middleware.locale.LocaleMiddleware` мог определить требуемый язык "
"по запрошенному ресурсу."

# 909389470d494bd8803d61bac0417547
#: ../../topics/i18n/translation.txt:1440
msgid ""
"Making URL patterns themselves translatable via the :func:`django.utils."
"translation.ugettext_lazy()` function."
msgstr ""
"Перевод самих шаблонов URL с помощью функции :func:`django.utils.translation."
"ugettext_lazy()`."

# a350d9ea9cd244c4a50027ca723574b8
#: ../../topics/i18n/translation.txt:1445
#, fuzzy
msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have :class:`django.middleware."
"locale.LocaleMiddleware` in your :setting:`MIDDLEWARE` setting."
msgstr ""
"Использование любой из этих возможностей требует, чтобы активный язык был "
"установлен при каждом запросе. Другими словами, в должны указать :class:"
"`django.middleware.locale.LocaleMiddleware` в настройках :setting:"
"`MIDDLEWARE_CLASSES`."

# dee5cb823b2c4a8489c0b9f61132156e
#: ../../topics/i18n/translation.txt:1451
msgid "Language prefix in URL patterns"
msgstr "Языковой префикс в шаблонах URL"

# 1c9d59bd0bb84a1d8897ad79d869dcd1
#: ../../topics/i18n/translation.txt:1455
#, fuzzy
msgid ""
"This function can be used in a root URLconf and Django will automatically "
"prepend the current active language code to all URL patterns defined within :"
"func:`~django.conf.urls.i18n.i18n_patterns`."
msgstr ""
"Данная функция может быть использована в корневой схеме URL и Django будет "
"автоматически предварять все шаблоны URL, определённые через :func:`~django."
"conf.urls.i18n.i18n_patterns`, кодом текущего языка. Пример шаблонов URL::"

#: ../../topics/i18n/translation.txt:1459
msgid ""
"Setting ``prefix_default_language`` to ``False`` removes the prefix from the "
"default language (:setting:`LANGUAGE_CODE`). This can be useful when adding "
"translations to existing site so that the current URLs won't change."
msgstr ""

# 4b1422c7855141aabb49bf1853e5d449
#: ../../topics/i18n/translation.txt:1463
#, fuzzy
msgid "Example URL patterns::"
msgstr "Перевод шаблонов URL"

# c08d15b5138548f8b9e1d418981ff62c
#: ../../topics/i18n/translation.txt:1487
msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns`` "
"function. Example::"
msgstr ""
"После определения этих шаблонов URL, Django автоматически подставит префикс "
"языка к шаблонам, которые были добавлены через функцию ``i18n_patterns``. "
"Например::"

#: ../../topics/i18n/translation.txt:1504
msgid ""
"With ``prefix_default_language=False`` and  ``LANGUAGE_CODE='en'``, the URLs "
"will be::"
msgstr ""

# 83a23c18ea844499b98cbc5adb601a17
#: ../../topics/i18n/translation.txt:1517
#, fuzzy
msgid "The ``prefix_default_language`` parameter was added."
msgstr "Добавлена опция ``name_translated``."

# d436dd7eb0e5449b98ba46d948795efe
#: ../../topics/i18n/translation.txt:1521
#, fuzzy
msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in a root "
"URLconf. Using it within an included URLconf will throw an :exc:`~django."
"core.exceptions.ImproperlyConfigured` exception."
msgstr ""
"Функцию :func:`~django.conf.urls.i18n.i18n_patterns` можно использовать "
"только в корневом URLconf. Попытка использовать её в других местах приведёт "
"к исключению :exc:`~django.core.exceptions.ImproperlyConfigured`."

#: ../../topics/i18n/translation.txt:1527
msgid ""
"In older version, using ``i18n_patterns`` in a root URLconf different from :"
"setting:`ROOT_URLCONF` by setting :attr:`request.urlconf <django.http."
"HttpRequest.urlconf>` wasn't supported."
msgstr ""

# 366fc324754442af99a5c06addecfa19
#: ../../topics/i18n/translation.txt:1533
msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with "
"an automatically-added language prefix."
msgstr ""
"Удостоверьтесь, что у вас нет таких шаблонов URL, которые могут "
"конфликтовать с автоматически добавленным префиксом."

# 4b1422c7855141aabb49bf1853e5d449
#: ../../topics/i18n/translation.txt:1539
msgid "Translating URL patterns"
msgstr "Перевод шаблонов URL"

# ca0d709e70174191bd22257dbfaaf03b
#: ../../topics/i18n/translation.txt:1541
msgid ""
"URL patterns can also be marked translatable using the :func:`~django.utils."
"translation.ugettext_lazy` function. Example::"
msgstr ""
"Шаблоны URL могут быть помечены как подлежащие переводу с помощью функции :"
"func:`~django.utils.translation.ugettext_lazy`. Например::"

# 181504d331e74db8b399410b3e4b05c0
#: ../../topics/i18n/translation.txt:1567
#, fuzzy
msgid ""
"After you've created the translations, the :func:`~django.urls.reverse` "
"function will return the URL in the active language. Example::"
msgstr ""
"После создания перевода функция :func:`~django.core.urlresolvers.reverse` "
"будет возвращать URL для активного языка. Например::"

# 54bcf2e934a841bfb084c5b9432b293e
#: ../../topics/i18n/translation.txt:1583
msgid ""
"In most cases, it's best to use translated URLs only within a language-code-"
"prefixed block of patterns (using :func:`~django.conf.urls.i18n."
"i18n_patterns`), to avoid the possibility that a carelessly translated URL "
"causes a collision with a non-translated URL pattern."
msgstr ""
"В большинстве случаев, лучше применять переведенные URL только внутри блока, "
"который добавляет языковой префикс для шаблонов (using :func:`~django.conf."
"urls.i18n.i18n_patterns`), это поможет избежать конфликта небрежно "
"переведенных URL с непереведёнными шаблонами."

# 637fdc49428643f38f09ec4d5b643d0d
#: ../../topics/i18n/translation.txt:1592
msgid "Reversing in templates"
msgstr "Генерация URL в шаблонах"

# 37851819d0974572a4347b864b10240e
#: ../../topics/i18n/translation.txt:1594
msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the :ttag:`language` "
"template tag. It enables the given language in the enclosed template section:"
msgstr ""
"Если локализованные URL генерируются в шаблонах, они всегда используют "
"текущий язык. Для получения URL для другого языка следует использовать "
"шаблонный тег :ttag:`language`. Этот тег включает выбранный язык внутри "
"своего блока:"

# ab020b3f16984caba06944e4cfd438c1
#: ../../topics/i18n/translation.txt:1611
msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ""
"Шаблонный тег :ttag:`language` принимает в качестве аргумента код языка."

# bda51245772d489f976e773d678c1460
#: ../../topics/i18n/translation.txt:1616
msgid "Localization: how to create language files"
msgstr "Локализация: как создать языковые файлы"

# facb1063a4374bc686f1ad07add17059
#: ../../topics/i18n/translation.txt:1618
msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""
"После того, как текстовые ресурсы приложения были помечены для перевода, "
"следует выполнить (или получить) сам перевод. Вот как это работает."

# 809dfc8c04484745bd8abcbef48016e6
#: ../../topics/i18n/translation.txt:1623
msgid "Message files"
msgstr "Файлы сообщений"

# 3a66e4e1753d4065ae23e207594a061e
#: ../../topics/i18n/translation.txt:1625
msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""
"Первым шагом будет создание :term:`файла сообщений` для нового языка. Файл "
"сообщений является простым текстовым файлом, предоставляющим один язык, "
"который содержит все переводимые строки и правила их представления на этом "
"языке. Файлы сообщений имеют расширение ``.po``."

# 1505f68ea35b4c58b7183d55103017ad
#: ../../topics/i18n/translation.txt:1630
msgid ""
"Django comes with a tool, :djadmin:`django-admin makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""
"Django поставляется с утилитой, :djadmin:`django-admin makemessages "
"<makemessages>`, которая автоматизирует создание и обновление этих файлов."

# 8d4f12ef3cd8462ca3299cdff8026b5b
#: ../../topics/i18n/translation.txt:1633
msgid "Gettext utilities"
msgstr "Утилиты Gettext"

# cb11b6727df34b5e90208f9542286ed3
#: ../../topics/i18n/translation.txt:1635
msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""
"Команда ``makemessages`` (и описанная далее ``compilemessages``) использует "
"команды из утилит набора GNU gettext: ``xgettext``, ``msgfmt``, ``msgmerge`` "
"и ``msguniq``."

# e388d312e0a2475583143102cc14c7c8
#: ../../topics/i18n/translation.txt:1639
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr "Минимальной поддерживаемой версией утилит ``gettext`` является 0.15."

# 1f46324727d240a3bf1eea2134a95787
#: ../../topics/i18n/translation.txt:1641
msgid "To create or update a message file, run this command::"
msgstr "Для создания или обновления файла сообщений запустите эту команду::"

# 93d3d9846a8f4bc6b9fd46c68c988181
#: ../../topics/i18n/translation.txt:1645
msgid ""
"...where ``de`` is the :term:`locale name` for the message file you want to "
"create. For example, ``pt_BR`` for Brazilian Portuguese, ``de_AT`` for "
"Austrian German or ``id`` for Indonesian."
msgstr ""
"... где ``de`` является :term:`названием локали<locale name>` для "
"создаваемого файла сообщений. Например, это ``pt_BR`` для бразильского "
"варианта португальского языка и ``de_AT`` для австрийского варианта "
"немецкого языка или ``id`` для индонезийского."

# 068a03a336eb4612a8f9afabc42418c1
#: ../../topics/i18n/translation.txt:1649
msgid "The script should be run from one of two places:"
msgstr "Этот скрипт должен быть запущен из одного из двух мест:"

# 7d3a85dbe7484e308fe87e8c3bbab296
#: ../../topics/i18n/translation.txt:1651
msgid ""
"The root directory of your Django project (the one that contains ``manage."
"py``)."
msgstr ""
"Корневой каталог вашего Django проекта (который содержит ``manage.py``)"

# 8a255ce4e8df49c1a95ad1d22ba83184
#: ../../topics/i18n/translation.txt:1653
msgid "The root directory of one of your Django apps."
msgstr "Корневой каталог одного из приложений Django."

# fcd6f3a41fa74b138c6a502d697cb10c
#: ../../topics/i18n/translation.txt:1655
msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation (see :ref:`how-django-"
"discovers-translations` and be sure :setting:`LOCALE_PATHS` is configured "
"correctly). It creates (or updates) a message file in the directory ``locale/"
"LANG/LC_MESSAGES``. In the ``de`` example, the file will be ``locale/de/"
"LC_MESSAGES/django.po``."
msgstr ""
"Скрипт просматривает дерево исходного кода вашего проекта или приложения и "
"извлекает все строки, помеченные для перевода(смотрите :ref:`how-django-"
"discovers-translations` и убедитесь что :setting:`LOCALE_PATHS` настроен "
"правильно). Затем скрипт создаёт (или обновляет) файл сообщений в каталоге "
"``locale/LANG/LC_MESSAGES``. В случае примера с ``de``, файл будет создан в "
"``locale/de/LC_MESSAGES/django.po``."

# cf6db06504514179b992191627a461e8
#: ../../topics/i18n/translation.txt:1662
msgid ""
"When you run ``makemessages`` from the root directory of your project, the "
"extracted strings will be automatically distributed to the proper message "
"files. That is, a string extracted from a file of an app containing a "
"``locale`` directory will go in a message file under that directory. A "
"string extracted from a file of an app without any ``locale`` directory will "
"either go in a message file under the directory listed first in :setting:"
"`LOCALE_PATHS` or will generate an error if :setting:`LOCALE_PATHS` is empty."
msgstr ""
"При запуске ``makemessages`` из корневого каталога вашего проекта, "
"извлечённые строки будут автоматически размещены в соответствующих файлах "
"сообщений. Таким образом, строка, полученная из файла приложения, которое "
"обладает каталогом ``locale``, будет размещена в файле сообщений в этом "
"каталоге. А строка, полученная из файла приложения, у которого нет каталога "
"``locale``, будет размещена в файле сообщений в каталоге, который первым "
"упомянут в :setting:`LOCALE_PATHS` или будет выведена ошибка если :setting:"
"`LOCALE_PATHS` пуст."

# e65e72467cbe421ea446ad3c9d7d27f2
#: ../../topics/i18n/translation.txt:1670
msgid ""
"By default :djadmin:`django-admin makemessages <makemessages>` examines "
"every file that has the ``.html`` or ``.txt`` file extension. In case you "
"want to override that default, use the ``--extension`` or ``-e`` option to "
"specify the file extensions to examine::"
msgstr ""
"По умолчанию, :djadmin:`django-admin makemessages <makemessages>` "
"просматривает каждый файл с расширениями ``.html`` или ``.txt``. Если вам "
"надо изменить это поведение, используйте опцию ``--extension`` или ``-e`` "
"для указания нужного расширения для просматриваемых файлов::"

# 7a88224a14144cb5ae18de8079f37c81
#: ../../topics/i18n/translation.txt:1677
msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or ``--"
"extension`` multiple times::"
msgstr ""
"Разделяйте множество расширений с помощью запятой и/или используйте опцию "
"многократно::"

# 2b16db6c14ee447c9fa32e8150f1948e
#: ../../topics/i18n/translation.txt:1684
msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special 'djangojs' domain, "
"**not** ``-e js``."
msgstr ""
"При :ref:`создании файлов сообщений на основе Javascript <creating-message-"
"files-from-js-code>` вам потребуется использовать специальный домен "
"'djangojs', а **не** опцию ``-e js``."

# 637fdc49428643f38f09ec4d5b643d0d
#: ../../topics/i18n/translation.txt:1688
msgid "Using Jinja2 templates?"
msgstr "Использование шаблонов Jinja2?"

#: ../../topics/i18n/translation.txt:1690
msgid ""
":djadmin:`makemessages` doesn't understand the syntax of Jinja2 templates. "
"To extract strings from a project containing Jinja2 templates, use `Message "
"Extracting`_ from Babel_ instead."
msgstr ""
":djadmin:`makemessages` не понимает синтаксис шаблонов Jinja2. Чтобы "
"получить строки для перевода из шаблонов Jinja2, используйте из Babel_."

# bf1e1b355e8346f5ae8dfd611fc405b2
#: ../../topics/i18n/translation.txt:1694
msgid "Here's an example ``babel.cfg`` configuration file::"
msgstr "Пример файла настроек ``babel.cfg``::"

#: ../../topics/i18n/translation.txt:1703
msgid ""
"Make sure you list all extensions you're using! Otherwise Babel won't "
"recognize the tags defined by these extensions and will ignore Jinja2 "
"templates containing them entirely."
msgstr ""
"Не забудьте указать все расширения, которые вы используете! Иначе Babel не "
"сможет определить теги из этих расширений и полностью проигнорирует шаблоны "
"Jinja2, которые их содержат."

#: ../../topics/i18n/translation.txt:1707
msgid ""
"Babel provides similar features to :djadmin:`makemessages`, can replace it "
"in general, and doesn't depend on ``gettext``. For more information, read "
"its documentation about `working with message catalogs`_."
msgstr ""
"Babel предоставляет функционал аналогичный :djadmin:`makemessages`, и может "
"полностью его заменить, и не зависит от ``gettext``. Подробности читайте в "
"документации библиотеки."

# c5cf92dafe5e428d814544d47dd83d7f
#: ../../topics/i18n/translation.txt:1715
msgid "No gettext?"
msgstr "Нет gettext?"

# 13225c1b91224c3c9eb9fd7920ec2cc6
#: ../../topics/i18n/translation.txt:1717
msgid ""
"If you don't have the ``gettext`` utilities installed, :djadmin:"
"`makemessages` will create empty files. If that's the case, either install "
"the ``gettext`` utilities or just copy the English message file (``locale/en/"
"LC_MESSAGES/django.po``) if available and use it as a starting point; it's "
"just an empty translation file."
msgstr ""
"Если у вас не установлены утилиты ``gettext``, тогда :djadmin:`makemessages` "
"создаст пустые файлы. Если вы столкнулись с такой проблемой, тогда либо "
"установите утилиты ``gettext``, либо скопируйте файл сообщений для "
"английского языка (``locale/en/LC_MESSAGES/django.po``), если он доступен, и "
"используйте его как стартовую точку; это просто пустой файл переводов."

# b7755c741fcd42898e7fff4b083e853c
# eabc29b3e7a94f329e55fabb79a1eb92
#: ../../topics/i18n/translation.txt:1723
#: ../../topics/i18n/translation.txt:1796
msgid "Working on Windows?"
msgstr "Работаете на Windows?"

# a0ae91eb639142468eb2fa63e49c780d
#: ../../topics/i18n/translation.txt:1725
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr ""
"Если вы используете Windows и вам надо установить утилиты GNU ``gettext`` "
"для работы :djadmin:`makemessages`, обратитесь к :ref:`gettext_on_windows` "
"за дополнительной информацией."

# 0664df905c8348d1bd0a105a68425eb9
#: ../../topics/i18n/translation.txt:1729
msgid ""
"The format of ``.po`` files is straightforward. Each ``.po`` file contains a "
"small bit of metadata, such as the translation maintainer's contact "
"information, but the bulk of the file is a list of **messages** -- simple "
"mappings between translation strings and the actual translated text for the "
"particular language."
msgstr ""
"Формат ``.po`` файлов несложен. Каждый  ``.po`` файл содержит небольшой "
"заголовок, например, контактную информацию ответственного. Но основная часть "
"файла является списком **сообщений** -- простое сопоставление переводимых "
"строк с переводами на конкретный язык."

# 1c99d0e1b6bb4561a4455f4318385777
#: ../../topics/i18n/translation.txt:1735
msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""
"Например, если ваше Django приложение содержит переводимую строку ``"
"\"Welcome to my site.\"``, так::"

# fe432d560bfa45f18c4f3a3c6e44928a
#: ../../topics/i18n/translation.txt:1740
msgid ""
"...then :djadmin:`django-admin makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message:"
msgstr ""
"...тогда :djadmin:`django-admin makemessages <makemessages>` создаст ``.po`` "
"файл, содержащий следующие данные -- сообщение:"

# 60e4ddb9813648a98af73db7a7cf27b5
#: ../../topics/i18n/translation.txt:1749
msgid "A quick explanation:"
msgstr "Краткое объяснение:"

# 7afe574ec10c4fd1a6af0539d59d5570
#: ../../topics/i18n/translation.txt:1751
msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr ""
"``msgid`` является переводимой строкой, которая определена в исходном коде. "
"Не изменяйте её."

# 9554c6b4bf6347a0b8c34144f61cdee1
#: ../../topics/i18n/translation.txt:1753
msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out "
"empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""
"``msgstr`` является местом, где вы пишите свой перевод. Обычно оно пустое, "
"именно вы отвечаете за его наполнение. Удостоверьтесь, что вы сохранили "
"кавычки вокруг перевода."

# 1860720a0f9e490e8fdf8d839c0e5ec4
#: ../../topics/i18n/translation.txt:1756
msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""
"Для удобства, каждое сообщение включает, в виде закомментированной строки, "
"размещенной выше строки ``msgid``, имя файла и номер строки из которой была "
"получена переводимая строка."

# ce509ef612e54457ad477b1e57406b73
#: ../../topics/i18n/translation.txt:1760
msgid ""
"Long messages are a special case. There, the first string directly after the "
"``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are "
"directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""
"Длинные сообщения являются особым случаем. Так, первая строка сразу после "
"``msgstr`` (или ``msgid``) всегда пустая. Затем идёт длинный перевод, "
"разбитый на несколько строк. Эти строки будут собраны в одну. Не забывайте "
"вставлять завершающие пробелы, иначе итоговая строка будет собрана без них!"

# becb4b1962904ffb9716daf1586abcec
#: ../../topics/i18n/translation.txt:1766
msgid "Mind your charset"
msgstr "Укажите свою кодировку"

# 7058b85251be4c4d8f309a3c5a8eda05
#: ../../topics/i18n/translation.txt:1768
msgid ""
"Due to the way the ``gettext`` tools work internally and because we want to "
"allow non-ASCII source strings in Django's core and your applications, you "
"**must** use UTF-8 as the encoding for your PO files (the default when PO "
"files are created).  This means that everybody will be using the same "
"encoding, which is important when Django processes the PO files."
msgstr ""
"Из-за особенностей внутренней работы утилит пакета ``gettext`` и нашего "
"желания позволить использование не-ASCII символов в строках кода Django и "
"ваших приложений, вы **должны** использовать UTF-8 в качестве кодировки "
"ваших PO файлов (по умолчанию при их создании). Это означает, что все будут "
"использовать одинаковую кодировку, что очень важно в момент, когда Django "
"обрабатывает PO файлы."

# b40a35dff6f74eec98b9d2aa3d3e25f1
#: ../../topics/i18n/translation.txt:1774
msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this::"
msgstr ""
"Для повторного прохода по всему исходному коду и шаблонам в поисках новых "
"переводимых строк и для обновления всех файлов с сообщениями для **всех** "
"языков, выполните это::"

# 88c1989b21684506b45f99258bb2d641
#: ../../topics/i18n/translation.txt:1780
msgid "Compiling message files"
msgstr "Компиляция файлов с сообщениями"

# a7ceef8749f743d889aa37c52a9b5a3d
#: ../../topics/i18n/translation.txt:1782
msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin compilemessages "
"<compilemessages>` utility."
msgstr ""
"После того, как вы создали файл с сообщениями, а также после каждого его "
"обновления, вам следует скомпилировать этот файл, чтобы позволить "
"``gettext`` его использовать. Сделайте это с помощью утилиты :djadmin:"
"`django-admin compilemessages <compilemessages>`."

# a514e8d422cb4c00ad13bac4485f0131
#: ../../topics/i18n/translation.txt:1787
msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin makemessages "
"<makemessages>`, run :djadmin:`django-admin compilemessages "
"<compilemessages>` like this::"
msgstr ""
"Эта команда обрабатывает все имеющиеся ``.po`` файлы и создаёт на их основе "
"``.mo`` файлы, которые являются бинарными файлами, оптимизированными для "
"использования ``gettext``. Запускать :djadmin:`django-admin compilemessages "
"<compilemessages>` надо в том же каталоге, что и :djadmin:`django-admin "
"makemessages <makemessages>`, вот так::"

# bafed304812f45dc95872033fde266d9
#: ../../topics/i18n/translation.txt:1794
msgid "That's it. Your translations are ready for use."
msgstr "Вот и всё. Ваш перевод готов к использованию."

# 0f13dbed4d914e6482b17bb00be6566a
#: ../../topics/i18n/translation.txt:1798
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`django-admin compilemessages <compilemessages>` works see :ref:"
"`gettext_on_windows` for more information."
msgstr ""
"Если вы используете Windows и желаете установить утилиты GNU ``gettext`` для "
"работы :djadmin:`django-admin compilemessages <compilemessages>`, обратитесь "
"к :ref:`gettext_on_windows` для подробностей."

# 8f32ef078397472da545fd60a83e54e3
#: ../../topics/i18n/translation.txt:1802
msgid ".po files: Encoding and BOM usage."
msgstr ".po файлы: Кодировка и использование BOM"

# 1c90ab1e610247c6ac69e813683c2f5c
#: ../../topics/i18n/translation.txt:1804
msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of "
"files by default then you will need to reconfigure it."
msgstr ""
"Django поддерживает ``.po`` файлы только в кодировке UTF-8 и без меток BOM "
"(Byte Order Mark). Если ваш редактор по умолчанию добавляет такие метки в "
"начало файла, вам следует изменить это поведение."

#: ../../topics/i18n/translation.txt:1809
msgid ""
"Troubleshooting: ``ugettext()`` incorrectly detects ``python-format`` in "
"strings with percent signs"
msgstr ""

#: ../../topics/i18n/translation.txt:1811
msgid ""
"In some cases, such as strings with a percent sign followed by a space and "
"a :ref:`string conversion type <old-string-formatting>` (e.g. ``_(\"10% "
"interest\")``), :func:`~django.utils.translation.ugettext` incorrectly flags "
"strings with ``python-format``."
msgstr ""

#: ../../topics/i18n/translation.txt:1816
msgid ""
"If you try to compile message files with incorrectly flagged strings, you'll "
"get an error message like ``number of format specifications in 'msgid' and "
"'msgstr' does not match`` or ``'msgstr' is not a valid Python format string, "
"unlike 'msgid'``."
msgstr ""

#: ../../topics/i18n/translation.txt:1821
msgid ""
"To workaround this, you can escape percent signs by adding a second percent "
"sign::"
msgstr ""

#: ../../topics/i18n/translation.txt:1827
msgid ""
"Or you can use ``no-python-format`` so that all percent signs are treated as "
"literals::"
msgstr ""

# 6213a3fb01824697a58b6a0df68f1c89
#: ../../topics/i18n/translation.txt:1836
msgid "Creating message files from JavaScript source code"
msgstr "Создание файлов сообщений из JavaScript кода"

# 7f3e424be6564cf08e4ac25e267da33d
#: ../../topics/i18n/translation.txt:1838
msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""
"Вы создаёте и обновляете файлы сообщений аналогично обычным файлам, т.е. с "
"помощью команды :djadmin:`django-admin makemessages <makemessages>`. С "
"единственной разницей в том, что надо указать домен ``djangojs``, добавив "
"параметр ``-d djangojs``, вот так::"

# 8293e3900d584668ad1a050fd86d4676
#: ../../topics/i18n/translation.txt:1846
msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, just run :djadmin:`django-admin "
"compilemessages <compilemessages>` the same way as you do with normal Django "
"message files."
msgstr ""
"Этот пример создаёт или обновляет файл сообщений для JavaScript для "
"немецкого языка. После обновления файлов сообщений просто выполните :djadmin:"
"`django-admin compilemessages <compilemessages>`, как вы это делаете для "
"обычных файлов сообщений."

# 8a9380b1e8e04665968596511ad0d7c4
#: ../../topics/i18n/translation.txt:1853
msgid "``gettext`` on Windows"
msgstr "``gettext`` на Windows"

# 711a5a35e49d40c894fbf2671a48e90b
#: ../../topics/i18n/translation.txt:1855
#, fuzzy
msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself just involves "
"editing existing files of this type, but if you want to create your own "
"message files, or want to test or compile a changed message file, download "
"`a precompiled binary installer <http://mlocati.github.io/gettext-iconv-"
"windows/>`_."
msgstr ""
"Эта информация нужна только тем, кому надо создавать/обновлять файлы "
"сообщений или компилировать их (``.po``). Сам процесс перевода заключается в "
"редактировании существующих файлов данного типа. Однако, если вам надо "
"создавать свои собственные файлы сообщений, надо проверить или "
"скомпилировать изменённый файл сообщений, тогда вам потребуются утилиты "
"``gettext``:"

# aacca32d0845423aa6bd2bbf798f44d8
#: ../../topics/i18n/translation.txt:1861
msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"xgettext.exe has generated errors and will be closed by "
"Windows\"."
msgstr ""
"Вы также можете использовать бинарники ``gettext``, взятые где-то, если "
"команда ``xgettext --version`` работает правильно. Не пытайтесь выполнять "
"команды Django, использующие пакет ``gettext``, если команда ``xgettext --"
"version``, введённая в консоли Windows, выбрасывает окно с текстом "
"\"xgettext.exe has generated errors and will be closed by Windows\"."

#: ../../topics/i18n/translation.txt:1870
msgid "Customizing the ``makemessages`` command"
msgstr "Настройка команды ``makemessages``"

#: ../../topics/i18n/translation.txt:1872
msgid ""
"If you want to pass additional parameters to ``xgettext``, you need to "
"create a custom :djadmin:`makemessages` command and override its "
"``xgettext_options`` attribute::"
msgstr ""
"Если вам требуется передать дополнительные параметры в ``xgettext``, вам "
"следует создать свою команду :djadmin:`makemessages` и переопределить её "
"атрибут ``xgettext_options``::"

#: ../../topics/i18n/translation.txt:1881
msgid ""
"If you need more flexibility, you could also add a new argument to your "
"custom :djadmin:`makemessages` command::"
msgstr ""
"Если вам необходим больший контроль, вы также можете добавить новый аргумент "
"в вашу реализацию команды :djadmin:`makemessages`::"

# a97d54e2151f43d59efc182f8782dd8b
#: ../../topics/i18n/translation.txt:1906
msgid "Miscellaneous"
msgstr "Разное"

# 6284a938bd614fec8f617f55b2dd8bbf
#: ../../topics/i18n/translation.txt:1911
msgid "The ``set_language`` redirect view"
msgstr "Перенаправляющее представление ``set_language``"

# 5dfed3bee01e45e5932e22810071f5bc
#: ../../topics/i18n/translation.txt:1917
msgid ""
"As a convenience, Django comes with a view, :func:`django.views.i18n."
"set_language`, that sets a user's language preference and redirects to a "
"given URL or, by default, back to the previous page."
msgstr ""
"Для удобства Django поставляется с представлением :func:`django.views.i18n."
"set_language`, которое устанавливает язык для пользователя и перенаправляет "
"его на указанный URL или, по умолчанию, обратно на ту же страницу."

# cc3e622bf34f4674aca00138a96fa991
#: ../../topics/i18n/translation.txt:1921
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""
"Активируйте это представление, добавив следующую строку в конфигурацию URL::"

# 3cc7c03259db47cd8bd2881f23d1339d
#: ../../topics/i18n/translation.txt:1925
msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""
"(Следует отметить, что данный пример привязывает представление к ``/i18n/"
"setlang/``.)"

# 73f16063521046cf9b7f796b8eb7b387
#: ../../topics/i18n/translation.txt:1929
msgid ""
"Make sure that you don't include the above URL within :func:`~django.conf."
"urls.i18n.i18n_patterns` - it needs to be language-independent itself to "
"work correctly."
msgstr ""
"Удостоверьтесь, что вы не подключили вышеприведённый URL внутрь :func:"
"`~django.conf.urls.i18n.i18n_patterns`, это представление не должно зависеть "
"от текущего языка."

# 1126530809704947968f11110d810ad6
#: ../../topics/i18n/translation.txt:1933
msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. Otherwise, it saves the language "
"choice in a cookie that is by default named ``django_language``. (The name "
"can be changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""
"Представление должно вызываться через метод ``POST``, в запросе должен быть "
"установлен параметр ``language``. При активированной поддержке сессий, "
"представление сохраняет выбор пользователя в его сессии. Иначе выбранный "
"язык сохраняется в cookie с именем по умолчанию ``django_language``. (Имя "
"может быть изменено через параметр конфигурации :setting:"
"`LANGUAGE_COOKIE_NAME`.)"

#: ../../topics/i18n/translation.txt:1939
msgid ""
"After setting the language choice, Django looks for a ``next`` parameter in "
"the ``POST`` or ``GET`` data. If that is found and Django considers it to be "
"a safe URL (i.e. it doesn't point to a different host and uses a safe "
"scheme), a redirect to that URL will be performed. Otherwise, Django may "
"fall back to redirecting the user to the URL from the ``Referer`` header or, "
"if it is not set, to ``/``, depending on the nature of the request:"
msgstr ""

#: ../../topics/i18n/translation.txt:1946
msgid ""
"For AJAX requests, the fallback will be performed only if the ``next`` "
"parameter was set. Otherwise a 204 status code (No Content) will be returned."
msgstr ""

#: ../../topics/i18n/translation.txt:1948
msgid "For non-AJAX requests, the fallback will always be performed."
msgstr ""

#: ../../topics/i18n/translation.txt:1952
msgid ""
"Returning a 204 status code for AJAX requests when no redirect is specified "
"is new."
msgstr ""

# 53b9845820b54616907a5463bd1f08ff
#: ../../topics/i18n/translation.txt:1955
msgid "Here's example HTML template code:"
msgstr "Приведём пример HTML кода шаблона:"

# 17f961bf91574038b82292376fe604fa
#: ../../topics/i18n/translation.txt:1976
msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""
"В этом примере Django ищет URL страницы, на которую будет перенаправлен "
"пользователь, в контекстной переменной ``redirect_to``."

# c358d88140ad4f3f827453f95b0bb967
#: ../../topics/i18n/translation.txt:1982
msgid "Explicitly setting the active language"
msgstr "Явное указание активного языка"

# 198ef719a00346a7ab206c40a553a25d
#: ../../topics/i18n/translation.txt:1986
msgid ""
"You may want to set the active language for the current session explicitly. "
"Perhaps a user's language preference is retrieved from another system, for "
"example. You've already been introduced to :func:`django.utils.translation."
"activate()`. That applies to the current thread only. To persist the "
"language for the entire session, also modify :data:`~django.utils."
"translation.LANGUAGE_SESSION_KEY` in the session::"
msgstr ""
"Вам может потребоваться явно указать активный язык для текущей сессии. "
"Например, возможно, что информация об языке, предпочитаемым пользователем, "
"будет извлекаться из другой системы. Вы уже встречались с функцией :func:"
"`django.utils.translation.activate()`. Она влияет только на текущий поток. "
"Для указания языка для всей сессии надо модифицировать :data:`~django.utils."
"translation.LANGUAGE_SESSION_KEY`::"

# a345b329ccec464c9754e221f53a65a0
#: ../../topics/i18n/translation.txt:1998
msgid ""
"You would typically want to use both: :func:`django.utils.translation."
"activate()` will change the language for this thread, and modifying the "
"session makes this preference persist in future requests."
msgstr ""
"Вам обычно потребуется использовать оба подхода: вызывать :func:`django."
"utils.translation.activate()` для изменения языка внутри потока и изменять "
"сессию для влияния на последующие запросы."

# b67482444dbb41f4ac3a63104e663c3d
#: ../../topics/i18n/translation.txt:2002
msgid ""
"If you are not using sessions, the language will persist in a cookie, whose "
"name is configured in :setting:`LANGUAGE_COOKIE_NAME`. For example::"
msgstr ""
"Если вы не используете сессии, то активный язык будет сохранён в куке, имя "
"которой определяется с помощью :setting:`LANGUAGE_COOKIE_NAME`. Например::"

# f48a057219914bcca91d514d74db64fd
#: ../../topics/i18n/translation.txt:2014
msgid "Using translations outside views and templates"
msgstr "Использование перевода вне представлений и шаблонов"

# 40737d2d0943401c8a240e8efad886b7
#: ../../topics/i18n/translation.txt:2016
msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""
"Несмотря на то, что Django предоставляет богатый набор инструментов "
"интернационализации представлений и шаблонов, она не ограничивает их "
"использование в другом коде. Механизмы перевода Django могут быть "
"использованы для перевода отдельных текстов на любой из языков, "
"поддерживаемых Django (т.е. соответствующий каталог с переводами есть в "
"наличии). Вы можете загрузить каталог переводов, активировать его и "
"переводить текст на нужный язык, но не забудьте вернуться на оригинальный "
"язык, так как активация каталога переводов выполняется на уровне потока и "
"такое изменение будет влиять на код, работающий в том же потоке."

# ce5fe8165b5047819cc8cd201c86dbef
#: ../../topics/i18n/translation.txt:2038
msgid ""
"Calling this function with the value 'de' will give you ``\"Willkommen\"``, "
"regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""
"Вызов этой функции с параметром 'de' вернёт ``\"Willkommen\"``, независимо "
"от значения параметра конфигурации :setting:`LANGUAGE_CODE` и языка, "
"установленного через мидлварь."

# 6c8cb9d6372247dcb9f14cbe6646d34b
#: ../../topics/i18n/translation.txt:2041
msgid ""
"Functions of particular interest are :func:`django.utils.translation."
"get_language()` which returns the language used in the current thread, :func:"
"`django.utils.translation.activate()` which activates a translation catalog "
"for the current thread, and :func:`django.utils.translation."
"check_for_language()` which checks if the given language is supported by "
"Django."
msgstr ""
"Вас могут заинтересовать функции :func:`django.utils.translation."
"get_language()`, которая возвращает язык, используемый в текущем потоке, :"
"func:`django.utils.translation.activate()`, которая активирует каталог "
"переводов для текущего потока, и :func:`django.utils.translation."
"check_for_language()`, которая проверяет, поддерживается ли данный язык "
"Django."

#: ../../topics/i18n/translation.txt:2048
msgid ""
"To help write more concise code, there is also a context manager :func:"
"`django.utils.translation.override()` that stores the current language on "
"enter and restores it on exit. With it, the above example becomes::"
msgstr ""
"Для удобства вы можете также использовать контекстный менеджер :func:`django."
"utils.translation.override()`, который сохраняет текущий язык при входе и "
"восстанавливает его при выходе из блока. Код выше будет выглядеть следующим "
"образом::"

# 6ca32ace1d444e4ca9e92b6a1d3436b8
#: ../../topics/i18n/translation.txt:2059
msgid "Language cookie"
msgstr "Кука для языка"

# c0ac7fc6deaf4e61895c3c76f5579081
#: ../../topics/i18n/translation.txt:2061
msgid "A number of settings can be used to adjust language cookie options:"
msgstr "Ряд настроек может быть использован для управления опциями куки языка:"

# a8c13a9182e24d48be5ee53f5ac96e5a
#: ../../topics/i18n/translation.txt:2063
msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ":setting:`LANGUAGE_COOKIE_NAME`"

# 008f583b6b6f4f42a7c174041b08c5ec
#: ../../topics/i18n/translation.txt:2064
msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ":setting:`LANGUAGE_COOKIE_AGE`"

# cb080fc685bd49fead954eb9295b194e
#: ../../topics/i18n/translation.txt:2065
msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ":setting:`LANGUAGE_COOKIE_DOMAIN`"

# 54fa4aea7be44835b7b5b1591d8eddb5
#: ../../topics/i18n/translation.txt:2066
msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ":setting:`LANGUAGE_COOKIE_PATH`"

# 15f2cee0e24f421c9d8ac4bf52285b38
#: ../../topics/i18n/translation.txt:2069
msgid "Implementation notes"
msgstr "Замечания по реализации"

# 8ac60606609f4323b4689ffe7399f230
#: ../../topics/i18n/translation.txt:2074
msgid "Specialties of Django translation"
msgstr "Особенности перевода Django"

# fe50404e7ccc4c0cb7f90e3fb831160f
#: ../../topics/i18n/translation.txt:2076
msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties "
"in the way Django does translation:"
msgstr ""
"Механизм перевода Django использует стандартный модуль ``gettext``, идущей в "
"поставке Python. Если вы знакомы с ``gettext``, вам может быть интересен "
"подход Django к его использованию:"

# d4894884c01c430e81d905b21fae29d0
#: ../../topics/i18n/translation.txt:2080
msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django`` "
"domain is used for Python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""
"Строковый домен может быть ``django`` или ``djangojs``. Он используется для "
"идентификации ресурсов множества приложений, которые хранятся в общей "
"библиотеке(обычно ``/usr/share/locale/``). Домен ``django`` используется для "
"перевода текстовых ресурсов Python кода и шаблонов, загружается в общие "
"каталоги перевода. Домен ``djangojs`` используется только для каталогов с "
"текстовыми ресурсами для JavaScript, чтобы сделать их мелкими, насколько это "
"возможно."

# ca13025ac64c4464a86bc9963ece8159
#: ../../topics/i18n/translation.txt:2087
msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""
"Django не использует только ``xgettext``. Она использует Python-обёртки для "
"``xgettext`` и ``msgfmt``. Так сделано для удобства."

# 967023bb13744defa4c4eec5528f8fb5
#: ../../topics/i18n/translation.txt:2093
msgid "How Django discovers language preference"
msgstr "Как Django определяет языковую настройку"

# e96ffd0b20b1459c9a3fe9768c2e2376
#: ../../topics/i18n/translation.txt:2095
msgid ""
"Once you've prepared your translations -- or, if you just want to use the "
"translations that come with Django -- you'll just need to activate "
"translation for your app."
msgstr ""
"После подготовки своего перевода, или если вы желаете использовать перевод, "
"поставляемый с Django, надо просто активировать перевод для своего "
"приложения."

# 1041acc8ad31426fbd2e2c6d94ef5332
#: ../../topics/i18n/translation.txt:2099
msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or both."
msgstr ""
"Django обладает очень гибкой моделью принятия решения о том, какой язык "
"следует использовать: на уровне проекта, для отдельного пользователя или в "
"обоих случаях."

# 7e24253f7bf2475f8004a4e83eba2141
#: ../../topics/i18n/translation.txt:2102
msgid ""
"To set an installation-wide language preference, set :setting:"
"`LANGUAGE_CODE`. Django uses this language as the default translation -- the "
"final attempt if no better matching translation is found through one of the "
"methods employed by the locale middleware (see below)."
msgstr ""
"Глобально язык определяется через параметр конфигурации :setting:"
"`LANGUAGE_CODE`. Django использует указанный язык в качестве основного и "
"обращается к нему, если больше никакой не найден мидлваром "
"локализации(смотрите ниже)."

# 9b1fb43646a24e69a4a99e9c9b3375d4
#: ../../topics/i18n/translation.txt:2107
msgid ""
"If all you want is to run Django with your native language all you need to "
"do is set :setting:`LANGUAGE_CODE` and make sure the corresponding :term:"
"`message files <message file>` and their compiled versions (``.mo``) exist."
msgstr ""
"Если вам просто нужно запустить проект на определенном языке, укажите его в :"
"setting:`LANGUAGE_CODE` и убедитесь, что существует необходимый :term:`файл "
"перевода <message file>` и его скомпилированная версия (``.mo``)."

# deb5b28eb1de47168a22d357cfe91589
#: ../../topics/i18n/translation.txt:2111
msgid ""
"If you want to let each individual user specify which language they prefer, "
"then you also need to use the ``LocaleMiddleware``. ``LocaleMiddleware`` "
"enables language selection based on data from the request. It customizes "
"content for each user."
msgstr ""
"Если вам надо позволить отдельным пользователям указывать предпочитаемый "
"язык, используйте ``LocaleMiddleware``. ``LocaleMiddleware`` обеспечивает "
"выбор языка по данным из запроса. Эта мидлварь настраивает контент под "
"каждого пользователя."

# c865f382bb364b218d638d63c7f64578
#: ../../topics/i18n/translation.txt:2116
#, fuzzy
msgid ""
"To use ``LocaleMiddleware``, add ``'django.middleware.locale."
"LocaleMiddleware'`` to your :setting:`MIDDLEWARE` setting. Because "
"middleware order matters, follow these guidelines:"
msgstr ""
"Чтобы использовать ``LocaleMiddleware``, добавьте ``'django.middleware."
"locale.LocaleMiddleware'`` в настройку :setting:`MIDDLEWARE_CLASSES`. Так "
"как порядок middleware важен, используйте следующую инструкцию:"

# b06ee328273e410c8967829955509b8c
#: ../../topics/i18n/translation.txt:2120
msgid "Make sure it's one of the first middlewares installed."
msgstr "Удостоверьтесь, что она указана одной из первых мидлварей."

# 259dadca23ed49868b53097a62ff81f8
#: ../../topics/i18n/translation.txt:2121
msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve "
"the requested URL."
msgstr ""
"Она должна идти после ``SessionMiddleware``, так как ``LocaleMiddleware`` "
"использует сессию. И она должна идти до ``CommonMiddleware``, так как "
"``CommonMiddleware`` нуждается в активном языке для определения запрошенного "
"URL."

# 74301b56fed14a9fb6c890da490dd928
#: ../../topics/i18n/translation.txt:2125
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""
"Если вы используете ``CacheMiddleware``, поместите ``LocaleMiddleware`` "
"после неё."

# 8301e13d89ac4b5388552f30d6a981e1
#: ../../topics/i18n/translation.txt:2127
#, fuzzy
msgid "For example, your :setting:`MIDDLEWARE` might look like this::"
msgstr "Например, ваш :setting:`MIDDLEWARE_CLASSES` может выглядеть так::"

# 5def53bb578a4b4597008c8ffcd1331c
#: ../../topics/i18n/translation.txt:2135
msgid ""
"(For more on middleware, see the :doc:`middleware documentation </topics/"
"http/middleware>`.)"
msgstr ""
"(Для получения подробностей по мидлварям обратитесь к :doc:`соответствующей "
"документации </topics/http/middleware>`.)"

# 12786310650e4a538b54d35a3cbc4fa3
#: ../../topics/i18n/translation.txt:2138
msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""
"``LocaleMiddleware`` пытается определить язык пользователя, используя "
"следующий алгоритм:"

# bb2b8c4c0c6648f7b35444c274ec41a6
#: ../../topics/i18n/translation.txt:2141
msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""
"Сначала, проверяется наличие префикса в запрошенном URL. Эта проверка "
"выполняется только если вы используете функцию ``i18n_patterns`` в корневом "
"URLconf. Обратитесь к :ref:`url-internationalization` для получения "
"подробностей по языковым префиксам и интернационализации шаблонов URL."

# 4b366a562e494f61bf579df7868eb81d
#: ../../topics/i18n/translation.txt:2146
msgid ""
"Failing that, it looks for the :data:`~django.utils.translation."
"LANGUAGE_SESSION_KEY` key in the current user's session."
msgstr ""
"Если с префиксом не получилось, то проверяется ключ :data:`~django.utils."
"translation.LANGUAGE_SESSION_KEY` сессии текущего пользователя."

# 7131d6a0435c4a91859af7800e1b4f50
#: ../../topics/i18n/translation.txt:2149
msgid "Failing that, it looks for a cookie."
msgstr "Если и с сессией не сложилось, то принимается за cookie."

# 1b03cc5829474b69934c7c295b892329
#: ../../topics/i18n/translation.txt:2151
msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""
"Имя cookie определяется параметром конфигурации :setting:"
"`LANGUAGE_COOKIE_NAME`. (Название про умолчанию ``django_language``.)"

# f91192d2ce3e4a29bdb52c1e12959619
#: ../../topics/i18n/translation.txt:2154
msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""
"Если опять не повезло, то заглядывает в HTTP заголовок ``Accept-Language``. "
"Этот заголовок отправляется браузером, чтобы указать серверу, какой язык вы "
"предпочитаете, в порядке приоритета. Django проверяет наличие поддержки "
"каждого языка из заголовка."

# d9b367750c564d7cb46f959d9f258213
#: ../../topics/i18n/translation.txt:2159
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""
"Если совсем всё плохо, тогда используется значение параметра конфигурации :"
"setting:`LANGUAGE_CODE`."

# 2433873ee4a8469f84afd2b0180b6d7c
#: ../../topics/i18n/translation.txt:2163
msgid "Notes:"
msgstr "Замечания:"

# 895ab8dde3ed4fd38b39e2530795b2ed
#: ../../topics/i18n/translation.txt:2165
msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""
"Везде подразумевается, что значение языка указано в стандартном :term:"
"`формате <language code>`, в виде строки. Например, для бразильского "
"варианта португальского языка это будет ``pt-br``."

# 106705b2c48f4c1a8cb3487927d40a59
#: ../../topics/i18n/translation.txt:2169
msgid ""
"If a base language is available but the sublanguage specified is not, Django "
"uses the base language. For example, if a user specifies ``de-at`` (Austrian "
"German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""
"Если базовый язык доступен, а вариант нет, то Django будет использовать "
"базовый язык. Например, если пользователь указал ``de-at`` (австрийский "
"вариант немецкого), но у Django есть только ``de``, то именно он и будет "
"использоваться."

# 79871271a91846309611b1bea088cf3a
#: ../../topics/i18n/translation.txt:2174
msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""
"Выбор может производиться только из списка, определенного параметром "
"конфигурации :setting:`LANGUAGES`. Если вам надо ограничить диапазон "
"имеющихся языков (потому что ваше приложение не имеет столько переводов), "
"укажите в :setting:`LANGUAGES` список поддерживаемых языков. Например::"

# 494c874abfe141fe85ced7eed096c22d
#: ../../topics/i18n/translation.txt:2184
msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like de-ch or en-us)."
msgstr ""
"Данный пример ограничивает число доступных для автоматического выбора языков "
"немецким и английским языками (и любыми диалектами, например, de-ch или en-"
"us)."

# 110c3c89f10b4cd1960a65208df6e991
#: ../../topics/i18n/translation.txt:2188
msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, you can mark the language names as translation strings -- "
"but use :func:`~django.utils.translation.ugettext_lazy` instead of :func:"
"`~django.utils.translation.ugettext` to avoid a circular import."
msgstr ""
"Если вы определяете параметр конфигурации :setting:`LANGUAGES`, как было "
"показано выше, вы можете помечать имена языков как переводимые. Но следует "
"использовать :func:`~django.utils.translation.ugettext_lazy` вместо :func:"
"`~django.utils.translation.ugettext`, чтобы исключить циклический импорт."

# bf1e1b355e8346f5ae8dfd611fc405b2
#: ../../topics/i18n/translation.txt:2193
msgid "Here's a sample settings file::"
msgstr "Приведёт пример файла настроек::"

# 8e21c81c1c9c40f8b977007aafe8056f
#: ../../topics/i18n/translation.txt:2202
msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each :class:`~django."
"http.HttpRequest`. Feel free to read this value in your view code. Here's a "
"simple example::"
msgstr ""
"После того, как ``LocaleMiddleware`` определяет предпочитаемый язык, она "
"делает его доступным через ``request.LANGUAGE_CODE`` для каждого запроса :"
"class:`~django.http.HttpRequest`. Вы можете спокойно его использовать в коде "
"своих представлений. Вот простой пример::"

# 29fdeb849c584805bdc293aa854b0d2c
#: ../../topics/i18n/translation.txt:2215
msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""
"Следует отметить, что для статичного перевода (без мидлвари) язык надо брать "
"из ``settings.LANGUAGE_CODE``, а для динамичного перевода (с мидлварью) — из "
"``request.LANGUAGE_CODE``."

# cf5bbf16ab334571a64889a5d4800ca7
#: ../../topics/i18n/translation.txt:2227
msgid "How Django discovers translations"
msgstr "Как Django находит переводы"

# ecc3ddd50da846ee9842f99dad5579d8
#: ../../topics/i18n/translation.txt:2229
msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""
"Во время своей работы Django создаёт в памяти унифицированный каталог с "
"переводами. Для этого он использует следующий алгоритм, учитывая порядок "
"нахождения путей для загрузки :term:`файлов сообщений <message file>` (``."
"mo``) и приоритет множества перевода для одного слова:"

# 052d2cb3dd94441f812fd165f1fcd16c
#: ../../topics/i18n/translation.txt:2235
msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""
"Каталоги, указанные в :setting:`LOCALE_PATHS`, имеют повышенный приоритет, "
"список представлен по убыванию приоритета."

# d4705d23651e48b09cb6c3c4b0ef680a
#: ../../topics/i18n/translation.txt:2238
msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""
"Затем происходит поиск каталога ``locale`` в каждом установленном "
"приложении, указанном в :setting:`INSTALLED_APPS`.  Тут тоже приоритет идёт "
"по убыванию."

# 25003e43ebc4464bbe6550a14f06ed4f
#: ../../topics/i18n/translation.txt:2241
msgid ""
"Finally, the Django-provided base translation in ``django/conf/locale`` is "
"used as a fallback."
msgstr ""
"Наконец, используется базовый перевод Django из ``django/conf/locale``."

# adc1e5650ddf4c3a909f0ef935fe838f
#: ../../topics/i18n/translation.txt:2246
msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See the :ref:"
"`javascript_catalog view documentation <javascript_catalog-view>` for more "
"details."
msgstr ""
"Поиск переводов для  JavaScript строк происходит аналогично, но с небольшими "
"отличиями. Обратитесь к :ref:`документации на представление "
"javascript_catalog <javascript_catalog-view>` для подробностей."

# b2228ea6382044acba0665e1b633f56f
#: ../../topics/i18n/translation.txt:2251
msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc."
msgstr ""
"Имя каталога, содержащего перевод, должно быть названо в соответствии "
"соглашению :term:`по наименованию  локалей`. Т.е. ``de``, ``pt_BR``, "
"``es_AR`` и так далее."

# 4dcb5205d9644e91bbb65a7f0d6702f1
#: ../../topics/i18n/translation.txt:2255
msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project. Or, you can just "
"build a big project out of several apps and put all translations into one "
"big common message file specific to the project you are composing. The "
"choice is yours."
msgstr ""
"Таким образом, вы можете создавать приложения, которые содержат свои "
"собственные переводы и вы можете изменять базовые переводы в вашем проекте. "
"Или вы можете создать большой проект из нескольких приложений, объединив всё "
"их переводы в единый ресурс. Выбор за вами."

# 23a068ed76974a1b9d4b372400a3f943
#: ../../topics/i18n/translation.txt:2260
msgid "All message file repositories are structured the same way. They are:"
msgstr "Все репозитории с файлами сообщений имеют одинаковую структуру:"

# c076e8fd503440bd9621a49d0099bc90
#: ../../topics/i18n/translation.txt:2262
msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""
"Во всех указанных путях в параметре конфигурации :setting:`LOCALE_PATHS` "
"происходит поиск ``<language>/LC_MESSAGES/django.(po|mo)``"

# 301c25fb9441442f90cdb32885918622
#: ../../topics/i18n/translation.txt:2264
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"

# 2ca558c4dd89446e93c5bb6d7d2d4178
#: ../../topics/i18n/translation.txt:2265
msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"

# b4dd5d7aa6714989a485db70682cffa1
#: ../../topics/i18n/translation.txt:2267
msgid ""
"To create message files, you use the :djadmin:`django-admin makemessages "
"<makemessages>` tool. And you use :djadmin:`django-admin compilemessages "
"<compilemessages>` to produce the binary ``.mo`` files that are used by "
"``gettext``."
msgstr ""
"Для создания файлов сообщений надо использовать :djadmin:`django-admin "
"makemessages <makemessages>`. Для компиляции файлов перевода надо "
"использовать :djadmin:`django-admin compilemessages <compilemessages>`, это "
"приведёт к созданию бинарных ``.mo`` файлов, которые нужны для работы "
"``gettext``."

# 0a13ef21dbcb4d4d8d877496ceff2005
#: ../../topics/i18n/translation.txt:2271
msgid ""
"You can also run :djadmin:`django-admin compilemessages --settings=path.to."
"settings <compilemessages>` to make the compiler process all the directories "
"in your :setting:`LOCALE_PATHS` setting."
msgstr ""
"Перечислив в параметре конфигурации :setting:`LOCALE_PATHS` список "
"обрабатываемых каталогов, его можно передать компилятору: :djadmin:`django-"
"admin compilemessages --settings=path.to.settings <compilemessages>`."

#: ../../topics/i18n/translation.txt:2276
msgid "Using a non-English base language"
msgstr ""

#: ../../topics/i18n/translation.txt:2278
msgid ""
"Django makes the general assumption that the original strings in a "
"translatable project are written in English. You can choose another "
"language, but you must be aware of certain limitations:"
msgstr ""

#: ../../topics/i18n/translation.txt:2282
msgid ""
"``gettext`` only provides two plural forms for the original messages, so you "
"will also need to provide a translation for the base language to include all "
"plural forms if the plural rules for the base language are different from "
"English."
msgstr ""

#: ../../topics/i18n/translation.txt:2287
msgid ""
"When an English variant is activated and English strings are missing, the "
"fallback language will not be the :setting:`LANGUAGE_CODE` of the project, "
"but the original strings. For example, an English user visiting a site with "
"Spanish as the default language and original strings written in Russian will "
"fallback to Russian, not to Spanish."
msgstr ""

# 83a23c18ea844499b98cbc5adb601a17
#, fuzzy
#~ msgid "The ``'name_translated'`` attribute was added."
#~ msgstr "Добавлена опция ``name_translated``."

# 83a23c18ea844499b98cbc5adb601a17
#~ msgid "The ``asvar`` syntax was added."
#~ msgstr "Добавлен синтаксис ``asvar``."

# 83a23c18ea844499b98cbc5adb601a17
#~ msgid "The ``name_translated`` attribute was added."
#~ msgstr "Добавлена опция ``name_translated``."

# 83a23c18ea844499b98cbc5adb601a17
#~ msgid "The ``language_name_translated`` filter was added."
#~ msgstr "Добавлен фильтр ``language_name_translated``."

#~ msgid ""
#~ "Before Django 1.9, the catalogs completely overwrote each other and you "
#~ "could only use one at a time."
#~ msgstr ""
#~ "До Django 1.9 каталоги полностью перезаписывали друг друга и вы могли "
#~ "использовать только один."

#~ msgid ""
#~ "``compilemessages`` now matches the operation of :djadmin:`makemessages`, "
#~ "scanning the project tree for ``.po`` files to compile."
#~ msgstr ""
#~ "``compilemessages`` теперь работает аналогично :djadmin:`makemessages`, "
#~ "выполняя поиск по всему проект и компилируя ``.po`` файлы."

#~ msgid ""
#~ "The ``i18n`` context processor is not enabled by default for new projects."
#~ msgstr ""
#~ "Для новых проектов контекстный процессор ``i18n`` не активируется по "
#~ "умолчанию."

#~ msgid ""
#~ "The ``prefix`` argument to ``i18n_patterns()`` has been deprecated and "
#~ "will not be supported in Django 1.10. Simply pass a list of :func:`django."
#~ "conf.urls.url` instances instead."
#~ msgstr ""
#~ "Аргумент ``prefix`` функции ``i18n_patterns()`` устарел и не будет "
#~ "поддерживаться, начиная с Django 1.10. Вместо него следует передавать "
#~ "список экземпляров :func:`django.conf.urls.url`."

# 882fb5884ca840e7abcebb450af5d5ce
#~ msgid ""
#~ "Download the following zip files from the GNOME servers https://download."
#~ "gnome.org/binaries/win32/dependencies/"
#~ msgstr ""
#~ "Скачайте следующие архивы с серверов GNOME https://download.gnome.org/"
#~ "binaries/win32/dependencies/"

# 2467a50f067446b99627cd9b6e8d5e10
#~ msgid "``gettext-runtime-X.zip``"
#~ msgstr "``gettext-runtime-X.zip``"

# 29d8ea63bea84650b91ced3be3487094
#~ msgid "``gettext-tools-X.zip``"
#~ msgstr "``gettext-tools-X.zip``"

# 41dd22aa291a4f168e051f1eb552e1c8
#~ msgid "``X`` is the version number, we are requiring ``0.15`` or higher."
#~ msgstr "``X`` является версией, мы требуем версию ``0.15`` или выше."

# 2bfd8c839b2440caabc88c5fd90cff8f
#~ msgid ""
#~ "Extract the contents of the ``bin\\`` directories in both files to the "
#~ "same folder on your system (i.e. ``C:\\Program Files\\gettext-utils``)"
#~ msgstr ""
#~ "Извлеките содержимое каталогов ``bin\\`` обоих архивов в такой же каталог "
#~ "на вашей системе (т.е. ``C:\\Program Files\\gettext-utils``)."

# 3143ff37504b45898e9cc15fa58984ac
#~ msgid "Update the system PATH:"
#~ msgstr "Обновите системный PATH:"

# f0f1640a4e5d4ff4a44d6cef9fa8f8aa
#~ msgid "``Control Panel > System > Advanced > Environment Variables``."
#~ msgstr "``Control Panel > System > Advanced > Environment Variables``."

# 80ea372f27d04860851a8a555afa0ae2
#~ msgid "In the ``System variables`` list, click ``Path``, click ``Edit``."
#~ msgstr "В списке ``System variables``,  выберите ``Path``, затем ``Edit``."

# dec9a66f25864f8ba493bbf3bb2d2996
#~ msgid ""
#~ "Add ``;C:\\Program Files\\gettext-utils\\bin`` at the end of the "
#~ "``Variable value`` field."
#~ msgstr ""
#~ "Добавьте ``;C:\\Program Files\\gettext-utils\\bin`` в конец поля "
#~ "``Variable value``."

# 203c217e059f447f9cb0e4b8e3bc2e5b
#~ msgid ""
#~ "After setting the language choice, Django redirects the user, following "
#~ "this algorithm:"
#~ msgstr ""
#~ "После сохранения выбора текущего языка Django перенаправляет "
#~ "пользователя, руководствуясь следующим алгоритмом:"

# 5c69645b04fb42abae9849d3806272b1
#~ msgid "Django looks for a ``next`` parameter in the ``POST`` data."
#~ msgstr "Django обращается к параметру ``next`` в словаре данных ``POST``."

# f37c36261190433bb10efd6597208a94
#~ msgid ""
#~ "If that doesn't exist, or is empty, Django tries the URL in the "
#~ "``Referrer`` header."
#~ msgstr ""
#~ "Если такого ключа там нет или он пуст, Django ищет URL в заголовке "
#~ "``Referrer``."

# 51ea0d55279a47ed8a2a960e7879a1da
#~ msgid ""
#~ "If that's empty -- say, if a user's browser suppresses that header -- "
#~ "then the user will be redirected to ``/`` (the site root) as a fallback."
#~ msgstr ""
#~ "Если и там пусто, браузер пользователя не прислал такой заголовок, тогда "
#~ "перенаправление будет выполнено на корень сайта (``/``)."

# 14f9500454ac461d854b679846112f8b
#~ msgid "There is also an ``ngettext`` interface::"
#~ msgstr "Также можно использовать интерфейс ``ngettext``::"

# f7d4cb77bb3548de9415699e2044cf05
#~ msgid "and even a string interpolation function::"
#~ msgstr "и даже функцию интерполяции строк::"

# bf961ac394ba451ca13b193af167f30d
#~ msgid ""
#~ "In previous versions, the key was named ``django_language``, and the "
#~ "``LANGUAGE_SESSION_KEY`` constant did not exist."
#~ msgstr ""
#~ "В предыдущих версиях, ключ имел имя ``django_language``, а константа "
#~ "``LANGUAGE_SESSION_KEY`` не существовала."

# 4f19c2fc84534ed4964e5334eee87afd
#~ msgid ""
#~ "Each ``RequestContext`` has access to three translation-specific "
#~ "variables:"
#~ msgstr ""
#~ "Каждый объект ``RequestContext`` имеет доступ к трём переменным, "
#~ "относящимся к механизму перевода:"

# 236fd52cacc1400583e36556b61ba534
#~ msgid ""
#~ "If you don't use the ``RequestContext`` extension, you can get those "
#~ "values with three tags::"
#~ msgstr ""
#~ "Если вы не используете расширение ``RequestContext``, вы можете получить "
#~ "эти значения с помощью тегов::"

# 493796f49ff14b449a851fdfffa6633d
#~ msgid ""
#~ "Make sure that the following item is in your :setting:"
#~ "`TEMPLATE_CONTEXT_PROCESSORS` list in your settings file::"
#~ msgstr ""
#~ "Удостоверьтесь, что нижеперечисленное указано в параметре :setting:"
#~ "`TEMPLATE_CONTEXT_PROCESSORS` вашей конфигурации::"

# 78742623be024d8d940d5731e3da9a77
#~ msgid "Lets see a slightly more complex usage example::"
#~ msgstr "Давайте рассмотрим более сложный пример::"

# 7a41f65aaa8b4745aac67dc9173b58f3
#~ msgid ""
#~ "Here we reuse localizable, hopefully already translated literals "
#~ "(contained in the ``verbose_name`` and ``verbose_name_plural`` model "
#~ "``Meta`` options) for other parts of the sentence so all of it is "
#~ "consistently based on the cardinality of the elements at play."
#~ msgstr ""
#~ "Здесь мы используем локализованные и, надеюсь, уже переведённые строки "
#~ "(описанные в полях ``verbose_name`` и ``verbose_name_plural`` модели "
#~ "``Meta``) для других частей предложения."

# 0766f336c87345479630baadcafb0df7
#~ msgid ""
#~ "Django does not support localizing your application into a locale for "
#~ "which Django itself has not been translated. In this case, it will ignore "
#~ "your translation files. If you were to try this and Django supported it, "
#~ "you would inevitably see a mixture of translated strings (from your "
#~ "application) and English strings (from Django itself). If you want to "
#~ "support a locale for your application that is not already part of Django, "
#~ "you'll need to make at least a minimal translation of the Django core."
#~ msgstr ""
#~ "Django не поддерживает локализацию приложений в локали, для которой "
#~ "Django не был переведен. В этом случае она будет игнорировать ваши файлы "
#~ "переводов. Если бы этого не было, то вы неизбежно увидели бы смесь "
#~ "переведенных строк (из приложения) и английский строк (из Django). Если "
#~ "вы желаете поддерживать локаль для вашего приложения, не являющегося "
#~ "частью Django, вам нужно сделать хотя бы минимальный перевод основных "
#~ "компонентов Django."

# 907c283aca9f4859bd7462b94941c57a
#~ msgid ""
#~ "A good starting point is to copy the Django English ``.po`` file and to "
#~ "translate at least some :term:`translation strings <translation string>`."
#~ msgstr ""
#~ "Для этого следует скопировать английский ``.po`` файл Django и перевести "
#~ "хотя бы несколько :term:`строк <translation string>`."

# 2071f82340d84ff1b32da78c6d428655
#~ msgid ""
#~ "The solution is to use a \"dummy\" ``ugettext()`` function. Here's a "
#~ "sample settings file::"
#~ msgstr ""
#~ "Правильным решением будет использование «тупой» версии функции "
#~ "``ugettext()``. Вот пример конфигурационного файла::"

# 09c753e363e64a058e57d8fc9b107fee
#~ msgid ""
#~ "With this arrangement, :djadmin:`django-admin.py makemessages "
#~ "<makemessages>` will still find and mark these strings for translation, "
#~ "but the translation won't happen at runtime -- so you'll have to remember "
#~ "to wrap the languages in the *real* ``ugettext()`` in any code that uses :"
#~ "setting:`LANGUAGES` at runtime."
#~ msgstr ""
#~ "Такой подход позволит :djadmin:`django-admin.py makemessages "
#~ "<makemessages>` находить и отмечать эти строки для перевода, но во время "
#~ "исполнения перевод не будет происходить. Вам придётся помнить, что надо "
#~ "обернуть языки вызовом *настоящей* функции ``ugettext()`` в любом месте "
#~ "кода, который использует :setting:`LANGUAGES`."

# 963abbb446f04ee3a9d4762b1e2f6aa4
#~ msgid ""
#~ "The ``LocaleMiddleware`` can only select languages for which there is a "
#~ "Django-provided base translation. If you want to provide translations for "
#~ "your application that aren't already in the set of translations in "
#~ "Django's source tree, you'll want to provide at least a basic one as "
#~ "described in the :ref:`Locale restrictions<locale-restrictions>` note."
#~ msgstr ""
#~ "Мидлварь ``LocaleMiddleware`` может выбирать только те языки, для которых "
#~ "существует перевод самой Django. Если вам надо сделать перевод вашего "
#~ "приложения на язык, который ещё не поддерживается Django, потребуется "
#~ "предоставить такую поддержку, как описано в :ref:`ограничениях "
#~ "локализации<locale-restrictions>`."

# 5cf5e4bfb92f42e1b49ff2ba2c50443e
#~ msgid ""
#~ "Finally, you should give some thought to the structure of your "
#~ "translation files. If your applications need to be delivered to other "
#~ "users and will be used in other projects, you might want to use app-"
#~ "specific translations. But using app-specific translations and project-"
#~ "specific translations could produce weird problems with :djadmin:"
#~ "`makemessages`: it will traverse all directories below the current path "
#~ "and so might put message IDs into a unified, common message file for the "
#~ "current project that are already in application message files."
#~ msgstr ""
#~ "Наконец, рассмотрим структуру файлов с переводами. Если ваше приложение "
#~ "будет доступно другим пользователям и будет применяться в других "
#~ "проектах, то следует использовать перевод на уровне приложения. Но "
#~ "сочетание переводов приложения и проекта может приводить к странным "
#~ "проблемам с :djadmin:`makemessages`: утилита побежится по всем каталогам "
#~ "и может добавить строки приложения в файл сообщений проекта."

# 8cbc4d658e6e4d32a2c51e6a3b753952
#~ msgid ""
#~ "The easiest way out is to store applications that are not part of the "
#~ "project (and so carry their own translations) outside the project tree. "
#~ "That way, :djadmin:`django-admin.py makemessages <makemessages>`, when "
#~ "ran on a project level will only extract strings that are connected to "
#~ "your explicit project and not strings that are distributed independently."
#~ msgstr ""
#~ "Простейшим решением проблемы будет размещение приложений, которые имеют "
#~ "собственные каталоги сообщений, вне проекта. Тогда запуск :djadmin:"
#~ "`django-admin.py makemessages <makemessages>` на уровне проекта будет "
#~ "находить только строки проекта."

# f71b89faa811406c9d68bd09b55f266d
#~ msgid ""
#~ "Translation hooks are also available within any template block tag that "
#~ "accepts constant strings. In those cases, just use ``_()`` syntax to "
#~ "specify a translation string::"
#~ msgstr ""
#~ "Сокращение для функции перевода также доступно внутри любого шаблонного "
#~ "тега, который работает с неизменяемыми строками. В этих случаях просто "
#~ "используйте синтаксис ``_()`` для указания переводимой строки::"

# 9f16979df24948df9d70c6bcfa5febdd
#~ msgid ""
#~ "If all you want to do is run Django with your native language, and a "
#~ "language file is available for it, all you need to do is set :setting:"
#~ "`LANGUAGE_CODE`."
#~ msgstr ""
#~ "Если вам надо лишь запустить Django с поддержкой вашего языка и "
#~ "соответствующий язык доступен, просто настройте параметр конфигурации :"
#~ "setting:`LANGUAGE_CODE`."
