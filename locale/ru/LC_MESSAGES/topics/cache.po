# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013, 2014, 2015, 2016.
# paranoid <brain2dump@gmail.com>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-03 16:48+0300\n"
"PO-Revision-Date: 2018-05-25 19:53+0300\n"
"Last-Translator: paranoid <brain2dump@gmail.com>\n"
"Language-Team: русский <>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.7\n"

# d85d0bbc398948fb9183549b78f0fccf
#: ../../topics/cache.txt:3
msgid "Django's cache framework"
msgstr "Система кеширования Django"

# d40faf515ad24fcfa8cfd704b92ef773
#: ../../topics/cache.txt:5
msgid ""
"A fundamental trade-off in dynamic websites is, well, they're dynamic. Each "
"time a user requests a page, the Web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive, "
"from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""
"Главная хитрость современных веб сайтов в том, что они динамичные. Каждый "
"раз, когда пользователь запрашивает страницу, веб сервер производит "
"множество действий, от запросов к базе данных до обработки шаблонов, чтобы "
"создать страницу, которую увидит посетитель вашего сайта. Это требует больше "
"затрат, с точки зрения использования ресурсов, чем статичная выдача файла с "
"файловой системы."

# fb3a876b87624a4198fbad6450a44741
#: ../../topics/cache.txt:12
msgid ""
"For most Web applications, this overhead isn't a big deal. Most Web "
"applications aren't ``washingtonpost.com`` or ``slashdot.org``; they're "
"simply small- to medium-sized sites with so-so traffic. But for medium- to "
"high-traffic sites, it's essential to cut as much overhead as possible."
msgstr ""
"Для большинства веб приложений такие лишние вычисления не особо заметны. Эти "
"приложения не являются сайтами ``washingtonpost.com`` или ``slashdot.org``. "
"Это сайты небольшого или среднего размера с небольшим трафиком. Но для более "
"крупных сайтов становится очень важна экономия ресурсов."

# 222573fa56c6474ebfcc256f3c4a4c4a
#: ../../topics/cache.txt:17
msgid "That's where caching comes in."
msgstr "С этого момента в дело вступает кеширование."

# 055f13dcaa3c4de19584122b81bf457d
#: ../../topics/cache.txt:19
msgid ""
"To cache something is to save the result of an expensive calculation so that "
"you don't have to perform the calculation next time. Here's some pseudocode "
"explaining how this would work for a dynamically generated Web page::"
msgstr ""
"Кеширование означает сохранение результатов дорогостоящего вычисления, чтобы "
"избежать его повторного вычисления в следующий раз. Ниже представлен "
"псевдокод объясняющий как работает кеширование для динамически созданной веб "
"страницы::"

# 86ed56ca7b334fec8ac2dcce7f80705c
#: ../../topics/cache.txt:31
msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce, "
"or you can cache your entire site."
msgstr ""
"Django поставляется с надёжной системой кеширования, которая позволяет вам "
"сохранять динамические страницы так, что не потребуется их создавать для "
"каждого запроса. Для удобства, Django даёт возможность тонкого управления "
"уровнем кеширования: вы можете кешировать результат работы представления, вы "
"можете кешировать только те куски, которые трудно вычислять или вы можете "
"кешировать весь ваш сайт."

# b3fa6a2b4a4746eea325f896042cec78
#: ../../topics/cache.txt:37
msgid ""
"Django also works well with \"downstream\" caches, such as `Squid <http://"
"www.squid-cache.org>`_ and browser-based caches. These are the types of "
"caches that you don't directly control but to which you can provide hints "
"(via HTTP headers) about which parts of your site should be cached, and how."
msgstr ""
"Django также может работать с «даунстрим» кешами, такими как `Squid <http://"
"www.squid-cache.org>`_ и кешами браузеров. Это такие типы кешей, которые вы "
"не можете контролировать напрямую, но можете определять их поведение "
"подсказками (через HTTP заголовки) о том, какую часть вашего сайта следует "
"кешировать и как."

# 9323afdaea09453eab7ae72f96910534
#: ../../topics/cache.txt:43
msgid ""
"The :ref:`Cache Framework design philosophy <cache-design-philosophy>` "
"explains a few of the design decisions of the framework."
msgstr ""
":ref:`Философия дизайна кеширующих фреймворков <cache-design-philosophy>` "
"объясняет некоторые дизайн решения фреймворка."

# 127a66b2ab5a484ab3ece23ce4f3ca5d
#: ../../topics/cache.txt:49
msgid "Setting up the cache"
msgstr "Настройка кеша"

# 980679b95fca4a99b163b395a2e7a997
#: ../../topics/cache.txt:51
msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects "
"your cache's performance; yes, some cache types are faster than others."
msgstr ""
"Система кеширования требует небольшой настройки. А именно, надо указать где "
"должны располагаться закешированные данные -- в базе данных, на файловой "
"системе или прямо в памяти. Это важное решение, которое повлияет на "
"производительность вашего кеша. Да, типы кешей различаются по скорости "
"работы."

# 5db7b1742ff04a208df9910d0df1a6aa
#: ../../topics/cache.txt:56
msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings "
"file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""
"Настройки кеша определяются параметром конфигурации :setting:`CACHES`. Ниже "
"приведено объяснение всех возможных значений этого параметра."

# 7fcb7b112c6d4e018f52fa73ed5e4c6d
#: ../../topics/cache.txt:63
msgid "Memcached"
msgstr "Memcached"

# f76ec94c2f8747ca8afd60bb3207b139
#: ../../topics/cache.txt:65
msgid ""
"The fastest, most efficient type of cache supported natively by Django, "
"Memcached__ is an entirely memory-based cache server, originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive. It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""
"Самый быстрый и эффективный тип кеша, доступный Django, `Memcached <http://"
"memcached.org/>`_ является кешем, который полностью располагается в "
"оперативной памяти, он был разработан для LiveJournal.com и позднее "
"переведён в опенсорс компанией Danga Interactive. Он используется такими "
"сайтами как Facebook и Wikipedia для снижения нагрузки на базу данных и "
"значительного увеличения производительности сайта."

# ec1d2a9aa8524a7586857316ee30b52e
#: ../../topics/cache.txt:73
msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it "
"does is provide a fast interface for adding, retrieving and deleting data in "
"the cache. All data is stored directly in memory, so there's no overhead of "
"database or filesystem usage."
msgstr ""
"Memcached работает как демон и захватывает определённый объём оперативной "
"памяти. Его задачей является представление быстрого интерфейса для "
"добавления, получения и удаления определённых данных в кеше. Все данные "
"хранятся прямо в оперативной памяти, таким образом нет никакой "
"дополнительной нагрузки на базу данных или файловую систему."

# adc51684bb6841b38d143e8215362dde
#: ../../topics/cache.txt:78
msgid ""
"After installing Memcached itself, you'll need to install a Memcached "
"binding. There are several Python Memcached bindings available; the two most "
"common are `python-memcached`_ and `pylibmc`_."
msgstr ""
"После установкам самого Memcached, следует установить его пакет для Python. "
"Существует несколько таких пакетов; два наиболее используемых — `python-"
"memcached`_ и `pylibmc`_."

# 46690fd2af6f4614a28c021c92cd9708
#: ../../topics/cache.txt:85
msgid "To use Memcached with Django:"
msgstr "Для использования Memcached с Django:"

# fc9007e9bef64e80a30bae46012770e3
#: ../../topics/cache.txt:87
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"memcached.MemcachedCache`` or ``django.core.cache.backends.memcached."
"PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""
"Установите :setting:`BACKEND <CACHES-BACKEND>` в ``django.core.cache."
"backends.memcached.MemcachedCache`` или ``django.core.cache.backends."
"memcached.PyLibMCCache`` (зависит от выбранного пакета)."

# 2610a28e2c2b483bbce4ee39eb776743
#: ../../topics/cache.txt:92
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on "
"which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""
"Определите для :setting:`LOCATION <CACHES-LOCATION>` значение ``ip:port`` "
"(где ``ip`` — это IP адрес, на котором работает демон Memcached, ``port`` — "
"его порт) или ``unix:path`` (где ``path`` является путём к файлу-сокету "
"Memcached)."

# a02f2d21f0f1457297087fb7fa6a3faf
#: ../../topics/cache.txt:97
msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``python-memcached`` binding::"
msgstr ""
"В этом примере Memcached запущен на localhost (127.0.0.1) порт 11211, "
"используя ``python-memcached``::"

# fd27466417074291b3b90c7880cc42c3
#: ../../topics/cache.txt:107
msgid ""
"In this example, Memcached is available through a local Unix socket file :"
"file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""
"В этом примере Memcached доступен через локальный файл-сокет :file:`/tmp/"
"memcached.sock`, используя ``python-memcached``::"

#: ../../topics/cache.txt:117
msgid ""
"When using the ``pylibmc`` binding, do not include the ``unix:/`` prefix::"
msgstr "При использовании ``pylibmc``, не включайте префикс ``unix:/``::"

# 6832b93062504db6a4c040060a6d327c
#: ../../topics/cache.txt:126
msgid ""
"One excellent feature of Memcached is its ability to share a cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in :setting:"
"`LOCATION <CACHES-LOCATION>`, either as a semicolon or comma delimited "
"string, or as a list."
msgstr ""
"Одной из замечательных особенностей Memcached является возможность "
"распределять кеш по нескольким серверам. Это означает, что вы можете "
"запустить демоны Memcached на нескольких машинах и программа будет "
"рассматривать эту группу машин как *единый* кеш, без необходимости "
"копирования всех значений кеша на каждую машину. Для того, чтобы "
"воспользоваться этой особенностью, укажите адреса всех машин в :setting:"
"`LOCATION <CACHES-LOCATION>`, в виде списка или строки, разделённой запятыми."

# 28b40cf349e64433aacfdfbd1d25c740
#: ../../topics/cache.txt:134
msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""
"В данном примере, кеш  распределён по экземплярам Memcached, работающим на "
"IP адресах 172.19.26.240 и 172.19.26.242, на порту 11211 оба::"

# b02876576e12496bb412054a79fc16bd
#: ../../topics/cache.txt:147
msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""
"В следующем примере, кеш  распределён по экземплярам Memcached, работающим "
"на IP адресах 172.19.26.240 (порт 11211), 172.19.26.242 (порт 11212) и на "
"172.19.26.244 (порт 11213)::"

# 516a96ca514942b4b69efa4210f2527e
#: ../../topics/cache.txt:162
msgid ""
"A final point about Memcached is that memory-based caching has a "
"disadvantage: because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""
"В конце рассказа о Memcached следует сказать, что этот тип кеша имеет один "
"недостаток: кеш располагается в оперативной памяти и уничтожается при сбое "
"сервера. Очевидно, что оперативная память не предназначена для постоянного "
"хранения информации, поэтому не следует на неё рассчитывать в этом смысле. "
"Несомненно, *ни один* из модулей кеширования не должен использоваться как "
"постоянное хранилище — они предназначены для кеширования, не для хранения — "
"мы особенно это отмечаем для данного типа кеша."

# 35423dabc59744c1ae7dfb24a0dedcc5
#: ../../topics/cache.txt:174
msgid "Database caching"
msgstr "Кеширование в базу данных"

# 01fea39baa8f42b78d2eaf6c7101cf9d
#: ../../topics/cache.txt:176
msgid ""
"Django can store its cached data in your database. This works best if you've "
"got a fast, well-indexed database server."
msgstr ""
"Кеширование в базу данных отлично работает в случае, если у вас есть быстрый "
"сервер баз данных с поддержкой индексирования."

# dff2e0d66dd942e2806fc522d54c4597
#: ../../topics/cache.txt:179
msgid "To use a database table as your cache backend:"
msgstr "Для использования таблицы базы данных в качестве бекенда кеша:"

# fc9007e9bef64e80a30bae46012770e3
#: ../../topics/cache.txt:181
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends.db."
"DatabaseCache``"
msgstr ""
"Установите :setting:`BACKEND <CACHES-BACKEND>` в ``django.core.cache."
"backends.db.DatabaseCache``"

# 12b60a03c83a4d019b46248e0645f245
#: ../../topics/cache.txt:184
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``tablename``, the name of the "
"database table. This name can be whatever you want, as long as it's a valid "
"table name that's not already being used in your database."
msgstr ""
"Установите :setting:`LOCATION <CACHES-LOCATION>` в ``tablename``, имя "
"таблицы базы данных. Это имя может быть любым, пока оно не противоречит "
"правилам именования таблиц в вашей базе данных и не занято другой таблицей."

# 8da474f4fb164a1d87e5e8186729cac7
#: ../../topics/cache.txt:188
msgid "In this example, the cache table's name is ``my_cache_table``::"
msgstr "В данном примере, именем таблицы для кеша будет ``my_cache_table``::"

# 127a66b2ab5a484ab3ece23ce4f3ca5d
#: ../../topics/cache.txt:198
msgid "Creating the cache table"
msgstr "Создание таблицы для кеша"

# f75593e9515b4029b11505cb39ed777c
#: ../../topics/cache.txt:200
msgid ""
"Before using the database cache, you must create the cache table with this "
"command::"
msgstr ""
"Для того, чтобы использовать таблицу базы данных в качестве кеша, сначала "
"надо её создать с помощью следующей команды::"

# 28db30ea21ce4acfba6d47bb4564f739
#: ../../topics/cache.txt:205
msgid ""
"This creates a table in your database that is in the proper format that "
"Django's database-cache system expects. The name of the table is taken from :"
"setting:`LOCATION <CACHES-LOCATION>`."
msgstr ""
"В результате в базе данных будет создана таблица, структура которой "
"соответствует ожиданиям системы кеширования. Имя для таблицы будет взято из "
"параметра :setting:`LOCATION <CACHES-LOCATION>`."

# 61c83bc273fa4c8c850ca7efe2201b4a
#: ../../topics/cache.txt:209
msgid ""
"If you are using multiple database caches, :djadmin:`createcachetable` "
"creates one table for each cache."
msgstr ""
"При использовании нескольких БД кешей, команда :djadmin:`createcachetable` "
"создаст по одной таблице для каждого кеша."

# e500c6bfa8874aea8c3bc3f6b9e06573
#: ../../topics/cache.txt:212
msgid ""
"If you are using multiple databases, :djadmin:`createcachetable` observes "
"the ``allow_migrate()`` method of your database routers (see below)."
msgstr ""
"Если вы используете множество баз данных, то команда :djadmin:"
"`createcachetable` обратится к методу ``allow_migrate()`` роутера вашей базы "
"данных (см. далее)."

# 80a843dafcc4454fb7e67c8e07835f8c
#: ../../topics/cache.txt:215
msgid ""
"Like :djadmin:`migrate`, :djadmin:`createcachetable` won't touch an existing "
"table. It will only create missing tables."
msgstr ""
"Аналогично команде :djadmin:`migrate`, команда :djadmin:`createcachetable` "
"не внесёт изменения в существующую таблицу. Она создаёт только отсутствующие "
"таблицы."

#: ../../topics/cache.txt:218
msgid ""
"To print the SQL that would be run, rather than run it, use the :option:"
"`createcachetable --dry-run` option."
msgstr ""
"Чтобы вывести SQL, который был бы выполнен, без его выполнения, используйте "
"опцию :option:`createcachetable --dry-run`."

# a3c1227b4fcc4cbf9018d3141e23d452
#: ../../topics/cache.txt:222
msgid "Multiple databases"
msgstr "Множество баз данных"

# 8ecc69f25aa0424f87f217344ad5f73b
#: ../../topics/cache.txt:224
msgid ""
"If you use database caching with multiple databases, you'll also need to set "
"up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""
"Если у вас несколько баз данных и вы планируете использовать кеширование, "
"потребуется прописать инструкции роутинга для таблицы кеширования. В целях "
"роутинга таблица кеширования представлена моделью ``CacheEntry`` в "
"приложении ``django_cache``. Эта модель не отобразится в модельном кеше, но "
"содержимое модели может быть использовано для роутинга."

# dad7ad27c2524988871e70c01b3808ab
#: ../../topics/cache.txt:231
msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_replica``, and all write operations to ``cache_primary``. The cache "
"table will only be synchronized onto ``cache_primary``::"
msgstr ""
"Например, представленный ниже роутер будет перенаправлять все операции "
"чтения из кеша на ``cache_replica``, а всё операции записи на "
"``cache_primary``. Таблица кеширования будет синхронизироваться только с "
"``cache_primary``::"

# 56c49618fa8e4b73b9f055a98ae61c71
#: ../../topics/cache.txt:257
msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""
"Если вы не настроите роутинг для кеширования, то модуль кеширования будет "
"использовать базу ``default``."

# 4835ce4ac29f48958de1f26d2f9c2579
#: ../../topics/cache.txt:260
msgid ""
"Of course, if you don't use the database cache backend, you don't need to "
"worry about providing routing instructions for the database cache model."
msgstr ""
"Естественно, если вы не используете базу данных для кеша, вам не надо "
"беспокоиться об инструкциях роутинга."

# b8b624ae6228452ab0e97c806c33a1cb
#: ../../topics/cache.txt:265
msgid "Filesystem caching"
msgstr "Кеширование в файловую систему"

# c2fb6cf652324bcd962e98ffd9dfcdf6
#: ../../topics/cache.txt:267
msgid ""
"The file-based backend serializes and stores each cache value as a separate "
"file. To use this backend set :setting:`BACKEND <CACHES-BACKEND>` to ``"
"\"django.core.cache.backends.filebased.FileBasedCache\"`` and :setting:"
"`LOCATION <CACHES-LOCATION>` to a suitable directory. For example, to store "
"cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr ""
"Файловый бекенд сериализует и сохраняет каждое закешированное значение в "
"отдельном файле. Для использования этого бекенда, установите :setting:"
"`BACKEND <CACHES-BACKEND>` в ``\"django.core.cache.backends.filebased."
"FileBasedCache\"``, а для :setting:`LOCATION <CACHES-LOCATION>` укажите "
"подходящий каталог. Например, для хранения закешированных данных в ``/var/"
"tmp/django_cache``, используйте такую настройку::"

# 7ed82b37873a4abfaadcd6eab1e79b23
#: ../../topics/cache.txt:280
msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr ""
"Если вы используете Windows, то подставьте букву диска в начало пути, вот "
"так::"

# 96996adb9583415086a927844138a542
#: ../../topics/cache.txt:290
msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""
"Путь к каталогу должен быть абсолютным, т.е. он должен начинаться с корня "
"файловой системы. Завершающий слэш не имеет значения."

# 95142726f70a49e6b88b7d8ba359bfaf
#: ../../topics/cache.txt:294
msgid ""
"Make sure the directory pointed-to by this setting exists and is readable "
"and writable by the system user under which your Web server runs. Continuing "
"the above example, if your server runs as the user ``apache``, make sure the "
"directory ``/var/tmp/django_cache`` exists and is readable and writable by "
"the user ``apache``."
msgstr ""
"Следует удостовериться, что указанный каталог существует и доступен для "
"чтения и записи для пользователя, от которого работает ваш веб сервер. "
"Продолжая предыдущий пример, если ваш веб сервер запущен от пользователя "
"``apache``, проверьте, что каталог ``/var/tmp/django_cache`` существует и "
"доступен для чтения и записи пользователю ``apache``."

# daae325452f547e8909485bb9bd82c8b
#: ../../topics/cache.txt:303
msgid "Local-memory caching"
msgstr "Кеширование в оперативной памяти"

# b748754e6f474f17aca313fc8c17dcc6
#: ../../topics/cache.txt:305
msgid ""
"This is the default cache if another is not specified in your settings file. "
"If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is per-process (see below) and thread-safe. To use it, set :"
"setting:`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem."
"LocMemCache\"``. For example::"
msgstr ""
"Это стандартный кеш, который применяется, если другой не определён в вашем "
"файле конфигурации. Если вам требуется высокая скорость работы кеша, но у "
"вас нет возможности развернуть Memcached, рассмотрите вариант использования "
"кеша в оперативной памяти. Этот кеш по-процессный (см. далее) и "
"потокобезопасный. Для его использования надо параметру конфигурации :setting:"
"`BACKEND <CACHES-BACKEND>` присвоить значение ``\"django.core.cache.backends."
"locmem.LocMemCache\"``. Например::"

# e019bd9d38644266a07dcbe0e523ad40
#: ../../topics/cache.txt:319
msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one ``locmem`` cache, you can "
"omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more "
"than one local memory cache, you will need to assign a name to at least one "
"of them in order to keep them separate."
msgstr ""
"Параметр конфигурации :setting:`LOCATION <CACHES-LOCATION>` используется для "
"идентификации отдельных хранилищ в памяти. Если у вас только один такой кеш, "
"то вы можете пропустить этот параметр. Однако, в случае нескольких кешей, "
"вам потребуется назначить имя хотя бы для одного из них, для их различия."

#: ../../topics/cache.txt:325
msgid "The cache uses a least-recently-used (LRU) culling strategy."
msgstr ""

# afb7683767574ed3aa4bf3c634b841c5
#: ../../topics/cache.txt:327
msgid ""
"Note that each process will have its own private cache instance, which means "
"no cross-process caching is possible. This obviously also means the local "
"memory cache isn't particularly memory-efficient, so it's probably not a "
"good choice for production environments. It's nice for development."
msgstr ""
"Следует отметить, что каждый процесс будет работать со своим собственным "
"экземпляром кеша, что означает невозможность разделения одного кеша между "
"процессами. Это означает, что кеш данного типа неэкономно использует "
"оперативную память и, возможно, не будет хорошим выбором для боевого "
"окружения. Он хорош на время разработки."

#: ../../topics/cache.txt:334
msgid "Older versions use a pseudo-random culling strategy rather than LRU."
msgstr ""

# 0fe9e3a9c40e478ba8762a4b100f49b5
#: ../../topics/cache.txt:337
msgid "Dummy caching (for development)"
msgstr "Псевдокеширование (для разработки)"

# 74492aa2765e477a932cb1c9410f04f4
#: ../../topics/cache.txt:339
msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""
"Наконец, Django поставляется с «псевдо» кешем, который не выполняет "
"собственно кеширование. Он просто реализует интерфейс кеша, не делая больше "
"ничего."

# df00eebee07a4285a0404f96a1e77a7e
#: ../../topics/cache.txt:342
msgid ""
"This is useful if you have a production site that uses heavy-duty caching in "
"various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter. "
"To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""
"Он полезен в случае, когда у вас есть боевой сайт , который плотно "
"использует кеширование в различных местах, а также окружение разработки или "
"тестирование, где кешировать ничего не надо. Для активации псевдо "
"кеширования, установите :setting:`BACKEND <CACHES-BACKEND>`::"

# 8a92843c7e2c402caf97c2f3afa1837f
#: ../../topics/cache.txt:354
msgid "Using a custom cache backend"
msgstr "Использование собственного модуля кеширования"

# 69e2d99daa99418197fcf39cf51e895b
#: ../../topics/cache.txt:356
msgid ""
"While Django includes support for a number of cache backends out-of-the-box, "
"sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the :"
"setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""
"Несмотря на то, что Django предоставляет ряд модулей кеширования, вам может "
"потребоваться использовать свой кеширующий модуль. Для подключения внешнего "
"кеширующего модуля используйте путь до него в качестве значения :setting:"
"`BACKEND <CACHES-BACKEND>` параметра конфигурации :setting:`CACHES`, вот "
"так::"

# 54d2ee731f974423b0e8c63153deed54
#: ../../topics/cache.txt:367
msgid ""
"If you're building your own backend, you can use the standard cache backends "
"as reference implementations. You'll find the code in the ``django/core/"
"cache/backends/`` directory of the Django source."
msgstr ""
"При создании своего кеширующего модуля вы можете использовать стандартные "
"модули в качестве примера. Их код располагается в каталоге ``django/core/"
"cache/backends/`` исходного кода Django."

# 61361e4e3bfe4f42a30fc0f79881fba1
#: ../../topics/cache.txt:371
msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are easy to use."
msgstr ""
"Следует отметить, если нет важной причины для использования собственного "
"кеширующего модуля, вы должны использовать кеширующие модули, поставляемые с "
"Django. Они протестированы и просты в использовании."

# 95bfe707b6784ae2a82cc27935b61eb6
#: ../../topics/cache.txt:378
msgid "Cache arguments"
msgstr "Параметры кеша"

# 7642d91d62404e8382403a02f7115261
#: ../../topics/cache.txt:380
msgid ""
"Each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the :setting:"
"`CACHES` setting. Valid arguments are as follows:"
msgstr ""
"После определения типа кеша и имени для каждого из них, для каждого модуля "
"можно указать дополнительные аргументы для управления поведением кеша. Эти "
"аргументы представляются в виде дополнительных ключей в параметре "
"конфигурации :setting:`CACHES`. Приведём список допустимых аргументов:"

# 507d2e79300c49df9b5ed84b7948a47d
#: ../../topics/cache.txt:384
msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use "
"for the cache. This argument defaults to ``300`` seconds (5 minutes). You "
"can set ``TIMEOUT`` to ``None`` so that, by default, cache keys never "
"expire. A value of ``0`` causes keys to immediately expire (effectively "
"\"don't cache\")."
msgstr ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: время устаревания кеша по умолчанию, в "
"секундах. По умолчанию ``300`` секунд (5 минут). Вы можете установить "
"``TIMEOUT`` в ``None``, тогда кеш никогда не устареет. Если указать ``0``, "
"все ключи будут сразу устаревать (таким образом можно заставить \"не "
"кешировать\")."

# cd98577671fb4b50bbc831d7fecd3cb5
#: ../../topics/cache.txt:390
msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"the cache backend. The list of valid options will vary with each backend, "
"and cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library."
msgstr ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Любая опция, которая должна быть "
"передана модулю. Список допустимых опций варьируется от модуля к модулю и "
"передается непосредственно в библиотеку для кеширования."

# ee21c295969f48cd827adcc5aac9372f
#: ../../topics/cache.txt:395
msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""
"Модули кеширования, которые реализуют собственную стратегию очистки (т.е., "
"модули ``locmem``, ``filesystem`` и ``database``) учитывают следующие опции:"

# b7bbecd452f34daab21bf4dc8594acda
#: ../../topics/cache.txt:399
msgid ""
"``MAX_ENTRIES``: The maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""
"``MAX_ENTRIES``: максимальное количество элементов в кеше перед началом "
"удаления старых значений. Обычно, ``300`` элементов."

# 440c4f8018f9413eacda97ccaee8bd38
#: ../../topics/cache.txt:403
msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1 / CULL_FREQUENCY``, so "
"set ``CULL_FREQUENCY`` to ``2`` to cull half the entries when "
"``MAX_ENTRIES`` is reached. This argument should be an integer and defaults "
"to ``3``."
msgstr ""
"``CULL_FREQUENCY``: Часть элементов, которые надо удалить при достижении "
"``MAX_ENTRIES``. Обычное соотношение — ``1/CULL_FREQUENCY``, таким образом,  "
"надо установить ``CULL_FREQUENCY`` в ``2``, чтобы удалять половину значений "
"кеша при достижении ``MAX_ENTRIES``. Аргумент должен быть целым числом и по "
"умолчанию равен ``3``."

# 59258d4194024c019cf8cbb067e32919
#: ../../topics/cache.txt:409
msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. On some backends (``database`` in "
"particular) this makes culling *much* faster at the expense of more cache "
"misses."
msgstr ""
"Значение ``0`` для ``CULL_FREQUENCY`` означает, что весь кеш должен быть "
"сброшен при достижении ``MAX_ENTRIES``. Это делает очистку *значительно* "
"быстрее для определенных бекендов(в частности ``database``) ценой увеличения "
"промахов кеша."

#: ../../topics/cache.txt:414
msgid ""
"Memcached backends pass the contents of :setting:`OPTIONS <CACHES-OPTIONS>` "
"as keyword arguments to the client constructors, allowing for more advanced "
"control of client behavior. For example usage, see below."
msgstr ""
"Бекенд Memcached получает содержимое настройки :setting:`OPTIONS <CACHES-"
"OPTIONS>` как именованные аргументы конструктора клиента, что дает "
"дополнительный контроль его поведения."

# 978e9dbc456442fb9d145a4eb32a19ee
#: ../../topics/cache.txt:418
msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: Строка, которая автоматически "
"включается (предваряет, по умолчанию) во все ключи кеша, используемые "
"сервером Django."

# f4ab48a98d3c40c49f744a6ee31e64e0
#: ../../topics/cache.txt:422
msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""
"Обратитесь к :ref:`документации на кеш <cache_key_prefixing>` для "
"подробностей."

# ad9796083fb64dfd901e0863b8cfdd50
#: ../../topics/cache.txt:425
msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""
":setting:`VERSION <CACHES-VERSION>`: Номер версии про умолчанию для ключей "
"кеша, созданных сервером Django."

# ad0ef1030c1c4189b17801b4e58b3916
#: ../../topics/cache.txt:428
msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""
"Обратитесь к :ref:`документации на кеш <cache_versioning>` для подробностей."

# fdd591ea93484bc1ab23764b8a19a1a5
#: ../../topics/cache.txt:431
msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` Строка, содержащая путь до "
"функции, которая определяет правила объединения префикса, версии и ключа в "
"итоговый ключ кеша."

# d98a637e0b23454c8ae69ea1458f1fe0
#: ../../topics/cache.txt:435
msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""
"Обратитесь к :ref:`документации на кеш <cache_key_transformation>` для "
"подробностей."

# 84318c43d9214ca188f044a97e59bc51
#: ../../topics/cache.txt:438
msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""
"В этом примере, модуль кеширования на файловую систему настроен на таймаут в "
"60 секунд и ёмкость в 1000 элементов::"

#: ../../topics/cache.txt:452
msgid ""
"Here's an example configuration for a ``python-memcached`` based backend "
"with an object size limit of 2MB::"
msgstr ""
"Ниже приведен пример конфигурации для бекенда на основе ``python-memcached`` "
"с ограничением размера объекта в 2MB ::"

#: ../../topics/cache.txt:465
msgid ""
"Here's an example configuration for a ``pylibmc`` based backend that enables "
"the binary protocol, SASL authentication, and the ``ketama`` behavior mode::"
msgstr ""
"Ниже приведен пример конфигурации бекенда на основе pylibmc, который "
"позволяет использовать двоичный протокол, аутентификацию SASL и режим "
"поведения ketama:"

# 3932284ccf6747e79c7f0b1d8c70a155
#: ../../topics/cache.txt:486
msgid "The per-site cache"
msgstr "кеширование всего сайта"

# d30004f128d3439fb8c25d6d7a865106
#: ../../topics/cache.txt:488
msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add ``'django.middleware.cache."
"UpdateCacheMiddleware'`` and ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE` setting, as in "
"this example::"
msgstr ""
"После настройки кеша, простейшим способом его использования будет "
"кеширование всего сайта. Вам надо будет добавить ``'django.middleware.cache."
"UpdateCacheMiddleware'`` и ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` в параметр конфигурации :setting:`MIDDLEWARE`, "
"как это показано в примере::"

# bcc6e2136b294876a4f3de52ceb7ae8a
#: ../../topics/cache.txt:502
msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE`_ below if you'd like the full story."
msgstr ""
"Нет, это не ошибка: промежуточный слой \"update\" должна идти первым в "
"списке, а \"fetch\" — последним. Подробности тут не приводятся, обратитесь к "
"`Order of MIDDLEWARE`_, проведенному далее, если они вам нужны."

# 18a655b59eb542899c0d60678f368811
#: ../../topics/cache.txt:506
msgid "Then, add the following required settings to your Django settings file:"
msgstr ""
"Затем, добавьте следующие обязательные параметры в файл конфигурации проекта:"

# fa4a24d0e08d48809cb1a69fe7b61c58
#: ../../topics/cache.txt:508
msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- Метка кеша, используемая для хранилища."

# 9c54378e02cc42caac75ce4c92cc2a4d
#: ../../topics/cache.txt:509
msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- Количество секунд хранения каждой "
"закешированной страницы."

# ca1e970db99640cfbd270b51a3c24ea0
#: ../../topics/cache.txt:511
msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- Если кеш разделён между "
"несколькими сайтами внутри одной инсталляции Django, установите имя сайта "
"или любую другую строку, которая уникальна для этой инсталляции, чтобы "
"предотвратить совпадения. Используйте пустую строку, если это не ваш случай."

# 2e6c7ef3a7bb4d77b37fd9712a16f163
#: ../../topics/cache.txt:516
msgid ""
"``FetchFromCacheMiddleware`` caches GET and HEAD responses with status 200, "
"where the request and response headers allow. Responses to requests for the "
"same URL with different query parameters are considered to be unique pages "
"and are cached separately. This middleware expects that a HEAD request is "
"answered with the same response headers as the corresponding GET request; in "
"which case it can return a cached GET response for HEAD request."
msgstr ""
"``FetchFromCacheMiddleware`` кеширует GET и HEAD отклики со статусом 200, "
"если заголовки запроса и отклика это позволяют. Ответы на запросы для одного "
"URL с разными параметрами запроса считаются уникальными и кешируются "
"раздельно. Промежуточный слой ожидает, что запрос HEAD возвращает такие же "
"заголовки, как и соответствующий GET запрос; в этом случае он может вернуть "
"закешированный GET отклик для запроса HEAD."

# 7e280eb36872431c9be00cd1ff3c6021
#: ../../topics/cache.txt:523
msgid ""
"Additionally, ``UpdateCacheMiddleware`` automatically sets a few headers in "
"each :class:`~django.http.HttpResponse`:"
msgstr ""
"Также промежуточный слой ``UpdateCacheMiddleware`` автоматически "
"устанавливает несколько заголовков в каждом :class:`~django.http."
"HttpResponse`:"

# f5e8c15f582344349d2620ffc8373da8
#: ../../topics/cache.txt:526
msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""
"Устанавливает в заголовке ``Expires`` текущие дату и время, добавляя к ним "
"значение, определённое в :setting:`CACHE_MIDDLEWARE_SECONDS`."

# 6fe8920707af42998bbadf05b5af4e70
#: ../../topics/cache.txt:529
msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""
"Устанавливает заголовок ``Cache-Control``, определяя максимальный возраст "
"для страницы, также используя значение из параметра конфигурации :setting:"
"`CACHE_MIDDLEWARE_SECONDS`."

# 2901aaecec6c47e6843c19b877603cbd
#: ../../topics/cache.txt:532
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr "Обратитесь к  :doc:`/topics/http/middleware` для подробностей."

# 602a54512da348edb56601e0713bd623
#: ../../topics/cache.txt:534
msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the :func:`~django.views.decorators.cache.cache_control` "
"decorator) or disable caching for a view (using the :func:`~django.views."
"decorators.cache.never_cache` decorator). See the `using other headers`__ "
"section for more on these decorators."
msgstr ""
"Если представление устанавливает собственное время кеширования (т.е. "
"определяет значение ``max-age`` в заголовке ``Cache-Control``), то страница "
"будет закеширована на указанное время, вместо :setting:"
"`CACHE_MIDDLEWARE_SECONDS`. Используя декораторы из ``django.views."
"decorators.cache``, вы можете легко определять время кеширования "
"представлений (с помощью декоратора :func:`~django.views.decorators.cache."
"cache_control`) или отключать кеширование для представления (с помощью "
"декоратора :func:`~django.views.decorators.cache.never_cache`). Обратитесь к "
"разделу :ref:`Использование других заголовков<using-other-headers>` для "
"получения дополнительной информации об этих декораторах."

# a108c7c0d3c5494a8218e6202693c584
#: ../../topics/cache.txt:545
msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also :"
"ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""
"Если параметр конфигурации :setting:`USE_I18N` установлен в ``True``, то "
"созданный ключ значения в кеше будет содержать имя активного :term:"
"`языка<language code>` -- обратитесь к :ref:`определению Django языковой "
"настройки<how-django-discovers-language-preference>`). Такое поведение "
"позволяет легко кешировать мультиязычные сайты, не требуя функционала для "
"создания ключей кеша."

# 453ea9c236c24006a1da325969416242
#: ../../topics/cache.txt:550
msgid ""
"Cache keys also include the active :term:`language <language code>` when :"
"setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone "
"<default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""
"Ключи кеша также включают в себя активный :term:`язык <language code>` в "
"случаях, когда :setting:`USE_L10N` установлен в ``True``, а также включают в "
"себя :ref:`текущий часовой пояс <default-current-time-zone>`, если :setting:"
"`USE_TZ` установлен в ``True``."

# 1ff41aca7750497b857fe3472718ae1a
#: ../../topics/cache.txt:557
msgid "The per-view cache"
msgstr "кеширование на уровне представлений"

# e59c55a8b945483cb5ec88c7dd608ba7
#: ../../topics/cache.txt:561
msgid ""
"A more granular way to use the caching framework is by caching the output of "
"individual views. ``django.views.decorators.cache`` defines a ``cache_page`` "
"decorator that will automatically cache the view's response for you. It's "
"easy to use::"
msgstr ""
"Более детальный способ использования системы кеширования возможен за счет "
"кеширования вывода отдельных представлений. Модуль ``django.views.decorators."
"cache`` определяет декоратор ``cache_page``, который автоматически кеширует "
"вывод представления. Использовать его несложно::"

# 9fc1e4dd2d5f486d8064130dee513363
#: ../../topics/cache.txt:572
msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes "
"multiplied by 60 seconds per minute.)"
msgstr ""
"Декоратор ``cache_page`` принимает единственный аргумента: длительность "
"кеширования, в секундах. В предыдущем примере, результат представления "
"``my_view()`` будет закеширован на 15 минут. (Следует отметить, что мы "
"задали значения в виде ``60 * 15`` в целях читаемости. ``60 * 15`` будет "
"вычислено в ``900``, т.е. 15 минут умножается на 60 секунд в минуте.)"

# bfe46b9edde944569e21c3497e3c06ac
#: ../../topics/cache.txt:578
msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""
"Кеш уровня представления, аналогично кешу уровня сайта, использует ключи на "
"основе URL. Если несколько URL указывают на одно представление, каждый URL "
"будет закеширован отдельно. Продолжая работу с примером ``my_view``, если "
"ваш URLconf выглядит так::"

# 034177cc381a487391c6e667bf5985d3
#: ../../topics/cache.txt:586
msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""
"то запросы к ``/foo/1/`` и ``/foo/23/`` будут закешированы отдельно, как вы "
"могли предполагать. Но как только определённый URL (например, ``/foo/23/``) "
"будет запрошен, следующие запросы к этому URL будут использовать кеш."

# ab60b2178b4e428d9e7998db5a0e940e
#: ../../topics/cache.txt:590
msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""
"Декоратор ``cache_page`` также может принимать необязательный именованный "
"аргумент, ``cache``, который указывает декоратору использовать определённый "
"кеш (из списка параметра конфигурации :setting:`CACHES`) для кеширования "
"результатов. По умолчанию используется кеш ``default``, но вы можете указать "
"любой::"

# 3623fd1f0f3b4a07b577bb0f89c89729
#: ../../topics/cache.txt:600
msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""
"Также вы можете переопределять префикс кеша на уровне представления. "
"Декоратор ``cache_page`` принимает необязательный именованный аргумент "
"``key_prefix``, который работает аналогично параметру конфигурации :setting:"
"`CACHE_MIDDLEWARE_KEY_PREFIX` для мидлвари. Он может быть использован "
"следующим образом::"

#: ../../topics/cache.txt:609
msgid ""
"The ``key_prefix`` and ``cache`` arguments may be specified together. The "
"``key_prefix`` argument and the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"specified under :setting:`CACHES` will be concatenated."
msgstr ""
"Аргументы ``key_prefix`` и ``cache`` можно указать вместе. Аргумент "
"``key_prefix`` и параметр :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"настройки :setting:`CACHES` будут объединены."

# 61c6a341520942539be8d7a59d748bc6
#: ../../topics/cache.txt:614
msgid "Specifying per-view cache in the URLconf"
msgstr "Определение кеша уровня представления в URLconf"

# 84888a6c35e74e139cdfc3f2dece3eca
#: ../../topics/cache.txt:616
msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on "
"another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""
"Примеры из предыдущей секции содержат жёсткое определение кеширования "
"представления, так как декоратор ``cache_page`` меняет поведение функции "
"``my_view``. Такое подход связывает ваше представление с системой "
"кеширования, что не всегда подходит по нескольким причинам. Например, вы "
"можете пожелать распространять представления людям, которые захотят "
"использовать их вне системы кеширования. Решением такой проблемы является "
"указание кеширования в URLconf для каждого представления, а не у каждой "
"функции."

# 8a454ae0abd148e8b98311167e3c340e
#: ../../topics/cache.txt:625
msgid ""
"Doing so is easy: simply wrap the view function with ``cache_page`` when you "
"refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""
"Сделать это несложно: просто оберните функцию представления с помощью "
"``cache_page``, при обращении к ней в URLconf. Вот так выглядела старая "
"конфигурация URL::"

# 9acd2f37a1bd445280b3dacd19d3781e
#: ../../topics/cache.txt:632
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""
"Вот так должно быть в случае, когда ``my_view`` обёрнута с помощью "
"``cache_page``::"

# 48d16e8184014bfb95414e7750d8b7dc
#: ../../topics/cache.txt:643
msgid "Template fragment caching"
msgstr "Кеширование фрагментов шаблона"

# 956cc3117f6d41fb9dafeda8793c2029
#: ../../topics/cache.txt:645
msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""
"Если требуется более тонкий контроль, вы также можете кешировать фрагменты "
"шаблона с помощью шаблонного тега ``cache``. Для работы данного тега "
"необходимо указать ``{% load cache %}`` в начале шаблона."

# a5e24dc571de40e88a3adc6015271b6e
#: ../../topics/cache.txt:649
msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in "
"seconds, and the name to give the cache fragment. The fragment is cached "
"forever if timeout is ``None``. The name will be taken as is, do not use a "
"variable. For example:"
msgstr ""
"Шаблонный тег ``{% cache %}`` кеширует содержимое блока на указанный период "
"времени. Он принимает как минимум два аргумента: время кеширования в "
"секундах и имя для закешированного фрагмента. Если вместо времени передать "
"``None`` - фрагмент будет закеширован навсегда. Имя будет использовано как "
"есть, не используйте переменную. Например:"

#: ../../topics/cache.txt:664
msgid "Older versions don't allow a ``None`` timeout."
msgstr "В старых версиях нельзя было использовать ``None`` вместо времени."

# b37b743b1c1b4c509d4476c98005b71b
#: ../../topics/cache.txt:666
msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on "
"some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing one or more additional "
"arguments, which may be variables with or without filters, to the ``{% cache "
"%}`` template tag to uniquely identify the cache fragment:"
msgstr ""
"Иногда требуется кешировать многочисленные копии одного фрагмента, "
"различающиеся только небольшим куском динамических данных. Например, может "
"потребоваться кеширование копии сайдбара из предыдущего примера для каждого "
"пользователя вашего сайта. Это можно сделать, передав дополнительные "
"аргументы в шаблонный тег ``{% cache %}``, что однозначно будет "
"идентифицировать фрагмент. В качестве дополнительный аргументов можно "
"использовать переменные, к которым можно применять фильтры:"

# a04311ac09f74f6c977acdd445fff573
#: ../../topics/cache.txt:680
msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache "
"will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific "
"variables<template-translation-vars>` available in templates to achieve the "
"same result:"
msgstr ""
"Если параметр конфигурации :setting:`USE_I18N` установлен в ``True``, то "
"мидлварь кеширования сайта будет :ref:`учитывать активных язык<i18n-cache-"
"key>`. Для шаблонного тега ``cache`` можно использовать одну из :ref:"
"`переменных, предназначенных для перевода<template-translation-vars>`, "
"доступных шаблонам для достижения того же результата:"

# 9056ae4ade8b46a2860b759d6764afb3
#: ../../topics/cache.txt:697
msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable "
"``my_timeout`` is set to the value ``600``, then the following two examples "
"are equivalent:"
msgstr ""
"Время жизни фрагмента в кеше также может быть шаблонной переменной, до тех "
"пор пока эта переменная разрешается в целое значение. Например, если "
"шаблонная переменная ``my_timeout`` имеет значение ``600``, то следующие два "
"примера эквивалентны:"

# 349269b6e5b54c59a29b44981cdfcad1
#: ../../topics/cache.txt:707
msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and just reuse that value."
msgstr ""
"Эта особенность полезна для уменьшения количества повторений в шаблонах. Вы "
"можете установить время жизни в переменной, в одном месте, и затем "
"использовать это значение."

# 0bce76b82228460884d79089a4d80037
#: ../../topics/cache.txt:710
msgid ""
"By default, the cache tag will try to use the cache called "
"\"template_fragments\". If no such cache exists, it will fall back to using "
"the default cache. You may select an alternate cache backend to use with the "
"``using`` keyword argument, which must be the last argument to the tag."
msgstr ""
"По умолчанию, кеширующий тег будет пытаться использовать кеш с именем "
"\"template_fragments\". При отсутствии такого кеша, будет происходить "
"переключение на стандартный кеш. Вы можете выбрать использование "
"альтернативного бекенда кеша с помощью аргумента ``using``, который должен "
"быть последним аргументом в теге."

# 64111b839810498ea9fd56a7bcb4e367
#: ../../topics/cache.txt:719
msgid ""
"It is considered an error to specify a cache name that is not configured."
msgstr "Указание имени несконфигурированного кеша является ошибкой."

# 8c47cf123c9f487382c600b42b36ccdb
#: ../../topics/cache.txt:723
msgid ""
"If you want to obtain the cache key used for a cached fragment, you can use "
"``make_template_fragment_key``. ``fragment_name`` is the same as second "
"argument to the ``cache`` template tag; ``vary_on`` is a list of all "
"additional arguments passed to the tag. This function can be useful for "
"invalidating or overwriting a cached item, for example:"
msgstr ""
"Чтобы получить ключ кеша для кешированного фрагменты шаблона, можно "
"использовать функцию ``make_template_fragment_key``. ``fragment_name`` -- "
"второй аргумент, передаваемый в тег ``cache``, ``vary_on``  -- список "
"дополнительных аргументов, передаваемых в тег. Эту функцию можно "
"использовать для переназначения или удаления кешированных фрагментов шаблона:"

# bdde1d324fc941479c1d86d7b898bebd
#: ../../topics/cache.txt:740
msgid "The low-level cache API"
msgstr "API низкого уровня для кеширования"

# 3868bc207fb342499cf0c8a35627cfa1
#: ../../topics/cache.txt:744
msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""
"Временами кеширование всей созданной страницы не даёт нужного результата и "
"обычно является неудобным излишеством."

# 0203cbc5a30445349b9dc4824fb7c4f4
#: ../../topics/cache.txt:747
msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""
"Допустим, ваш сайт содержит представление, итог работы которого зависит от "
"нескольких ресурсоёмких запросов, результаты которых периодически "
"изменяются. В этом случае, кеширование всей страницы будет только вредить, "
"но вот кеширование редко изменяемых фрагментов было бы хорошим подходом."

# b85226131dc642b0b211838f4dc43db6
#: ../../topics/cache.txt:754
msgid ""
"For cases like this, Django exposes a simple, low-level cache API. You can "
"use this API to store objects in the cache with any level of granularity you "
"like. You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""
"Для подобных случаев Django предоставляет простой API кеширования низкого "
"уровня. Вы можете использовать этот API для хранения объектов в кеше с любым "
"уровнем детализации. Вы можете поместить в кеш любой объект Python, который "
"может быть безопасно сериализован (\"pickled\"): строки, словари, списки "
"объектов модели и так далее. (То есть, речь идёт о большинстве объектов "
"языка Python, обратитесь к соответствующей документации.)"

# bb1b4f3cb5f1441d81070754e62bf1ac
#: ../../topics/cache.txt:762
msgid "Accessing the cache"
msgstr "Доступ к кешу"

# 1b70702318fb48028186aec3934ae732
#: ../../topics/cache.txt:766
msgid ""
"You can access the caches configured in the :setting:`CACHES` setting "
"through a dict-like object: ``django.core.cache.caches``. Repeated requests "
"for the same alias in the same thread will return the same object."
msgstr ""
"Вы можете иметь доступ к кешам, определённым в параметре конфигурации :"
"setting:`CACHES`, через словарно-подобный объект ``django.core.cache."
"caches``. Повторяющиеся запросы по одинаковому псевдониму в одном и том же "
"потоке будут возвращать одинаковый результат."

# bf91318dcca14bc181e27bdf179f43ec
#: ../../topics/cache.txt:777
msgid ""
"If the named key does not exist, ``InvalidCacheBackendError`` will be raised."
msgstr ""
"Если указанного именованного ключа не существует, то будет вызвано "
"исключение ``InvalidCacheBackendError``."

# 9666ecc4f8d54096886fb08377ba0a22
#: ../../topics/cache.txt:780
msgid ""
"To provide thread-safety, a different instance of the cache backend will be "
"returned for each thread."
msgstr ""
"Для обеспечения потоковой независимости, каждый поток будет получать разные "
"экземпляры бекенда кеша."

# 72c9719803684847ad1dfd20d33af995
#: ../../topics/cache.txt:785
msgid ""
"As a shortcut, the default cache is available as ``django.core.cache."
"cache``::"
msgstr ""
"Для простоты, стандартный кеш доступен через ``django.core.cache.cache``::"

# e749007b60c244148141d3de0d120a35
#: ../../topics/cache.txt:790
msgid "This object is equivalent to ``caches['default']``."
msgstr "Этот объект эквивалентен ``caches['default']``."

# 31a3034eda634c39996ece4ffa9230ac
#: ../../topics/cache.txt:793
msgid "Basic usage"
msgstr "Использование"

# 2d709edc9f8149f6907b96027423b6c8
#: ../../topics/cache.txt:795
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""
"Основной интерфейс прост: ``set(key, value, timeout)`` и ``get(key)``::"

#: ../../topics/cache.txt:801
msgid ""
"``key`` should be a ``str``, and ``value`` can be any picklable Python "
"object."
msgstr ""
"``key`` должен быть ``str``, а ``value`` - любым сериализируемым обьектом."

# dcea09136a014c148f15ad28dec639d1
#: ../../topics/cache.txt:803
msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the appropriate backend in the :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache. Passing in ``None`` for ``timeout`` will cache the value forever. "
"A ``timeout`` of ``0`` won't cache the value."
msgstr ""
"Аргумент ``timeout`` является необязательным и обычно равен аргументу "
"``timeout`` соответствующего бекенда кеша из параметре конфигурации :setting:"
"`CACHES` (читайте выше). Аргумент определяет период в секундах, в течение "
"которого значение должно храниться в кеше. Передав ``None`` в ``timeout`` "
"можно закешировать данные навсегда. При ``timeout`` равном ``0`` значение "
"никогда не будет кешироваться."

# e2ac6c0f0ffc47c48e59b270c7f2432a
#: ../../topics/cache.txt:809
msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""
"Если объект отсутствует в кеше, то ``cache.get()`` возвращает ``None``::"

# f6ef2a1eb1294361b93d4758d9dfcc86
#: ../../topics/cache.txt:815
msgid ""
"We advise against storing the literal value ``None`` in the cache, because "
"you won't be able to distinguish between your stored ``None`` value and a "
"cache miss signified by a return value of ``None``."
msgstr ""
"Мы не советуем хранить в кеше литеральное значение ``None``, так как вы не "
"сможете определить разницу между сохранённым значением ``None`` и "
"отсутствием значения в кеше, о чём сигнализирует возвращение значения "
"``None``."

# ae0a4031fb5d4df0861efb615e0c498a
#: ../../topics/cache.txt:819
msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""
"Метод ``cache.get()`` принимает аргумент ``default``. Он определяет "
"значение, которое будет возвращено, если указанного объекта нет в кеше::"

# c48b3839887b45b988e19d8b543f5880
#: ../../topics/cache.txt:825
msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""
"Для того, чтобы добавить элемент в кеш только в случае, когда его там нет, "
"следует использовать метод ``add()``. Он принимает такие же параметры, как и "
"метод ``set()``, но не будет пытаться изменить значение, если оно уже "
"присутствует в кеше::"

# 3b19b90df27a431fb776fd3146a97c5b
#: ../../topics/cache.txt:834
msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""
"Если вам надо определить сохранил ли метод ``add()`` значение в кеше, вы "
"можете проверить значение, которое он возвращает. ``True`` указывает, что "
"значение было сохранено, а ``False`` -- наоборот."

# c48b3839887b45b988e19d8b543f5880
#: ../../topics/cache.txt:838
msgid ""
"If you want to get a key's value or set a value if the key isn't in the "
"cache, there is the ``get_or_set()`` method. It takes the same parameters as "
"``get()`` but the default is set as the new cache value for that key, rather "
"than simply returned::"
msgstr ""
"Если вы хотите получить значение ключа, или установить его, если ключа нет в "
"кеше, используйте метод ``get_or_set()``. Принимает аргументы аналогичные "
"``get()``, но ``default`` также записывается в кеш::"

#: ../../topics/cache.txt:847
msgid "You can also pass any callable as a *default* value::"
msgstr "Вы также можете передать функцию как значение *по умолчанию*::"

# 87ddeb757d844041b8b4377415531f27
#: ../../topics/cache.txt:853
msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""
"С помощью методы ``get_many()`` можно получить ряд значений из кеша за один "
"запрос. Этот метод возвращает словарь со всеми запрошенными ключами, которые "
"действительно присутствуют в кеше (и имеют актуальный срок действия)::"

# 04d054ef61e8474f8da1c3f9adf10fff
#: ../../topics/cache.txt:863
msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""
"Для эффективного кеширования множества значений следует использовать метод "
"``set_many()``, который принимает словарь ключей и их значений::"

# 4c3d7f2b1b5d47ac8be387fd084ae3c3
#: ../../topics/cache.txt:870
msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""
"Аналогично методу ``cache.set()``, метод ``set_many()`` принимает "
"необязательный параметр ``timeout``."

#: ../../topics/cache.txt:872
msgid ""
"On supported backends (memcached), ``set_many()`` returns a list of keys "
"that failed to be inserted."
msgstr ""
"В поддерживаемых бекендах (memcached) set_many () возвращает список ключей, "
"которые не были вставлены."

#: ../../topics/cache.txt:877
msgid "The return value containing list of failing keys was added."
msgstr ""
"Возвращаемое значение содержит список ключей, которые не были добавлены."

# 79accce07d424550959d1a6100d25fcb
#: ../../topics/cache.txt:879
msgid ""
"You can delete keys explicitly with ``delete()``. This is an easy way of "
"clearing the cache for a particular object::"
msgstr ""
"Вы можете явно удалять значения из кеша с помощью метода ``delete()``. Это "
"простейший способ очистки кеша для определённого объекта::"

# f827e4ff97cf41d9b377d65bba2b1b7c
#: ../../topics/cache.txt:884
msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""
"Для одновременного удаления множества значений надо использовать метод "
"``delete_many()``, который принимает список ключей, подлежащих удалению::"

# b00267e3792f45f596f2c95add055168
#: ../../topics/cache.txt:889
msgid ""
"Finally, if you want to delete all the keys in the cache, use ``cache."
"clear()``.  Be careful with this; ``clear()`` will remove *everything* from "
"the cache, not just the keys set by your application. ::"
msgstr ""
"Наконец, для полной очистки кеша надо использовать метод ``cache.clear()``. "
"Будьте осторожными с этим методом. Метод удаляет из кеша *всё*, не только "
"ключи, установленные вашим приложением. ::"

#: ../../topics/cache.txt:895
msgid ""
"``cache.touch()`` sets a new expiration for a key. For example, to update a "
"key to expire 10 seconds from now::"
msgstr ""

#: ../../topics/cache.txt:901
msgid ""
"Like other methods, the ``timeout`` argument is optional and defaults to the "
"``TIMEOUT`` option of the appropriate backend in the :setting:`CACHES` "
"setting."
msgstr ""

#: ../../topics/cache.txt:904
msgid ""
"``touch()`` returns ``True`` if the key was successfully touched, ``False`` "
"otherwise."
msgstr ""

#: ../../topics/cache.txt:909
#, fuzzy
msgid "The ``cache.touch()`` method was added."
msgstr "Был добавлен метод ``get_or_set()``."

# 6eaebd140f81434780aeb8133dd7d6e5
#: ../../topics/cache.txt:911
msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will be incremented or decremented by 1. Other increment/"
"decrement values can be specified by providing an argument to the increment/"
"decrement call. A ValueError will be raised if you attempt to increment or "
"decrement a nonexistent cache key.::"
msgstr ""
"Вы также можете увеличивать или уменьшать значение ключа, находящегося в "
"кеше, с помощью методов ``incr()`` или ``desc()`` соответственно. По-"
"умолчанию, значение в кеше будет увеличено или уменьшено на единицу. Другой "
"шаг изменения величины может быть указан с помощью соответствующего "
"аргумента методов. При попытке изменения несуществующего в кеше значения "
"будет выброшено исключение ``ValueError``.:"

# 30d4d17957704c22b2c98342c32bbf5a
#: ../../topics/cache.txt:930
msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""
"Методы ``incr()`` и ``decr()`` не гарантируют атомарность операции. Тут всё "
"зависит от бекенда. К примеру, Memcached гарантирует атомарность этих "
"операций. Другие бекенды делают это через двойную операцию считывания и "
"сохранения нового значения."

# 5a2dcfa7be2a47c0b30a7eb1b0c39b02
#: ../../topics/cache.txt:937
msgid ""
"You can close the connection to your cache with ``close()`` if implemented "
"by the cache backend."
msgstr ""
"Можно закрыть подключение к кешу методом ``close()``, если бекенд "
"кеширования предоставляет его."

# e8e7f61a324a4f4ea863b2a456a9bc23
#: ../../topics/cache.txt:944
msgid "For caches that don't implement ``close`` methods it is a no-op."
msgstr "Если кеш не реализует метод ``close``, он будет пустым."

# a36cf47d87e14522986c7671150061ca
#: ../../topics/cache.txt:949
msgid "Cache key prefixing"
msgstr "Прификсы ключей кеша"

# c196c71a71c24f458f64c053978c4046
#: ../../topics/cache.txt:951
msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""
"Если ваш кеш разделяется между несколькими серверами или между окружениями "
"разработки и продакшена, возможна ситуация, когда данные, закешированные "
"одним сервером, будут использованы другим сервером. Если формат "
"закешированных данных различен между серверами, то это может привести к "
"трудно выявляемым проблемам."

# 022f7eace0eb4e81b5632415cdc39c68
#: ../../topics/cache.txt:957
msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""
"Чтобы избежать такой ситуации, Django предоставляет возможность назначения "
"префиксов для всех ключей кеша, используемых сервером. При работе с ключом "
"Django автоматически добавляет к нему префикс, определённый параметром "
"конфигурации :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`."

# d3acfa876b61422c8af9258e72883d53
#: ../../topics/cache.txt:962
msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""
"Назначив различные префиксы для каждого экземпляра Django с помощью "
"параметра конфигурации :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`, вы "
"гарантируете отсутствие коллизий в значениях кеша."

# a2d5e7476e2c44c682d499c058760c96
#: ../../topics/cache.txt:969
msgid "Cache versioning"
msgstr "Версионирование кеша"

# 55e277e0a1ad40e9880c44e67ad2096b
#: ../../topics/cache.txt:971
msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""
"При изменении работающего кода, который использует закешированные значения, "
"может потребоваться сброс всех закешированных данных. Простым способом "
"является отчистка всего кеша, но это может привести к потере закешированных "
"данных, которые всё ещё верны и полезны."

# ce62385b7fc1406fa20fc0811eb5049f
#: ../../topics/cache.txt:976
msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the :"
"setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting "
"is automatically combined with the cache prefix and the user-provided cache "
"key to obtain the final cache key."
msgstr ""
"Django предоставляет отличный способ выделения отдельных значений в кеше. "
"Система кеширования Django обладает глобальным идентификатором версии, "
"определённым в параметре кеша :setting:`VERSION <CACHES-VERSION>`. Значение "
"этого параметра автоматически объединяется с префиксом кеша и пользователем, "
"которые предоставил ключ, получая итоговый ключ для обращения к кешу."

# acb31bfad6f5427d94a3941584b9b90c
#: ../../topics/cache.txt:982
msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""
"По-умолчанию, запрос любого ключа из кеша автоматически использует текущую "
"версию кеша для сайта. Однако, простейшие функции для работы с кешем "
"принимают аргумент ``version`` и вы можете указывать конкретную версию кеша. "
"Например::"

# 0ecff9dd6a2a4f7cafd24d682ba34fd3
#: ../../topics/cache.txt:996
msgid ""
"The version of a specific key can be incremented and decremented using the "
"``incr_version()`` and ``decr_version()`` methods. This enables specific "
"keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""
"Версия нужного ключа может быть увеличена или уменьшена с помощью методов "
"``incr_version()`` и ``decr_version()``. Эти методы позволяет изменять "
"версии нужных ключей, не затрагивая остальные ключи. Продолжая наш "
"предыдущий пример::"

# 73ee41bcca6f42609f3d456e3c1cc905
#: ../../topics/cache.txt:1016
msgid "Cache key transformation"
msgstr "Преобразование ключа кеша"

# aad07f725cc74f6ba6d129cb703fcd18
#: ../../topics/cache.txt:1018
msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version "
"to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""
"Как описано в предыдущих двух разделах, система кеширования никогда не "
"использует напрямую ключ, предоставленный пользователем. Ключ всегда "
"комбинируется с префиксом кеша и версией ключа. По-умолчанию, эти три части "
"объединяются через двоеточия, создавая итоговый ключ::"

# d36a7fcc85894bf5be82ef03e882fd15
#: ../../topics/cache.txt:1026
msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""
"Если вам потребуется объединить эти части другим способом или создать ключ "
"другим способом (т.е. приняв хеш ключа за сам ключ), вы можете указать "
"функцию, которая будет выполнять эту работу."

# 6212a60eaca0449a930e0235053cb775
#: ../../topics/cache.txt:1030
msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of ``make_key()`` above. If "
"provided, this custom key function will be used instead of the default key "
"combining function."
msgstr ""
"Параметр кеша :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` определяет путь "
"в точечной нотации к функции, соответствующей прототипу ``make_key()`` из "
"предыдущего примера. При наличии такой функции она будет использоваться "
"вместо стандартной функции построения итогового ключа."

# ac1ef3c7eb7643628e40cee0a8e17232
#: ../../topics/cache.txt:1036
msgid "Cache key warnings"
msgstr "Предупреждения о проблемах с ключами"

# 0ac881dd53d547618aa04af5795ce683
#: ../../topics/cache.txt:1038
msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning (``django.core.cache.backends.base."
"CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""
"Memcached, наиболее используемый в продакшене бекенд кеширования, не "
"поддерживает ключи длиной более 250 символов или содержащих пробелы или "
"управляющие символы. Использование таких ключей приводит к вызову "
"исключения. Для обеспечения уверенности в портируемости кода между "
"кеширующими бекендами и для уменьшения количества неприятных сюрпризов, "
"другие встроенные кеширующие бекенды выбрасывают предупреждение (``django."
"core.cache.backends.base.CacheKeyWarning``), если используемый ключ может "
"привести к ошибке при работе с Memcached."

# ad956ce1710548d48dc6511d2578afd1
#: ../../topics/cache.txt:1045
msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""
"Если вы используете на продакшене кеширующий бекенд, который может принимать "
"широкий диапазон ключей (собственный бекенд или один из встроенных бекендов, "
"кроме Memcached), и не желаете видеть подобные предупреждения, вы можете "
"заглушить ``CacheKeyWarning`` с помощью следующего кода в модуле "
"``management`` одного из ваших приложений::"

# 7f94f2f026954777bdc15eb937e2bc0c
#: ../../topics/cache.txt:1057
msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For "
"instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""
"Если вам требуется изменить логику проверки ключа для одного из встроенных "
"бекендов кеширования, вы можете унаследовать свой класс от него и "
"переопределить метод ``validate_key``. Затем следуйте инструкциям :ref:`по "
"использованию собственного бекенда кеширования <using-a-custom-cache-"
"backend>`. Например, для реализации подобного для бекенда ``locmem``, "
"поместите следующий код в модуль::"

# 028c628ae918405e9e107c17be958f38
#: ../../topics/cache.txt:1069
msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""
"...и используйте путь в точечной нотации к этому классу в ключе :setting:"
"`BACKEND <CACHES-BACKEND>` параметра конфигурации :setting:`CACHES`."

# 6dca884f44514eb8a0e05957ea58f1e4
#: ../../topics/cache.txt:1073
msgid "Downstream caches"
msgstr "\"Даунстрим\" кеши"

# c4c54ad682454628817315485d03ba8f
#: ../../topics/cache.txt:1075
msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to Web development, too: caching performed by "
"\"downstream\" caches. These are systems that cache pages for users even "
"before the request reaches your website."
msgstr ""
"До этого момента данный документ описывал кеширование ваших *собственных* "
"данных. Но есть ещё один тип кеширования, относящийся к веб разработке: "
"кеширование, выполняемое \"даунстрим\" кешами. Это такие системы, которые "
"кешируют страницы для пользователей так, что они даже не обращаются к вашему "
"сайту."

# 4e5c1ceb9ab24c7c93a3d35024b283a0
#: ../../topics/cache.txt:1080
msgid "Here are a few examples of downstream caches:"
msgstr "Рассмотрим несколько примеров таких \"даунстрим\" кешей::"

# 58fe4f8b243c482686737a363b348490
#: ../../topics/cache.txt:1082
msgid ""
"Your ISP may cache certain pages, so if you requested a page from https://"
"example.com/, your ISP would send you the page without having to access "
"example.com directly. The maintainers of example.com have no knowledge of "
"this caching; the ISP sits between example.com and your Web browser, "
"handling all of the caching transparently."
msgstr ""
"Ваш провайдер может кешировать определённые страницы, т.е. если вы запросите "
"страницу с https://example.com/, то провайдер пришлёт её вам без обращения к "
"самому сайту. Основатели данного сайта даже не будут знать о таком "
"кешировании, так как провайдер находится между вашим браузером и сайтом, "
"незаметно выполняя кеширование."

# 44704ea8542b4d39b1e9830e0b5a1a0a
#: ../../topics/cache.txt:1088
msgid ""
"Your Django website may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be "
"passed to your application only if needed."
msgstr ""
"Ваше Django приложение может находится за *прокси-кешем*, таким как Squid "
"Web Proxy Cache (http://www.squid-cache.org/), который кеширует страницы для "
"обеспечения производительности. В таком случае, каждый запрос сначала будет "
"обработан прокси, а затем при необходимости будет передан вашему приложению."

# c899e17aa9684a6ab71381aa49ee9ac4
#: ../../topics/cache.txt:1093
msgid ""
"Your Web browser caches pages, too. If a Web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests "
"to that page, without even contacting the Web page again to see whether it "
"has changed."
msgstr ""
"Ваш веб браузер также кеширует страницы. Если веб страница отправляет "
"соответствующий заголовок, то ваш браузер будет использовать локально "
"закешированную копию для последующих запросов к этой странице, даже не "
"пытаясь проверить, изменилась ли эта страница на сайте."

# 573d9bfa5ccb4dd5a5271178cd858751
#: ../../topics/cache.txt:1098
msgid ""
"Downstream caching is a nice efficiency boost, but there's a danger to it: "
"Many Web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""
"\"Даунстрим\" кеширование -- неплохой ускоритель, но с ним есть одна "
"проблема: содержимое большинства веб страниц различается в зависимости от "
"аутентификации и других настроек и кеширующие системы, которые слепо "
"сохраняют страницы, основываясь в основном на URL, могут выдать неправильные "
"или секретные данные следующим посетителям этих страниц."

# 820f10087b44457ba6cef5ac455ddbaf
#: ../../topics/cache.txt:1103
msgid ""
"For example, say you operate a Web email system, and the contents of the "
"\"inbox\" page obviously depend on which user is logged in. If an ISP "
"blindly cached your site, then the first user who logged in through that ISP "
"would have their user-specific inbox page cached for subsequent visitors to "
"the site. That's not cool."
msgstr ""
"К примеру, скажем вы работаете с почтовой системой и содержимое входящих "
"сообщений очевидно зависит от зарегистрированного в системе пользователя. "
"Если провайдер слепо закешировал ваш сайт, то первый пользователь, вошедший "
"через этого же провайдера, закеширует свою страницу для последующих "
"посетителей этого сайта. Это точно не круто."

# 5b03993c13f64d9782f8258c2e97b5a7
#: ../../topics/cache.txt:1109
msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct downstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""
"К счастью, протокол HTTP предоставляет решение для этой проблемы. Существует "
"ряд HTTP заголовков, которые инструктируют \"даунстрим\" кеши как именно "
"следует различать страницы в зависимости от определённых переменных, также "
"указывая что некоторые страницы кешировать вообще не следует. Мы рассмотрим "
"некоторые из этих заголовков в следующих секциях."

# 3d6f5cfd15a84e35858a68e3779eeb79
#: ../../topics/cache.txt:1117
msgid "Using ``Vary`` headers"
msgstr "Использование заголовков ``Vary``"

# 10b66dd115c64d45b0d9dc7bead0b0a2
#: ../../topics/cache.txt:1119
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a Web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""
"Заголовок ``Vary`` определяет какие именно заголовки запроса кеширующий "
"механизм должен принимать во внимание при построении своего ключа. Например, "
"если содержимое страницы зависит от языковой настройки, то страница говорит "
"\"обрати внимание на язык.\""

# 348aa8c4176f48a38e36d43dff988b14
#: ../../topics/cache.txt:1124
msgid ""
"By default, Django's cache system creates its cache keys using the requested "
"fully-qualified URL -- e.g., ``\"https://www.example.com/stories/2005/?"
"order_by=author\"``. This means every request to that URL will use the same "
"cached version, regardless of user-agent differences such as cookies or "
"language preferences. However, if this page produces different content based "
"on some difference in request headers -- such as a cookie, or a language, or "
"a user-agent -- you'll need to use the ``Vary`` header to tell caching "
"mechanisms that the page output depends on those things."
msgstr ""
"По-умолчанию, кеширующая система Django создаёт свои ключи, используя "
"запрошенный путь и запрос, т.е., ``\"https://www.example.com/stories/2005/?"
"order_by=author\"``. Это означает, что каждый запрос по этому URL-у будет "
"использовать одну закешированную версию, независимо от различия в куках или "
"языковых настройках. Однако, если эта страница создаёт своё содержимое, "
"основываясь на разнице в заголовках запроса, таких как куки или язык или тип "
"браузера, вам следует использовать заголовок ``Vary``, чтобы указать "
"кеширующему механизму, что вывод данной страница зависит от этих параметров."

# 7c87e76915bf48d080a6589927271097
#: ../../topics/cache.txt:1133
msgid ""
"To do this in Django, use the convenient :func:`django.views.decorators.vary."
"vary_on_headers` view decorator, like so::"
msgstr ""
"Чтобы сделать это в Django следует использовать декоратор представления :"
"func:`django.views.decorators.vary.vary_on_headers`, так::"

# f073734815ab42188095e705f199d1dc
#: ../../topics/cache.txt:1142
msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""
"В этом случае кеширующий механизм (такой как промежуточный слой кеширования "
"Django) закеширует отдельную версию этой страницы для каждого уникального "
"типа браузера."

# c75dc1a8ed504fdaba5ac8419ff9de54
#: ../../topics/cache.txt:1145
msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like "
"``response['Vary'] = 'user-agent'``) is that the decorator *adds* to the "
"``Vary`` header (which may already exist), rather than setting it from "
"scratch and potentially overriding anything that was already in there."
msgstr ""
"Преимущество использования декоратора ``vary_on_headers`` по сравнению с "
"ручной установкой заголовка ``Vary`` (с помощью ``response['Vary'] = 'user-"
"agent'``) в том, что декоратор *добавляет* значение к заголовку ``Vary`` "
"(который может уже существовать), а не переопределяет его."

# 31c35d83573a441c9383c6d0e521bda9
#: ../../topics/cache.txt:1151
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr "Вы можете передавать несколько заголовков в ``vary_on_headers()``::"

# 89cad02c5bc54d2a8b7d3a0eddbfde9a
#: ../../topics/cache.txt:1157
msgid ""
"This tells downstream caches to vary on *both*, which means each combination "
"of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""
"Это указывает \"даунстрим\" кешам, что надо обращать внимание на *оба*, т.е. "
"любая комбинация типа браузера и куки будет кешироваться отдельно. Например, "
"запрос от ``Mozilla`` с кукой ``foo=bar`` будет рассматриваться как отличный "
"от запроса от ``Mozilla`` с кукой ``foo=ham``."

# 94ba731b0e47402387733fe4924c9c6e
#: ../../topics/cache.txt:1163
msgid ""
"Because varying on cookie is so common, there's a :func:`django.views."
"decorators.vary.vary_on_cookie` decorator. These two views are equivalent::"
msgstr ""
"Так как зависимость от куки является настолько стандартной, что существует "
"декоратор :func:`django.views.decorators.vary.vary_on_cookie`. Следующие два "
"представления эквивалентны::"

# 839bcfe2ea8842aa96634f7b88a1919a
#: ../../topics/cache.txt:1175
msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-"
"Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""
"Заголовки, которые вы передаёте в ``vary_on_headers`` нечувствительны к "
"регистру, т.е. ``\"User-Agent\"`` аналогичен ``\"user-agent\"``."

# 4c7ff54c10ac43fc9477e6dd0ff707f7
#: ../../topics/cache.txt:1178
msgid ""
"You can also use a helper function, :func:`django.utils.cache."
"patch_vary_headers`, directly. This function sets, or adds to, the ``Vary "
"header``. For example::"
msgstr ""
"Также вы можете использовать вспомогательную функцию :func:`django.utils."
"cache.patch_vary_headers` напрямую. Эта функция устанавливает или добавляет "
"заголовок ``Vary``. Например::"

# 8d4a2d0f7c0d46bd88a43a5b368d2524
#: ../../topics/cache.txt:1190
msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""
"Функция ``patch_vary_headers`` принимает экземпляр :class:`~django.http."
"HttpResponse` в качестве первого аргумента и список/кортеж имён заголовков в "
"качестве второго аргумента."

# ede94fbbc8cf4d6cbcf8aae493879bd3
#: ../../topics/cache.txt:1194
msgid ""
"For more on Vary headers, see the :rfc:`official Vary spec "
"<7231#section-7.1.4>`."
msgstr ""
"Более подробно о заголовках ``Vary`` можно почитать в :rfc:`официальной "
"спецификации <7231#section-7.1.4>`."

# f10272f014324c8aae44786f2c313fd1
#: ../../topics/cache.txt:1198
msgid "Controlling cache: Using other headers"
msgstr "Управление кешированием: Использование других заголовков"

# bbec76a818cb4ee7a03e3f5e71c517f8
#: ../../topics/cache.txt:1200
msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr ""
"Другими проблемами с кешированием являются приватность данных и вопрос от "
"том, где следует выполнять кеширование в каскаде кешей."

# 07240cefc7e042bdbd74a6cccf748233
#: ../../topics/cache.txt:1203
msgid ""
"A user usually faces two kinds of caches: their own browser cache (a private "
"cache) and their provider's cache (a public cache). A public cache is used "
"by multiple users and controlled by someone else. This poses problems with "
"sensitive data--you don't want, say, your bank account number stored in a "
"public cache. So Web applications need a way to tell caches which data is "
"private and which is public."
msgstr ""
"Пользователь обычно сталкивается с двумя видами кешей: кеш его браузера "
"(личный кеш) и кеш его провайдера (публичный кеш). Публичный кеш "
"используется множеством пользователей и кем-то управляется. Это вызывает "
"проблемы с личными данными, скажем, вам не захочется хранить номер своего "
"банковского счёта в публичном кеше. Таким образом, веб приложения нуждаются "
"в способе указать кешам какие данные являются открытыми, а какие закрытыми."

# 06cc2ef82df34d0786460bc1afd3a192
#: ../../topics/cache.txt:1210
msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this "
"in Django, use the :func:`~django.views.decorators.cache.cache_control` view "
"decorator. Example::"
msgstr ""
"Решением является указание того, что страница должна кешироваться в личном "
"кеше. Для этого в Django следует использовать декоратор представления :func:"
"`~django.views.decorators.cache.cache_control`. Например::"

# d4a5ff64f6e8434fac7c48674171db77
#: ../../topics/cache.txt:1220
msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr ""
"Этот декоратор обеспечивает автоматическую отправку соответствующих HTTP "
"заголовков."

# b069d24c0f4d4e1caa9f377640e53124
#: ../../topics/cache.txt:1223
msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually "
"exclusive. The decorator ensures that the \"public\" directive is removed if "
"\"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries. "
"Public entries may be cached on any shared cache. The following code uses :"
"func:`~django.utils.cache.patch_cache_control`, the manual way to modify the "
"cache control header (it is internally called by the :func:`~django.views."
"decorators.cache.cache_control` decorator)::"
msgstr ""
"Следует отметить, что настройки открытости и закрытости взаимоисключающие. "
"Декоратор обеспечивает эту проверку. Примером использования таких настроек "
"будет блог, который содержит закрытые и открытые записи. Открытые записи "
"могут кешироваться везде. Следующий код использует :func:`django.utils.cache."
"patch_cache_control`, ручной способ изменения управляющего заголовка (обычно "
"эта функция вызывается в декораторе :func:`~django.views.decorators.cache."
"cache_control`)::"

#: ../../topics/cache.txt:1246
msgid ""
"You can control downstream caches in other ways as well (see :rfc:`7234` for "
"details on HTTP caching). For example, even if you don't use Django's server-"
"side cache framework, you can still tell clients to cache a view for a "
"certain amount of time with the :rfc:`max-age <7234#section-5.2.2.8>` "
"directive::"
msgstr ""
"Вы также можете уравлять \"даунстрим\" кешами (см. :Rfc:`7234` для получения "
"подробной информации об HTTP-кешировании). Например, даже если вы не "
"используете фреймворк кеширования на стороне сервера Django, вы все равно "
"можете сказать клиентам кешировать представление в течение определенного "
"времени с помощью директивы :rfc:`max-age <7234 # section-5.2.2.8>`:"

# a637a35aed8c473fa0b78600362a62b9
#: ../../topics/cache.txt:1258
msgid ""
"(If you *do* use the caching middleware, it already sets the ``max-age`` "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. In that "
"case, the custom ``max_age`` from the :func:`~django.views.decorators.cache."
"cache_control` decorator will take precedence, and the header values will be "
"merged correctly.)"
msgstr ""
"(Следует отметить, что кеширующий промежуточный слой уже устанавливает "
"заголовок ``max-age`` равным значению параметра конфигурации :setting:"
"`CACHE_MIDDLEWARE_SECONDS`. Если вы используете определённый ``max-age`` в "
"декораторе ``cache_control``, декоратор применит его, правильно объединив "
"значения заголовка.)"

# 20ff20874ffa4c8fa01479aa72781c60
#: ../../topics/cache.txt:1264
msgid ""
"Any valid ``Cache-Control`` response directive is valid in "
"``cache_control()``. Here are some more examples:"
msgstr ""
"Любая верная HTTP директива ``Cache-Control`` верна в ``cache_control()``. "
"Приведём список примеров:"

# 66dbb1eac677445b9cbb85951e2050a9
#: ../../topics/cache.txt:1267
msgid "``no_transform=True``"
msgstr "``no_transform=True``"

# a126d3b885e148bfa6206dcd09514dbc
#: ../../topics/cache.txt:1268
msgid "``must_revalidate=True``"
msgstr "``must_revalidate=True``"

# 4cafe7169b2b42bb850f96bfab37e140
#: ../../topics/cache.txt:1269
msgid "``stale_while_revalidate=num_seconds``"
msgstr "``stale_while_revalidate=num_seconds``"

#: ../../topics/cache.txt:1271
msgid ""
"The full list of known directives can be found in the `IANA registry`_ (note "
"that not all of them apply to responses)."
msgstr ""
"Полный список директив вы можете найти в `IANA registry`_ (обратите "
"внимание, что не все они относятся к ответам)."

# 3b105497127c4bc6948e7b25884dffaa
#: ../../topics/cache.txt:1276
msgid ""
"If you want to use headers to disable caching altogether, :func:`~django."
"views.decorators.cache.never_cache` is a view decorator that adds headers to "
"ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""
"Если потребуется использовать заголовки, которые полностью отключают "
"кеширование, то воспользуйтесь декоратором :func:`django.views.decorators."
"cache.never_cache`. Этот декоратор добавляет заголовки, гарантирующие что "
"ответ не будет закеширован. Например::"

# 1467320a2d9f4a4e9860767b9778b146
#: ../../topics/cache.txt:1288
msgid "Order of ``MIDDLEWARE``"
msgstr "Порядок записей в ``MIDDLEWARE``"

# b0806ea5ee6a4ec8a7ab469067fdc1f4
#: ../../topics/cache.txt:1290
msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE` setting. That's because the cache "
"middleware needs to know which headers by which to vary the cache storage. "
"Middleware always adds something to the ``Vary`` response header when it can."
msgstr ""
"Если вы используете кеширующий промежуточный слой, важно правильно его "
"разместить в параметре конфигурации :setting:`MIDDLEWARE`. Так происходит из-"
"за того, что кешируючий промежуточный слой должен знать какие заголовки как "
"влияют на кеширующие системы. Промежуточный слой всегда добавляет что-то в "
"заголовок ``Vary``, когда может."

# 76b328f3800e4bd291788b9d6840f551
#: ../../topics/cache.txt:1295
msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""
"``UpdateCacheMiddleware`` работает во время выдачи отклика, там где "
"промежуточные слои применяются в обратном порядке, т.е. элемент наверху "
"списка выполняется *последним*. Таким образом, надо удостовериться, что "
"``UpdateCacheMiddleware`` указан *до* любых мидлварей, которые могут "
"добавить что-то в заголовок ``Vary``. Следующие модули как раз такие:"

# 273ca439d3c448dc9d0c7dc1a7b47337
#: ../../topics/cache.txt:1301
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr "``SessionMiddleware`` добавляет ``Cookie``"

# a3af5ef3ad2b48889952f4434c6352ab
#: ../../topics/cache.txt:1302
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr "``GZipMiddleware`` добавляет ``Accept-Encoding``"

# 7bc81dbc436847c5ba739540c8a96bc8
#: ../../topics/cache.txt:1303
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr "``LocaleMiddleware`` добавляет ``Accept-Language``"

# 01f70c262ee34121855751d89cc5bdb3
#: ../../topics/cache.txt:1305
msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* "
"any item that does so."
msgstr ""
"``FetchFromCacheMiddleware``, с другой стороны, выполняется во время "
"запроса, когда промежуточные слои применяются от начала списка, т.е. элемент "
"наверху списка выполняется *первым*. ``FetchFromCacheMiddleware`` также "
"должен выполняться после других слоев, которые изменяют заголовок ``Vary``."

#~ msgid ""
#~ "The :setting:`LOCATION <CACHES-LOCATION>` setting now supports defining "
#~ "multiple servers as a comma-delimited string."
#~ msgstr ""
#~ "Теперь настройка :setting:`LOCATION <CACHES-LOCATION>` поддерживает "
#~ "перечисление серверов в строке с запятыми-разделителями."

#~ msgid "Memcached backends can now be configured using ``OPTIONS``."
#~ msgstr "Бекенд Memcached нужно настраивать используя ``OPTIONS``."

#~ msgid ""
#~ "In older versions, you could pass ``pylibmc`` behavior settings directly "
#~ "inside ``OPTIONS``. This is deprecated in favor of setting them under a "
#~ "``behaviors`` key within ``OPTIONS`` instead."
#~ msgstr ""
#~ "В старых версиях вы должны были указывать настройки поведения ``pylibmc`` "
#~ "непосредственно в ``OPTIONS``. Теперь этот способ является устаревшим, и "
#~ "настройки поведения следует передавать в ключе ``behaviors`` внутри "
#~ "``OPTIONS``."

#~ msgid "In older versions, the ``Last-Modified`` header was also set."
#~ msgstr "В старых версиях также устанавливался заголовок ``Last-Modified``."

# 8e29c0aa2872497386ac37673ca9aecc
#~ msgid ""
#~ "It's perfectly fine to specify more than one argument to identify the "
#~ "fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
#~ msgstr ""
#~ "Чем больше аргументов вы используете для идентификации фрагмента, тем "
#~ "лучше. Просто указывайте для ``{% cache %}`` столько аргументов, сколько "
#~ "считаете нужным."

# 20e9f738f144400eb797d81596e0634a
#~ msgid ""
#~ "Invalid arguments are silently ignored, as are invalid values of known "
#~ "arguments."
#~ msgstr ""
#~ "Неправильные аргументы игнорируются без ошибок, ка к и неправильные "
#~ "значения поддерживаемых аргументов."

# 1245b45080d8466ebb8a2ff2eecfdeb5
#~ msgid ""
#~ "Sets the ``Last-Modified`` header to the current date/time when a fresh "
#~ "(not cached) version of the page is requested."
#~ msgstr ""
#~ "Устанавливает заголовок ``Last-Modified`` с текущими датой и временем при "
#~ "запросе свежей (незакэшированной) версии страницы."

# 69a4d8ef11d943aa899edf9d020011bc
#~ msgid ""
#~ "There are a few other ways to control cache parameters. For example, HTTP "
#~ "allows applications to do the following:"
#~ msgstr ""
#~ "Существует несколько других способов управления параметрами кэширования. "
#~ "Например, протокол HTTP позволяет приложениям делать следующее:"

# 4b07691de08e451caeaba47080c112a7
#~ msgid "Define the maximum time a page should be cached."
#~ msgstr "Определить максимальное время хранения страницы в кэше."

# 1948fc6622cd49699481af05cc1393fa
#~ msgid ""
#~ "Specify whether a cache should always check for newer versions, only "
#~ "delivering the cached content when there are no changes. (Some caches "
#~ "might deliver cached content even if the server page changed, simply "
#~ "because the cache copy isn't yet expired.)"
#~ msgstr ""
#~ "Указать, должен ли кэш всегда проверять наличие новых версий, возвращая "
#~ "закэшированное содержимое только если не было никаких изменений. "
#~ "(Некоторые кэши могут отдавать закэшированное содержимое даже если "
#~ "изменения страницы обнаружены, просто потому что ещё не вышло время жизни "
#~ "закэшированной записи.)"

# 5b06c6ff4fb64d28bfd9145203c1a82f
#~ msgid ""
#~ "In Django, use the ``cache_control`` view decorator to specify these "
#~ "cache parameters. In this example, ``cache_control`` tells caches to "
#~ "revalidate the cache on every access and to store cached versions for, at "
#~ "most, 3,600 seconds::"
#~ msgstr ""
#~ "В Django используйте декоратор ``cache_control`` для определения этих "
#~ "параметров кэширования. В этом примере ``cache_control`` указывает, что "
#~ "надо проверять источник при каждом запросе и хранить данные не более 3600 "
#~ "секунд::"

# 559e8c501dfb48b18a471173705ce673
#~ msgid "``public=True``"
#~ msgstr "``public=True``"

# 917147fe7531414daa46ccd29b4f43b2
#~ msgid "``private=True``"
#~ msgstr "``private=True``"

# b2ba489ff66d4c46a98886feb8628e0c
#~ msgid "``no_cache=True``"
#~ msgstr "``no_cache=True``"

# 0037ebf2b1394d3199dbe50cea4391dc
#~ msgid "``proxy_revalidate=True``"
#~ msgstr "``proxy_revalidate=True``"

# e5087513511b46459ce62c17e6b7a8ce
#~ msgid "``max_age=num_seconds``"
#~ msgstr "``max_age=num_seconds``"

# 37628c26987e4cb7bb5a18ff7e6763ef
#~ msgid ""
#~ "For explanation of Cache-Control HTTP directives, see the `Cache-Control "
#~ "spec`_."
#~ msgstr ""
#~ "Больше об этих директивах можно узнать в `спецификации на Cache-Control "
#~ "<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>`_."

# b66aa963ad2044c7a45ff0df6f8ba042
#~ msgid ""
#~ "Before Django 1.7, :djadmin:`createcachetable` created one table at a "
#~ "time. You had to pass the name of the table you wanted to create, and if "
#~ "you were using multiple databases, you had to use the :djadminopt:`--"
#~ "database` option. For backwards compatibility, this is still possible."
#~ msgstr ""
#~ "До Django 1.7, команда :djadmin:`createcachetable` создавала одну таблицу "
#~ "за раз. Вам требовалось указывать имя таблицы, которую требовалось "
#~ "создать, и в случае конфигурации с множеством баз данных, вам требовалось "
#~ "использовать опцию:djadminopt:`--database`. Для обратной совместимости, "
#~ "эта возможность оставлена."

# ed29ac2f02a74e0da10a5ffecbe2e1e0
#~ msgid ""
#~ ":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to "
#~ "use for the cache. This argument defaults to ``300`` seconds (5 minutes)."
#~ msgstr ""
#~ ":setting:`TIMEOUT <CACHES-TIMEOUT>`: стандартный период, в секундах, "
#~ "хранения закэшированных данных. Обычно, ``300`` секунд (5 минут)."

# ad8ef41b56ae494ebd543cd8c0145392
#~ msgid ""
#~ "This function has been deprecated in favor of :data:`~django.core.cache."
#~ "caches`."
#~ msgstr ""
#~ "Эта функция устарела, используйте :data:`~django.core.cache.caches`."

# d8c20dc15c914d6692135fbbfee24ebf
#~ msgid ""
#~ "Before Django 1.7 this function was the canonical way to obtain a cache "
#~ "instance. It could also be used to create a new cache instance with a "
#~ "different configuration."
#~ msgstr ""
#~ "До Django 1.7 эта функция была каноническим способом получения экземпляра "
#~ "кэша. Он также могла использоваться для создания новых экземпляров кэша с "
#~ "различными конфигурациями."

# 2a5fd037fb0b4fee83586c30f1613f25
#~ msgid ""
#~ "Cache keys use the request's fully-qualified URL rather than just the "
#~ "path and query string."
#~ msgstr ""
#~ "Ключи кэша используют полный URL из запроса, вместо простого "
#~ "использования пути и строки запроса."

# e6b19c871827422cba7d681148286ddf
#~ msgid ""
#~ "The two settings can also be combined. If you specify a ``cache`` *and* a "
#~ "``key_prefix``, you will get all the settings of the requested cache "
#~ "alias, but with the key_prefix overridden."
#~ msgstr ""
#~ "Можно комбинировать настройки для обоих аргументов. Если вы указали "
#~ "аргументы ``cache`` *и* ``key_prefix``, вы получите все настройки "
#~ "запрошенного кэша, но key_prefix будет переопределён."

# fe5be516a15c4e71b42e3f0167812441
#~ msgid ""
#~ "Previously, passing ``None`` explicitly would use the default timeout "
#~ "value."
#~ msgstr ""
#~ "Ранее, передача ``None`` явно указывала на использование значения "
#~ "задержки по-умолчанию."

# 144f23af0d5148ae9b1ab9fd8de32758
#~ msgid ""
#~ "Once you've created that database table, set your :setting:`BACKEND "
#~ "<CACHES-BACKEND>` setting to ``\"django.core.cache.backends.db."
#~ "DatabaseCache\"``, and :setting:`LOCATION <CACHES-LOCATION>` to "
#~ "``tablename`` -- the name of the database table. In this example, the "
#~ "cache table's name is ``my_cache_table``::"
#~ msgstr ""
#~ "После создания таблицы надо назначить параметру конфигурации :setting:"
#~ "`BACKEND <CACHES-BACKEND>` значение ``\"django.core.cache.backends.db."
#~ "DatabaseCache\"``, а параметру :setting:`LOCATION <CACHES-LOCATION>` "
#~ "значение ``tablename`` -- имя созданной таблицы. В данном примере имя "
#~ "таблицы для кэша будет ``my_cache_table``::"

# 5101deee3e49467e8dea4c139b9c276f
#~ msgid ""
#~ "The database caching backend uses the same database as specified in your "
#~ "settings file. You can't use a different database backend for your cache "
#~ "table."
#~ msgstr ""
#~ "Модуль кэширования в базе данных использует ту же базу, что и ваш проект. "
#~ "Вы не можете использовать отдельную базу данных для модуля кэширования."

# 5358ed1ca73748a7bc20bac76d46137b
#~ msgid "Database caching and multiple databases"
#~ msgstr "Кэширование в базу данных и несколько баз данных"

# 5126b27fab4f46e683bba162b4864d03
#~ msgid ""
#~ "Each cache value will be stored as a separate file whose contents are the "
#~ "cache data saved in a serialized (\"pickled\") format, using Python's "
#~ "``pickle`` module. Each file's name is the cache key, escaped for safe "
#~ "filesystem use."
#~ msgstr ""
#~ "Каждый элемент кэша будет размещён в отдельном файле, содержащем "
#~ "закэшированный контент в сериализованном (\"pickled\") виде, см. модуль "
#~ "``pickle`` Python. Имя каждого файла является ключом кэша, приведённое к "
#~ "виду пригодному для использованию на файловой системе."

# 5fd4daa2f11240808d7cb56e7c5b99c1
#~ msgid ""
#~ "The cache module, ``django.core.cache``, has a ``cache`` object that's "
#~ "automatically created from the ``'default'`` entry in the :setting:"
#~ "`CACHES` setting::"
#~ msgstr ""
#~ "Модуль кэширования, ``django.core.cache``, содержит объект ``cache``, "
#~ "который автоматически создаётся из записи ``'default'`` параметра "
#~ "конфигурации :setting:`CACHES`::"

# f65d4623f88645bab1ee67ac92d077b6
#~ msgid ""
#~ "If you have multiple caches defined in :setting:`CACHES`, then you can "
#~ "use :func:`django.core.cache.get_cache` to retrieve a cache object for "
#~ "any key::"
#~ msgstr ""
#~ "Если вы определили несколько кэшей в параметре конфигурации :setting:"
#~ "`CACHES`, то вы можете использовать функцию :func:`django.core.cache."
#~ "get_cache` для доступа к объекту кэша::"

# 09f1408c473249f485352b4e582ba9ac
#~ msgid "Other optimizations"
#~ msgstr "Другие оптимизации"

# f8138fb936ed4dfabbe94af8d875474d
#~ msgid ""
#~ "Django comes with a few other pieces of middleware that can help optimize "
#~ "your site's performance:"
#~ msgstr ""
#~ "Django поставляется несколькими мидлварями, которые могут помочь в "
#~ "оптимизации производительности вашего сайта:"

# 324fa41b3c1640d0983e6b0007fbda10
#~ msgid ""
#~ "``django.middleware.http.ConditionalGetMiddleware`` adds support for "
#~ "modern browsers to conditionally GET responses based on the ``ETag`` and "
#~ "``Last-Modified`` headers."
#~ msgstr ""
#~ "``django.middleware.http.ConditionalGetMiddleware`` позволяет правильно "
#~ "обрабатывать заголовки ``ETag`` и ``Last-Modified``."

# 674247dd03204af1aa6887854c53e110
#~ msgid ""
#~ ":class:`django.middleware.gzip.GZipMiddleware` compresses responses for "
#~ "all modern browsers, saving bandwidth and transfer time. Be warned, "
#~ "however, that compression techniques like ``GZipMiddleware`` are subject "
#~ "to attacks. See the warning in :class:`~django.middleware.gzip."
#~ "GZipMiddleware` for details."
#~ msgstr ""
#~ ":class:`django.middleware.gzip.GZipMiddleware` сжимает ответы для всех "
#~ "современных браузеров, уменьшая время загрузки и количество передаваемых "
#~ "данных. Будьте внимательны, при определенных условиях ``GZipMiddleware`` "
#~ "уязвим к атакам. Смотрите описание :class:`~django.middleware.gzip."
#~ "GZipMiddleware`."

# 472f4ad4a96d448a9bafac2887ac5a7d
#~ msgid ""
#~ "Cache backends backed by a third-party library will pass their options "
#~ "directly to the underlying cache library. As a result, the list of valid "
#~ "options depends on the library in use."
#~ msgstr ""
#~ "Модули кэша, зависящие от сторонних библиотек, передают свои опции "
#~ "напрямую в эти библиотеки. В результате, список допустимых параметров "
#~ "зависит от используемой библиотеки."

# 00f4e0cfe59a4e16baf72d4823bbd399
#~ msgid ""
#~ ":class:`django.middleware.gzip.GZipMiddleware` compresses responses for "
#~ "all modern browsers, saving bandwidth and transfer time."
#~ msgstr ""
#~ ":class:`django.middleware.gzip.GZipMiddleware` сжимает отклики для всех "
#~ "современных браузеров, снижая нагрузку на сеть и время передачи."
