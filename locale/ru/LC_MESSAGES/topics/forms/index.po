# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-17 17:48+0300\n"
"PO-Revision-Date: 2017-11-30 11:55+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 3548e5028bb843b7b7b156dff3a4d711
#: ../../topics/forms/index.txt:3
msgid "Working with forms"
msgstr "Работа с формами"

# 7e38273422c2456f81fb677faf927013
#: ../../topics/forms/index.txt:7
msgid "About this document"
msgstr "О разделе"

# 642e485c7c374cdfb5651af3bf32a331
#: ../../topics/forms/index.txt:9
msgid ""
"This document provides an introduction to the basics of web forms and how "
"they are handled in Django. For a more detailed look at specific areas of "
"the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and :doc:"
"`/ref/forms/validation`."
msgstr ""
"Этот документ знакомит со способами работы с формами. Для более детальной "
"информации по API форм обращайтесь к :doc:`/ref/forms/api`, :doc:`/ref/forms/"
"fields` и :doc:`/ref/forms/validation`."

# 3237b9f68c304c1099d229659ec6b3b2
#: ../../topics/forms/index.txt:14
msgid ""
"Unless you're planning to build websites and applications that do nothing "
"but publish content, and don't accept input from your visitors, you're going "
"to need to understand and use forms."
msgstr ""
"Если вы планируете создавать сайты и приложения, который принимают и "
"сохраняют данные от пользователей, вам необходимо использовать формы."

# 4beacd35738748f69ac60cb0407d3e7e
#: ../../topics/forms/index.txt:18
msgid ""
"Django provides a range of tools and libraries to help you build forms to "
"accept input from site visitors, and then process and respond to the input."
msgstr "Django предоставляет широкий набор инструментов для этого."

# 04fb8d3185e84f748625604422bb9c0f
#: ../../topics/forms/index.txt:22
msgid "HTML forms"
msgstr "HTML формы"

# b94311adb21b4ba5bce053df91a921b2
#: ../../topics/forms/index.txt:24
msgid ""
"In HTML, a form is a collection of elements inside ``<form>...</form>`` that "
"allow a visitor to do things like enter text, select options, manipulate "
"objects or controls, and so on, and then send that information back to the "
"server."
msgstr ""
"Форма в HTML -- это набор элементов в ``<form>...</form>``, которые "
"позволяют пользователю вводить текст, выбирать опции, изменять объекты и "
"конторолы страницы, и так далее, а потом отправлять эту информацию на сервер."

# 30869c7616e9427487e1a51d85bdd813
#: ../../topics/forms/index.txt:29
msgid ""
"Some of these form interface elements - text input or checkboxes - are "
"fairly simple and are built into HTML itself. Others are much more complex; "
"an interface that pops up a date picker or allows you to move a slider or "
"manipulate controls will typically use JavaScript and CSS as well as HTML "
"form ``<input>`` elements to achieve these effects."
msgstr ""
"Некоторые элементы формы - текстовые поля ввода и чекбоксы - достаточно "
"простые и встроены в HTML. Некоторые -- довольно сложные, состоят из "
"диалогов выбора даты, слайдеров и других контролов, который обычно "
"используют JavaScript и CSS."

# 402d44d78c1347daaa09015f16904b47
#: ../../topics/forms/index.txt:35
msgid "As well as its ``<input>`` elements, a form must specify two things:"
msgstr "Кроме ``<input>`` элементов форма должна содержать еще две вещи:"

# 69f069f5daf8491fb24f0be1651ec317
#: ../../topics/forms/index.txt:37
msgid ""
"*where*: the URL to which the data corresponding to the user's input should "
"be returned"
msgstr "*куда*: URL, на который будут отправлены данные"

# 83c3fb98e6d04b0b912027e544ec4190
#: ../../topics/forms/index.txt:40
msgid "*how*: the HTTP method the data should be returned by"
msgstr ""
"*как*: HTTP метод, который должна использовать форма для отправки данных"

# 95b95dfe98104d80aa85f9b47d878943
#: ../../topics/forms/index.txt:42
msgid ""
"As an example, the login form for the Django admin contains several "
"``<input>`` elements: one of ``type=\"text\"`` for the username, one of "
"``type=\"password\"`` for the password, and one of ``type=\"submit\"`` for "
"the \"Log in\" button. It also contains some hidden text fields that the "
"user doesn't see, which Django uses to determine what to do next."
msgstr ""
"Например, форма авторизации Django содержит несколько ``<input>`` элементов: "
"один с ``type=\"text\"`` для логина пользователя, один с ``type=\"password"
"\"`` для пароля, и один с ``type=\"submit\"`` для кнопки \"Log in\". Она "
"также содержит несколько скрытых текстовых полей, которые Django использует "
"для определения что делать после авторизации."

# b02af627118f4fbc8386182551bc03b6
#: ../../topics/forms/index.txt:48
msgid ""
"It also tells the browser that the form data should be sent to the URL "
"specified in the ``<form>``’s ``action`` attribute - ``/admin/`` - and that "
"it should be sent using the HTTP mechanism specified by the ``method`` "
"attribute - ``post``."
msgstr ""
"Форма также говорит браузеру, что данные должны оправляться на URL, "
"указанный в атрибуте ``action`` тега ``<form>`` - ``/admin/`` - и для "
"отправки необходимо использовать HTTP метод, указанный атрибуте ``method`` - "
"``post``."

# 0492b3af633d4202b28744dcf2605457
#: ../../topics/forms/index.txt:53
msgid ""
"When the ``<input type=\"submit\" value=\"Log in\">`` element is triggered, "
"the data is returned to ``/admin/``."
msgstr ""
"При нажатии на элемент ``<input type=\"submit\" value=\"Log in\">`` данные "
"будут отправлены на ``/admin/``."

# fad9595e61f74471978059b0fcb76105
#: ../../topics/forms/index.txt:57
msgid "``GET`` and ``POST``"
msgstr "``GET`` или ``POST``"

# 4a857df04ca743038538a0840bb822d4
#: ../../topics/forms/index.txt:59
msgid ""
"``GET`` and ``POST`` are the only HTTP methods to use when dealing with "
"forms."
msgstr ""
"``GET`` и ``POST`` -- единственные HTTP методы, которые используются для "
"форм."

# 62d4f4e81a5e4a38a0e0dbbceb07df10
#: ../../topics/forms/index.txt:61
msgid ""
"Django's login form is returned using the ``POST`` method, in which the "
"browser bundles up the form data, encodes it for transmission, sends it to "
"the server, and then receives back its response."
msgstr ""
"Форма авторизации в Django использует ``POST`` метод. При отправке формы "
"браузер собирает все данные формы, кодирует для отправки, отправляет на "
"сервер и получает ответ."

# 850df24608ed437a808cf681030cc64d
#: ../../topics/forms/index.txt:65
msgid ""
"``GET``, by contrast, bundles the submitted data into a string, and uses "
"this to compose a URL. The URL contains the address where the data must be "
"sent, as well as the data keys and values. You can see this in action if you "
"do a search in the Django documentation, which will produce a URL of the "
"form ``https://docs.djangoproject.com/search/?q=forms&release=1``."
msgstr ""
"При ``GET``, в отличии от ``POST``, данные собираются в строку и передаются "
"в URL. URL содержит адрес, куда отправлять данные, и данные для отправки. "
"Пример работы можно посмотреть на странице поиска по документации Django. "
"При оправке формы поиска, вы будете перенаправлены на URL ``https://docs."
"djangoproject.com/search/?q=forms&release=1``."

# 237321139f5b4c51816fffd62e2939ad
#: ../../topics/forms/index.txt:71
msgid "``GET`` and ``POST`` are typically used for different purposes."
msgstr "``GET`` и ``POST`` обычно используются для разных действий."

# 19968e980156498eb77381cc7f769399
#: ../../topics/forms/index.txt:73
msgid ""
"Any request that could be used to change the state of the system - for "
"example, a request that makes changes in the database - should use ``POST``. "
"``GET`` should be used only for requests that do not affect the state of the "
"system."
msgstr ""
"Любой запрос, который может изменить состояние системы - например, который "
"изменяет данные в базе данных - должен использовать ``POST``. ``GET`` должен "
"использоваться для запросов, которые не влияют на состояние системы."

# a4bd777610994ddaa8c2cfe1a5141669
#: ../../topics/forms/index.txt:77
msgid ""
"``GET`` would also be unsuitable for a password form, because the password "
"would appear in the URL, and thus, also in browser history and server logs, "
"all in plain text. Neither would it be suitable for large quantities of "
"data, or for binary data, such as an image. A Web application that uses "
"``GET`` requests for admin forms is a security risk: it can be easy for an "
"attacker to mimic a form's request to gain access to sensitive parts of the "
"system. ``POST``, coupled with other protections like Django's :doc:`CSRF "
"protection </ref/csrf/>` offers more control over access."
msgstr ""
"Не следует использовать ``GET`` запросы для формы с паролем, т.к. пароль "
"появится в URL, а следовательно в истории браузера и журналах сервера. Также "
"он не подходит для отправки большого количества данных или бинарных данных, "
"например, изображения. Web-приложение, которое использует ``GET`` запросы в "
"админке, подвержено атакам: не сложно подделать форму для запроса на сервер "
"и получить важные данные о системе. Применение ``POST`` запросов, "
"объединённых с другими видами защиты подобных :doc:`CSRF </ref/csrf/>`, "
"предоставляет больше контроля за доступом к данным."

# 96f1e46fe1d54f9ba665cdc1f3a40feb
#: ../../topics/forms/index.txt:86
msgid ""
"On the other hand, ``GET`` is suitable for things like a web search form, "
"because the URLs that represent a ``GET`` request can easily be bookmarked, "
"shared, or resubmitted."
msgstr ""
"``GET`` удобен для таких вещей, как форма поиска, т.к. URL, который "
"представляет ``GET`` запрос, можно легко сохранить в избранное или отправить "
"по почте."

# f6517f956ec34e2aa5a8722711a69a8f
#: ../../topics/forms/index.txt:91
msgid "Django's role in forms"
msgstr "Роль Django в формах"

# df311049b0974a74acffe86d4729ccb0
#: ../../topics/forms/index.txt:93
msgid ""
"Handling forms is a complex business. Consider Django's admin, where "
"numerous items of data of several different types may need to be prepared "
"for display in a form, rendered as HTML, edited using a convenient "
"interface, returned to the server, validated and cleaned up, and then saved "
"or passed on for further processing."
msgstr ""
"Работа с формами -- довольно непростая задача. Возьмем админку Django. "
"Необходимо подготовить для отображения в форме большое количество данных "
"разного типа, отобразить форму в HTML, создать удобный интерфейс для "
"редактирования, получить данные на сервере, проверить и преобразовать в "
"нужный формат, и в конце сохранить или передать для дальнейшей обработки."

# f399c7f7595c49839d73a7f6a8357329
#: ../../topics/forms/index.txt:99
msgid ""
"Django's form functionality can simplify and automate vast portions of this "
"work, and can also do it more securely than most programmers would be able "
"to do in code they wrote themselves."
msgstr ""
"Формы Django могут упростить и автоматизировать большую часть этого "
"процесса, и могут сделать это проще и надежнее, чем код, написанный "
"большинством программистов."

# 931dd9496d1c42b2b4bd0c00f69450dc
#: ../../topics/forms/index.txt:103
msgid "Django handles three distinct parts of the work involved in forms:"
msgstr "Django позволяет:"

# ae667d63e56e4ecdbf1d2f26df02b6a8
#: ../../topics/forms/index.txt:105
msgid "preparing and restructuring data to make it ready for rendering"
msgstr "подготовить данные для отображения в форме"

# 97c23017598049ed87b4612c6cd3b2e1
#: ../../topics/forms/index.txt:106
msgid "creating HTML forms for the data"
msgstr "создать HTML формы для данных"

# 5030482ba3d74caf87b59fb932b67c6a
#: ../../topics/forms/index.txt:107
msgid "receiving and processing submitted forms and data from the client"
msgstr "получить и обработать отправленные формой данные"

# fadb775b8f7544de92f4919b6abab402
#: ../../topics/forms/index.txt:109
msgid ""
"It is *possible* to write code that does all of this manually, but Django "
"can take care of it all for you."
msgstr ""
"Вы *можете* написать код, который все это будет делать, но Django может "
"выполнить большую часть самостоятельно."

# 1e8c4ef364db42639d0964de23be7f37
#: ../../topics/forms/index.txt:113
msgid "Forms in Django"
msgstr "Формы в Django"

# a6bca728cd124ce2b3f5d84eceac34bf
#: ../../topics/forms/index.txt:115
msgid ""
"We've described HTML forms briefly, but an HTML ``<form>`` is just one part "
"of the machinery required."
msgstr ""
"Мы уже описали HTML формы, но HTML ``<form>`` только часть необходимого "
"механизма."

# 3776c405ab764664adbcd68607d90fb0
#: ../../topics/forms/index.txt:118
msgid ""
"In the context of a Web application, 'form' might refer to that HTML "
"``<form>``, or to the Django :class:`Form` that produces it, or to the "
"structured data returned when it is submitted, or to the end-to-end working "
"collection of these parts."
msgstr ""
"В контексте Web приложения 'form' может означать HTML ``<form>``, или класс "
"Django :class:`Form`, который создает HTML формы, или данне, которые "
"передаются при отправке формы, или ко всему механизму вместе."

# cfc2fb3540844723aa06c19999d05716
#: ../../topics/forms/index.txt:124
msgid "The Django :class:`Form` class"
msgstr "Класс Django :class:`Form`"

# aeafbb144f5549e18fd2d9445ef6b991
#: ../../topics/forms/index.txt:126
msgid ""
"At the heart of this system of components is Django's :class:`Form` class. "
"In much the same way that a Django model describes the logical structure of "
"an object, its behavior, and the way its parts are represented to us, a :"
"class:`Form` class describes a form and determines how it works and appears."
msgstr ""
"Сердце всего механизма -- класс :class:`Form`. Как и модель в Django, "
"которая описывает структуру объекта, его поведение и представление, :class:"
"`Form` описывает форму, как она работает и показывается пользователю."

# 6dc5be1347094ba88f45398a07dd1996
#: ../../topics/forms/index.txt:131
msgid ""
"In a similar way that a model class's fields map to database fields, a form "
"class's fields map to HTML form ``<input>`` elements. (A :class:`ModelForm` "
"maps a model class's fields to HTML form ``<input>`` elements via a :class:"
"`Form`; this is what the Django admin is based upon.)"
msgstr ""
"Как поля модели представляют поля в базе данных, поля формы представляют "
"HTML ``<input>`` элементы. (:class:`ModelForm` отображает поля модели в виде "
"HTML ``<input>`` элементов, используя :class:`Form`. Используется в админке "
"Django.)"

# 4e93ca1fc48d4004b146f8dc48fd1eda
#: ../../topics/forms/index.txt:136
msgid ""
"A form's fields are themselves classes; they manage form data and perform "
"validation when a form is submitted. A :class:`DateField` and a :class:"
"`FileField` handle very different kinds of data and have to do different "
"things with it."
msgstr ""
"Поля формы сами являются классами. Они управляют данными формы и выполняют "
"их проверку при отправке формы. Например, :class:`DateField` и :class:"
"`FileField` работают с разными данными и выполняют разные действия с ними."

# 2b1d7cbc37af4e2f984f7eb1e66ea0ec
#: ../../topics/forms/index.txt:141
msgid ""
"A form field is represented to a user in the browser as an HTML \"widget\" - "
"a piece of user interface machinery. Each field type has an appropriate "
"default :doc:`Widget class </ref/forms/widgets/>`, but these can be "
"overridden as required."
msgstr ""
"Поле формы представлено в браузере HTML \"виджетом\" - компонент интерфейса. "
"Каждый тип поля представлен по умолчанию определенным :doc:`классом Widget </"
"ref/forms/widgets/>`, который можно переопределить при необходимости."

# 7658435064af462fa5ad14c6b8a07729
#: ../../topics/forms/index.txt:147
msgid "Instantiating, processing, and rendering forms"
msgstr "Создание, обработка и рендеринг форм"

# f30ce1853cf54b969f1ba9febb7de265
#: ../../topics/forms/index.txt:149
msgid "When rendering an object in Django, we generally:"
msgstr "При рендеринге объекта в Django мы обычно:"

# 2fed16a1748f49209f37b7b2d48dff88
#: ../../topics/forms/index.txt:151
msgid "get hold of it in the view (fetch it from the database, for example)"
msgstr "получаем его в представлении (например, загружаем из базы данных)"

# 502d3feb04404ab18a365eb6b71a02a8
#: ../../topics/forms/index.txt:152
msgid "pass it to the template context"
msgstr "передаем в контекст шаблона"

# fb03363cb2954dd0af8752079f8aac09
#: ../../topics/forms/index.txt:153
msgid "expand it to HTML markup using template variables"
msgstr "представляем в виде HTML в шаблоне, используя переменные контекста"

# 7cdeca82c4ed4c8b8933f4ea9c9621be
#: ../../topics/forms/index.txt:155
msgid ""
"Rendering a form in a template involves nearly the same work as rendering "
"any other kind of object, but there are some key differences."
msgstr "Рендеринг форм происходит аналогичным образом с некоторыми отличиями."

# dc6f58f279584b9f9b5382b04da47636
#: ../../topics/forms/index.txt:158
msgid ""
"In the case of a model instance that contained no data, it would rarely if "
"ever be useful to do anything with it in a template. On the other hand, it "
"makes perfect sense to render an unpopulated form - that's what we do when "
"we want the user to populate it."
msgstr ""
"В случае с моделями, вряд ли нам может понадобится пустая модель в шаблоне. "
"Для форм же нормально показывать пустую форму для пользователя."

# 15dbbb27cfcf44d3a8bfa3b17e932597
#: ../../topics/forms/index.txt:163
msgid ""
"So when we handle a model instance in a view, we typically retrieve it from "
"the database. When we're dealing with a form we typically instantiate it in "
"the view."
msgstr ""
"Экземпляр модели, который используется в представлении, обычно загружается "
"из базы данных. При работе с формой мы обычно создаем экземпляр формы в "
"представлении."

# d20b3cb7327e41668fd68704decd7d7c
#: ../../topics/forms/index.txt:167
msgid ""
"When we instantiate a form, we can opt to leave it empty or pre-populate it, "
"for example with:"
msgstr ""
"При создании формы мы может оставить её пустой, или добавить начальные "
"данные, например:"

# 615871c57c5e4feca161a9e06418a308
#: ../../topics/forms/index.txt:170
msgid ""
"data from a saved model instance (as in the case of admin forms for editing)"
msgstr "сохраненного ранее объекта модели (для редактирования их в админке)"

# 91c5835fff4d4c5c9802ca4b66f48771
#: ../../topics/forms/index.txt:171
msgid "data that we have collated from other sources"
msgstr "полученные из других источников"

# 99e5f6e444924cc2bcedd49ecd890cdd
#: ../../topics/forms/index.txt:172
msgid "data received from a previous HTML form submission"
msgstr "получение из предыдущей отправки формы"

# 2ffa633adcf449edb54b0e1d2d33dc39
#: ../../topics/forms/index.txt:174
msgid ""
"The last of these cases is the most interesting, because it's what makes it "
"possible for users not just to read a website, but to send information back "
"to it too."
msgstr ""
"Последний случай самый интересный, т.к. позволяет пользователям не только "
"читать сайт, но и отправлять ему информацию."

# d0cabd6e7c3c44ca84c7b6754ab991b9
#: ../../topics/forms/index.txt:179
msgid "Building a form"
msgstr "Создание формы"

# edd1c8539f014ff7bf749d457ec99d3e
#: ../../topics/forms/index.txt:182
msgid "The work that needs to be done"
msgstr "Что необходимо сделать"

# 49f978df19ab42bdac8f07ae68555fff
#: ../../topics/forms/index.txt:184
msgid ""
"Suppose you want to create a simple form on your website, in order to obtain "
"the user's name. You'd need something like this in your template:"
msgstr ""
"Предположим вам необходимо создать простую форму на сайте, которая позволяет "
"пользователю указать имя. Вам необходимо добавить в шаблон следующий код:"

# 238e1bafe74440f3a39faec5ac2b27bb
#: ../../topics/forms/index.txt:195
msgid ""
"This tells the browser to return the form data to the URL ``/your-name/``, "
"using the ``POST`` method. It will display a text field, labeled \"Your name:"
"\", and a button marked \"OK\". If the template context contains a "
"``current_name`` variable, that will be used to pre-fill the ``your_name`` "
"field."
msgstr ""
"Этот код указывает браузеру отправить данные на URL ``/your-name/``, "
"используя метод ``POST``. Браузер покажет на странице текстовое поле ввода с "
"меткой \"Your name:\", и кнопку \"OK\". Если в контексте шаблона указать "
"переменную ``current_name``, её значение будет добавлено в текстовое поле "
"``your_name``."

# e7e0ab6ff5544475ad39e13abf10408e
#: ../../topics/forms/index.txt:200
msgid ""
"You'll need a view that renders the template containing the HTML form, and "
"that can supply the ``current_name`` field as appropriate."
msgstr ""
"Вам необходимо создать представление, которое рендерит шаблон с HTML формой "
"и передает в контекст шаблона ``current_name``."

# 85e270a215174f49948c9d6b9e9836c3
#: ../../topics/forms/index.txt:203
msgid ""
"When the form is submitted, the ``POST`` request which is sent to the server "
"will contain the form data."
msgstr "При отправке формы будет отправлен ``POST`` запрос с данными из формы."

# edc0482c0fb54d23a8fa1e60ecb36c00
#: ../../topics/forms/index.txt:206
msgid ""
"Now you'll also need a view corresponding to that ``/your-name/`` URL which "
"will find the appropriate key/value pairs in the request, and then process "
"them."
msgstr ""
"Также необходимо добавить представление, которое обрабатывает запрос на ``/"
"your-name/`` URL."

# dff4c6159b0b40e2ba02d7c96964d8ca
#: ../../topics/forms/index.txt:209
msgid ""
"This is a very simple form. In practice, a form might contain dozens or "
"hundreds of fields, many of which might need to be pre-populated, and we "
"might expect the user to work through the edit-submit cycle several times "
"before concluding the operation."
msgstr ""
"Это очень простая форма. На практике форма может состоять из дюжин или сотен "
"полей, множество из которых необходимо заполнить начальным значением, и мы "
"должны позволить пользователю отправить форму несколько раз прежде чем "
"обработать окончательный результат."

# 4abf7c33eb8b4216abcacf18b5137dde
#: ../../topics/forms/index.txt:214
msgid ""
"We might require some validation to occur in the browser, even before the "
"form is submitted; we might want to use much more complex fields, that allow "
"the user to do things like pick dates from a calendar and so on."
msgstr ""
"Вам может понадобится валидация на стороне браузера, или более сложные "
"конролы, например, позволить пользователю выбрать дату из календаря."

# 8a0412a2c3874160b722f5de957957c3
#: ../../topics/forms/index.txt:218
msgid ""
"At this point it's much easier to get Django to do most of this work for us."
msgstr "На много легче позволить Django сделать эту работу за нас."

# 8bf1919e080246a38fe8dd8bda60e5fa
#: ../../topics/forms/index.txt:221
msgid "Building a form in Django"
msgstr "Создание форм в Django"

# 18030ffe7f2d4070a1f8850b4e6407ad
#: ../../topics/forms/index.txt:224
msgid "The :class:`Form` class"
msgstr "Класс :class:`Form`"

# ca6b222ab3804a67b5be66a931db7840
#: ../../topics/forms/index.txt:226
msgid ""
"We already know what we want our HTML form to look like. Our starting point "
"for it in Django is this:"
msgstr ""
"Мы уже знаем какую форму хотим получить в HTML. Для начала нам понадобится "
"следующий класс формы:"

# 79e5a18b6eb242a4ab891940efebabbf
#: ../../topics/forms/index.txt:237
msgid ""
"This defines a :class:`Form` class with a single field (``your_name``). "
"We've applied a human-friendly label to the field, which will appear in the "
"``<label>`` when it's rendered (although in this case, the :attr:`~Field."
"label` we specified is actually the same one that would be generated "
"automatically if we had omitted it)."
msgstr ""
"Этот код создает класс :class:`Form` с одним полем (``your_name``). Мы "
"добавили читабельное название поля, которое будет добавлено в тег "
"``<label>`` при рендеринге поля (на самом деле мы могли не добавлять :attr:"
"`~Field.label` т.к. аналогичное название Django сгенерировал бы "
"самостоятельно)."

# 13e96dcefdce44bdbe085ad7f969396d
#: ../../topics/forms/index.txt:243
msgid ""
"The field's maximum allowable length is defined by :attr:`~CharField."
"max_length`. This does two things. It puts a ``maxlength=\"100\"`` on the "
"HTML ``<input>`` (so the browser should prevent the user from entering more "
"than that number of characters in the first place). It also means that when "
"Django receives the form back from the browser, it will validate the length "
"of the data."
msgstr ""
"Максимальное количество символом в значении мы указали с помощью параметра :"
"attr:`~CharField.max_length`. Он используется для двух вещей. Будет добавлен "
"атрибут ``maxlength=\"100\"`` в HTML тег ``<input>`` (теперь браузер не "
"позволит пользователю ввести больше символов, чем мы указали). Также Django "
"выполнит проверку введенного значения, когда получит запрос с браузера с "
"введенными данными."

# c6110fa9f5d24524ae7a122ffd5739ad
#: ../../topics/forms/index.txt:250
msgid ""
"A :class:`Form` instance has an :meth:`~Form.is_valid()` method, which runs "
"validation routines for all its fields. When this method is called, if all "
"fields contain valid data, it will:"
msgstr ""
"Экземпляр :class:`Form` содержит метод :meth:`~Form.is_valid()`, который "
"выполняет проверку всех полей формы. Если все данные правильные, это метод:"

# e2163340fc164550b7eefd4d50e04468
#: ../../topics/forms/index.txt:254
msgid "return ``True``"
msgstr "вернет ``True``"

# 91304618d95e4e66b40bc316932ea84d
#: ../../topics/forms/index.txt:255
msgid "place the form's data in its :attr:`~Form.cleaned_data` attribute."
msgstr "добавит данные формы в атрибут :attr:`~Form.cleaned_data`."

# 2c1d3f2bbc044b6780f243fc2a027d42
#: ../../topics/forms/index.txt:257
msgid "The whole form, when rendered for the first time, will look like:"
msgstr "После рендеринга наша форма будет выглядеть следующим образом:"

# 3ab5f31684cb491783207fd549f8d04d
#: ../../topics/forms/index.txt:264
msgid ""
"Note that it **does not** include the ``<form>`` tags, or a submit button. "
"We'll have to provide those ourselves in the template."
msgstr ""
"Обратите внимание, она **не** содержит тег ``<form>``, или кнопку отправки. "
"Вам необходимо самостоятельно их добавить в шаблоне."

# 595d715fa1aa46cc882221fe19cf5f37
#: ../../topics/forms/index.txt:270
msgid "The view"
msgstr "Представление"

# 4b64e29de56b4d29a2b69ca90e62b7bc
#: ../../topics/forms/index.txt:272
msgid ""
"Form data sent back to a Django website is processed by a view, generally "
"the same view which published the form. This allows us to reuse some of the "
"same logic."
msgstr ""
"Данные формы отправляются обратно в Django и обрабатываются представлением, "
"обычно тем же, которое и создает форму. Это позволяет повторно использовать "
"часть кода."

# 013eab01149a41e58f4afaf27cfb7a54
#: ../../topics/forms/index.txt:276
msgid ""
"To handle the form we need to instantiate it in the view for the URL where "
"we want it to be published:"
msgstr ""
"Для обработки данных формой нам необходимо создать ее в представлении для "
"URL, на который браузер отправляет данные формы:"

# 5709a857971642e68d00c93497c415a3
#: ../../topics/forms/index.txt:305
msgid ""
"If we arrive at this view with a ``GET`` request, it will create an empty "
"form instance and place it in the template context to be rendered. This is "
"what we can expect to happen the first time we visit the URL."
msgstr ""
"Если в представление пришел ``GET`` запрос, будет создана пустая форма и "
"добавлена в контекст шаблона для последующего рендеринга. Это мы и ожидаем "
"получить первый раз открыв страницу с формой."

# b0da364d38244425ab3487bc184b6d0f
#: ../../topics/forms/index.txt:309
msgid ""
"If the form is submitted using a ``POST`` request, the view will once again "
"create a form instance and populate it with data from the request: ``form = "
"NameForm(request.POST)`` This is called \"binding data to the form\" (it is "
"now a *bound* form)."
msgstr ""
"Если форма отправлена через ``POST`` запрос, представление создаст форму с "
"данными из запроса: ``form = NameForm(request.POST)`` Это называется "
"\"привязать данные к форме\" (теперь это *связанная с данными* форма)."

# aa2f308e7e62474cb0332e66d87cbece
#: ../../topics/forms/index.txt:314
msgid ""
"We call the form's ``is_valid()`` method; if it's not ``True``, we go back "
"to the template with the form. This time the form is no longer empty "
"(*unbound*) so the HTML form will be populated with the data previously "
"submitted, where it can be edited and corrected as required."
msgstr ""
"Мы вызываем метод ``is_valid()`` формы. Если получили не ``True``, снова "
"рендерим шаблон, передав нашу форму. Теперь форма не пустая (*не связана с "
"данными*) и HTML форма будет содержать ранее отправленные данные, их можно "
"повторно отредактировать и отправить снова."

# 20ec5f116c234668a12bc51b74856493
#: ../../topics/forms/index.txt:319
msgid ""
"If ``is_valid()`` is ``True``, we'll now be able to find all the validated "
"form data in its ``cleaned_data`` attribute. We can use this data to update "
"the database or do other processing before sending an HTTP redirect to the "
"browser telling it where to go next."
msgstr ""
"Если ``is_valid()`` вернет ``True``, мы можем найти проверенные данные в "
"атрибуте ``cleaned_data``. Мы можем сохранить эти данные в базе данных, или "
"выполнить какие-то другие действия над ними, перед тем, как сделать редирект "
"на другую страницу."

# 49d3cd64293a4b698a77f6f57c70142d
#: ../../topics/forms/index.txt:327
msgid "The template"
msgstr "Шаблон"

# 9a320a776142402eabf611e4dfc5d9c1
#: ../../topics/forms/index.txt:329
msgid ""
"We don't need to do much in our ``name.html`` template. The simplest example "
"is:"
msgstr "Наш ``name.html`` шаблон может быть довольно простым:"

# 8f64f49dcf954be7b385c77f8f79a983
#: ../../topics/forms/index.txt:340
msgid ""
"All the form's fields and their attributes will be unpacked into HTML markup "
"from that ``{{ form }}`` by Django's template language."
msgstr ""
"Все поля формы и их атрибуты будут добавлены в HTML из ``{{ form }}`` при "
"рендеринге шаблона."

# 1190622a58a9487581e4b8800203d4e2
#: ../../topics/forms/index.txt:343
msgid "Forms and Cross Site Request Forgery protection"
msgstr "Формы и CSRF защита"

# a845262370ab42f996e12a74af9626b7
#: ../../topics/forms/index.txt:345
msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request "
"Forgeries </ref/csrf>`. When submitting a form via ``POST`` with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr ""
"Django поставляется с :doc:`защитой против Cross Site Request Forgeries </"
"ref/csrf>`. При отправке формы через ``POST`` с включенной защитой от CSRF "
"вы должны использовать шаблонный тег :ttag:`csrf_token`, как показано в "
"предыдущем примере. Тем не менее, раз CSRF-защита не обязательна для "
"применения в шаблонах при оформлении формы, этот тег опущен в последующих "
"примерах."

# a9c9550681c94525a7abbbb13b078db0
#: ../../topics/forms/index.txt:352
msgid "HTML5 input types and browser validation"
msgstr "HTML5 поля и проверка в браузере"

# 87af910406b342a5937ae3b072a083cf
#: ../../topics/forms/index.txt:354
msgid ""
"If your form includes a :class:`~django.forms.URLField`, an :class:`~django."
"forms.EmailField` or any integer field type, Django will use the ``url``, "
"``email`` and ``number`` HTML5 input types. By default, browsers may apply "
"their own validation on these fields, which may be stricter than Django's "
"validation. If you would like to disable this behavior, set the `novalidate` "
"attribute on the ``form`` tag, or specify a different widget on the field, "
"like :class:`TextInput`."
msgstr ""
"Если ваша форма содержит :class:`~django.forms.URLField`, :class:`~django."
"forms.EmailField` или одно из числовых полей, Django будет использовать "
"``url``, ``email`` и ``number`` поля ввода HTML5. По умолчанию браузеры "
"могут выполнять собственную проверку для этих полей, некоторые проверки "
"могут быть более строгие чем в Django. Если вы хотите отключить это, "
"добавьте `novalidate` атрибут в тег ``form``, или используйте другой виджет "
"для этих полей, например :class:`TextInput`."

# 238aa3bbffb547e6a82e5a329e95e756
#: ../../topics/forms/index.txt:362
msgid ""
"We now have a working web form, described by a Django :class:`Form`, "
"processed by a view, and rendered as an HTML ``<form>``."
msgstr ""
"Теперь у нас есть полностью рабочая форма, созданная классом :class:`Form`, "
"обрабатываемая представлением, и представленная на странице как HTML "
"``<form>``."

# 594219161a994e23ae3c3cc6eb3cd9e1
#: ../../topics/forms/index.txt:365
msgid ""
"That's all you need to get started, but the forms framework puts a lot more "
"at your fingertips. Once you understand the basics of the process described "
"above, you should be prepared to understand other features of the forms "
"system and ready to learn a bit more about the underlying machinery."
msgstr ""
"Это все что вам нужно для начала, но формы в Django предоставляют на много "
"больше возможностей. Как только вы разберетесь со всем, что описано выше, "
"можете приступать к изучению всех возможностей, которые предоставляет Django."

# 62f5703d5da64de79572cb4f3ec2a821
#: ../../topics/forms/index.txt:371
msgid "More about Django :class:`Form` classes"
msgstr "Дополнительные возможности Django :class:`Form`"

#: ../../topics/forms/index.txt:373
msgid ""
"All form classes are created as subclasses of either :class:`django.forms."
"Form` or :class:`django.forms.ModelForm`. You can think of ``ModelForm`` as "
"a subclass of ``Form``. ``Form`` and ``ModelForm`` actually inherit common "
"functionality from a (private) ``BaseForm`` class, but this implementation "
"detail is rarely important."
msgstr ""

# fd70074da7e54447af4c0bfc10a96266
#: ../../topics/forms/index.txt:379
msgid "Models and Forms"
msgstr "Модели и формы"

# 78d4ddb7d4de4c90805138b3d565e653
#: ../../topics/forms/index.txt:381
msgid ""
"In fact if your form is going to be used to directly add or edit a Django "
"model, a :doc:`ModelForm </topics/forms/modelforms>` can save you a great "
"deal of time, effort, and code, because it will build a form, along with the "
"appropriate fields and their attributes, from a ``Model`` class."
msgstr ""
"Если ваша форма будет использоваться для создания или редактирования объекта "
"модели, вы можете использовать  :doc:`ModelForm </topics/forms/modelforms>`. "
"Она поможет сэкономить много времени и кода, т.к. позволяет создать форму по "
"классу модели."

# 5ebecb82f8f644789ea764f8dac5ae07
#: ../../topics/forms/index.txt:387
msgid "Bound and unbound form instances"
msgstr "Связанные и не связанные с данными экземпляры формы"

# baf64a6a7a914ef393065f268146e6ed
#: ../../topics/forms/index.txt:389
msgid ""
"The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr "Важно понимать разницу между :ref:`ref-forms-api-bound-unbound`:"

# d93da22ee09b498d9350b0d70e336ceb
#: ../../topics/forms/index.txt:391
msgid ""
"An unbound form has no data associated with it. When rendered to the user, "
"it will be empty or will contain default values."
msgstr ""
"Незаполненная форма не содержит данных, привязанных к её полям. При "
"отображении формы пользователь увидит её пустой или содержащей значения по "
"умолчанию."

# 588878e489a1405e9f411f0c37ab2949
#: ../../topics/forms/index.txt:394
msgid ""
"A bound form has submitted data, and hence can be used to tell if that data "
"is valid. If an invalid bound form is rendered, it can include inline error "
"messages telling the user what data to correct."
msgstr ""
"Заполненная форма содержит переданную информацию и, следовательно, может "
"быть использована для проверки введённых данных. При отображении заполненной "
"формы, не прошедшей проверку, она будет содержать встроенные сообщения об "
"ошибках, которые расскажут пользователю о причинах отказа в принятии его "
"данных."

# 95ab01ee5696490bb7b657476b736e09
#: ../../topics/forms/index.txt:398
msgid ""
"The form's :attr:`~Form.is_bound` attribute will tell you whether a form has "
"data bound to it or not."
msgstr ""
"Атрибут формы :attr:`~Form.is_bound` позволяет узнать связана форма с "
"данными или нет."

# 335994cd5d58459c902695007a2a3273
#: ../../topics/forms/index.txt:402
msgid "More on fields"
msgstr "Поля формы"

# a617e11c4a3b4538a38f0e83f0f41bde
#: ../../topics/forms/index.txt:404
msgid ""
"Consider a more useful form than our minimal example above, which we could "
"use to implement \"contact me\" functionality on a personal website:"
msgstr ""
"Рассмотрим более полезную форму, чем наш минимальный пример выше, которая "
"может быть использована для  реализации функционала \"свяжитесь с нами\" на "
"личном веб сайте:"

# 50eb1e5efc254d9589c5d3e5a09c4de4
#: ../../topics/forms/index.txt:418
msgid ""
"Our earlier form used a single field, ``your_name``, a :class:`CharField`. "
"In this case, our form has four fields: ``subject``, ``message``, ``sender`` "
"and ``cc_myself``. :class:`CharField`, :class:`EmailField` and :class:"
"`BooleanField` are just three of the available field types; a full list can "
"be found in :doc:`/ref/forms/fields`."
msgstr ""
"Наша первая форма содержала только одно поле ``your_name`` типа :class:"
"`CharField`. В этом случае, форма содержит четыре поля: ``subject``, "
"``message``, ``sender`` и ``cc_myself``. :class:`CharField`, :class:"
"`EmailField` и :class:`BooleanField` -- это просто три стандартных типа "
"поля; полный список полей может быть найден в  :doc:`/ref/forms/fields`."

# 31b71629160b49a7bbc221dc9caff045
#: ../../topics/forms/index.txt:425
msgid "Widgets"
msgstr "Виджеты"

# 27a9a7803532409a993ded7706d18d47
#: ../../topics/forms/index.txt:427
msgid ""
"Each form field has a corresponding :doc:`Widget class </ref/forms/widgets/"
">`, which in turn corresponds to an HTML form widget such as ``<input type="
"\"text\">``."
msgstr ""
"Каждое поле формы содержит соответствующий :doc:`класс Widget </ref/forms/"
"widgets/>`, который отвечает за создание HTML кода, представляющего поле, "
"например ``<input type=\"text\">``."

# d0a8f54043c842e68861e0173d8f1952
#: ../../topics/forms/index.txt:431
msgid ""
"In most cases, the field will have a sensible default widget. For example, "
"by default, a :class:`CharField` will have a :class:`TextInput` widget, that "
"produces an ``<input type=\"text\">`` in the HTML. If you needed "
"``<textarea>`` instead, you'd specify the appropriate widget when defining "
"your form field, as we have done for the ``message`` field."
msgstr ""
"В большинстве случаев поле уже содержит подходящий виджет. Например, по "
"умолчанию поле :class:`CharField` представлено виджетом :class:`TextInput`, "
"который создает тег ``<input type=\"text\">`` в HTML. Если вам вместо него "
"необходим ``<textarea>``, вы можете указать подходящий виджет при "
"определении поля формы, как мы сделали для поля ``message``."

# 3916a285b64c4c4caa730542fb158def
#: ../../topics/forms/index.txt:438
msgid "Field data"
msgstr "Данные поля"

# ac8b288fc7b444b291ccfd01f561fa7d
#: ../../topics/forms/index.txt:440
msgid ""
"Whatever the data submitted with a form, once it has been successfully "
"validated by calling ``is_valid()`` (and ``is_valid()`` has returned "
"``True``), the validated form data will be in the ``form.cleaned_data`` "
"dictionary. This data will have been nicely converted into Python types for "
"you."
msgstr ""
"Когда в форму добавлены данные, и она проверена методом ``is_valid()`` (и "
"``is_valid()`` вернул ``True``), проверенные данные будут добавлены в "
"словарь ``form.cleaned_data``. Эти данные будет преобразованы в подходящий "
"тип Python."

# a2dc0584c61642539e7f27830a82bad7
#: ../../topics/forms/index.txt:447
msgid ""
"You can still access the unvalidated data directly from ``request.POST`` at "
"this point, but the validated data is better."
msgstr ""
"Также вы можете напрямую обратиться к непроверенным данным через ``request."
"POST``, но лучше использовать проверенные данные."

# a1922bca4159423cb0c2fc3697773abe
#: ../../topics/forms/index.txt:450
msgid ""
"In the contact form example above, ``cc_myself`` will be a boolean value. "
"Likewise, fields such as :class:`IntegerField` and :class:`FloatField` "
"convert values to a Python ``int`` and ``float`` respectively."
msgstr ""
"В приведённом ранее примере, ``cc_myself`` будет булевым значением. "
"Аналогично, такие поля как :class:`IntegerField` и :class:`FloatField` "
"преобразовывают свои значения в типы Python ``int`` и ``float`` "
"соответственно."

# 5c0cfc5cb35743cf9c3c333096bdcc08
#: ../../topics/forms/index.txt:454
msgid ""
"Here's how the form data could be processed in the view that handles this "
"form:"
msgstr ""
"Вот небольшой пример того, как можно обрабатывать данные в представлении, к "
"которому привязана форма:"

# 36f8d70fd4d44fc297854735310b18e8
#: ../../topics/forms/index.txt:476
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""
"Подробную информацию про отправку электронной почты с помощью Django можно "
"найти в :doc:`/topics/email`."

# fc665daca3464da28cd0cb845255ded0
#: ../../topics/forms/index.txt:478
msgid ""
"Some field types need some extra handling. For example, files that are "
"uploaded using a form need to be handled differently (they can be retrieved "
"from ``request.FILES``, rather than ``request.POST``). For details of how to "
"handle file uploads with your form, see :ref:`binding-uploaded-files`."
msgstr ""
"Некоторые поля требуют дополнительной обработки. Например, загруженные файлы "
"необходимо обрабатывать по другому (их можно получить из ``request.FILES``, "
"а не ``request.POST``). Подробности смотрите в :ref:`binding-uploaded-files`."

# 3548e5028bb843b7b7b156dff3a4d711
#: ../../topics/forms/index.txt:484
msgid "Working with form templates"
msgstr "Работа с шаблонами формы"

# 11e79f21638a486db0df6c3024d48947
#: ../../topics/forms/index.txt:486
msgid ""
"All you need to do to get your form into a template is to place the form "
"instance into the template context. So if your form is called ``form`` in "
"the context, ``{{ form }}`` will render its ``<label>`` and ``<input>`` "
"elements appropriately."
msgstr ""
"Чтобы получить доступ к форме в шаблоне, просто передайте экземпляр в "
"контекст шаблона. Если ваша форма добавлена в контекст как ``form``, "
"``{{ form }}`` создаст необходимые теги ``<label>`` и ``<input>``."

# 996e20cb20204253a7c5f134ce836c85
#: ../../topics/forms/index.txt:492
msgid "Form rendering options"
msgstr "Настройки рендеринга формы"

# 704c5d10ed4e400b95aa672948905fbb
#: ../../topics/forms/index.txt:494
msgid "Additional form template furniture"
msgstr "Что еще необходимо при рендеринге формы"

# b62ed383ee66452cb3861f9a0caf65b5
#: ../../topics/forms/index.txt:496
msgid ""
"Don't forget that a form's output does *not* include the surrounding "
"``<form>`` tags, or the form's ``submit`` control. You will have to provide "
"these yourself."
msgstr ""
"Обратите внимание, форма *не* добавляет тег ``<form>`` и ``submit`` кнопку. "
"Вы должны добавить их самостоятельно."

# 2f2414f013764c2da3fe8d86ba2f27df
#: ../../topics/forms/index.txt:500
msgid ""
"There are other output options though for the ``<label>``/``<input>`` pairs:"
msgstr ""
"Вы можете использовать следующие варианты рендеринга ``<label>``/``<input>``:"

# ac86e2b6d3694e268ea46948efd04188
#: ../../topics/forms/index.txt:502
msgid ""
"``{{ form.as_table }}`` will render them as table cells wrapped in ``<tr>`` "
"tags"
msgstr "``{{ form.as_table }}`` выведет их в таблице, в ячейках тега ``<tr>``"

# eec8920ef87749aeb41ee8cc5de1be3d
#: ../../topics/forms/index.txt:505
msgid "``{{ form.as_p }}`` will render them wrapped in ``<p>`` tags"
msgstr "``{{ form.as_p }}`` обернет их в тег ``<p>``"

# 90271d6f81014cd59baa6a1ff713a751
#: ../../topics/forms/index.txt:507
msgid "``{{ form.as_ul }}`` will render them wrapped in ``<li>`` tags"
msgstr "``{{ form.as_ul }}`` выведет в теге ``<li>``"

# 5a6ea0aa51564946bbc002a3a403ae41
#: ../../topics/forms/index.txt:509
msgid ""
"Note that you'll have to provide the surrounding ``<table>`` or ``<ul>`` "
"elements yourself."
msgstr ""
"Обратите внимание, тег ``<table>`` или ``<ul>`` вы должны добавить сами."

# 5ada8d2566444fb69985839358100f48
#: ../../topics/forms/index.txt:512
msgid ""
"Here's the output of ``{{ form.as_p }}`` for our ``ContactForm`` instance:"
msgstr "Вот результат ``{{ form.as_p }}`` для нашей формы ``ContactForm``:"

# 5d49b8a5614140fbb8ffd629360ca453
#: ../../topics/forms/index.txt:525
msgid ""
"Note that each form field has an ID attribute set to ``id_<field-name>``, "
"which is referenced by the accompanying label tag. This is important in "
"ensuring that forms are accessible to assistive technology such as screen "
"reader software. You can also :ref:`customize the way in which labels and "
"ids are generated <ref-forms-api-configuring-label>`."
msgstr ""
"Следует отметить, что каждое поле формы обладает атрибутом с идентификатором "
"``id_<field-name>``, с помощью которого обеспечивается связь с тегом метки. "
"Это позволяет формам быть дружественными к вспомогательным технологиям, "
"например, это поможет работе ПО для слепых. Также вы можете :ref:`настроить "
"способ генерации меток и идентификаторов <ref-forms-api-configuring-label>`."

# 2d1bdbfc5d0d4153ba1e108ab96ed4dc
#: ../../topics/forms/index.txt:531
msgid "See :ref:`ref-forms-api-outputting-html` for more on this."
msgstr "Смотрите :ref:`ref-forms-api-outputting-html`."

# 2cb86d4066d4484d881d3c0af386a167
#: ../../topics/forms/index.txt:534
msgid "Rendering fields manually"
msgstr "Рендеринг полей вручную"

# 42cb41cf64ac45ee9aad9d69312c7a14
#: ../../topics/forms/index.txt:536
msgid ""
"We don't have to let Django unpack the form's fields; we can do it manually "
"if we like (allowing us to reorder the fields, for example). Each field is "
"available as an attribute of the form using ``{{ form.name_of_field }}``, "
"and in a Django template, will be rendered appropriately. For example:"
msgstr ""
"Мы можем не использовать полный рендеринг формы и отрендерить каждое поле "
"отдельно (например, чтобы поменять порядок полей). Каждое поле формы можно "
"получить через атрибут формы ``{{ form.name_of_field }}``. Например:"

#: ../../topics/forms/index.txt:565
msgid ""
"Complete ``<label>`` elements can also be generated using the :meth:`~django."
"forms.BoundField.label_tag`. For example:"
msgstr ""
"Элемент ``<label>`` также может быть создан с помощью метода :meth:`~django."
"forms.BoundField.label_tag`. Например:"

# 8cff750307b542089cf68fb4871024df
#: ../../topics/forms/index.txt:578
msgid "Rendering form error messages"
msgstr "Рендеринг ошибок проверки"

# 4ce5612af7a84483ba439dd2adf3ef74
#: ../../topics/forms/index.txt:580
msgid ""
"Of course, the price of this flexibility is more work. Until now we haven't "
"had to worry about how to display form errors, because that's taken care of "
"for us. In this example we have had to make sure we take care of any errors "
"for each field and any errors for the form as a whole. Note ``{{ form."
"non_field_errors }}`` at the top of the form and the template lookup for "
"errors on each field."
msgstr ""
"За гибкость мы платим количеством кода. До этого мы не заботились о выводе "
"ошибок проверки, т.к. Django делал это за нас. В этом примере нам пришлось "
"явно выводить ошибки проверки для каждого поля и для всей формы. Обратите "
"внимание на ``{{ form.non_field_errors }}`` в начале в формы и вывод ошибок "
"для каждого поля."

# 4fd086364ead4e0d841d81ef593c1d7f
#: ../../topics/forms/index.txt:586
msgid ""
"Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, "
"rendered as an unordered list. This might look like:"
msgstr ""
"Список ошибок можно вывести используя ``{{ form.name_of_field.errors }}``. "
"Они будут выглядеть приблизительно как:"

# 7aa879ce5ac04fe1a34b35ea4d89e3b0
#: ../../topics/forms/index.txt:595
msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them:"
msgstr ""
"Списку назначен  CSS-класс ``errorlist``, что позволяет вам настроить "
"параметры его отображения. Если потребуется более тонкая настройка "
"отображения ошибок, вы можете это организовать с помощью цикла по ним:"

#: ../../topics/forms/index.txt:609
msgid ""
"Non-field errors (and/or hidden field errors that are rendered at the top of "
"the form when using helpers like ``form.as_p()``) will be rendered with an "
"additional class of ``nonfield`` to help distinguish them from field-"
"specific errors. For example, ``{{ form.non_field_errors }}`` would look "
"like:"
msgstr ""
"Ошибки, не относящиеся к полям, (и/или ошибки скрытых полей, которые "
"отображаются наверху формы при использовании методов подобных ``form."
"as_p()``) будут отображаться с дополнительным классом ``nonfield``, что "
"поможет их отделить от ошибок полей формы. Например, ``{{ form."
"non_field_errors }}`` может выглядеть так:"

# 4899019d654f4b57a28aaec4cd3eed7e
#: ../../topics/forms/index.txt:620
msgid ""
"See :doc:`/ref/forms/api` for more on errors, styling, and working with form "
"attributes in templates."
msgstr ""
"Подробности о выводе ошибок, стилях и атрибутах смотрите в :doc:`/ref/forms/"
"api`."

# 3dad1b00ccaa41c7946d85ae678f6936
#: ../../topics/forms/index.txt:624
msgid "Looping over the form's fields"
msgstr "Цикл по полям формы"

# c657a3e1408849fdb0d02115af17d717
#: ../../topics/forms/index.txt:626
msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop:"
msgstr ""
"Если вы используете однотипный HTML для каждого поля формы, вы можете "
"избежать дублирования кода, используя тег ``{% for %}`` для прохода по полям "
"формы:"

# 7585429f5ed744aab75f44994b2de99f
#: ../../topics/forms/index.txt:642
msgid "Useful attributes on ``{{ field }}`` include:"
msgstr "Полезные атрибуты ``{{ field }}``:"

# 2abbef4263824fc49077c4be053711b3
#: ../../topics/forms/index.txt:645
#, fuzzy
msgid "``{{ field.label }}``"
msgstr "{{ field.label }}"

# 07429c499b33436084dc86e90da0bb95
#: ../../topics/forms/index.txt:645
msgid "The label of the field, e.g. ``Email address``."
msgstr "Метка поля, т.е. ``Email address``."

# 5d0ff96a2d184411a1ec27b22089b495
#: ../../topics/forms/index.txt:652
#, fuzzy
msgid "``{{ field.label_tag }}``"
msgstr "{{ field.label_tag }}"

# d287bf1120974dc7b5266f8dce7b0534
#: ../../topics/forms/index.txt:648
msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag. This "
"includes the form's :attr:`~django.forms.Form.label_suffix`. For example, "
"the default ``label_suffix`` is a colon::"
msgstr ""
"Метка поля, обёрнутая в соответствующий HTML тег ``<label>``. Также включает "
"атрибут формы :attr:`~django.forms.Form.label_suffix`. Например, по "
"умолчания ``label_suffix`` содержит двоеточие::"

# 2abbef4263824fc49077c4be053711b3
#: ../../topics/forms/index.txt:658
#, fuzzy
msgid "``{{ field.id_for_label }}``"
msgstr "{{ field.id_for_label }}"

# f34c186ea97a47fa884a2ac19b8a898f
#: ../../topics/forms/index.txt:655
msgid ""
"The ID that will be used for this field (``id_email`` in the example above). "
"If you are constructing the label manually, you may want to use this in lieu "
"of ``label_tag``. It's also useful, for example, if you have some inline "
"JavaScript and want to avoid hardcoding the field's ID."
msgstr ""
"ID, которое будет использоваться для этого поля (``id_email`` в примере "
"выше). Вы можете использовать его вместо ``label_tag``, если самостоятельно "
"генерируете `<label>` для поля. Так полезно при генерации JavaScript, если "
"вы не хотите \"хардкодить\" ID."

# 49309bed1d6849feaf2e5a0253416aa7
#: ../../topics/forms/index.txt:661
#, fuzzy
msgid "``{{ field.value }}``"
msgstr "{{ field.value }}"

# 5bf862eec06a42c991fc4b7588938125
#: ../../topics/forms/index.txt:661
msgid "The value of the field. e.g ``someone@example.com``."
msgstr "Значение поля, например ``someone@example.com``."

# e14194e35acf4683ae1e775b952c1d52
#: ../../topics/forms/index.txt:665
#, fuzzy
msgid "``{{ field.html_name }}``"
msgstr "{{ field.html_name }}"

# 33d895e5c6c446588dc6bf6aa90449c4
#: ../../topics/forms/index.txt:664
msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr ""
"Имя поля, которое будет использовано в HTML-поле. Здесь учитывается префикс "
"формы, если он был установлен."

# c0ef903a04ce46b39228540b37a20074
#: ../../topics/forms/index.txt:668
#, fuzzy
msgid "``{{ field.help_text }}``"
msgstr "{{ field.help_text }}"

# 3b42f7c2359f489ebda5dcf05b1ba566
#: ../../topics/forms/index.txt:668
msgid "Any help text that has been associated with the field."
msgstr "Любой вспомогательный текст, который привязан к полю."

# 81afca76e115450585674c1cbf48fa3a
#: ../../topics/forms/index.txt:675
#, fuzzy
msgid "``{{ field.errors }}``"
msgstr "{{ field.errors }}"

# 9f95dc7a544d4932b4ae25727c6c9847
#: ../../topics/forms/index.txt:671
msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a simple string containing the error message."
msgstr ""
"Вывод ``<ul class=\"errorlist\">``, содержащий все ошибки валидации, "
"относящиеся к полю. Вы можете настраивать представление списка ошибок с "
"помощью цикла ``{% for error in field.errors %}``. В этом случае, каждый "
"объект в цикле является простой строкой, содержащей сообщение об ошибке."

# b8c9bd2812fa4a988148450aa969a45e
#: ../../topics/forms/index.txt:680
#, fuzzy
msgid "``{{ field.is_hidden }}``"
msgstr "{{ field.is_hidden }}"

# 8eaf036bdfae4b29b89ef7ae3e78e6cf
#: ../../topics/forms/index.txt:678
msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False`` "
"otherwise. It's not particularly useful as a template variable, but could be "
"useful in conditional tests such as:"
msgstr ""
"Значение этого атрибута равно ``True``, если поле является скрытым, и "
"``False`` в противном случае. Данный атрибут обычно не используется при "
"выводе формы, но может быть полезен в условиях подобных этому:"

# 6ead6cb4b29e424bb99ca3d99a0bf586
#: ../../topics/forms/index.txt:692
#, fuzzy
msgid "``{{ field.field }}``"
msgstr "{{ field.field }}"

# 2ba7fe7567074b98b6ff90083c94015a
#: ../../topics/forms/index.txt:689
msgid ""
"The :class:`~django.forms.Field` instance from the form class that this :"
"class:`~django.forms.BoundField` wraps. You can use it to access :class:"
"`~django.forms.Field` attributes, e.g. ``{{ char_field.field.max_length }}``."
msgstr ""
"Экземпляр :class:`~django.forms.Field` из класса формы, который обёрнут с "
"помощью :class:`~django.forms.BoundField`. Он предоставляет доступ к "
"атрибутам :class:`~django.forms.Field`, например ``{{ char_field.field."
"max_length }}``."

#: ../../topics/forms/index.txt:696
msgid ""
"For a complete list of attributes and methods, see :class:`~django.forms."
"BoundField`."
msgstr ""
"Полный список методов и атрибутов смотрите в описании :class:`~django.forms."
"BoundField`."

# 2b1592ca173b4905bbaead99d71b622b
#: ../../topics/forms/index.txt:700
msgid "Looping over hidden and visible fields"
msgstr "Цикл по скрытым и отображаемым полям"

# 4c21c8bb22aa482fbe0a401e63bed636
#: ../../topics/forms/index.txt:702
msgid ""
"If you're manually laying out a form in a template, as opposed to relying on "
"Django's default form layout, you might want to treat ``<input type=\"hidden"
"\">`` fields differently from non-hidden fields. For example, because hidden "
"fields don't display anything, putting error messages \"next to\" the field "
"could cause confusion for your users -- so errors for those fields should be "
"handled differently."
msgstr ""
"Если вы вручную размещаете форму в шаблоне, то у вас появляется возможность "
"трактовать поля вида ``<input type=\"hidden\">`` по своему. Например, так "
"как скрытые поля не отображаются на форме, размещение сообщений об ошибке "
"для поля \"перейти далее\" может смутить пользователей. Такие ошибки следует "
"обрабатывать другим способом."

# d719c68fcf534d11a027ec5cb36f49f7
#: ../../topics/forms/index.txt:709
msgid ""
"Django provides two methods on a form that allow you to loop over the hidden "
"and visible fields independently: ``hidden_fields()`` and "
"``visible_fields()``. Here's a modification of an earlier example that uses "
"these two methods:"
msgstr ""
"Django предоставляет два метода, которые позволяют организовать раздельные "
"циклы по скрытым и отображаемым полям: ``hidden_fields()`` и "
"``visible_fields()``. Покажем как изменится наш пример, если воспользоваться "
"этими методами:"

# 3ce789f362c64c84b3a8615d559c10fd
#: ../../topics/forms/index.txt:728
msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr ""
"Этот пример не обрабатывает ошибки в скрытых полях. Обычно ошибка в скрытом "
"поле означает наличие подмены в форме, так как обычный сценарий работы с "
"формами не предполагает изменения этих полей. Тем не менее, вы можете "
"реализовать отображение таких ошибок формы."

# 85bfc38e02074feab04a370dab34c6b3
#: ../../topics/forms/index.txt:734
msgid "Reusable form templates"
msgstr "Повторное использование шаблонов форм"

# c1f95572e8874ed5baca4bc5e8f3f880
#: ../../topics/forms/index.txt:736
msgid ""
"If your site uses the same rendering logic for forms in multiple places, you "
"can reduce duplication by saving the form's loop in a standalone template "
"and using the :ttag:`include` tag to reuse it in other templates:"
msgstr ""
"Если на вашем сайте используется однотипная логика отображения форм, вы "
"можете избежать дублирования кода, сохранив цикл по полям формы в отдельном "
"шаблоне и подключая его в другие шаблоны с помощью тега :ttag:`include`:"

# 29a2f047ffd54e67b2ecd8c8ab3328ad
#: ../../topics/forms/index.txt:753
msgid ""
"If the form object passed to a template has a different name within the "
"context, you can alias it using the ``with`` argument of the :ttag:`include` "
"tag:"
msgstr ""
"Если объект формы, переданный в шаблон, имеет другое имя в контексте, вы "
"можете создать для него псевдоним, используя аргумент ``with`` тега :ttag:"
"`include`:"

# 9a204fe0ad9b4d8684269984ca3aee28
#: ../../topics/forms/index.txt:761
msgid ""
"If you find yourself doing this often, you might consider creating a custom :"
"ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""
"Если вам придётся делать такое часто, то можно создать собственный :ref:"
"`включающий тег <howto-custom-template-tags-inclusion-tags>`."

# 6e3b07bacb6f494fb32d863dd9d87de1
#: ../../topics/forms/index.txt:765
msgid "Further topics"
msgstr "Изучите далее"

# 0cbef1f19d15499ba7ffaac0f526ad75
#: ../../topics/forms/index.txt:767
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr "Мы рассмотрели базовые возможности форм, но они могут больше:"

# 241e7edbfc684ae5a42fdbc4de948c15
#: ../../topics/forms/index.txt:779
msgid ":doc:`The Forms Reference </ref/forms/index>`"
msgstr ":doc:`Справочник по формам </ref/forms/index>`"

# c7bf4868ca3d4300a0a48589e6fbc644
#: ../../topics/forms/index.txt:779
msgid ""
"Covers the full API reference, including form fields, form widgets, and form "
"and field validation."
msgstr ""
"Предоставляет полный справочник на API, включая поля, виджеты и валидацию "
"как полей, так и формы."

# db2f86ac69484ac090b538791810a119
#~ msgid ""
#~ "All form classes are created as subclasses of :class:`django.forms.Form`, "
#~ "including the :doc:`ModelForm </topics/forms/modelforms>`, which you "
#~ "encounter in Django's admin."
#~ msgstr ""
#~ "Все формы являются дочерними классами :class:`django.forms.Form`, "
#~ "включая :doc:`ModelForm </topics/forms/modelforms>`, которые вы можете "
#~ "увидеть в админке Django."

#~ msgid "The Forms Reference"
#~ msgstr "Справочник по формам"

#~ msgid "The ``nonfield`` class as described in the example above was added."
#~ msgstr "Был добавлен класс ``nonfield``, который был описан выше."

# f7835c78f1fd4282ab0dc8258669a144
#~ msgid "The field's label wrapped in the appropriate HTML ``<label>`` tag."
#~ msgstr "Метка поля обёрнута в соответствующий HTML-тег ``<label>``."

# c9eb827b67d4482c9aee20b6e40b829f
#~ msgid "``django.forms`` is Django's form-handling library."
#~ msgstr "``django.forms`` -- библиотека для работы с формами."

# b7fe6395b37f4e1393407e629157be1e
#~ msgid ""
#~ "While it is possible to process form submissions just using Django's :"
#~ "class:`~django.http.HttpRequest` class, using the form library takes care "
#~ "of a number of common form-related tasks. Using it, you can:"
#~ msgstr ""
#~ "Несмотря на наличие возможности обработки форм через обычный класс "
#~ "Django :class:`~django.http.HttpRequest`, использование "
#~ "специализированной библиотеки предоставляет решение для общих задач, "
#~ "возникающих при работе с формами, например:"

# 8e2abbe97eb144c3a71adf6dc6abb30c
#~ msgid "Display an HTML form with automatically generated form widgets."
#~ msgstr ""
#~ "Автоматически генерировать HTML код формы с использованием необходимых "
#~ "виджетов."

# b858354f11554f99a4497446a8dbed8d
#~ msgid "Check submitted data against a set of validation rules."
#~ msgstr "Проверять переданную информацию с помощью набора правил валидации."

# ef9ef415a4a14e1b9118845899221aee
#~ msgid "Redisplay a form in the case of validation errors."
#~ msgstr "Заново отображать форму при обнаружении ошибок."

# 8e2cc90df85b4b56af3553c4179bf9dd
#~ msgid "Convert submitted form data to the relevant Python data types."
#~ msgstr ""
#~ "Преобразовывать переданную информацию в соответствующие типы данных языка "
#~ "Python."

# ae65f0b3f450437d891c2e8f66d05bff
#~ msgid "The library deals with these concepts:"
#~ msgstr "Библиотека работает с нижеперечисленными сущностями:"

# 547a794f8694428d9696a3bf79b51377
#~ msgid ""
#~ "A class that corresponds to an HTML form widget, e.g. ``<input type=\"text"
#~ "\">`` or ``<textarea>``. This handles rendering of the widget as HTML."
#~ msgstr ""
#~ "Класс, который соответствует определённому HTML-коду т.е. ``<input type="
#~ "\"text\">`` или ``<textarea>``. Он реализует генерацию HTML-кода для "
#~ "виджета."

# c369e42e879044c9a07bb617643fd140
#~ msgid ""
#~ "A class that is responsible for doing validation, e.g. an ``EmailField`` "
#~ "that makes sure its data is a valid email address."
#~ msgstr ""
#~ "Класс, который отвечает за проведение валидации, т.е. ``EmailField`` "
#~ "обеспечивает получение правильного адреса электронной почты."

# eed44f6d41f44c07aeb90ea0ad8e9141
#~ msgid ""
#~ "A collection of fields that knows how to validate itself and display "
#~ "itself as HTML."
#~ msgstr ""
#~ "Коллекция полей, которые знают как проверять введённую информацию и "
#~ "отображать себя в виде HTML кода."

# 7178a16bb52c499cbfd32ebc0ec9e790
#~ msgid "The CSS and JavaScript resources that are required to render a form."
#~ msgstr ""
#~ "Ресурсы CSS и JavaScript, которые необходимы для правильного отображения "
#~ "формы."

# dc5fc3742bd840ecb48cb64cec4a587e
#~ msgid ""
#~ "The library is decoupled from the other Django components, such as the "
#~ "database layer, views and templates. It relies only on Django settings, a "
#~ "couple of ``django.utils`` helper functions and Django's "
#~ "internationalization hooks (but you're not required to be using "
#~ "internationalization features to use this library)."
#~ msgstr ""
#~ "Эта библиотека отделена от остальных компонентов Django, таких как слой "
#~ "взаимодействия с базой данных, представления и шаблоны. Оно зависит "
#~ "только от настроек Django, ряда вспомогательных функций из  ``django."
#~ "utils`` и механизма интернационализации (необязательная зависимость)."

# 0ac37298c54642afabb8abc02536dbbd
#~ msgid "Form objects"
#~ msgstr "Объекты форм"

# 9284a96b0b9c49bf8f15e4585aaecaf9
#~ msgid ""
#~ "A Form object encapsulates a sequence of form fields and a collection of "
#~ "validation rules that must be fulfilled in order for the form to be "
#~ "accepted. Form classes are created as subclasses of ``django.forms.Form`` "
#~ "and make use of a declarative style that you'll be familiar with if "
#~ "you've used Django's database models."
#~ msgstr ""
#~ "Объект формы содержит в себе последовательность полей формы и коллекцию "
#~ "правил валидации, которые должны быть пройдены для того, чтобы форма "
#~ "приняла переданную информацию. Классы форм создаются как подклассы "
#~ "``django.forms.Form`` и используют декларативный стиль, аналогичный "
#~ "используемому в моделях Django."

# 03eebb5d44d8499487872117850fb296
#~ msgid ""
#~ "The standard pattern for processing a form in a view looks like this:"
#~ msgstr ""
#~ "Стандартный шаблон для работы с формой в представлении выглядит следующим "
#~ "образом:"

# 17b46fec0bed474f804b5b5246e32e05
#~ msgid "There are three possible code paths here:"
#~ msgstr "В этом коде заложено три сценария:"

# 8a8d8e114ebc4de6bb1aee74af675256
#~ msgid "Form submitted?"
#~ msgstr "Форма отправлена?"

# 97d62ae5f6584d6fb4b0757b431b18b2
#~ msgid "Data?"
#~ msgstr "Данные"

# 197e26357a67444fb61cebd2be0fd2e4
#~ msgid "What occurs"
#~ msgstr "Что происходит"

# ac3ca998f8424d17a069adb3375ae771
#~ msgid "Unsubmitted"
#~ msgstr "Не отправлена"

# f9eda6bbba5e42d3aeafbcf53c75b564
#~ msgid "None yet"
#~ msgstr "Ещё нет"

# 115873e9029d4c2c9b2ec65ac1a984ca
#~ msgid "Template gets passed unbound instance of ContactForm."
#~ msgstr "Шаблон получает пустой экземпляр ContactForm."

# 5c84124e4ca141f499f3bdebae73093e
# 5a130ec64e8e40c7acd6b24d8c1cf9f4
#~ msgid "Submitted"
#~ msgstr "Отправлена"

# 7a5bb621ed4b464eb590ee7cf17a9500
#~ msgid "Invalid data"
#~ msgstr "Неверные данные"

# 5da0f001648644aea3f9c898be60dd64
#~ msgid "Template gets passed bound instance of ContactForm."
#~ msgstr "Шаблон получает заполненный экземпляр ContactForm."

# 8ab8a9290eb44d279c4a8e2f70ea50ce
#~ msgid "Valid data is processed. Redirect to a \"thanks\" page."
#~ msgstr ""
#~ "Данные обрабатываются. Перенаправление на страницу с \"благодарностями\"."

# 56babcbca8cb4f6a9f1b3b35a2ef8ad2
#~ msgid "Handling file uploads with a form"
#~ msgstr "Обработка закачки файла через форму"

# c82d104cd764468b85296e3de66bf339
#~ msgid ""
#~ "To see how to handle file uploads with your form, see :ref:`binding-"
#~ "uploaded-files`."
#~ msgstr ""
#~ "Чтобы узнать как обрабатывать загрузку файлов через форму, обратитесь к :"
#~ "ref:`binding-uploaded-files`."

# b57a96b9baa6476e863bc19fd78786bb
#~ msgid "Processing the data from a form"
#~ msgstr "Обработка данных формы"

# 81f22e88846d4014ba82f243046fa398
#~ msgid ""
#~ "Read-only fields are not available in ``form.cleaned_data`` (and setting "
#~ "a value in a custom ``clean()`` method won't have any effect). These "
#~ "fields are displayed as text rather than as input elements, and thus are "
#~ "not posted back to the server."
#~ msgstr ""
#~ "Поля \"только для чтения\" не доступны через ``form.cleaned_data`` (и "
#~ "установка значения в собственном методе ``clean()`` не даст никакого "
#~ "эффекта). Такие поля отображаются в виде текста, а не в виде элемента "
#~ "ввода и, следовательно, не отправляются на сервер."

# 3a5b10193c7e47e0b7d66e32c16b1e2c
#~ msgid ""
#~ "Extending the earlier example, here's how the form data could be "
#~ "processed:"
#~ msgstr ""
#~ "Продолжая работать над предыдущим примером, покажем, как могут быть "
#~ "обработаны данные из формы:"

# 132ae3965e8f4747a74c51a7984942cc
#~ msgid "Displaying a form using a template"
#~ msgstr "Отображение формы с помощью шаблона"

# 72d35b966a044252b2f019a4c120382a
#~ msgid ""
#~ "Forms are designed to work with the Django template language. In the "
#~ "above example, we passed our ``ContactForm`` instance to the template "
#~ "using the context variable ``form``. Here's a simple example template::"
#~ msgstr ""
#~ "Формы разработаны для работы с шаблонным языком Django. В приведённом "
#~ "ранее примере мы передавали экземпляр ``ContactForm`` в шаблон, используя "
#~ "контекстную переменную ``form``. Покажем простой пример шаблона::"

# b8a2d53c66ad40acbf285b7f253b92a1
#~ msgid ""
#~ "The form only outputs its own fields; it is up to you to provide the "
#~ "surrounding ``<form>`` tags and the submit button."
#~ msgstr ""
#~ "Форма просто выводит свои поля. Указание тега ``<form>`` и кнопки для "
#~ "отправки формы -- это ваша задача."

# 9719c58369d046d4acbf4074256056a4
#~ msgid ""
#~ "If your form includes uploaded files, be sure to include ``enctype="
#~ "\"multipart/form-data\"`` in the ``form`` element. If you wish to write a "
#~ "generic template that will work whether or not the form has files, you "
#~ "can use the :meth:`~django.forms.Form.is_multipart` attribute on the "
#~ "form::"
#~ msgstr ""
#~ "Если ваша форма содержит загружаемые файлы, удостоверьтесь, что элемент "
#~ "``form`` имеет атрибут ``enctype=\"multipart/form-data\"``. Если вам "
#~ "потребуется создать общий шаблон, не зависящий от наличия функционала "
#~ "загрузки файлов, вы можете использовать атрибут формы :meth:`~django."
#~ "forms.Form.is_multipart`::"

# d04382d8802649ffaa8439e29121b5f5
#~ msgid ""
#~ "``form.as_p`` will output the form with each form field and accompanying "
#~ "label wrapped in a paragraph. Here's the output for our example template::"
#~ msgstr ""
#~ "Тег ``form.as_p`` выводит поля формы в виде параграфов (т.е. ``<p/>``) "
#~ "вместе с соответствующими метками. Ниже представлены пример с результатом "
#~ "использования нашего шаблона::"

# 9fbdbdc15bb24601b29872cdd9c1438e
#~ msgid ""
#~ "You can also use ``form.as_table`` to output table rows (you'll need to "
#~ "provide your own ``<table>`` tags) and ``form.as_ul`` to output list "
#~ "items."
#~ msgstr ""
#~ "Вы можете использовать ``form.as_table`` для вывода полей формы в виде "
#~ "таблицы (потребуется прописать в шаблоне теги ``<table>``) и ``form."
#~ "as_ul`` для вывода полей формы в виде элементов списка."

# d700e18901ca4b6787a6b5d5f4409f7a
#~ msgid "Customizing the form template"
#~ msgstr "Настройка шаблона формы"

# 7de2b9dd3a654371bb66f2f29584c603
#~ msgid ""
#~ "If the default generated HTML is not to your taste, you can completely "
#~ "customize the way a form is presented using the Django template language. "
#~ "Extending the above example::"
#~ msgstr ""
#~ "Если сгенерированный по умолчанию HTML не подходит для решения вашей "
#~ "задачи, вы можете изменить представление формы с помощью шаблонного языка "
#~ "Django. Продолжая работу с приведённым ранее примером::"

# d79186e16c134b29aad267ccb5d1e4c2
#~ msgid ""
#~ "Within this loop, ``{{ field }}`` is an instance of :class:`~django.forms."
#~ "BoundField`. ``BoundField`` also has the following attributes, which can "
#~ "be useful in your templates:"
#~ msgstr ""
#~ "Внутри цикла тег ``{{ field }}`` представляет собой экземпляр класса :"
#~ "class:`~django.forms.BoundField`. Класс ``BoundField`` также имеет "
#~ "приведённые далее атрибуты, которые могут быть полезны в ваших шаблонах:"
