# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2017-11-29 11:20+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# f19097c7651a4773bc1743a4af0e344c
#: ../../topics/forms/modelforms.txt:3
msgid "Creating forms from models"
msgstr "Создание форм из моделей"

# 23481b3edd2e4e76b68ee59d27281619
#: ../../topics/forms/modelforms.txt:11
msgid "``ModelForm``"
msgstr "``ModelForm``"

# 389750e491074638ba7cb8391c308e6e
#: ../../topics/forms/modelforms.txt:14
msgid ""
"If you're building a database-driven app, chances are you'll have forms that "
"map closely to Django models. For instance, you might have a ``BlogComment`` "
"model, and you want to create a form that lets people submit comments. In "
"this case, it would be redundant to define the field types in your form, "
"because you've already defined the fields in your model."
msgstr ""
"При разработке приложения, использующего базу данных, чаще всего вы будете "
"работать с формами, которые аналогичны моделям. Например, имея модель "
"``BlogComment``, вам может потребоваться создать форму, которая позволит "
"людям отправлять комментарии. В этом случае явное определение полей формы "
"будет дублировать код, так как все поля уже описаны в модели."

# e3778fa8f08648b0acb38ee97239dffb
#: ../../topics/forms/modelforms.txt:20
msgid ""
"For this reason, Django provides a helper class that lets you create a "
"``Form`` class from a Django model."
msgstr ""
"По этой причине Django предоставляет вспомогательный класс, который позволит "
"вам создать класс ``Form`` по имеющейся модели."

# 91cf650492b344f6aa1cbf80ce1ffd42
#: ../../topics/forms/modelforms.txt:23 ../../topics/forms/modelforms.txt:438
msgid "For example::"
msgstr "Например::"

# 84c8756e6e034261adfa30d11e7e658d
#: ../../topics/forms/modelforms.txt:42
msgid "Field types"
msgstr "Типы полей"

# 0a0bb5172d424d19b75392decfa2e316
#: ../../topics/forms/modelforms.txt:44
msgid ""
"The generated ``Form`` class will have a form field for every model field "
"specified, in the order specified in the ``fields`` attribute."
msgstr ""
"Сгенерированный класс ``Form`` будет содержать поле формы для каждого поля "
"модели в порядке указанном в атрибуте ``fields``."

# 563266d5d37744ca92e383fb4c205bce
#: ../../topics/forms/modelforms.txt:47
msgid ""
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr ""
"Каждому полю модели соответствует стандартное поле формы. Например, "
"``CharField`` поле модели будет представлено на форме как ``CharField``, а "
"``ManyToManyField`` поле модели будет представлено как "
"``MultipleChoiceField``. Ниже представлен полный список соответствия полей "
"модели и формы:"

# 2c7bee9383014239874a7fbccba8cba8
#: ../../topics/forms/modelforms.txt:55
msgid "Model field"
msgstr "Поле модели"

# a29f18685e654e64941d9ae477c54599
#: ../../topics/forms/modelforms.txt:55
msgid "Form field"
msgstr "Поле формы"

# 0383424e631b4a938863b64a7cefb65d
#: ../../topics/forms/modelforms.txt:57
msgid ":class:`AutoField`"
msgstr ":class:`AutoField`"

# 55696cc2f2994241baa1da3ff490b48f
#: ../../topics/forms/modelforms.txt:57 ../../topics/forms/modelforms.txt:59
msgid "Not represented in the form"
msgstr "Не представлено на форме"

# 0383424e631b4a938863b64a7cefb65d
#: ../../topics/forms/modelforms.txt:59
msgid ":class:`BigAutoField`"
msgstr ":class:`BigAutoField`"

# 82ce53716b384fa5be2658b92c1ac53a
#: ../../topics/forms/modelforms.txt:61
msgid ":class:`BigIntegerField`"
msgstr ":class:`BigIntegerField`"

# d91ed8f9177d43bf94d18ef5833fdb75
#: ../../topics/forms/modelforms.txt:61
msgid ""
":class:`~django.forms.IntegerField` with ``min_value`` set to "
"-9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ""
":class:`~django.forms.IntegerField` с атрибутом ``min_value`` равным "
"-9223372036854775808 и атрибутом ``max_value`` равным 9223372036854775807."

# 85b3687a05c542bb89b9572b0e88b1f3
# b058d101b6bb42f88967fc749c142966
#: ../../topics/forms/modelforms.txt:65
msgid ":class:`BooleanField`"
msgstr ":class:`BooleanField`"

#: ../../topics/forms/modelforms.txt:65
msgid ":class:`~django.forms.BooleanField`"
msgstr ":class:`~django.forms.BooleanField`"

# 06dfc26648034826be26357675b60cb4
# b251942ec1b44f0197a5e042dfeb0895
# 540c8f05b7a649d4bb00de783a005619
# 6c7f36e666214ccda839715fb68d95a3
#: ../../topics/forms/modelforms.txt:67
msgid ":class:`CharField`"
msgstr ":class:`CharField`"

# f9fd94d5384f4f6ab9935e14e39ebc3d
#: ../../topics/forms/modelforms.txt:67
msgid ""
":class:`~django.forms.CharField` with ``max_length`` set to the model "
"field's ``max_length`` and :attr:`~django.forms.CharField.empty_value` set "
"to ``None`` if ``null=True``."
msgstr ""
":class:`~django.forms.CharField` с атрибутом ``max_length`` равным значению "
"атрибута ``max_length`` модели и :attr:`~django.forms.CharField.empty_value` "
"равен ``None``, если ``null=True``."

# ccdb9110f74d452fa3166c576d31ff9b
# 95e2487e438748b4998d4a75a34e38ae
#: ../../topics/forms/modelforms.txt:73
msgid ":class:`DateField`"
msgstr ":class:`DateField`"

#: ../../topics/forms/modelforms.txt:73
msgid ":class:`~django.forms.DateField`"
msgstr ":class:`~django.forms.DateField`"

# d61ccc5fae37482a8635bbed8e4c07ec
# 74383f59e9fc473cb07763c25d9384ee
#: ../../topics/forms/modelforms.txt:75
msgid ":class:`DateTimeField`"
msgstr ":class:`DateTimeField`"

#: ../../topics/forms/modelforms.txt:75
msgid ":class:`~django.forms.DateTimeField`"
msgstr ":class:`~django.forms.DateTimeField`"

# 4361c770e5bf44d984740bd2a025fe74
# 5f2dead6eabe4575b3051ca1be1a444b
#: ../../topics/forms/modelforms.txt:77
msgid ":class:`DecimalField`"
msgstr ":class:`DecimalField`"

#: ../../topics/forms/modelforms.txt:77
msgid ":class:`~django.forms.DecimalField`"
msgstr ":class:`~django.forms.DecimalField`"

# acec8b2692f74a02a4a34a617e1504ce
# fd8bb4bdfa3043f4a8c020e381f84f28
#: ../../topics/forms/modelforms.txt:79
msgid ":class:`EmailField`"
msgstr ":class:`EmailField`"

#: ../../topics/forms/modelforms.txt:79
msgid ":class:`~django.forms.EmailField`"
msgstr ":class:`~django.forms.EmailField`"

# 7a459094f89949b2a61f64e69ed12e3d
# 55482fea865a45c5adb8ca02e61118ff
#: ../../topics/forms/modelforms.txt:81
msgid ":class:`FileField`"
msgstr ":class:`FileField`"

#: ../../topics/forms/modelforms.txt:81
msgid ":class:`~django.forms.FileField`"
msgstr ":class:`~django.forms.FileField`"

# 131d89f885eb4dd7bac1bea6b0a02c46
#: ../../topics/forms/modelforms.txt:83
msgid ":class:`FilePathField`"
msgstr ":class:`FilePathField`"

#: ../../topics/forms/modelforms.txt:83
msgid ":class:`~django.forms.FilePathField`"
msgstr ":class:`~django.forms.FilePathField`"

# 8be21997a4a445528ec0914eac0b3eae
# 0ddbd62ee10e4e7fba6d635a6d70f17f
#: ../../topics/forms/modelforms.txt:85
msgid ":class:`FloatField`"
msgstr ":class:`FloatField`"

#: ../../topics/forms/modelforms.txt:85
msgid ":class:`~django.forms.FloatField`"
msgstr ":class:`~django.forms.FloatField`"

# e29a8d34cb73478aaf1de164da8ebdfb
#: ../../topics/forms/modelforms.txt:87
msgid ":class:`ForeignKey`"
msgstr ":class:`ForeignKey`"

# 34d4a1ca37364f79be3787900f426e2c
#: ../../topics/forms/modelforms.txt:87
msgid ":class:`~django.forms.ModelChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelChoiceField` (смотри далее)"

# 21c281419507433999c1c6ffb19de817
# c8fba84720fb4d33948cbf345ac8ac83
#: ../../topics/forms/modelforms.txt:90
msgid "``ImageField``"
msgstr "``ImageField``"

#: ../../topics/forms/modelforms.txt:90
msgid ":class:`~django.forms.ImageField`"
msgstr ":class:`~django.forms.ImageField`"

# a3f6492d93714bd1b78df4ff96e3d55e
# 7b11d5c4a7ba4b4691e1a1872f862688
# eb98762f63134ebebb902ec82b177d30
# 9e1905ab6fa5458cbc61312fabe06535
# e02b76bcb4354feeb75d2e777864bec2
#: ../../topics/forms/modelforms.txt:92
msgid ":class:`IntegerField`"
msgstr ":class:`IntegerField`"

#: ../../topics/forms/modelforms.txt:92 ../../topics/forms/modelforms.txt:103
#: ../../topics/forms/modelforms.txt:105 ../../topics/forms/modelforms.txt:109
msgid ":class:`~django.forms.IntegerField`"
msgstr ":class:`~django.forms.IntegerField`"

# fb4905aa86cc43a18db6369614a719d6
# a0c1d846995e4a26aec734a5b2471b21
#: ../../topics/forms/modelforms.txt:94
msgid "``IPAddressField``"
msgstr "``IPAddressField``"

# 975d79a7731a46d493a95f45ae39e8a9
# 9912ff14c784494992d8f92a5928d839
#: ../../topics/forms/modelforms.txt:96
msgid ":class:`GenericIPAddressField`"
msgstr ":class:`GenericIPAddressField`"

# 975d79a7731a46d493a95f45ae39e8a9
# 9912ff14c784494992d8f92a5928d839
#: ../../topics/forms/modelforms.txt:96
msgid ":class:`~django.forms.GenericIPAddressField`"
msgstr ":class:`~django.forms.GenericIPAddressField`"

# 87010fd46f8343c6b205d29c12fc382a
#: ../../topics/forms/modelforms.txt:98
msgid ":class:`ManyToManyField`"
msgstr ":class:`ManyToManyField`"

# a6d1d95a214c428189d56d57ccc4b900
#: ../../topics/forms/modelforms.txt:98
msgid ":class:`~django.forms.ModelMultipleChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelMultipleChoiceField` (смотри далее)"

# c322c5f9f6e544caba86791b004e3ef0
#: ../../topics/forms/modelforms.txt:101
msgid ":class:`NullBooleanField`"
msgstr ":class:`NullBooleanField`"

#: ../../topics/forms/modelforms.txt:101
msgid ":class:`~django.forms.NullBooleanField`"
msgstr ":class:`~django.forms.NullBooleanField`"

# 391ac1a833ab4a7b90119a0021497054
#: ../../topics/forms/modelforms.txt:103
msgid ":class:`PositiveIntegerField`"
msgstr ":class:`PositiveIntegerField`"

# 4da8de9ddd4a4d26a61856c74c6bd79d
#: ../../topics/forms/modelforms.txt:105
msgid ":class:`PositiveSmallIntegerField`"
msgstr ":class:`PositiveSmallIntegerField`"

# 0fb9cf73ba4847d5a231a1696e6f389c
# 616d9f91a84a470385c62750510179a3
#: ../../topics/forms/modelforms.txt:107
msgid ":class:`SlugField`"
msgstr ":class:`SlugField`"

#: ../../topics/forms/modelforms.txt:107
msgid ":class:`~django.forms.SlugField`"
msgstr ":class:`~django.forms.SlugField`"

# 2737cffc4fdc45d3b20f1d0b6039be93
#: ../../topics/forms/modelforms.txt:109
msgid ":class:`SmallIntegerField`"
msgstr ":class:`SmallIntegerField`"

# 75bb52fe1f5a40b9a7231e8fd3e3540b
#: ../../topics/forms/modelforms.txt:111
msgid ":class:`TextField`"
msgstr ":class:`TextField`"

# c4c0e61dbf144f5292aa772d84bc1695
#: ../../topics/forms/modelforms.txt:111
msgid ":class:`~django.forms.CharField` with ``widget=forms.Textarea``"
msgstr ":class:`~django.forms.CharField` с ``widget=forms.Textarea``"

# 1927af4f21ca4a3ba99953d94c4aedc7
# 3e58a8d0199d476b83a0cfea20e63d35
#: ../../topics/forms/modelforms.txt:114
msgid ":class:`TimeField`"
msgstr ":class:`TimeField`"

#: ../../topics/forms/modelforms.txt:114
msgid ":class:`~django.forms.TimeField`"
msgstr ":class:`~django.forms.TimeField`"

# 13c804f2175f4e8fa0fc5d4ddcfedaca
#: ../../topics/forms/modelforms.txt:116
msgid ":class:`URLField`"
msgstr ":class:`URLField`"

#: ../../topics/forms/modelforms.txt:116
msgid ":class:`~django.forms.URLField`"
msgstr ":class:`~django.forms.URLField`"

# 2f3d8bc7941149e1bd80f392ea8f8f0b
#: ../../topics/forms/modelforms.txt:121
msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr ""
"Как вы могли ожидать, ``ForeignKey`` и ``ManyToManyField`` поля модели "
"являются особыми случаями:"

# e9b13c0d05b0452f94e7365fdc6acae0
#: ../../topics/forms/modelforms.txt:124
msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is "
"a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""
"Поле ``ForeignKey`` модели представлено полем формы ``ModelChoiceField``, "
"которое является обычным ``ChoiceField``, но с вариантами значений, "
"полученными из ``QuerySet``."

# 39b8f82f7b0742a18d8c217007550612
#: ../../topics/forms/modelforms.txt:127
msgid ""
"``ManyToManyField`` is represented by ``django.forms."
"ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices "
"are a model ``QuerySet``."
msgstr ""
"Поле ``ManyToManyField`` модели представлено полем формы "
"``ModelMultipleChoiceField``, которое является обычным "
"``MultipleChoiceField`, но с вариантами значений, полученными из "
"``QuerySet``."

# 347ab207aae3490ea1b32e6ea79b5702
#: ../../topics/forms/modelforms.txt:131
msgid "In addition, each generated form field has attributes set as follows:"
msgstr "В дополнение, каждое поле созданной формы имеет следующие атрибуты:"

# 1243c9df186946c8a8fff0833f6d13dc
#: ../../topics/forms/modelforms.txt:133
msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False`` "
"on the form field. Otherwise, ``required=True``."
msgstr ""
"Если у поля модели есть ``blank=True``, тогда к полю формы будет добавлено "
"``required=False``, иначе -- ``required=True``."

# f5f9d967a6824d12bc8b58aa38a6c310
#: ../../topics/forms/modelforms.txt:136
msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr ""
"Значением атрибута ``label`` поля будет значение поля ``verbose_name`` "
"модели, причём первый символ этого значения будет преобразован в верхний "
"регистр."

# 56611b0f9ba04edca44231985b2f2fc7
#: ../../topics/forms/modelforms.txt:139
msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr ""
"Значением атрибута ``help_text`` поля формы будет значение атрибута "
"``help_text`` поля модели."

# fcdb4da98d9a4cffa6612d76e443e613
#: ../../topics/forms/modelforms.txt:142
msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr ""
"Если для поля модели установлен атрибут ``choices``, тогда для поля формы "
"будет использоваться виджет ``Select``, который будет отображать содержимое "
"этого атрибута. Варианты выбора обычно содержат пустой вариант, который "
"выбран по умолчанию. Если поле является обязательным, то оно требует от "
"пользователя сделать выбор. Пустой вариант не отображается, если у поля "
"модели есть атрибут ``blank=False`` и явное значение ``default`` (при этом, "
"это значение будет выбрано по умолчанию)."

# 7315215d4e56431781141d302086eeee
#: ../../topics/forms/modelforms.txt:150
msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default fields`_ below."
msgstr ""
"В конце, следует отметить, что вы можете переопределить поле формы, "
"используемое для определённого поля модели. :ref:`Переопределение "
"стандартных полей <modelforms-overriding-default-fields>` описано ниже."

# e272a3725f134aaa9a4679ee6da8d73d
#: ../../topics/forms/modelforms.txt:154
msgid "A full example"
msgstr "Полный пример"

# cdbaa262da3d40978bd5b84d15c70547
#: ../../topics/forms/modelforms.txt:156
msgid "Consider this set of models::"
msgstr "Рассмотрим этот набор полей::"

# 2ccb0a665b9845c2a0d462466018c4d3
#: ../../topics/forms/modelforms.txt:190
msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr ""
"Для этих моделей показанные выше классы ``ModelForm`` будут аналогичны "
"следующим формам (разница будет только в методе ``save()``, что мы вскоре "
"рассмотрим.)::"

# 23481b3edd2e4e76b68ee59d27281619
#: ../../topics/forms/modelforms.txt:211
msgid "Validation on a ``ModelForm``"
msgstr "Валидация в ``ModelForm``"

# 4c4d570eadb1400799b98b03acf1d92b
#: ../../topics/forms/modelforms.txt:213
msgid "There are two main steps involved in validating a ``ModelForm``:"
msgstr "Есть два основных шага при валидации ``ModelForm``:"

# 10f48c25971249479800108b6373d799
#: ../../topics/forms/modelforms.txt:215
msgid ":doc:`Validating the form </ref/forms/validation>`"
msgstr ":ref:`Валидация форм </ref/forms/validation>`"

# e0fe792d726447bd876aa0d127baf9cc
#: ../../topics/forms/modelforms.txt:216
msgid ":ref:`Validating the model instance <validating-objects>`"
msgstr ":ref:`Валидация объекта модели <validating-objects>`"

# c4a0e853c3274bab90f3b856104c345a
#: ../../topics/forms/modelforms.txt:218
msgid ""
"Just like normal form validation, model form validation is triggered "
"implicitly when calling :meth:`~django.forms.Form.is_valid()` or accessing "
"the :attr:`~django.forms.Form.errors` attribute and explicitly when calling "
"``full_clean()``, although you will typically not use the latter method in "
"practice."
msgstr ""
"Как и валидация в обычной форме валидация в модельной форме выполняется при "
"вызове :meth:`~django.forms.Form.is_valid()` или при обращении к атрибуту :"
"attr:`~django.forms.Form.errors`, или при явном вызове ``full_clean()``, но "
"на практике вы не будете использовать последний метод."

# 37d608aec7b34726a1a5ec5ffa1255c4
#: ../../topics/forms/modelforms.txt:224
msgid ""
"``Model`` validation (:meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>`) is triggered from within the form validation step, right "
"after the form's ``clean()`` method is called."
msgstr ""
"Валидация модели (:meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>`) выполняется после валидации формы, сразу после завершения "
"метода  ``clean()``."

# f7e22993296e4ed19507ee51097d0a24
#: ../../topics/forms/modelforms.txt:230
msgid ""
"The cleaning process modifies the model instance passed to the ``ModelForm`` "
"constructor in various ways. For instance, any date fields on the model are "
"converted into actual date objects. Failed validation may leave the "
"underlying model instance in an inconsistent state and therefore it's not "
"recommended to reuse it."
msgstr ""
"Процесс валидации изменяет объект модели переданный в конструктор "
"``ModelForm``. Например, поля даты модели преобразуют значения в объект "
"даты. Ошибка валидации может оставить объект в неопределенном состоянии и "
"лучше не использовать его в последующем коде."

# b3917f7e1bb74edc850cd1265564ecd4
#: ../../topics/forms/modelforms.txt:239
msgid "Overriding the clean() method"
msgstr "Переопределение метода clean()"

# 9af32a86a05e41f4ac671f437071c823
#: ../../topics/forms/modelforms.txt:241
msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr ""
"Вы можете переопределить метод ``clean()`` модели для того, чтобы обеспечить "
"дополнительную проверку. Всё это аналогично работе с обычной формой."

# b29f760595ce4e3ca927c3f3536d4263
#: ../../topics/forms/modelforms.txt:244
msgid ""
"A model form instance attached to a model object will contain an "
"``instance`` attribute that gives its methods access to that specific model "
"instance."
msgstr ""
"Экземпляр модельной формы, привязанный к объекту модели имеет атрибут "
"``instance``, через который методы модельной формы имеют доступ к "
"соответствующему экземпляру модели."

# 5bafa1f5496b4203805610383efb9aa4
#: ../../topics/forms/modelforms.txt:249
msgid ""
"The ``ModelForm.clean()`` method sets a flag that makes the :ref:`model "
"validation <validating-objects>` step validate the uniqueness of model "
"fields that are marked as ``unique``, ``unique_together`` or "
"``unique_for_date|month|year``."
msgstr ""
"Метод ``ModelForm.clean()`` устанавливает флаг, который указывает :ref:"
"`валидации модели <validating-objects>` провалидировать уникальность полей "
"отмеченных ``unique``, ``unique_together`` или ``unique_for_date|month|"
"year``."

# 655ece776c1e42d0894ebb44dfada1a1
#: ../../topics/forms/modelforms.txt:254
msgid ""
"If you would like to override the ``clean()`` method and maintain this "
"validation, you must call the parent class's ``clean()`` method."
msgstr ""
"Если вы хотите переопределить метод ``clean()``, вызовите метод ``clean()`` "
"родительского класса."

# 3cc98bb9e299484498f446f7c68742b8
#: ../../topics/forms/modelforms.txt:258
msgid "Interaction with model validation"
msgstr "Взаимодействие с механизмами модели"

# afe94c9dfc8e458bb7a20dca2385192d
#: ../../topics/forms/modelforms.txt:260
msgid ""
"As part of the validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work."
msgstr ""
"В процессе проверки данных ``ModelForm`` будет вызывать метод ``clean()`` "
"каждого поля вашей модели, соответствующего полю формы. Для полей модели, "
"которые были исключены из формы, проверка данных производиться не будет. "
"Обратитесь к документации по :doc:`проверке форм </ref/forms/validation>` "
"для получения информации о том, как работает проверка данных поля. "

# 6fac6ecee0914775974f2f4bd07bd25d
#: ../../topics/forms/modelforms.txt:266
msgid ""
"The model's ``clean()`` method will be called before any uniqueness checks "
"are made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr ""
"Метод модели ``clean()`` вызывается перед проверкой уникальности полей. "
"Смотрите :ref:`валидацию объектов модели <validating-objects>`, чтобы узнать "
"как работает ``clean()``."

# 8f377f2d212848d48d8362e5884a7aef
#: ../../topics/forms/modelforms.txt:273
msgid "Considerations regarding model's ``error_messages``"
msgstr "Определение ``error_messages``"

# 36d03675ef464af6aea872fe2ca3b778
#: ../../topics/forms/modelforms.txt:275
msgid ""
"Error messages defined at the :attr:`form field <django.forms.Field."
"error_messages>` level or at the :ref:`form Meta <modelforms-overriding-"
"default-fields>` level always take precedence over the error messages "
"defined at the :attr:`model field <django.db.models.Field.error_messages>` "
"level."
msgstr ""
"Сообщения ошибки из :attr:`form field <django.forms.Field.error_messages>` "
"или :ref:`form Meta <modelforms-overriding-default-fields>` имеют приоритет "
"над сообщениями ошибок из :attr:`model field <django.db.models.Field."
"error_messages>`."

# 36d03675ef464af6aea872fe2ca3b778
#: ../../topics/forms/modelforms.txt:281
msgid ""
"Error messages  defined on :attr:`model fields <django.db.models.Field."
"error_messages>` are only used when the ``ValidationError`` is raised during "
"the :ref:`model validation <validating-objects>` step and no corresponding "
"error messages are defined at the form level."
msgstr ""
" Ошибки из :attr:`model fields <django.db.models.Field.error_messages>` "
"используются для ``ValidationError``, если ошибка была вызвана при :ref:"
"`валидации модели <validating-objects>` и в форме не определенно сообщения "
"для этой ошибки."

# 6659101ddd3740c2a26e6ef9d20accc5
#: ../../topics/forms/modelforms.txt:287
msgid ""
"You can override the error messages from ``NON_FIELD_ERRORS`` raised by "
"model validation by adding the :data:`~django.core.exceptions."
"NON_FIELD_ERRORS` key to the ``error_messages`` dictionary of the "
"``ModelForm``’s inner ``Meta`` class::"
msgstr ""
"Вы можете переопределить сообщения об ошибке для ``NON_FIELD_ERRORS``, "
"который были вызваны при валидации модели, определив ключ :data:`~django."
"core.exceptions.NON_FIELD_ERRORS` в атрибут ``error_messages`` класса "
"``ModelForm.Meta``::"

# f0ab2badb7ed4ef6bc676508638ed111
#: ../../topics/forms/modelforms.txt:305
msgid "The ``save()`` method"
msgstr "Метод ``save()``"

# 13c1a367f9c949719c6a94f1ab2719b6
#: ../../topics/forms/modelforms.txt:307
msgid ""
"Every ``ModelForm`` also has a ``save()`` method. This method creates and "
"saves a database object from the data bound to the form. A subclass of "
"``ModelForm`` can accept an existing model instance as the keyword argument "
"``instance``; if this is supplied, ``save()`` will update that instance. If "
"it's not supplied, ``save()`` will create a new instance of the specified "
"model:"
msgstr ""
"Каждая форма, созданная с помощью ``ModelForm``, обладает методом "
"``save()``. Этот метод создаёт и сохраняет объект в базе данных, используя "
"для этого данные, введённые в форму. Класс, унаследованный от ``ModelForm``, "
"может принимать существующий экземпляр модели через именованный аргумент "
"``instance``. Если такой аргумент указан, то ``save()`` обновит переданную "
"модель. В противном случае, ``save()`` создаст новый экземпляр указанной "
"модели:"

# c95cf7a589724e9ab30ad82736ead9e1
#: ../../topics/forms/modelforms.txt:330
msgid ""
"Note that if the form :ref:`hasn't been validated <validation-on-"
"modelform>`, calling ``save()`` will do so by checking ``form.errors``. A "
"``ValueError`` will be raised if the data in the form doesn't validate -- i."
"e., if ``form.errors`` evaluates to ``True``."
msgstr ""
"Обратите внимание, если форма :ref:`не была проверена <validation-on-"
"modelform>`, вызов ``save()`` выполнит ее, обратившись к ``form.errors``. "
"Если данные не верны, будет вызвано исключение ``ValueError``  -- то есть, "
"если ``form.errors`` равно ``True``."

#: ../../topics/forms/modelforms.txt:335
msgid ""
"If an optional field doesn't appear in the form's data, the resulting model "
"instance uses the model field :attr:`~django.db.models.Field.default`, if "
"there is one, for that field. This behavior doesn't apply to fields that "
"use :class:`~django.forms.CheckboxInput`, :class:`~django.forms."
"CheckboxSelectMultiple`, or :class:`~django.forms.SelectMultiple` (or any "
"custom widget whose :meth:`~django.forms.Widget.value_omitted_from_data` "
"method always returns ``False``) since an unchecked checkbox and unselected "
"``<select multiple>`` don't appear in the data of an HTML form submission. "
"Use a custom form field or widget if you're designing an API and want the "
"default fallback behavior for a field that uses one of these widgets."
msgstr ""
"Если данные формы не содержат значение необязательного поля, полученный "
"экземпляр модели будет использовать значение :attr:`~django.db.models.Field."
"default`, если такое указанно для поля. Такое поведение не используется для :"
"class:`~django.forms.CheckboxInput`, :class:`~django.forms."
"CheckboxSelectMultiple` или :class:`~django.forms.SelectMultiple` (или любой "
"другой виджет, метод :meth:`~django.forms.Widget.value_omitted_from_data` "
"которого всегда возвращает ``False``) т.к. не отмеченный \"чекбокс\" или "
"``<select multiple>`` не передаются при отправке HTML формы. Используйте "
"собственные виджеты и поля формы, если вы проектируете API и хотите, чтобы "
"использовалось значение по умолчанию для полей с этими виджетами."

# eab5d8f0e2104cbca795c53005a5f316
#: ../../topics/forms/modelforms.txt:347
msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing "
"on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr ""
"Метод ``save()`` принимает необязательный именованный аргумент ``commit``, "
"который может иметь значения ``True`` или ``False``. При вызове ``save()`` с "
"``commit=False`` метод вернёт объект, который ещё не был сохранён в базе "
"данных. В этом случае, вам самостоятельно придётся вызвать метод ``save()`` "
"у полученного объекта. Это бывает полезно, когда требуется выполнить "
"дополнительные действия над объектом до его сохранения или если вам "
"требуется воспользоваться одним из :ref:`параметров сохранения модели <ref-"
"models-force-insert>`. Атрибут ``commit`` по умолчанию имеет значение "
"``True``."

# 9cdf2fd9050b4c52b246351f85e69704
#: ../../topics/forms/modelforms.txt:356
msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is "
"because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr ""
"Использование ``commit=False`` также полезно в случае, когда ваша модель "
"имеет связь \"многие-ко-многим\" с другой моделью. Для такой модели, если "
"метод ``save()`` вызван с аргументом ``commit=False``, то Django не может "
"немедленно сохранить данные для такой связи, т.к. невозможно создать связи "
"для объекта, который не сохранен в базе данных."

# 2910adec46fd4d1fa2bd3c5bfda2b7ee
#: ../../topics/forms/modelforms.txt:363
msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you "
"can invoke ``save_m2m()`` to save the many-to-many form data. For example:"
msgstr ""
"Чтобы решить эту задачу, каждый раз, когда вы сохраняете форму, указывая "
"``commit=False``, Django добавляет метод ``save_m2m()`` к вашему классу "
"``ModelForm``. После того, как вы вручную сохранили экземпляр формы, вы "
"можете вызвать метод ``save_m2m()`` для сохранения данных, связанных через "
"\"многие-ко-многим\". Например:"

# 898a1e938a6e4287949d753d758cc13f
#: ../../topics/forms/modelforms.txt:385
msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a simple ``save()`` on a form, all data -- including many-to-"
"many data -- is saved without the need for any additional method calls. For "
"example:"
msgstr ""
"Вызов метода ``save_m2m()`` требуется только в случае, если вы используете "
"``save(commit=False)``. Если вы просто используете ``save()`` для формы, то "
"все данные (включая связи \"многие-ко-многим\"), будут сохранены, не требуя "
"для этого дополнительных действий. Например:"

# 038eb052304d40ab898756132b1dea47
#: ../../topics/forms/modelforms.txt:399
msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the "
"``is_valid()`` method is used to check for validity, the ``is_multipart()`` "
"method is used to determine whether a form requires multipart file upload "
"(and hence whether ``request.FILES`` must be passed to the form), etc. See :"
"ref:`binding-uploaded-files` for more information."
msgstr ""
"Если не принимать во внимание методы ``save()`` и ``save_m2m()``, то "
"``ModelForm`` работает аналогично обычной ``Form``. Например, метод "
"``is_valid()`` используется для проверки данных, метод ``is_multipart()`` "
"используется для определения загрузки файла (в этом случае ``request.FILES`` "
"должен быть передан форме) и так далее. Обратитесь к документу :ref:`binding-"
"uploaded-files` для получения подробностей."

# 66fb655a5e90487bab93dc4b9236f8bb
#: ../../topics/forms/modelforms.txt:409
msgid "Selecting the fields to use"
msgstr "Указываем какие поля использовать"

# c6bfbfe020e14f2c855848debf457193
#: ../../topics/forms/modelforms.txt:411
msgid ""
"It is strongly recommended that you explicitly set all fields that should be "
"edited in the form using the ``fields`` attribute. Failure to do so can "
"easily lead to security problems when a form unexpectedly allows a user to "
"set certain fields, especially when new fields are added to a model. "
"Depending on how the form is rendered, the problem may not even be visible "
"on the web page."
msgstr ""
"Настоятельно рекомендуем явно указать все поля отображаемые в форме, "
"используя параметр ``fields``. Иначе по ошибке, при добавлении нового поля в "
"модель, можно позволить его редактировать пользователям и таким образом "
"создать уязвимость. В зависимости от способа рендеринга формы, такая ошибка "
"может быть не легко заметна на сайте."

# c2e50a27fc8241f4ae9c37dc39fd7cca
#: ../../topics/forms/modelforms.txt:417
msgid ""
"The alternative approach would be to include all fields automatically, or "
"blacklist only some. This fundamental approach is known to be much less "
"secure and has led to serious exploits on major websites (e.g. `GitHub "
"<https://github.com/blog/1068-public-key-security-vulnerability-and-"
"mitigation>`_)."
msgstr ""
"Самый простой способ указать поля - автоматически добавить все или исключить "
"определенные. Но такой способ не безопасен (например, случай на `GitHub "
"<https://github.com/blog/1068-public-key-security-vulnerability-and-"
"mitigation>`_)."

# f9d5104c7f8548ad9ee512b690f293a0
#: ../../topics/forms/modelforms.txt:422
msgid ""
"There are, however, two shortcuts available for cases where you can "
"guarantee these security concerns do not apply to you:"
msgstr ""
"Но если вы уверены в том, что делаете, вот как использовать этот подход:"

# 1c77fa41cf624ea1b20172730760b177
#: ../../topics/forms/modelforms.txt:425
msgid ""
"Set the ``fields`` attribute to the special value ``'__all__'`` to indicate "
"that all fields in the model should be used. For example::"
msgstr ""
"В параметре ``fields`` указать специальное значение ``'__all__'``, которое "
"указывает использовать все поля модели. Например::"

# 98d3e8ed99a64c71aed78c134b8e0716
#: ../../topics/forms/modelforms.txt:435
msgid ""
"Set the ``exclude`` attribute of the ``ModelForm``’s inner ``Meta`` class to "
"a list of fields to be excluded from the form."
msgstr ""
"Используйте атрибут ``exclude`` внутреннего класса ``ModelForm.Meta``. Этот "
"атрибут, если он указан, должен содержать список имён полей, которые не "
"должны отображаться на форме."

# 6bacf02656f74343a4c19917c14b66fd
#: ../../topics/forms/modelforms.txt:445
msgid ""
"Since the ``Author`` model has the 3 fields ``name``, ``title`` and "
"``birth_date``, this will result in the fields ``name`` and ``birth_date`` "
"being present on the form."
msgstr ""
"Так как модель ``Author`` содержит три поля: 'name', 'title ' и "
"'birth_date', то форма будут отображать поля ``name`` и ``birth_date``."

# 77467b71d5284b088c10850affb9fa32
#: ../../topics/forms/modelforms.txt:449
msgid ""
"If either of these are used, the order the fields appear in the form will be "
"the order the fields are defined in the model, with ``ManyToManyField`` "
"instances appearing last."
msgstr ""
"При использовании одного из этих способов, порядок полей в форме будет "
"аналогичен порядку полей в модели,  ``ManyToManyField`` поля будут в конце."

# 6ab6a0e1d09b49f3ab49f08f2f8f3140
#: ../../topics/forms/modelforms.txt:453
msgid ""
"In addition, Django applies the following rule: if you set "
"``editable=False`` on the model field, *any* form created from the model via "
"``ModelForm`` will not include that field."
msgstr ""
"Если поле модели содержит ``editable=False``, *каждая* форма, созданная по "
"модели с помощью ``ModelForm``, не будет включать в себя это поле."

# 9315e8685d854d4d9bea2c4bdd273879
#: ../../topics/forms/modelforms.txt:459
msgid ""
"Any fields not included in a form by the above logic will not be set by the "
"form's ``save()`` method. Also, if you manually add the excluded fields back "
"to the form, they will not be initialized from the model instance."
msgstr ""
"Поля, которые не определены в форме, не будут учитываться при вызове метода "
"``save()``. Также, если вы вручную добавите в форму исключенные поля, то они "
"не будут заполняться из экземпляра модели."

# 731018659b9b47aaaa2efdb0caaa79f8
#: ../../topics/forms/modelforms.txt:464
msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model "
"does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr ""
"Django будет препятствовать всем попыткам сохранить неполную модель. Таким "
"образом, если модель требует заполнения определённых полей и для них не "
"предоставлено значение по умолчанию, то сохранить форму для такой модели не "
"получится. Для решения этой проблемы вам потребуется создать экземпляр такой "
"модели, передав ему начальные значения для обязательных, но незаполненных "
"полей::"

# cbd58db7aaf74b5699280af0c082d068
#: ../../topics/forms/modelforms.txt:475
msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra "
"required fields::"
msgstr ""
"В качестве альтернативы, вы можете использовать ``save(commit=False)`` и "
"вручную определить все необходимые поля::"

# 7db6b3fb54084ae7bb6370b986ce44c2
#: ../../topics/forms/modelforms.txt:483
msgid ""
"See the `section on saving forms`_ for more details on using "
"``save(commit=False)``."
msgstr ""
"Обратитесь к разделу `section on saving forms`_ для подробностей по "
"использованию ``save(commit=False)``."

# f082e00437194e1a82dd3cf4cfdbfe5a
#: ../../topics/forms/modelforms.txt:491
msgid "Overriding the default fields"
msgstr "Переопределение стандартных типов полей или виджетов"

# daa9bfa4ac004f5b84ca03a05aba8b7d
#: ../../topics/forms/modelforms.txt:493
msgid ""
"The default field types, as described in the `Field types`_ table above, are "
"sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field for a "
"given model."
msgstr ""
"Стандартные типы полей, описанные выше, имеют целесообразные настройки по "
"умолчанию. Если ваша модель имеет поля типа ``DateField``, то скорее всего "
"вы пожелаете, чтобы форма использовала поле ``DateField`` для его "
"отображения. Но класс ``ModelForm`` представляет широкие возможности по "
"управлению типами полей формы, а также виджетами для их представления."

# cfb04b403700472baa66b4153dc2c5cc
#: ../../topics/forms/modelforms.txt:498
msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the "
"inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr ""
"Для того, чтобы указать собственный виджет для поля, следует использовать "
"атрибут ``widgets`` внутреннего класса ``Meta``. Его значением должен быть "
"словарь, ключами которого являются имена полей, а значениями — классы или "
"экземпляры виджетов."

# f79d9c6bfc624543b497d5210dea7f1a
#: ../../topics/forms/modelforms.txt:502
msgid ""
"For example, if you want the ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr ""
"Например, если необходимо использовать ``CharField`` для того, чтобы поле "
"``name`` модели ``Author`` было представлено в виде ``<textarea>`` вместо "
"стандартного ``<input type=\"text\">``, то вы можете переопределить виджет "
"поля::"

# d3b008aa1e2448289472cd8f17df5a0e
#: ../../topics/forms/modelforms.txt:517
msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., "
"``Textarea(...)``) or classes (e.g., ``Textarea``)."
msgstr ""
"Ещё раз напомним, что аргумент ``widgets`` принимает словарь с  экземплярами "
"(т.е., ``Textarea(...)``) или классами (т.е., ``Textarea``) виджетов."

# 659d76100fe648a297653a1fa74d9885
#: ../../topics/forms/modelforms.txt:520
msgid ""
"Similarly, you can specify the ``labels``, ``help_texts`` and "
"``error_messages`` attributes of the inner ``Meta`` class if you want to "
"further customize a field."
msgstr ""
"Аналогично можно переопределить параметры ``labels``, ``help_texts`` и "
"``error_messages`` указав в ``Meta``."

# 4c0a256cb1ad4adc84d0d3e8f3d22c68
#: ../../topics/forms/modelforms.txt:523
msgid ""
"For example if you wanted to customize the wording of all user facing "
"strings for the ``name`` field::"
msgstr "Например, для переопределим параметры поля ``name``::"

#: ../../topics/forms/modelforms.txt:544
msgid ""
"You can also specify ``field_classes`` to customize the type of fields "
"instantiated by the form."
msgstr ""
"Вы также можете указать ``field_classes``, чтобы настроить типы полей, "
"которые будут использовать формой."

# a73cbe6a513142e9a2e709ffd18a5227
#: ../../topics/forms/modelforms.txt:547
msgid ""
"For example, if you wanted to use ``MySlugFormField`` for the ``slug`` "
"field, you could do the following::"
msgstr ""
"Например, если вы хотите использовать ``MySlugFormField`` для поля ``slug``, "
"вы можете сделать следующее::"

# 3b79ffaaf10b4a0fa1f52ae7ae6ba54b
#: ../../topics/forms/modelforms.txt:562
msgid ""
"Finally, if you want complete control over of a field -- including its type, "
"validators, required, etc. -- you can do this by declaratively specifying "
"fields like you would in a regular ``Form``."
msgstr ""
"Если вы желаете продолжить настойку поля, включая его тип, метку и так "
"далее, то вы можете декларативно указать поля, как это делается при "
"использовании ``Form``."

# 0601e0f0e9b942e8a7a560acfeb9153d
#: ../../topics/forms/modelforms.txt:566
msgid ""
"If you want to specify a field's validators, you can do so by defining the "
"field declaratively and setting its ``validators`` parameter::"
msgstr ""
"Чтобы переопределить валидаторы поля, укажите их в аргументе ``validators``::"

# d9d9b48b499548e09e2125f7c174642d
#: ../../topics/forms/modelforms.txt:581
msgid ""
"When you explicitly instantiate a form field like this, it is important to "
"understand how ``ModelForm`` and regular ``Form`` are related."
msgstr ""
"Когда вы явно создаете поле формы, необходимо знать как связанны "
"``ModelForm`` и ``Form``."

# daaa64ea3bba45e2952df535dd1a8e78
#: ../../topics/forms/modelforms.txt:584
msgid ""
"``ModelForm`` is a regular ``Form`` which can automatically generate certain "
"fields. The fields that are automatically generated depend on the content of "
"the ``Meta`` class and on which fields have already been defined "
"declaratively. Basically, ``ModelForm`` will **only** generate fields that "
"are **missing** from the form, or in other words, fields that weren't "
"defined declaratively."
msgstr ""
"``ModelForm`` это дочерний класс ``Form``, который может автоматически "
"создавать поля формы. При создании полей учитываются параметры класса "
"``Meta`` и явно определенные поля формы. ``ModelForm`` автоматически "
"создаст  **только** те поля, которые **отсутствуют** в форме."

# a6986fc2cb544502bf12c020d0d3b6ba
#: ../../topics/forms/modelforms.txt:591
msgid ""
"Fields defined declaratively are left as-is, therefore any customizations "
"made to ``Meta`` attributes such as ``widgets``, ``labels``, ``help_texts``, "
"or ``error_messages`` are ignored; these only apply to fields that are "
"generated automatically."
msgstr ""
"Явно определенные в классе поля создаются как есть, параметры ``Meta``, "
"такие как ``widgets``, ``labels``, ``help_texts`` или ``error_messages``, "
"игнорируются, они учитываются только для создании дополнительных полей."

# 186c7f046000428ba75560e43973d497
#: ../../topics/forms/modelforms.txt:596
msgid ""
"Similarly, fields defined declaratively do not draw their attributes like "
"``max_length`` or ``required`` from the corresponding model. If you want to "
"maintain the behavior specified in the model, you must set the relevant "
"arguments explicitly when declaring the form field."
msgstr ""
"При явном создании поля, Django предполагает, что вы будете определять "
"поведение формы в целом. Следовательно, стандартные атрибуты модели (такие "
"как ``max_length`` или ``required``) не передаются полям формы. Если вам "
"потребуется обеспечить поведение, определённое в модели, вам потребуется "
"явно установить соответствующие аргументы при определении поля формы."

# ecf394c9f4904e0799606e34be5486ab
#: ../../topics/forms/modelforms.txt:601
msgid "For example, if the ``Article`` model looks like this::"
msgstr "Например, если модель ``Article`` выглядит так::"

# 25404a06803f460d8d5675778fba3bcb
#: ../../topics/forms/modelforms.txt:612
msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr ""
"и вы желаете выполнить свою проверку поля ``headline``, оставляя неизменными "
"атрибуты  ``blank`` и ``help_text``, вы можете определить ``ArticleForm`` "
"следующим образом::"

# b7c5f9ea6546430f91604095f70016dd
#: ../../topics/forms/modelforms.txt:627
msgid ""
"You must ensure that the type of the form field can be used to set the "
"contents of the corresponding model field. When they are not compatible, you "
"will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""
"Тип поля формы должен работать с типом значения соответствующего поля "
"модели. Если они не соответствуют - вы получите ``ValueError``."

# 11eb6e116b4342e494cd84848d1054b3
#: ../../topics/forms/modelforms.txt:631
msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr ""
"Обратитесь к `документации на поля формы </ref/forms/fields>`_ для получения "
"дополнительной информации о полях и их аргументах."

# 5f28e2eb531b4f1e8fc7bdf524c4c40d
#: ../../topics/forms/modelforms.txt:636
msgid "Enabling localization of fields"
msgstr "Локализация в полях"

# 93c97d631aa74c3a897e25d4a5ef5577
#: ../../topics/forms/modelforms.txt:638
msgid ""
"By default, the fields in a ``ModelForm`` will not localize their data. To "
"enable localization for fields, you can use the ``localized_fields`` "
"attribute on the ``Meta`` class."
msgstr ""
"По умолчанию поля в ``ModelForm`` не локализируют свои данные. Для "
"локализации полей можно использовать параметр ``localized_fields`` класса "
"``Meta``."

# fb3be5f53bb64b37968cd83878c38bf3
# 1ddf6af813ad4cb2b787c1998c4594a0
#: ../../topics/forms/modelforms.txt:649 ../../topics/forms/modelforms.txt:862
msgid ""
"If ``localized_fields`` is set to the special value ``'__all__'``, all "
"fields will be localized."
msgstr ""
"Если в ``localized_fields`` указать ``'__all__'``, будут локализированы все "
"поля."

# 401017d49e9b43f0a5144a76e81c41a3
#: ../../topics/forms/modelforms.txt:653
msgid "Form inheritance"
msgstr "Наследование форм"

# 247fcf186b2f4776b15b6bb3890aaac0
#: ../../topics/forms/modelforms.txt:655
msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on "
"a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class::"
msgstr ""
"Аналогично обычным формам, вы можете наследоваться ``ModelForm``. Это удобно "
"когда надо добавить дополнительные поля или методы к базовому классу и "
"использовать результат для создания других модельных форм. Например, для "
"класса ``ArticleForm``::"

# b27f96f6ca2d400aa523584573271078
#: ../../topics/forms/modelforms.txt:664
msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""
"Мы создали форму, аналогичную ``ArticleForm``, добавив дополнительную "
"проверку и обработку для поля ``pub_date``."

# 6cc6b3a9466341ea8e677a5c69a9e8d0
#: ../../topics/forms/modelforms.txt:667
msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.exclude`` lists::"
msgstr ""
"Вы также можете наследовать внутренний класс ``Meta``, если требуется внести "
"изменения в списки ``Meta.fields`` или ``Meta.exclude``::"

# 8ceadecabb9347aab44c9bd06e803376
#: ../../topics/forms/modelforms.txt:674
msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the "
"original ``ArticleForm.Meta`` to remove one field."
msgstr ""
"Здесь мы добавили метод из ``EnhancedArticleForm`` и изменили оригинальный "
"``ArticleForm.Meta``, убрав одно поле."

# ad7e17c35565473d83c1afaf8b78852f
#: ../../topics/forms/modelforms.txt:677
msgid "There are a couple of things to note, however."
msgstr "Тем не менее, надо уточнить несколько моментов."

# b1c2ef9193d24d46ad49efd3da9fb750
#: ../../topics/forms/modelforms.txt:679
msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes "
"that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr ""
"Применяются стандартные правила языка Python для разрешения имён. Если ваш "
"класс унаследован от нескольких базовых классов, которые обладают внутренним "
"классом ``Meta``, и для него не определён собственный ``Meta`` класс, то "
"этот класс будет унаследован из первого базового."

# 6b00a9205c574e559005ec43e8975ca0
#: ../../topics/forms/modelforms.txt:684
msgid ""
"It's possible to inherit from both ``Form`` and ``ModelForm`` "
"simultaneously, however, you must ensure that ``ModelForm`` appears first in "
"the MRO. This is because these classes rely on different metaclasses and a "
"class can only have one metaclass."
msgstr ""
"Можно унаследоваться одновременно от ``Form`` и ``ModelForm``, однако, "
"``ModelForm`` должен быть первым в MRO. Т.к. эти классы используют разные "
"мета-классы, а класс может использовать только один метакласс."

# d40cd9562c4b4fac8f340502bab959a6
#: ../../topics/forms/modelforms.txt:689
msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name to be ``None`` on the subclass."
msgstr ""
"Можно декларативно удалить ``Field`` родительского класса, указав в названии "
"``None`` в дочернем классе."

# ffe8899d68a84376bae10d6667c165ab
#: ../../topics/forms/modelforms.txt:692
msgid ""
"You can only use this technique to opt out from a field defined "
"declaratively by a parent class; it won't prevent the ``ModelForm`` "
"metaclass from generating a default field. To opt-out from default fields, "
"see :ref:`modelforms-selecting-fields`."
msgstr ""
"Таким способом можно исключить только те поля, которые были декларативно "
"описаны в родительском классе. Поле ``ModelForm`` будет в любом случае "
"созданы мета-классом. Чтобы переопределить их, используйте метод описанный "
"в :ref:`modelforms-selecting-fields`."

# bec2e37221ba4c58b2b567d880e1522e
#: ../../topics/forms/modelforms.txt:698 ../../topics/forms/modelforms.txt:866
msgid "Providing initial values"
msgstr "Передача начальных значений"

# e0df0c6377064cb589cda8a491596b51
#: ../../topics/forms/modelforms.txt:700
msgid ""
"As with regular forms, it's possible to specify initial data for forms by "
"specifying an ``initial`` parameter when instantiating the form. Initial "
"values provided this way will override both initial values from the form "
"field and values from an attached model instance. For example::"
msgstr ""
"Аналогично обычным формам, есть возможность указать начальные данные, "
"передав параметр ``initial`` при создании экземпляра формы. Предоставленные "
"таким образом начальные данные переопределят начальные данные самих полей "
"формы и значения из подключенного экземпляра модели. Например::"

# 2a05f43c6779479b92cad5459cf34526
#: ../../topics/forms/modelforms.txt:715
msgid "ModelForm factory function"
msgstr "Функция-фабрика модельных форм"

# fe302a8e5f3c44c1a1bbc9b556b8cb77
#: ../../topics/forms/modelforms.txt:717
msgid ""
"You can create forms from a given model using the standalone function :func:"
"`~django.forms.models.modelform_factory`, instead of using a class "
"definition. This may be more convenient if you do not have many "
"customizations to make::"
msgstr ""
"Вы можете создать форму по модели используя функцию :func:`~django.forms."
"models.modelform_factory`, вместо создания класса. В некоторых случаях это "
"более удобный способ::"

# 62bd386c8a5f48b98a8d079cf3ac5f47
#: ../../topics/forms/modelforms.txt:726
msgid ""
"This can also be used to make simple modifications to existing forms, for "
"example by specifying the widgets to be used for a given field::"
msgstr ""
"Можно указать определенные настройки для формы, например отображаемые поля::"

# 09c66c36fda84498b11b9d43e9e5ada9
#: ../../topics/forms/modelforms.txt:733
msgid ""
"The fields to include can be specified using the ``fields`` and ``exclude`` "
"keyword arguments, or the corresponding attributes on the ``ModelForm`` "
"inner ``Meta`` class. Please see the ``ModelForm`` :ref:`modelforms-"
"selecting-fields` documentation."
msgstr ""
"Указать используемые поля можно с помощью аргументов ``fields`` и "
"``exclude``. Смотрите описание ``ModelForm`` :ref:`modelforms-selecting-"
"fields`."

# 9d3a0f655e21482b9a85348448f8413c
#: ../../topics/forms/modelforms.txt:738
msgid "... or enable localization for specific fields::"
msgstr "... или включить локализацию для полей::"

# 98b8d4e21eb549d48d05f8e2b89c5426
#: ../../topics/forms/modelforms.txt:745
msgid "Model formsets"
msgstr "Наборы модельных форм"

# ebc94c9e61204b4f877e77c08aaeee6f
#: ../../topics/forms/modelforms.txt:749
msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes that make it easy to work with Django "
"models. Let's reuse the ``Author`` model from above::"
msgstr ""
"Аналогично :doc:`наборам обычных форм </topics/forms/formsets>`, Django "
"представляет ряд расширенных классов наборов форм, которые упрощают "
"взаимодействие с моделями Django. Давайте воспользуемся моделью ``Author``::"

# f36a7f29ae364090a72fdaf5327bfc05
#: ../../topics/forms/modelforms.txt:757
msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields "
"to exclude::"
msgstr ""
"Использование аргумента``fields`` ограничивает набор форм указанным списком "
"полей. В качестве альтернативы можно определить список полей, которые не "
"должны отображаться на формах. Сделать это можно с помощью аргумента "
"``exclude``::"

# 86817225edf141808fd7c7628b49e7f8
#: ../../topics/forms/modelforms.txt:763
msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""
"Этот код создаст набор форм, которые будут работать с данными модели "
"``Author``. По функционалу набор модельных форм аналогичен набору обычных "
"форм::"

# aff5ba1db79e44d79a724f5914a7819b
#: ../../topics/forms/modelforms.txt:779
msgid ""
":func:`~django.forms.models.modelformset_factory` uses :func:`~django.forms."
"formsets.formset_factory` to generate formsets. This means that a model "
"formset is just an extension of a basic formset that knows how to interact "
"with a particular model."
msgstr ""
":func:`~django.forms.models.modelformset_factory` использует фабрику обычных "
"форм :func:`~django.forms.formsets.formset_factory` для создания набора "
"форм. Это означает, что функционал модельных форм является надстройкой над "
"функционалом набора обычных форм."

# dd188a6bbbe74719849843964c4c9303
#: ../../topics/forms/modelforms.txt:785
msgid "Changing the queryset"
msgstr "Изменение выборки"

# ae9ecc3c009a4ba3b423bd34196f4072
#: ../../topics/forms/modelforms.txt:787
msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., ``Author.objects."
"all()``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""
"По умолчанию, при создании набора модельных форм используется выборка, "
"которая содержит все объекты модели (т.е., ``Author.objects.all()``). Такое "
"поведение можно скорректировать, используя аргумент ``queryset``::"

# a4f8f86d90d74f88b2f6cb001ab7b58c
#: ../../topics/forms/modelforms.txt:794
msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr ""
"Также вы можете унаследоваться от класса набора модельных форм и определить "
"``self.queryset`` в конструкторе, указав необходимые параметры выборки::"

# 1181dd5182424a82ae06fb8db0a48b37
#: ../../topics/forms/modelforms.txt:805
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr "Теперь передадим ваш класс ``BaseAuthorFormSet`` в функцию фабрики::"

# 62de07011e974fb2ad273fd4dd3bfee6
#: ../../topics/forms/modelforms.txt:810
msgid ""
"If you want to return a formset that doesn't include *any* pre-existing "
"instances of the model, you can specify an empty QuerySet::"
msgstr ""
"Если требуется создать пустой набор форм, т.е. который не включает *ни одну* "
"существующую модель, то передайте в набор пустую выборку::"

# dd188a6bbbe74719849843964c4c9303
#: ../../topics/forms/modelforms.txt:816
msgid "Changing the form"
msgstr "Изменение формы"

# f9237bc99a3e4e2ebb50c05c13471a5e
#: ../../topics/forms/modelforms.txt:818
msgid ""
"By default, when you use ``modelformset_factory``, a model form will be "
"created using :func:`~django.forms.models.modelform_factory`. Often, it can "
"be useful to specify a custom model form. For example, you can create a "
"custom model form that has custom validation::"
msgstr ""
"По умолчанию, когда вы используете ``modelformset_factory``, форма будет "
"создана с помощью :func:`~django.forms.models.modelform_factory`. Часто "
"необходимо указать свою форму. Например, форму с собственной валидацией::"

# 1181dd5182424a82ae06fb8db0a48b37
#: ../../topics/forms/modelforms.txt:832
msgid "Then, pass your model form to the factory function::"
msgstr "Для этого передайте вашу форму в функцию фабрики::"

# b052e29b3bef4f8dad65bd17a08441f7
#: ../../topics/forms/modelforms.txt:836
msgid ""
"It is not always necessary to define a custom model form. The "
"``modelformset_factory`` function has several arguments which are passed "
"through to ``modelform_factory``, which are described below."
msgstr ""
"Вам не обязательно создавать свою форму. Функция ``modelformset_factory`` "
"принимает различный аргументы, которые будут переданы в "
"``modelform_factory``."

# 22a5337464064ed085f3eb692b9ab505
#: ../../topics/forms/modelforms.txt:841
msgid "Specifying widgets to use in the form with ``widgets``"
msgstr "Указываем виджеты полей с помощью ``widgets``"

# 47b2bf4f28cb4aa1b76e8313263f5fb9
#: ../../topics/forms/modelforms.txt:843
msgid ""
"Using the ``widgets`` parameter, you can specify a dictionary of values to "
"customize the ``ModelForm``’s widget class for a particular field. This "
"works the same way as the ``widgets`` dictionary on the inner ``Meta`` class "
"of a ``ModelForm`` works::"
msgstr ""
"Аргумент ``widgets`` позволяет указать словарь переопределяющий виджеты для "
"полей ``ModelForm``. Он работает аналогично параметру ``widgets`` класса "
"``Meta`` ``ModelForm``::"

# 16f996c95b1744629ea0368dd593cea3
#: ../../topics/forms/modelforms.txt:853
msgid "Enabling localization for fields with ``localized_fields``"
msgstr "Включить локализацию для полей с помощью ``localized_fields``"

# 8e5449f7275b47aa9399a849fe0cc7b9
#: ../../topics/forms/modelforms.txt:855
msgid ""
"Using the ``localized_fields`` parameter, you can enable localization for "
"fields in the form."
msgstr ""
"Используя ``localized_fields`` можно включить локализацию для полей формы."

# e0df0c6377064cb589cda8a491596b51
#: ../../topics/forms/modelforms.txt:868
msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned "
"by :func:`~django.forms.models.modelformset_factory`. However, with model "
"formsets, the initial values only apply to extra forms, those that aren't "
"attached to an existing model instance. If the extra forms with initial data "
"aren't changed by the user, they won't be validated or saved."
msgstr ""
"Аналогично набору обычных форм, есть возможность :ref:`указать начальные "
"данные <formsets-initial-data>` для форм набора, передав параметр "
"``initial`` при создании экземпляра набора, возвращенного  :func:`~django."
"forms.models.modelformset_factory`. Тем не менее, в случае набора модельных "
"форм, начальными значениями заполняются только пустые, т.е. новые, формы."

# 2cbdcb04648c43a9b68675b307f8132d
#: ../../topics/forms/modelforms.txt:879
msgid "Saving objects in the formset"
msgstr "Сохранение объектов набора форм"

# a71deea1eff14a8ea9d0134e695281aa
#: ../../topics/forms/modelforms.txt:881
msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method:"
msgstr ""
"Аналогично ``ModelForm``, вы можете сохранять данные в модели. Для этого "
"надо использовать метод ``save()`` набора форм:"

# 4d514823e5a342f48dc52c77717ca008
#: ../../topics/forms/modelforms.txt:892
msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""
"Метод ``save()`` возвращает экземпляры объектов, которые были сохранены в "
"базе данных. Те объекты, данные которых не изменились, не сохраняются в базе "
"данных и не отображаются в возвращаемом значении (``instances`` из "
"предыдущего примера)."

# 2efe6753b19d4ddd8f0dff3e1ad855e3
#: ../../topics/forms/modelforms.txt:897
msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Selecting the fields to use`_."
msgstr ""
"Когда форма содержит не все поля модели (например, потому что некоторые из "
"них были явно исключены), то отсутствующие поля не будут сохранены через "
"метод ``save()``. Подробнее об этом ограничении модельных форм написано в :"
"ref:`Указываем какие поля использовать <modelforms-selecting-fields>`."

# 21efc3324afb49b9b715b4ee6073396a
#: ../../topics/forms/modelforms.txt:902
msgid "Pass ``commit=False`` to return the unsaved model instances:"
msgstr ""
"Передайте ``commit=False``, чтобы получить экземпляры моделей, которые ещё "
"не сохранены в базе данных:"

# 1c0d7f5eea7744a5843cf25e99a640ca
#: ../../topics/forms/modelforms.txt:912
msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll "
"also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""
"Это позволяет вам добавлять данные к экземплярам моделей перед их "
"сохранением в базе данных. Если ваш набор форм содержит  "
"``ManyToManyField``, вам также потребуется вызвать метод ``formset."
"save_m2m()`` для того, чтобы обеспечить сохранение связей «многие-ко-многим»."

# 227d79ae2b564176a8375e55011606c5
#: ../../topics/forms/modelforms.txt:917
msgid ""
"After calling ``save()``, your model formset will have three new attributes "
"containing the formset's changes:"
msgstr ""
"После вызова ``save()``, в класс набора форм будут добавлены атрибуты, "
"содержащие все изменения:"

# 4374320a015d4c68b2d908fd78bb3654
#: ../../topics/forms/modelforms.txt:927
msgid "Limiting the number of editable objects"
msgstr "Ограничение количества редактируемых объектов"

# 8399bc82433f49d7ae46ca0014a34258
#: ../../topics/forms/modelforms.txt:929
msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to :func:`~django.forms.models.modelformset_factory` to limit the "
"number of extra forms displayed."
msgstr ""
"Как и в случае набора обычных форм, вы можете использовать аргументы "
"``max_num`` и ``extra`` функции :func:`~django.forms.models."
"modelformset_factory` для ограничения числа дополнительно отображаемых форм."

# 93079533b0c048e1892bebed0cb84a0c
#: ../../topics/forms/modelforms.txt:933
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""
"Аргумент ``max_num`` не препятствует отображению существующих объектов::"

#: ../../topics/forms/modelforms.txt:943
msgid ""
"Also, ``extra=0`` doesn't prevent creation of new model instances as you "
"can :ref:`add additional forms with JavaScript <understanding-the-"
"managementform>` or just send additional POST data. Formsets `don't yet "
"provide functionality <https://code.djangoproject.com/ticket/26142>`_ for an "
"\"edit only\" view that prevents creation of new instances."
msgstr ""
"Также ``extra=0`` не предотвращает создание нового экземпляра формы т.к. вы "
"можете :ref:`добавить форму с помощью JavaScript <understanding-the-"
"managementform>` или просто отправить дополнительные POST данные. Набор форм "
"`пока не предоставляет возможности <https://code.djangoproject.com/"
"ticket/26142>`_ создавать представления \"только для редактирования\", "
"которые не позволяют создавать новые объекты."

# 1c4c6050be4b405f9d620f84b2e0e9b4
#: ../../topics/forms/modelforms.txt:949
msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""
"Если значение ``max_num`` больше чем количество существующих объектов, то к "
"будет добавлено ``extra`` пустых форм к набору. Так будет происходить до "
"достижения максимального количества форм, ограниченного параметром "
"``max_num``::"

# 178bad3957c546fd9f6d37126c1d1e67
#: ../../topics/forms/modelforms.txt:962
msgid ""
"A ``max_num`` value of ``None`` (the default) puts a high limit on the "
"number of forms displayed (1000). In practice this is equivalent to no limit."
msgstr ""
"Присвоение ``max_num`` значения ``None`` (по умолчанию) устанавливает "
"ограничение на количество отображаемых набором форм равное 1000. На практике "
"это аналогично безлимитному количеству."

# f70bc46b6c804dbbae65071e733a426d
#: ../../topics/forms/modelforms.txt:966
msgid "Using a model formset in a view"
msgstr "Использование набора модельных форм в представлении"

# ac9f99d5fd6046f697dcdb026e1d37a3
#: ../../topics/forms/modelforms.txt:968
msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""
"Наборы модельных форм во многом похожи на наборы обычных форм. Для "
"отображения набора форм для редактирования экземпляров модели ``Author``::"

# 99b1d233559d415193d693024c154e0c
#: ../../topics/forms/modelforms.txt:986
msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""
"Как вы можете видеть, логика представления не сильно отличается отличается "
"логики обычного набора. Отличием является вызов ``formset.save()`` для "
"сохранения данных. (Это было описано ранее в :ref:`saving-objects-in-the-"
"formset`.)"

# 820e97d5f77847e5b4ef56ac30c345f8
#: ../../topics/forms/modelforms.txt:994
msgid "Overriding ``clean()`` on a ``ModelFormSet``"
msgstr "Переопределение ``clean()`` у ``ModelFormSet``"

# ca81213f42d344e3a6d48a4d826f408c
#: ../../topics/forms/modelforms.txt:996
msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``ModelFormSet`` will validate that none of the items in the formset violate "
"the unique constraints on your model (either ``unique``, ``unique_together`` "
"or ``unique_for_date|month|year``).  If you want to override the ``clean()`` "
"method on a ``ModelFormSet`` and maintain this validation, you must call the "
"parent class's ``clean`` method::"
msgstr ""
"Подобно ``ModelForms``, по умолчанию метод ``clean()`` класса "
"``ModelFormSet`` будет проверять все данные на нарушение ограничений "
"уникальности, определённых в вашей модели (``unique``, ``unique_together`` "
"или ``unique_for_date|month|year``).  Желая сохранить данный функционал при "
"переопределении метода ``clean()``, следует вызывать метод ``clean()`` "
"базового класса::"

# 6f055deddf554bc981cbca27b09d0ba9
#: ../../topics/forms/modelforms.txt:1013
msgid ""
"Also note that by the time you reach this step, individual model instances "
"have already been created for each ``Form``. Modifying a value in ``form."
"cleaned_data`` is not sufficient to affect the saved value. If you wish to "
"modify a value in ``ModelFormSet.clean()`` you must modify ``form."
"instance``::"
msgstr ""
"На этом этапе уже будут созданы экземпляры модели для каждой формы. Поменяв "
"``form.cleaned_data``, вы не поменяете сохраняемые значения. Для этого в "
"``ModelFormSet.clean()`` необходимо изменить ``form.instance``::"

# f8171973e5ed403ab552ded4ef0672da
#: ../../topics/forms/modelforms.txt:1032
msgid "Using a custom queryset"
msgstr "Использование собственной выборки"

# 64a342d60a48409f84c4eecf46342787
#: ../../topics/forms/modelforms.txt:1034
msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""
"Как было сказано ранее, в можете переопределить стандартную выборку, которая "
"используется набором модельных форм::"

# 41779a4e2c404091b897fba89c6e4c79
#: ../../topics/forms/modelforms.txt:1055
msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` "
"cases in this example."
msgstr ""
"Следует отметить, что мы передаём аргумент ``queryset`` в обе ветки ``POST`` "
"и ``GET`` в этом примере."

# 8f00e403e1e949108e03a98c37fdefad
#: ../../topics/forms/modelforms.txt:1059
msgid "Using the formset in the template"
msgstr "Использование набора форм в шаблоне"

# e299be46dfa0461991d23dbc47be760d
#: ../../topics/forms/modelforms.txt:1063
msgid "There are three ways to render a formset in a Django template."
msgstr "Существует три способа отображения набора форм в шаблоне Django."

# f1558e75babb4d5ca8add1761898c30d
#: ../../topics/forms/modelforms.txt:1065
msgid "First, you can let the formset do most of the work::"
msgstr "Во-первых, вы можете позволить набору форм самому сделать всю работу::"

# 3422c9f643dd42ef8efe7adf1923d2e2
#: ../../topics/forms/modelforms.txt:1071
msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself::"
msgstr ""
"Во-вторых, в можете вручную вывести набор форм, но позволить его формам "
"отображаться самостоятельно::"

# 9a265fcfa38541408f40c966e2754235
#: ../../topics/forms/modelforms.txt:1081
msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""
"При самостоятельном отображении форм, не забудьте отобразить техническую "
"форму, как было показано выше. Обратитесь к документации на :ref:"
"`технические формы <understanding-the-managementform>`."

# 6bab26c4614b4167894f85bcdc06be66
#: ../../topics/forms/modelforms.txt:1085
msgid "Third, you can manually render each field::"
msgstr "В-третьих, вы можете вывести все поля::"

# 360f2bf54fcf422d9d94e9a45442b73f
#: ../../topics/forms/modelforms.txt:1096
msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""
"Если вы предпочтёте третий способ и не будете использовать ``{% for %}`` для "
"итерации по полям, то вам понадобится вывести поле для первичного ключа. "
"Рассмотрим случай, когда требуется вывести поля ``name`` и ``age`` модели::"

# a44de2d0e964439b9204f648d998e96c
#: ../../topics/forms/modelforms.txt:1111
msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that "
"the model formset, in the ``POST`` case, will work correctly. (This example "
"assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""
"Обратите внимание на то, как мы явно выводим ``{{ form.id }}``. Это "
"гарантирует, что набор модельных форм, в случае ``POST``, будет работать "
"правильно. (Этот пример предполагает, что первичный ключ имеет имя ``id``. "
"Если вы изменили имя первичного ключа, то учтите это в данном примере.)"

# 72f15d1acb3b42c3b477929d232e33d3
#: ../../topics/forms/modelforms.txt:1121
msgid "Inline formsets"
msgstr "Встраиваемые наборы форм"

# 24281fa4db0946d383c94aaeb1ffdec0
#: ../../topics/forms/modelforms.txt:1125
msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These "
"simplify the case of working with related objects via a foreign key. Suppose "
"you have these two models::"
msgstr ""
"Встраиваемые наборы форм являются небольшим абстрактным слоем над набором "
"модельных форм. Они упрощают работу со связанными через внешний ключ "
"объектами. Предположим, у вас есть следующие две модели::"

# 75161a1ab5234c9b89318256c23a22f0
#: ../../topics/forms/modelforms.txt:1138
msgid ""
"If you want to create a formset that allows you to edit books belonging to a "
"particular author, you could do this::"
msgstr ""
"Если вам требуется создать набор форм для редактирования книг, принадлежащих "
"определенному автору, вы можете сделать следующее::"

# 428f1162ee1247178f8ea8f3fa02ab60
#: ../../topics/forms/modelforms.txt:1148
msgid ""
":func:`~django.forms.models.inlineformset_factory` uses :func:`~django.forms."
"models.modelformset_factory` and marks ``can_delete=True``."
msgstr ""
":func:`~django.forms.models.inlineformset_factory` использует :func:`~django."
"forms.models.modelformset_factory` и устанавливает ``can_delete=True``."

# c2a65179f23f4af389217b786c61c6d9
#: ../../topics/forms/modelforms.txt:1154
msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""
":ref:`Ручное управление can_delete и can_order <manually-rendered-can-delete-"
"and-can-order>`."

# 820e97d5f77847e5b4ef56ac30c345f8
#: ../../topics/forms/modelforms.txt:1157
msgid "Overriding methods on an ``InlineFormSet``"
msgstr "Переопределение методов в ``InlineFormSet``"

# cb5168face6d4bda8611bb4247f08a68
#: ../../topics/forms/modelforms.txt:1159
msgid ""
"When overriding methods on ``InlineFormSet``, you should subclass :class:"
"`~models.BaseInlineFormSet` rather than :class:`~models.BaseModelFormSet`."
msgstr ""
"Переопределяя  методы ``InlineFormSet``, лучше наследоваться от :class:"
"`~models.BaseInlineFormSet`, чем от :class:`~models.BaseModelFormSet`."

# baf7fc96f95d4f918f80dacb0710412c
#: ../../topics/forms/modelforms.txt:1163
msgid "For example, if you want to override ``clean()``::"
msgstr "Например, если вы хотите переопределить ``clean()``::"

# fb0c7f229f394767ae3c8fb2f17dfa6b
#: ../../topics/forms/modelforms.txt:1175
msgid "See also :ref:`model-formsets-overriding-clean`."
msgstr "Смотрите также :ref:`model-formsets-overriding-clean`."

# 4111778ec589434fa004d8786588c6ed
#: ../../topics/forms/modelforms.txt:1177
msgid ""
"Then when you create your inline formset, pass in the optional argument "
"``formset``::"
msgstr "Потом при создании набора форм укажите аргумент ``formset``::"

# ba26d089dea242a6bde7a3c75ac4b5a1
#: ../../topics/forms/modelforms.txt:1187
msgid "More than one foreign key to the same model"
msgstr "Более одного внешнего ключа к одной модели"

# 81339f11efe9484eb20fb0630f6ffa32
#: ../../topics/forms/modelforms.txt:1189
msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""
"Если ваша модель имеет больше одного внешнего ключа на одну и ту же модель, "
"вам следует разрешить эту путаницу, указав ``fk_name``. Например, рассмотрим "
"следующую модель::"

# 6edc4239f70f498087e7919caff36c17
#: ../../topics/forms/modelforms.txt:1206
msgid ""
"To resolve this, you can use ``fk_name`` to :func:`~django.forms.models."
"inlineformset_factory`::"
msgstr ""
"Чтобы разрешить эту неопределенность, вы можете использовать ``fk_name`` в  :"
"func:`~django.forms.models.inlineformset_factory`::"

# 0312094e06d745248792909142713204
#: ../../topics/forms/modelforms.txt:1213
msgid "Using an inline formset in a view"
msgstr "Использование вторичного набора форм в представлении"

# 260a270bb7a641bd9583993b9b811977
#: ../../topics/forms/modelforms.txt:1215
msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""
"Вам может понадобиться создать представление, которое позволит пользователю "
"редактировать связанные объекты модели. Вот как это можно сделать::"

# d907f3367fa748b1892a5efb622d4145
#: ../../topics/forms/modelforms.txt:1231
msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""
"Следует отметить, что мы передаём  ``instance`` в обоих (``POST`` и ``GET``) "
"случаях."

# fde980a2bf3b4b54acea89a79de055e0
#: ../../topics/forms/modelforms.txt:1234
msgid "Specifying widgets to use in the inline form"
msgstr "Определение виджетов используемых в наборе форм"

# b0834b9a0a9b43eda78681678a34e904
#: ../../topics/forms/modelforms.txt:1237
msgid ""
"``inlineformset_factory`` uses ``modelformset_factory`` and passes most of "
"its arguments to ``modelformset_factory``. This means you can use the "
"``widgets`` parameter in much the same way as passing it to "
"``modelformset_factory``. See `Specifying widgets to use in the form with "
"widgets`_ above."
msgstr ""
"``inlineformset_factory`` использует ``modelformset_factory`` и передает "
"большинство аргументов в ``modelformset_factory``. Вы можете использовать "
"параметр ``widgets``как и для ``modelformset_factory``. Смотрите `Specifying "
"widgets to use in the form with widgets`_ выше."

# 9b602838f0e44abd8247497932d2af8b
#~ msgid ":class:`CommaSeparatedIntegerField`"
#~ msgstr ":class:`CommaSeparatedIntegerField`"

#~ msgid ":class:`~django.forms.CharField`"
#~ msgstr ":class:`~django.forms.CharField`"

#~ msgid "The ``Meta.field_classes`` attribute was added."
#~ msgstr "Был добавлен атрибут ``Meta.field_classes``."

#~ msgid ""
#~ "In older versions, omitting both ``fields`` and ``exclude`` resulted in a "
#~ "form with all the model's fields. Doing this now raises an :exc:`~django."
#~ "core.exceptions.ImproperlyConfigured` exception."
#~ msgstr ""
#~ "В старых версиях, в форме будут представлены все поля модели, если не "
#~ "определить значения для ``fields`` и ``exclude``. Сейчас такое поведение "
#~ "вызовет исключение :exc:`~django.core.exceptions.ImproperlyConfigured`."

#~ msgid ""
#~ "In older versions, omitting both ``fields`` and ``exclude`` resulted in a "
#~ "formset with all the model's fields. Doing this now raises an :exc:"
#~ "`~django.core.exceptions.ImproperlyConfigured` exception."
#~ msgstr ""
#~ "В старых версиях, в наборе форм будут представлены все поля модели, если "
#~ "не определить значения для ``fields`` и ``exclude``. Сейчас такое "
#~ "поведение вызовет исключение :exc:`~django.core.exceptions."
#~ "ImproperlyConfigured`."

# 51144f9c0eee4707ab8ae9e9c9d9d560
#~ msgid ""
#~ "Before version 1.6, the ``'__all__'`` shortcut did not exist, but "
#~ "omitting the ``fields`` attribute had the same effect. Omitting both "
#~ "``fields`` and ``exclude`` is now deprecated, but will continue to work "
#~ "as before until version 1.8"
#~ msgstr ""
#~ "До 1.6, ``'__all__'`` не существовал, но отсутствие атрибута ``fields`` "
#~ "приводило к аналогичному эффекту. Отсутствие ``fields`` и ``exclude`` "
#~ "одновременно считается устаревшим способом, который будет работать только "
#~ "до 1.8"

# a55d3396f5b44c3c870100b7f44b0683
#~ msgid ""
#~ "The ``labels``, ``help_texts`` and ``error_messages`` options were added."
#~ msgstr ""
#~ "Были добавлены параметры ``labels``, ``help_texts`` и ``error_messages``."

# 7dd39290b9a94f009b4254221714541a
#~ msgid "Controlling which fields are used with ``fields`` and ``exclude``"
#~ msgstr ""
#~ "Управляйте списком отображаемых полей через атрибуты ``fields`` и "
#~ "``exclude``"

# 5d498e1e0918473bb3694a901dec8f82
#~ msgid ""
#~ "By default, a model formset uses all fields in the model that are not "
#~ "marked with ``editable=False``. However, this can be overridden at the "
#~ "formset level::"
#~ msgstr ""
#~ "По умолчанию набор модельных форм использует все поля модели, которые не "
#~ "отмечены как ``editable=False``. Тем не менее, такое поведение может быть "
#~ "изменено на уровне набора форм::"

# 838ac9d9cd1b458f95c64921212cfe55
#~ msgid ""
#~ "For technical reasons, a subclass cannot inherit from both a "
#~ "``ModelForm`` and a ``Form`` simultaneously."
#~ msgstr ""
#~ "По техническим причинам, дочерний класс не может одновременно "
#~ "наследоваться от ``ModelForm`` и ``Form``."

# 90e98409a366483e806a771e430dac7a
#~ msgid ""
#~ "Chances are these notes won't affect you unless you're trying to do "
#~ "something tricky with subclassing."
#~ msgstr ""
#~ "Скорее всего вы с этим не столкнетесь до тех пор, пока не потребуется "
#~ "сделать что-то хитрое, используя наследование."

# 3e19e93afd224658bc0c30e6b943bbc2
#~ msgid "Using a subset of fields on the form"
#~ msgstr "Использование части полей на форме"

# 081d4ece79d34db98892784f68ebb801
#~ msgid ""
#~ "In some cases, you may not want all the model fields to appear on the "
#~ "generated form. There are three ways of telling ``ModelForm`` to use only "
#~ "a subset of the model fields:"
#~ msgstr ""
#~ "В некоторых случаях может потребоваться выводить лишь часть полей модели "
#~ "на форме. Существует три способа указать ``ModelForm``, какие именно поля "
#~ "модели надо использовать:"

# 5dd89b097aa547639cd261216330302a
#~ msgid ""
#~ "Use the ``fields`` attribute of the ``ModelForm``'s inner ``Meta`` "
#~ "class.  This attribute, if given, should be a list of field names to "
#~ "include in the form. The order in which the fields names are specified in "
#~ "that list is respected when the form renders them."
#~ msgstr ""
#~ "Используйте атрибут ``fields`` внутреннего класса ``ModelForm.Meta``. "
#~ "Этот атрибут, если он указан, должен содержать список имён полей, которые "
#~ "должны отображаться на форме. Порядок определения полей в этом списке "
#~ "влияет на порядок полей на форме."

# 3f877e0e0a134d8f8b0cc077f7380711
#~ msgid ""
#~ "For example, if you want a form for the ``Author`` model (defined above) "
#~ "that includes only the ``name`` and ``birth_date`` fields, you would "
#~ "specify ``fields`` or ``exclude`` like this::"
#~ msgstr ""
#~ "Например, если требуется, чтобы форма для модели ``Author`` (определена "
#~ "выше) отображала только поля ``name`` и ``birth_date``, укажите атрибуты "
#~ "``fields`` или ``exclude`` вот так::"

# 4c2079b46f97467e9a845835cbec4dba
#~ msgid ""
#~ "If you want to override a field's default label, then specify the "
#~ "``label`` parameter when declaring the form field::"
#~ msgstr ""
#~ "Если вам требуется изменить стандартную метку у поля, то укажите параметр "
#~ "``label `` при определении поля формы::"

# 22d4a11ae4aa4a4fa9c0bd67a8d1b60c
#~ msgid "Changing the order of fields"
#~ msgstr "Изменение порядка полей"

# 77cb9af5cc8e4904b80082dc8952cf8b
#~ msgid ""
#~ "By default, a ``ModelForm`` will render fields in the same order that "
#~ "they are defined on the model, with ``ManyToManyField`` instances "
#~ "appearing last. If you want to change the order in which fields are "
#~ "rendered, you can use the ``fields`` attribute on the ``Meta`` class."
#~ msgstr ""
#~ "По умолчанию ``ModelForm`` выводит поля в порядке, в котором они "
#~ "определены в модели, добавляя в конец экземпляры ``ManyToManyField``. "
#~ "Если вам потребуется изменить порядок отображения полей, вы можете "
#~ "использовать атрибут ``fields`` класса ``Meta``."

# abe6a4281d5942698af4ce1dc034b837
#~ msgid ""
#~ "The ``fields`` attribute defines the subset of model fields that will be "
#~ "rendered, and the order in which they will be rendered. For example given "
#~ "this model::"
#~ msgstr ""
#~ "Атрибут ``fields`` определяет набор полей модели, подлежащих отображению, "
#~ "и их порядок на форме. Например, рассмотрим эту модель::"

# fbffc4f6bfda4665b5a37f19a5659ce9
#~ msgid ""
#~ "the ``author`` field would be rendered first. If we wanted the title "
#~ "field to be rendered first, we could specify the following ``ModelForm``::"
#~ msgstr ""
#~ "поле ``author`` будет выведено первым. Если же надо первым вывести поле "
#~ "``title``, то определим ``ModelForm`` так::"

# f2f52a7bdc5745359df10677761ea394
#~ msgid "... or which fields should be excluded::"
#~ msgstr "... или какие поля не отображать::"

# d5cce495d6434c27ac8c359e27ff37d0
#~ msgid "You can also specify the widgets to be used for a given field::"
#~ msgstr "Можно также указать виджеты для полей::"
