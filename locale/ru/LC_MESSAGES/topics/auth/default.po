# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2016-03-31 22:55+0300\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# e0f7bb739d3446a5922d1ab4b33cdd73
#: ../../topics/auth/default.txt:3
msgid "Using the Django authentication system"
msgstr "Использование системы аутентификации пользователя"

# 756f55d8e8ed46feacf44944df759a48
#: ../../topics/auth/default.txt:7
msgid ""
"This document explains the usage of Django's authentication system in its "
"default configuration. This configuration has evolved to serve the most "
"common project needs, handling a reasonably wide range of tasks, and has a "
"careful implementation of passwords and permissions. For projects where "
"authentication needs differ from the default, Django supports extensive :doc:"
"`extension and customization </topics/auth/customizing>` of authentication."
msgstr ""
"Этот раздел описывает использование аутентификации пользователя в Django с "
"конфигурацией по умолчанию. Эта конфигурация покрывает требования "
"большинства проектов, предоставляет надежный механизм работы с паролями и "
"правами. Для проектов, которые требуют другой механизм авторизации, Django "
"предоставляет возможность :doc:`настроить механизм авторизации </topics/auth/"
"customizing>`."

# 43aa262211af48dd965204dfc413aa6f
#: ../../topics/auth/default.txt:14
msgid ""
"Django authentication provides both authentication and authorization "
"together and is generally referred to as the authentication system, as these "
"features are somewhat coupled."
msgstr ""
"Django предоставляет возможности аутентификации и авторизации пользователей, "
"обычно этот механизм называют системой аутентификации, т.к. эти функции "
"связаны."

# 56a16ff906f0414a93778ca166c56cb0
#: ../../topics/auth/default.txt:21
#, fuzzy
msgid "``User`` objects"
msgstr "Объект пользователя"

# 61431470beae4d1c9f0b15c9b1caf828
#: ../../topics/auth/default.txt:23
msgid ""
":class:`~django.contrib.auth.models.User` objects are the core of the "
"authentication system. They typically represent the people interacting with "
"your site and are used to enable things like restricting access, registering "
"user profiles, associating content with creators etc. Only one class of user "
"exists in Django's authentication framework, i.e., :attr:`'superusers' "
"<django.contrib.auth.models.User.is_superuser>` or admin :attr:`'staff' "
"<django.contrib.auth.models.User.is_staff>` users are just user objects with "
"special attributes set, not different classes of user objects."
msgstr ""
"Объекты :class:`~django.contrib.auth.models.User` - основа системы "
"аутентификации. Они представляют пользователей сайта и используются для "
"проверки прав доступа, регистрации пользователей, ассоциации данных с "
"пользователями. Для представления пользователей в системе аутентификации "
"используется только один класс, таким образом :attr:`'суперпользователи' "
"<django.contrib.auth.models.User.is_superuser>` или :attr:`'персонал' "
"<django.contrib.auth.models.User.is_staff>` - это такие же объекты "
"пользователей, просто с определёнными атрибутами."

# 2fa48eb1c82840fc987ebdcd0f12899b
#: ../../topics/auth/default.txt:32
msgid "The primary attributes of the default user are:"
msgstr "Основные атрибуты пользователя:"

# 70b0aac02ad841849f9cd661f5181d6f
#: ../../topics/auth/default.txt:34
msgid ":attr:`~django.contrib.auth.models.User.username`"
msgstr ":attr:`~django.contrib.auth.models.User.username`"

# 245444397a6247578419e31908678362
#: ../../topics/auth/default.txt:35
msgid ":attr:`~django.contrib.auth.models.User.password`"
msgstr ":attr:`~django.contrib.auth.models.User.password`"

# 08086d6e45d942fab0c50d5360631ae3
#: ../../topics/auth/default.txt:36
msgid ":attr:`~django.contrib.auth.models.User.email`"
msgstr ":attr:`~django.contrib.auth.models.User.email`"

# 2e6db7b7a30847129a492051df6c686b
#: ../../topics/auth/default.txt:37
msgid ":attr:`~django.contrib.auth.models.User.first_name`"
msgstr ":attr:`~django.contrib.auth.models.User.first_name`"

# 03b759de1b1a4971b787b2878ff906a8
#: ../../topics/auth/default.txt:38
msgid ":attr:`~django.contrib.auth.models.User.last_name`"
msgstr ":attr:`~django.contrib.auth.models.User.last_name`"

# 5b3fe8ca170a4981b3664ab94b15409f
#: ../../topics/auth/default.txt:40
msgid ""
"See the :class:`full API documentation <django.contrib.auth.models.User>` "
"for full reference, the documentation that follows is more task oriented."
msgstr ""
"Подробности смотрите в  :class:`полном описании API <django.contrib.auth."
"models.User>`, текущий раздел больше ориентирован на использование "
"аутентификации."

# 5dfadc871e09447e9c7982aa5303de7f
#: ../../topics/auth/default.txt:46 ../../topics/auth/default.txt:1668
msgid "Creating users"
msgstr "Создание пользователей"

# 75e7175e671a4bd6ae762429df0ff256
#: ../../topics/auth/default.txt:48
msgid ""
"The most direct way to create users is to use the included :meth:`~django."
"contrib.auth.models.UserManager.create_user` helper function::"
msgstr ""
"Самый простой способ создать пользователя -- использовать метод :meth:"
"`~django.contrib.auth.models.UserManager.create_user`::"

# 48bb8e511dda45ed874b9a7b56fa8528
#: ../../topics/auth/default.txt:60
msgid ""
"If you have the Django admin installed, you can also :ref:`create users "
"interactively <auth-admin>`."
msgstr ""
"Если вы используете интерфейс администратора Django, вы можете :ref:`создать "
"пользователя через UI <auth-admin>`."

# cd110d1000e64b3eb1160fed83cf726d
#: ../../topics/auth/default.txt:66
msgid "Creating superusers"
msgstr "Создание суперпользователя"

# f9efb90e781349dbac18e55b815f78b0
#: ../../topics/auth/default.txt:68
msgid "Create superusers using the :djadmin:`createsuperuser` command::"
msgstr ""
"Суперпользователя можно создать с помощью команды :djadmin:"
"`createsuperuser`::"

# e0890c215b374f75a07c6bdbd0231640
#: ../../topics/auth/default.txt:72
#, fuzzy
msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :option:`--username "
"<createsuperuser --username>` or :option:`--email <createsuperuser --email>` "
"options, it will prompt you for those values."
msgstr ""
"Команда попросит ввести пароль. Пользователь будет создан сразу же по "
"завершению команды. Если не указывать :djadminopt:`--username` или :"
"djadminopt:`--email`, команда попросит ввести их."

# eeb93d6376314aed9f48ee8c6c59e3a3
#: ../../topics/auth/default.txt:78 ../../topics/auth/default.txt:1690
msgid "Changing passwords"
msgstr "Смена пароля"

# 520dbed1fc4640d3ac87ed90ee67e971
#: ../../topics/auth/default.txt:80
msgid ""
"Django does not store raw (clear text) passwords on the user model, but only "
"a hash (see :doc:`documentation of how passwords are managed </topics/auth/"
"passwords>` for full details). Because of this, do not attempt to manipulate "
"the password attribute of the user directly. This is why a helper function "
"is used when creating a user."
msgstr ""
"Django не хранит пароль в открытом виде, хранится только хеш (смотрите :doc:"
"`раздел о работе с паролями </topics/auth/passwords>`). Поэтому не советуем "
"менять пароль напрямую. Именно по этой причине пользователь создается через "
"специальную функцию."

# 8690a71f64d14fbab60a346b81d40a7d
#: ../../topics/auth/default.txt:86
msgid "To change a user's password, you have several options:"
msgstr "Пароль можно сменить несколькими способами:"

# aa9df3fbf39e498c881ff816b81c0fe3
#: ../../topics/auth/default.txt:88
#, fuzzy
msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a user's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current system user."
msgstr ""
"Команда :djadmin:`manage.py changepassword *username* <changepassword>` "
"позволяет сменить пароль пользователя через консоль. Команда требует ввести "
"пароль дважды. Если введённые значения совпадают, то пароль будет изменен. "
"Если не указать имя пользователя, команда попробует найти пользователя с "
"именем текущего системного пользователя."

# 12a10a68107c418db565da80bfbc3433
#: ../../topics/auth/default.txt:95
msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""
"Вы можете изменить пароль программно, используя метод :meth:`~django.contrib."
"auth.models.User.set_password()`:"

# 66f8b89b534c40e8999b06b4ce2360be
#: ../../topics/auth/default.txt:105
msgid ""
"If you have the Django admin installed, you can also change user's passwords "
"on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr ""
"Если вы используете интерфейс администратора Django, вы можете изменить "
"пароль, :ref:`используя админку<auth-admin>`."

# a69c94a82c3a43c7994361f880f39ad8
#: ../../topics/auth/default.txt:108
msgid ""
"Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms "
"<built-in-auth-forms>` that may be used to allow users to change their own "
"passwords."
msgstr ""
"Django также предоставляет :ref:`представления <built-in-auth-views>` и :ref:"
"`формы <built-in-auth-forms>`, которые можно использовать при создании "
"страниц для смены пароля пользователем."

# 80bab624281242c3bfcfb397a1747cea
#: ../../topics/auth/default.txt:112
#, fuzzy
msgid ""
"Changing a user's password will log out all their sessions. See :ref:"
"`session-invalidation-on-password-change` for details."
msgstr ""
"При смене пароля будут завершены все сессии пользователя, если вы "
"используете :class:`~django.contrib.auth.middleware."
"SessionAuthenticationMiddleware`. Смотрите :ref:`session-invalidation-on-"
"password-change`."

# 2361fce2471044c89ac0b3c69232a8f7
#: ../../topics/auth/default.txt:116
#, fuzzy
msgid "Authenticating users"
msgstr "Аутентификация пользователей"

# 342377984d9f46279ddb0e17a96057f6
#: ../../topics/auth/default.txt:120
#, fuzzy
msgid ""
"Use :func:`~django.contrib.auth.authenticate()` to verify a set of "
"credentials. It takes credentials as keyword arguments, ``username`` and "
"``password`` for the default case, checks them against each :ref:"
"`authentication backend <authentication-backends>`, and returns a :class:"
"`~django.contrib.auth.models.User` object if the credentials are valid for a "
"backend. If the credentials aren't valid for any backend or if a backend "
"raises :class:`~django.core.exceptions.PermissionDenied`, it returns "
"``None``. For example::"
msgstr ""
"Для аутентификации пользователя по имени и паролю используйте :func:`~django."
"contrib.auth.authenticate()`. Параметры авторизации передаются как "
"именованные аргументы, по умолчанию это ``username`` и ``password``, если "
"пароль и имя пользователя верны, будет возвращен объект :class:`~django."
"contrib.auth.models.User`. Если пароль не правильный, :func:`~django.contrib."
"auth.authenticate()` возвращает ``None``. Например::"

#: ../../topics/auth/default.txt:136
msgid ""
"``request`` is an optional :class:`~django.http.HttpRequest` which is passed "
"on the ``authenticate()`` method of the authentication backends."
msgstr ""

# 93dd315ea87e495d8fce7a788807f681
#: ../../topics/auth/default.txt:141
#, fuzzy
msgid ""
"This is a low level way to authenticate a set of credentials; for example, "
"it's used by the :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware`. Unless you are writing your own authentication "
"system, you probably won't use this. Rather if you're looking for a way to "
"login a user, use the :class:`~django.contrib.auth.views.LoginView`."
msgstr ""
"Это низкоуровневый API для аутентификации; например, он используется в :"
"class:`~django.contrib.auth.middleware.RemoteUserMiddleware`. Если вы не "
"пишете свою систему авторизации, скорее всего вам не понадобится его "
"использовать. Если вам нужно будет ограничить доступ только авторизованным "
"пользователям, используйте декоратор :func:`~django.contrib.auth.decorators."
"login_required`."

# 2014bd1f984f45e3a0cffc1eb992fa0a
#: ../../topics/auth/default.txt:151
msgid "Permissions and Authorization"
msgstr "Права доступа и авторизация"

# 9d0858e01545476687cca85e8752b12a
#: ../../topics/auth/default.txt:153
#, fuzzy
msgid ""
"Django comes with a built-in permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""
"Django предоставляет простую систему проверки прав. Она позволяет добавлять "
"права пользователю или группе пользователей."

# 7d5642d5656041bdaeb2d75708af9885
#: ../../topics/auth/default.txt:156
msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr ""
"Эта система используется админкой Django, но вы можете использовать её и в "
"своем коде."

# 8e711cdecccf4f92805af109b836d98f
#: ../../topics/auth/default.txt:159
msgid "The Django admin site uses permissions as follows:"
msgstr "Админка использует проверку прав следующим образом:"

# 879213096ff143c4837080086530ffd6
#: ../../topics/auth/default.txt:161
#, fuzzy
msgid ""
"Access to view objects is limited to users with the \"view\" or \"change\" "
"permission for that type of object."
msgstr ""
"При удалении объекта проверяется наличие права \"delete\" для объектов этого "
"типа."

# 3d835eb7ce904643922654093fcfad49
#: ../../topics/auth/default.txt:163
msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""
"При доступе к странице добавления объекта проверяется наличие права \"add\" "
"для объектов этого типа."

# a60a80d1405b4580b160f0ad16da00f2
#: ../../topics/auth/default.txt:165
msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""
"При доступе к страницам просмотра списка объектов и изменения объекта "
"проверяется наличие права \"change\" для объектов этого типа."

# 879213096ff143c4837080086530ffd6
#: ../../topics/auth/default.txt:168
msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""
"При удалении объекта проверяется наличие права \"delete\" для объектов этого "
"типа."

# 353a9790fa274f41a443bcc588cd1024
#: ../../topics/auth/default.txt:171
#, fuzzy
msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the :meth:`~django.contrib.admin.ModelAdmin."
"has_view_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` methods provided by the :class:`~django.contrib.admin."
"ModelAdmin` class, it is possible to customize permissions for different "
"object instances of the same type."
msgstr ""
"Права доступа можно добавлять не только типу объекта, но и конкретному "
"объекту. Переопределив методы :meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` и :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` класса :class:`~django.contrib.admin.ModelAdmin`, "
"можно проверять права для конкретного объекта."

# 389b226d1de441f8bb9bc358e879310c
#: ../../topics/auth/default.txt:180
msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`::"
msgstr ""
"Модель :class:`~django.contrib.auth.models.User` содержит связи многое ко "
"многим с таблицами ``groups`` и ``user_permissions``. Объект модели :class:"
"`~django.contrib.auth.models.User` работает со связанными моделями, как и "
"другие :doc:`модели Django </topics/db/models>`::"

# 6cf4ee5cb991470fb6030c96169f85b6
#: ../../topics/auth/default.txt:196
msgid "Default permissions"
msgstr "Права доступа по умолчанию"

# 4f00e716cb8341cfbb2616140525b73e
#: ../../topics/auth/default.txt:198
#, fuzzy
msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that four default permissions -- add, change, "
"delete, and view -- are created for each Django model defined in one of your "
"installed applications."
msgstr ""
"Если добавить приложение ``django.contrib.auth`` в параметр конфигурации :"
"setting:`INSTALLED_APPS`, оно добавит права доступа по умолчанию -- \"add\", "
"\"change\" и \"delete\" -- для каждой модели из установленных приложений."

# cf9073dab12a4f69ab7afbf878b1208a
#: ../../topics/auth/default.txt:203
msgid ""
"These permissions will be created when you run :djadmin:`manage.py migrate "
"<migrate>`; the first time you run ``migrate`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py migrate <migrate>` (the "
"function that creates permissions is connected to the :data:`~django.db."
"models.signals.post_migrate` signal)."
msgstr ""
"Эти права доступа создаются при выполнении команды :djadmin:`manage.py "
"migrate <migrate>`. При первом выполнении ``migrate``, после добавления "
"``django.contrib.auth`` в :setting:`INSTALLED_APPS`, права доступа по "
"умолчанию создаются для всех старых и новых моделей. Впоследствии команда "
"назначает стандартные права на новые модели при каждом запуске :djadmin:"
"`manage.py migrate <migrate>` (функция, которая создаёт права, подключена к "
"сигналу :data:`~django.db.models.signals.post_migrate`)."

# f30c484f907e4bde85ff783a1df84d54
#: ../../topics/auth/default.txt:212
msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""
"Предположим у вас есть приложение с :attr:`~django.db.models.Options."
"app_label` ``foo`` и модель ``Bar``. Чтобы проверить права доступа, "
"используйте:"

# 089dd023370e49af8bb3b0422590995e
#: ../../topics/auth/default.txt:216
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr "add: ``user.has_perm('foo.add_bar')``"

# c9011f5c01a546019d4293d4e8ac8dc2
#: ../../topics/auth/default.txt:217
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr "change: ``user.has_perm('foo.change_bar')``"

# 27cba49d947b453289d9a7fd05a0142a
#: ../../topics/auth/default.txt:218
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr "delete: ``user.has_perm('foo.delete_bar')``"

# 089dd023370e49af8bb3b0422590995e
#: ../../topics/auth/default.txt:219
#, fuzzy
msgid "view: ``user.has_perm('foo.view_bar')``"
msgstr "add: ``user.has_perm('foo.add_bar')``"

# 6e93e6cda1464dfaaeb66a45b7d02f76
#: ../../topics/auth/default.txt:221
msgid ""
"The :class:`~django.contrib.auth.models.Permission` model is rarely accessed "
"directly."
msgstr ""
"Модель :class:`~django.contrib.auth.models.Permission` редко используется "
"напрямую."

# 790f3b7b146b43c6a95a43cb3931c262
#: ../../topics/auth/default.txt:225
msgid "Groups"
msgstr "Группы"

# 8b1280aa6fe94f2cb184e43441724e33
#: ../../topics/auth/default.txt:227
msgid ""
":class:`django.contrib.auth.models.Group` models are a generic way of "
"categorizing users so you can apply permissions, or some other label, to "
"those users. A user can belong to any number of groups."
msgstr ""
"Модель :class:`django.contrib.auth.models.Group` предоставляет возможность "
"группировать пользователей, добавляя им набор прав доступа. Пользователь "
"может принадлежать нескольким группам."

# d91a2ad80d204b54a065742cbd4a19cf
#: ../../topics/auth/default.txt:231
msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""
"Пользователь, добавленный в группу, автоматически получает все права доступа "
"этой группы. Например, если группа ``Site editors`` содержит права доступа "
"``can_edit_home_page``, любой пользователь в этой группе получить это право "
"доступа."

# 1af1d553fb2a4f5f86be54dec41192f9
#: ../../topics/auth/default.txt:235
msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""
"Также группы позволяют группировать пользователей, добавляя метки или "
"дополнительные возможности. Например, вы можете создать группу ``'Special "
"users'``, и написать код, который предоставляет доступ к дополнительному "
"функционалу сайта, или отправлять сообщения только пользователям этой группы."

# c20492a8c1454ab494f73083545df89e
#: ../../topics/auth/default.txt:242
msgid "Programmatically creating permissions"
msgstr "Программное создание прав доступа"

# 724315b2d79046359c9e10c35c2f5dd6
#: ../../topics/auth/default.txt:244
msgid ""
"While :ref:`custom permissions <custom-permissions>` can be defined within a "
"model's ``Meta`` class, you can also create permissions directly. For "
"example, you can create the ``can_publish`` permission for a ``BlogPost`` "
"model in ``myapp``::"
msgstr ""
"Кроме добавления :ref:`своих прав доступа <custom-permissions>` через класс "
"``Meta`` модели, вы также можете создать их напрямую. Например, создадим "
"право доступа ``can_publish`` для модели ``BlogPost`` в приложении "
"``myapp``::"

# 16759c8ea8e9483fb30a9b7de00f6e84
#: ../../topics/auth/default.txt:260
msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""
"Теперь его можно добавить объекту :class:`~django.contrib.auth.models.User` "
"через атрибут ``user_permissions`` или к объекту :class:`~django.contrib."
"auth.models.Group` через атрибут ``permissions``."

#: ../../topics/auth/default.txt:265
msgid "Proxy models need their own content type"
msgstr ""

#: ../../topics/auth/default.txt:267
msgid ""
"If you want to create :ref:`permissions for a proxy model <proxy-models-"
"permissions-topic>`, pass ``for_concrete_model=False`` to :meth:`."
"ContentTypeManager.get_for_model` to get the appropriate ``ContentType``::"
msgstr ""

#: ../../topics/auth/default.txt:276
msgid ""
"In older versions, proxy models use the content type of the concrete model."
msgstr ""

# a35d8be7b44949a7bb931f068da476c0
#: ../../topics/auth/default.txt:280
msgid "Permission caching"
msgstr "Кеширование прав доступа"

# 1867271aefe54c56a26aba088f40ba5b
#: ../../topics/auth/default.txt:282
#, fuzzy
msgid ""
"The :class:`~django.contrib.auth.backends.ModelBackend` caches permissions "
"on the user object after the first time they need to be fetched for a "
"permissions check. This is typically fine for the request-response cycle "
"since permissions aren't typically checked immediately after they are added "
"(in the admin, for example). If you are adding permissions and checking them "
"immediately afterward, in a test or view for example, the easiest solution "
"is to re-fetch the user from the database. For example::"
msgstr ""
":class:`~django.contrib.auth.backends.ModelBackend` кэширует права доступа "
"объекта ``User`` после первого запроса на их получение. Такой подход удобен "
"для цикла запрос-ответ, т.к. права доступа редко проверяются сразу же после "
"их изменения (например, в админке). Если вы изменяете и проверяете права "
"доступа в одном запросе или в тестах, проще всего заново загрузить объект "
"``User`` из базы данных. Например::"

#: ../../topics/auth/default.txt:323
msgid "Proxy models"
msgstr ""

#: ../../topics/auth/default.txt:325
msgid ""
"Proxy models work exactly the same way as concrete models. Permissions are "
"created using the own content type of the proxy model. Proxy models don't "
"inherit the permissions of the concrete model they subclass::"
msgstr ""

#: ../../topics/auth/default.txt:355
msgid ""
"In older versions, permissions for proxy models use the content type of the "
"concrete model rather than content type of the proxy model."
msgstr ""

# 21742463b5c14a7da70e322db73bfb17
#: ../../topics/auth/default.txt:361
msgid "Authentication in Web requests"
msgstr "Аутентификация в запросах"

# e5cd5a3f19634e578f46ed8feeee042e
#: ../../topics/auth/default.txt:363
msgid ""
"Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook "
"the authentication system into :class:`request objects <django.http."
"HttpRequest>`."
msgstr ""
"Django использует :doc:`сессию </topics/http/sessions>` и промежуточный слой "
"для работы системы аутентификации в :class:`объекте запроса <django.http."
"HttpRequest>`."

# da72a5ad77754a17a0ab826a7b5282da
#: ../../topics/auth/default.txt:366
msgid ""
"These provide a :attr:`request.user <django.http.HttpRequest.user>`  "
"attribute on every request which represents the current user. If the current "
"user has not logged in, this attribute will be set to an instance of :class:"
"`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an "
"instance of :class:`~django.contrib.auth.models.User`."
msgstr ""
"Этот механизм предоставляет атрибут :attr:`request.user <django.http."
"HttpRequest.user>`  для каждого запроса, который возвращает текущего "
"пользователя. Если текущий пользователь не авторизован, атрибут содержит "
"экземпляр :class:`~django.contrib.auth.models.AnonymousUser`, иначе "
"экземпляр :class:`~django.contrib.auth.models.User`."

# a72be288d2614118a4de50b0210e70b4
#: ../../topics/auth/default.txt:372
#, fuzzy
msgid ""
"You can tell them apart with :attr:`~django.contrib.auth.models.User."
"is_authenticated`, like so::"
msgstr ""
"Различить их можно с помощью метода :meth:`~django.contrib.auth.models.User."
"is_authenticated()`::"

# 0f4ef0038f774a9490d38e8c283a3cb0
#: ../../topics/auth/default.txt:385
msgid "How to log a user in"
msgstr "Как авторизовать пользователя"

# 6dd4311786464552ae77688adfef4e46
#: ../../topics/auth/default.txt:387
msgid ""
"If you have an authenticated user you want to attach to the current session "
"- this is done with a :func:`~django.contrib.auth.login` function."
msgstr ""
"Если вы ходите привязать к сессии авторизованного пользователя, используйте "
"функцию :func:`~django.contrib.auth.login`."

# 0b60204e250a4bca99f86b04e2ccf471
#: ../../topics/auth/default.txt:392
msgid ""
"To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework."
msgstr ""
"Чтобы авторизовать пользователя в представлении, используйте функцию :func:"
"`~django.contrib.auth.login()`. Она принимает объект :class:`~django.http."
"HttpRequest` и объект :class:`~django.contrib.auth.models.User`. Функция :"
"func:`~django.contrib.auth.login()` сохраняет идентификатор пользователя в "
"сессии, используя Django приложение для работы с сессиями."

# 1054cd88e0414f7b8c91952f049cd90b
#: ../../topics/auth/default.txt:398
msgid ""
"Note that any data set during the anonymous session is retained in the "
"session after a user logs in."
msgstr ""
"Следует отметить, что любые данные установленные в анонимной сессии будут "
"сохранены в сессии пользователя после его авторизации."

# 3893196cfddc4961a764277b68549ad1
#: ../../topics/auth/default.txt:401
msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""
"Данные пример показывает как вы можете использовать обе функции :func:"
"`~django.contrib.auth.authenticate()` и :func:`~django.contrib.auth."
"login()`::"

# e0f7bb739d3446a5922d1ab4b33cdd73
#: ../../topics/auth/default.txt:420
#, fuzzy
msgid "Selecting the authentication backend"
msgstr "Использование системы аутентификации пользователя"

#: ../../topics/auth/default.txt:422
msgid ""
"When a user logs in, the user's ID and the backend that was used for "
"authentication are saved in the user's session. This allows the same :ref:"
"`authentication backend <authentication-backends>` to fetch the user's "
"details on a future request. The authentication backend to save in the "
"session is selected as follows:"
msgstr ""

#: ../../topics/auth/default.txt:428
msgid "Use the value of the optional ``backend`` argument, if provided."
msgstr ""

#: ../../topics/auth/default.txt:429
msgid ""
"Use the value of the ``user.backend`` attribute, if present. This allows "
"pairing :func:`~django.contrib.auth.authenticate()` and :func:`~django."
"contrib.auth.login()`: :func:`~django.contrib.auth.authenticate()` sets the "
"``user.backend`` attribute on the user object it returns."
msgstr ""

#: ../../topics/auth/default.txt:434
msgid ""
"Use the ``backend`` in :setting:`AUTHENTICATION_BACKENDS`, if there is only "
"one."
msgstr ""

#: ../../topics/auth/default.txt:436
msgid "Otherwise, raise an exception."
msgstr ""

#: ../../topics/auth/default.txt:438
msgid ""
"In cases 1 and 2, the value of the ``backend`` argument or the ``user."
"backend`` attribute should be a dotted import path string (like that found "
"in :setting:`AUTHENTICATION_BACKENDS`), not the actual backend class."
msgstr ""

# a6186ec84e594d0a8a310e2028927967
#: ../../topics/auth/default.txt:443
msgid "How to log a user out"
msgstr "Как отменить авторизацию пользователя"

# 2d7591027bfb4b939e7b089e50caa0fa
#: ../../topics/auth/default.txt:447
msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth."
"login()`, use :func:`django.contrib.auth.logout()` within your view. It "
"takes an :class:`~django.http.HttpRequest` object and has no return value. "
"Example::"
msgstr ""
"Для отмены авторизации пользователя, который был авторизован с помощью "
"функции :func:`django.contrib.auth.login()`, следует использовать функцию :"
"func:`django.contrib.auth.logout()` в коде вашего представления. Функция "
"принимает объект :class:`~django.http.HttpRequest` и не возвращает никаких "
"значений. Например::"

# 26675a801e3245e2bab6207784fc0e04
#: ../../topics/auth/default.txt:459
msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""
"Следует отметить, что функция :func:`~django.contrib.auth.logout()` не "
"выбрасывает никаких ошибок, если пользователь не был ранее авторизован."

# 4f1724640d1c411eb111bc10b79e293d
#: ../../topics/auth/default.txt:462
msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same Web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth."
"logout()`."
msgstr ""
"При вызове функции :func:`~django.contrib.auth.logout()` в рамках текущего "
"запроса будут очищены все данные сессии. Все существующие данные будут "
"стёрты. Это происходит для того, чтобы предотвратить возможность доступа к "
"этим данным для другого пользователя, который будет использовать тот же "
"браузер для своей авторизации. Если потребуется поместить некие данные в "
"сессию, которые должны быть доступны пользователя сразу после отмены его "
"авторизации, выполняйте это *после* вызова функции :func:`django.contrib."
"auth.logout()`."

# 7cd8c71a10dc4d4ea22fde81f3e8f60b
#: ../../topics/auth/default.txt:471
msgid "Limiting access to logged-in users"
msgstr "Ограничение доступа для неавторизованных пользователей"

# 5d1d011cb0f44a8dabc918f7fe881220
#: ../../topics/auth/default.txt:474
msgid "The raw way"
msgstr "Прямой путь"

# b9b1c90dcfd64c94be359e07b020920a
#: ../../topics/auth/default.txt:476
#, fuzzy
msgid ""
"The raw way to limit access to pages is to check :attr:`request.user."
"is_authenticated <django.contrib.auth.models.User.is_authenticated>` and "
"either redirect to a login page::"
msgstr ""
"Самым простым способом ограничить доступ к страницам является использование "
"метода :meth:`request.user.is_authenticated() <django.contrib.auth.models."
"User.is_authenticated()>` и, при необходимости, перенаправление на страницу "
"авторизации::"

# 20832875276d48a7a71ff7f6d6446725
#: ../../topics/auth/default.txt:489
msgid "...or display an error message::"
msgstr "... или отображение сообщения об ошибке::"

# 6577929e165f41a59244836813e285a0
#: ../../topics/auth/default.txt:501
msgid "The ``login_required`` decorator"
msgstr "Декоратор login_required"

# edfd16ff7f02488782149e95242642b9
#: ../../topics/auth/default.txt:505
msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""
"Для краткости кода вы можете использовать декоратор :func:`~django.contrib."
"auth.decorators.login_required`::"

# 2527c260c3094dc4b25470d07fa61e05
#: ../../topics/auth/default.txt:514
msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""
"Функция :func:`~django.contrib.auth.decorators.login_required` делает "
"следующее:"

# 292712e196104112bdae3d6ab53821c5
#: ../../topics/auth/default.txt:516
msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""
"Если пользователь не авторизован, то перенаправляет его на URL, указанный в "
"параметре конфигурации :setting:`settings.LOGIN_URL <LOGIN_URL>`, передавая "
"текущий абсолютный путь в запросе. Например: ``/accounts/login/?next=/"
"polls/3/``."

# 2740aea0c6c04c2884dc7aeed8e1b436
#: ../../topics/auth/default.txt:520
msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""
"Если пользователь авторизован, то выполняет код представления. В коде "
"представления не требуется выполнять проверку авторизован ли пользователь "
"или нет."

# 7958899931c9480eaf34a4068fed887d
#: ../../topics/auth/default.txt:523
msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""
"По умолчанию, в параметре ``\"next\"`` строки запроса хранится путь, по "
"которому должен быть перенаправлен пользователь в результате успешной "
"аутентификации. Если вам потребуется использовать другое имя для этого "
"параметра, то воспользуйтесь необязательным аргументом  "
"``redirect_field_name`` декоратора :func:`~django.contrib.auth.decorators."
"login_required`::"

# 90efaadf5dbf44218ad9546fc9da96e4
#: ../../topics/auth/default.txt:535
msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""
"Следует отметить, что если вы воспользуетесь аргументом "
"``redirect_field_name``, то вам скорее всего потребуется внести изменения в "
"ваш шаблон авторизации, так как переменная контекста шаблона, которая "
"содержит путь перенаправления, будет использовать значение аргумента "
"``redirect_field_name`` в качестве своего ключа, а не стандартное значение ``"
"\"next\"``."

# 11efbe28f4ab4239acbf36c86fc47726
#: ../../topics/auth/default.txt:540
msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""
"Декоратор :func:`~django.contrib.auth.decorators.login_required` также "
"принимает необязательный аргумент ``login_url``. Например::"

#: ../../topics/auth/default.txt:549
msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login "
"view are properly associated. For example, using the defaults, add the "
"following lines to your URLconf::"
msgstr ""
"Следует отметить, что если вы не укажите аргумент ``login_url``, то вам "
"потребуется проверить параметр конфигурации :setting:`settings.LOGIN_URL "
"<LOGIN_URL>` и ваше представление для авторизации соответственно настроены. "
"Например, пользуясь стандартным поведением, добавьте следующие строки к "
"вашей схеме URL::"

# 02fefa605bb54f20a43348d29506c785
#: ../../topics/auth/default.txt:558
msgid ""
"The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function "
"names and :ref:`named URL patterns <naming-url-patterns>`. This allows you "
"to freely remap your login view within your URLconf without having to update "
"the setting."
msgstr ""
"Параметр конфигурации :setting:`settings.LOGIN_URL <LOGIN_URL>` также "
"принимает имена представлений и :ref:`именованные шаблоны URL <naming-url-"
"patterns>`. Это позволяет вам свободно переносить ваше представление для "
"авторизации пользователя внутри схемы URL без необходимости изменения "
"настроек."

# a25e12a74665404f8633653bd4c4fe18
#: ../../topics/auth/default.txt:565
#, fuzzy
msgid ""
"The ``login_required`` decorator does NOT check the ``is_active`` flag on a "
"user, but the default :setting:`AUTHENTICATION_BACKENDS` reject inactive "
"users."
msgstr ""
"Декоратор :func:`~django.contrib.auth.decorators.login_required` *не "
"проверяет* свойство ``is_active`` объекта пользователя."

# f809aea2e3c443c8aecde0ff3f64e249
#: ../../topics/auth/default.txt:571
msgid ""
"If you are writing custom views for Django's admin (or need the same "
"authorization check that the built-in views use), you may find the :func:"
"`django.contrib.admin.views.decorators.staff_member_required` decorator a "
"useful alternative to ``login_required()``."
msgstr ""
"Если вы создаёте собственные представления для интерфейса администратора "
"(или вам нужна та же аутентификация, что используются встроенными "
"представлениями), то вам может пригодиться декоратор :func:`django.contrib."
"admin.views.decorators.staff_member_required` в качестве полезной "
"альтернативы ``login_required()``."

# b90001c4fa644b84b2c5dcb882d707e4
#: ../../topics/auth/default.txt:579
msgid "The ``LoginRequired`` mixin"
msgstr "Примесь ``LoginRequired``"

# 502274322f454e02882d2ddf27e234e5
#: ../../topics/auth/default.txt:581
msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can achieve the same behavior as with ``login_required`` by using the "
"``LoginRequiredMixin``. This mixin should be at the leftmost position in the "
"inheritance list."
msgstr ""
"При использовании :doc:`CBV представлений </topics/class-based-views/"
"index>`, вы можете получить поведение аналогичное ``login_required``, "
"используя примесь ``LoginRequiredMixin``. Эта примесь должна быть указана в "
"самом начале списка наследования."

# 5b5f195ee6ed4767a9cf1962b6a5a3da
#: ../../topics/auth/default.txt:588
msgid ""
"If a view is using this mixin, all requests by non-authenticated users will "
"be redirected to the login page or shown an HTTP 403 Forbidden error, "
"depending on the :attr:`~django.contrib.auth.mixins.AccessMixin."
"raise_exception` parameter."
msgstr ""
"Если представление использует эту примесь, все запросы от "
"неаутентифицированных пользователей будут перенаправлены на страницу "
"аутентификации или будет показана ошибка HTTP 403 Forbidden, это зависит от "
"параметра :attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception`."

# f9575fea1cf040b888c4cb9b4319d929
#: ../../topics/auth/default.txt:593
msgid ""
"You can set any of the parameters of :class:`~django.contrib.auth.mixins."
"AccessMixin` to customize the handling of unauthorized users::"
msgstr ""
"Вы можете установить любой из параметров :class:`~django.contrib.auth.mixins."
"AccessMixin` для управления обработкой неаутентифицированных пользователей::"

# a25e12a74665404f8633653bd4c4fe18
#: ../../topics/auth/default.txt:606
#, fuzzy
msgid ""
"Just as the ``login_required`` decorator, this mixin does NOT check the "
"``is_active`` flag on a user, but the default :setting:"
"`AUTHENTICATION_BACKENDS` reject inactive users."
msgstr ""
"Подобно декоратору :func:`~django.contrib.auth.decorators.login_required`, "
"эта примесь *не проверяет* свойство ``is_active`` объекта пользователя."

# 2ca43fd6586a4a728cb4ed99744e0c05
#: ../../topics/auth/default.txt:613
msgid "Limiting access to logged-in users that pass a test"
msgstr ""
"Ограничение доступа для авторизованных пользователей с помощью "
"дополнительной проверки"

# b2b8d7a07dd64250b2d0b8d71b5eed64
#: ../../topics/auth/default.txt:615
msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""
"Для ограничения доступа пользователям на основе определённых прав или какой-"
"либо другой проверке, вам следует выполнять те же действия, что описаны выше."

#: ../../topics/auth/default.txt:618
#, fuzzy
msgid ""
"You can run your test on :attr:`request.user <django.http.HttpRequest.user>` "
"in the view directly. For example, this view checks to make sure the user "
"has an email in the desired domain and if not, redirects to the login page::"
msgstr ""
"Самым простым способом будет выполнение вашей проверки над :attr:`request."
"user <django.http.HttpRequest.user>` прямо в представлении. Например, эта "
"проверка в представлении проверяет, что пользователь имеет адрес электронной "
"почты на требуемом домене и, если это не так, перенаправляет его на страницу "
"авторизации::"

#: ../../topics/auth/default.txt:631
msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator "
"which performs a redirect when the callable returns ``False``::"
msgstr ""
"Для удобства вы можете использовать декоратор ``user_passes_test``, который "
"выполняет перенаправление в случае, если проверяющая функция возвращает "
"``False``::"

# c0d6300d10854752bc95c075b734faea
#: ../../topics/auth/default.txt:643
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""
"Декоратор :func:`~django.contrib.auth.decorators.user_passes_test` принимает "
"обязательный аргумент: функцию, которая принимает объект :class:`~django."
"contrib.auth.models.User` и возвращает ``True``, если пользователю разрешён "
"доступ к просмотру страницы. Следует отметить, что декоратор :func:`~django."
"contrib.auth.decorators.user_passes_test` не выполняет автоматически "
"проверку, что :class:`~django.contrib.auth.models.User` прошёл авторизацию."

#: ../../topics/auth/default.txt:651
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes two optional "
"arguments:"
msgstr ""
"Декоратор :func:`~django.contrib.auth.decorators.user_passes_test` принимает "
"для необязательных аргумента:"

#: ../../topics/auth/default.txt:657
#, fuzzy
msgid "``login_url``"
msgstr "``login_url``"

#: ../../topics/auth/default.txt:655
msgid ""
"Lets you specify the URL that users who don't pass the test will be "
"redirected to. It may be a login page and defaults to :setting:`settings."
"LOGIN_URL <LOGIN_URL>` if you don't specify one."
msgstr ""
"Позволяет определеть URL на который будут перенаправляться пользователя, "
"которые нее смогут пройти проверку. Это может быть страница авторизации или "
"по умолчанию это будет значение параметра конфигурации :setting:`settings."
"LOGIN_URL <LOGIN_URL>`, если вы не указали никакого значения."

#: ../../topics/auth/default.txt:663
#, fuzzy
msgid "``redirect_field_name``"
msgstr "``redirect_field_name``"

#: ../../topics/auth/default.txt:660
msgid ""
"Same as for :func:`~django.contrib.auth.decorators.login_required`. Setting "
"it to ``None`` removes it from the URL, which you may want to do if you are "
"redirecting users that don't pass the test to a non-login page where there's "
"no \"next page\"."
msgstr ""
"Аналогично декоратору :func:`~django.contrib.auth.decorators."
"login_required`. Присвоение значения ``None`` удаляет соответствующее поле "
"из URL, что может вам потребоваться при перенаправлении пользователей, "
"которые не прошли проверку, на страницу отличную от страницы авторизации."

# 81e432061e4241abb4730ecc982e41f1
#: ../../topics/auth/default.txt:665
msgid "For example::"
msgstr "Например::"

# 5d8757e248d44b3686416d17cebf592b
#: ../../topics/auth/default.txt:675
msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can use the ``UserPassesTestMixin`` to do this."
msgstr ""
"При использовании :doc:`CBV представлений </topics/class-based-views/"
"index>`, вы можете для этой цели применять ``UserPassesTestMixin``."

# 2755fc6df24248bb96a61425dbcd939d
#: ../../topics/auth/default.txt:680
msgid ""
"You have to override the ``test_func()`` method of the class to provide the "
"test that is performed. Furthermore, you can set any of the parameters of :"
"class:`~django.contrib.auth.mixins.AccessMixin` to customize the handling of "
"unauthorized users::"
msgstr ""
"Вы можете переопределить метод ``test_func()`` класса для того, чтобы "
"указать тест, который будет выполнен. Далее, вы можете указать любой "
"параметр :class:`~django.contrib.auth.mixins.AccessMixin` для настройки "
"обработки неаутентифицированных пользователей::"

# 41211f14134b461194b8e55da343aa80
#: ../../topics/auth/default.txt:694
msgid ""
"You can also override the ``get_test_func()`` method to have the mixin use a "
"differently named function for its checks (instead of :meth:`test_func`)."
msgstr ""
"Вы также можете переопределить метод ``get_test_func()``, чтобы заставить "
"примесь использовать по-другому именованную функцию для выполнения проверки "
"(вместо :meth:`test_func`)."

# cc1c66f855534c47b3d0d6daf634e3f0
#: ../../topics/auth/default.txt:698
msgid "Stacking ``UserPassesTestMixin``"
msgstr "Цепочка из ``UserPassesTestMixin``"

# 8cebec458157409d9f2f841d050a4623
#: ../../topics/auth/default.txt:700
msgid ""
"Due to the way ``UserPassesTestMixin`` is implemented, you cannot stack them "
"in your inheritance list. The following does NOT work::"
msgstr ""
"Из-за особенностей реализации ``UserPassesTestMixin``, вы не можете "
"выстроить цепочку наследования. Следующий пример *не работает*::"

# b5cb36dcefa64192b8442b75f13e3192
#: ../../topics/auth/default.txt:714
msgid ""
"If ``TestMixin1`` would call ``super()`` and take that result into account, "
"``TestMixin1`` wouldn't work standalone anymore."
msgstr ""
"Если ``TestMixin1`` вызовет ``super()`` и примет результат в работу, то "
"``TestMixin1`` не будет больше работать в одиночку."

# 58b22415418d422a88f2d580f6aa6be9
#: ../../topics/auth/default.txt:720
msgid "The ``permission_required`` decorator"
msgstr "Декоратор permission_required"

# 29b6661c1e3c46e98e3eeaca0c7269ba
#: ../../topics/auth/default.txt:724
msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr ""
"Довольно частой задачей является проверка наличия определённого права у "
"пользователя. Для решения этой задачи Django предоставляет удобный "
"декоратор :func:`~django.contrib.auth.decorators.permission_required()`::"

# 7ef9e586bb424546af531ebe819c7756
#: ../../topics/auth/default.txt:734
msgid ""
"Just like the :meth:`~django.contrib.auth.models.User.has_perm` method, "
"permission names take the form ``\"<app label>.<permission codename>\"`` (i."
"e. ``polls.can_vote`` for a permission on a model in the ``polls`` "
"application)."
msgstr ""
"Аналогично методу :meth:`~django.contrib.auth.models.User.has_perm`, "
"названия прав указываются в формате ``\"<app label>.<permission codename>"
"\"`` (т.е., ``polls.can_vote`` для права на модель в приложении ``polls``)."

# d96fc49582ae4c149f2aa053af26f8a9
#: ../../topics/auth/default.txt:739
msgid ""
"The decorator may also take an iterable of permissions, in which case the "
"user must have all of the permissions in order to access the view."
msgstr ""
"Декоратор также может принимать перечисление прав, в этом случае "
"пользователь должен обладать всеми правами для того, чтобы получить доступ к "
"представлению."

# 24e4dbad590c4e09888345b8640bce64
#: ../../topics/auth/default.txt:742
msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter::"
msgstr ""
"Следует отметить, что декоратор :func:`~django.contrib.auth.decorators."
"permission_required()` также принимает необязательный аргумент "
"``login_url``::"

# 4ac6964be3874713ada6bc810ef088b4
#: ../../topics/auth/default.txt:751
msgid ""
"As in the :func:`~django.contrib.auth.decorators.login_required` decorator, "
"``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""
"Аналогично декоратору :func:`~django.contrib.auth.decorators."
"login_required` , по умолчанию значение для аргумента ``login_url`` "
"соответствует значению параметра конфигурации :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`."

# 640a7fa5841c4516b14c0b1575786b2f
#: ../../topics/auth/default.txt:754
msgid ""
"If the ``raise_exception`` parameter is given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""
"Если определён аргумент ``raise_exception``, то декоратор будет выбрасывать "
"исключение :exc:`~django.core.exceptions.PermissionDenied` с описанием :ref:"
"`403 (HTTP Forbidden) представление <http_forbidden_view>` вместо "
"перенаправления на страницу авторизации."

# edfd16ff7f02488782149e95242642b9
#: ../../topics/auth/default.txt:759
msgid ""
"If you want to use ``raise_exception`` but also give your users a chance to "
"login first, you can add the :func:`~django.contrib.auth.decorators."
"login_required` decorator::"
msgstr ""
"Если вам надо использовать ``raise_exception``, но также предоставить "
"пользователям шанс сначала аутентифицироваться, вы можете использовать "
"декоратор :func:`~django.contrib.auth.decorators.login_required`::"

#: ../../topics/auth/default.txt:770
msgid ""
"This also avoids a redirect loop when :class:`.LoginView`'s "
"``redirect_authenticated_user=True`` and the logged-in user doesn't have all "
"of the required permissions."
msgstr ""

# 58b22415418d422a88f2d580f6aa6be9
#: ../../topics/auth/default.txt:777
msgid "The ``PermissionRequiredMixin`` mixin"
msgstr "Примесь ``PermissionRequiredMixin``"

# 3a9f7ef2cf7a4101aa0863d0c5267e91
#: ../../topics/auth/default.txt:779
msgid ""
"To apply permission checks to :doc:`class-based views </ref/class-based-"
"views/index>`, you can use the ``PermissionRequiredMixin``:"
msgstr ""
"Для того, чтобы выполнить проверки для :doc:`CBV представлений </ref/class-"
"based-views/index>`, вы можете использовать ``PermissionRequiredMixin``:"

# bfcb5f2d400d4bc390ccde31dc09e535
#: ../../topics/auth/default.txt:784
#, fuzzy
msgid ""
"This mixin, just like the ``permission_required`` decorator, checks whether "
"the user accessing a view has all given permissions. You should specify the "
"permission (or an iterable of permissions) using the ``permission_required`` "
"parameter::"
msgstr ""
"Эта примесь, подобно декоратору ``permisison_required``, проверяет, есть ли "
"у пользователя, который пытается получить доступ к представлению, все "
"необходимые права. Вы можете указать право (или перечисление прав) с помощью "
"параметра ``permission_required``::"

# 66011d9a42904d53bb838e71d3d038fb
#: ../../topics/auth/default.txt:796
msgid ""
"You can set any of the parameters of :class:`~django.contrib.auth.mixins."
"AccessMixin` to customize the handling of unauthorized users."
msgstr ""
"Вы можете установить любые параметры :class:`~django.contrib.auth.mixins."
"AccessMixin` для изменения обработки неаутентифированных пользователей."

# 72c0989b7c604936a3cbfdf4cb4aa217
#: ../../topics/auth/default.txt:800
msgid "You may also override these methods:"
msgstr "Вы также можете переопределить эти методы:"

# d68a786cd9e14e8c94bc9a79e1f7d375
#: ../../topics/auth/default.txt:804
msgid ""
"Returns an iterable of permission names used by the mixin. Defaults to the "
"``permission_required`` attribute, converted to a tuple if necessary."
msgstr ""
"Возвращает перечисления имён прав, используемых примесью. По умолчанию, это "
"содержимое атрибута ``permission_required``, при необходимости "
"преобразованное в кортеж."

# ae47b9694a5f4e97a1c63686ea038869
#: ../../topics/auth/default.txt:810
msgid ""
"Returns a boolean denoting whether the current user has permission to "
"execute the decorated view. By default, this returns the result of calling :"
"meth:`~django.contrib.auth.models.User.has_perms()` with the list of "
"permissions returned by :meth:`get_permission_required()`."
msgstr ""
"Возвращает булево значение, есть ли у текущего пользователя право выполнить "
"декорированное представление. По умолчанию, возвращается результат вызова "
"метода :meth:`~django.contrib.auth.models.User.has_perms()` со списком прав, "
"полученных от метода :meth:`get_permission_required()`."

# 8b92a3697f9b41c6b1f4556f6419042e
#: ../../topics/auth/default.txt:816
msgid "Redirecting unauthorized requests in class-based views"
msgstr "Перенаправление неаутентифицированных запросов в CBV представлениях"

# 4472dfe97ce04a689d7938f0ea8bf782
#: ../../topics/auth/default.txt:818
#, fuzzy
msgid ""
"To ease the handling of access restrictions in :doc:`class-based views </ref/"
"class-based-views/index>`, the ``AccessMixin`` can be used to configure the "
"behavior of a view when access is denied. Authenticated users are denied "
"access with an HTTP 403 Forbidden response. Anonymous users are redirected "
"to the login page or shown an HTTP 403 Forbidden response, depending on the :"
"attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` attribute."
msgstr ""
"Дл упрощения обработки правил доступа в :doc:`CBV представлениях </ref/class-"
"based-views/index>`, примесь ``AccessMixin`` может быть использовано для "
"перенаправления пользователя на страницу аутентификации или выбросить ошибку "
"HTTP 403 Forbidden."

# 7a89651674624f4ebbaccda761325e9c
#: ../../topics/auth/default.txt:829
msgid ""
"Default return value for :meth:`get_login_url`.  Defaults to ``None`` in "
"which case :meth:`get_login_url` falls back to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`."
msgstr ""
"Стандартное значение для :meth:`get_login_url`.  По умолчанию, ``None``, в "
"этом случае метод :meth:`get_login_url` возвратит :setting:`settings."
"LOGIN_URL <LOGIN_URL>`."

# 89405eaa64ea4bdc9ab12ca7a05c8e77
#: ../../topics/auth/default.txt:835
msgid ""
"Default return value for :meth:`get_permission_denied_message`. Defaults to "
"an empty string."
msgstr ""
"Стандартное значение для :meth:`get_permission_denied_message`. По "
"умолчанию, пустая строка."

# f20799241fa84c51ae3fb29657408e54
#: ../../topics/auth/default.txt:840
msgid ""
"Default return value for :meth:`get_redirect_field_name`. Defaults to ``"
"\"next\"``."
msgstr ""
"Стандартное значение для :meth:`get_redirect_field_name`. По умолчанию, ``"
"\"next\"``."

# 53a12eb7ea1543588d66c84b3e8d0f8c
#: ../../topics/auth/default.txt:845
#, fuzzy
msgid ""
"If this attribute is set to ``True``, a :class:`~django.core.exceptions."
"PermissionDenied` exception is raised when the conditions are not met.  When "
"``False`` (the default), anonymous users are redirected to the login page."
msgstr ""
"Если этот атрибут установлен в ``True``, то вместо перенаправления будет "
"выброшено исключение :class:`~django.core.exceptions.PermissionDenied`. По "
"умолчанию, ``False``."

#: ../../topics/auth/default.txt:852
msgid ""
"Returns the URL that users who don't pass the test will be redirected to. "
"Returns :attr:`login_url` if set, or :setting:`settings.LOGIN_URL "
"<LOGIN_URL>` otherwise."
msgstr ""
"Возвращает URL, на который будут перенаправляться пользователи не прошедшие "
"тест. Возвращает значение атрибута :attr:`login_url`, если оно определено, "
"или :setting:`settings.LOGIN_URL <LOGIN_URL>`."

# ab09b906d4a047bfa75f6698f3d47623
#: ../../topics/auth/default.txt:858
msgid ""
"When :attr:`raise_exception` is ``True``, this method can be used to control "
"the error message passed to the error handler for display to the user. "
"Returns the :attr:`permission_denied_message` attribute by default."
msgstr ""
"При :attr:`raise_exception` равном ``True``, этот метод может быть "
"использован для управления сообщением об ошибке, которое будет передано в "
"обработчик для отображения пользователю. По умолчанию, возврашает значение "
"атрибута :attr:`permission_denied_message`."

# 026f43e7f53a4688a98bb7f94682d739
#: ../../topics/auth/default.txt:865
msgid ""
"Returns the name of the query parameter that will contain the URL the user "
"should be redirected to after a successful login. If you set this to "
"``None``, a query parameter won't be added. Returns the :attr:"
"`redirect_field_name` attribute by default."
msgstr ""
"Возвращает имя параметра запроса, содержащий URL, на который должен быть "
"перенаправлен пользователь в случае успешной авторизации. Если вы установите "
"его в ``None``, то параметр запроса не будет добавлен. По умолчанию, "
"возвращает значение атрибута :attr:`redirect_field_name`."

# 55a73fa57f72404f9992bab5ba6d66ca
#: ../../topics/auth/default.txt:872
msgid ""
"Depending on the value of ``raise_exception``, the method either raises a :"
"exc:`~django.core.exceptions.PermissionDenied` exception or redirects the "
"user to the ``login_url``, optionally including the ``redirect_field_name`` "
"if it is set."
msgstr ""
"В зависимости от значения ``raise_exception``, метод либо выбрасывает "
"исключение :exc:`~django.core.exceptions.PermissionDenied` или "
"перенаправляет пользователя на ``login_url``, необязательно используя "
"``redirect_field_name``, если оно установлено."

# e6a48f7406e946e596b6393a569e2098
#: ../../topics/auth/default.txt:882
msgid "Session invalidation on password change"
msgstr "Сброс сессии при изменении пароля"

# bdfbe540486844d194e37bd718a06355
#: ../../topics/auth/default.txt:884
#, fuzzy
msgid ""
"If your :setting:`AUTH_USER_MODEL` inherits from :class:`~django.contrib."
"auth.models.AbstractBaseUser` or implements its own :meth:`~django.contrib."
"auth.models.AbstractBaseUser.get_session_auth_hash()` method, authenticated "
"sessions will include the hash returned by this function. In the :class:"
"`~django.contrib.auth.models.AbstractBaseUser` case, this is an HMAC of the "
"password field. Django verifies that the hash in the session for each "
"request matches the one that's computed during the request. This allows a "
"user to log out all of their sessions by changing their password."
msgstr ""
"Если ваша :setting:`AUTH_USER_MODEL` унаследована от класса :class:`~django."
"contrib.auth.models.AbstractBaseUser` или реализует свой собственный метод :"
"meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`, "
"то аутентифицированные сессии будут содержать хэш, возвращённый этим "
"методом. В случае :class:`~django.contrib.auth.models.AbstractBaseUser`, это "
"будет HMAC от поля с паролем. Если активирован :class:`~django.contrib.auth."
"middleware.SessionAuthenticationMiddleware`, Django проверяет, что хеш, "
"отправленный с каждым запросом, совпадает с хешом, вычисленным на стороне "
"сервера. Это позволяет пользователю отключиться от всех его сессий с помощью "
"изменения их пароля."

# 492974a146a04f8cbb7087d05b6e5b37
#: ../../topics/auth/default.txt:893
#, fuzzy
msgid ""
"The default password change views included with Django, :class:`~django."
"contrib.auth.views.PasswordChangeView` and the ``user_change_password`` view "
"in the :mod:`django.contrib.auth` admin, update the session with the new "
"password hash so that a user changing their own password won't log "
"themselves out. If you have a custom password change view and wish to have "
"similar behavior, use the :func:`update_session_auth_hash` function."
msgstr ""
"Стандартные представления для изменения пароля, поставляемые с Django, "
"функция :func:`django.contrib.auth.views.password_change` и представление "
"``user_change_password`` в пакете :mod:`django.contrib.auth`, обновляют в "
"сессии хэш пароля так, чтобы соответствующий пользователь не терял "
"авторизацию. Если вы реализуете собственное представление для изменения "
"пароля и желаете сохранить такое поведение, используйте эту функцию:"

# a7a8cc7c98154bfa89d57feffd35d45f
#: ../../topics/auth/default.txt:903
#, fuzzy
msgid ""
"This function takes the current request and the updated user object from "
"which the new session hash will be derived and updates the session hash "
"appropriately. It also rotates the session key so that a stolen session "
"cookie will be invalidated."
msgstr ""
"Данная функция принимает текущий запрос и обновлённый объект пользователя из "
"которого будет извлечён новый хэш сессии и соответственно обновляет хэш "
"сессии. Пример использования::"

#: ../../topics/auth/default.txt:908
msgid "Example usage::"
msgstr ""

# f1ac4a079cd04dff8e206aed47e1050d
#: ../../topics/auth/default.txt:923
msgid ""
"Since :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()` is based on :setting:`SECRET_KEY`, updating your "
"site to use a new secret will invalidate all existing sessions."
msgstr ""
"Так как метод :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()` использует параметр конфигурации :setting:"
"`SECRET_KEY`, то обновление этого параметра приведёт к отмене всех "
"существующих сессий на сайте."

# ee99ad4bb79a478191427824587ee520
#: ../../topics/auth/default.txt:931
msgid "Authentication Views"
msgstr "Представления аутентификации"

# 62b91408d07f4cedbb2e6dded23b2c1f
#: ../../topics/auth/default.txt:935
msgid ""
"Django provides several views that you can use for handling login, logout, "
"and password management. These make use of the :ref:`stock auth forms <built-"
"in-auth-forms>` but you can pass in your own forms as well."
msgstr ""
"Django предоставляет несколько представлений, с помощью которых вы можете "
"осуществлять управление авторизацией пользователей и их паролями. "
"Представления используют :ref:`ряд соответствующих форм <built-in-auth-"
"forms>`, но вы можете передавать и свои формы."

#: ../../topics/auth/default.txt:939
msgid ""
"Django provides no default template for the authentication views. You should "
"create your own templates for the views you want to use. The template "
"context is documented in each view, see :ref:`all-authentication-views`."
msgstr ""
"Django не предоставляет стандартного шаблона для представлений "
"аутентификации. Вы должны создать свой собственный шаблон для представлений, "
"которые планируете использовать. Шаблонный контекст описан в каждом "
"представлении, обратитесь к :ref:`all-authentication-views`."

#: ../../topics/auth/default.txt:946
msgid "Using the views"
msgstr "Использование представлений"

#: ../../topics/auth/default.txt:948
msgid ""
"There are different methods to implement these views in your project. The "
"easiest way is to include the provided URLconf in ``django.contrib.auth."
"urls`` in your own URLconf, for example::"
msgstr ""
"Существует несколько разных методов для реализации данных представлений в "
"вашем проекте. Самым простым способом будет подключение схемы URL из "
"``django.contrib.auth.urls`` в вашу схему, например::"

#: ../../topics/auth/default.txt:956
msgid "This will include the following URL patterns::"
msgstr "Это действие добавить следующие шаблоны URL::"

#: ../../topics/auth/default.txt:967
msgid ""
"The views provide a URL name for easier reference. See :doc:`the URL "
"documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""
"Представления добавляют имя для URL для упрощения ссылок на них. Обратитесь "
"к :doc:`документации на URL </topics/http/urls>` для получения детальной "
"информации по использованию именованных шаблонов URL."

#: ../../topics/auth/default.txt:970
msgid ""
"If you want more control over your URLs, you can reference a specific view "
"in your URLconf::"
msgstr ""
"Если вам требуется больше контроля над вашими URL, вы можете указывать "
"специальное представление в вашей схеме URL::"

#: ../../topics/auth/default.txt:979
msgid ""
"The views have optional arguments you can use to alter the behavior of the "
"view. For example, if you want to change the template name a view uses, you "
"can provide the ``template_name`` argument. A way to do this is to provide "
"keyword arguments in the URLconf, these will be passed on to the view. For "
"example::"
msgstr ""
"Представления принимают необязательные аргументы, которые вы можете "
"использовать для изменения их поведения. Например, если требуется изменить "
"имя шаблона, который будет использоваться представлением, вы можете указать "
"аргумент ``template_name``. Для этого надо указать именованные аргументы в "
"схеме URL и они будут переданы в представление. Например::"

# 5d8757e248d44b3686416d17cebf592b
#: ../../topics/auth/default.txt:991
#, fuzzy
msgid ""
"All views are :doc:`class-based </topics/class-based-views/index>`, which "
"allows you to easily customize them by subclassing."
msgstr ""
"При использовании :doc:`CBV представлений </topics/class-based-views/"
"index>`, вы можете для этой цели применять ``UserPassesTestMixin``."

# 2361fce2471044c89ac0b3c69232a8f7
#: ../../topics/auth/default.txt:997
msgid "All authentication views"
msgstr "Все представления для аутентификации"

#: ../../topics/auth/default.txt:999
msgid ""
"This is a list with all the views ``django.contrib.auth`` provides. For "
"implementation details see :ref:`using-the-views`."
msgstr ""
"Ниже приведён список со всеми представлениями пакета ``django.contrib."
"auth``. Для получения информации о деталях реализации обратитесь к :ref:"
"`using-the-views`."

# 2f1b208700be4bee9c117652721a49b7
#: ../../topics/auth/default.txt:1004
msgid "**URL name:** ``login``"
msgstr "**Имя URL:** ``login``"

# f9fc635ac0794b7fbbd099ec7baf81f4
#: ../../topics/auth/default.txt:1006
msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""
"Обратитесь к :doc:`документации на URL </topics/http/urls>` для получения "
"информации по использованию именованных шаблонов URL."

#: ../../topics/auth/default.txt:1009 ../../topics/auth/default.txt:1148
#: ../../topics/auth/default.txt:1200 ../../topics/auth/default.txt:1227
#: ../../topics/auth/default.txt:1258 ../../topics/auth/default.txt:1349
#: ../../topics/auth/default.txt:1370 ../../topics/auth/default.txt:1420
msgid "**Attributes:**"
msgstr ""

# ecf71c9f4c164770a1142a66186bcc9e
#: ../../topics/auth/default.txt:1011
msgid ""
"``template_name``: The name of a template to display for the view used to "
"log the user in. Defaults to :file:`registration/login.html`."
msgstr ""
"``template_name``: Путь до шаблона, который будет использовать представление "
"при авторизации пользователя. По умолчанию, :file:`registration/login.html`."

# bb4877cd7fc04aa0bf161d5c621070bb
#: ../../topics/auth/default.txt:1014
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after login. Defaults to ``next``."
msgstr ""
"``redirect_field_name``: Имя ``GET`` поля, содержащего URL на который будет "
"произведёно перенаправление после успешной авторизации. По умолчанию, "
"``next``."

# 5f1851dcfcd44cf1bb81834dce53f827
#: ../../topics/auth/default.txt:1017
#, fuzzy
msgid ""
"``authentication_form``: A callable (typically a form class) to use for "
"authentication. Defaults to :class:`~django.contrib.auth.forms."
"AuthenticationForm`."
msgstr ""
"``authentication_form``: Вызываемый объект (обычно, просто класс формы), "
"использующийся для аутентификации. По умолчанию, :class:`~django.contrib."
"auth.forms.AuthenticationForm`."

# 70f140d173af402881a367972a671f14
# 9e77202a65154f5888dc67ac93c4febe
# 26405a51d32449168831bde9e89f1822
# 51b9ea1aec8543b897549921e4230644
# 8447da8e2e7c46ec80b54775f155d260
# 8637a355b9c64d4ab7578d7262e0fabb
# 5fa7f8ced08d47c9b73afc1427af65db
# f3d239ae2c604d87b605a236a69ac4a6
# 4329a230f6854019b0598e10b648eca1
# ea1fbdba746e4801bc953e3b563192a8
#: ../../topics/auth/default.txt:1021 ../../topics/auth/default.txt:1160
#: ../../topics/auth/default.txt:1214 ../../topics/auth/default.txt:1233
#: ../../topics/auth/default.txt:1286 ../../topics/auth/default.txt:1355
#: ../../topics/auth/default.txt:1395 ../../topics/auth/default.txt:1425
msgid ""
"``extra_context``: A dictionary of context data that will be added to the "
"default context data passed to the template."
msgstr ""
"``extra_context``: Словарь с контекстными данными, которые будут добавлены в "
"текущий контекст, перед его передачей в шаблон."

#: ../../topics/auth/default.txt:1024
msgid ""
"``redirect_authenticated_user``: A boolean that controls whether or not "
"authenticated users accessing the login page will be redirected as if they "
"had just successfully logged in. Defaults to ``False``."
msgstr ""

#: ../../topics/auth/default.txt:1030
msgid ""
"If you enable ``redirect_authenticated_user``, other websites will be able "
"to determine if their visitors are authenticated on your site by requesting "
"redirect URLs to image files on your website. To avoid this \"`social media "
"fingerprinting <https://robinlinus.github.io/socialmedia-leak/>`_\" "
"information leakage, host all images and your favicon on a separate domain."
msgstr ""

#: ../../topics/auth/default.txt:1037
msgid ""
"Enabling ``redirect_authenticated_user`` can also result in a redirect loop "
"when using the :func:`.permission_required` decorator unless the "
"``raise_exception`` parameter is used."
msgstr ""

#: ../../topics/auth/default.txt:1041
msgid ""
"``success_url_allowed_hosts``: A :class:`set` of hosts, in addition to :meth:"
"`request.get_host() <django.http.HttpRequest.get_host>`, that are safe for "
"redirecting after login. Defaults to an empty :class:`set`."
msgstr ""

# 31df47350d9e41759fa21041161eb045
#: ../../topics/auth/default.txt:1045
#, fuzzy
msgid "Here's what ``LoginView`` does:"
msgstr "Вот, что делает представление ``django.contrib.auth.views.login``:"

# 2a025985687644a7a31dbcec94744bc4
#: ../../topics/auth/default.txt:1047
msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""
"При вызове через ``GET``, оно отображает форму для аутентификации, которая "
"отправляет введённые данные через POST на тот же URL. Подробности далее."

# 5f18ec94d26642a7a6342e68d77fb9cf
#: ../../topics/auth/default.txt:1050
msgid ""
"If called via ``POST`` with user submitted credentials, it tries to log the "
"user in. If login is successful, the view redirects to the URL specified in "
"``next``. If ``next`` isn't provided, it redirects to :setting:`settings."
"LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/"
"profile/``). If login isn't successful, it redisplays the login form."
msgstr ""
"При вызове через ``POST`` с аутентификационными данными пользователя, оно "
"пытается авторизовать пользователя. При успешной авторизации, представление "
"перенаправляет на URL, указанный в ``next``. Если параметр ``next`` не был "
"предоставлен, происходит перенаправление на URL, содержащийся в параметре "
"конфигурации :setting:`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (по "
"умолчанию, ``/accounts/profile/``). При невозможности авторизации, "
"представление снова показывает форму."

# 22826e62856a465ba24f56c3ba5a65f6
#: ../../topics/auth/default.txt:1057
msgid ""
"It's your responsibility to provide the html for the login template , called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""
"Вашей обязанностью является предоставление HTML кода для шаблона, который по "
"умолчанию называется ``registration/login.html``. Данный шаблон принимает "
"через контекст четыре переменных:"

# 931430abee9444c1912ed3795727a768
#: ../../topics/auth/default.txt:1061
msgid ""
"``form``: A :class:`~django.forms.Form` object representing the :class:"
"`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""
"``form``: Объект :class:`~django.forms.Form`, который представляет :class:"
"`~django.contrib.auth.forms.AuthenticationForm`."

# 82df2e8d24a541c2b8ef721fc40bd970
#: ../../topics/auth/default.txt:1064
msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""
"``next``: URL, на который будет осуществлено перенаправление после успешной "
"авторизации. Можно также передавать строку запроса."

# 631f80bbdba1435592f03a8e49d75f4b
# 5f45a2317b7b49f88bc396261ac66561
#: ../../topics/auth/default.txt:1067 ../../topics/auth/default.txt:1171
msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"requests.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""
"``site``: Текущий :class:`~django.contrib.sites.models.Site`, "
"соответствующий параметру конфигурации :setting:`SITE_ID`. Если вы не "
"активировали соответствующее приложение, переменной будет присвоен "
"экземпляр :class:`~django.contrib.sites.requests.RequestSite`, который "
"получает имя сайта и домен из текущего :class:`~django.http.HttpRequest`."

# fb71219381be4eb78e4663d4211f9005
# 74242c7884154d3eab1bcd083c879a6d
# ca28895f8531401dadad92bfdcefc371
#: ../../topics/auth/default.txt:1074 ../../topics/auth/default.txt:1178
#: ../../topics/auth/default.txt:1310
msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request."
"META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :"
"doc:`/ref/contrib/sites`."
msgstr ""
"``site_name``: Псевдоним для ``site.name``. Если вы не активировали "
"соответствующее приложение, переменной будет присвоено значение :attr:"
"`request.META['SERVER_NAME'] <django.http.HttpRequest.META>`. Для "
"подробностей о работе с сайтами обратитесь к :doc:`/ref/contrib/sites`."

# 84e2246853eb4992af0c9829d64edd35
#: ../../topics/auth/default.txt:1079
#, fuzzy
msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"``as_view`` method in your URLconf. For example, this URLconf line would "
"use :file:`myapp/login.html` instead::"
msgstr ""
"Если потребуется отказаться от вызова шаблона :file:`registration/login."
"html`, вы можете передать в представление параметр ``template_name`` через "
"дополнительные аргументы URL с вашей схеме. Например, эта строка URL будет "
"использовать шаблон :file:`myapp/login.html`::"

# 2477363e6bc7491ea647868f2d435a97
#: ../../topics/auth/default.txt:1086
#, fuzzy
msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login using ``redirect_field_name``. By default, the field "
"is called ``next``."
msgstr ""
"Вы также можете указать имя для ``GET`` поля, которое будет содержать URL "
"для перенаправления после успешной авторизации пользователя, передав его в "
"аргументе ``redirect_field_name`` в представление. По умолчанию, ``next``."

# 37f3a0e1baae4bcb8f158c936720b31e
#: ../../topics/auth/default.txt:1090
msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""
"Здесь показан пример содержимого шаблона :file:`registration/login.html`, "
"который вы можете использовать в качестве отправной точки. Он предполагает, "
"что у вас есть шаблон :file:`base.html`, который определяет блок ``content``:"

# 4323768cf1f6411ab563d3d5d50ef489
#: ../../topics/auth/default.txt:1135
#, fuzzy
msgid ""
"If you have customized authentication (see :doc:`Customizing Authentication "
"</topics/auth/customizing>`) you can use a custom authentication form by "
"setting the ``authentication_form`` attribute. This form must accept a "
"``request`` keyword argument in its ``__init__()`` method and provide a "
"``get_user()`` method which returns the authenticated user object (this "
"method is only ever called after successful form validation)."
msgstr ""
"Если у вас реализован собственный механизм аутентификации (обратитесь к :doc:"
"`Собственная аутентификация </topics/auth/customizing>`) вы можете передать "
"свою форму аутентификации в представление через параметр "
"``authentication_form``. Данная форма должна принимать именованный аргумент "
"``request`` в её методе ``__init__`` и предоставлять метод ``get_user``, "
"который должен возвращать объект аутентифицированного пользователя (метод "
"будет вызываться только после успешной аутентификации)."

# 6f5e534a3a994edcb95f879aa66d31e6
#: ../../topics/auth/default.txt:1144
msgid "Logs a user out."
msgstr "Отмена авторизации пользователя."

# cad92c1903d34f2ebd06e160740f275b
#: ../../topics/auth/default.txt:1146
msgid "**URL name:** ``logout``"
msgstr "**Имя URL:** ``logout``"

# 1f7076d32efd427f8578cdd2f120ec3a
# cc33eb034e7d43f6927df70628684bbc
#: ../../topics/auth/default.txt:1150
#, fuzzy
msgid ""
"``next_page``: The URL to redirect to after logout. Defaults to :setting:"
"`settings.LOGOUT_REDIRECT_URL <LOGOUT_REDIRECT_URL>`."
msgstr ""
"``login_url``: URL страницы авторизации, на которую будет выполнено "
"перенаправление. По умолчанию, :setting:`settings.LOGIN_URL <LOGIN_URL>`."

# 79c2b382b5114ecf8c0deae33bff734f
#: ../../topics/auth/default.txt:1153
#, fuzzy
msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html`."
msgstr ""
"``template_name``: Путь до шаблона, который будет использовать представление "
"при прекращении авторизации пользователя. По умолчанию, :file:`registration/"
"logged_out.html`."

# cc71633f1ceb4ffbbb467a6092dc077f
#: ../../topics/auth/default.txt:1156
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Defaults to ``next``. Overrides the ``next_page`` "
"URL if the given ``GET`` parameter is passed."
msgstr ""
"``redirect_field_name``: Имя ``GET`` поля, содержащего URL на который будет "
"произведёно перенаправление после отмены авторизации. По умолчанию, "
"``next``. Переопределяет ``next_page``, если данный параметр был передан в "
"``GET``."

#: ../../topics/auth/default.txt:1163
msgid ""
"``success_url_allowed_hosts``: A :class:`set` of hosts, in addition to :meth:"
"`request.get_host() <django.http.HttpRequest.get_host>`, that are safe for "
"redirecting after logout. Defaults to an empty :class:`set`."
msgstr ""

# 38d0e057603d4b2bb24ceeb2ea6bf09f
# 76ea36dabb9e46ea83e8791d8c72489b
# 4340932a37f842a0b4ac6151ae323fef
# 7ce6cc7b3d3f475aba99638d57906a93
#: ../../topics/auth/default.txt:1167 ../../topics/auth/default.txt:1217
#: ../../topics/auth/default.txt:1297 ../../topics/auth/default.txt:1405
msgid "**Template context:**"
msgstr "**Контекст шаблона:**"

# 788df042a848478dbc758cd7c6661063
#: ../../topics/auth/default.txt:1169
msgid "``title``: The string \"Logged out\", localized."
msgstr "``title``: Локализованная строка \"Logged out\"."

# ffa184284c2044f09332d4b266698aad
#: ../../topics/auth/default.txt:1185
msgid "Logs a user out, then redirects to the login page."
msgstr ""
"Отменяет авторизацию пользователя, затем перенаправляет на страницу "
"авторизации."

# 978ebf59fd934c75aa568860f69e5cd8
#: ../../topics/auth/default.txt:1187
msgid "**URL name:** No default URL provided"
msgstr "**Имя URL:** Значения по умолчанию нет"

# 337aee37e23d4f6b9f365d33108ac35f
# 075c8b3848984344a468a618bd8c40d8
# 5d1a49e4958245ecb1a97e407236d1d1
# 62bdae9000b048c8ad9e2c9ee336fd00
# a4960215b9b1455ea381607c47d8a452
# 6a22689a264940bda46d9a1816177a80
# f2eb55bf91bd45ac9f8ce2bc977ac5d3
# b64251622f3a477a9b049a39227191e2
# 65783ea18f764e51b72d0c9ae115af67
#: ../../topics/auth/default.txt:1189 ../../topics/auth/default.txt:1442
msgid "**Optional arguments:**"
msgstr "**Необязательные аргументы:**"

# 1f7076d32efd427f8578cdd2f120ec3a
# cc33eb034e7d43f6927df70628684bbc
#: ../../topics/auth/default.txt:1191 ../../topics/auth/default.txt:1444
msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""
"``login_url``: URL страницы авторизации, на которую будет выполнено "
"перенаправление. По умолчанию, :setting:`settings.LOGIN_URL <LOGIN_URL>`."

# 6aa232edef474639980b895b892f638a
#: ../../topics/auth/default.txt:1196
msgid "**URL name:** ``password_change``"
msgstr "**Имя URL:** ``password_change``"

# 4a5f92eee5cc45ca877f0259a60e131d
#: ../../topics/auth/default.txt:1198
msgid "Allows a user to change their password."
msgstr "Позволяет пользователю изменить его пароль."

# 0136e5d56dc34aa7b23912ef86e19cda
#: ../../topics/auth/default.txt:1202
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to :file:`registration/password_change_form."
"html` if not supplied."
msgstr ""
"``template_name``: Путь до шаблона, который будет использовать представление "
"при изменении пароля. По умолчанию, :file:`registration/password_change_form."
"html`."

# 34901a8edbb54fb39d985c996b6d0cc5
#: ../../topics/auth/default.txt:1206
#, fuzzy
msgid ""
"``success_url``: The URL to redirect to after a successful password change."
msgstr ""
"``post_change_redirect``: URL, на который будет производится перенаправление "
"после успешного изменения пароля."

# 648cfdcd29f84e0da81fbfaad12e0ac6
#: ../../topics/auth/default.txt:1209
#, fuzzy
msgid ""
"``form_class``: A custom \"change password\" form which must accept a "
"``user`` keyword argument. The form is responsible for actually changing the "
"user's password. Defaults to :class:`~django.contrib.auth.forms."
"PasswordChangeForm`."
msgstr ""
"``password_change_form``: Собственная форма для изменения пароля, которая "
"должна принимать именованный аргумент ``user``. Форма должна вызывать "
"функцию для изменения пароля пользователя. По умолчанию, :class:`~django."
"contrib.auth.forms.PasswordChangeForm`."

# 0bb954dbc6e84c19b70180190cb13aca
#: ../../topics/auth/default.txt:1219
#, fuzzy
msgid "``form``: The password change form (see ``form_class`` above)."
msgstr ""
"``form``: Форма для изменения пароля (обратитесь к ``password_change_form`` "
"выше)."

# a4d875fec522426eb41d5cb6a0f48203
#: ../../topics/auth/default.txt:1223
msgid "**URL name:** ``password_change_done``"
msgstr "**Имя URL:** ``password_change_done``"

# f8d988e793ad4f0a815d0c92ac7efaf0
#: ../../topics/auth/default.txt:1225
msgid "The page shown after a user has changed their password."
msgstr ""
"Страница, отображаемая после того, как пользователь изменил свой пароль."

# 44b2715d2f84459ba9cbbefa1d9b8e9c
#: ../../topics/auth/default.txt:1229
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_change_done.html` if not supplied."
msgstr ""
"``template_name``: Путь до шаблона. По умолчанию, :file:`registration/"
"password_change_done.html`."

# 6fa7f30bfcae469499372e5494dae10f
#: ../../topics/auth/default.txt:1238
msgid "**URL name:** ``password_reset``"
msgstr "**Имя URL:** ``password_reset``"

# aa8fce1fdb5a458da327091ec706563f
#: ../../topics/auth/default.txt:1240
msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""
"Позволяет пользователю сбросить свой пароль, генерируя одноразовую ссылку, "
"которая может быть использована для сброса пароля, и отправляя её на "
"зарегистрированную электронную почто пользователя."

# 842fa3d0353441b8b6d3d5afe377192d
#: ../../topics/auth/default.txt:1244
#, fuzzy
msgid ""
"If the email address provided does not exist in the system, this view won't "
"send an email, but the user won't receive any error message either. This "
"prevents information leaking to potential attackers. If you want to provide "
"an error message in this case, you can subclass :class:`~django.contrib.auth."
"forms.PasswordResetForm` and use the ``form_class`` attribute."
msgstr ""
"Если предоставленный адрес электронной почты не существует в системе, "
"представление не будет выполнять отправку электронного сообщения, но и "
"пользователь не получит никакого сообщения об ошибке. Это предотвращает "
"утечку информации к потенциальным хацкерам. Если вам необходимо "
"предоставлять сообщение об ошибке для этого случая, вы можете унаследовать "
"форму :class:`~django.contrib.auth.forms.PasswordResetForm` и использовать "
"аргумент ``password_reset_form``."

# c051b84e8bce42f2a733e9a344ca1a08
#: ../../topics/auth/default.txt:1251
msgid ""
"Users flagged with an unusable password (see :meth:`~django.contrib.auth."
"models.User.set_unusable_password()` aren't allowed to request a password "
"reset to prevent misuse when using an external authentication source like "
"LDAP. Note that they won't receive any error message since this would expose "
"their account's existence but no mail will be sent either."
msgstr ""
"Пользователь, отмеченный флагом отменённого пароля (см. :meth:`~django."
"contrib.auth.models.User.set_unusable_password()`), не может запросить сброс "
"пароля. Так сделано, чтобы предотвратить неправильное использование при "
"работе с внешними источниками аутентификации, например, с LDAP. Следует "
"отметить, что они не получат никаких сообщений об ошибках, так как это "
"вскрыло бы наличие аккаунта, и никакого сообщения на почту не будет "
"отправлено."

# 5796b5fb3d5741849ed08e5a2564ac40
#: ../../topics/auth/default.txt:1260
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to :file:`registration/password_reset_form."
"html` if not supplied."
msgstr ""
"``template_name``: Путь до шаблона, который будет использоваться для "
"отображения формы сброса пароля. По умолчанию, :file:`registration/"
"password_reset_form.html`."

# 6d06c1c1b2734204809658ea52ca3d14
#: ../../topics/auth/default.txt:1264
#, fuzzy
msgid ""
"``form_class``: Form that will be used to get the email of the user to reset "
"the password for. Defaults to :class:`~django.contrib.auth.forms."
"PasswordResetForm`."
msgstr ""
"``password_reset_form``: Форма, которая будет использоваться для получения "
"адреса электронной почты пользователя для сброса его пароля. По умолчанию, :"
"class:`~django.contrib.auth.forms.PasswordResetForm`."

# 04805474326e446a83e47b9f7cee968f
#: ../../topics/auth/default.txt:1268
msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the reset password link. Defaults to :file:`registration/"
"password_reset_email.html` if not supplied."
msgstr ""
"``email_template_name``: Путь до шаблона, который используется при генерации "
"сообщения со ссылкой для сброса пароля, отправляемого на адрес электронной "
"почты. По умолчанию, :file:`registration/password_reset_email.html`."

# 32e73d48d28c49b59b1d88ec6491cf8b
#: ../../topics/auth/default.txt:1272
msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the reset password link. Defaults to :file:"
"`registration/password_reset_subject.txt` if not supplied."
msgstr ""
"``subject_template_name``: Путь до шаблона, который используется при "
"генерации заголовка сообщения со ссылкой для сброса пароля, отправляемого на "
"адрес электронной почты. По умолчанию :file:`registration/"
"password_reset_subject.txt`."

# 26d688eb25974bd285fd4ce7a78634af
#: ../../topics/auth/default.txt:1276
msgid ""
"``token_generator``: Instance of the class to check the one time link. This "
"will default to ``default_token_generator``, it's an instance of ``django."
"contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""
"``token_generator``: Экземпляр класса для проверки одноразовой ссылки. По "
"умолчанию, ``default_token_generator``, который является экземпляром "
"``django.contrib.auth.tokens.PasswordResetTokenGenerator``."

# 05282d31c042452e83cae0ae2aee8f2d
#: ../../topics/auth/default.txt:1280
#, fuzzy
msgid ""
"``success_url``: The URL to redirect to after a successful password reset "
"request."
msgstr ""
"``post_reset_redirect``: URL, на который будет произведено перенаправление "
"после успешного запроса на сброс пароля."

# af94f8bf0a2b4db8bd4c4f950a8d72da
#: ../../topics/auth/default.txt:1283
msgid ""
"``from_email``: A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""
"``from_email``: Корректный адрес электронной почты. По умолчанию Django "
"использует :setting:`DEFAULT_FROM_EMAIL`."

# b1c7d5001bbe44a2aad07315ca254e78
#: ../../topics/auth/default.txt:1289
msgid ""
"``html_email_template_name``: The full name of a template to use for "
"generating a ``text/html`` multipart email with the password reset link. By "
"default, HTML email is not sent."
msgstr ""
"``html_email_template_name``: Путь до шаблона, который будет использоваться "
"при генерации ``text/html`` блока электронного сообщения с ссылкой для "
"сброса пароля. По умолчанию, сообщение в формате HTML не отправляется."

# 70f140d173af402881a367972a671f14
# 9e77202a65154f5888dc67ac93c4febe
# 26405a51d32449168831bde9e89f1822
# 51b9ea1aec8543b897549921e4230644
# 8447da8e2e7c46ec80b54775f155d260
# 8637a355b9c64d4ab7578d7262e0fabb
# 5fa7f8ced08d47c9b73afc1427af65db
# f3d239ae2c604d87b605a236a69ac4a6
# 4329a230f6854019b0598e10b648eca1
# ea1fbdba746e4801bc953e3b563192a8
#: ../../topics/auth/default.txt:1293
#, fuzzy
msgid ""
"``extra_email_context``: A dictionary of context data that will be available "
"in the email template. It can be used to override default template context "
"values listed below e.g. ``domain``."
msgstr ""
"``extra_email_context``: Словарь с контекстными данными, которые будут "
"доступны в контексте шаблона сообщения."

# 53a3c37ed6cc46f9a8a5c02c374c7ce5
#: ../../topics/auth/default.txt:1299
#, fuzzy
msgid ""
"``form``: The form (see ``form_class`` above) for resetting the user's "
"password."
msgstr ""
"``form``: Форма (смотрите ``password_reset_form`` выше) для сброса пароля "
"пользователя."

# eb91087bd18241e7bbc03c7162d4e676
#: ../../topics/auth/default.txt:1302
msgid "**Email template context:**"
msgstr "**Контекст шаблона электронной почты:**"

# eae3a174a0064f9bac9793bfc452c494
#: ../../topics/auth/default.txt:1304
msgid "``email``: An alias for ``user.email``"
msgstr "``email``: Псевдоним для ``user.email``"

# ed5084f625cd4dcf97635a7575f86d7e
#: ../../topics/auth/default.txt:1306
msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""
"``user``: Текущий :class:`~django.contrib.auth.models.User`, соответствующий "
"полю ``email`` формы. Толька активные пользователи имеют возможность "
"сбрасывать свои пароли passwords (``User.is_active is True``)."

# 1833066f40f7447985e63af980e64e46
#: ../../topics/auth/default.txt:1315
msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""
"``domain``: Псевдоним для ``site.domain``. Если вы не используете приложение "
"для работы с сайтами, то значением будет ``request.get_host()``."

# 22118d2d1472498ab7bcf771ad8d7c69
#: ../../topics/auth/default.txt:1319
msgid "``protocol``: http or https"
msgstr "``protocol``: http или https"

# 08170d0617174b59aff399680d366b60
#: ../../topics/auth/default.txt:1321
msgid "``uid``: The user's primary key encoded in base 64."
msgstr "``uid``: Первичный ключ пользователя, закодированный в base 64."

# 53ade0b4716246a08841251337791100
#: ../../topics/auth/default.txt:1323
msgid "``token``: Token to check that the reset link is valid."
msgstr "``token``: Токен для проверки корректности ссылки для сброса пароля."

# 518f40d5f22345a49e500785f1a3fd11
#: ../../topics/auth/default.txt:1325
msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""
"Пример ``registration/password_reset_email.html`` (шаблон тела письма):"

# 421062b5f41f4639bf3e2dda6811ea0a
#: ../../topics/auth/default.txt:1332
msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""
"Такой же контекст используется для шаблона заголовка сообщения. Заголовок "
"должен быть представлен одной строкой простого текста."

# 90910ab8e59b4324b34b6a5c44cd2671
#: ../../topics/auth/default.txt:1337
msgid "**URL name:** ``password_reset_done``"
msgstr "**Имя URL:** ``password_reset_done``"

# ce921ffca0014dc491704abbe4dca9ef
#: ../../topics/auth/default.txt:1339
#, fuzzy
msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :class:`PasswordResetView` doesn't "
"have an explicit ``success_url`` URL set."
msgstr ""
"Эта страница отображается после отправки пользователю письма с ссылкой для "
"сброса его пароля. Данное представление вызывается по умолчанию, если "
"представлению :func:`password_reset` не было явно передан URL "
"``post_reset_redirect``."

#: ../../topics/auth/default.txt:1345
msgid ""
"If the email address provided does not exist in the system, the user is "
"inactive, or has an unusable password, the user will still be redirected to "
"this view but no email will be sent."
msgstr ""
"Если предоставленный адрес электронной почты не существует в системе, "
"пользователь не активирован или имеет деактивированный пароль, то "
"пользователь будет перенаправляться на это представление, но никаких писем "
"ему отправляться не будет."

# 602a3c944b5143709cf1cd26ebfe1841
#: ../../topics/auth/default.txt:1351
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_reset_done.html` if not supplied."
msgstr ""
"``template_name``: Путь до шаблона. По умолчанию, :file:`registration/"
"password_reset_done.html`."

# 436e7d24de904b1ca198d311e8a24d00
#: ../../topics/auth/default.txt:1360
msgid "**URL name:** ``password_reset_confirm``"
msgstr "**Имя URL:** ``password_reset_confirm``"

# 5e83cf1dd6e34de2b8fa9c030c3e1fae
#: ../../topics/auth/default.txt:1362
msgid "Presents a form for entering a new password."
msgstr "Представляет форму для ввода нового пароля."

# 4acee997a2e0401eac3da73017fda3e8
#: ../../topics/auth/default.txt:1364
#, fuzzy
msgid "**Keyword arguments from the URL:**"
msgstr "**Обязательные аргументы:**"

# 08170d0617174b59aff399680d366b60
#: ../../topics/auth/default.txt:1366
#, fuzzy
msgid "``uidb64``: The user's id encoded in base 64."
msgstr "``uid``: Первичный ключ пользователя, закодированный в base 64."

# 53ade0b4716246a08841251337791100
#: ../../topics/auth/default.txt:1368
#, fuzzy
msgid "``token``: Token to check that the password is valid."
msgstr "``token``: Токен для проверки корректности ссылки для сброса пароля."

# 10e22def730c4f5db0023efe532470a6
#: ../../topics/auth/default.txt:1372
msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is :file:`registration/password_reset_confirm."
"html`."
msgstr ""
"``template_name``: Путь до шаблона, который использует представление для "
"подтверждения пароля. По умолчанию, :file:`registration/"
"password_reset_confirm.html`."

# 27a19b402e4645a290332d6a09ea7e52
#: ../../topics/auth/default.txt:1376
msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of ``django.contrib."
"auth.tokens.PasswordResetTokenGenerator``."
msgstr ""
"``token_generator``: Эеземпляр класса для проверки пароля. По умолчанию, "
"``default_token_generator``, это экземпляр ``django.contrib.auth.tokens."
"PasswordResetTokenGenerator``."

#: ../../topics/auth/default.txt:1380
msgid ""
"``post_reset_login``: A boolean indicating if the user should be "
"automatically authenticated after a successful password reset. Defaults to "
"``False``."
msgstr ""

#: ../../topics/auth/default.txt:1384
msgid ""
"``post_reset_login_backend``: A dotted path to the authentication backend to "
"use when authenticating a user if ``post_reset_login`` is ``True``. Required "
"only if you have multiple :setting:`AUTHENTICATION_BACKENDS` configured. "
"Defaults to ``None``."
msgstr ""

# 3a33bd693df846f1aaa8fc6932e16298
#: ../../topics/auth/default.txt:1389
#, fuzzy
msgid ""
"``form_class``: Form that will be used to set the password. Defaults to :"
"class:`~django.contrib.auth.forms.SetPasswordForm`."
msgstr ""
"``set_password_form``: Форма, которая будет использоваться для установки "
"пароля. По умолчанию, :class:`~django.contrib.auth.forms.SetPasswordForm`."

# 9b3410c286454a028e5d81b8bdfba3ef
#: ../../topics/auth/default.txt:1392
#, fuzzy
msgid ""
"``success_url``: URL to redirect after the password reset done. Defaults to "
"``'password_reset_complete'``."
msgstr ""
"``post_reset_redirect``: URL, на который будет произведено перенаправление "
"после выполнения сброса пароля.По умолчанию, ``None``."

# 9b3410c286454a028e5d81b8bdfba3ef
#: ../../topics/auth/default.txt:1398
#, fuzzy
msgid ""
"``reset_url_token``: Token parameter displayed as a component of password "
"reset URLs. Defaults to ``'set-password'``."
msgstr ""
"``post_reset_redirect``: URL, на который будет произведено перенаправление "
"после выполнения сброса пароля.По умолчанию, ``None``."

# bb9a98d95e35497599ad6ab5c71e626c
#: ../../topics/auth/default.txt:1403
#, fuzzy
msgid "The ``reset_url_token`` class attribute was added."
msgstr "Был добавлен ``email_email_context``."

# 53a3c37ed6cc46f9a8a5c02c374c7ce5
#: ../../topics/auth/default.txt:1407
#, fuzzy
msgid ""
"``form``: The form (see ``form_class`` above) for setting the new user's "
"password."
msgstr ""
"``form``: Форма (смотрите ``password_reset_form`` выше) для сброса пароля "
"пользователя."

# fe1e9fe87a0d4fab81afd5aa6785c07d
#: ../../topics/auth/default.txt:1410
msgid ""
"``validlink``: Boolean, True if the link (combination of ``uidb64`` and "
"``token``) is valid or unused yet."
msgstr ""
"``validlink``: Булево значение. True, если ссылка (комбинация ``uidb64`` и "
"``token``) корректна и не была ещё использована."

# ea48dcc0a47e483c939581250bcd2a0d
#: ../../topics/auth/default.txt:1415
msgid "**URL name:** ``password_reset_complete``"
msgstr "**Имя URL:** ``password_reset_complete``"

# 170ac97b3f5d4a6190e6d33fd3ab2ad6
#: ../../topics/auth/default.txt:1417
msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""
"Представление, которое информирует пользователя об успешном изменении пароля."

# b44cce844aa0416b8a85f1f14deb52b4
#: ../../topics/auth/default.txt:1422
msgid ""
"``template_name``: The full name of a template to display the view. Defaults "
"to :file:`registration/password_reset_complete.html`."
msgstr ""
"``template_name``: Путь до шаблона. По умолчанию, :file:`registration/"
"password_reset_complete.html`."

# e01b20e5b15042ecbd4c4eb7990f278c
#: ../../topics/auth/default.txt:1429
msgid "Helper functions"
msgstr "Вспомогательные функции"

# f71be53fbff04091ae3bab54fed49806
#: ../../topics/auth/default.txt:1435
msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""
"Перенаправляет на страницу аутентификации и, в случае её успешного "
"прохождения, затем перебрасывает на другой URL."

# 4acee997a2e0401eac3da73017fda3e8
#: ../../topics/auth/default.txt:1438
msgid "**Required arguments:**"
msgstr "**Обязательные аргументы:**"

# 3902071169184beb8baa9cbe0d43b090
#: ../../topics/auth/default.txt:1440
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""
"``next``: URL на который происходит перенаправление после успешной "
"авторизации."

# 61d3d64d552c4c9381af9ccc10f9c293
#: ../../topics/auth/default.txt:1447
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""
"``redirect_field_name``: Имя ``GET`` поля, содержащего URL на который будет "
"произведёно перенаправление после отмены авторизации. Переопределяет "
"``next``. если данный параметр был передан в ``GET``."

# 7627880af8da4182b5efe2eae2fd8f6a
#: ../../topics/auth/default.txt:1454
msgid "Built-in forms"
msgstr "Встроенные формы"

# 9de311b1bac9450eb1a98849d37e701e
#: ../../topics/auth/default.txt:1458
msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""
"Если вы не желаете использовать встроенные представления, но и формы "
"переписывать не хотите, то система аутентификации предоставляет несколько "
"встроенных форм, расположенных в :mod:`django.contrib.auth.forms`:"

# 66da6d3466524f9a919c43b5a6133a46
#: ../../topics/auth/default.txt:1463
#, fuzzy
msgid ""
"The built-in authentication forms make certain assumptions about the user "
"model that they are working with. If you're using a :ref:`custom user model "
"<auth-custom-user>`, it may be necessary to define your own forms for the "
"authentication system. For more information, refer to the documentation "
"about :ref:`using the built-in authentication forms with custom user models "
"<custom-users-and-the-built-in-auth-forms>`."
msgstr ""
"Встроенные формы делают некоторые предположения о модели пользователя, с "
"которой они работают. Если вы используете :ref:`собственную модель "
"пользователя <auth-custom-user>`, может потребоваться определить собственные "
"формы для системы аутентификации. Больше информации можно получить в "
"документации на :ref:`использование встроенных форм аутентификации для "
"собственной модели пользователя <custom-users-and-the-built-in-auth-forms>`."

# 5704d4c4a63b4cff9d895ab9a34dd4f8
#: ../../topics/auth/default.txt:1472
msgid "A form used in the admin interface to change a user's password."
msgstr ""
"Форма, используемая в интерфейса администратора, для изменения пароля "
"пользователя."

# e20f9d45e57648b4b885b497f19cafb5
#: ../../topics/auth/default.txt:1474
msgid "Takes the ``user`` as the first positional argument."
msgstr "Принимает ``user`` в качестве первого неименованного параметра."

# 6ff122a6352a48d1ade2a912681c30e0
#: ../../topics/auth/default.txt:1478
msgid "A form for logging a user in."
msgstr "Форма для аутентификации пользователя."

# b919080ce90b4a838643819f91037dcb
#: ../../topics/auth/default.txt:1480
msgid ""
"Takes ``request`` as its first positional argument, which is stored on the "
"form instance for use by sub-classes."
msgstr ""
"Принимает ``request`` в качестве первого неименованного аргумента, который "
"сохраняется в экземпляре формы для использования подклассами."

# 37a85373c61c4d449d800d18c2cbd475
#: ../../topics/auth/default.txt:1485
msgid ""
"By default, ``AuthenticationForm`` rejects users whose ``is_active`` flag is "
"set to ``False``. You may override this behavior with a custom policy to "
"determine which users can log in. Do this with a custom form that subclasses "
"``AuthenticationForm`` and overrides the ``confirm_login_allowed()`` method. "
"This method should raise a :exc:`~django.core.exceptions.ValidationError` if "
"the given user may not log in."
msgstr ""
"По умолчанию, форма ``AuthenticationForm`` игнорирует пользователей у "
"которых флаг ``is_active`` установлен в ``False``. Вы можете изменить это "
"поведение на проверку некого права пройти аутентификацию для пользователей. "
"Выполните это с помощью своей формы, которая унаследована от "
"``AuthenticationForm`` и переопределяет метод ``confirm_login_allowed()``. "
"Этот метод должен выбрасывать исключение :exc:`~django.core.exceptions."
"ValidationError` в случае, если указанный пользователь не может проходить "
"аутентификацию."

# 33c8140ec3d24056b2f96abd7667c803
#: ../../topics/auth/default.txt:1493
msgid ""
"For example, to allow all users to log in regardless of \"active\" status::"
msgstr ""
"Например, позволяем всем пользователям проходить аутентификацию, невзирая на "
"их статус активности::"

#: ../../topics/auth/default.txt:1502
msgid ""
"(In this case, you'll also need to use an authentication backend that allows "
"inactive users, such as :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend`.)"
msgstr ""

# 84cb9206d5a545d58ebc358cc75b3256
#: ../../topics/auth/default.txt:1506
msgid "Or to allow only some active users to log in::"
msgstr ""
"Или позволяем только некоторым активным пользователям проходить "
"аутентификацию::"

# 2e97d9c9953742b5819b6ca0e13f585a
#: ../../topics/auth/default.txt:1523
msgid "A form for allowing a user to change their password."
msgstr "Форма, через которую пользователь может менять свой пароль."

# 6588ecf38d4e42fc8ba0896711790560
#: ../../topics/auth/default.txt:1527
msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""
"Форма для генерации и отправки одноразовой ссылки для сброса "
"пользовательского пароля."

#: ../../topics/auth/default.txt:1532
msgid ""
"Uses the arguments to send an ``EmailMultiAlternatives``. Can be overridden "
"to customize how the email is sent to the user."
msgstr ""
"Использует аргументы для отправки ``EmailMultiAlternatives``. Может быть "
"переопределена для изменения способа отправки сообщения пользователю."

#: ../../topics/auth/default.txt:0
msgid "Параметры"
msgstr ""

#: ../../topics/auth/default.txt:1535
msgid "the template for the subject."
msgstr "шаблон для заголовка."

#: ../../topics/auth/default.txt:1536
msgid "the template for the email body."
msgstr "шаблон для тела письма."

#: ../../topics/auth/default.txt:1537
msgid ""
"context passed to the ``subject_template``, ``email_template``, and "
"``html_email_template`` (if it is not ``None``)."
msgstr ""
"контекст передаётся в ``subject_template``, ``email_template`` и "
"``html_email_template`` (если он не ``None``)."

#: ../../topics/auth/default.txt:1540
msgid "the sender's email."
msgstr "адрес электронной почты отправителя."

#: ../../topics/auth/default.txt:1541
msgid "the email of the requester."
msgstr "адрес электронной почты пользователя."

#: ../../topics/auth/default.txt:1542
msgid ""
"the template for the HTML body; defaults to ``None``, in which case a plain "
"text email is sent."
msgstr ""
"шаблон для HTML тела письма, по умолчанию, ``None``, в этом случае "
"отсылается обычный текст."

#: ../../topics/auth/default.txt:1545
#, fuzzy
msgid ""
"By default, ``save()`` populates the ``context`` with the same variables "
"that :class:`~django.contrib.auth.views.PasswordResetView` passes to its "
"email context."
msgstr ""
"По умолчанию, ``save()`` наполняет ``context`` теми же переменными, что и "
"функция :func:`~django.contrib.auth.views.password_reset`, передавая их в "
"контекст электронного сообщения."

# 0957ac4226bf4fd7a20fa5c082e2ea1e
#: ../../topics/auth/default.txt:1552
msgid ""
"A form that lets a user change their password without entering the old "
"password."
msgstr ""
"Форма, которая позволяет пользователю изменять свой пароль без ввода старого "
"пароля."

# e9066cd481d549fcb2666f2a162b7cb8
#: ../../topics/auth/default.txt:1557
msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""
"Форма, используемая в интерфейсе администратора для изменения информации о "
"пользователе и его списка прав."

# 36a3b118974843388061f6425192f08f
#: ../../topics/auth/default.txt:1562
#, fuzzy
msgid "A :class:`~django.forms.ModelForm` for creating a new user."
msgstr "Форма для создания нового пользователя."

#: ../../topics/auth/default.txt:1564
msgid ""
"It has three fields: ``username`` (from the user model), ``password1``, and "
"``password2``. It verifies that ``password1`` and ``password2`` match, "
"validates the password using :func:`~django.contrib.auth.password_validation."
"validate_password`, and sets the user's password using :meth:`~django."
"contrib.auth.models.User.set_password()`."
msgstr ""

# a71a918fb2754522b273584cec2c1e16
#: ../../topics/auth/default.txt:1574
msgid "Authentication data in templates"
msgstr "Аутентификационные данные в шаблонах"

# 89771b28368d4226a4e14a354148eda1
#: ../../topics/auth/default.txt:1576
msgid ""
"The currently logged-in user and their permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.RequestContext`."
msgstr ""
"Авторизованный пользователь и его права доступны в :doc:`шаблонном контексте "
"</ref/templates/api>` при использовании :class:`~django.template."
"RequestContext`."

# 551f7d55e095454f8cce32886fad38c4
#: ../../topics/auth/default.txt:1580
msgid "Technicality"
msgstr "Техническая особенность"

#: ../../topics/auth/default.txt:1582
msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.RequestContext` and the ``'django."
"contrib.auth.context_processors.auth'`` context processor is enabled. It is "
"in the default generated settings file. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""
"Технически, эти переменные становятся доступными в шаблонном контексте, "
"только если вы используете :class:`~django.template.RequestContext` и "
"активирован контекстный процессор ``'django.contrib.auth.context_processors."
"auth'``. По умолчанию проект так и настроен. Больше информации можно найти "
"в :ref:`документации на RequestContext <subclassing-context-requestcontext>`."

# c0ee95847b4d4f129fd124c036941c84
#: ../../topics/auth/default.txt:1589
msgid "Users"
msgstr "Пользователи"

# d179bf8e11e7405a89e0528b0e49c7b4
#: ../../topics/auth/default.txt:1591
msgid ""
"When rendering a template :class:`~django.template.RequestContext`, the "
"currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""
"При рендеринге :class:`~django.template.RequestContext`, авторизованный "
"пользователь, неважно будет это экземпляр :class:`~django.contrib.auth."
"models.User` или :class:`~django.contrib.auth.models.AnonymousUser`, "
"сохраняется в шаблонной переменной ``{{ user }}``:"

# d23026f86dfd40a2b8528516c89d7dd5
#: ../../topics/auth/default.txt:1604
msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""
"Эта шаблонная переменная не доступна, если не используется "
"``RequestContext``."

# e6e2f16925d64edba8b835d3b0594ab6
#: ../../topics/auth/default.txt:1608
msgid "Permissions"
msgstr "Права"

# 89b4a4723a984c9caad6d79debbe4166
#: ../../topics/auth/default.txt:1610
msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of ``django.contrib.auth."
"context_processors.PermWrapper``, which is a template-friendly proxy of "
"permissions."
msgstr ""
"Права авторизованного пользователя хранятся в шаблонной переменной "
"``{{ perms }}``. Она связана с экземпляром ``django.contrib.auth."
"context_processors.PermWrapper``, который реализует доступ к правам."

# 26cd826fe7e84ab79be6d7c7def551f8
#: ../../topics/auth/default.txt:1615
#, fuzzy
msgid ""
"Evaluating a single-attribute lookup of ``{{ perms }}`` as a boolean is a "
"proxy to :meth:`User.has_module_perms() <django.contrib.auth.models.User."
"has_module_perms>`. For example, to check if the logged-in user has any "
"permissions in the ``foo`` app::"
msgstr ""
"В объекте `{{ perms }}` каждый атрибут — это \"прокси\" к методу :meth:`User."
"has_module_perms <django.contrib.auth.models.User.has_module_perms>`. Этот "
"пример отобразит ``True``, если авторизованный пользователь любое право в "
"приложении ``foo``::"

# 7a7199ea944645cb90e5a916d3722659
#: ../../topics/auth/default.txt:1622
#, fuzzy
msgid ""
"Evaluating a two-level-attribute lookup as a boolean is a proxy to :meth:"
"`User.has_perm() <django.contrib.auth.models.User.has_perm>`. For example, "
"to check if the logged-in user has the permission ``foo.can_vote``::"
msgstr ""
"Каждый атрибут второго уровня — это \"прокси\" к :meth:`User.has_perm "
"<django.contrib.auth.models.User.has_perm>`. Этот пример отобразит ``True``, "
"если авторизованный пользователь имеет право ``foo.can_vote``::"

#: ../../topics/auth/default.txt:1628
msgid "Here's a more complete example of checking permissions in a template:"
msgstr ""

# f9d0f0014c93426bacbda49a592fb87e
#: ../../topics/auth/default.txt:1644
msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr ""
"Также позможен поиск прав с помощью выражения ``{% if in %}``. Например:"

# cdeec38e36e748bd9ff8f9b511d1b056
#: ../../topics/auth/default.txt:1658
msgid "Managing users in the admin"
msgstr "Управление пользователями в интерфейсе администратора"

# 6a2971ea7dcb47d7979f93a867100549
#: ../../topics/auth/default.txt:1660
msgid ""
"When you have both ``django.contrib.admin`` and ``django.contrib.auth`` "
"installed, the admin provides a convenient way to view and manage users, "
"groups, and permissions. Users can be created and deleted like any Django "
"model. Groups can be created, and permissions can be assigned to users or "
"groups. A log of user edits to models made within the admin is also stored "
"and displayed."
msgstr ""
"Если вы подключили к проекту ``django.contrib.admin`` и ``django.contrib."
"auth``, интерфейс администратора предоставляет удобный способ для просмотра "
"и управления пользователями, группами и правами. Пользователи могут быть "
"созданы и удалены как любая другая модель Django. Группы могут быть созданы "
"и права могут быть назначены на пользователей и группы. Журнал изменений, "
"выполненных через интерфейс администратора, сохраняется и доступен."

# e3ab35a934394fc19d3f381a478731ce
#: ../../topics/auth/default.txt:1670
msgid ""
"You should see a link to \"Users\" in the \"Auth\" section of the main admin "
"index page. The \"Add user\" admin page is different than standard admin "
"pages in that it requires you to choose a username and password before "
"allowing you to edit the rest of the user's fields."
msgstr ""
"Вы должны видеть сылку на \"Пользователи\" в разделе \"Auth\" на главной "
"странице интерфейса администратора. Страница \"Добавить пользователя\" "
"отличается от других страниц интерфейса, так как она требует, чтобы вы ввели "
"имя пользователя и пароль перед тем как дать вам возможность редактировать "
"остальные поля модели."

# a84af0a82f53461987e94cd23280609f
#: ../../topics/auth/default.txt:1675
msgid ""
"Also note: if you want a user account to be able to create users using the "
"Django admin site, you'll need to give them permission to add users *and* "
"change users (i.e., the \"Add user\" and \"Change user\" permissions). If an "
"account has permission to add users but not to change them, that account "
"won't be able to add users. Why? Because if you have permission to add "
"users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""
"Также следует отметить, что если вам нужен пользоватедль, который бы "
"позволил создавать пользователей с помощью интерфейса администратора, вам "
"следует дать ему право на добавление пользователей *и* право на изменение "
"пользователей (т.е., права \"Добавить пользователя\" и \"Изменить "
"пользователя\"). Если пользователь обладает правом создания пользователей, "
"но не имеет права на их редактирование, тогда он не сможет создавать "
"пользователей. Почему? Потому что, если у вас есть право на создание "
"пользователей, у вас есть возможность создать суперпользователей, которые "
"могут в свою очередь, изменять других пользователей. Таким образом, Django "
"требует наличие прав на добавление *и* изменение пользователей в целях "
"безопасности."

#: ../../topics/auth/default.txt:1684
msgid ""
"Be thoughtful about how you allow users to manage permissions. If you give a "
"non-superuser the ability to edit users, this is ultimately the same as "
"giving them superuser status because they will be able to elevate "
"permissions of users including themselves!"
msgstr ""
"Продумайте как вы позволяете управлять правами. Если вы предоставите "
"обычному пользователю право на редактирование пользователей, это будет "
"означать то же самое, что и предоставление ему прав суперпользователя, так "
"как он сможет повысить права пользователей, включая себя!"

# 75e3a3c238454a37b120e8e47f2e2373
#: ../../topics/auth/default.txt:1692
msgid ""
"User passwords are not displayed in the admin (nor stored in the database), "
"but the :doc:`password storage details </topics/auth/passwords>` are "
"displayed. Included in the display of this information is a link to a "
"password change form that allows admins to change user passwords."
msgstr ""
"Пароли пользователей не отображаются на интерфейсе администратора (и не "
"сохраняются в базе данных), но отображаются :doc:`детали хранилища пароля </"
"topics/auth/passwords>`. Рядом с этой информацией находится ссылка на форму "
"изменения пароля, которая позволяет администраторам изменять пароли "
"пользователей."

# bb9a98d95e35497599ad6ab5c71e626c
#, fuzzy
#~ msgid "The optional ``request`` argument was added."
#~ msgstr "Был добавлен ``email_email_context``."

#, fuzzy
#~ msgid ""
#~ "The unused ``extra_context`` parameter is deprecated and will be removed "
#~ "in Django 2.1."
#~ msgstr "Аргумент ``is_admin_site`` устарел и будет удалён в Django 1.10."

# 7b184ccfa78a48719e71d7cf7eb0ff5e
#~ msgid ""
#~ "``form``: The form (see ``set_password_form`` above) for setting the new "
#~ "user's password."
#~ msgstr ""
#~ "``form``: Форма (см. ``set_password_form`` выше) для установки нового "
#~ "пароля для пользователя."

#, fuzzy
#~ msgid ""
#~ "Session verification is enabled and mandatory in Django 1.10 (there's no "
#~ "way to disable it) regardless of whether or not "
#~ "``SessionAuthenticationMiddleware`` is enabled. In older versions, this "
#~ "protection only applies if ``django.contrib.auth.middleware."
#~ "SessionAuthenticationMiddleware`` is enabled in :setting:`MIDDLEWARE`."
#~ msgstr ""
#~ "Проверка сессии станет обязательной в Django 1.10 вне зависимости от "
#~ "того, активировано ли ``SessionAuthenticationMiddleware``. Если вы "
#~ "работаете над проектом до Django 1.7 или он был сгенерирован с помощью "
#~ "шаблона, который не включает ``SessionAuthenticationMiddleware``, "
#~ "рассмотрите вариант активации этой возможности прежде чем продолжить "
#~ "чтение соглашений по обновлению."

# ba08a934f20f42a2a50233fe25345103
# 3f63b2d80f8146259c9843c44ce88023
# d24477374548441590571c826397d582
# 4dcad36bd25d486e9ffe24c5b9468360
# dcf385b8c45d4043b89182b5e0d8b039
# 7bb161d5f8d04394b628167952ba7134
# 2cc38cfbe0ca4b5d87bcee90457ca4ad
# b11c22af28ec4a5e9ed953f80e740955
# 0f150605c2364e06972771a7a4710a65
# ccec6d7b3a404e51b49bd2e93b6dac60
#~ msgid ""
#~ "``current_app``: A hint indicating which application contains the current "
#~ "view. See the :ref:`namespaced URL resolution strategy <topics-http-"
#~ "reversing-url-namespaces>` for more information."
#~ msgstr ""
#~ "``current_app``: Подсказка, указывающая на приложение к которому "
#~ "принадлежит текущее представление. Обратитесь к :ref:`стратегии "
#~ "разрешения URL пространства имён <topics-http-reversing-url-namespaces>` "
#~ "для получения подробностей."

#, fuzzy
#~ msgid ""
#~ "The ``current_app`` attribute is deprecated and will be removed in Django "
#~ "2.0. Callers should set ``request.current_app`` instead."
#~ msgstr ""
#~ "Параметр ``current_app`` устарел и будет удалён в Django 2.0. Следует "
#~ "использовать ``request.current_app``."

#~ msgid ""
#~ "The ``current_app`` parameter is deprecated and will be removed in Django "
#~ "2.0. Callers should set ``request.current_app`` instead."
#~ msgstr ""
#~ "Параметр ``current_app`` устарел и будет удалён в Django 2.0. Следует "
#~ "использовать ``request.current_app``."

# 67b7943d69f64ca8926cd9b503ee775b
#~ msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
#~ msgstr ""
#~ "Таким образом вы можете проверять права в шаблонном выражении ``{% if %}"
#~ "``:"

# 89328c9c44a24bb88a3604694309cf91
#~ msgid ""
#~ "In older versions, the ``permission`` parameter only worked with strings, "
#~ "lists, and tuples instead of strings and any iterable."
#~ msgstr ""
#~ "В старых версиях, параметр ``permission`` работал только со строками, "
#~ "списками и кортежами, вместо строк и любых перечислений."

#~ msgid ""
#~ "All views return a :class:`~django.template.response.TemplateResponse` "
#~ "instance, which allows you to easily customize the response data before "
#~ "rendering. A way to do this is to wrap a view in your own view::"
#~ msgstr ""
#~ "Все представления возвращают экземпляр :class:`~django.template.response."
#~ "TemplateResponse`, который позволяет легко изменять содержимое отклика "
#~ "перед его рендеринг7ом. Для этого следует обернуть представление внутри "
#~ "вашего собственного представления::"

#~ msgid ""
#~ "For more details, see the :doc:`TemplateResponse documentation </ref/"
#~ "template-response>`."
#~ msgstr ""
#~ "Для получения подробностей обратитесь к :doc:`документации на "
#~ "TemplateResponse </ref/template-response>`."

# 56c127f58fd247148b6e9787dc792953
#~ msgid "``uidb64``: The user's id encoded in base 64. Defaults to ``None``."
#~ msgstr ""
#~ "``uidb64``: Идентификатор пользователя закодированный в  base 64. По "
#~ "умолчанию, ``None``."

# 2728add6223f433889500d541aa33edd
#~ msgid ""
#~ "``token``: Token to check that the password is valid. Defaults to "
#~ "``None``."
#~ msgstr ""
#~ "``token``: Токен для проверки корректности пароля. По умолчанию, ``None``."

# 01e719b226724ac0a7868b2a40e05091
#~ msgid "Calling ``authenticate()`` first"
#~ msgstr "Сначала вызывайте ``authenticate()``"

#~ msgid ""
#~ "When you're manually logging a user in, you *must* successfully "
#~ "authenticate the user with :func:`~django.contrib.auth.authenticate()` "
#~ "before you call :func:`~django.contrib.auth.login()`. :func:`~django."
#~ "contrib.auth.authenticate()` sets an attribute on the :class:`~django."
#~ "contrib.auth.models.User` noting which authentication backend "
#~ "successfully authenticated that user (see the :ref:`backends "
#~ "documentation <authentication-backends>` for details), and this "
#~ "information is needed later during the login process. An error will be "
#~ "raised if you try to login a user object retrieved from the database "
#~ "directly."
#~ msgstr ""
#~ "Когда вы самостоятельно авторизуете пользователя, вы *должны* успешно "
#~ "выполнить его аутентификацию с помощью функции :func:`~django.contrib."
#~ "auth.authenticate()` перед вызовом функции :func:`~django.contrib.auth."
#~ "login()`. Функция :func:`~django.contrib.auth.authenticate()` "
#~ "устанавливает атрибут у класса :class:`~django.contrib.auth.models.User`, "
#~ "указывающий бэкенд относительно которого был успешно аутентифицирован "
#~ "данный пользователь (обратитесь к :ref:`документации на бэкенды "
#~ "<authentication-backends>` для подробностей), эта информация понадобится "
#~ "позже для процесса авторизации. При попытке авторизации объекта "
#~ "пользователя, который был получен из базы напрямую, будет выброшена "
#~ "ошибка."

# 032fde6753c643328604a21e0f2cf615
#~ msgid ""
#~ "This protection only applies if :class:`~django.contrib.auth.middleware."
#~ "SessionAuthenticationMiddleware` is enabled in :setting:"
#~ "`MIDDLEWARE_CLASSES`. It's included if ``settings.py`` was generated by :"
#~ "djadmin:`startproject` on Django ≥ 1.7."
#~ msgstr ""
#~ "Данная защитная мера применяется только в случае, если активировано :"
#~ "class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` в "
#~ "параметре конфигурации :setting:`MIDDLEWARE_CLASSES`. Оно активировано, "
#~ "если файл ``settings.py`` был сгенерирован с помощью команды :djadmin:"
#~ "`startproject` на Django ≥ 1.7."

# 3cd9bf4ead74493c83ab44a3fe9198d2
#~ msgid ""
#~ "If you are upgrading an existing site and wish to enable this middleware "
#~ "without requiring all your users to re-login afterward, you should first "
#~ "upgrade to Django 1.7 and run it for a while so that as sessions are "
#~ "naturally recreated as users login, they include the session hash as "
#~ "described above. Once you start running your site with :class:`~django."
#~ "contrib.auth.middleware.SessionAuthenticationMiddleware`, any users who "
#~ "have not logged in and had their session updated with the verification "
#~ "hash will have their existing session invalidated and be required to "
#~ "login."
#~ msgstr ""
#~ "Если вы обновляете существующий сайт и требуется активировать :class:"
#~ "`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` без "
#~ "необходимости повторной авторизации всех ваших пользователей, вам сначала "
#~ "следует обновиться до Django 1.7 и подождать некоторое время, чтобы "
#~ "сессии были пересозданы естественным образом по мере авторизации "
#~ "пользователей, сессии будут содержать хэш, описанный ранее. Для всех "
#~ "пользователи, которые не были авторизованы и для которых были обновлены "
#~ "сессии с помощью проверочного хэша, будет сброшена текущая сессия и им "
#~ "потребуется выполнить повторную авторизацию."

# 9bbe031e88ac4393990d1ad31ce3fb0b
#~ msgid "``next_page``: The URL to redirect to after logout."
#~ msgstr "``next_page``: URL, на который будет осуществлено перенаправление."

# 69249d34ee4a4ac8b9f993b9dd939088
#~ msgid "Creating Users"
#~ msgstr "Создание пользователей"

# 5e0a40e7e2e74b4e964b3824b932c3c8
#~ msgid "Changing Passwords"
#~ msgstr "Изменение паролей"

# 25dbef900e794d1ab73641e9def4f7c9
#~ msgid ""
#~ "The :func:`~django.contrib.auth.decorators.permission_required` decorator "
#~ "can take a list of permissions as well as a single permission."
#~ msgstr ""
#~ "Декоратор :func:`~django.contrib.auth.decorators.permission_required` "
#~ "может принимать список как одно право, так и их список."

# 8e56ff5f9c71445ca339c6a9858334e0
#~ msgid "Applying permissions to generic views"
#~ msgstr "Проверка права в базовых представлениях"

# 0a4f94cf312e4cbd820d8b036fd15823
#~ msgid ""
#~ "To apply a permission to a :doc:`class-based generic view </ref/class-"
#~ "based-views/index>`, decorate the :meth:`View.dispatch <django.views."
#~ "generic.base.View.dispatch>` method on the class. See :ref:`decorating-"
#~ "class-based-views` for details. Another approach is to :ref:`write a "
#~ "mixin that wraps as_view() <mixins_that_wrap_as_view>`."
#~ msgstr ""
#~ "Для того, чтобы проверить право в :doc:`базовом представлении на основе "
#~ "CBV </ref/class-based-views/index>`, следует декорировать метод :meth:"
#~ "`View.dispatch <django.views.generic.base.View.dispatch>` класса. "
#~ "Прочитайте `декорирование CBV <decorating-class-based-views>`_ для "
#~ "подробностей. Также можно :ref:`написать примесь, которая обернёт "
#~ "as_view() <mixins_that_wrap_as_view>`."

# 2e6c6366128f49a48ab34d98323d8ad3
#~ msgid "username"
#~ msgstr "username"

# 77d6442b216940c584e84b05e5b18f75
#~ msgid "password"
#~ msgstr "password"

# ee358bda76444ddba0cc03b203411228
#~ msgid "email"
#~ msgstr "email"

# e85df72acb044f3dbeafb882e4c90730
#~ msgid "first name"
#~ msgstr "first name(имя)"

# 471e33e4ed034acaad5470ffad31bd1f
#~ msgid "last name"
#~ msgstr "last name(фамилия)"
