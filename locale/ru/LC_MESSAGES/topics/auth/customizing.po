# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: %10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 5ec0bd06f7af46689f4fa0570b023d69
#: ../../topics/auth/customizing.txt:3
msgid "Customizing authentication in Django"
msgstr "Расширяем модуль аутентификации Django"

# a90f5369338d4281b63e29ba2f38050e
#: ../../topics/auth/customizing.txt:5
msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have needs not met by the out-of-the-box defaults. To "
"customize authentication to your projects needs involves understanding what "
"points of the provided system are extensible or replaceable. This document "
"provides details about how the auth system can be customized."
msgstr ""
"Система аутентификации, входящая в состав Django, отлично подойдёт для "
"решения многих типичных задач, однако вам может не хватить функциональности, "
"предоставляемой \"из коробки\". Для того, чтобы настроить аутентификацию под "
"требования своего проекта сначала необходимо разобраться какие части этой "
"системы могут быть расширены или заменены. В этом документе мы детально "
"рассмотрим возможности настройки системы аутентификации."

# e5e0af4c5e384a28888b0568f4269e41
#: ../../topics/auth/customizing.txt:11
msgid ""
":ref:`Authentication backends <authentication-backends>` provide an "
"extensible system for when a username and password stored with the User "
"model need to be authenticated against a different service than Django's "
"default."
msgstr ""
":ref:`Бэкенды аутентификации <authentication-backends>`  обеспечивают "
"расширяемую систему для аутентификации в разных сервисах, в дополнение к "
"стандартной для Django системе аутентификации через модель User."

# 5584008e640c4f7ca6d09b3cfa5e13ab
#: ../../topics/auth/customizing.txt:15
msgid ""
"You can give your models :ref:`custom permissions <custom-permissions>` that "
"can be checked through Django's authorization system."
msgstr ""
"Вы можете назначить вашим моделям собственные :ref:`права доступа <custom-"
"permissions>`, которые могут быть проверены системой аутентификации Django."

# d16de6ae94754ab9b2aecb9738288385
#: ../../topics/auth/customizing.txt:18
msgid ""
"You can :ref:`extend <extending-user>` the default User model, or :ref:"
"`substitute <auth-custom-user>` a completely customized model."
msgstr ""
"Вы можете :ref:`расширить <extending-user>` стандартную модель User или "
"полностью :ref:`заменить <auth-custom-user>` эту модель."

# f056ebbb410a48a09ff73ff9e565e40e
#: ../../topics/auth/customizing.txt:24
msgid "Other authentication sources"
msgstr "Другие сервисы аутентификации"

# ee9546fdc72546f290d3a086eaa944f6
#: ../../topics/auth/customizing.txt:26
msgid ""
"There may be times you have the need to hook into another authentication "
"source -- that is, another source of usernames and passwords or "
"authentication methods."
msgstr ""
"Бывают случаи когда вам необходимо подключиться к сторонним сервисам "
"аутентификации, использующим альтернативные источники имён пользователей, "
"паролей или иные методы аутентификации."

# 17edfc9b916d4fec948452e426ea5e93
#: ../../topics/auth/customizing.txt:30
msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr ""
"Например, в вашей компании используется система LDAP для хранения логинов и "
"паролей для каждого сотрудника.  Иметь разные аккаунты для LDAP и Django "
"приложений не очень удобно, как для пользователей, так и для администраторов "
"сети."

# 6d93153aa438434a905c56859d8ea67e
#: ../../topics/auth/customizing.txt:35
msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""
"В такой ситуации возможно интегрировать систему аутентификации Django с "
"другой системой аутентификации. Вы можете переопределить стандартную систему "
"аутентификации Django или объединить её с другими системами."

# 17cd403e6cc9420d84af05c96efe1a38
#: ../../topics/auth/customizing.txt:40
msgid ""
"See the :ref:`authentication backend reference <authentication-backends-"
"reference>` for information on the authentication backends included with "
"Django."
msgstr ""
"Обратитесь к :ref:`справочнику по бренду аутентификации  <authentication-"
"backends-reference>` для информации по бэкендам аутентификации, поставляемым "
"с Django."

# 8c51fd65446a4d92b3d746b15695078c
#: ../../topics/auth/customizing.txt:45
msgid "Specifying authentication backends"
msgstr "Бэкенды аутентификации"

# 28b746db6d1049c4b36103cf2990165e
#: ../../topics/auth/customizing.txt:47
msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls :func:`django.contrib."
"auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-"
"log-a-user-in>` -- Django tries authenticating across all of its "
"authentication backends. If the first authentication method fails, Django "
"tries the second one, and so on, until all backends have been attempted."
msgstr ""
"Система аутентификации Django поддерживает список бэкендов, которые она "
"применяет в свой работе. Когда кто-то вызывает :func:`django.contrib.auth."
"authenticate()` -- в соответствии с документом :ref:`Как авторизовать "
"пользователя <how-to-log-a-user-in>` -- Django пробует авторизовать "
"пользователя с помощью бекэндов из списка. Если первый бэкенд не подошёл, "
"Django пробует использовать второй и так далее пока не кончится список."

# b42258a85c2a45a2bba28acc112b1a10
#: ../../topics/auth/customizing.txt:54
#, fuzzy
msgid ""
"The list of authentication backends to use is specified in the :setting:"
"`AUTHENTICATION_BACKENDS` setting. This should be a list of Python path "
"names that point to Python classes that know how to authenticate. These "
"classes can be anywhere on your Python path."
msgstr ""
"Список бэкендов аутентификации определён в параметре :setting:"
"`AUTHENTICATION_BACKENDS` файла конфигурации в виде кортежа путей к классам "
"Python'а, в которых определены методы аутентификации. Эти классы могут "
"располагаться где угодно, лишь бы были доступны интерпретатору Python."

# 83023254ab044d6186a0e4e76b46c021
#: ../../topics/auth/customizing.txt:59
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr "По умолчанию, :setting:`AUTHENTICATION_BACKENDS`  устанавливается как:"

# 39a3d191a7c5468eb2e1c8ec5c9298af
#: ../../topics/auth/customizing.txt:63
msgid ""
"That's the basic authentication backend that checks the Django users "
"database and queries the built-in permissions. It does not provide "
"protection against brute force attacks via any rate limiting mechanism. You "
"may either implement your own rate limiting mechanism in a custom auth "
"backend, or use the mechanisms provided by most Web servers."
msgstr ""
"Это стандартный бэкенд аутентификации Django, который ищет пользователей в "
"базе данных и определяет их базовые права доступа .Этот модуль не "
"поддерживает защиту от перебора паролей путём какого-либо ограничивающего "
"механизма. Вы можете либо реализовать свой собственный механизм ограничения "
"или использовать механизм предоставляемый многими веб серверами."

# 376348d9a83743f48ea4e93660321c82
#: ../../topics/auth/customizing.txt:69
msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ""
"Также имеет значение порядок перечисления бэкендов в параметре конфигурации :"
"setting:`AUTHENTICATION_BACKENDS`. Таким образом, если один логин и пароль "
"совпадает в нескольких бэкендах аутентификации, то Django прекратит проверку "
"на первом из них."

# a668ad5f24c843ddae9f6c218798656b
#: ../../topics/auth/customizing.txt:73
msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception, authentication will immediately fail. Django won't check the "
"backends that follow."
msgstr ""
"Если какой-либо бэкенд вызовет исключение :class:`~django.core.exceptions."
"PermissionDenied`, процесс аутентификации немедленно остановится. В этом "
"случае Django не будет пытаться проверить бэкенды, следующие по списку далее."

# 6b23cccc193a4ed2a7c73dab43d508fe
#: ../../topics/auth/customizing.txt:79
msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for the duration of that session whenever access to the currently "
"authenticated user is needed. This effectively means that authentication "
"sources are cached on a per-session basis, so if you change :setting:"
"`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need "
"to force users to re-authenticate using different methods. A simple way to "
"do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""
"После успешной аутентификации пользователя Django сохраняет в сессии "
"указание на соответствующий бэкенд и повторно использует его всё время жизни "
"сессии при обращении к текущему пользователю. Это показывает, что источники "
"аутентификации кэшируются на уровне сессий, следовательно, при изменении "
"параметра конфигурации :setting:`AUTHENTICATION_BACKENDS` вам потребуется "
"очистить сессию при необходимости заставить пользователей выполнить "
"аутентификацию другими методами. Проще всего это сделать с помощью ``Session."
"objects.all().delete()``."

# 671ab7feee21419e953be714e89daf61
#: ../../topics/auth/customizing.txt:89
msgid "Writing an authentication backend"
msgstr "Создание бэкенда аутентификации"

# f9f5d6985b5746af8828d36a164aae10
#: ../../topics/auth/customizing.txt:91
msgid ""
"An authentication backend is a class that implements two required methods: "
"``get_user(user_id)`` and ``authenticate(**credentials)``, as well as a set "
"of optional permission related :ref:`authorization methods "
"<authorization_methods>`."
msgstr ""
"Бэкенд аутентификации - это класс, реализующий два обязательных метода: "
"``get_user(user_id)`` и ``authenticate(**credentials)``, а так же ряд "
"необязательных прав, относящихся к :ref:`методам аутентификации "
"<authorization_methods>`."

# 0a139829d40c457a822c16cef0b2f8b5
#: ../../topics/auth/customizing.txt:95
msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever, but has to be the primary key of your ``User`` "
"object -- and returns a ``User`` object."
msgstr ""
"Метод ``get_user`` принимает параметр ``user_id``, который может быть как "
"именем пользователя, так и ID базы данных или чем-либо ещё, но передаваемое "
"значение обязательно должно быть первичным ключом модели ``User``, и "
"возвращает объект ``User``."

# 622e4a3c44214a19a2f43d85f9349d60
#: ../../topics/auth/customizing.txt:99
msgid ""
"The ``authenticate`` method takes credentials as keyword arguments. Most of "
"the time, it'll just look like this::"
msgstr ""
"Метод ``authenticate`` принимает учётные данные в виде именованных "
"аргументов. В основном, это будет выглядеть так::"

# 636606df6d234b918978016d6c4bd281
#: ../../topics/auth/customizing.txt:107
msgid "But it could also authenticate a token, like so::"
msgstr "Также метод может принимать токен, вот так::"

# 90055239e5d5462487d82d78428d964f
#: ../../topics/auth/customizing.txt:114
msgid ""
"Either way, ``authenticate`` should check the credentials it gets, and it "
"should return a ``User`` object that matches those credentials, if the "
"credentials are valid. If they're not valid, it should return ``None``."
msgstr ""
"В любом случае, метод ``authenticate`` должен проверить переданные ему "
"учётные данные и вернуть объект ``User``, соответствующий этим данным в "
"случае их корректности. В другом случае он должен вернуть ``None``."

# 26f836d7400e49d688998ae5c22365cc
#: ../../topics/auth/customizing.txt:118
#, fuzzy
msgid ""
"The Django admin is tightly coupled to the Django :ref:`User object <user-"
"objects>`. The best way to deal with this is to create a Django ``User`` "
"object for each user that exists for your backend (e.g., in your LDAP "
"directory, your external SQL database, etc.) You can either write a script "
"to do this in advance, or your ``authenticate`` method can do it the first "
"time a user logs in."
msgstr ""
"Система администрирования фреймворка тесно связана с объектом ``User``, "
"описанным в начале этого документа. Наилучшим способом взаимодействия с "
"данной системой будет создание объекта ``User`` для каждого пользователя, "
"который будет работать с вашим БД бэкендом (т.е., в вашем LDAP, во внешней "
"SQL БД и так далее.) Вы можете написать скрипт, который заранее выполнит "
"необходимые действия, или добавить логику в метод ``authenticate``, которая "
"будет создавать объект автоматически при первом обращении."

# f6f24bbbf4c24e78b2c8d67bbe199d49
#: ../../topics/auth/customizing.txt:125
msgid ""
"Here's an example backend that authenticates against a username and password "
"variable defined in your ``settings.py`` file and creates a Django ``User`` "
"object the first time a user authenticates::"
msgstr ""
"Ниже представлен пример бэкенда, который выполняет аутентификацию "
"относительно переменных имени и пароля пользователя, определённых в файле "
"``settings.py``  и создаёт объект ``User`` при первой аутентификации "
"пользователя::"

# 6cf7c0d6dc6b4620bbfb6cf265610d77
#: ../../topics/auth/customizing.txt:169
msgid "Handling authorization in custom backends"
msgstr "Управление методами авторизации в своих бэкендах"

# 599389d4f1db44febd97a46b19acaec2
#: ../../topics/auth/customizing.txt:171
msgid "Custom auth backends can provide their own permissions."
msgstr ""
"Бэкенды аутентификации могут представлять дополнительные права доступа."

# a9e9d321d8c94e4a95d7df294fbbdb41
#: ../../topics/auth/customizing.txt:173
msgid ""
"The user model will delegate permission lookup functions (:meth:`~django."
"contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib."
"auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models."
"User.has_perm()`, and :meth:`~django.contrib.auth.models.User."
"has_module_perms()`) to any authentication backend that implements these "
"functions."
msgstr ""
"Модель пользователя передаст функции по проверке прав (:meth:`~django."
"contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib."
"auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models."
"User.has_perm()` и :meth:`~django.contrib.auth.models.User."
"has_module_perms()`) любому бэкенду аутентификации, который их реализует."

# 568437b1632044d6ae37c05da09c4ffe
#: ../../topics/auth/customizing.txt:180
msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that "
"any one backend grants."
msgstr ""
"Предоставленные пользователю права являются набором прав, представленных "
"пользователю всеми бэкендами. Следовательно, Django представляет "
"пользователю права, которые выдал хотя бы один бэкенд."

#: ../../topics/auth/customizing.txt:184
msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception in :meth:`~django.contrib.auth.models.User.has_perm()` or :meth:"
"`~django.contrib.auth.models.User.has_module_perms()`, the authorization "
"will immediately fail and Django won't check the backends that follow."
msgstr ""
"Если бэкенд вызовет исключение :class:`~django.core.exceptions."
"PermissionDenied` в методах :meth:`~django.contrib.auth.models.User."
"has_perm()` или :meth:`~django.contrib.auth.models.User.has_module_perms()`, "
"процесс авторизации будет немедленно остановлен и остальные бэкенды вызваны "
"не будут."

# f985f557564a4d7a81e7f0c2af23a077
#: ../../topics/auth/customizing.txt:189
msgid ""
"The simple backend above could implement permissions for the magic admin "
"fairly simply::"
msgstr ""
"Организовать проверку прав для простого бэкенда из примера выше довольно "
"просто::"

# 654b7b22963a4392b382b0641395d0e9
#: ../../topics/auth/customizing.txt:197
msgid ""
"This gives full permissions to the user granted access in the above example. "
"Notice that in addition to the same arguments given to the associated :class:"
"`django.contrib.auth.models.User` functions, the backend auth functions all "
"take the user object, which may be an anonymous user, as an argument."
msgstr ""
"В примере, показанном выше, пользователю выдаётся полный набор прав доступа. "
"Следует отметить, что в дополнение к передачи аргументов стандартных для "
"функций :class:`django.contrib.auth.models.User`, для всех функций "
"аутентификации необходимо передавать объект пользователя, который может быть "
"и анонимным."

# 30ff60bc4ee143848b4e407dd08529db
#: ../../topics/auth/customizing.txt:202
msgid ""
"A full authorization implementation can be found in the ``ModelBackend`` "
"class in `django/contrib/auth/backends.py`_, which is the default backend "
"and queries the ``auth_permission`` table most of the time. If you wish to "
"provide custom behavior for only part of the backend API, you can take "
"advantage of Python inheritance and subclass ``ModelBackend`` instead of "
"implementing the complete API in a custom backend."
msgstr ""
"Полная реализация бэкенда аутентификации может быть найдена в классе "
"``ModelBackend``, определённом в файле  `django/contrib/auth/backends.py`_, "
"который является стандартным бэкендом и в основном работает с таблицей "
"``auth_permission``. Если вам потребуется реализовать нестандартное "
"поведение для определённой части API бэкендов, воспользуйтесь возможностями "
"наследования в Python и унаследуйте ``ModelBackend``, вместо реализации "
"полного API в своём бэкенде."

# 201f8d055ec7430dace2eddd89e5b3d6
#: ../../topics/auth/customizing.txt:214
msgid "Authorization for anonymous users"
msgstr "Авторизация анонимных пользователей"

# c1136bd9d3f14ffb8502c6bf58faa27e
#: ../../topics/auth/customizing.txt:216
#, fuzzy
msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most "
"websites authorize anonymous users to browse most of the site, and many "
"allow anonymous posting of comments etc."
msgstr ""
"Анонимным пользователем называют пользователя, который ещё не прошёл "
"процедуру аутентификации, соответственно мы не имеем о нём никакой "
"информации. Однако это не означает, что анонимные пользователи не могут "
"пользоваться вашим приложением. Большинство сайтов позволяют анонимам "
"просматривать информацию, некоторые даже разрешают оставлять анонимные "
"комментарии."

# 78278ca440a249619f67a25c0620c2b7
#: ../../topics/auth/customizing.txt:222
msgid ""
"Django's permission framework does not have a place to store permissions for "
"anonymous users. However, the user object passed to an authentication "
"backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, "
"allowing the backend to specify custom authorization behavior for anonymous "
"users. This is especially useful for the authors of re-usable apps, who can "
"delegate all questions of authorization to the auth backend, rather than "
"needing settings, for example, to control anonymous access."
msgstr ""
"Компонент Django, обеспечивающий работу с правами доступа, не выделяет место "
"под хранение данных о правах анонимных пользователей. Тем не менее, объект "
"пользователя, передаваемый в бэкенд аутентификации может являться "
"экземпляром класса :class:`django.contrib.auth.models.AnonymousUser`, что "
"позволяет определять определённое поведение для анонимных пользователей. Это "
"очень полезно для авторов повторно используемых приложений, которые могут "
"делегировать задачу авторизации соответствующему бэкенду, а не изменят "
"определённые настройки для контроля за доступом анонимных пользователей."

# 33cbb996040b4fc89bfaedb3728baebb
#: ../../topics/auth/customizing.txt:233
msgid "Authorization for inactive users"
msgstr "Авторизация неактивных пользователей"

#: ../../topics/auth/customizing.txt:235
msgid ""
"An inactive user is a one that has its :attr:`~django.contrib.auth.models."
"User.is_active` field set to ``False``. The :class:`~django.contrib.auth."
"backends.ModelBackend` and :class:`~django.contrib.auth.backends."
"RemoteUserBackend` authentication backends prohibits these users from "
"authenticating. If a custom user model doesn't have an :attr:`~django."
"contrib.auth.models.CustomUser.is_active` field, all users will be allowed "
"to authenticate."
msgstr ""

#: ../../topics/auth/customizing.txt:243
msgid ""
"You can use :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` "
"or :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` if "
"you want to allow inactive users to authenticate."
msgstr ""

# 225654e8769c4a5db9b1eeabe67610bc
#: ../../topics/auth/customizing.txt:247
msgid ""
"The support for anonymous users in the permission system allows for a "
"scenario where anonymous users have permissions to do something while "
"inactive authenticated users do not."
msgstr ""
"Поддержка анонимных пользователей в системе прав доступа позволяет "
"реализовать сценарий, когда анонимные пользователи могут выполнять какие-"
"либо действия в то время как неактивные авторизованные пользователи не могут "
"этого делать."

# a4553b8476ba48df822f255965edf1ad
#: ../../topics/auth/customizing.txt:251
msgid ""
"Do not forget to test for the ``is_active`` attribute of the user in your "
"own backend permission methods."
msgstr ""
"Не забывайте проверять атрибут ``is_active`` в методах проверки "
"правпользователей вашего бекэнда."

#: ../../topics/auth/customizing.txt:256
msgid ""
"In older versions, the :class:`~django.contrib.auth.backends.ModelBackend` "
"allowed inactive users to authenticate."
msgstr ""

# c3860481df894ccabd5fe9af2c5a03b6
#: ../../topics/auth/customizing.txt:260
msgid "Handling object permissions"
msgstr "Обработка разрешений для объектов"

# c1438f0240144ef5aa43fbd2179c94fa
#: ../../topics/auth/customizing.txt:262
msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed). An authentication backend will "
"receive the keyword parameters ``obj`` and ``user_obj`` for each object "
"related authorization method and can return the object level permission as "
"appropriate."
msgstr ""
"В Django механизм управления правами подготовлен для работы с "
"правамиобъектов, хотя и ещё не реализован в ядре фреймворка. Это означает, "
"что проверкаправ объекта всегда будет возвращать False или пустой список (в "
"зависимости от видавыполняемой проверки). Бэкенд аутентификации получает "
"именованные параметры``obj`` и ``user_obj`` для каждого объекта "
"использованного в методе авторизации и соответственноможет вернуть "
"информацию о правах этого объекта."

# 9fcd36b508824c408868817f397b43ae
#: ../../topics/auth/customizing.txt:272
msgid "Custom permissions"
msgstr "Создаем пользовательские права доступа"

# 20ecf50e12844bd39fba51decae86b24
#: ../../topics/auth/customizing.txt:274
msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""
"Что бы создать пользовательские права доступа для вашей моделинеобходимо "
"определить их в переменной ``permissions`` :ref:`атрибуте Meta<meta-"
"options>`вашей модели."

# 7282b04b9cac44598dcf8b2a636b8bf7
#: ../../topics/auth/customizing.txt:277
msgid ""
"This example Task model creates three custom permissions, i.e., actions "
"users can or cannot do with Task instances, specific to your application::"
msgstr ""
"В примере ниже описывается как создать пользовательсике права доступадля "
"модели Task, другими словами вы определяеете что пользователь можетделать в "
"вашем приложении, а что нет:"

# 55d5a1fcfc0a4a228979ffa9d41793ba
#: ../../topics/auth/customizing.txt:289
#, fuzzy
msgid ""
"The only thing this does is create those extra permissions when you run :"
"djadmin:`manage.py migrate <migrate>` (the function that creates permissions "
"is connected to the :data:`~django.db.models.signals.post_migrate` signal). "
"Your code is in charge of checking the value of these permissions when a "
"user is trying to access the functionality provided by the application "
"(viewing tasks, changing the status of tasks, closing tasks.) Continuing the "
"above example, the following checks if a user may view tasks::"
msgstr ""
"Новые пользовательские права будут созданы после вызова :djadmin:`manage.py "
"migrate <migrate>`. Вашему приложению будетнеобходимо проверять эти значения "
"каждый раз когда пользовательпытается получить доступ к функциям приложения "
"(просмотр заданий,изменения статуса заданий, закрытие заданий). В "
"продолжении выше описаногопримера, так вы можете проверить права "
"пользователя для просмотра заданий:"

# 7556e3bacc294cce96aa2e70dd1f6542
#: ../../topics/auth/customizing.txt:302
#, fuzzy
msgid "Extending the existing ``User`` model"
msgstr "Расширяем модель User"

# eb2571bbb2324da2a328491c1c86ba74
#: ../../topics/auth/customizing.txt:304
msgid ""
"There are two ways to extend the default :class:`~django.contrib.auth.models."
"User` model without substituting your own model. If the changes you need are "
"purely behavioral, and don't require any change to what is stored in the "
"database, you can create a :ref:`proxy model <proxy-models>` based on :class:"
"`~django.contrib.auth.models.User`. This allows for any of the features "
"offered by proxy models including default ordering, custom managers, or "
"custom model methods."
msgstr ""
"Существуюет два способа расширения стандартной моделиclass:`~django.contrib."
"auth.models.User` без замены модели на вашусобственную. Если вам нужно "
"изменить только поведение моделибез измения данных вы можете создать :ref:"
"`proxy модель <proxy-models>`на основе модели :class:`~django.contrib.auth."
"models.User`. С помощью модели proxyвы можете,добавить, добавить "
"пользовательские менеджеры или методы сохранив стандартныефункции."

# 5c9b8b7a6bd84e7cb5f8337d8758926f
#: ../../topics/auth/customizing.txt:312
#, fuzzy
msgid ""
"If you wish to store information related to ``User``, you can use a :class:"
"`~django.db.models.OneToOneField` to a model containing the fields for "
"additional information. This one-to-one model is often called a profile "
"model, as it might store non-auth related information about a site user. For "
"example you might create an Employee model::"
msgstr ""
"Если вы хотите хранить ддополнительную информацию относящуююся к "
"модели``User`` вы можете использовать :ref:`связь один к одному <ref-"
"onetoone>` с полямимодели хранящей эту ифнормацию. Эту связанную модель "
"часто называют профайлпользователя, так как она хранит информацию не "
"относящююся к аутентификациипользователей. Например, вы можете создать "
"модель Employee:"

# d65ecf8f14b349e38e7b34e6eff30c82
#: ../../topics/auth/customizing.txt:324
msgid ""
"Assuming an existing Employee Fred Smith who has both a User and Employee "
"model, you can access the related information using Django's standard "
"related model conventions::"
msgstr ""
"Если предположить что сотрудник Fred Smith имеет записи как моделиUser так и "
"в модели Employee, вы можете получить связанную информацию используя "
"стандартные соглашения Django для использования моделей:"

# 6e93b67b98494c73ae0d884aff2f686c
#: ../../topics/auth/customizing.txt:331
msgid ""
"To add a profile model's fields to the user page in the admin, define an :"
"class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use "
"a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` "
"and add it to a ``UserAdmin`` class which is registered with the :class:"
"`~django.contrib.auth.models.User` class::"
msgstr ""
"Что бы добавить поля из модели профайла в интерфейс администраторанужно "
"определить :class:`~django.contrib.admin.InlineModelAdmin` в файле``admin."
"py`` вашего приложения (для этого примера используется:class:`~django."
"contrib.admin.StackedInline`), добавить его к классу  ``UserAdmin``и заново "
"зарегистрировать вместе с классом  :class:`~django.contrib.auth.models.User`"

# 57bbe0bedf8d48bdb503b39b41c0d606
#: ../../topics/auth/customizing.txt:358
msgid ""
"These profile models are not special in any way - they are just Django "
"models that happen to have a one-to-one link with a User model. As such, "
"they do not get auto created when a user is created, but a :attr:`django.db."
"models.signals.post_save` could be used to create or update related models "
"as appropriate."
msgstr ""
"Модель профайл это обычная модель Django. От других моделей ее "
"отличаеттолько наличие свзяи один к одному с моделью User. Как правило "
"записив этой модели не создаются автоматичски вместе с созданием "
"пользователя,но вы можете воспользоваться методом :attr:`django.db.models."
"signals.post_save`для создания или обновления записей в профайле по мере "
"необходимости."

# d103270b09a94b35b939844a79ed9e1e
#: ../../topics/auth/customizing.txt:364
msgid ""
"Note that using related models results in additional queries or joins to "
"retrieve the related data, and depending on your needs substituting the User "
"model and adding the related fields may be your better option.  However "
"existing links to the default User model within your project's apps may "
"justify the extra database load."
msgstr ""
"Заметим, что использование связаных моделей приводит к увеличениюзапросов к "
"базе данных и дополнительной нагрузке на нее, и, в зависиомтисот ваших "
"потребностей, замена модели User на вашу собственную модельс нужными вам "
"полями может быть лучшим выбором."

# 5e1cf218bbc349bd9a3e3b4ab118193f
#: ../../topics/auth/customizing.txt:373
#, fuzzy
msgid "Substituting a custom ``User`` model"
msgstr "Заменяем стандартную модель User"

# 6e5c2887477443cabdeb5947773a6940
#: ../../topics/auth/customizing.txt:375
msgid ""
"Some kinds of projects may have authentication requirements for which "
"Django's built-in :class:`~django.contrib.auth.models.User` model is not "
"always appropriate. For instance, on some sites it makes more sense to use "
"an email address as your identification token instead of a username."
msgstr ""
"Для некоторых проектов возможностей встроенной в Django модели:class:"
"`~django.contrib.auth.models.User` будет недостаточно. Например,вам "
"необходимо использовать в качестве идентификатора пользоавтеляemail адрес "
"вместо имени пользователя."

# 69e185ee6a0f4d61a3fa3014a9941c91
#: ../../topics/auth/customizing.txt:380
msgid ""
"Django allows you to override the default User model by providing a value "
"for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""
"Вы можете переписать стандартную модель User указав в настройках приложения :"
"setting:`AUTH_USER_MODEL` ссылка на вашу модель:"

# 519e8345beac402c8df46b18e5a54e26
#: ../../topics/auth/customizing.txt:385
msgid ""
"This dotted pair describes the name of the Django app (which must be in "
"your :setting:`INSTALLED_APPS`), and the name of the Django model that you "
"wish to use as your User model."
msgstr ""
"Эта ностройка определят что для этого приложения (myapp, которое должно "
"бытьпрописано в :setting:`INSTALLED_APPS`) необходимо использовать другую "
"модель(MyUser) вместо стандартной."

# 88cb4d3a0f3446f9b6a772b91f11d0e4
#: ../../topics/auth/customizing.txt:391
msgid ""
"Changing :setting:`AUTH_USER_MODEL` has a big effect on your database "
"structure. It changes the tables that are available, and it will affect the "
"construction of foreign keys and many-to-many relationships. If you intend "
"to set :setting:`AUTH_USER_MODEL`, you should set it before creating any "
"migrations or running ``manage.py migrate`` for the first time."
msgstr ""
"Изменение :setting:`AUTH_USER_MODEL` может сильно отразиться на "
"структуревашей базы данных. Так же это изменит доступность таблиц и "
"отразится наконструкции внешних ключей и отношение многие ко многим. Если вы "
"собираетесьиспользовать альтернативную модель вы должны указать ее в :"
"setting:`AUTH_USER_MODEL`до того как выполните какие либо миграции или "
"первого запуска ``manage.py migrate``."

# 331b540519f14caba211192e8fd4f3aa
#: ../../topics/auth/customizing.txt:397
msgid ""
"Changing this setting after you have tables created is not supported by :"
"djadmin:`makemigrations` and will result in you having to manually fix your "
"schema, port your data from the old user table, and possibly manually "
"reapply some migrations."
msgstr ""
"Изменение этой настройки после того как вы уже создали ваши таблицыне "
"отразится в :djadmin:`makemigrations` и вам нужно будет вручную правитьсхему "
"вашей БД, переносить данные из старой таблицы пользователей и,возможно, "
"вручную применять некторые миграции."

# 0f8e67f670b64406b18b98ca2ac52990
#: ../../topics/auth/customizing.txt:404
msgid ""
"Due to limitations of Django's dynamic dependency feature for swappable "
"models, you must ensure that the model referenced by :setting:"
"`AUTH_USER_MODEL` is created in the first migration of its app (usually "
"called ``0001_initial``); otherwise, you will have dependency issues."
msgstr ""
"Из-за ограничей в динамических зависимостях Django вам необходимоубедиться "
"что заменяемая модель указанная в :setting:`AUTH_USER_MODEL`была создано в "
"вашей первой миграции (обчно она называется 0001_initial).В противном случае "
"у вас будут проблемы с зависимотями."

# 31377eea681b4826994f1224a735094c
#: ../../topics/auth/customizing.txt:409
msgid ""
"In addition, you may run into a CircularDependencyError when running your "
"migrations as Django won't be able to automatically break the dependency "
"loop due to the dynamic dependency. If you see this error, you should break "
"the loop by moving the models depended on by your User model into a second "
"migration (you can try making two normal models that have a ForeignKey to "
"each other and seeing how ``makemigrations`` resolves that circular "
"dependency if you want to see how it's usually done)"
msgstr ""
"Кроме того вы можете столкнуться с CircularDependencyError когда "
"запуститемиграцию, Django не сможет самостоятельно выйти из бесконечного "
"цикла вызванногоавтоматическими зависимостями. Если вы видите эту ошибку вам "
"необходимо определитьмодель ссылающуюся на старую модель User и исправить "
"это в следующей миграции.Вы можете создать две обычные модели с внешними "
"ключами ссылающимися друг на другаи, запустив ``makemigrations``, увидеть "
"что происходит когда появляются циклические зависимости."

#: ../../topics/auth/customizing.txt:417
msgid "Reusable apps and ``AUTH_USER_MODEL``"
msgstr ""

#: ../../topics/auth/customizing.txt:419
msgid ""
"Reusable apps shouldn't implement a custom user model. A project may use "
"many apps, and two reusable apps that implemented a custom user model "
"couldn't be used together. If you need to store per user information in your "
"app, use a :class:`~django.db.models.ForeignKey` or :class:`~django.db."
"models.OneToOneField` to ``settings.AUTH_USER_MODEL`` as described below."
msgstr ""

# ad8dae4d04194c59a9a0fd8bc3eb97bd
#: ../../topics/auth/customizing.txt:427
#, fuzzy
msgid "Referencing the ``User`` model"
msgstr "Ссылка на модель User"

# 813e9db1f7484e16adee27304e40e0b5
#: ../../topics/auth/customizing.txt:431
msgid ""
"If you reference :class:`~django.contrib.auth.models.User` directly (for "
"example, by referring to it in a foreign key), your code will not work in "
"projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a "
"different User model."
msgstr ""
"Если вы ссылаетесь на модель на модель :class:`~django.contrib.auth.models."
"User`напрямую (например испльзую внешние ключи), ваш код не будет работать "
"впроектах где стандартная модель заменена на другую в настройке:setting:"
"`AUTH_USER_MODEL`."

# 2c54437ee8a445ff929050ce283ba902
#: ../../topics/auth/customizing.txt:438
msgid ""
"Instead of referring to :class:`~django.contrib.auth.models.User` directly, "
"you should reference the user model using ``django.contrib.auth."
"get_user_model()``. This method will return the currently active User model "
"-- the custom User model if one is specified, or :class:`~django.contrib."
"auth.models.User` otherwise."
msgstr ""
"Вместо того что бы ссылаться на модель :class:`~django.contrib.auth.models."
"User`напрямую, вы должны делать это использу метод ``django.contrib.auth."
"get_user_model()``.Этот метод возвращает действующею модель -- указаную в "
"настройках приложенииили стандартную модель :class:`~django.contrib.auth."
"models.User`, в случае если не изменялась."

# 233be4509bae4067b93692459d7ba477
#: ../../topics/auth/customizing.txt:444
msgid ""
"When you define a foreign key or many-to-many relations to the User model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. For example::"
msgstr ""
"Когда вы определяете в вашей модели пользователей внешние ключи илиотношения "
"многие ко многим вы должны указывать параметр:setting:`AUTH_USER_MODEL`. "
"Например:"

# 27369d91c7774c6e8dea0e2544f72963
#: ../../topics/auth/customizing.txt:457
#, fuzzy
msgid ""
"When connecting to signals sent by the ``User`` model, you should specify "
"the custom model using the :setting:`AUTH_USER_MODEL` setting. For example::"
msgstr ""
"Когда вы подключаете отсылку сигналов моделью пользователей выдолжны указать "
"параметр :setting:`AUTH_USER_MODEL`. Например:"

# fd2b020c92a74b14aaebb37b5e66d2d7
#: ../../topics/auth/customizing.txt:468
msgid ""
"Generally speaking, you should reference the User model with the :setting:"
"`AUTH_USER_MODEL` setting in code that is executed at import time. "
"``get_user_model()`` only works once Django has imported all models."
msgstr ""
"Другими словами вы всегда должны ссылаться на пользовательскуюмодель "
"используя настройку :setting:`AUTH_USER_MODEL` в вашем кодекоторая будет "
"проверться во время импорта. ``get_user_model()` работаеттолько один раз, "
"когда Django импортирует модели."

# 3762aaf1d15c47bfa9f0db67b258e8af
#: ../../topics/auth/customizing.txt:475
#, fuzzy
msgid "Specifying a custom ``User`` model"
msgstr "Определение пользовательской модели"

# 45ec0dc8c1314162b7b8b847acd628e1
#: ../../topics/auth/customizing.txt:477
msgid "Model design considerations"
msgstr "Разработка пользовательской модели"

# b07acbf1e9324851b473306d1ecd0536
#: ../../topics/auth/customizing.txt:479
msgid ""
"Think carefully before handling information not directly related to "
"authentication in your custom User Model."
msgstr ""
"Тщательно подумайте прежде чем хранить в пользовательской моделиинформацию "
"не относящуюся к аутентификации пользователя."

# a5d470a2037f4295ad363e46847be06f
#: ../../topics/auth/customizing.txt:482
msgid ""
"It may be better to store app-specific user information in a model that has "
"a relation with the User model. That allows each app to specify its own user "
"data requirements without risking conflicts with other apps. On the other "
"hand, queries to retrieve this related information will involve a database "
"join, which may have an effect on performance."
msgstr ""
"Может буть лучше хранить дополнительную информацию о "
"пользователяхнеобходимые вашему приложениею в другой модели с указанием "
"связи намодель User. Это позволит каждому приложению определять "
"специфичнуютолько для него информацию без риска возникновения конфликтов с "
"другимиприложениями. Но с другой стороны такой подход приведе к увеличению "
"запросовк базе данных а слдеовательно и нагрузки на нее."

# ad7153fa53394a069777c77b1bdc92f1
#: ../../topics/auth/customizing.txt:488
msgid ""
"Django expects your custom User model to meet some minimum requirements."
msgstr ""
"Django ожидает что ваше модель User будет отвечать некоторым "
"минимальнымрекомендациям."

# 3aa1507638cd4390becc6aa86ebaac8e
#: ../../topics/auth/customizing.txt:490
#, fuzzy
msgid ""
"If you use the default authentication backend, then your model must have a "
"single unique field that can be used for identification purposes. This can "
"be a username, an email address, or any other unique attribute. A non-unique "
"username field is allowed if you use a custom authentication backend that "
"can support it."
msgstr ""
"Ваша модель хотя бы одно уникальное поле для идентификации.Это может быть "
"имя пользователя, имейл адрес или любой другойуникальный атрибут."

# 0a269a9798fd40f4ad8aa830df53d043
#: ../../topics/auth/customizing.txt:496
msgid ""
"Your model must provide a way to address the user in a \"short\" and \"long"
"\" form. The most common interpretation of this would be to use the user's "
"given name as the \"short\" identifier, and the user's full name as the "
"\"long\" identifier. However, there are no constraints on what these two "
"methods return - if you want, they can return exactly the same value."
msgstr ""
"Ваша модель должна поддерживать короткую \"short\" и длинную \"long\"форму "
"обращения к пользователю. В наиболее общей интерпритацииэтого можно "
"использовать имя пользователя как \"короткий\" идентификатор,а его полное "
"имя как \"длинный\" идентификатор. Однако ни кто не мешает вамсдлеать так "
"что бы этих методоа возвращали одно и тоже значение."

# 904e1b078f6f4220aced801e26509c66
#: ../../topics/auth/customizing.txt:503
msgid ""
"The easiest way to construct a compliant custom User model is to inherit "
"from :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:`~django."
"contrib.auth.models.AbstractBaseUser` provides the core implementation of a "
"``User`` model, including hashed passwords and tokenized password resets. "
"You must then provide some key implementation details:"
msgstr ""
"Простейший способ построить модель совместимую с моделью User этонаследовать "
"модель :class:`~django.contrib.auth.models.AbstractBaseUser`.:class:`~django."
"contrib.auth.models.AbstractBaseUser` обеспечивает базовуюреализацию модели "
"User, в том числе хэширование паролей и сброс пароляпосредством токенов."

# d7d73cec0c814f20b9ad744c7a0e189b
#: ../../topics/auth/customizing.txt:515
#, fuzzy
msgid ""
"A string describing the name of the field on the User model that is used as "
"the unique identifier. This will usually be a username of some kind, but it "
"can also be an email address, or any other unique identifier. The field "
"*must* be unique (i.e., have ``unique=True`` set in its definition), unless "
"you use a custom authentication backend that can support non-unique "
"usernames."
msgstr ""
"Строка, указывающая имя поля модели User, которая испльзуется вкачестве "
"уникального идентификатора. Это, как правило, имя пользователяв нектором "
"виде, но также можеть и адресом эелектронной почты, илилюбой другой "
"уникальный идентификатор. Поле должно быть уникальным(т.е. unique=True)."

# fcc69f52a8d041c7a9503d06fb513502
#: ../../topics/auth/customizing.txt:522
msgid ""
"In the following example, the field ``identifier`` is used as the "
"identifying field::"
msgstr ""
"В примере ниже поле ``identifier`` используется в качествеуникального "
"идентификатора:"

#: ../../topics/auth/customizing.txt:530
msgid ""
":attr:`USERNAME_FIELD` now supports :class:`~django.db.models.ForeignKey`"
"\\s. Since there is no way to pass model instances during the :djadmin:"
"`createsuperuser` prompt, expect the user to enter the value of :attr:"
"`~django.db.models.ForeignKey.to_field` value (the :attr:`~django.db.models."
"Field.primary_key` by default) of an existing instance."
msgstr ""
"Атрибут :attr:`USERNAME_FIELD` теперь поддеоживает внешние ключи.В связи с "
"этим возникает проблема. При выполнении команды из:djadmin:`createsuperuser` "
"из командной строки вы неможете передатьобъект связанного объекта, по этому "
"вы можете просто указать простоID записи в БД (:attr:`~django.db.models."
"ForeignKey.to_field` указываетна ID по умолчанию)."

#: ../../topics/auth/customizing.txt:539
msgid ""
"A list of the field names that will be prompted for when creating a user via "
"the :djadmin:`createsuperuser` management command. The user will be prompted "
"to supply a value for each of these fields. It must include any field for "
"which :attr:`~django.db.models.Field.blank` is ``False`` or undefined and "
"may include additional fields you want prompted for when a user is created "
"interactively. ``REQUIRED_FIELDS`` has no effect in other parts of Django, "
"like creating a user in the admin."
msgstr ""
"Список имен полей, которые будут запрашиваться при создании пользователяс "
"использованием команды :djadmin:`createsuperuser`. Пользователю "
"будетпредложено задать значение для каждого из этих полей. Этот список "
"долженсодержать имена всех полей для которых атрибут blank уставновлен False "
"и полядля которых этот атрибут не определен, а так же любые другие поля "
"какие вы захотите.Изменение параметра ``REQUIRED_FIELDS`` ни как не "
"отразится на остальных частяхфреймворка Django, таких как создание "
"пользователя через панель администратора."

# 0dc922a0f91545438b8f6170a72f5b1c
#: ../../topics/auth/customizing.txt:548
msgid ""
"For example, here is the partial definition for a ``User`` model that "
"defines two required fields - a date of birth and height::"
msgstr ""
"Пример ниже показывает как можно задать два обязательных поля --дата "
"рождения и рост:"

# 84288d96abf548b096b0c85f6ecf6ffc
#: ../../topics/auth/customizing.txt:560
msgid ""
"``REQUIRED_FIELDS`` must contain all required fields on your ``User`` model, "
"but should *not* contain the ``USERNAME_FIELD`` or ``password`` as these "
"fields will always be prompted for."
msgstr ""
"В атрибуте ``REQUIRED_FIELDS`` вы можете задать любые обязательные полявашей "
"модели ``User`` кроме ``USERNAME_FIELD`` и ``password``. Эти поляявляются "
"обязательными по умолчанию."

#: ../../topics/auth/customizing.txt:564
msgid ""
":attr:`REQUIRED_FIELDS` now supports :class:`~django.db.models.ForeignKey`"
"\\s. Since there is no way to pass model instances during the :djadmin:"
"`createsuperuser` prompt, expect the user to enter the value of :attr:"
"`~django.db.models.ForeignKey.to_field` value (the :attr:`~django.db.models."
"Field.primary_key` by default) of an existing instance."
msgstr ""
"Атрибут ``REQUIRED_FIELDS`` теперь поддеоживает внешние ключи.В связи с этим "
"возникает проблема. При выполнении команды из:djadmin:`createsuperuser` из "
"командной строки вы неможете передатьобъект связанного объекта, по этому вы "
"можете просто указать простоID записи в БД (:attr:`~django.db.models."
"ForeignKey.to_field` указываетна ID по умолчанию)."

# 89c8b06e27974c5eb46a86cde8661c98
#: ../../topics/auth/customizing.txt:573
msgid ""
"A boolean attribute that indicates whether the user is considered \"active"
"\".  This attribute is provided as an attribute on ``AbstractBaseUser`` "
"defaulting to ``True``. How you choose to implement it will depend on the "
"details of your chosen auth backends. See the documentation of the :attr:"
"`is_active attribute on the built-in user model <django.contrib.auth.models."
"User.is_active>` for details."
msgstr ""
"Логические атрибут указывающий является ли пользователь \"активным\".По "
"умолчанию класс ``AbstractBaseUser`` устанавливает его в ``True``.  Выможете "
"изменить это в вашем бекэнде аутентификации. Для подробностейсмотри "
"документ :attr:`атрибут is_active во встроеное модели ``User``<django."
"contrib.auth.models.User.is_active>`"

# e98f6146206c4e358f8360cf978d3fe8
#: ../../topics/auth/customizing.txt:582
msgid ""
"A longer formal identifier for the user. A common interpretation would be "
"the full name of the user, but it can be any string that identifies the user."
msgstr ""
"\"Длинная\" форма формально идентификатора пользователя. В общем "
"случаедолжна возвращать полное имя пользователя, но может так жевозвращать "
"любую строку однозначно идентифицирующая пользователя."

# 7ea944340e414547adb58536aaa890fb
#: ../../topics/auth/customizing.txt:588
msgid ""
"A short, informal identifier for the user. A common interpretation would be "
"the first name of the user, but it can be any string that identifies the "
"user in an informal way. It may also return the same value as :meth:`django."
"contrib.auth.models.User.get_full_name()`."
msgstr ""
"\"Короткая\" форма, не формальная, идентификации пользователя. В общемслучае "
"должна возращать имя пользователя. Но так же может возвращатьлюбую строку "
"однозначно идентифицирующую пользователя. Может возвращатьтакое же значение "
"что и :meth:`django.contrib.auth.models.User.get_full_name()`."

#: ../../topics/auth/customizing.txt:593
msgid "Importing ``AbstractBaseUser``"
msgstr ""

#: ../../topics/auth/customizing.txt:597
msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` are importable from ``django."
"contrib.auth.base_user`` so that they can be imported without including "
"``django.contrib.auth`` in :setting:`INSTALLED_APPS` (this raised a "
"deprecation warning in older versions and is no longer supported in Django "
"1.9)."
msgstr ""

# cd022a86211546c2927f81c447e72198
#: ../../topics/auth/customizing.txt:603
#, fuzzy
msgid ""
"The following attributes and methods are available on any subclass of :class:"
"`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr ""
"Следующие методы доступны из любого класса наследующего:class:`~django."
"contrib.auth.models.AbstractBaseUser`:"

# 9f31b17dfce44100bba07471966f941b
#: ../../topics/auth/customizing.txt:610
msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr "Возвращает значение из поля указанного в качестве ``USERNAME_FIELD``."

#: ../../topics/auth/customizing.txt:616
msgid ""
"Normalizes the username by calling :meth:`normalize_username`. If you "
"override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr ""

#: ../../topics/auth/customizing.txt:624
msgid ""
"Applies NFKC Unicode normalization to usernames so that visually identical "
"characters with different Unicode code points are considered identical."
msgstr ""

#: ../../topics/auth/customizing.txt:630
msgid ""
"Read-only attribute which is always ``True`` (as opposed to ``AnonymousUser."
"is_authenticated`` which is always ``False``). This is a way to tell if the "
"user has been authenticated. This does not imply any permissions and doesn't "
"check if the user is active or has a valid session. Even though normally you "
"will check this attribute on ``request.user`` to find out whether it has "
"been populated by the :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` (representing the currently logged-in user), you "
"should know this attribute is ``True`` for any :class:`~models.User` "
"instance."
msgstr ""

#: ../../topics/auth/customizing.txt:642 ../../topics/auth/customizing.txt:654
msgid ""
"In older versions, this was a method. Backwards-compatibility support for "
"using it as a method will be removed in Django 2.0."
msgstr ""

# 707ca33fcf83468a87cdd66794ec1404
#: ../../topics/auth/customizing.txt:647
#, fuzzy
msgid ""
"Read-only attribute which is always ``False``. This is a way of "
"differentiating :class:`~models.User` and :class:`~models.AnonymousUser` "
"objects. Generally, you should prefer using :attr:`~models.User."
"is_authenticated` to this attribute."
msgstr ""
"Всегда возвращает ``False``. Это способ дифференцировать от объектов:class:"
"`~django.contrib.auth.models.AnonymousUser`. Обычно "
"предпочтительнееиспользовать :meth:`~django.contrib.auth.models."
"AbstractBaseUser.is_authenticated()` метод."

# dd445814ddd346378a548adcfcdcb96a
#: ../../topics/auth/customizing.txt:659
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models."
"AbstractBaseUser` object."
msgstr ""
"Меняет пароль пользователя на переданный в параметре педварительнохэшировав "
"его. Объект :class:`~django.contrib.auth.models.AbstractBaseUser` не "
"сохраняется."

# 9fdfe846f54d4fcbb6422a6763c7578d
#: ../../topics/auth/customizing.txt:663
msgid ""
"When the raw_password is ``None``, the password will be set to an unusable "
"password, as if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` were used."
msgstr ""
"Если используется метод:meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` и ``raw_password`` равен ``None`` пользователь "
"будетпомечен как не использующий пароль."

# f6a25c9b78cf4db88a150df4da042b32
#: ../../topics/auth/customizing.txt:670
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""
"Возвращает ``True`` если пароль указан верно (вычисляет хэш исравнивает его "
"с хэшем хранимым в базе данных)."

# be6465ec0b374a3fbe4fd9f6d599b89d
#: ../../topics/auth/customizing.txt:676
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models."
"AbstractBaseUser.check_password()` for this user will never return ``True``. "
"Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` "
"object."
msgstr ""
"Помечает пользователя как не использующего пароля. Но это не тожесамое что "
"указывать пустую строку в качестве пароля. Если уставнолено тометод :meth:"
"`~django.contrib.auth.models.AbstractBaseUser.check_password()`никогда не "
"вернет ``True``. Объект :class:`~django.contrib.auth.models."
"AbstractBaseUser`не сохраняется."

# bd690ab3f8ec4ceeba86225e382ad20c
#: ../../topics/auth/customizing.txt:682
msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""
"Вам может это понадобиться если вы используете внешний источникданных для "
"аутентифифкации, например, директорю LDAP."

# 796785bbe49f456ca1d0ffb31d1f40f7
#: ../../topics/auth/customizing.txt:687
msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` has been called for this user."
msgstr ""
"Вернет ``False`` если для пользователя бул вызван метод:meth:`~django."
"contrib.auth.models.AbstractBaseUser.set_unusable_password()`."

# 0ad167949f0646b4be22f0be2c0fbdf6
#: ../../topics/auth/customizing.txt:693
msgid ""
"Returns an HMAC of the password field. Used for :ref:`session-invalidation-"
"on-password-change`."
msgstr ""
"Вернет HMAC (хэш) пароля. Используется для :ref:`переопределения сессиипосле "
"смены пароля <session-invalidation-on-password-change>`."

# 60e492c932e643c78ec795bbdd160054
#: ../../topics/auth/customizing.txt:696
msgid ""
"You should also define a custom manager for your ``User`` model. If your "
"``User`` model defines ``username``, ``email``, ``is_staff``, ``is_active``, "
"``is_superuser``, ``last_login``, and ``date_joined`` fields the same as "
"Django's default ``User``, you can just install Django's :class:`~django."
"contrib.auth.models.UserManager`; however, if your ``User`` model defines "
"different fields, you will need to define a custom manager that extends :"
"class:`~django.contrib.auth.models.BaseUserManager` providing two additional "
"methods:"
msgstr ""
"Вам так же необходимо определить собственный менеджер пользователейвашей "
"модели ``User``. Если ваше модель ``User`` определяет поля ``username``,"
"``email``, ``is_staff``, ``is_active``, ``is_superuser``, ``last_login`` и "
"``date_joined`` так жеи в стандартной модели ``User`` вы можете использовать "
"стандартный :class:`~django.contrib.auth.models.UserManager` Django. Однако, "
"если вы определили другиеполя в вашей модели вам необходим ваш собственный "
"менеджер пользователйкоторый будет унаследован от :class:`~django.contrib."
"auth.models.BaseUserManager`и определять два обязательных метода:"

# 6b112742fdb7412fb4240505fcf8c98d
#: ../../topics/auth/customizing.txt:709
msgid ""
"The prototype of ``create_user()`` should accept the username field, plus "
"all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_user`` should be defined as::"
msgstr ""
"Метод ``create_user()`` должен принимать вкачестве параметровимя "
"пользователя плюс другие обязательные поля. Например,если ваша модель "
"пользователей использует ``email`` в качествелогина с обязательным указанием "
"даты рождения то ваш метод``create_user`` должен быть определен как:"

# 56fa50d7fcb74245a524d32336c6c03a
#: ../../topics/auth/customizing.txt:720
msgid ""
"The prototype of ``create_superuser()`` should accept the username field, "
"plus all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_superuser`` should be defined as::"
msgstr ""
"Метод ``create_superuser()`` должен принимать вкачестве параметровимя "
"пользователя плюс другие обязательные поля. Например,если ваша модель "
"пользователей использует ``email`` в качествелогина с обязательным указанием "
"даты рождения то ваш метод``create_superuser()`` должен быть определен как:"

# 7a90ab1049e24007b6a5430a6d6739e0
#: ../../topics/auth/customizing.txt:729
msgid ""
"Unlike ``create_user()``, ``create_superuser()`` *must* require the caller "
"to provide a password."
msgstr ""
"В отличие от ``create_user()``,  ``create_superuser()`` должен "
"обязатльнотребовать пароль."

# 408d28a741634411a1ceb60fd9b43845
#: ../../topics/auth/customizing.txt:732
msgid ""
":class:`~django.contrib.auth.models.BaseUserManager` provides the following "
"utility methods:"
msgstr ""
":class:`~django.contrib.auth.models.BaseUserManager` предоставляет следующие "
"методы:"

# 9ddb89ee8587417b912948701868a93f
#: ../../topics/auth/customizing.txt:739
#, fuzzy
msgid ""
"Normalizes email addresses by lowercasing the domain portion of the email "
"address."
msgstr ""
"Это ``classmethod`` который используется для нормализации электронногоадреса "
"путем преобразования доменного имени в нижний регистр."

# 5ff291a1de9e44af82126869677a612e
#: ../../topics/auth/customizing.txt:744
msgid ""
"Retrieves a user instance using the contents of the field nominated by "
"``USERNAME_FIELD``."
msgstr ""
"Получает экземпляр пользователя, использую содержимое поля,указаного в "
"``USERNAME_FIELD``."

# 5cf3c7191d774f11b0153a9fef5991e9
#: ../../topics/auth/customizing.txt:749
msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. Note that the default value of ``allowed_chars`` doesn't contain "
"letters that can cause user confusion, including:"
msgstr ""
"Возвращает случайно сгенерированый пароль указанной длины и наборасимволов. "
"Обратите внимание, что стандартная строка ``allowed_chars``не содержит "
"символов которые могут ввести пользователя в заблуждение,включая:"

# 3731bb5a184945bf9289e55c01fa376e
#: ../../topics/auth/customizing.txt:753
msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr ""
"``i``, ``l``, ``I``, и ``1`` (строчная буква i, строчная буква L,прописная "
"буква i и цифра один)"

# ac08d505c146401faf94c9c183fd0287
#: ../../topics/auth/customizing.txt:755
msgid ""
"``o``, ``O``, and ``0`` (lowercase letter o, uppercase letter o, and zero)"
msgstr "``o``, ``O``, и ``0`` (строчная бука о, прописаня буква о и ноль)"

# d0cc327fed794dd0a6a390da253fde7b
#: ../../topics/auth/customizing.txt:759
#, fuzzy
msgid "Extending Django's default ``User``"
msgstr "Расширяем встроенную модель User"

# 63626680094846cdaf79034b8d341061
#: ../../topics/auth/customizing.txt:761
msgid ""
"If you're entirely happy with Django's :class:`~django.contrib.auth.models."
"User` model and you just want to add some additional profile information, "
"you could simply subclass ``django.contrib.auth.models.AbstractUser`` and "
"add your custom profile fields, although we'd recommend a separate model as "
"described in the \"Model design considerations\" note of :ref:`specifying-"
"custom-user-model`. ``AbstractUser`` provides the full implementation of the "
"default :class:`~django.contrib.auth.models.User` as an :ref:`abstract model "
"<abstract-base-classes>`."
msgstr ""
"Если вас польностью удовлетворяет встроенная модель :class:`~django.contrib."
"auth.models.User` и нужно только добавить хранение дополнительнойифнормации "
"о пользователе, вы можете просто расширить модель``django.contrib.auth."
"models.AbstractUser`` и добавить дополнительные поля,хотя мы рекомендуем "
"создать отдельную модель в соотвествии с заметкой\"Разработка "
"пользовательской модели\". ``AbstractUser`` полностью реализуетстандартную "
"модель :class:`~django.contrib.auth.models.User`."

# 757515f54ea1438cb54dd39ba31948c5
#: ../../topics/auth/customizing.txt:773
msgid "Custom users and the built-in auth forms"
msgstr "Встроенные формы авторизации"

# c41928d682af4ab6a3db65002b84b3a3
#: ../../topics/auth/customizing.txt:775
#, fuzzy
msgid ""
"Django's built-in :ref:`forms <built-in-auth-forms>` and :ref:`views <built-"
"in-auth-views>` make certain assumptions about the user model that they are "
"working with."
msgstr ""
"Встроенные в Django :ref:`формы <built-in-auth-forms>` и:ref:`представления "
"<built-in-auth-views>` делают определенные предположенияо модели ``User`` с "
"которой они работают."

# cd022a86211546c2927f81c447e72198
#: ../../topics/auth/customizing.txt:779
#, fuzzy
msgid ""
"The following forms are compatible with any subclass of :class:`~django."
"contrib.auth.models.AbstractBaseUser`:"
msgstr ""
"Следующие методы доступны из любого класса наследующего:class:`~django."
"contrib.auth.models.AbstractBaseUser`:"

#: ../../topics/auth/customizing.txt:782
msgid ""
":class:`~django.contrib.auth.forms.AuthenticationForm`: Uses the username "
"field specified by :attr:`~models.CustomUser.USERNAME_FIELD`."
msgstr ""

# 548825e5354c45c9a590c1bfd947b600
#: ../../topics/auth/customizing.txt:784
msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ":class:`~django.contrib.auth.forms.SetPasswordForm`"

# af86245c1215499bb0aa69bc04a63a5e
#: ../../topics/auth/customizing.txt:785
msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.PasswordChangeForm`"

# c6405c8424404a44a2e37c0862d25d2c
#: ../../topics/auth/customizing.txt:786
msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"

#: ../../topics/auth/customizing.txt:788
msgid ""
"The following forms make assumptions about the user model and can be used as-"
"is if those assumptions are met:"
msgstr ""

#: ../../topics/auth/customizing.txt:791
#, fuzzy
msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm`: Assumes that the user "
"model has a field named ``email`` that can be used to identify the user and "
"a boolean field named ``is_active`` to prevent password resets for inactive "
"users."
msgstr ""
"Предполагается что модель пользователя имеет поле с именем ``email``,которое "
"может быть использовано для идентификации пользователяи поле ``is_active`` "
"хранящее булево значение для предотвращения сбросапароля для неактивных "
"пользователей."

# 88d432581ca04609966ceeb666b32441
# 35dc6886a26b4badb9eba33e4dc7f59b
#: ../../topics/auth/customizing.txt:796
#, fuzzy
msgid ""
"Finally, the following forms are tied to :class:`~django.contrib.auth.models."
"User` and need to be rewritten or extended to work with a custom user model:"
msgstr ""
"Зависит от :class:`~django.contrib.auth.models.User` модели. Долженбыть "
"переписан для любой новой пользовательской модели."

# 103f1905f71744f29f7345e2fd240188
#: ../../topics/auth/customizing.txt:800
msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ":class:`~django.contrib.auth.forms.UserCreationForm`"

# 833c2b1ec40b47a3b97c64425dd2d42b
#: ../../topics/auth/customizing.txt:801
msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.UserChangeForm`"

#: ../../topics/auth/customizing.txt:803
msgid ""
"If your custom user model is a simple subclass of ``AbstractUser``, then you "
"can extend these forms in this manner::"
msgstr ""

# 6a219b59f463415aa5709386d82009c0
#: ../../topics/auth/customizing.txt:816
msgid "Custom users and :mod:`django.contrib.admin`"
msgstr "Пользовательская модель и :mod:`django.contrib.admin`"

# 7749b18a757a4e5faeae1f61337f7706
#: ../../topics/auth/customizing.txt:818
msgid ""
"If you want your custom User model to also work with Admin, your User model "
"must define some additional attributes and methods. These methods allow the "
"admin to control access of the User to admin content:"
msgstr ""
"Если вы хотите что бы ваша пользовательская модель так же работала "
"садминистративным интерфейсом она должна определять некторыеобязательные "
"атрибуты и методы. Эти методы позволяют админ модулюконтролировать доступ "
"пользователй к админской части приложения:"

# c3fdd99220ad4f2ebed867f916bef1dc
#: ../../topics/auth/customizing.txt:826
msgid ""
"Returns ``True`` if the user is allowed to have access to the admin site."
msgstr "Возвращает ``True`` если пользователю разрешен доступ к админ сайту."

# e75428947c9f4eb7858ad9b7372e900f
#: ../../topics/auth/customizing.txt:830
msgid "Returns ``True`` if the user account is currently active."
msgstr "Возвращает ``True`` если пользователь активен."

# 3c8cb81e149447a1a8c85c488db77e2d
#: ../../topics/auth/customizing.txt:834
msgid ""
"Returns ``True`` if the user has the named permission. If ``obj`` is "
"provided, the permission needs to be checked against a specific object "
"instance."
msgstr ""
"Возвращает ``True`` если пользователь имеет указанное разрашение.Если "
"``obj`` поддерживается, разрешение должно быть проверено в "
"отношениконктретного экземпляра объекта."

# fb63950e7c274194aef7b0b41cc5fbdf
#: ../../topics/auth/customizing.txt:840
msgid ""
"Returns ``True`` if the user has permission to access models in the given "
"app."
msgstr ""
"Возвращает ``True`` если пользователь имеет доступ к модели указанного "
"приложения."

# 39641d068824477c955a59766fae7d48
#: ../../topics/auth/customizing.txt:843
msgid ""
"You will also need to register your custom User model with the admin. If "
"your custom User model extends ``django.contrib.auth.models.AbstractUser``, "
"you can use Django's existing ``django.contrib.auth.admin.UserAdmin`` class. "
"However, if your User model extends :class:`~django.contrib.auth.models."
"AbstractBaseUser`, you'll need to define a custom ``ModelAdmin`` class. It "
"may be possible to subclass the default ``django.contrib.auth.admin."
"UserAdmin``; however, you'll need to override any of the definitions that "
"refer to fields on ``django.contrib.auth.models.AbstractUser`` that aren't "
"on your custom User class."
msgstr ""
"Вам так же надо зарегстрировать вашу пользовательскую модель дляадмин "
"модуля. Если ваша модель наследует ``django.contrib.auth.models."
"AbstractUser``модель вы можете использовать ``django.contrib.auth.admin."
"UserAdmin`` класс Django.Однако, если вы наследуеете :class:`~django.contrib."
"auth.models.AbstractBaseUser` классвам необходимо определить "
"пользовательский класс ``ModelAdmin``.  Для этого выможете наследовать "
"стандартный класс ``django.contrib.auth.admin.UserAdmin`` ипереопределить "
"все ссылки на поля в ``django.contrib.auth.models.AbstractUser`` "
"всоответсвии со структурой вашей модели."

# 380333cb6d5546ffbf5af3acf33a8dd0
#: ../../topics/auth/customizing.txt:855
msgid "Custom users and permissions"
msgstr "Пользовательские права доступа"

# 7f14c8514f5243d0a6597d7275f55aea
#: ../../topics/auth/customizing.txt:857
msgid ""
"To make it easy to include Django's permission framework into your own User "
"class, Django provides :class:`~django.contrib.auth.models."
"PermissionsMixin`. This is an abstract model you can include in the class "
"hierarchy for your User model, giving you all the methods and database "
"fields necessary to support Django's permission model."
msgstr ""
"Что бы упростить подключения системы прав доступа фреймворка в "
"вашпользовательский класс Django имеет класс :class:`~django.contrib.auth."
"models.PermissionsMixin`. Это абстрактная модель которую вы можете включить "
"в иерархиюклассов вашей пользовательской модели, предоставляющий вам доступ "
"ко всемметодам и полям базы данных необходиых для работы модуля прав доступа."

# c145e8df4a804d43ab6553e0bd875b0a
#: ../../topics/auth/customizing.txt:863
msgid ""
":class:`~django.contrib.auth.models.PermissionsMixin` provides the following "
"methods and attributes:"
msgstr ""
":class:`~django.contrib.auth.models.PermissionsMixin`  предоставляют "
"следуюющиеметоды и атрибуты:"

# 378dc57e66ec48f19ded31f54975ec90
#: ../../topics/auth/customizing.txt:870
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""
"Булев тип. Указывает что пользователь имеет все права без их "
"явногоназначения."

# 7a11ff8ca06f48938dadba472a7f5bed
#: ../../topics/auth/customizing.txt:875
msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr "Возвращает набор прав доступа групп в которых состоит пользователь."

# f00a4e69fefa44a58f42fa1ed91fcd8d
#: ../../topics/auth/customizing.txt:878
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""
"Если передается ``obj`` возвращает групповые права доступа толькодля "
"указанного объекта."

# ef838cf5459643728e57f0f1c8ec6c4b
#: ../../topics/auth/customizing.txt:883
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr "Возвращает набор как групповых так и индивидуальных прав доступа."

# 8068857ffaa843718c4ee863663caf81
#: ../../topics/auth/customizing.txt:886
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""
"Если передается ``obj`` возвращает персональные права доступа толькодля "
"указанного объекта."

# 8162b07c6fc5475e916cd9f6a5b88c10
#: ../../topics/auth/customizing.txt:891
msgid ""
"Returns ``True`` if the user has the specified permission, where ``perm`` is "
"in the format ``\"<app label>.<permission codename>\"`` (see :ref:"
"`permissions <topic-authorization>`). If the user is inactive, this method "
"will always return ``False``."
msgstr ""
"Возвращает ``True`` если пользователь имеет указанные права доступа.``perm`` "
"указываются в формате ``\"<app label>.<permission codename>\"`` "
"(дляподробностей смотри документ -- :ref:`права доступа <topic-"
"authorization>`).Если пользователь не активен будет всегда возвращать "
"``False``."

# 06c823c09d514abebf5dcd82cd4e8b66
#: ../../topics/auth/customizing.txt:896
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""
"Если передан ``obj``, этот метод проверит права доступа толькодля указанного "
"объекта."

# 284d1d5141c144858676db417b75d91a
#: ../../topics/auth/customizing.txt:901
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``."
msgstr ""
"Возвращает ``True`` если пользователь имеет все перечисленные пара "
"доступапереданные в формате ``\"<app label>.<permission codename>\"``. Если "
"пользователь не активен метод вернет ``False``."

# 7148e7e6f0354829aa8078ffea398a76
#: ../../topics/auth/customizing.txt:906
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""
"Если передан ``obj``, этот метод проверит права доступа толькодля указанного "
"объекта."

# 7b275d4d9dee4f61b629ea93fc8546a2
#: ../../topics/auth/customizing.txt:911
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""
"Вернет ``True`` если пользователь имеет какие либо права доступа "
"дляуказанного пакета (приложения Django). Вернет ``False`` еслипользователь "
"не активен."

#: ../../topics/auth/customizing.txt:915
msgid "``PermissionsMixin`` and ``ModelBackend``"
msgstr ""

# 3e7b6f224737443287a254d7f55379e4
#: ../../topics/auth/customizing.txt:917
#, fuzzy
msgid ""
"If you don't include the :class:`~django.contrib.auth.models."
"PermissionsMixin`, you must ensure you don't invoke the permissions methods "
"on ``ModelBackend``. ``ModelBackend`` assumes that certain fields are "
"available on your user model. If your ``User`` model doesn't provide  those "
"fields, you will receive database errors when you check permissions."
msgstr ""
"Если вы не включаете класс :class:`~django.contrib.auth.models."
"PermissionsMixin` вы должны убедиться, что не ссылаетесь на методыпроверки "
"прав доступа определенные в ``ModelBackend``. ``ModelBackend``предполагает "
"что определнные поля доступны в вашей модели пользователя.И если ваша модель "
"пользователей не имеет этих полей вы будете получатьошибки базы данных когда "
"попытаетесь проверить права доступа."

# 3832bfa0c9ff4fc992b2693fb925e691
#: ../../topics/auth/customizing.txt:925
#, fuzzy
msgid "Custom users and proxy models"
msgstr "Пользовательская модель ``User`` и Proxy модели"

# c5cbe64a379a46f4b19508c9ade5f540
#: ../../topics/auth/customizing.txt:927
msgid ""
"One limitation of custom User models is that installing a custom User model "
"will break any proxy model extending :class:`~django.contrib.auth.models."
"User`. Proxy models must be based on a concrete base class; by defining a "
"custom User model, you remove the ability of Django to reliably identify the "
"base class."
msgstr ""
"Одним из ограничений пользовательской модели :class:`~django.contrib.auth."
"models.User` является то, что она сломает любые Proxy модели "
"расширяющиеестандартную модель. Proxy модели должны основываться на "
"конкретомбазовом классе. Определяя пользовательскую модель ``User`` вы "
"лишаеетеDjango возможности конкрентно определить базовый класс."

# 0813f779256d4cfd80934a69de9b77f4
#: ../../topics/auth/customizing.txt:932
msgid ""
"If your project uses proxy models, you must either modify the proxy to "
"extend the User model that is currently in use in your project, or merge "
"your proxy's behavior into your User subclass."
msgstr ""
"Если в своем проекте вы используете Proxy модели вы должны "
"либомодифицировать ее что бы она расширяла модель ``User``, "
"котораяиспользуется в ваше проекте, либо определить функции выполняемыеProxy "
"моделями непосредственно вашей пользовательской модели."

# 9501300e6b5f4c02a0ec091bce5a3a61
#: ../../topics/auth/customizing.txt:937
msgid "A full example"
msgstr "Полный пример"

# 9809cb52cfef41fca1d0f6d39aa216cd
#: ../../topics/auth/customizing.txt:939
msgid ""
"Here is an example of an admin-compliant custom user app. This user model "
"uses an email address as the username, and has a required date of birth; it "
"provides no permission checking, beyond a simple ``admin`` flag on the user "
"account. This model would be compatible with all the built-in auth forms and "
"views, except for the User creation forms. This example illustrates how most "
"of the components work together, but is not intended to be copied directly "
"into projects for production use."
msgstr ""
"Здесь вы можете посмотреть пример админ-совместимого приложенияуправления "
"пользователями. Пользовательская модельиспользует, в качествеимени "
"пользователя, поле ``admin`` и обязательное поле даты рождения. Такжеона не "
"предоставлет никаких пользовательских прав, за исключением простого "
"флага``admin``. Эта модель будет совместима со всеми встроенными формами и "
"представлениями,за исключением формы создания пользователя. Этот пример "
"показывает, как можноиспользовать много компонентов вместе не копируя их "
"исходный код в ваше приложение."

# ce445ce2bbd0488a9b96396155807855
#: ../../topics/auth/customizing.txt:947
msgid ""
"This code would all live in a ``models.py`` file for a custom authentication "
"app::"
msgstr ""
"Этот код будет полностью находится в файле ``models.py`` вашегоприлодения "
"аутентификации::"

# b0845fadf5fe4846b695275672fe2287
#: ../../topics/auth/customizing.txt:1031
msgid ""
"Then, to register this custom User model with Django's admin, the following "
"code would be required in the app's ``admin.py`` file::"
msgstr ""
"Затем, что бы зарегистрировать вашу пользовательскую модель для панели "
"администратора Django, нужно добавить следующий в файл``admin.py`` вашего "
"приложения::"

# bc7f337c88634ec8ba7e25c8fb3e48c4
#: ../../topics/auth/customizing.txt:1121
msgid ""
"Finally, specify the custom model as the default user model for your project "
"using the :setting:`AUTH_USER_MODEL` setting in your ``settings.py``::"
msgstr ""
"И, на конец, указать вашу пользотельскую модель в качестве моделипо "
"умолчанию в файле ``settings.py`` (:setting:`AUTH_USER_MODEL`)::"

# baf6645cbc0e4ad5a48e7382f87a34da
#~ msgid ""
#~ "An inactive user is a one that is authenticated but has its attribute "
#~ "``is_active`` set to ``False``. However this does not mean they are not "
#~ "authorized to do anything. For example they are allowed to activate their "
#~ "account."
#~ msgstr ""
#~ "Неактивным пользователем называют аутентифицированного пользователя, у "
#~ "которого атрибут ``is_active`` установлен в ``False``. Тем не менее, это "
#~ "не означает, что им запрещено выполнять какие-либо действия. Например, "
#~ "они могут активировать свой аккаунт."

# 9fdebefc3eb842c4b5e32efe4ea72a85
#~ msgid "Your model must have an integer primary key."
#~ msgstr "Ваше модель должна иметь числовой первичный ключ."

# 9616f410cb424ba9b5845b5beb4e193a
#~ msgid ""
#~ "Always returns ``True``. This is a way to tell if the user has been "
#~ "authenticated. This does not imply any permissions, and doesn't check if "
#~ "the user is active - it only indicates that the user has provided a valid "
#~ "username and password."
#~ msgstr ""
#~ "Всегда возвращает ``True``. Это способ определить был ли "
#~ "пользовательидентифицирован. Метод не подразумевает проверку прав "
#~ "доступаили статус активности пользователя. Он только указывает что "
#~ "пользовательввел правильные имя пользователя и пароль."

# f827696ea1a341d6a4ee2f59bd1447b0
#~ msgid ""
#~ "If your user model doesn't follow the same assumptions, it may be "
#~ "necessary to define a replacement form, and pass that form in as part of "
#~ "the configuration of the auth views."
#~ msgstr ""
#~ "Если ваше пользовательская модель не следует тем же прдположениям,вам,"
#~ "возможно, придется определить новую форму и передать ее в видечасти "
#~ "конфигурации представления авторизации."

# d9edd7a5ac154a3ab6c40aa5a5a7a726
#~ msgid ":class:`~django.contrib.auth.forms.AuthenticationForm`"
#~ msgstr ":class:`~django.contrib.auth.forms.AuthenticationForm`"

# 4631bdc4e57e4ec5acb6392d0bee0f29
#~ msgid ""
#~ "Works with any subclass of :class:`~django.contrib.auth.models."
#~ "AbstractBaseUser`, and will adapt to use the field defined in "
#~ "``USERNAME_FIELD``."
#~ msgstr ""
#~ "Работает с любым классом унаследованным от :class:`~django.contrib.auth."
#~ "models.AbstractBaseUser` и должна быть адоптирована для использования "
#~ "поля определенного в ``USERNAME_FIELD``."

# 110741093cd7475fbb7235cc53d9a13a
#~ msgid ":class:`~django.contrib.auth.forms.PasswordResetForm`"
#~ msgstr ":class:`~django.contrib.auth.forms.PasswordResetForm`"

# 3eaab38c13df46e9a15e2816d1926e02
# 11e2349b004c42eb8c125991e3721df2
# 0854b13b0fbd41dfaf88ca178abe38e7
#~ msgid ""
#~ "Works with any subclass of :class:`~django.contrib.auth.models."
#~ "AbstractBaseUser`"
#~ msgstr ""
#~ "Работает с любым классом унаследованным от :class:`~django.contrib.auth."
#~ "models.AbstractBaseUser`"

# aca86586415e451e80a2590f23380145
#~ msgid "ModelBackend"
#~ msgstr "ModelBackend"

# b86cde4d432e4c32aeecb531696831de
#~ msgid "Custom users and signals"
#~ msgstr "Пользовательская модель ``User`` и сигналы"

# 31e973d7e66c4962b201c19d1f5c8f99
#~ msgid ""
#~ "Another limitation of custom User models is that you can't use :func:"
#~ "`django.contrib.auth.get_user_model()` as the sender or target of a "
#~ "signal handler. Instead, you must register the handler with the resulting "
#~ "User model. See :doc:`/topics/signals` for more information on "
#~ "registering and sending signals."
#~ msgstr ""
#~ "Другое ограничение пользовательской модели ``User`` является то, чтовы не "
#~ "можете использовать метод :func:`django.contrib.auth.get_user_model()`в "
#~ "качестве отправителя или приемника обработчика сигналов. Вместо этоговы "
#~ "должны регистрировать обработчик в вашей модели ``User``. Смотри:doc:`/"
#~ "topics/signals` для подробной информации."

# de0a3d172dda41d28c34e949b8b20cbd
#~ msgid "Custom users and testing/fixtures"
#~ msgstr "Пользовательская модель ``User`` и тестирование."

# 4868b3f0f37c4b13a62efe6697c16146
#~ msgid ""
#~ "If you are writing an application that interacts with the User model, you "
#~ "must take some precautions to ensure that your test suite will run "
#~ "regardless of the User model that is being used by a project. Any test "
#~ "that instantiates an instance of User will fail if the User model has "
#~ "been swapped out. This includes any attempt to create an instance of User "
#~ "with a fixture."
#~ msgstr ""
#~ "Если вы пишите приложение, которое взаимодествуеют с "
#~ "пользовательскоймоделью, вы должны принять некоторые меры "
#~ "предосторожности, чтобыубедиться, что ваш набор тестов работать "
#~ "независимо от использующейсяв вашем проекте модели пользователей. А также "
#~ "если вы создаете экземпляркласса ``User`` используя файлы предварительной "
#~ "настройки."

# 607bdff86afa49c3910b89bafe4f1af3
#~ msgid ""
#~ "To ensure that your test suite will pass in any project configuration, "
#~ "``django.contrib.auth.tests.utils`` defines a ``@skipIfCustomUser`` "
#~ "decorator. This decorator will cause a test case to be skipped if any "
#~ "User model other than the default Django user is in use. This decorator "
#~ "can be applied to a single test, or to an entire test class."
#~ msgstr ""
#~ "Что бы убедиться что ваш набор тестов будет успешно выполнятьсяв любой "
#~ "конфигурации ``django.contrib.auth.tests.utils`` определяетдекоратор "
#~ "``@skipIfCustomUser``.  Этот декоратор позволяет пропуститьтест если "
#~ "используется модель позователей отличная от стандартной модели.Может "
#~ "применяться как для одного теста так и для всего тестового класса."

# 7acc4cc313884719afe3b83ddf214637
#~ msgid ""
#~ "Depending on your application, tests may also be needed to be added to "
#~ "ensure that the application works with *any* user model, not just the "
#~ "default User model. To assist with this, Django provides two substitute "
#~ "user models that can be used in test suites:"
#~ msgstr ""
#~ "В зависимости отвашего приложения, вам также может понадобитьсядобавить "
#~ "тесты для проверки того, что ваше приложение работает с любоймоделью "
#~ "пользователей, а не только со стандартной моделью. Что быпомочь с этим "
#~ "Django предоставляет два заменителя пользовательскоймодели которые могут "
#~ "быть использованы в вашем наборе тестов:"

# 26b556c6a5814a98b3c59c93687fb0d5
#~ msgid ""
#~ "A custom user model that uses an ``email`` field as the username, and has "
#~ "a basic admin-compliant permissions setup"
#~ msgstr ""
#~ "Модель использующая поле ``email`` в качестве имени пользователя иимеющее "
#~ "базовые настройки доступа к административной части."

# 79f493573cab458c91adf8afcc471c04
#~ msgid ""
#~ "A custom user model that extends ``django.contrib.auth.models."
#~ "AbstractUser``, adding a ``date_of_birth`` field."
#~ msgstr ""
#~ "Модель расширяющая ``django.contrib.auth.models.AbstractUser`` добавляя "
#~ "поле ``date_of_birth``."

# 46bc383a053d4a708534981f7e527794
#~ msgid ""
#~ "You can then use the ``@override_settings`` decorator to make that test "
#~ "run with the custom User model. For example, here is a skeleton for a "
#~ "test that would test three possible User models -- the default, plus the "
#~ "two User models provided by ``auth`` app::"
#~ msgstr ""
#~ "Вы можете использовать декоратор ``@override_settings`` что бызапсутить "
#~ "ваши тесты с новой пользовательской моделью. Вот каркас для теста, "
#~ "который будет тестировать три возможныемодели пользователей -- "
#~ "стандартную, плюс две модели представленныев приложении ``auth``::"
