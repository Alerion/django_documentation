# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2013, 2014, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2015-06-02 23:36+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# e853a21af0c04ddcb9e547296f21fa74
#: ../../topics/auth/passwords.txt:3
msgid "Password management in Django"
msgstr "Управление паролями в Django"

# a72b7d9b4ce84c3abfb40272fa959e32
#: ../../topics/auth/passwords.txt:5
msgid ""
"Password management is something that should generally not be reinvented "
"unnecessarily, and Django endeavors to provide a secure and flexible set of "
"tools for managing user passwords. This document describes how Django stores "
"passwords, how the storage hashing can be configured, and some utilities to "
"work with hashed passwords."
msgstr ""
"Управление паролями является такой сущностью, которую не следует "
"переизобретать без особой необходимости и Django старается предоставить "
"безопасный и гибкий набор инструментов для управления пользовательскими "
"паролями. Этот документ описывает как Django хранит пароли, как может быть "
"настроено их хэширование, а также некоторые утилиты для работы с "
"хэшированными паролями."

#: ../../topics/auth/passwords.txt:13
msgid ""
"Even though users may use strong passwords, attackers might be able to "
"eavesdrop on their connections. Use :ref:`HTTPS <security-recommendation-"
"ssl>` to avoid sending passwords (or any other sensitive data) over plain "
"HTTP connections because they will be vulnerable to password sniffing."
msgstr ""

# 02179afa44b84ccaa4019fdd89407cf9
#: ../../topics/auth/passwords.txt:22
msgid "How Django stores passwords"
msgstr "Как Django хранит пароли"

# 80638dd57b0d42b0b3aede59fa71d9ad
#: ../../topics/auth/passwords.txt:24
msgid ""
"Django provides a flexible password storage system and uses PBKDF2 by "
"default."
msgstr ""
"Django предоставляет гибкую систему хранения паролей и по умолчанию "
"использует PBKDF2."

# 7296526ed8374801b9526ecb544e18e8
#: ../../topics/auth/passwords.txt:26
msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""
"Атрибут :attr:`~django.contrib.auth.models.User.password` объекта :class:"
"`~django.contrib.auth.models.User` является строкой следующего формата::"

# ca2d1d2d757045dfada761b46aec40f7
#: ../../topics/auth/passwords.txt:31
msgid ""
"Those are the components used for storing a User's password, separated by "
"the dollar-sign character and consist of: the hashing algorithm, the number "
"of algorithm iterations (work factor), the random salt, and the resulting "
"password hash.  The algorithm is one of a number of one-way hashing or "
"password storage algorithms Django can use; see below. Iterations describe "
"the number of times the algorithm is run over the hash. Salt is the random "
"seed used and the hash is the result of the one-way function."
msgstr ""
"Данная строка показывает компоненты, которые используются для хранения "
"пользовательского пароля и разделены знаком доллара, а именно: хэширующий "
"алгоритм, количество итераций алгоритма (work factor), случайная соль и "
"полученный хэш пароля. Алгоритмом может быть любой из ряда однонаправленных "
"хэширующих алгоритмов, которые использует Django; см. далее. Итерации "
"описывают количество применений алгоритма для получения хэша. Соль является "
"случайными данным, а сам хэш получается в результате работы однонаправленной "
"функции."

# 9d390c968758479b8fb05868373c9222
#: ../../topics/auth/passwords.txt:39
msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""
"По умолчанию, Django использует алгоритм PBKDF2_ с хэшем SHA256, механизм "
"защиты паролей рекомендованный NIST_. Этого должно хватить для большинства "
"пользователей: достаточная защита, требующая большой объём вычислительного "
"времени для взлома."

# 47744e9767db4bc9ba784a1b2411e7bb
#: ../../topics/auth/passwords.txt:44
msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""
"Тем не менее, в зависимости от ваших требований, вы можете выбрать другой "
"алгоритм или даже реализовать собственный алгоритм, который будет "
"соответствовать вашим требованиям к безопасности. Итак, большинство "
"пользователей не должны думать об этом, если вы сомневаетесь, значит вам это "
"точно не надою В противном случае, прочитайте:"

# 17c8e902dd984258adab806a4b283546
#: ../../topics/auth/passwords.txt:49
msgid ""
"Django chooses the algorithm to use by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports. The first entry in this list (that is, "
"``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all "
"the other entries are valid hashers that can be used to check existing "
"passwords.  This means that if you want to use a different algorithm, you'll "
"need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm "
"first in the list."
msgstr ""
"Django выбирает алгоритм для использования в соответствии с указанием "
"переменной конфигурации :setting:`PASSWORD_HASHERS`. Переменная содержит "
"список классов реализующих алгоритмы хэширования, которые поддерживает "
"Django. Первая запись этого списка (речь о ``settings.PASSWORD_HASHERS[0]``) "
"будет использоваться для сохранения паролей, а все остальные записи являются "
"проверенными средствами, которые могут быть применены для проверки "
"существующих паролей. Это означает, что вам потребуется использовать другой "
"алгоритм хэширования, вам потребуется просто указать его первым в параметре "
"конфигурации :setting:`PASSWORD_HASHERS`."

# 6c247db07b594cecbf591d448ebd9e35
#: ../../topics/auth/passwords.txt:58
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr "По умолчанию :setting:`PASSWORD_HASHERS` содержит::"

# 6ffb62d3152e4f5e8e223345d3ec583c
#: ../../topics/auth/passwords.txt:68
#, fuzzy
msgid ""
"This means that Django will use PBKDF2_ to store all passwords but will "
"support checking passwords stored with PBKDF2SHA1, argon2_, and bcrypt_."
msgstr ""
"Это означает, что Django будет использовать PBKDF2_ для сохранения всех "
"паролей, но будет поддерживать проверку паролей, сохранённых с помощью "
"PBKDF2SHA1, bcrypt_, SHA1_ и так далее. Следующие несколько разделов "
"описывают ряд общих способов, которые могут быть использованы опытными "
"пользователями для изменения данного параметра конфигурации."

#: ../../topics/auth/passwords.txt:71
msgid ""
"The next few sections describe a couple of common ways advanced users may "
"want to modify this setting."
msgstr ""

# 1184bbce81f34a5c80536ea26bef9d51
#: ../../topics/auth/passwords.txt:77
#, fuzzy
msgid "Using Argon2 with Django"
msgstr "Использование bcrypt с Django"

#: ../../topics/auth/passwords.txt:81
msgid ""
"Argon2_ is the winner of the 2015 `Password Hashing Competition`_, a "
"community organized open competition to select a next generation hashing "
"algorithm. It's designed not to be easier to compute on custom hardware than "
"it is to compute on an ordinary CPU."
msgstr ""

#: ../../topics/auth/passwords.txt:86
msgid ""
"Argon2_ is not the default for Django because it requires a third-party "
"library. The Password Hashing Competition panel, however, recommends "
"immediate use of Argon2 rather than the other algorithms supported by Django."
msgstr ""

# 3c70d7eea3294f66aed020d44d5092bf
#: ../../topics/auth/passwords.txt:90
#, fuzzy
msgid "To use Argon2 as your default storage algorithm, do the following:"
msgstr ""
"Для использования Bcrypt в качестве алгоритма по умолчанию, выполните "
"следующие действия:"

#: ../../topics/auth/passwords.txt:92
#, fuzzy
msgid ""
"Install the `argon2-cffi library`_.  This can be done by running ``pip "
"install django[argon2]``, which is equivalent to ``pip install argon2-cffi`` "
"(along with any version requirement from Django's ``setup.py``)."
msgstr ""
"Установите `bcrypt library`_. Это можно сделать с помощью команды ``pip "
"install django[bcrypt]`` или скачайте библиотеку и установите её с помощью "
"команды ``python setup.py install``."

# b534b55fee94440496f00ac49a1a5543
#: ../../topics/auth/passwords.txt:96
#, fuzzy
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``Argon2PasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr ""
"Измените :setting:`PASSWORD_HASHERS` так, чтобы "
"``BCryptSHA256PasswordHasher`` был указан первым. То есть, в файле "
"конфигурации надо сделать так::"

#: ../../topics/auth/passwords.txt:107 ../../topics/auth/passwords.txt:137
msgid ""
"Keep and/or add any entries in this list if you need Django to :ref:`upgrade "
"passwords <password-upgrades>`."
msgstr ""

# 1184bbce81f34a5c80536ea26bef9d51
#: ../../topics/auth/passwords.txt:113
#, fuzzy
msgid "Using ``bcrypt`` with Django"
msgstr "Использование bcrypt с Django"

# f005de51fadb4006a0850ead2f134880
#: ../../topics/auth/passwords.txt:115
msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""
"Bcrypt_ является популярным алгоритмом для хранения паролей, который "
"специально разработан для хранения \"долгих\" паролей. Данный алгоритм не "
"выбран в качестве стандартного в Django так как он требует использования "
"внешних библиотек, но раз он используется многими, то Django поддерживает "
"его, требуя минимальных усилий по его установке."

# 3c70d7eea3294f66aed020d44d5092bf
#: ../../topics/auth/passwords.txt:120
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""
"Для использования Bcrypt в качестве алгоритма по умолчанию, выполните "
"следующие действия:"

#: ../../topics/auth/passwords.txt:122
#, fuzzy
msgid ""
"Install the `bcrypt library`_. This can be done by running ``pip install "
"django[bcrypt]``, which is equivalent to  ``pip install bcrypt`` (along with "
"any version requirement from Django's ``setup.py``)."
msgstr ""
"Установите `bcrypt library`_. Это можно сделать с помощью команды ``pip "
"install django[bcrypt]`` или скачайте библиотеку и установите её с помощью "
"команды ``python setup.py install``."

# b534b55fee94440496f00ac49a1a5543
#: ../../topics/auth/passwords.txt:126
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptSHA256PasswordHasher`` "
"first. That is, in your settings file, you'd put::"
msgstr ""
"Измените :setting:`PASSWORD_HASHERS` так, чтобы "
"``BCryptSHA256PasswordHasher`` был указан первым. То есть, в файле "
"конфигурации надо сделать так::"

# 49718e5da0c24f9eb50ee673b1ce92ee
#: ../../topics/auth/passwords.txt:140
msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""
"Вот так, теперь Django по умолчанию будет использовать Bcrypt в качестве "
"алгоритма хранения паролей."

# c370b70c045a4bae92c64187f261427b
#: ../../topics/auth/passwords.txt:143
msgid "Password truncation with BCryptPasswordHasher"
msgstr "Обрезание паролей с помощью BCryptPasswordHasher"

# f24348c54d0d47638b9b1e4711e8e508
#: ../../topics/auth/passwords.txt:145
#, fuzzy
msgid ""
"The designers of bcrypt truncate all passwords at 72 characters which means "
"that ``bcrypt(password_with_100_chars) == "
"bcrypt(password_with_100_chars[:72])``. The original "
"``BCryptPasswordHasher`` does not have any special handling and thus is also "
"subject to this hidden password length limit. ``BCryptSHA256PasswordHasher`` "
"fixes this by first hashing the password using sha256. This prevents the "
"password truncation and so should be preferred over the "
"``BCryptPasswordHasher``. The practical ramification of this truncation is "
"pretty marginal as the average user does not have a password greater than 72 "
"characters in length and even being truncated at 72 the compute powered "
"required to brute force bcrypt in any useful amount of time is still "
"astronomical. Nonetheless, we recommend you use "
"``BCryptSHA256PasswordHasher`` anyway on the principle of \"better safe than "
"sorry\"."
msgstr ""
"Разработчики алгоритма bcrypt обрезают все пароли до 72 символов, что "
"означает ``bcrypt(password_with_100_chars) == "
"bcrypt(password_with_100_chars[:72])``. Оригинальный "
"``BCryptPasswordHasher`` не использует особую обработку и, следовательно, "
"также имеет аналогичное ограничение на длину пароля. "
"``BCryptSHA256PasswordHasher`` исправляет это поведение, сначала хэшируя "
"пароль с помощью sha256. Это действие предотвращает обрезание пароля, "
"рекоментуем использовать эту реализацию вместо ``BCryptPasswordHasher``. "
"Причина применения такого обрезания проста, длина пароля обычного "
"пользователя не превышает 72 символа и, даже будучи обрезанным до 72 "
"символов, такой пароль всё равно требует значительных вычислительных "
"ресурсов для его прямого подбора. Тем не менее, мы рекомендуем использовать "
"``BCryptSHA256PasswordHasher`` в любом случае по принципу \"запас карман не "
"тянет\"."

# 94a112c6dbea42d8b73c3775accea0f0
#: ../../topics/auth/passwords.txt:159
msgid "Other bcrypt implementations"
msgstr "Другие реализации bcrypt"

# b3f570c2d9c846d7acda5f8652767633
#: ../../topics/auth/passwords.txt:161
msgid ""
"There are several other implementations that allow bcrypt to be used with "
"Django. Django's bcrypt support is NOT directly compatible with these. To "
"upgrade, you will need to modify the hashes in your database to be in the "
"form ``bcrypt$(raw bcrypt output)``. For example: ``bcrypt$$2a"
"$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy``."
msgstr ""
"Существует несколько других реализаций алгоритма, которые позволяют "
"использовать bcrypt в Django. Django *не поддерживает* из из коробки. Для "
"активации поддержки, вам потребуется привести хэши в вашей базе данных к "
"виду ``bcrypt$(raw bcrypt output)``. Например: ``bcrypt$$2a"
"$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy``."

# 1f19e5ed62c04c47bfc60b5649148b60
#: ../../topics/auth/passwords.txt:171
msgid "Increasing the work factor"
msgstr "Увеличение сложности хэша"

#: ../../topics/auth/passwords.txt:174
msgid "PBKDF2 and bcrypt"
msgstr ""

# d496c563aee1499c9213ac16c9a5c009
#: ../../topics/auth/passwords.txt:176
msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations "
"used by the default PBKDF2 algorithm:"
msgstr ""
"Алгоритмы PBKDF2 и bcrypt используют ряд итераций или округлений для хэшей. "
"Это значительно замедляют действия атакующих, усложняя выполнение атаки на "
"хэшированные пароли. Однако, по мере увеличения вычислительной мощности, "
"количество этих итераций следует увеличивать. Мы установили достаточное "
"значение по умолчанию (и будем его увеличивать с каждым новым релизом "
"Django), но вы можете пожелать увеличить или уменьшить это значение "
"самостоятельно, в зависимости от вашей политики безопасности и "
"вычислительной мощности, имеющейся в наличии. Чтобы сделать это, следует "
"унаследоваться от класса нужного алгоритма и переопределить параметры "
"``iterations``. Например, для увеличения количества итераций в алгоритме "
"PBKDF2:"

# 361887267b4147009ca8617cdb56c6d3
#: ../../topics/auth/passwords.txt:186
msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""
"Создайте подкласс класса ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"

# 3e5ee698266f4d5b8e54c29d9c34a6cc
#: ../../topics/auth/passwords.txt:196
msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""
"Сохраните это в ваш проект. Например, вы можете разместить это в файле "
"подобном ``myproject/hashers.py``."

# 53402d12d2724a6eab05e8feb2bc3ab5
#: ../../topics/auth/passwords.txt:199
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""
"Добавьте новый алгоритм хэширования в начало списка конфигурационного "
"параметра :setting:`PASSWORD_HASHERS`::"

# b2703b9c1bb04bde98d868b78527d168
#: ../../topics/auth/passwords.txt:210
msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""
"Вот так, теперь Django будет использовать большее количество итераций при "
"сохранении паролей с помощью PBKDF2."

#: ../../topics/auth/passwords.txt:214
msgid "Argon2"
msgstr ""

#: ../../topics/auth/passwords.txt:216
msgid "Argon2 has three attributes that can be customized:"
msgstr ""

#: ../../topics/auth/passwords.txt:218
msgid "``time_cost`` controls the number of iterations within the hash."
msgstr ""

#: ../../topics/auth/passwords.txt:219
msgid ""
"``memory_cost`` controls the size of memory that must be used during the "
"computation of the hash."
msgstr ""

#: ../../topics/auth/passwords.txt:221
msgid ""
"``parallelism`` controls how many CPUs the computation of the hash can be "
"parallelized on."
msgstr ""

#: ../../topics/auth/passwords.txt:224
msgid ""
"The default values of these attributes are probably fine for you. If you "
"determine that the password hash is too fast or too slow, you can tweak it "
"as follows:"
msgstr ""

#: ../../topics/auth/passwords.txt:228
msgid ""
"Choose ``parallelism`` to be the number of threads you can spare computing "
"the hash."
msgstr ""

#: ../../topics/auth/passwords.txt:230
msgid "Choose ``memory_cost`` to be the KiB of memory you can spare."
msgstr ""

#: ../../topics/auth/passwords.txt:231
msgid ""
"Adjust ``time_cost`` and measure the time hashing a password takes. Pick a "
"``time_cost`` that takes an acceptable time for you. If ``time_cost`` set to "
"1 is unacceptably slow, lower ``memory_cost``."
msgstr ""

#: ../../topics/auth/passwords.txt:235
msgid "``memory_cost`` interpretation"
msgstr ""

#: ../../topics/auth/passwords.txt:237
msgid ""
"The argon2 command-line utility and some other libraries interpret the "
"``memory_cost`` parameter differently from the value that Django uses. The "
"conversion is given by ``memory_cost == 2 ** memory_cost_commandline``."
msgstr ""

# 3ded3043eeb74015b49e56f887ea59d9
#: ../../topics/auth/passwords.txt:244
msgid "Password upgrading"
msgstr "Обновление паролей"

# b503b7ae683a4357b5074e76aaa4f8d3
#: ../../topics/auth/passwords.txt:246
msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""
"При аутентификации пользователей, если их пароли сохранены с помощью "
"алгоритма, отличающегося от стандартного, то Django будет автоматически "
"применять стандартный алгоритм хэширования. Это означает, что старые "
"установки Django автоматически получат обновление в области аутентификации "
"пользователей, и это также означает, что вы можете переключаться на новые (и "
"более лучшие) алгоритмы хранения паролей по мере их изобретения."

#: ../../topics/auth/passwords.txt:252
#, fuzzy
msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using "
"unmentioned algorithms won't be able to upgrade. Hashed passwords will be "
"updated when increasing (or decreasing) the number of PBKDF2 iterations or "
"bcrypt rounds."
msgstr ""
"Тем не менее, Django может обновлять хэш только тех паролей, которые были "
"захэшированы с помощью алгоритмов, перечисленных в параметре конфигурации :"
"setting:`PASSWORD_HASHERS`. Таким образом, при переходе на новый алгоритм "
"хэширования следует удостовериться, что старые алгоритмы не были *удалены* "
"из списка алгоритмов. В противном случае, пароли пользователей "
"захэшированные неупомянутым в параметре конфигурации алгоритмом не будут "
"обновлены. Пароли также обновляются при изменении количества итераций у "
"алгоритма PBKDF2."

#: ../../topics/auth/passwords.txt:259
msgid ""
"Be aware that if all the passwords in your database aren't encoded in the "
"default hasher's algorithm, you may be vulnerable to a user enumeration "
"timing attack due to a difference between the duration of a login request "
"for a user with a password encoded in a non-default algorithm and the "
"duration of a login request for a nonexistent user (which runs the default "
"hasher). You may be able to mitigate this by :ref:`upgrading older password "
"hashes <wrapping-password-hashers>`."
msgstr ""

#: ../../topics/auth/passwords.txt:270
msgid "Password upgrading without requiring a login"
msgstr ""

#: ../../topics/auth/passwords.txt:272
msgid ""
"If you have an existing database with an older, weak hash such as MD5 or "
"SHA1, you might want to upgrade those hashes yourself instead of waiting for "
"the upgrade to happen when a user logs in (which may never happen if a user "
"doesn't return to your site). In this case, you can use a \"wrapped\" "
"password hasher."
msgstr ""

#: ../../topics/auth/passwords.txt:277
msgid ""
"For this example, we'll migrate a collection of SHA1 hashes to use "
"PBKDF2(SHA1(password)) and add the corresponding password hasher for "
"checking if a user entered the correct password on login. We assume we're "
"using the built-in ``User`` model and that our project has an ``accounts`` "
"app. You can modify the pattern to work with any algorithm or with a custom "
"user model."
msgstr ""

#: ../../topics/auth/passwords.txt:283
msgid "First, we'll add the custom hasher:"
msgstr ""

#: ../../topics/auth/passwords.txt:303
msgid "The data migration might look something like:"
msgstr ""

#: ../../topics/auth/passwords.txt:335
msgid ""
"Be aware that this migration will take on the order of several minutes for "
"several thousand users, depending on the speed of your hardware."
msgstr ""

# 6c247db07b594cecbf591d448ebd9e35
#: ../../topics/auth/passwords.txt:338
#, fuzzy
msgid "Finally, we'll add a :setting:`PASSWORD_HASHERS` setting:"
msgstr "По умолчанию :setting:`PASSWORD_HASHERS` содержит::"

#: ../../topics/auth/passwords.txt:348
msgid "Include any other hashers that your site uses in this list."
msgstr ""

#: ../../topics/auth/passwords.txt:362
msgid "Included hashers"
msgstr ""

#: ../../topics/auth/passwords.txt:364
msgid "The full list of hashers included in Django is::"
msgstr ""

#: ../../topics/auth/passwords.txt:379
msgid "The corresponding algorithm names are:"
msgstr ""

#: ../../topics/auth/passwords.txt:381
msgid "``pbkdf2_sha256``"
msgstr ""

#: ../../topics/auth/passwords.txt:382
msgid "``pbkdf2_sha1``"
msgstr ""

#: ../../topics/auth/passwords.txt:383
msgid "``argon2``"
msgstr ""

#: ../../topics/auth/passwords.txt:384
msgid "``bcrypt_sha256``"
msgstr ""

#: ../../topics/auth/passwords.txt:385
msgid "``bcrypt``"
msgstr ""

#: ../../topics/auth/passwords.txt:386
msgid "``sha1``"
msgstr ""

#: ../../topics/auth/passwords.txt:387
msgid "``md5``"
msgstr ""

#: ../../topics/auth/passwords.txt:388
msgid "``unsalted_sha1``"
msgstr ""

#: ../../topics/auth/passwords.txt:389
msgid "``unsalted_md5``"
msgstr ""

#: ../../topics/auth/passwords.txt:390
msgid "``crypt``"
msgstr ""

#: ../../topics/auth/passwords.txt:395
msgid "Writing your own hasher"
msgstr ""

#: ../../topics/auth/passwords.txt:397
msgid ""
"If you write your own password hasher that contains a work factor such as a "
"number of iterations, you should implement a ``harden_runtime(self, "
"password, encoded)`` method to bridge the runtime gap between the work "
"factor supplied in the ``encoded`` password and the default work factor of "
"the hasher. This prevents a user enumeration timing attack due to  "
"difference between a login request for a user with a password encoded in an "
"older number of iterations and a nonexistent user (which runs the default "
"hasher's default number of iterations)."
msgstr ""

#: ../../topics/auth/passwords.txt:406
msgid ""
"Taking PBKDF2 as example, if ``encoded`` contains 20,000 iterations and the "
"hasher's default ``iterations`` is 30,000, the method should run "
"``password`` through another 10,000 iterations of PBKDF2."
msgstr ""

#: ../../topics/auth/passwords.txt:410
msgid ""
"If your hasher doesn't have a work factor, implement the method as a no-op "
"(``pass``)."
msgstr ""

# d01063ca80d04377a42306ee722c262e
#: ../../topics/auth/passwords.txt:414
msgid "Manually managing a user's password"
msgstr "Ручное управление паролями пользователей"

# 311308949e7b40d09953975e49b310fd
#: ../../topics/auth/passwords.txt:418
msgid ""
"The :mod:`django.contrib.auth.hashers` module provides a set of functions to "
"create and validate hashed password. You can use them independently from the "
"``User`` model."
msgstr ""
"Модуль :mod:`django.contrib.auth.hashers` предоставляет набор функций для "
"создания и проверки хэшированных паролей. Вы можете использовать эти функции "
"независимо от модели ``User``l."

# ef1a7e88125a4a0ea6d3b1390b5ad2dc
#: ../../topics/auth/passwords.txt:424
msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`check_password`. It takes two arguments: the plain-text "
"password to check, and the full value of a user's ``password`` field in the "
"database to check against, and returns ``True`` if they match, ``False`` "
"otherwise."
msgstr ""
"Если требуется вручную аутентифицировать пользователя с помощью сравнения "
"открытого пароля с захэшированным паролем из базы данных, используйте "
"вспомогательную функцию :func:`check_password`. Она принимает два аргумента: "
"открытый пароль и полное значение поля ``password`` из базы данных, "
"возвращает ``True`` при совпадении и ``False`` в противном случае."

# b47592f5bd28456f8fc4f2c365e38eba
#: ../../topics/auth/passwords.txt:433
#, fuzzy
msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text. Optionally, you can "
"provide a salt and a hashing algorithm to use, if you don't want to use the "
"defaults (first entry of ``PASSWORD_HASHERS`` setting). See :ref:`auth-"
"included-hashers` for the algorithm name of each hasher. If the password "
"argument is ``None``, an unusable password is returned (a one that will be "
"never accepted by :func:`check_password`)."
msgstr ""
"Создаёт хэшированный пароль в формате, используемом этим приложением. "
"Принимает один обязательный аргумент: открытый пароль. Опционально, если вам "
"не надо использовать стандартные настройки (первая запись списка "
"``PASSWORD_HASHERS``), вы можете указать \"соль\" и алгоритм, который "
"следует использовать для хэширования, Сейчас поддерживаются следующие "
"алгоритмы: ``'pbkdf2_sha256'``, ``'pbkdf2_sha1'``, ``'bcrypt_sha256'`` (см. :"
"ref:`bcrypt_usage`), ``'bcrypt'``, ``'sha1'``, ``'md5'``, ``'unsalted_md5'`` "
"(в целях обратной совместимости) и ``'crypt'``, если соответствующая "
"библиотека установлена в системе. Если аргумент с паролем содержит ``None``, "
"возвращается бесполезный пароль, который никогда не будет пропущен функцией :"
"func:`check_password`."

# 13c679823b7d49e78f42517da24489fe
#: ../../topics/auth/passwords.txt:443
msgid ""
"Checks if the given string is a hashed password that has a chance of being "
"verified against :func:`check_password`."
msgstr ""
"Проверяет, является ли переданная строка хэшированным паролем, который имеет "
"шанс пройти проверку с помощью функции :func:`check_password`."

# 3ded3043eeb74015b49e56f887ea59d9
#: ../../topics/auth/passwords.txt:449
#, fuzzy
msgid "Password validation"
msgstr "Обновление паролей"

#: ../../topics/auth/passwords.txt:453
msgid ""
"Users often choose poor passwords. To help mitigate this problem, Django "
"offers pluggable password validation. You can configure multiple password "
"validators at the same time. A few validators are included in Django, but "
"it's simple to write your own as well."
msgstr ""

#: ../../topics/auth/passwords.txt:458
msgid ""
"Each password validator must provide a help text to explain the requirements "
"to the user, validate a given password and return an error message if it "
"does not meet the requirements, and optionally receive passwords that have "
"been set. Validators can also have optional settings to fine tune their "
"behavior."
msgstr ""

#: ../../topics/auth/passwords.txt:463
msgid ""
"Validation is controlled by the :setting:`AUTH_PASSWORD_VALIDATORS` setting. "
"The default for the setting is an empty list, which means no validators are "
"applied. In new projects created with the default :djadmin:`startproject` "
"template, a simple set of validators is enabled."
msgstr ""

#: ../../topics/auth/passwords.txt:468
msgid ""
"By default, validators are used in the forms to reset or change passwords "
"and in the :djadmin:`createsuperuser` and :djadmin:`changepassword` "
"management commands. Validators aren't applied at the model level, for "
"example in ``User.objects.create_user()`` and ``create_superuser()``, "
"because we assume that developers, not users, interact with Django at that "
"level and also because model validation doesn't automatically run as part of "
"creating models."
msgstr ""

#: ../../topics/auth/passwords.txt:477
msgid ""
"Password validation can prevent the use of many types of weak passwords. "
"However, the fact that a password passes all the validators doesn't "
"guarantee that it is a strong password. There are many factors that can "
"weaken a password that are not detectable by even the most advanced password "
"validators."
msgstr ""

#: ../../topics/auth/passwords.txt:484
msgid "Enabling password validation"
msgstr ""

#: ../../topics/auth/passwords.txt:486
msgid ""
"Password validation is configured in the :setting:`AUTH_PASSWORD_VALIDATORS` "
"setting::"
msgstr ""

#: ../../topics/auth/passwords.txt:507
msgid "This example enables all four included validators:"
msgstr ""

#: ../../topics/auth/passwords.txt:509
msgid ""
"``UserAttributeSimilarityValidator``, which checks the similarity between "
"the password and a set of attributes of the user."
msgstr ""

#: ../../topics/auth/passwords.txt:511
msgid ""
"``MinimumLengthValidator``, which simply checks whether the password meets a "
"minimum length. This validator is configured with a custom option: it now "
"requires the minimum length to be nine characters, instead of the default "
"eight."
msgstr ""

#: ../../topics/auth/passwords.txt:515
msgid ""
"``CommonPasswordValidator``, which checks whether the password occurs in a "
"list of common passwords. By default, it compares to an included list of "
"1000 common passwords."
msgstr ""

#: ../../topics/auth/passwords.txt:518
msgid ""
"``NumericPasswordValidator``, which checks whether the password isn't "
"entirely numeric."
msgstr ""

#: ../../topics/auth/passwords.txt:521
msgid ""
"For ``UserAttributeSimilarityValidator`` and ``CommonPasswordValidator``, "
"we're simply using the default settings in this example. "
"``NumericPasswordValidator`` has no settings."
msgstr ""

#: ../../topics/auth/passwords.txt:525
msgid ""
"The help texts and any errors from password validators are always returned "
"in the order they are listed in :setting:`AUTH_PASSWORD_VALIDATORS`."
msgstr ""

#: ../../topics/auth/passwords.txt:529
msgid "Included validators"
msgstr ""

#: ../../topics/auth/passwords.txt:531
msgid "Django includes four validators:"
msgstr ""

#: ../../topics/auth/passwords.txt:535
msgid ""
"Validates whether the password meets a minimum length. The minimum length "
"can be customized with the ``min_length`` parameter."
msgstr ""

#: ../../topics/auth/passwords.txt:540
msgid ""
"Validates whether the password is sufficiently different from certain "
"attributes of the user."
msgstr ""

#: ../../topics/auth/passwords.txt:543
msgid ""
"The ``user_attributes`` parameter should be an iterable of names of user "
"attributes to compare to. If this argument is not provided, the default is "
"used: ``'username', 'first_name', 'last_name', 'email'``. Attributes that "
"don't exist are ignored."
msgstr ""

#: ../../topics/auth/passwords.txt:548
msgid ""
"The minimum similarity of a rejected password can be set on a scale of 0 to "
"1 with the ``max_similarity`` parameter. A setting of 0 rejects all "
"passwords, whereas a setting of 1 rejects only passwords that are identical "
"to an attribute's value."
msgstr ""

#: ../../topics/auth/passwords.txt:555
msgid ""
"Validates whether the password is not a common password. By default, this "
"checks against a list of 1000 common password created by `Mark Burnett "
"<https://web.archive.org/web/20150315154609/https://xato.net/passwords/more-"
"top-worst-passwords/>`_."
msgstr ""

#: ../../topics/auth/passwords.txt:559
msgid ""
"The ``password_list_path`` can be set to the path of a custom file of common "
"passwords. This file should contain one password per line and may be plain "
"text or gzipped."
msgstr ""

#: ../../topics/auth/passwords.txt:565
msgid "Validates whether the password is not entirely numeric."
msgstr ""

#: ../../topics/auth/passwords.txt:568
msgid "Integrating validation"
msgstr ""

#: ../../topics/auth/passwords.txt:570
msgid ""
"There are a few functions in ``django.contrib.auth.password_validation`` "
"that you can call from your own forms or other code to integrate password "
"validation. This can be useful if you use custom forms for password setting, "
"or if you have API calls that allow passwords to be set, for example."
msgstr ""

#: ../../topics/auth/passwords.txt:577
msgid ""
"Validates a password. If all validators find the password valid, returns "
"``None``. If one or more validators reject the password, raises a :exc:"
"`~django.core.exceptions.ValidationError` with all the error messages from "
"the validators."
msgstr ""

#: ../../topics/auth/passwords.txt:582
msgid ""
"The ``user`` object is optional: if it's not provided, some validators may "
"not be able to perform any validation and will accept any password."
msgstr ""

#: ../../topics/auth/passwords.txt:587
msgid ""
"Informs all validators that the password has been changed. This can be used "
"by validators such as one that prevents password reuse. This should be "
"called once the password has been successfully changed."
msgstr ""

#: ../../topics/auth/passwords.txt:591
msgid ""
"For subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser`, the "
"password field will be marked as \"dirty\" when calling :meth:`~django."
"contrib.auth.models.AbstractBaseUser.set_password` which triggers a call to "
"``password_changed()`` after the user is saved."
msgstr ""

#: ../../topics/auth/passwords.txt:598
msgid ""
"Returns a list of the help texts of all validators. These explain the "
"password requirements to the user."
msgstr ""

#: ../../topics/auth/passwords.txt:603
msgid ""
"Returns an HTML string with all help texts in an ``<ul>``. This is helpful "
"when adding password validation to forms, as you can pass the output "
"directly to the ``help_text`` parameter of a form field."
msgstr ""

#: ../../topics/auth/passwords.txt:609
msgid ""
"Returns a set of validator objects based on the ``validator_config`` "
"parameter. By default, all functions use the validators defined in :setting:"
"`AUTH_PASSWORD_VALIDATORS`, but by calling this function with an alternate "
"set of validators and then passing the result into the "
"``password_validators`` parameter of the other functions, your custom set of "
"validators will be used instead. This is useful when you have a typical set "
"of validators to use for most scenarios, but also have a special situation "
"that requires a custom set. If you always use the same set of validators, "
"there is no need to use this function, as the configuration from :setting:"
"`AUTH_PASSWORD_VALIDATORS` is used by default."
msgstr ""

#: ../../topics/auth/passwords.txt:620
msgid ""
"The structure of ``validator_config`` is identical to the structure of :"
"setting:`AUTH_PASSWORD_VALIDATORS`. The return value of this function can be "
"passed into the ``password_validators`` parameter of the functions listed "
"above."
msgstr ""

#: ../../topics/auth/passwords.txt:625
msgid ""
"Note that where the password is passed to one of these functions, this "
"should always be the clear text password - not a hashed password."
msgstr ""

#: ../../topics/auth/passwords.txt:629
msgid "Writing your own validator"
msgstr ""

#: ../../topics/auth/passwords.txt:631
msgid ""
"If Django's built-in validators are not sufficient, you can write your own "
"password validators. Validators are fairly simple classes. They must "
"implement two methods:"
msgstr ""

#: ../../topics/auth/passwords.txt:635
msgid ""
"``validate(self, password, user=None)``: validate a password. Return "
"``None`` if the password is valid, or raise a :exc:`~django.core.exceptions."
"ValidationError` with an error message if the password is not valid. You "
"must be able to deal with ``user`` being ``None`` - if that means your "
"validator can't run, simply return ``None`` for no error."
msgstr ""

#: ../../topics/auth/passwords.txt:641
msgid ""
"``get_help_text()``: provide a help text to explain the requirements to the "
"user."
msgstr ""

#: ../../topics/auth/passwords.txt:644
msgid ""
"Any items in the ``OPTIONS`` in :setting:`AUTH_PASSWORD_VALIDATORS` for your "
"validator will be passed to the constructor. All constructor arguments "
"should have a default value."
msgstr ""

#: ../../topics/auth/passwords.txt:648
msgid "Here's a basic example of a validator, with one optional setting::"
msgstr ""

#: ../../topics/auth/passwords.txt:671
msgid ""
"You can also implement ``password_changed(password, user=None``), which will "
"be called after a successful password change. That can be used to prevent "
"password reuse, for example. However, if you decide to store a user's "
"previous passwords, you should never do so in clear text."
msgstr ""

# 691f4ee7c5444783a38d391e32b6af02
#~ msgid ""
#~ "(You need to keep the other entries in this list, or else Django won't be "
#~ "able to upgrade passwords; see below)."
#~ msgstr ""
#~ "(Следует сохранить остальные записи в списке, иначе Django не сможет "
#~ "обновлять пароли; см. далее)"
