# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2016-04-01 17:34+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 77d08eedf7104e91af86196431166ad1
#: ../../topics/testing/tools.txt:3
msgid "Testing tools"
msgstr "Инструменты для тестирования"

# 61520dd952804e0a984dfd5ef894e741
#: ../../topics/testing/tools.txt:7
msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""
"Django предоставляет несколько инструментов, которые могут быть полезны при "
"написании тестов."

# 3c865869436b4cbea7fc25c3598e9d1c
#: ../../topics/testing/tools.txt:12
msgid "The test client"
msgstr "Тестовый клиент"

# d700bd92b6574e1999d9eb6fe642f9d6
#: ../../topics/testing/tools.txt:14
msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""
"Тестовый клиент -- это класс Python, который умеет эмулировать запросы "
"браузера. Он позволяет протестировать ваши представления и программно "
"взаимодействовать с вашим Django-приложением."

# 27551b4374bf4a4784650bd1ef423908
#: ../../topics/testing/tools.txt:18
msgid "Some of the things you can do with the test client are:"
msgstr "Некоторые вещи, которые вы можете делать с тестовым клиентом:"

# ab5f7093cfad4557af3eff6b9601e602
#: ../../topics/testing/tools.txt:20
msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""
"Эмулирует GET или POST запросы к URL-у и обрабатывает ответ -- начиная от "
"низкоуровневого HTTP (заголовки результата и код ответа) и заканчивая "
"содержимым ответа."

# 08666b363fdf4d32ae0a80c9f668562b
#: ../../topics/testing/tools.txt:24
msgid ""
"See the chain of redirects (if any) and check the URL and status code at "
"each step."
msgstr ""
"Следует по цепочке редиректов (если такие есть) и проверяет URL и код ответа "
"на каждом шаге."

# c50618589f4444dca5183a582a2c85b6
#: ../../topics/testing/tools.txt:27
msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""
"Может проверять, что полученный ответ был отрендерен определенным шаблоном "
"Django с контекстом, который содержит определенные переменные."

# 6fab74b92bbb4c2a8a7db1961b314507
#: ../../topics/testing/tools.txt:30
msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""
"Обратите внимание, этот клиент не может заменить Selenium_ или другие "
"фреймворки, которые используют движок браузера для запросов. У тестового "
"клиента Django другие задачи. Если кратко:"

# dbab0c4ac291475ca2dbf3aff438515a
#: ../../topics/testing/tools.txt:34
msgid ""
"Use Django's test client to establish that the correct template is being "
"rendered and that the template is passed the correct context data."
msgstr ""
"Вы можете использовать тестовый клиент, если нужно проверить какой шаблон "
"использовался для рендеринга ответа, и какой контекст ему передавался."

# 9515de8bf8f942aca95c8d5419a4726d
#: ../../topics/testing/tools.txt:37
msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""
"Фреймворки, которые используют движок браузера, например Selenium_, "
"позволяют тестировать уже *готовый* HTML и *поведение* страниц в браузере, а "
"именно работу JavaScript. Django предоставляет инструменты для работы с "
"ними, подробности смотрите в описании :class:`~django.test."
"LiveServerTestCase`."

# 40e75b654d1445b2bfb22ffa3c65d03f
#: ../../topics/testing/tools.txt:42
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""
"Комплексный набор тестов должен использовать комбинацию обоих типов тестов."

# e1a672c47db94186b0921a7930768921
#: ../../topics/testing/tools.txt:45
msgid "Overview and a quick example"
msgstr "Обзор и примеры"

# 0865ae2d789a48ef891d711269036792
#: ../../topics/testing/tools.txt:47
msgid ""
"To use the test client, instantiate ``django.test.Client`` and retrieve Web "
"pages::"
msgstr ""
"Для использования тестового клиента создайте экземпляр ``django.test."
"Client``, затем получите страницу::"

# 3fcd0e5d699049ba858829a5294cec33
#: ../../topics/testing/tools.txt:59
msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""
"Как видно из примера, вы можете использовать ``Client`` в консоли Python."

# 67eab9789bde4fe5a1b2ecb149d40c56
#: ../../topics/testing/tools.txt:62
msgid "Note a few important things about how the test client works:"
msgstr "Несколько заметок о работе тестового клиента:"

# 06ed583158644655a4579e3be8e739fb
#: ../../topics/testing/tools.txt:64
msgid ""
"The test client does *not* require the Web server to be running. In fact, it "
"will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""
"Для работы тестового клиента *не нужно* запускать сервер. Он работает "
"непосредственно с Django. Это ускоряет выполнение тестов."

# 506df49691ab4ae1bc325b72df2eb70a
#: ../../topics/testing/tools.txt:69
msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""
"Следует указывать *путь* из URL без домена. Например, вот так правильно::"

# 9009e2fc305441c5bfeb54091045c869
#: ../../topics/testing/tools.txt:74
msgid "This is incorrect::"
msgstr "А это не будет работать::"

# 44c1b1f86ead4161a8fe805164d8fb17
#: ../../topics/testing/tools.txt:78
msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib`."
msgstr ""
"Тестовый клиент умеет получить только те страницы, которые принадлежат "
"текущему Django проекту. Для загрузки внешних страниц можно использовать "
"стандартную библиотеку Python :mod:`urllib`."

# c7e45165bbef49ca9335d4bef04626a3
#: ../../topics/testing/tools.txt:82
msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""
"При обработке URL-ов тестовый клиент использует URLconf указанный в "
"настройке :setting:`ROOT_URLCONF`."

# 156912a55dbd44bbb4561c972551a90e
#: ../../topics/testing/tools.txt:85
msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""
"Несмотря на то, что примеры выше работают в консоли Python, некоторый "
"функционал тестового клиента, в частности связанный с шаблонизатором, "
"работает только *при выполнении тестов*."

# 7eed2fbb13dc4c3fa5dfb754c88530a2
#: ../../topics/testing/tools.txt:90
msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""
"Причина в \"темной магии\", которую Django использует при запуске тестов для "
"определения какой шаблон был использован представлением. Эта \"темная магия"
"\" (патчинг системы шаблонов Django в памяти) работает только при выполнении "
"тестов."

# 6e9adeeaa94549748a482f92eab9d211
#: ../../topics/testing/tools.txt:95
msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""
"По умолчанию тестовый клиент отключает все CSRF проверки на вашем проекте."

# 9a732416d0b94cb9b7ccfa8756379b21
#: ../../topics/testing/tools.txt:98
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""
"Если вы *хотите*, чтобы тестовый клиент выполнял проверку CSRF, вы можете "
"создать отдельный экземпляр тестового клиента и указать ему выполнять "
"проверку CSRF. Для этого передайте аргумент ``enforce_csrf_checks`` в "
"конструктор::"

# de4c2479e1294939b61dae432ee3dbf4
#: ../../topics/testing/tools.txt:108
msgid "Making requests"
msgstr "Выполнение запросов"

# e2295a39556643e298b1dc70dd6cd908
#: ../../topics/testing/tools.txt:110
msgid "Use the ``django.test.Client`` class to make requests."
msgstr "Используйте класс ``django.test.Client`` для выполнения запросов."

# 83cabc6836c348199cfae61105b3b365
#: ../../topics/testing/tools.txt:114
msgid ""
"It requires no arguments at time of construction. However, you can use "
"keywords arguments to specify some default headers. For example, this will "
"send a ``User-Agent`` HTTP header in each request::"
msgstr ""
"Конструктор не требует обязательных аргументов. Однако, вы можете "
"использовать именованные аргументы, чтобы указать заголовки для запросов. "
"Например, следующий код добавит HTTP заголовок ``User-Agent`` для каждого "
"запроса::"

# cde80f8b68d743d99832f514e602eb65
#: ../../topics/testing/tools.txt:120
msgid ""
"The values from the ``extra`` keywords arguments passed to :meth:`~django."
"test.Client.get()`, :meth:`~django.test.Client.post()`, etc. have precedence "
"over the defaults passed to the class constructor."
msgstr ""
"Значения из аргумента ``extra``, который передается в :meth:`~django.test."
"Client.get()`, :meth:`~django.test.Client.post()`, и т.д., имею более "
"высокий, чем аргументы конструктора."

# d550f3601faf4f569e721198b426869a
#: ../../topics/testing/tools.txt:125
msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""
"Аргумент ``enforce_csrf_checks`` может использоваться для проверки CSRF "
"(смотрите выше)."

# 90854d299ba142e281af9b660a36579e
#: ../../topics/testing/tools.txt:128
msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr "Создав экземпляр ``Client``, вы можете использовать следующие методы:"

# 8a78c1ac69f34cf188026d149508d276
#: ../../topics/testing/tools.txt:133
msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""
"Выполняет GET запрос по указанному ``path`` и возвращает объект "
"``Response``(описан ниже)."

# 566f77bdecde4bdb95f9c23fc3ef0099
#: ../../topics/testing/tools.txt:136
msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example::"
msgstr "В словаре ``data`` можно передать GET аргументы. Например::"

# 966bfd172c0c4ff9a54e1d50e61a2e8f
#: ../../topics/testing/tools.txt:142
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr "...выполнит GET запрос аналогичный::"

# 2752bd842119479facb712e2f7af4f15
#: ../../topics/testing/tools.txt:146
msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""
"Именованные аргументы ``extra`` позволяют указать дополнительные HTTP "
"заголовки. Например::"

# 3ccac0cad2004f67a6a31eb373d86ea0
#: ../../topics/testing/tools.txt:153
msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the :meth:`django.http."
"HttpRequest.is_ajax()` method."
msgstr ""
"...отправит HTTP заголовок ``HTTP_X_REQUESTED_WITH``, который позволит "
"протестировать обработку :meth:`django.http.HttpRequest.is_ajax()`."

# e163aa83bd2247dcadb84fa80fe1a1be
#: ../../topics/testing/tools.txt:157
msgid "CGI specification"
msgstr "Спецификация CGI"

# e50a127ca6c04f839eacde67f8bc4537
#: ../../topics/testing/tools.txt:159
msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""
"Заголовки из ``**extra`` должны соответствовать `CGI <http://www.w3.org/CGI/"
">`_ спецификации. Например, различные значения для HTTP заголовка \"Host\" "
"следует указать в параметре ``HTTP_HOST``."

# a396dd924afe4c62867f18a3e51282b8
#: ../../topics/testing/tools.txt:166
msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""
"Если у вас уже есть путь с GET аргументами в URL-кодированном формате, вы "
"можете его использовать без аргумента ``data``. Например, GET запрос из "
"примера выше можно выполнить следующим образом::"

# 66e4f87c74614fadb006ce11bcde907e
#: ../../topics/testing/tools.txt:173
msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""
"Если вы передали URL с GET параметрами и передали аргумент ``data``, будет "
"использовать ``data``."

# 852741fe6982418da73accf956a3b97f
# 5a5997a7a9804ede96520b1a7654ec4e
#: ../../topics/testing/tools.txt:176 ../../topics/testing/tools.txt:263
msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""
"Если передать ``follow`` со значением ``True``, тестовый клиент будет "
"следовать всем редиректам и атрибут ``redirect_chain`` будет содержать "
"кортеж из всех URL-ов и статусов ответа."

# 89e16557b5b44ac8b37592d3fa689768
#: ../../topics/testing/tools.txt:180
msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""
"Если у вас есть URL ``/redirect_me/``, который перенаправляет на ``/next/``, "
"который перенаправляет на ``/final/``, вы получите следующее::"

# 23c63faf06904b6fb10e442e8607e11f
# 720ab75600044a968ff03cc80a8fc0f6
#: ../../topics/testing/tools.txt:187 ../../topics/testing/tools.txt:267
msgid ""
"If you set ``secure`` to ``True`` the client will emulate an HTTPS request."
msgstr ""
"Если передать ``secure`` со значением ``True``, тестовый клиент эмулирует "
"HTTPS запрос."

# 8b1c86d7183748a69f8a2ffedd872222
#: ../../topics/testing/tools.txt:192
msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""
"Выполняет POST запрос по указанному ``path`` и возвращает объект "
"``Response``(описан ниже)."

# 94634832e0af4928a1117be432ed8cc6
#: ../../topics/testing/tools.txt:195
msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example::"
msgstr "В словаре ``data`` можно передать данные для POST запроса. Например::"

# d5e64841e0944c5e86533524289d6316
#: ../../topics/testing/tools.txt:201
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr "...выполнит POST запрос на URL::"

# 54af063425404e65944d137ef324ce08
#: ../../topics/testing/tools.txt:205
msgid "...with this POST data::"
msgstr "...отправив через POST данные::"

# 8296ba504b7b4cf2b97e4fd006b44b2e
#: ../../topics/testing/tools.txt:209
msgid ""
"If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML "
"payload), the contents of ``data`` will be sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""
"Если указать ``content_type`` (например :mimetype:`text/xml` для загрузки "
"XML), содержимое ``data`` будет отправлено без изменений, используя значение "
"``content_type`` как HTTP заголовок ``Content-Type``."

# 462836317c74473097fcd304e8113f2d
#: ../../topics/testing/tools.txt:213
msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""
"Если ``content_type`` не указан, данные из ``data`` будут отправлены с "
"типом :mimetype:`multipart/form-data`. В этом случае значения из ``data`` "
"будут кодированы как \"multipart\" сообщение и отправлены через POST."

# 90ae1f54b69b45bfa73238086d674b7b
#: ../../topics/testing/tools.txt:219
msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""
"Чтобы отправить несколько значений для одного ключа -- например, указать "
"список значений из ``<select multiple>`` -- укажите список или кортеж "
"значений. Например, следующий ``data`` отправит три значения для поля с "
"названием ``choices``::"

# ded2d434685a47bc949b0d46c70c7d13
#: ../../topics/testing/tools.txt:226
msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""
"Отправка файлов -- особый случай. Чтобы отправить файлы через POST запрос, "
"укажите название файлового поля в качестве ключа и открытый файл в качестве "
"значения. Например::"

# b8d1bd4dc5a0481f9b127eb8c4de291e
#: ../../topics/testing/tools.txt:234
msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""
"(Название ``attachment`` взято в качестве примера, используйте название из "
"вашего кода.)"

#: ../../topics/testing/tools.txt:237
msgid ""
"You may also provide any file-like object (e.g., :class:`~io.StringIO` or :"
"class:`~io.BytesIO`) as a file handle."
msgstr ""
"Также можно предоставить любой похожий на файл объект (т.е., :class:`~io."
"StringIO` или :class:`~io.BytesIO`) в качестве файлового дескриптора."

# cf395ebc5948495d9ab4d5f1f479986c
#: ../../topics/testing/tools.txt:240
msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""
"Обратите внимание, если вы хотите использовать один файл для нескольких "
"вызовов ``post()``, необходимо явно сбросить указатель текущей позиции файла "
"между вызовами. Самый простой способ -- закрыть файл после вызова "
"``post()``, как это сделано в примере выше."

# 614b3b42603145debc62f140d5d23dfd
#: ../../topics/testing/tools.txt:246
msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""
"Вы также должны отрыть файл с возможностью чтения. Если файл содержит "
"бинарные данные, например изображение, необходимо открыть его в режиме "
"``rb`` (бинарное чтение)."

# 52cb9411958c442aa338deb1413c6328
#: ../../topics/testing/tools.txt:251
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr "Аргумент ``extra`` работает так же, как и для :meth:`Client.get`."

# c5e44b06329d46b084067dbf69ef2389
#: ../../topics/testing/tools.txt:253
msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""
"Если URL, на который отправляет POST запрос, содержит параметры, они будут "
"доступны через ``request.GET``. Например, при следующем запросе::"

# 0ecf6e171c5642dd8df770942d8062be
#: ../../topics/testing/tools.txt:259
msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""
"... представление, которое обрабатывает запрос, сможет получить имя и пароль "
"из ``request.POST``, и определить был ли пользователь посетителем через "
"``request.GET``."

# 82985fb850be4e8a88465ca0a7e62773
#: ../../topics/testing/tools.txt:272
msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow``, ``secure`` and ``extra`` arguments, except it does not return a "
"message body."
msgstr ""
"Выполняет HEAD запрос по указанному ``path`` и возвращает объект "
"``Response``(описан ниже). Работает как :meth:`Client.get`, включая "
"аргументы ``follow``, ``secure`` и ``extra``, но ответ без содержимого."

# acef983a976e4a23a646c83847827b4b
#: ../../topics/testing/tools.txt:279
msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""
"Выполняет OPTIONS запрос по указанному ``path`` и возвращает объект "
"``Response``(описан ниже). Удобен при тестировании REST API."

# b85e9f7247b24cf1b4c1f357c5544e38
# 1ec3caf8255a4a7da37fd4c1d26bf4e1
# ccc1cb30e8064cba8333cc3ecaef652a
#: ../../topics/testing/tools.txt:282 ../../topics/testing/tools.txt:293
#: ../../topics/testing/tools.txt:312
msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""
"Если передать ``data``, значение будет использовать как тело запроса, а "
"заголовок ``Content-Type`` равен ``content_type``."

# 364a2c8447f345e0904b1017e3ad1bef
# 7c864fa3f9474649aedd36da7d6f9e0e
# e0ecdab947f2496a9225e3dabd7dd0c0
# 652711b2029b4a1b886fd3992ab50cd5
#: ../../topics/testing/tools.txt:285 ../../topics/testing/tools.txt:296
#: ../../topics/testing/tools.txt:304 ../../topics/testing/tools.txt:315
msgid ""
"The ``follow``, ``secure`` and ``extra`` arguments act the same as for :meth:"
"`Client.get`."
msgstr ""
"Аргументы ``follow``, ``secure`` и ``extra`` работают как и для :meth:"
"`Client.get`."

# a50748c929f34d51ad0c428c1c493456
#: ../../topics/testing/tools.txt:290
msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""
"Выполняет PUT запрос по указанному ``path`` и возвращает объект "
"``Response``(описан ниже). Удобен при тестировании REST API."

# 8012f2af4345400b9df39eada57f9f8a
#: ../../topics/testing/tools.txt:301
msgid ""
"Makes a PATCH request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""
"Выполняет PATCH запрос по указанному ``path`` и возвращает объект "
"``Response``(описан ниже). Удобен при тестировании REST API."

# 04f31e942e22468598b656d805daddcc
#: ../../topics/testing/tools.txt:309
#, fuzzy
msgid ""
"Makes a DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""
"Выполняет DELETE запрос по указанному ``path`` и возвращает объект "
"``Response``(описан ниже). Удобен при тестировании REST API."

# 8012f2af4345400b9df39eada57f9f8a
#: ../../topics/testing/tools.txt:320
msgid ""
"Makes a TRACE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for simulating diagnostic probes."
msgstr ""
"Выполняет TRACE запрос по указанному ``path`` и возвращает объект "
"``Response``. Удобен при тестировании."

#: ../../topics/testing/tools.txt:323
#, fuzzy
msgid ""
"Unlike the other request methods, ``data`` is not provided as a keyword "
"parameter in order to comply with :rfc:`7231#section-4.3.8`, which mandates "
"that TRACE requests must not have a body."
msgstr ""
"В отличие от других методов запроса, ``data`` не предоставляется в виде "
"именованного параметра для того, чтобы соответствовать :rfc:`2616`, который "
"определяет, что TRACE запросы не должны иметь тела."

# 364a2c8447f345e0904b1017e3ad1bef
# 7c864fa3f9474649aedd36da7d6f9e0e
# e0ecdab947f2496a9225e3dabd7dd0c0
# 652711b2029b4a1b886fd3992ab50cd5
#: ../../topics/testing/tools.txt:327
msgid ""
"The ``follow``, ``secure``, and ``extra`` arguments act the same as for :"
"meth:`Client.get`."
msgstr ""
"Аргументы ``follow``, ``secure`` и ``extra`` работают как и для :meth:"
"`Client.get`."

# 9974b0ef96834b328af92e1a950d312f
#: ../../topics/testing/tools.txt:332
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>` "
"and you deal with logging in users, you can use the test client's "
"``login()`` method to simulate the effect of a user logging into the site."
msgstr ""
"Если ваш сайт использует :doc:`систему авторизации Django </topics/auth/"
"index>`, вы можете использовать метод ``login()`` тестового клиента, чтобы "
"эмулировать авторизацию пользователями."

# a266a73a7aad40fca400db232f8d079a
#: ../../topics/testing/tools.txt:337
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""
"После вызова этого метода тестовый клиент будет содержать все куки и данные "
"сессии, которые необходимы, чтобы пройти проверку авторизации в "
"представлении."

# 02624721cd2e49ae9d6aa623fccda800
#: ../../topics/testing/tools.txt:341
msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""
"Формат аргумента ``credentials`` зависит от используемого :ref:`бэкенда "
"авторизации <authentication-backends>` (который настраивается :setting:"
"`AUTHENTICATION_BACKENDS`). Если вы используете стандартный бэкенд Django "
"(``ModelBackend``), ``credentials`` будет имя и пароль пользователя::"

# 39f05f2b879d4f988638e0361cffbeba
#: ../../topics/testing/tools.txt:353
msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""
"Для других бэкендов авторизации параметры могут отличаться. Это зависит от "
"аргументов, которые принимает метод ``authenticate()`` бэкенда авторизации."

# f43eac4869c64335903068a21e9dcbf9
#: ../../topics/testing/tools.txt:357
msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr "``login()`` возвращает ``True``, если пользователь успешно залогинен."

# f9bd7dc6a8dc46eea5035114839adef0
#: ../../topics/testing/tools.txt:360
msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""
"Не забудьте создать пользователя перед вызовом метода. Как мы уже сказали "
"выше, тесты используют тестовую базу данных, которая не содержит "
"пользователей по умолчанию. Поэтому пользователь, который существует в вашей "
"базе данных, не будет работать в тестах. Вы должны создать пользователя в "
"текущем наборе тестов явно (используя API Django моделей), или используя "
"тестовые фикстуры. Помните, если вы хотите установить пароль тестовому "
"пользователю, вы не можете этого сделать просто назначив атрибут -- вы "
"должны использовать метод :meth:`~django.contrib.auth.models.User."
"set_password()`, которая установит пароль в правильно хешированном виде. "
"Также вы можете использовать метод :meth:`~django.contrib.auth.models."
"UserManager.create_user` для создания пользователя с правильным паролем."

#: ../../topics/testing/tools.txt:376
#, fuzzy
msgid ""
"In previous versions, inactive users (:attr:`is_active=False <django.contrib."
"auth.models.User.is_active>`) were not permitted to login."
msgstr ""
"В отличии от ``login()`` этот метод пропускает этапы авторизации и проверки "
"пользователя: неактивные пользователи (:attr:`is_active=False <django."
"contrib.auth.models.User.is_active>`) могут быть авторизированы и нет "
"надобности указывать данные для авторизации(прим. пер. логин/пароль)."

# 275f5fa10beb492e959c574639bd6ac3
#: ../../topics/testing/tools.txt:382
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"you can use the ``force_login()`` method to simulate the effect of a user "
"logging into the site. Use this method instead of :meth:`login` when a test "
"requires a user be logged in and the details of how a user logged in aren't "
"important."
msgstr ""
"Если ваш сайт использует :doc:`систему авторизации Django </topics/auth/"
"index>`, вы можете использовать метод ``force_login()`` чтобы эмулировать "
"авторизацию пользователя на вашем сайте. Используйте этот метод вместо :meth:"
"`login`, если необходимо авторизировать пользователя в тестах и при этом не "
"важен способ авторизации."

#: ../../topics/testing/tools.txt:388
msgid ""
"Unlike ``login()``, this method skips the authentication and verification "
"steps: inactive users (:attr:`is_active=False <django.contrib.auth.models."
"User.is_active>`) are permitted to login and the user's credentials don't "
"need to be provided."
msgstr ""
"В отличии от ``login()`` этот метод пропускает этапы авторизации и проверки "
"пользователя: неактивные пользователи (:attr:`is_active=False <django."
"contrib.auth.models.User.is_active>`) могут быть авторизированы и нет "
"надобности указывать данные для авторизации(прим. пер. логин/пароль)."

#: ../../topics/testing/tools.txt:393
msgid ""
"The user will have its ``backend`` attribute set to the value of the "
"``backend`` argument (which should be a dotted Python path string), or to "
"``settings.AUTHENTICATION_BACKENDS[0]`` if a value isn't provided. The :func:"
"`~django.contrib.auth.authenticate` function called by :meth:`login` "
"normally annotates the user like this."
msgstr ""
"Атрибут ``backend`` пользователя будет установлен в значение аргумента "
"``backend`` (которые должен содержать путь для импорта Python), или "
"``settings.AUTHENTICATION_BACKENDS[0]``, если аргумент не указан. Обычно "
"этот атрибут устанавливает функция :func:`~django.contrib.auth."
"authenticate`, вызываемая  :meth:`login`."

#: ../../topics/testing/tools.txt:399
msgid ""
"This method is faster than ``login()`` since the expensive password hashing "
"algorithms are bypassed. Also, you can speed up ``login()`` by :ref:`using a "
"weaker hasher while testing <speeding-up-tests-auth-hashers>`."
msgstr ""
"Этот метод быстрее ``login()`` т.к. пропускаются сложные алгоритмы "
"хэширования паролей. Также вы можете ускорить ``login()``, используя :ref:"
"`более простые алгоритмы хэширования паролей <speeding-up-tests-auth-"
"hashers>`."

# 275f5fa10beb492e959c574639bd6ac3
#: ../../topics/testing/tools.txt:406
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"the ``logout()`` method can be used to simulate the effect of a user logging "
"out of your site."
msgstr ""
"Если ваш сайт использует :doc:`систему авторизации Django </topics/auth/"
"index>`, вы можете использовать метод ``logout()`` чтобы эмулировать логаут "
"пользователя."

# 6c679aad9d60404cb7970e450d969e67
#: ../../topics/testing/tools.txt:410
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an :class:`~django.contrib.auth.models.AnonymousUser`."
msgstr ""
"После вызова метода тестовый клиент очистит все куки и сессионные данные. "
"Последующие запросы будт выполнены от :class:`~django.contrib.auth.models."
"AnonymousUser`."

# 53f10d5caedd4066ac39364bdf964bc7
#: ../../topics/testing/tools.txt:415
msgid "Testing responses"
msgstr "Тестовые ответы"

# 3b3b92fc8de842fb8cf5955eff2b635a
#: ../../topics/testing/tools.txt:417
msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned by Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""
"Методы ``get()`` и ``post()`` возвращают объект ``Response``. Этот объект "
"``Response`` *отличается* от объекта ``HttpResponse``, который возвращается "
"представлениями Django. Тестовый объект ответа содержит дополнительные "
"данные, которые могут быть полезны при тестировании."

# cd908126a7944730b6578bf1acd5f8d0
#: ../../topics/testing/tools.txt:422
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr "Объект ``Response`` содержит следующие атрибуты:"

# 9d036460e8474ab5ad4e36cfdec2f971
#: ../../topics/testing/tools.txt:428
msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr "Тестовый клиент, который отправил запрос."

# 5cde3acdd64c45c4813914b2ff95f435
#: ../../topics/testing/tools.txt:433
msgid ""
"The body of the response, as a bytestring. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""
"Содержимое ответа в виде байтовой строки. Окончательное содержимое страницы, "
"которую вернуло представление, или содержимое об ошибке."

# d2daba85ad8d4deba4d01cb477e64355
#: ../../topics/testing/tools.txt:438
msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""
"Экземпляр ``Context``, который использовался при рендеринге шаблона, которые "
"использовался при формировании ответа."

# ddee72e426f349449c882874ac94fc01
#: ../../topics/testing/tools.txt:441
msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""
"Если использовалось несколько шаблонов, ``context`` будет содержать список "
"объектов ``Context`` в порядке, котором они использовались при рендеринге."

# fb39d1aac52f4ceeb4106263a2019b03
#: ../../topics/testing/tools.txt:444
msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""
"Независимо от количества используемых шаблонов, значение переменной можно "
"получить с помощью оператора ``[]``. Например, получаем значение переменной "
"контекста ``name``::"

#: ../../topics/testing/tools.txt:452 ../../topics/testing/tools.txt:496
msgid "Not using Django templates?"
msgstr "Не используйте шаблоны Django?"

#: ../../topics/testing/tools.txt:454
msgid ""
"This attribute is only populated when using the :class:`~django.template."
"backends.django.DjangoTemplates` backend. If you're using another template "
"engine, :attr:`~django.template.response.SimpleTemplateResponse."
"context_data` may be a suitable alternative on responses with that attribute."
msgstr ""
"Этот атрибут используется только бэкендом :class:`~django.template.backends."
"django.DjangoTemplates`. Если вы используете другой шаблонизатор, возможно "
"вам поможет :attr:`~django.template.response.SimpleTemplateResponse."
"context_data`."

#: ../../topics/testing/tools.txt:462
msgid ""
"The body of the response, parsed as JSON. Extra keyword arguments are passed "
"to :func:`json.loads`. For example::"
msgstr ""
"Тело ответа, преобразованное как JSON. Дополнительные именованные аргументы "
"передаются в :func:`json.loads`. Например::"

#: ../../topics/testing/tools.txt:469
msgid ""
"If the ``Content-Type`` header is not ``\"application/json\"``, then a :exc:"
"`ValueError` will be raised when trying to parse the response."
msgstr ""
"Если заголовок ``Content-Type`` не ``\"application/json\"``, будет вызвано "
"исключение :exc:`ValueError`, при попытке вызывать этот метод."

# 9a5deb17736f4d7aa3557d715bab4b03
#: ../../topics/testing/tools.txt:474
msgid "The request data that stimulated the response."
msgstr "Запрос, который был отправлен."

# 2708c58cd7604c84b386404eed312023
#: ../../topics/testing/tools.txt:478
msgid ""
"The ``WSGIRequest`` instance generated by the test handler that generated "
"the response."
msgstr "Объект ``WSGIRequest``, который был сгенерирован при отправке запроса."

# dbd7a92c827a4b72829a2d87a4332cea
#: ../../topics/testing/tools.txt:483
#, fuzzy
msgid ""
"The HTTP status of the response, as an integer. For a full list of defined "
"codes, see the `IANA status code registry`_."
msgstr ""
"HTTP статус ответа, число. Полный список возможных HTTP статусов можно найти "
"в спецификации :rfc:`2616#section-10`."

# 11395b71c394468c86b25780612753be
#: ../../topics/testing/tools.txt:490
msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""
"Список объектов ``Template``, которые использовались при формировании "
"ответа, в порядке рендеринга. Название файла шаблона можно получить через "
"атрибут ``template.name``, если шаблон был загружен с файла. (Название будет "
"строкой, например ``'admin/index.html'``.)"

#: ../../topics/testing/tools.txt:498
msgid ""
"This attribute is only populated when using the :class:`~django.template."
"backends.django.DjangoTemplates` backend. If you're using another template "
"engine, :attr:`~django.template.response.SimpleTemplateResponse."
"template_name` may be a suitable alternative if you only need the name of "
"the template used for rendering."
msgstr ""
"Этот атрибут содержит значение только при использовании :class:`~django."
"template.backends.django.DjangoTemplates`. Если вы используете другой "
"шаблонизатор, возможно вам поможет :attr:`~django.template.response."
"SimpleTemplateResponse.template_name`."

#: ../../topics/testing/tools.txt:507
#, fuzzy
msgid ""
"An instance of :class:`~django.urls.ResolverMatch` for the response. You can "
"use the :attr:`~django.urls.ResolverMatch.func` attribute, for example, to "
"verify the view that served the response::"
msgstr ""
"Экземпляр класса :class:`~django.core.urlresolvers.ResolverMatch` для "
"ответа. Вы можете использовать атрибут :attr:`~django.core.urlresolvers."
"ResolverMatch.func`, например, для проверки представления, которое выдало "
"ответ::"

#: ../../topics/testing/tools.txt:518
#, fuzzy
msgid ""
"If the given URL is not found, accessing this attribute will raise a :exc:"
"`~django.urls.Resolver404` exception."
msgstr ""
"Если указанный URL не найден, доступ к этому атрибуту вызовет исключение :"
"exc:`~django.core.urlresolvers.Resolver404`."

# 1f0e060f60444b4485595f5f2795e7ec
#: ../../topics/testing/tools.txt:521
msgid ""
"You can also use dictionary syntax on the response object to query the value "
"of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""
"Вы можете использовать синтаксис словаря, чтобы получить значение HTTP "
"заголовков. Например, можно получить тип ответа, используя "
"``response['Content-Type']``."

# 73468f8409304c398f508aa60cff44f4
#: ../../topics/testing/tools.txt:526
msgid "Exceptions"
msgstr "Исключения"

# 01e8d9482a354532b5d84e037b87afb9
#: ../../topics/testing/tools.txt:528
msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""
"Если тестовый клиент выполнит запрос к представлению, которые вызывает "
"исключение, исключение будет доступно в тесте. Вы можете использовать "
"стандартный блок ``try ... except``, или :meth:`~unittest.TestCase."
"assertRaises`, чтобы протестировать исключения."

# 78f231f940d24bcb9f63b5be8b4a9fac
#: ../../topics/testing/tools.txt:532
msgid ""
"The only exceptions that are not visible to the test client are :class:"
"`~django.http.Http404`, :class:`~django.core.exceptions.PermissionDenied`, :"
"exc:`SystemExit`, and :class:`~django.core.exceptions.SuspiciousOperation`. "
"Django catches these exceptions internally and converts them into the "
"appropriate HTTP response codes. In these cases, you can check ``response."
"status_code`` in your test."
msgstr ""
"Единственные исключения, которые не передаются в тест, :class:`~django.http."
"Http404`, :class:`~django.core.exceptions.PermissionDenied`, :exc:"
"`SystemExit`, and :class:`~django.core.exceptions.SuspiciousOperation`. "
"Django перехватывает их и конвертирует в соответствующий код ответа HTTP. В "
"таком случае вы можете проверять ``response.status_code`` в тесте."

# 6e2345e53d1641109f1b015ab0191cf4
#: ../../topics/testing/tools.txt:540
msgid "Persistent state"
msgstr "Сохранение состояния"

# ac5aa136718c4b5382b522c7e06a56d8
#: ../../topics/testing/tools.txt:542
msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent "
"``get()`` and ``post()`` requests."
msgstr ""
"Тестовый клиент сохраняет состояние между запросами. Если ответ "
"устанавливает куки, они будут сохранены в тестовом клиенте и отправлены в "
"последующих ``get()`` и ``post()`` запросах."

# bc0bc152a0ea4855a91e7f15cdfa7adf
#: ../../topics/testing/tools.txt:546
msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""
"Клиент не учитывает срок действия кук. Если необходимо удалить куку, делайте "
"это явно, или создайте новый экземпляр ``Client`` (таким образом вы удалите "
"все куки)."

# 49e7f14252b946598c954595ce9966e4
#: ../../topics/testing/tools.txt:550
msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""
"Клиент хранит состояние в двух атрибутах. Вы можете использовать их в тестах."

# 62f056bf17404459b187874e35b483b4
#: ../../topics/testing/tools.txt:555
msgid ""
"A Python :class:`~http.cookies.SimpleCookie` object, containing the current "
"values of all the client cookies. See the documentation of the :mod:`http."
"cookies` module for more."
msgstr ""
"Объект :class:`~http.cookies.SimpleCookie`, который содержит текущие куки "
"клиента. Подробности смотрите в документации модуля :mod:`http.cookies`."

# Notes:
# 66ddcacf36fb4bc9bdc430306763f563
# (Edit)
#: ../../topics/testing/tools.txt:561
msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""
"Объект с API словаря, который содержит данные сессии. Подробности смотрите "
"в :doc:`в разделе о сессии</topics/http/sessions>`."

# aa8abada9fa444da9f5d17bc71bedf2f
#: ../../topics/testing/tools.txt:564
msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""
"Используйте переменную, чтобы изменить и сохранить данные сессии (т.к. при "
"каждом обращении к атрибуту создается новый экземпляр ``SessionStore``)::"

#: ../../topics/testing/tools.txt:574
msgid "Setting the language"
msgstr ""

#: ../../topics/testing/tools.txt:576
msgid ""
"When testing applications that support internationalization and "
"localization, you might want to set the language for a test client request. "
"The method for doing so depends on whether or not the :class:`~django."
"middleware.locale.LocaleMiddleware` is enabled."
msgstr ""

#: ../../topics/testing/tools.txt:581
msgid ""
"If the middleware is enabled, the language can be set by creating a cookie "
"with a name of :setting:`LANGUAGE_COOKIE_NAME` and a value of the language "
"code::"
msgstr ""

#: ../../topics/testing/tools.txt:591
msgid "or by including the ``Accept-Language`` HTTP header in the request::"
msgstr ""

#: ../../topics/testing/tools.txt:597
msgid "More details are in :ref:`how-django-discovers-language-preference`."
msgstr ""

#: ../../topics/testing/tools.txt:599
msgid ""
"If the middleware isn't enabled, the active language may be set using :func:"
"`.translation.override`::"
msgstr ""

#: ../../topics/testing/tools.txt:609
msgid "More details are in :ref:`explicitly-setting-the-active-language`."
msgstr ""

# 3ea846b559c148d1b6b419ff4123ad24
#: ../../topics/testing/tools.txt:612
msgid "Example"
msgstr "Пример"

# a4681287b4084573b6ffd92cf8578e58
#: ../../topics/testing/tools.txt:614
msgid "The following is a simple unit test using the test client::"
msgstr "Пример простого теста с использованием тестового клиента::"

# c2f16599e1354b909c12eb0753bfcf36
#: ../../topics/testing/tools.txt:636
msgid ":class:`django.test.RequestFactory`"
msgstr ":class:`django.test.RequestFactory`"

# 3365afb986ba432a9a0a21c0f295a48a
#: ../../topics/testing/tools.txt:641
msgid "Provided test case classes"
msgstr "Базовые классы для создания тестов"

# a319cf1687e94a19b15dddcc70af774c
#: ../../topics/testing/tools.txt:643
msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""
"Обычно тесты в Python наследуются от :class:`unittest.TestCase`. Django "
"предоставляет дополнительные классы, которые предоставляют дополнительные "
"возможности:"

# 20688441a18c46c8bb07f23abf7c4160
#: ../../topics/testing/tools.txt:653
msgid "Hierarchy of Django unit testing classes"
msgstr "Иерархия классов для тестов в Django"

# 9db2f307bda94c22aaa7c0ef4c31df41
#: ../../topics/testing/tools.txt:655
#, fuzzy
msgid ""
"Converting a normal :class:`unittest.TestCase` to any of the subclasses is "
"easy: change the base class of your test from ``unittest.TestCase`` to the "
"subclass. All of the standard Python unit test functionality will be "
"available, and it will be augmented with some useful additions as described "
"in each section below."
msgstr ""
"Преобразовать :class:`unittest.TestCase` в Django :class:`TestCase` очень "
"просто: замените базовый класс теста с ``'unittest.TestCase'`` на ``'django."
"test.TestCase'``. Все стандартные возможности тестов в Python будут "
"доступны, но в дополнение к ним при запуске теста:"

# 183ecec60e924139ad8d4072aec24d3d
#: ../../topics/testing/tools.txt:662
#, fuzzy
msgid "``SimpleTestCase``"
msgstr "SimpleTestCase"

# 63343c7c414b47269517e18e951d44d1
#: ../../topics/testing/tools.txt:666
#, fuzzy
msgid "A subclass of :class:`unittest.TestCase` that adds this functionality:"
msgstr ""
"Наследуется от :class:`unittest.TestCase` предоставляет некоторые "
"дополнительные возможности:"

# ed82c3d0cc0a4e6eb0329b8e9bf18021
#: ../../topics/testing/tools.txt:668
msgid "Some useful assertions like:"
msgstr "Предоставляет возможность:"

# 00b606a05b984c6b972b16875da0f58a
#: ../../topics/testing/tools.txt:670
msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""
"Проверять, что функция :meth:`вызывает определенное исключение "
"<SimpleTestCase.assertRaisesMessage>`."

# 7379b990423740a1adee5698f3b16003
#: ../../topics/testing/tools.txt:672
msgid ""
"Testing form field :meth:`rendering and error treatment <SimpleTestCase."
"assertFieldOutput>`."
msgstr "Проверять :meth:`поля формы <SimpleTestCase.assertFieldOutput>`."

# 2082d8ce429540c9b1adab374682057e
#: ../../topics/testing/tools.txt:674
msgid ""
"Testing :meth:`HTML responses for the presence/lack of a given fragment "
"<SimpleTestCase.assertContains>`."
msgstr ""
"Проверять :meth:`HTML ответа на наличие/отсутствие фрагмента кода "
"<SimpleTestCase.assertContains>`."

# ba1d0dfa8a7f417383a22a36b775ed9f
#: ../../topics/testing/tools.txt:676
msgid ""
"Verifying that a template :meth:`has/hasn't been used to generate a given "
"response content <SimpleTestCase.assertTemplateUsed>`."
msgstr ""
"Проверять, что :meth:`при рендеринге ответа использовался определенный ответ "
"<SimpleTestCase.assertTemplateUsed>`."

# c165dca1748f49ef94d1fa0e7730fc55
#: ../../topics/testing/tools.txt:678
msgid ""
"Verifying a HTTP :meth:`redirect <SimpleTestCase.assertRedirects>` is "
"performed by the app."
msgstr ""
"Проверять, что ответ содержит HTTP :meth:`редирект на другую страницу "
"<SimpleTestCase.assertRedirects>`."

# 804f93fd009441569cb5fd6a66b125e0
#: ../../topics/testing/tools.txt:680
msgid ""
"Robustly testing two :meth:`HTML fragments <SimpleTestCase.assertHTMLEqual>` "
"for equality/inequality or :meth:`containment <SimpleTestCase.assertInHTML>`."
msgstr ""
"Сравнение :meth:`фрагментов HTML <SimpleTestCase.assertHTMLEqual>`, или :"
"meth:`вхождение одного фрагмента в другой <SimpleTestCase.assertInHTML>`."

# 391ef0d9360f4fa9a0078828dd0e8733
#: ../../topics/testing/tools.txt:682
msgid ""
"Robustly testing two :meth:`XML fragments <SimpleTestCase.assertXMLEqual>` "
"for equality/inequality."
msgstr "Сравнение :meth:`фрагментов XML <SimpleTestCase.assertXMLEqual>`."

# 95e975639172456cada44829411379f7
#: ../../topics/testing/tools.txt:684
msgid ""
"Robustly testing two :meth:`JSON fragments <SimpleTestCase.assertJSONEqual>` "
"for equality."
msgstr "Сравнение :meth:`фрагментов JSON <SimpleTestCase.assertJSONEqual>`."

# 7fbff155cb9242f99efa1f93cdbc5918
#: ../../topics/testing/tools.txt:687
msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`."
msgstr ""
"Позволяет запускать тест с :ref:`измененными настройками <overriding-"
"settings>`."

# 081be580a790494d9ebbd476dac9468c
#: ../../topics/testing/tools.txt:688
msgid "Using the :attr:`~SimpleTestCase.client` :class:`~django.test.Client`."
msgstr ""
"Содержит экземпляр :class:`~django.test.Client` в :attr:`~SimpleTestCase."
"client`."

# 5bcccc1ef8a749678bcdc72048c65f69
#: ../../topics/testing/tools.txt:690
#, fuzzy
msgid ""
"If your tests make any database queries, use subclasses :class:`~django.test."
"TransactionTestCase` or :class:`~django.test.TestCase`."
msgstr ""
"используйте :class:`~django.test.TransactionTestCase` или :class:`~django."
"test.TestCase`."

#: ../../topics/testing/tools.txt:695
msgid ""
":class:`~SimpleTestCase` disallows database queries by default. This helps "
"to avoid executing write queries which will affect other tests since each "
"``SimpleTestCase`` test isn't run in a transaction. If you aren't concerned "
"about this problem, you can disable this behavior by setting the "
"``allow_database_queries`` class attribute to ``True`` on your test class."
msgstr ""
":class:`~SimpleTestCase` по умолчанию запрещает выполнять запросы в базу "
"данных. Это позволяет предотвратить выполнение запросов, которые могут "
"повлиять на другие тесты т.к. ``SimpleTestCase`` не создает отдельную "
"транзакцию на каждый тест. Если вас не заботит эта проблема, вы можете "
"отключить такое поведение, указав в атрибуте класса "
"``allow_database_queries`` значение ``True``."

#: ../../topics/testing/tools.txt:704
msgid ""
"``SimpleTestCase`` and its subclasses (e.g. ``TestCase``, ...) rely on "
"``setUpClass()`` and ``tearDownClass()`` to perform some class-wide "
"initialization (e.g. overriding settings). If you need to override those "
"methods, don't forget to call the ``super`` implementation::"
msgstr ""
"``SimpleTestCase`` и его потомки (т.е., ``TestCase``, ...) используют методы "
"``setUpClass()`` и ``tearDownClass()`` для выполнения некоторой "
"инициализации в рамках класса (т.е., для переопределения настроек). Если вам "
"понадобится переопределить эти методы, не забудьте воспользоваться "
"оператором ``super``::"

#: ../../topics/testing/tools.txt:721
msgid ""
"Be sure to account for Python's behavior if an exception is raised during "
"``setUpClass()``. If that happens, neither the tests in the class nor "
"``tearDownClass()`` are run. In the case of :class:`django.test.TestCase`, "
"this will leak the transaction created in ``super()``  which results in "
"various symptoms including a segmentation fault on some platforms (reported "
"on OS X). If you want to intentionally raise an exception such as :exc:"
"`unittest.SkipTest` in ``setUpClass()``, be sure to do it before calling "
"``super()`` to avoid this."
msgstr ""

# b3c64f9a3c534ed2ac59fd7b7e4f04a4
#: ../../topics/testing/tools.txt:731
#, fuzzy
msgid "``TransactionTestCase``"
msgstr "TransactionTestCase"

# 1c2581043bd94c5a9f41706242bf684e
#: ../../topics/testing/tools.txt:735
#, fuzzy
msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase` "
"to add some database-specific features:"
msgstr ""
"``TransactionTestCase`` наследуется от :class:`~django.test.SimpleTestCase`."

#: ../../topics/testing/tools.txt:738
msgid ""
"Resetting the database to a known state at the beginning of each test to "
"ease testing and using the ORM."
msgstr ""

# d454228f4e98470a9619371415fa1cf4
#: ../../topics/testing/tools.txt:740
msgid "Database :attr:`~TransactionTestCase.fixtures`."
msgstr ":attr:`~TransactionTestCase.fixtures` для базы данных."

# d54afcabfe1d4bc2b4b64a92d12634a5
#: ../../topics/testing/tools.txt:741
msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""
"Тесты, которые :ref:`выполняют с учетом возможностей базы данных <skipping-"
"tests>`."

# 9620e0ebfd074c639fbadd8bb290ee7f
#: ../../topics/testing/tools.txt:742
msgid ""
"The remaining specialized :meth:`assert* <TransactionTestCase."
"assertQuerysetEqual>` methods."
msgstr ""
"Остальные методы для проверки :meth:`assert* <TransactionTestCase."
"assertQuerysetEqual>`."

# 7588707236394261ab034e8ba93e8ea0
#: ../../topics/testing/tools.txt:745
#, fuzzy
msgid ""
"Django's :class:`TestCase` class is a more commonly used subclass of "
"``TransactionTestCase`` that makes use of database transaction facilities to "
"speed up the process of resetting the database to a known state at the "
"beginning of each test. A consequence of this, however, is that some "
"database behaviors cannot be tested within a Django ``TestCase`` class. For "
"instance, you cannot test that a block of code is executing within a "
"transaction, as is required when using :meth:`~django.db.models.query."
"QuerySet.select_for_update()`. In those cases, you should use "
"``TransactionTestCase``."
msgstr ""
"Класс Django ``TestCase`` (описан ниже) использует механизм транзакций базы "
"данных для сброса состояния базы данных перед каждым тестом. Но вы не можете "
"тестировать коммит и отмену транзакций Django в классе ``TestCase``. "
"Например, вы не можете проверить, что блок кода выполняется внутри "
"транзакции, как это требуется при использовании метода :meth:`~django.db."
"models.query.QuerySet.select_for_update()`. В таких случаях, вы должны "
"использовать ``TransactionTestCase``."

# 7e5bbb57168143429ebe0060740b73ce
#: ../../topics/testing/tools.txt:755
msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""
"``TransactionTestCase`` и ``TestCase`` отличаются лишь механизмом сброса "
"базы данных перед каждым тестом и мозможностью тестировать транзакции:"

# cf1ddc46585d4ef380cfac5f54e0d5f5
#: ../../topics/testing/tools.txt:759
msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""
"``TransactionTestCase`` сбрасывает состояние базы данных после выполнения "
"тестам путем очистки всех таблиц. ``TransactionTestCase`` позволяет вызывать "
"коммит и отмену транзакций и проверять результат в базе данных."

# 1761b72af1c342d9a8beb96885f2f535
#: ../../topics/testing/tools.txt:763
msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test. This guarantees that the rollback at the end of "
"the test restores the database to its initial state."
msgstr ""
"``TestCase``, в свою очередь, не очищает все таблицы в конце теста. Вместо "
"этого, каждый тест оборачивается в транзакцию, которые откатывается по "
"завершению теста. Это гарантирует, что откат в конце теста вернёт базу "
"данных в начальное состояние."

# 4a1f0b520bed4aa4976e0fa11674b977
#: ../../topics/testing/tools.txt:770
msgid ""
"``TestCase`` running on a database that does not support rollback (e.g. "
"MySQL with the MyISAM storage engine), and all instances of "
"``TransactionTestCase``, will roll back at the end of the test by deleting "
"all data from the test database."
msgstr ""
"``TestCase``, который выполняется на базе данных, которая не поддерживает "
"транзакции (например, MySQL с MyISAM), и все ``TransactionTestCase``, после "
"завершения теста очищают таблицы."

# 582cd14ed3e2419287306b730a351a3b
#: ../../topics/testing/tools.txt:775
msgid ""
"Apps :ref:`will not see their data reloaded <test-case-serialized-"
"rollback>`; if you need this functionality (for example, third-party apps "
"should enable this) you can set ``serialized_rollback = True`` inside the "
"``TestCase`` body."
msgstr ""
"Данные приложения :ref:`не будут перезагружены <test-case-serialized-"
"rollback>`; если это необходимо (например, распространяемые приложения "
"должны использовать это) вы можете указать ``serialized_rollback = True`` "
"для класса ``TestCase``."

# 7bfeb4f2af104e6ebc0b1b24b39f8f51
#: ../../topics/testing/tools.txt:781
#, fuzzy
msgid "``TestCase``"
msgstr "TestCase"

#: ../../topics/testing/tools.txt:785
msgid ""
"This is the most common class to use for writing tests in Django. It "
"inherits from :class:`TransactionTestCase` (and by extension :class:"
"`SimpleTestCase`). If your Django application doesn't use a database, use :"
"class:`SimpleTestCase`."
msgstr ""

#: ../../topics/testing/tools.txt:789
msgid "The class:"
msgstr ""

#: ../../topics/testing/tools.txt:791
msgid ""
"Wraps the tests within two nested :func:`~django.db.transaction.atomic` "
"blocks: one for the whole class and one for each test. Therefore, if you "
"want to test some specific database transaction behavior, use :class:"
"`TransactionTestCase`."
msgstr ""

#: ../../topics/testing/tools.txt:796
msgid "Checks deferrable database constraints at the end of each test."
msgstr ""

#: ../../topics/testing/tools.txt:800
msgid ""
"The check for deferrable database constraints at the end of each test was "
"added."
msgstr ""

#: ../../topics/testing/tools.txt:803
msgid "It also provides an additional method:"
msgstr ""

#: ../../topics/testing/tools.txt:807
msgid ""
"The class-level ``atomic`` block described above allows the creation of "
"initial data at the class level, once for the whole ``TestCase``. This "
"technique allows for faster tests as compared to using ``setUp()``."
msgstr ""
"Описанный выше ``atomic`` блок уровня класса позволяет создание начальных "
"данных на уровне класса, один раз для всего ``TestCase``. Такой подход "
"пригодится для быстрых тестов, по сравнению с обычным использованием метода "
"``setUp()``."

# 4f6950099751413ba49cf456da204560
# b28e54d287f24d3a8d4b31ed4d470558
#: ../../topics/testing/tools.txt:811 ../../topics/testing/tools.txt:1119
msgid "For example::"
msgstr "Например::"

#: ../../topics/testing/tools.txt:830
msgid ""
"Note that if the tests are run on a database with no transaction support "
"(for instance, MySQL with the MyISAM engine), ``setUpTestData()`` will be "
"called before each test, negating the speed benefits."
msgstr ""
"Следует отметить, что если тесты запущены на базе данных, у которой нет "
"поддержки транзакций (например, MySQL с движком MyISAM), то метод "
"``setUpTestData()`` будет вызван перед выполнением каждого теста, ухудшая "
"показатели скорости."

#: ../../topics/testing/tools.txt:834
msgid ""
"Be careful not to modify any objects created in ``setUpTestData()`` in your "
"test methods. Modifications to in-memory objects from setup work done at the "
"class level will persist between test methods. If you do need to modify "
"them, you could reload them in the ``setUp()`` method with :meth:`~django.db."
"models.Model.refresh_from_db`, for example."
msgstr ""
"Будьте осторожны, не меняйте объекты, которые были созданы в "
"``setUpTestData()``, в тестовых метод. Изменение этих объектов, которые "
"хранятся в памяти, будет влиять на все тесты текущего класса. Если вам все "
"же необходимо их изменить, вы можете перезагрузить их в методе ``setUp()``, "
"используя, например, :meth:`~django.db.models.Model.refresh_from_db`."

# a6d80b66c43d453c8315a08d9f3aed94
#: ../../topics/testing/tools.txt:843
#, fuzzy
msgid "``LiveServerTestCase``"
msgstr "LiveServerTestCase"

# e9ccf634525a4072abdc0b5da47d5484
#: ../../topics/testing/tools.txt:847
msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""
"``LiveServerTestCase`` работает как и :class:`~django.test."
"TransactionTestCase`, но при этом в фоне запускается встроенный сервер "
"Django, который по завершению тестов выключается. Это позволяет использовать "
"клиенты для автоматического тестирования вместо :ref:`тестового клиента "
"Django <test-client>`, такие как, например, клиент `Selenium <http://"
"seleniumhq.org/>`_. С их помощью вы можете создавать функциональные тесты и "
"симулировать реальное поведение пользователей."

#: ../../topics/testing/tools.txt:855
#, fuzzy
msgid ""
"The live server listens on ``localhost`` and binds to port 0 which uses a "
"free port assigned by the operating system. The server's URL can be accessed "
"with ``self.live_server_url`` during the tests."
msgstr ""
"По умолчанию сервер слушает ``localhost``, выбирая первый свободный порт из "
"``8081-8179``. Полный URL к серверу можно получить в тестах через атрибут "
"``self.live_server_url``."

#: ../../topics/testing/tools.txt:861
msgid ""
"In older versions, Django tried a predefined port range which could be "
"customized in various ways including the ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` "
"environment variable. This is removed in favor of the simpler \"bind to port "
"0\" technique."
msgstr ""

# d92d1e081a994269a3851bce1a7dea1d
#: ../../topics/testing/tools.txt:866
msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""
"Чтобы продемонстрировать возможности ``LiveServerTestCase``, давайте напишем "
"простой тест на Selenium. Для начала установите Python пакет `selenium "
"<https://pypi.python.org/pypi/selenium>`_:"

#: ../../topics/testing/tools.txt:874
msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). For this example, we'll assume you're "
"using the :mod:`~django.contrib.staticfiles` app and want to have static "
"files served during the execution of your tests similar to what we get at "
"development time with ``DEBUG=True``, i.e. without having to collect them "
"using :djadmin:`collectstatic`. We'll use the  :class:`~django.contrib."
"staticfiles.testing.StaticLiveServerTestCase` subclass which provides that "
"functionality. Replace it with ``django.test.LiveServerTestCase`` if you "
"don't need that."
msgstr ""
"Теперь добавьте ``LiveServerTestCase``-тесты в ваше приложение (например: "
"``myapp/tests.py``). В нашем примере мы используем приложение :mod:`~django."
"contrib.staticfiles` и хотим, чтобы статические файлы были доступны во время "
"тестов, как это работает при использовании сервера для разработки с "
"настройкой ``DEBUG=True``, то есть без использования :djadmin:"
"`collectstatic`. Мы будем использовать класс  :class:`~django.contrib."
"staticfiles.testing.StaticLiveServerTestCase`, который предоставляет такую "
"возможность. Если вам не нужен такой функционал, замените его на ``django."
"test.LiveServerTestCase``."

#: ../../topics/testing/tools.txt:884
msgid "The code for this test may look as follows::"
msgstr "Пример тестов::"

# 00e2dca7440f45cf893a90bc41f9a7cb
#: ../../topics/testing/tools.txt:911
msgid "Finally, you may run the test as follows:"
msgstr "Теперь вы можете запустить тесты:"

# 99a1bd1c081d4c028b919c7788366449
#: ../../topics/testing/tools.txt:917
msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""
"Этот тест автоматически откроет Firefox, затем страницу авторизации, вводит "
"логин и пароль и нажимает кнопку \"Log in\". Selenium поддерживает и другие "
"драйверы, если у вас не установлен Firefox, или вы хотите использовать "
"другие браузеры. Пример выше показывает лишь малую часть возможностей "
"Selenium; подробности смотрите в `документации <http://selenium-python."
"readthedocs.org/en/latest/api.html>`_."

# e0478b7094814b7c9df523b11d8eb649
#: ../../topics/testing/tools.txt:930
msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the ``<body>`` HTML tag is found in the "
"response (requires Selenium > 2.13)::"
msgstr ""
"При использовании размещённой в оперативной памяти SQLite для выполнения "
"тестов, подключение к базе данных будет использоваться параллельно двумя "
"потоками: в одном потоке работает тестовый сервер, во втором выполняются "
"тесты. Важно, чтобы запросы в разных потоках не выполнялись одновременно, т."
"к. это может привести к неожиданному поведению тестов. Поэтому вам "
"необходимо убедиться, что разные потоки не обращаются к базе данных "
"одновременно. Для этого в некоторых ситуациях (например, после нажатия на "
"ссылку или отправки формы), вам необходимо дождаться пока Selenium получит "
"ответ от сервера, и загрузится новая страница, затем продолжить выполнение "
"тестов. Вы можете сделать это указав Selenium ждать пока не будет найден тег "
"``<body>`` в ответе (требуется Selenium > 2.13)::"

# b1b0dc0ffb104b0083356f77ef6fe43a
#: ../../topics/testing/tools.txt:952
msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern Web apps that generate HTML dynamically after the "
"server generates the initial document. So, simply checking for the presence "
"of ``<body>`` in the response might not necessarily be appropriate for all "
"use cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ "
"for more information."
msgstr ""
"Проблема в том, что на самом деле нет определенного момента \"загрузки "
"страницы\", особенно в современных Web приложениях, которые генерируют HTML "
"динамически после загрузки основы страницы с сервера. Поэтому ожидание тега "
"``<body>`` не подходит для всех случаев. Дополнительную информацию ищите в "
"`Selenium FAQ <http://code.google.com/p/selenium/wiki/"
"FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/"
"_Does_not_block_on_page_loa>`_ и `документации Selenium <http://seleniumhq."
"org/docs/04_webdriver_advanced.html#explicit-waits>`_."

# 35e68ca1d3204563b1121291246c363a
#: ../../topics/testing/tools.txt:963
msgid "Test cases features"
msgstr "Возможности приложения для тестирования"

# ed6891acfbab43de87ff5ebbdfc04ff2
#: ../../topics/testing/tools.txt:966
msgid "Default test client"
msgstr "Тестовый клиент по умолчанию"

# 974c2bbb18c049f2a00435cb6b79c121
#: ../../topics/testing/tools.txt:970
msgid ""
"Every test case in a ``django.test.*TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""
"Каждый тест экземпляра ``django.test.*TestCase`` может использовать "
"экземпляр тестового клиента Django, обратившись к атрибуту ``self.client``. "
"Этот клиент пересоздается для каждого теста, поэтому вам не нужно "
"беспокоится о состоянии (например о куках) между тестами."

# 6849f34bbb334921911d2b303e454619
#: ../../topics/testing/tools.txt:975
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr "Поэтому вместо создания экземпляра ``Client`` в каждом тесте::"

# 4acaa44656044a4aad12fc3c2deacc15
#: ../../topics/testing/tools.txt:991
msgid "...you can just refer to ``self.client``, like so::"
msgstr "...вы можете просто обращаться к ``self.client``::"

# c3ee722d80334914b0be54a10f0490e6
#: ../../topics/testing/tools.txt:1005
msgid "Customizing the test client"
msgstr "Переопределение тестового клиента"

# 47099470903a4e0d8c8badb40040e781
#: ../../topics/testing/tools.txt:1009
msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~SimpleTestCase.client_class` "
"class attribute::"
msgstr ""
"Если вы хотите использовать переопределенный класс ``Client``, укажите его в "
"атрибуте :attr:`~SimpleTestCase.client_class`::"

# 2737ab59aee5427db574a2fb88dfd2c6
#: ../../topics/testing/tools.txt:1029
msgid "Fixture loading"
msgstr "Загрузка фикстур"

# 1606c6203a484c8f95f0e0b786cf689a
#: ../../topics/testing/tools.txt:1033
#, fuzzy
msgid ""
"A test case for a database-backed website isn't much use if there isn't any "
"data in the database. Tests are more readable and it's more maintainable to "
"create objects using the ORM, for example in :meth:`TestCase.setUpTestData`, "
"however, you can also use fixtures."
msgstr ""
"Тестирование сайта, который использует базу данных, не очень эффективно, "
"если в базе нет данных. Для добавления данных в базу данных "
"``TransactionTestCase`` предоставляет возможность загружать **фикстуры**."

# 44ec1f10dde94faab1703353abc4608d
#: ../../topics/testing/tools.txt:1038
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""
"Фикстуры - это набор данных, которые Django умеет импортировать в базу "
"данных. Например, если ваш сайт использует модель пользователя, вы можете "
"создать фикстуру с данными пользователей и загружать её перед запуском "
"тестов."

# 9e68ac7648f148ce86127b56543b8541
#: ../../topics/testing/tools.txt:1042
msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""
"Самый простой способ создать фикстуры, использовать команду :djadmin:`manage."
"py dumpdata <dumpdata>`. Необходимые данные должны быть в вашей базе данных. "
"Подробности смотрите в описании команды :djadmin:`dumpdata<dumpdata>`."

# c0538cceb8a14c5399e6043837183a11
#: ../../topics/testing/tools.txt:1047
msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""
"После создания фикстур, добавьте их в каталог ``fixtures`` одного из ваших "
"приложений из :setting:`INSTALLED_APPS`. Теперь вы можете использовать их в "
"тестах, указав в атрибуте ``fixtures`` класса-наследника :class:`django.test."
"TestCase`::"

# 44274328ca3e41efba15bcfce417b6df
#: ../../topics/testing/tools.txt:1066
msgid "Here's specifically what will happen:"
msgstr "Что произойдет:"

# ce7065708c1042b8aeb6f2a04674e4b2
#: ../../topics/testing/tools.txt:1068
#, fuzzy
msgid ""
"At the start of each test, before ``setUp()`` is run, Django will flush the "
"database, returning the database to the state it was in directly after :"
"djadmin:`migrate` was called."
msgstr ""
"Перед выполнение теста и перед методом ``setUp()``, Django очитсти базу "
"данных и вернет её до состояния после выполнения команды :djadmin:`migrate`."

# e3176e247f114df58044cd085ff7a90e
#: ../../topics/testing/tools.txt:1072
msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""
"Затем загружаются фикстуры. В примере выше Django загрузит JSON фикстуру с "
"названием ``mammals``, затем фикстуру ``birds``. Подробности смотрите в "
"описании :djadmin:`loaddata`."

# bcfa528394ed46709618389e345a5a1b
#: ../../topics/testing/tools.txt:1077
#, fuzzy
msgid ""
"For performance reasons, :class:`TestCase` loads fixtures once for the "
"entire test class, before :meth:`~TestCase.setUpTestData`, instead of before "
"each test, and it uses transactions to clean the database before each test. "
"In any case, you can be certain that the outcome of a test will not be "
"affected by another test or by the order of test execution."
msgstr ""
"Перезагрузка фикстур выполняет перед каждым тестом, вы можете не "
"беспокоится, что один тест повлияет на выполнение другого."

# 31c9d95c75ce4125a98884ffe24ce490
#: ../../topics/testing/tools.txt:1083
msgid ""
"By default, fixtures are only loaded into the ``default`` database. If you "
"are using multiple databases and set :attr:`multi_db=True "
"<TransactionTestCase.multi_db>`, fixtures will be loaded into all databases."
msgstr ""
"По умолчанию фикстуры загружаются в базу данных ``default``. Если вы "
"используете несколько баз данных и указали атрибут :attr:`multi_db=True "
"<TransactionTestCase.multi_db>`, фикстуры будут загружены в несколько баз "
"данных."

# f954bca468de486aa4a07b057dc9db22
#: ../../topics/testing/tools.txt:1088
msgid "URLconf configuration"
msgstr "Конфигурация URLconf"

# 2c1307b7df22477ab8efb0ccbaf3e001
#: ../../topics/testing/tools.txt:1090
#, fuzzy
msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL. Decorate your test class or test method with "
"``@override_settings(ROOT_URLCONF=...)`` for URLconf configuration."
msgstr ""
"Если выше приложение содержит представления, вам понадобятся тесты, которые "
"вызывают их, используя тестовый клиент. Однако, пользователь приложения "
"может добавить представления на любой URL. Это означает, что тесты не могут "
"полагаться на то, что представление доступно по определенному URL-у."

# face625abcd04f0292feadbcd0c76e22
#: ../../topics/testing/tools.txt:1100
msgid "Multi-database support"
msgstr "Поддержка нескольких баз данных"

# 88788a755a16453e902421b1bc6b2f9f
#: ../../topics/testing/tools.txt:1104
msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings file. "
"However, a big part of the time taken to run a Django TestCase is consumed "
"by the call to ``flush`` that ensures that you have a clean database at the "
"start of each test run. If you have multiple databases, multiple flushes are "
"required (one for each database), which can be a time consuming activity -- "
"especially if your tests don't need to test multi-database activity."
msgstr ""
"Django создает тестовую базу для каждой указанной базы данных из настройки :"
"setting:`DATABASES`. Однако, большую часть времени выполнения тестов "
"занимает операция очистки базы данных(``flush``) перед каждым тестом. Если "
"вы используете несколько баз данных, требуется несколько операций ``flush`` "
"(одна на каждую базу денных). Это может заниматься достаточно много времени."

# d4aef4247c564c03a473215af1060c0e
#: ../../topics/testing/tools.txt:1113
msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``multi_db`` attribute on the test suite to request a full flush."
msgstr ""
"Для оптимизации Django очищает только базу данных ``default`` перед каждым "
"тестом. Если ваш проект использует несколько баз данных, и в перед тестом "
"необходимо очищать все базы данных, вы можете указать атрибут ``multi_db`` "
"для класса тестов."

# 15bc477fc2df4bf29fba5126c08fea04
#: ../../topics/testing/tools.txt:1127
msgid ""
"This test case will flush *all* the test databases before running "
"``test_index_page_view``."
msgstr ""
"Для этого тестов будут очищены *все* базы данных перед выполнением "
"``test_index_page_view``."

# 8dfd60af8dac46ea963711454f11acf3
#: ../../topics/testing/tools.txt:1130
#, fuzzy
msgid ""
"The ``multi_db`` flag also affects into which databases the :attr:"
"`TransactionTestCase.fixtures` are loaded. By default (when "
"``multi_db=False``), fixtures are only loaded into the ``default`` database. "
"If ``multi_db=True``, fixtures are loaded into all databases."
msgstr ""
"Флаг ``multi_db`` также определяет в какую базу данных будет загружены "
"фикстуры из :attr:`TransactionTestCase.fixtures`. По умолчанию (при "
"``multi_db=False``) фикстуры загружаются только в базу данных ``default``. "
"При ``multi_db=True`` фикстуры загружаются во все базы данных."

# 1bee2288a1d14ddfaf4f7687422807c6
#: ../../topics/testing/tools.txt:1138
msgid "Overriding settings"
msgstr "Переопределение настроек"

#: ../../topics/testing/tools.txt:1142
msgid ""
"Use the functions below to temporarily alter the value of settings in tests. "
"Don't manipulate ``django.conf.settings`` directly as Django won't restore "
"the original values after such manipulations."
msgstr ""
"Используйте приведённые ниже функции для временного изменения значения "
"параметров конфигурации в тестах. Не изменяйте ``django.conf.settings`` "
"напрямую, так как Django не восстановит оригинальные значения после таких "
"манипуляций."

# b1e0c3d70fce4d36ad306fa169bb1810
#: ../../topics/testing/tools.txt:1148
msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) "
"called :meth:`~django.test.SimpleTestCase.settings`, which can be used like "
"this::"
msgstr ""
"При тестировании часто необходимо временно переопределить настройки и "
"вернуть начальные значение после завершения тестов. Для таких случаев Django "
"предоставляет стандартный контекстный менеджер Python (смотрите :pep:`343`), "
"который называется :meth:`~django.test.SimpleTestCase.settings`. Его можно "
"использовать следующим образом::"

# 43402ee83c764fa9ab755ce46861ec10
#: ../../topics/testing/tools.txt:1168
msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""
"В этом примере мы переопределили :setting:`LOGIN_URL` для блока ``with``, "
"после выхода из блока настройка будет сброшена."

# fa10c41b9fb04d5f82ef18dfb50495af
#: ../../topics/testing/tools.txt:1173
msgid ""
"It can prove unwieldy to redefine settings that contain a list of values. In "
"practice, adding or removing values is often sufficient. The :meth:`~django."
"test.SimpleTestCase.modify_settings` context manager makes it easy::"
msgstr ""
"Помогает при переопределении настроек, которые содержат список. Если вам "
"необходимо добавить или удалить значение из списка, используйте контекстный "
"менеджер :meth:`~django.test.SimpleTestCase.modify_settings`::"

# ad4ae7d27a804c08b61fc5c0ac36bc02
#: ../../topics/testing/tools.txt:1195
msgid ""
"For each action, you can supply either a list of values or a string. When "
"the value already exists in the list, ``append`` and ``prepend`` have no "
"effect; neither does ``remove`` when the value doesn't exist."
msgstr ""
"Для каждого действия вы можете указать список значений или строку. Если "
"значение уже в списке, ``append`` и ``prepend`` не имеют никакого эффекта; "
"аналогично ``remove`` ничего не сделает, если значение отсутствует в списке."

# 42fe9daf426b41b8a0f65445af3266a1
#: ../../topics/testing/tools.txt:1201
msgid ""
"In case you want to override a setting for a test method, Django provides "
"the :func:`~django.test.override_settings` decorator (see :pep:`318`). It's "
"used like this::"
msgstr ""
"Если вы хотите переопределить настройки для тестового метода, Django "
"предоставляет декоратор :func:`~django.test.override_settings` (смотрите :"
"pep:`318`). Вы можете использовать его следующим образом::"

# 934d041e97364f2c965c8b2dd5cd17e1
#: ../../topics/testing/tools.txt:1214
msgid ""
"The decorator can also be applied to :class:`~django.test.TestCase` classes::"
msgstr "Декоратор можно применять и к классам :class:`~django.test.TestCase`::"

# 3942b9a3daaf4b8ba6a264a5b5b9c768
#: ../../topics/testing/tools.txt:1227
msgid ""
"Likewise, Django provides the :func:`~django.test.modify_settings` "
"decorator::"
msgstr "Также Django содержит декоратор :func:`~django.test.modify_settings`::"

# 88f195cda27747fca72cc2b853d9dc03
#: ../../topics/testing/tools.txt:1242
msgid "The decorator can also be applied to test case classes::"
msgstr "Его можно применять к классам с тестами::"

# 6f9dcafde20b49bc952cdc3db76bbba4
#: ../../topics/testing/tools.txt:1258
msgid ""
"When given a class, these decorators modify the class directly and return "
"it; they don't create and return a modified copy of it. So if you try to "
"tweak the above examples to assign the return value to a different name than "
"``LoginTestCase`` or ``MiddlewareTestCase``, you may be surprised to find "
"that the original test case classes are still equally affected by the "
"decorator. For a given class, :func:`~django.test.modify_settings` is always "
"applied after :func:`~django.test.override_settings`."
msgstr ""
"Эти декораторы непосредственно изменяют класс, они не создают и возвращают "
"копию. Если вы попытаетесь назначить возвращаемый результат переменным с "
"названиями отличными от ``LoginTestCase`` илиr ``MiddlewareTestCase``, вы "
"обнаружите, что оригинальные классы были все равно изменены декораторами. "
"Декоратор :func:`~django.test.modify_settings` всегда применяет после :func:"
"`~django.test.override_settings`, если их добавить к одному классу."

# 7e3c8098258c44628c573621c6937f87
#: ../../topics/testing/tools.txt:1268
msgid ""
"The settings file contains some settings that are only consulted during "
"initialization of Django internals. If you change them with "
"``override_settings``, the setting is changed if you access it via the "
"``django.conf.settings`` module, however, Django's internals access it "
"differently. Effectively, using :func:`~django.test.override_settings` or :"
"func:`~django.test.modify_settings` with these settings is probably not "
"going to do what you expect it to do."
msgstr ""
"Файл настроек содержит некоторые настройки, которые используются только при "
"инициализации Django. Если вы измените их с помощью ``override_settings``, "
"настройка измениться, если получить значение из модуля ``django.conf."
"settings``, однако Django может обращаться к ней по другому. Поэтому :func:"
"`~django.test.override_settings` или :func:`~django.test.modify_settings` "
"могут работать не так, как вы ожидаете ."

# a34df2c3fbca4dad862db9b63fb338e3
#: ../../topics/testing/tools.txt:1276
msgid ""
"We do not recommend altering the :setting:`DATABASES` setting. Altering the :"
"setting:`CACHES` setting is possible, but a bit tricky if you are using "
"internals that make using of caching, like :mod:`django.contrib.sessions`. "
"For example, you will have to reinitialize the session backend in a test "
"that uses cached sessions and overrides :setting:`CACHES`."
msgstr ""
"Мы не советуем изменять настройку :setting:`DATABASES`. Менять :setting:"
"`CACHES` можно, но требует дополнительных действий, если кеш используется "
"другими механизмами Django, например :mod:`django.contrib.sessions`. В таком "
"случае вам понадобиться заново инициализировать сессию в тесте после "
"изменения :setting:`CACHES`."

# b6a5231c203841c287a4e8334ea7ecdd
#: ../../topics/testing/tools.txt:1283
msgid ""
"Finally, avoid aliasing your settings as module-level constants as "
"``override_settings()`` won't work on such values since they are only "
"evaluated the first time the module is imported."
msgstr ""
"Также не указывайте ваши настройки в константах модуля, "
"``override_settings()`` не будет работать с такими настройками т.к. они "
"выполняются только при первом импорте модуля. (FIXME: whut?)"

# 95f8396ee9164fbab153e205fa703487
#: ../../topics/testing/tools.txt:1287
msgid ""
"You can also simulate the absence of a setting by deleting it after settings "
"have been overridden, like this::"
msgstr ""
"Вы также можете протестировать отсутствие настройки, удалив ее после "
"использования декоратора::"

# 5b9cf7c988bb4a5ea710ad508a9e9abc
#: ../../topics/testing/tools.txt:1295
msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""
"При переопределении настроек учитывайте ситуации, когда выше приложение "
"использует кеш или другие механизмы, которые сохраняют свое состояние после "
"изменения настроек. Django предоставляет сигнал :data:`django.test.signals."
"setting_changed`, который позволяет сбросить состояние, или выполнить другие "
"действия, при изменении настроек."

# e0cb5bd8eb28419b8ca826c5292efd89
#: ../../topics/testing/tools.txt:1301
msgid "Django itself uses this signal to reset various data:"
msgstr "Django использует этот сигнал для сброса различных данных:"

# 83dae620a6754399b9ef7dbdf14c198a
#: ../../topics/testing/tools.txt:1304
msgid "Overridden settings"
msgstr "Переопределенные настройки"

# 54a545b870734748ad8f721fab2f7b98
#: ../../topics/testing/tools.txt:1304
msgid "Data reset"
msgstr "Данные, который сбрасываются"

# e3a05edd16da415fbd7d42b5b2a73eff
#: ../../topics/testing/tools.txt:1306
msgid "USE_TZ, TIME_ZONE"
msgstr "USE_TZ, TIME_ZONE"

# 2d97af6156d148df8e00d26d648a1e88
#: ../../topics/testing/tools.txt:1306
msgid "Databases timezone"
msgstr "Часовой пояс баз данных"

# 2bfbbf4557cb44499754128d112aef1b
#: ../../topics/testing/tools.txt:1307
msgid "TEMPLATES"
msgstr "TEMPLATES"

#: ../../topics/testing/tools.txt:1307
msgid "Template engines"
msgstr "Шаблонные движки"

# 2e728b9bf2b645339bc539d941837fcc
#: ../../topics/testing/tools.txt:1308
msgid "SERIALIZATION_MODULES"
msgstr "SERIALIZATION_MODULES"

# 66f1584db15a480f8d236083dc55c740
#: ../../topics/testing/tools.txt:1308
msgid "Serializers cache"
msgstr "Кеш сериализаторов"

# 041b011366d34599a84b02c0f6a2ca19
#: ../../topics/testing/tools.txt:1309
msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr "LOCALE_PATHS, LANGUAGE_CODE"

# c2f4c343c8a74ce5a1b9956f21bd3780
#: ../../topics/testing/tools.txt:1309
msgid "Default translation and loaded translations"
msgstr "Перевод по умолчанию и загруженные переводы"

# 00c0f48386fb4b40a8748fb5c3848f76
#: ../../topics/testing/tools.txt:1310
msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr "MEDIA_ROOT, DEFAULT_FILE_STORAGE"

# 296cb1d43f5d4fdab92b53c9a6e68cc3
#: ../../topics/testing/tools.txt:1310
msgid "Default file storage"
msgstr "Хранилище файлов по умолчанию"

# f42381dd262948a7bd0dd03a44db59b0
#: ../../topics/testing/tools.txt:1314
msgid "Emptying the test outbox"
msgstr "Очистка тестовых электронных писем"

# 28245f579a9847e4a90773da9385e3a7
#: ../../topics/testing/tools.txt:1316
msgid ""
"If you use any of Django's custom ``TestCase`` classes, the test runner will "
"clear the contents of the test email outbox at the start of each test case."
msgstr ""
"Если вы используйте класс ``TestCase`` Django, содержимое отправленных "
"тестовых электронных писем будет очищено перед каждым тестом."

# 622f77011e8c4632b24f341ded34a225
#: ../../topics/testing/tools.txt:1319
msgid ""
"For more detail on email services during tests, see `Email services`_ below."
msgstr ""
"Подробности смотрите ниже в разделе об :ref:`отправке писем <topics-testing-"
"email>`."

# 824ec55ba58740518b4ae47d92dec941
#: ../../topics/testing/tools.txt:1324
msgid "Assertions"
msgstr "Проверки"

# cd7ccad39cba451bbe64ea99a5e507b4
#: ../../topics/testing/tools.txt:1326
msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing Web "
"applications:"
msgstr ""
"Кроме стандартных методов для проверки, которые предоставляет стандартный "
"класс :class:`unittest.TestCase`, например :meth:`~unittest.TestCase."
"assertTrue` и :meth:`~unittest.TestCase.assertEqual`, :class:`TestCase` "
"Django предоставляет дополнительные методы для проверки, которые могут быть "
"полезны при тестировании Web приложений:"

# f6d7997797d14b559b4f995465ca5dde
#: ../../topics/testing/tools.txt:1332
#, fuzzy
msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of a "
"failure in your test suite."
msgstr ""
"Сообщения об ошибки можно переопределить аргументом ``msg_prefix`` для "
"большинства методов проверки. Указанная строка будет добавлена к каждому "
"сообщению об ошибке. Это позволяет указать вам дополнительную информацию, "
"которая поможет определить какой тест не прошел и причину ошибки."

# ef002c0bad7b44808a27eeebcb8fed07
#: ../../topics/testing/tools.txt:1341
#, fuzzy
msgid ""
"Asserts that execution of ``callable`` raises ``expected_exception`` and "
"that ``expected_message`` is found in the exception's message. Any other "
"outcome is reported as a failure. It's a simpler version of :meth:`unittest."
"TestCase.assertRaisesRegex` with the difference that ``expected_message`` "
"isn't treated as a regular expression."
msgstr ""
"Проверяет, что при выполнении функции ``callable`` вызывается исключение "
"``expected_exception`` с сообщением ``expected_message``. Похож на :meth:"
"`~unittest.TestCase.assertRaisesRegex`, но ``expected_message`` не "
"регулярное выражение."

#: ../../topics/testing/tools.txt:1347
msgid ""
"If only the ``expected_exception`` and ``expected_message`` parameters are "
"given, returns a context manager so that the code being tested can be "
"written inline rather than as a function::"
msgstr ""
"Если передать только ``expected_exception`` и ``expected_message``, вернет "
"контекстный менеджер, что позволит писать проверяемый код без добавления в "
"функцию::"

#: ../../topics/testing/tools.txt:1356
msgid ""
"Passing ``callable`` as a keyword argument called ``callable_obj`` is "
"deprecated. Pass the callable as a positional argument instead."
msgstr ""
"Передача ``callable`` именованным аргументом ``callable_obj`` считается "
"устаревшей. Теперь следует передавать как позиционный аргумент."

# 454a88834294445aa9bce99fbb2e0203
#: ../../topics/testing/tools.txt:1361
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr "Проверяет поведение поля формы с разными значениями."

# 2752969860e04aa6b3a243515a706cac
#: ../../topics/testing/tools.txt:1363
msgid "the class of the field to be tested."
msgstr "класс поля, который тестируется."

# e62dd02ea2e949fda87e70dca692cfd8
#: ../../topics/testing/tools.txt:1364
msgid "a dictionary mapping valid inputs to their expected cleaned values."
msgstr ""
"словарь, который указывает передаваемые значение и ожидаемые после проверки."

# 223d9bb4477741a288a59288870ce76e
#: ../../topics/testing/tools.txt:1366
msgid ""
"a dictionary mapping invalid inputs to one or more raised error messages."
msgstr ""
"словарь, который указывает неправильные входные значения и ожидаемые ошибки "
"валидации."

# 9283b5fff6514e619a5b9efaeb76179d
#: ../../topics/testing/tools.txt:1368
msgid "the args passed to instantiate the field."
msgstr "позиционные аргументы, которые передаются при создании поля."

# 8536875e7b13414b95ccd4b6a352d679
#: ../../topics/testing/tools.txt:1369
msgid "the kwargs passed to instantiate the field."
msgstr "именованные аргументы, которые передаются при создании поля."

# 8360f271cb834b3387041cf695bc9574
#: ../../topics/testing/tools.txt:1370
msgid "the expected clean output for inputs in ``empty_values``."
msgstr ""
"ожидаемое значение после проверки для входящих пустых значений из "
"``empty_values``."

# e1922b72c60a4c5db948e8e649d9a5d4
#: ../../topics/testing/tools.txt:1372
msgid ""
"For example, the following code tests that an ``EmailField`` accepts ``a@a."
"com`` as a valid email address, but rejects ``aaa`` with a reasonable error "
"message::"
msgstr ""
"Например, следующий код проверяет, что поле ``EmailField`` принимает ``a@a."
"com`` как правильное значение, но возвращает ошибки, если передать ``aaa``::"

# c8d0431bf09a41de9366389f28e2a275
#: ../../topics/testing/tools.txt:1380
msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr "Проверяет, что поле формы из ответа содержит указанный список ошибок."

# e0069114fd934542a780188a6020a4ce
#: ../../topics/testing/tools.txt:1383
msgid ""
"``form`` is the name the ``Form`` instance was given in the template context."
msgstr "``form`` -- название экземпляра ``Form`` в контексте шаблона ответа."

# 54e54655045a45c380ec6468071bcc0d
# e9baacf457da4a81a58f516850ecf58d
#: ../../topics/testing/tools.txt:1386 ../../topics/testing/tools.txt:1406
msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via :meth:`form."
"non_field_errors() <django.forms.Form.non_field_errors>`) will be checked."
msgstr ""
"``field`` -- название поля формы. Если ``field`` содержит ``None``, будут "
"проверятся ошибки не привязанные к конкретному полю (которые можно получить "
"с помощью метода :meth:`form.non_field_errors() <django.forms.Form."
"non_field_errors>`)."

# cc781324122d44b08cd5c2e3eef3d5a6
# 4526ee37ab6241c2871f1585a5116d7a
#: ../../topics/testing/tools.txt:1391 ../../topics/testing/tools.txt:1411
msgid ""
"``errors`` is an error string, or a list of error strings, that are expected "
"as a result of form validation."
msgstr ""
"``errors`` -- строка с ошибкой, или список ошибок, которые были получены при "
"валидации формы."

# 68463246496d4103ad1d32000e4f17a0
#: ../../topics/testing/tools.txt:1396
msgid ""
"Asserts that the ``formset`` raises the provided list of errors when "
"rendered."
msgstr "Проверяет, что ``formset`` из ответа содержит указанный список ошибок."

# 71982c628bba4ccfb27a1cb0feb3d30a
#: ../../topics/testing/tools.txt:1399
msgid ""
"``formset`` is the name the ``Formset`` instance was given in the template "
"context."
msgstr ""
"``formset`` -- название экземпляра ``Formset`` в контексте шаблона ответа."

# 307305fe3b0a40868108d03f088f0a0c
#: ../../topics/testing/tools.txt:1402
msgid ""
"``form_index`` is the number of the form within the ``Formset``.  If "
"``form_index`` has a value of ``None``, non-form errors (errors you can "
"access via ``formset.non_form_errors()``) will be checked."
msgstr ""
"``form_index`` -- номер формы в ``Formset``. Если ``form_index`` содержит "
"``None``, будут проверятся ошибки не привязанные к конкретной форме (которые "
"можно получить с помощью метода ``formset.non_form_errors()``)."

# 5083d083571f41ecb230168e295e3070
#: ../../topics/testing/tools.txt:1416
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""
"Проверяет, что объект ``Response`` с указанным ``status_code`` и содержит "
"``text``. Если указан ``count``, ``text`` должен встречаться ``count`` раз в "
"ответе."

# f4ae27898746453bae4f356402fd8a51
# 70497c3b00da4c608b2f557e96e28893
#: ../../topics/testing/tools.txt:1420 ../../topics/testing/tools.txt:1431
msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""
"Укажите ``True`` в ``html``, чтобы ``text`` обрабатывался как HTML. "
"Сравнение содержимого будет основано на семантике HTML, а не посимвольном "
"сравнении. Пробелы будут проигнорированы в большинстве случаев, порядок "
"атрибутов не учитывается. Подробности с мотрите в описании :meth:"
"`~SimpleTestCase.assertHTMLEqual`."

# 3b6cf42167b34582afba162f7ce7f86c
#: ../../topics/testing/tools.txt:1428
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does *not* appear in the content of the response."
msgstr ""
"Проверяет, что объект ``Response`` с указанным ``status_code`` и *не* "
"содержит ``text``."

# 9ad9ff20821849ddbe143bcd4e726d51
#: ../../topics/testing/tools.txt:1439
msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr "Проверяет, что указанный шаблон использовался при рендеринге ответа."

# ffbed7d2404b4f57a35a7ebcebf3d906
#: ../../topics/testing/tools.txt:1442
msgid "The name is a string such as ``'admin/index.html'``."
msgstr "Название -- строка, например ``'admin/index.html'``."

#: ../../topics/testing/tools.txt:1444
msgid ""
"The count argument is an integer indicating the number of times the template "
"should be rendered. Default is ``None``, meaning that the template should be "
"rendered one or more times."
msgstr ""
"Количество аргументов - это целое, показывающее количество раз, которое "
"будет обработан шаблон. По умолчанию это ``None``, означающее, что шаблон "
"должен быть обработан один или борее раз. "

# e3a3a1d047f14a30b1c944898cee5bc6
#: ../../topics/testing/tools.txt:1448
msgid "You can use this as a context manager, like this::"
msgstr "Можно использовать как менеджер контекста::"

# cdeed1d2caef49ee97dbe9dfe62cdec1
#: ../../topics/testing/tools.txt:1457
msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""
"Проверяет, что указанный шаблон *не* использовался при рендеринге ответа."

# ef487085fdd94d2784203db40b792765
#: ../../topics/testing/tools.txt:1460
msgid ""
"You can use this as a context manager in the same way as :meth:"
"`~SimpleTestCase.assertTemplateUsed`."
msgstr ""
"Можно использовать как менеджер контекста, как и :meth:`~SimpleTestCase."
"assertTemplateUsed`."

# 3b6e1b099e854215ae251947481b1345
#: ../../topics/testing/tools.txt:1465
msgid ""
"Asserts that the response returned a ``status_code`` redirect status, "
"redirected to ``expected_url`` (including any ``GET`` data), and that the "
"final page was received with ``target_status_code``."
msgstr ""
"Проверяет, что ``status_code`` ответа указывает на редирект на "
"``expected_url`` (включая ``GET`` параметры), и финальная страница "
"загружается со статусом ``target_status_code``."

# 53f65db73fa5412e8f50226f5b4b9707
#: ../../topics/testing/tools.txt:1469
msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""
"Если запрос использует аргумент ``follow``, ``expected_url`` и "
"``target_status_code`` будут указывать на последний запрос."

# dd3f77093de6400f8c645cd4a84532d9
#: ../../topics/testing/tools.txt:1473
#, fuzzy
msgid ""
"If ``fetch_redirect_response`` is ``False``, the final page won't be loaded. "
"Since the test client can't fetch external URLs, this is particularly useful "
"if ``expected_url`` isn't part of your Django app."
msgstr ""
"Если ``fetch_redirect_response`` равен ``False``, последняя страница не "
"будет загружена. Т.к. тестовый клиент не загружает внешние URL-ы, этот "
"аргумент полезен, если ``expected_url`` указывает на внешний URL."

# 47da7a5ad42740b3b8f3408dbaccfeeb
#: ../../topics/testing/tools.txt:1477
msgid ""
"Scheme is handled correctly when making comparisons between two URLs. If "
"there isn't any scheme specified in the location where we are redirected to, "
"the original request's scheme is used. If present, the scheme in "
"``expected_url`` is the one used to make the comparisons to."
msgstr ""
"Протокол правильно обрабатывается при сравнении URL-ов. Если протокол не "
"указан при редиректе, будет использоваться протокол изначального запроса."

#: ../../topics/testing/tools.txt:1484
msgid ""
"The ``host`` argument is deprecated, as redirections are no longer forced to "
"be absolute URLs."
msgstr ""
"Аргумент ``host`` устарел. Перенаправления теперь не обязательно указывать с "
"абсолютным URL."

# 602882a8569f48ad878f18e20c692878
#: ../../topics/testing/tools.txt:1489
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""
"Сравнивает строки ``html1`` и ``html2``. Сравнение основано на семантике "
"HTML. При сравнении используются следующие правила:"

# f3c0be10e3e74a7da1d2b1e7ecc9eda1
#: ../../topics/testing/tools.txt:1493
msgid "Whitespace before and after HTML tags is ignored."
msgstr "Пробелы перед и после HTML тегов игнорируются."

# 63755a92765f4995bc6f7e2209a9c3bc
#: ../../topics/testing/tools.txt:1494
msgid "All types of whitespace are considered equivalent."
msgstr "Все типы пробелов считаются одинаковыми."

# 6bbc6db36f53470eb109e9d2ddba572c
#: ../../topics/testing/tools.txt:1495
msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""
"Все незакрытые теги закрываются, например, при закрытии внешнего тега, или в "
"конце HTML документа."

# b006f6c2b57546e5ba310bc7a370334a
#: ../../topics/testing/tools.txt:1497
msgid "Empty tags are equivalent to their self-closing version."
msgstr "Пустые теги равны самозакрывающиемся аналогичным тегам."

# c7fe1df4fdff425db8666897a279eafc
#: ../../topics/testing/tools.txt:1498
msgid "The ordering of attributes of an HTML element is not significant."
msgstr "Порядок атрибутов HTML тегов не учитывается."

# 22a21e23deea4df5bef5997fc2069418
#: ../../topics/testing/tools.txt:1499
msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""
"Атрибуты без значений равны атрибутам, значение которых равно названию "
"атрибута (смотрите примеры)."

# 9e8985285e0a4ab3b93a4683a4c65e59
#: ../../topics/testing/tools.txt:1502
msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr "Следующие тесты не вызывают ``AssertionError``::"

# 59e1c558344a41d987cdd326eb5d8c72
# 6405dec68d3b4afbbe6c7d79de84c2b5
#: ../../topics/testing/tools.txt:1516 ../../topics/testing/tools.txt:1527
msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""
"``html1`` и ``html2`` должны содержать правильный HTML. Если один из них не "
"будет отпарсен, метод вызовет исключение ``AssertionError``."

# 5c1dce666c414612afe8b751a362ee90
# a4fef880dd804885b0f3a64ae611df25
# 0b09c74e9fd64925a7fe381c157adecc
# 94d187ce66e340fea4e522d7b34421df
# 52b983f587f6407ea7270413dede2480
# 7c1261f8e8ab401890e2124d3d70bc8f
#: ../../topics/testing/tools.txt:1519 ../../topics/testing/tools.txt:1530
#: ../../topics/testing/tools.txt:1541 ../../topics/testing/tools.txt:1549
#: ../../topics/testing/tools.txt:1567 ../../topics/testing/tools.txt:1574
#: ../../topics/testing/tools.txt:1592
msgid "Output in case of error can be customized with the ``msg`` argument."
msgstr "Вы можете изменить сообщение об ошибке с помощью аргумента ``msg``."

# 3ef2b35d2e1343d1a9fec9d0f2dbcef4
#: ../../topics/testing/tools.txt:1523
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""
"Проверяет, что строки ``html1`` и ``html2`` отличаются. Сравнение основано "
"на семантике HTML. Подробности смотрите в описании :meth:`~SimpleTestCase."
"assertHTMLEqual`."

# bac58d509e604cac91b915f5f87fa813
#: ../../topics/testing/tools.txt:1534
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarly to :meth:`~SimpleTestCase."
"assertHTMLEqual`, the comparison is made on parsed content, hence only "
"semantic differences are considered, not syntax differences. When invalid "
"XML is passed in any parameter, an ``AssertionError`` is always raised, even "
"if both string are identical."
msgstr ""
"Проверяет, что строки ``xml1`` и ``xml2`` одинаковы. При сравнении "
"используется семантика XML. Как и в :meth:`~SimpleTestCase.assertHTMLEqual`, "
"сравнивается результат парсинка, то есть учитываются только семантические "
"отличия, а не отличия в синтаксисе. Если передан не правильный XML, "
"вызывается ``AssertionError``, даже если обе строки одинаковы."

# 997220825ad34356853775216fd518bd
#: ../../topics/testing/tools.txt:1545
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See :meth:`~SimpleTestCase."
"assertXMLEqual` for details."
msgstr ""
"Проверяет, что строки ``xml1`` и ``xml2`` *не* одинаковы. При сравнении "
"используется семантика XML. Подробности смотрите в описании :meth:"
"`~SimpleTestCase.assertXMLEqual`."

# f392b0fe2c2e494c843fc8a90947f6c5
#: ../../topics/testing/tools.txt:1553
msgid ""
"Asserts that the HTML fragment ``needle`` is contained in the ``haystack`` "
"one."
msgstr "Проверяет наличие HTML фрагмента ``needle`` в ``haystack``."

# d951ddd6f4a5459c82af854a3f2c62c0
#: ../../topics/testing/tools.txt:1555
msgid ""
"If the ``count`` integer argument is specified, then additionally the number "
"of ``needle`` occurrences will be strictly verified."
msgstr ""
"Если указан параметр ``count``, проверяется, что ``needle`` встречается "
"указанное число раз."

# 4f3b6f44e7404ca898b461bb928d91a7
#: ../../topics/testing/tools.txt:1558
msgid ""
"Whitespace in most cases is ignored, and attribute ordering is not "
"significant. The passed-in arguments must be valid HTML."
msgstr ""
"В большинстве случаев пробелы игнорируются. Аргументы должны содержать "
"правильный HTML."

# 29fab43056f648aca818544b8c591361
#: ../../topics/testing/tools.txt:1563
msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are equal. "
"Usual JSON non-significant whitespace rules apply as the heavyweight is "
"delegated to the :mod:`json` library."
msgstr ""
"Проверяет, что JSON в ``raw`` и ``expected_data`` одинаковый. Обработка "
"пробелов в JSON делегируется библиотеке :mod:`json`."

# 997220825ad34356853775216fd518bd
#: ../../topics/testing/tools.txt:1571
msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are *not* "
"equal. See :meth:`~SimpleTestCase.assertJSONEqual` for further details."
msgstr ""
"Проверяет, что фрагменты JSON ``raw`` и ``expected_data`` *не* одинаковы. "
"Подробности смотрите в описании :meth:`~SimpleTestCase.assertJSONEqual`."

# 2382c4bedeec45508ac11f4df5e40241
#: ../../topics/testing/tools.txt:1578
msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""
"Проверяет, что ``qs``(объект ``QuerySet``) возвращает список значений "
"``values``."

# efda61e23ce141a49e64c2b74a042e02
#: ../../topics/testing/tools.txt:1580
msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't "
"provide a unique or helpful comparison."
msgstr ""
"При сравнении содержимого ``qs`` и ``values`` используется функция "
"``transform``; по умолчанию сравнивается результат ``repr()`` над каждым "
"значением. Вы можете указать другую функцию, если ``repr()`` возвращает не "
"уникальные значения, которые нельзя использовать при сравнении."

# ab6dcc630d08430cbd1d4b072bbe4892
#: ../../topics/testing/tools.txt:1585
msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a ``collections.Counter`` "
"comparison. If the order is undefined (if the given ``qs`` isn't ordered and "
"the comparison is against more than one ordered values), a ``ValueError`` is "
"raised."
msgstr ""
"По умолчанию, при сравнении учитывается и порядок значений. Если ``qs`` не "
"содержит неявных правил сортировки, вы можете указать ``False`` в "
"``ordered``, что преобразует сравнение в сравнение ``collections.Counter``. "
"Если же порядок не определён (если переданная ``qs`` не отсортирована и "
"сравнение сравнение производится по нескольким отсортированным значениям), "
"то вызывается исключение ``ValueError``."

# 14286826e7e84524a3536b2b3724119f
#: ../../topics/testing/tools.txt:1596
msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""
"Проверяет, что при вызове функции ``func`` с аргументами ``*args`` и "
"``**kwargs`` выполнилось ``num`` запросов в базу данных."

# 5dda02d5e9a642f78268ad836763d77f
#: ../../topics/testing/tools.txt:1599
msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""
"Если ``kwargs`` содержит ключ ``\"using\"``, он используется для определения "
"базы данных, для которой необходимо считать количество запросов. Если вы "
"хотите вызывать функцию с аргументом ``using``, оберните её в ``lambda``, "
"чтобы добавить аргумент::"

# 69e4954629554e2d99016068b8a10668
#: ../../topics/testing/tools.txt:1606
msgid "You can also use this as a context manager::"
msgstr "Вы можете использовать этот метод как менеджер контекста::"

# 4591d15e75ba4c90a3ae35b33503a3b2
#: ../../topics/testing/tools.txt:1615
#, fuzzy
msgid "Tagging tests"
msgstr "Пропуск тестов"

#: ../../topics/testing/tools.txt:1619
msgid ""
"You can tag your tests so you can easily run a particular subset. For "
"example, you might label fast or slow tests::"
msgstr ""

# 69e4954629554e2d99016068b8a10668
#: ../../topics/testing/tools.txt:1638
#, fuzzy
msgid "You can also tag a test case::"
msgstr "Вы можете использовать этот метод как менеджер контекста::"

#: ../../topics/testing/tools.txt:1644
msgid ""
"Then you can choose which tests to run. For example, to run only fast tests:"
msgstr ""

#: ../../topics/testing/tools.txt:1650
msgid "Or to run fast tests and the core one (even though it's slow):"
msgstr ""

#: ../../topics/testing/tools.txt:1656
msgid ""
"You can also exclude tests by tag. To run core tests if they are not slow:"
msgstr ""

#: ../../topics/testing/tools.txt:1662
msgid ""
":option:`test --exclude-tag` has precedence over :option:`test --tag`, so if "
"a test has two tags and you select one of them and exclude the other, the "
"test won't be run."
msgstr ""

# acb1a07edb794b86a9e5d3c23414fe5c
#: ../../topics/testing/tools.txt:1669
msgid "Email services"
msgstr "Сервисы для отправки писем"

# e76efe095a0f429491de02d4efdf3fcc
#: ../../topics/testing/tools.txt:1671
msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""
"Если выши представления оправляют электронные письма, используя :doc:"
"`встроенный функционал Django </topics/email>`, вы, скорее всего, не "
"захотите, чтобы они отправлялись при каждом запуске тестов. В таких случаях "
"Django автоматически перенаправляет все письма, отправленные через механизм "
"Django, в специальную переменную в памяти. Это позволяет тестировать "
"отправку писем без реальной отправки."

# b7dcd65a71054783ad3d5d00d230e838
#: ../../topics/testing/tools.txt:1678
msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""
"Django неявно подменяет бэкенд для отправки писем при запуске тестов. (Не "
"беспокойтесь -- это распространяется только на Django. Если вы используете "
"локальные почтовые сервисы, они будут работь без изменений.)"

# 485de814e02343ec8b924c43376f7e60
#: ../../topics/testing/tools.txt:1687
msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a simple list of all :class:`~django.core.mail."
"EmailMessage` instances that have been sent. The ``outbox`` attribute is a "
"special attribute that is created *only* when the ``locmem`` email backend "
"is used. It doesn't normally exist as part of the :mod:`django.core.mail` "
"module and you can't import it directly. The code below shows how to access "
"this attribute correctly."
msgstr ""
"При выполнении тестов все отправленные письма сохраняются в переменной "
"``django.core.mail.outbox``. Это просто список объектов :class:`~django.core."
"mail.EmailMessage` писем, которые были отправлены. Атрибут ``outbox`` "
"создается *только* для ``locmem`` бэкенда отправки писем. Вы не можете "
"импортировать его из модуля :mod:`django.core.mail`. Пример ниже показывает "
"как следует его использовать."

# 9490d1a35220426a8e7d2ae54ab40a43
#: ../../topics/testing/tools.txt:1695
msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""
"Этот пример проверяет размер и содержимое ``django.core.mail.outbox``::"

# 2373a680b60e4effa2c3a83a1bdf9807
#: ../../topics/testing/tools.txt:1716
msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``*TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""
"Как упоминалось :ref:`выше <emptying-test-outbox>`, содержимое этого "
"атрибута очищается при запуске каждого теста из ``*TestCase``. Чтобы явно "
"очистить -- просто укажите пустой список в ``mail.outbox``::"

#: ../../topics/testing/tools.txt:1728
msgid "Management Commands"
msgstr "Команды управления"

#: ../../topics/testing/tools.txt:1730
msgid ""
"Management commands can be tested with the :func:`~django.core.management."
"call_command` function. The output can be redirected into a ``StringIO`` "
"instance::"
msgstr ""
"Команды управления могут быть протестированы с помощью функции :func:"
"`~django.core.management.call_command`. Вывод может быть перенаправлен в "
"объект ``StringIO``::"

# 4591d15e75ba4c90a3ae35b33503a3b2
#: ../../topics/testing/tools.txt:1747
msgid "Skipping tests"
msgstr "Пропуск тестов"

# 83ca88fe6c024b8293aaae70e93a83c0
#: ../../topics/testing/tools.txt:1751
msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""
"Библиотека unittest предоставляет декораторы :func:`@skipIf <unittest."
"skipIf>` и :func:`@skipUnless <unittest.skipUnless>`, которые позволяют "
"пропускать тесты, если вы знаете, что они не выполнятся успешно при "
"определенных условиях."

# a5649c2fd0ff4e0d9ccb3891ab2f594b
#: ../../topics/testing/tools.txt:1756
msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""
"Например, если ваш тест требует определенной необязательной библиотеки, вы "
"можете обернуть тест декоратором :func:`@skipIf <unittest.skipIf>`. Тест "
"будет пропущен, будет выведена причина пропуска."

# 455b9608be7d449999168926f9ccf8f3
#: ../../topics/testing/tools.txt:1761
msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""
"Django предоставляет два дополнительных декоратора для пропуска теста. "
"Вместо проверки явного условия, эти декораторы проверяют наличие "
"определенного функционала базы данных, и тест пропускается, если база данных "
"не поддерживает необходимый функционал."

# a8d92a002e3f4adf9a5c9b7e00af68d9
#: ../../topics/testing/tools.txt:1766
msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See ``django.db.backends.BaseDatabaseFeatures`` class for a full list of "
"database features that can be used as a basis for skipping tests."
msgstr ""
"Декораторы используют строковые называние возможностей базы данных. Строка "
"соответствует атрибуту из класса ``django.db.backends."
"BaseDatabaseFeatures``, смотрите описание класса, чтобы узнать полный список "
"возможностей базы данных, которые можно проверять."

# 03d12203adb94cf49444fe94f9911c51
#: ../../topics/testing/tools.txt:1774
msgid ""
"Skip the decorated test or ``TestCase`` if all of the named database "
"features are supported."
msgstr ""
"Пропускает декорируемый тест или ``TestCase``, если поддерживаются все "
"указанные возможности базы данных."

# 8458c2c078f04ea08a1ad5b21fd04301
#: ../../topics/testing/tools.txt:1777
msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""
"Например, следующий тест будет пропущен, если база данных поддерживает "
"транзакции (например, он *не* будет выполнятся на PostgreSQL, но выполниться "
"на MySQL с таблицами MyISAM)::"

# e842d1db96a343c9a82cfd0091bdfa9d
#: ../../topics/testing/tools.txt:1789
msgid ""
"Skip the decorated test or ``TestCase`` if any of the named database "
"features are *not* supported."
msgstr ""
"Пропускает декорируемый тест или ``TestCase``, если *не* поддерживается "
"любая из перечисленных возможностей базы данных."

# 7c383d4746314631b52c96b60d4fdda8
#: ../../topics/testing/tools.txt:1792
msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""
"Например, следующий тест выполнится, если база данных поддерживает "
"транзакции (например, он выполниться на PostgreSQL, но *не* на MySQL с "
"таблицами MyISAM)::"

#~ msgid ""
#~ "In earlier versions, the live server's default address was always "
#~ "``'localhost:8081'``."
#~ msgstr ""
#~ "В предыдущих версиях адрес сервера по умолчанию был ``'localhost:8081'``."

#, fuzzy
#~ msgid ""
#~ "If you'd like to select another address, you may pass a different one "
#~ "using the :option:`test --liveserver` option, for example:"
#~ msgstr ""
#~ "Если вам необходим другой адрес сервера, вы можете указать его при "
#~ "запуске команды :djadmin:`test`, используя опцию :djadminopt:`--"
#~ "liveserver`, например:"

#~ msgid ""
#~ "In older versions ``live_server_url`` could only be accessed from an "
#~ "instance. It now is a class property and can be accessed from class "
#~ "methods like ``setUpClass()``."
#~ msgstr ""
#~ "В предыдущих версиях ``live_server_url`` был доступен только из "
#~ "экземпляра класса. Теперь это атрибут класса и доступен в методах класса, "
#~ "например ``setUpClass()``."

# 846fe711824e4195a548d1b018a143bf
#~ msgid ""
#~ "Another way of changing the default server address is by setting the "
#~ "`DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your "
#~ "code (for example, in a :ref:`custom test runner<topics-testing-"
#~ "test_runner>`)::"
#~ msgstr ""
#~ "Еще один способ поменять адрес тестового сервера, установить переменную "
#~ "окружения `DJANGO_LIVE_TEST_SERVER_ADDRESS` (например в :ref:`своем "
#~ "классе запуска тестов<topics-testing-test_runner>`)::"

# 22257bba34eb4e5b9368fde28acd9d0a
#~ msgid ""
#~ "In the case where the tests are run by multiple processes in parallel "
#~ "(for example, in the context of several simultaneous `continuous "
#~ "integration`_ builds), the processes will compete for the same address, "
#~ "and therefore your tests might randomly fail with an \"Address already in "
#~ "use\" error. To avoid this problem, you can pass a comma-separated list "
#~ "of ports or ranges of ports (at least as many as the number of potential "
#~ "parallel processes). For example:"
#~ msgstr ""
#~ "Если тесты выполняются в нескольких параллельных процессах (например, при "
#~ "сборке `нескольких паралельных билдов <http://en.wikipedia.org/wiki/"
#~ "Continuous_integration>`_), они будут пытаться запустить сервер на одном "
#~ "и том же порте, и могут завершаться с ошибкой \"Address already in use\". "
#~ "Чтобы избежать такой проблемы, вы можете указать список портов, "
#~ "разделенных запятой, или диапазон портов (количество портов должно "
#~ "соответствовать количеству предполагаемых параллельных процессов). "
#~ "Например:"

# f2b90ae0602d4329950a3c5b488e027f
#~ msgid ""
#~ "Then, during test execution, each new live test server will try every "
#~ "specified port until it finds one that is free and takes it."
#~ msgstr ""
#~ "Тогда, при запуске тестов сервер будет перебирать указанные порты, пока "
#~ "не будет найдет свободный."

#~ msgid "The ability to use a file-like object was added."
#~ msgstr "Была добавлена возможность использовать файлообразный объект."

#~ msgid ""
#~ "Inactive users (:attr:`is_active=False <django.contrib.auth.models.User."
#~ "is_active>`) are not permitted to login as this method is meant to be "
#~ "equivalent to the :func:`~django.contrib.auth.login` view which uses :"
#~ "class:`~django.contrib.auth.forms.AuthenticationForm` and therefore "
#~ "defaults to rejecting users who are inactive."
#~ msgstr ""
#~ "Неактивного пользователя (:attr:`is_active=False <django.contrib.auth."
#~ "models.User.is_active>`) нельзя авторизировать т.к. этот метод аналогичен "
#~ "представлению :func:`~django.contrib.auth.login`, которое использует "
#~ "форму :class:`~django.contrib.auth.forms.AuthenticationForm` и не "
#~ "выполняет авторизацию неактивных пользователей."

# 26a17a47d90e4773b1778855aff4ca5b
#~ msgid "Saving and restoring the Python warning machinery state."
#~ msgstr ""
#~ "Сохраняет и восстанавливает состояние механизма предупреждений(warning) в "
#~ "Python."

# b2e3338570644b75be70436f3209deed
#~ msgid "Custom test-time :attr:`URL maps <SimpleTestCase.urls>`."
#~ msgstr ""
#~ "Позволяет переопределить на время тестов :attr:`структуру URL-ов "
#~ "<SimpleTestCase.urls>`."

# b4134bad6b8a43e8a476c16c0ea3cdc3
#~ msgid ""
#~ "If you need any of the other more complex and heavyweight Django-specific "
#~ "features like:"
#~ msgstr ""
#~ "Если вам нужно больше возможностей Django при тестировании, например:"

# 64b0edc493f54e73a250d94a88873459
#~ msgid "Testing or using the ORM."
#~ msgstr "Тестирование или использование ORM."

# bdf7bb1699094fb3854fc7f707f9cc2c
#~ msgid "``SimpleTestCase`` inherits from ``unittest.TestCase``."
#~ msgstr "``SimpleTestCase`` наследуется от ``unittest.TestCase``."

#~ msgid ""
#~ "In older versions of Django, the effects of transaction commit and "
#~ "rollback could not be tested within a ``TestCase``.  With the completion "
#~ "of the deprecation cycle of the old-style transaction management in "
#~ "Django 1.8, transaction management commands (e.g. ``transaction."
#~ "commit()``) are no longer disabled within ``TestCase``."
#~ msgstr ""
#~ "В старых версиях Django, эффекты завершения транзакции и её отката "
#~ "невозможно было протестировать с помощью класса ``TestCase``. Благодаря "
#~ "завершению поддержки старого стиля управления транзакциями в Django 1.8, "
#~ "команды управления транзакциями (такие как ``transaction.commit()``) "
#~ "больше не отключены внутри ``TestCase``."

# e0d6c51697c64501a1792ff6d9314830
#~ msgid ""
#~ "This class provides some additional capabilities that can be useful for "
#~ "testing websites."
#~ msgstr ""
#~ "Этот класс предоставляет дополнительные возможности для тестирования "
#~ "сайтов."

# 91f598b9e6c44744a4048e4ae2cf08ac
#~ msgid "Automatic loading of fixtures."
#~ msgstr "Автоматически загружаются фикстуры."

#~ msgid ""
#~ "Wraps the tests within two nested ``atomic`` blocks: one for the whole "
#~ "class and one for each test."
#~ msgstr ""
#~ "Оборачивает тесты двумя ``atomic`` блоками: первый для всего класса, а "
#~ "второй для каждого теста."

# 6dd450b499f14e8ba6d856622233f623
#~ msgid "Creates a TestClient instance."
#~ msgstr "Создается экземпляр тестового клиента."

# 54aab0dfc20149a994c122ee2c3c0d2f
#~ msgid ""
#~ "Django-specific assertions for testing for things like redirection and "
#~ "form errors."
#~ msgstr ""
#~ "Предоставляются дополнительные возможности для тестирования, такие как "
#~ "проверка перенаправлений, ошибок валидации форм и т.д."

#~ msgid ""
#~ "If you want to test some specific database transaction behavior, you "
#~ "should use ``TransactionTestCase``, as ``TestCase`` wraps test execution "
#~ "within an :func:`~django.db.transaction.atomic()` block."
#~ msgstr ""
#~ "Если требуется протестировать специфичное транзакционное поведение базы "
#~ "данных, то вам следует воспользоваться классом ``TransactionTestCase``, "
#~ "так как ``TestCase`` оборачивает выполнение теста с помощью блока :func:"
#~ "`~django.db.transaction.atomic()`."

# 030cbcd2bbbd4c63b03d515309221a34
#~ msgid ""
#~ "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
#~ msgstr ""
#~ "``TestCase`` наследуется от :class:`~django.test.TransactionTestCase`."

#~ msgid ""
#~ "Use ``@override_settings(ROOT_URLCONF=...)`` instead for URLconf "
#~ "configuration."
#~ msgstr ""
#~ "Вместо этого используйте ``@override_settings(ROOT_URLCONF=...)`` для "
#~ "настройки схемы URL."

# 9020b4425f6343e886f603111e70467c
#~ msgid ""
#~ "In order to provide a reliable URL space for your test, ``django.test."
#~ "*TestCase`` classes provide the ability to customize the URLconf "
#~ "configuration for the duration of the execution of a test suite. If your "
#~ "``*TestCase`` instance defines an ``urls`` attribute, the ``*TestCase`` "
#~ "will use the value of that attribute as the :setting:`ROOT_URLCONF` for "
#~ "the duration of that test."
#~ msgstr ""
#~ "Чтобы обеспечить определенность URL-ов в тестах, классы ``django.test."
#~ "*TestCase`` предоставляют возможность настроить URLconf для теста. Если "
#~ "атрибут ``urls`` экземпляра ``*TestCase`` содержит конфигурацию URL-ов, "
#~ "``*TestCase`` будет использовать ее как значение :setting:`ROOT_URLCONF` "
#~ "при выполнении тестов."

# b36fa64b81c4417e86f656c37e9454d6
#~ msgid ""
#~ "This test case will use the contents of ``myapp.test_urls`` as the "
#~ "URLconf for the duration of the test case."
#~ msgstr ""
#~ "При выполнении этого теста содержимое ``myapp.test_urls`` будет "
#~ "использоваться как URLconf."

# d0426932a391496e874d21b0afc9159f
#~ msgid "``skipIfDBFeature`` can accept multiple feature strings."
#~ msgstr ""
#~ "``skipIfDBFeature`` может принимать строку, описывающую несколько "
#~ "возможностей."

# ba7a6f58fb4640e093663c13f03a2c59
#~ msgid "``skipUnlessDBFeature`` can accept multiple feature strings."
#~ msgstr ""
#~ "``skipUnlessDBFeature`` может принимать строку, описывающую несколько "
#~ "возможностей базы данных."

# 66c0a541a58e41468559b4ac575f155b
#~ msgid "The ``secure`` argument was added."
#~ msgstr "Был добавлен аргумент ``secure``."

# fbeaea10b25e4753bb2c206daff9ed75
#~ msgid ""
#~ "By default the live server's address is ``'localhost:8081'`` and the full "
#~ "URL can be accessed during the tests with ``self.live_server_url``. If "
#~ "you'd like to change the default address (in the case, for example, where "
#~ "the 8081 port is already taken) then you may pass a different one to the :"
#~ "djadmin:`test` command via the :djadminopt:`--liveserver` option, for "
#~ "example:"
#~ msgstr ""
#~ "По умолчанию адрес сервера ``'localhost:8081'`` и полный URL в тесте "
#~ "можно получить из атрибута ``self.live_server_url``. Если вы хотите "
#~ "поменять адрес (например порт 8081 уже занят), укажите его при запуске "
#~ "команды :djadmin:`test`, используя опцию :djadminopt:`--liveserver`, "
#~ "например:"

# f5bd112679d94b51b1fe33d1e5fe81da
#~ msgid ""
#~ "Then, add a ``LiveServerTestCase``-based test to your app's tests module "
#~ "(for example: ``myapp/tests.py``). The code for this test may look as "
#~ "follows::"
#~ msgstr ""
#~ "Затем добавьте тест унаследованный от ``LiveServerTestCase`` в модуль с "
#~ "тестами (например: ``myapp/tests.py``). Код такого теста может выглядеть "
#~ "вот так::"

#~ msgid ""
#~ "In older versions, ``LiveServerTestCase`` relied on the :doc:`staticfiles "
#~ "contrib app </howto/static-files/index>` to transparently serve static "
#~ "files during the execution of tests. This functionality has been moved to "
#~ "the :class:`~django.contrib.staticfiles.testing.StaticLiveServerTestCase` "
#~ "subclass, so use that subclass if you need :ref:`the original behavior "
#~ "<staticfiles-testing-support>`."
#~ msgstr ""
#~ "В старых версиях Django класс ``LiveServerTestCase`` основывался на :doc:"
#~ "`приложении staticfiles </howto/static-files/index>` для невидимого "
#~ "обслуживания статических файлов во время работы тестов. Этот функционал "
#~ "был перемещён в подкласс :class:`~django.contrib.staticfiles.testing."
#~ "StaticLiveServerTestCase`, значит его следует использовать когда "
#~ "потребуется :ref:`оригинальное поведение <staticfiles-testing-support>`."

# c46102bb340f409dac4d34f6a84221c3
#~ msgid ""
#~ "``LiveServerTestCase`` now simply publishes the contents of the file "
#~ "system under :setting:`STATIC_ROOT` at the :setting:`STATIC_URL`."
#~ msgstr ""
#~ "``LiveServerTestCase`` теперь просто раздаёт содержимое файловой системы "
#~ "из-под :setting:`STATIC_ROOT` по URL :setting:`STATIC_URL`."

# 9383bd46db7d476ea54a407576f9a6a4
#~ msgid ""
#~ "If you've ever run :djadmin:`manage.py migrate<migrate>`, you've already "
#~ "used a fixture without even knowing it! When you call :djadmin:`migrate` "
#~ "in the database for the first time, Django installs a fixture called "
#~ "``initial_data``. This gives you a way of populating a new database with "
#~ "any initial data, such as a default set of categories."
#~ msgstr ""
#~ "Если вы когда либо запускали команду :djadmin:`manage.py "
#~ "migrate<migrate>`, вы уже использовали фикстуры даже не зная этого! При "
#~ "вызове :djadmin:`migrate` впервые, Django устанавливает фикстуры, которые "
#~ "называются ``initial_data``. Это позволяет добавлять данные в новую базу "
#~ "данных(например, список категорий по умолчанию)."

# 0195670dd3b54c7baf84da7b5fb87182
#~ msgid ""
#~ "Fixtures with other names can always be installed manually using the :"
#~ "djadmin:`manage.py loaddata<loaddata>` command."
#~ msgstr ""
#~ "Фикстуры можно загрузить с помощью команды :djadmin:`manage.py "
#~ "loaddata<loaddata>`."

# 785eee53e5304fa5bf54c4b8644aa936
#~ msgid "Initial SQL data and testing"
#~ msgstr "Инициализирующий SQL и тесты"

# fb1002e7042143be9931fc6d1c609602
#~ msgid ""
#~ "Django provides a second way to insert initial data into models -- the :"
#~ "ref:`custom SQL hook <initial-sql>`. However, this technique *cannot* be "
#~ "used to provide initial data for testing purposes. Django's test "
#~ "framework flushes the contents of the test database after each test; as a "
#~ "result, any data added using the custom SQL hook will be lost."
#~ msgstr ""
#~ "Django предоставляет еще один способ добавить начальные данные для "
#~ "моделей -- :ref:`инициализирующий SQL <initial-sql>`. Однако, этот подход "
#~ "*нельзя* использовать для загрузки данных в тестах. Django очищает базу "
#~ "данных после каждого теста, в результате любые данные, добавленные с "
#~ "помощью SQL, будут потеряны."

# a15663e2e2b34f3a81dbb70d52319878
#~ msgid ""
#~ "Previously, ``override_settings`` was imported from ``django.test.utils``."
#~ msgstr ""
#~ "Ранее ``override_settings`` импортировался из ``django.test.utils``."

# 6d218a246b4f42e5acc33d85119d1a40
#~ msgid ""
#~ "Previously, you could only simulate the deletion of a setting which was "
#~ "explicitly overridden."
#~ msgstr ""
#~ "Ранее позволялось удалить настройку, только если она была явно "
#~ "переопределена."

# e147a3c61bdc42718565da093d9da21b
#~ msgid ""
#~ "The ``host`` argument sets a default host if ``expected_url`` doesn't "
#~ "include one (e.g. ``\"/bar/\"``).  If ``expected_url`` is an absolute URL "
#~ "that includes a host (e.g. ``\"http://testhost/bar/\"``), the ``host`` "
#~ "parameter will be ignored. Note that the test client doesn't support "
#~ "fetching external URLs, but the parameter may be useful if you are "
#~ "testing with a custom HTTP host (for example, initializing the test "
#~ "client with ``Client(HTTP_HOST=\"testhost\")``."
#~ msgstr ""
#~ "Аргумент ``host`` определяет хост по умолчанию, если ``expected_url`` не "
#~ "содержит такого (например, ``\"/bar/\"``). Если ``expected_url`` -- "
#~ "абсолютный URL (например, ``\"http://testhost/bar/\"``), аргумент "
#~ "``host`` игнорируется. Обратите внимание, тестовый клиент не загружает "
#~ "внешние URL-ы, но этот аргумент может быть полезен, если вы тестируете с "
#~ "переопределенным HTTP хостом (например, через клиент ``Client(HTTP_HOST="
#~ "\"testhost\")``."

# c73c28b4d6a1461e9329c75990866c78
#~ msgid ""
#~ "The method now accepts a ``msg`` parameter to allow customization of "
#~ "error message"
#~ msgstr ""
#~ "Метод теперь принимает параметр ``msg``, который позволяет переопределить "
#~ "сообщение об ошибке."

# d0426932a391496e874d21b0afc9159f
#~ msgid ""
#~ "``skipIfDBFeature`` can now be used to decorate a ``TestCase`` class."
#~ msgstr "``skipIfDBFeature`` может декорировать класс ``TestCase``."

# ba7a6f58fb4640e093663c13f03a2c59
#~ msgid ""
#~ "``skipUnlessDBFeature`` can now be used to decorate a ``TestCase`` class."
#~ msgstr "``skipUnlessDBFeature`` может декорировать класс ``TestCase``."

# e8b3890bb5cf4f9f86afa3d36774b50e
#~ msgid ""
#~ "The latter two features were moved from ``TransactionTestCase`` to "
#~ "``SimpleTestCase`` in Django 1.6."
#~ msgstr ""
#~ "В Django 1.6 часть функционала была перенесена из ``TransactionTestCase`` "
#~ "в ``SimpleTestCase``."

# 8ad81f4da9cc4a2cbc109a90c577ce1c
#~ msgid ""
#~ "While ``commit`` and ``rollback`` operations still *appear* to work when "
#~ "used in ``TestCase``, no actual commit or rollback will be performed by "
#~ "the database. This can cause your tests to pass or fail unexpectedly. "
#~ "Always use ``TransactionTestCase`` when testing transactional behavior or "
#~ "any code that can't normally be executed in autocommit mode (:meth:"
#~ "`~django.db.models.query.QuerySet.select_for_update()` is an example)."
#~ msgstr ""
#~ "Хотя операции ``commit`` и ``rollback`` *выполняются* без ошибок в "
#~ "``TestCase``, никакого коммита или отката транзакции не выполняется. Это "
#~ "может привести к непредсказуемому поведению тестов. Всегда используйте "
#~ "``TransactionTestCase`` при тестировании кода, который не работает в "
#~ "режиме авто-коммита запросов (например :meth:`~django.db.models.query."
#~ "QuerySet.select_for_update()`)."

# 0616393a0e564296a2926c20eadb5cdb
#~ msgid "Wraps each test in a transaction."
#~ msgstr "Каждый тест оборачивается в транзакцию."

# 3d41d96902254afa80b2fd2d4c1446f2
#~ msgid ""
#~ "Before Django 1.7 ``LiveServerTestCase`` used to rely on the :doc:"
#~ "`staticfiles contrib app </howto/static-files/index>` to get the static "
#~ "assets of the application(s) under test transparently served at their "
#~ "expected locations during the execution of these tests."
#~ msgstr ""
#~ "До Django 1.7 ``LiveServerTestCase`` использовал :doc:`приложение "
#~ "staticfiles </howto/static-files/index>` для загрузки статических файлов "
#~ "во время тестов."

# cab17bb4987348ab99532d368209b952
#~ msgid ""
#~ "If you use the ``staticfiles`` app in your project and need to perform "
#~ "live testing then you might want to consider using the :class:`~django."
#~ "contrib.staticfiles.testing.StaticLiveServerTestCase` subclass shipped "
#~ "with it instead because it's the one that implements the original "
#~ "behavior now. See :ref:`the relevant documentation <staticfiles-testing-"
#~ "support>` for more details."
#~ msgstr ""
#~ "Если вы используете приложение ``staticfiles`` в проекте, используйте :"
#~ "class:`~django.contrib.staticfiles.testing.StaticLiveServerTestCase`, "
#~ "который реализует старое поведение. Подробности смотрите в :ref:"
#~ "`соответствующем разделе <staticfiles-testing-support>`."

# 9a90d2e458f14d41a2f17fcfa7760140
#~ msgid "TEMPLATE_CONTEXT_PROCESSORS"
#~ msgstr "TEMPLATE_CONTEXT_PROCESSORS"

# abfe24fb72254801b31b1c149635d74c
#~ msgid "Context processors cache"
#~ msgstr "Кеш контекстных процессоров"

# 72ae1ec9e8af4a7fb167f486cc1f8616
#~ msgid "Template loaders cache"
#~ msgstr "Кеш загрузчиков шаблонов"

# 846d693d6d1149dda34427aeb791c94a
#~ msgid ""
#~ "The method now checks for undefined order and raises ``ValueError`` if "
#~ "undefined order is spotted. The ordering is seen as undefined if the "
#~ "given ``qs`` isn't ordered and the comparison is against more than one "
#~ "ordered values."
#~ msgstr ""
#~ "Теперь метод определяет неопределенную сортировку и вызывает исключение "
#~ "``ValueError``. Сортировка считается неопределенной, если ``qs`` не "
#~ "содержит правил сортировки и сравнивается со списком нескольких значений."
