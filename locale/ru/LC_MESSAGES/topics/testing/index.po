# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Tyshchenko Viktor <tyvik8@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 58aa4129630f4066b9f8fbc58a3fedfb
#: ../../topics/testing/index.txt:3
msgid "Testing in Django"
msgstr "Тестирование в Django"

# 63f7474deb8b4f8dba1318ab33683268
#: ../../topics/testing/index.txt:12
msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern Web "
"developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr "Автоматические тесты очень полезная вещь для современного разработчика. Вы можете использовать наборы тестов -- **test suite** -- для решения ряда проблем."

# d2f2d0b391f0473784b60e5d3adca746
#: ../../topics/testing/index.txt:16
msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr "Когда разрабатывается новый функционал, можно сразу же писать к нему тесты, чтобы быть уверенным, что он работает так, как ожидается."

# 9087309744dc4454861d9b9b0fed82ca
#: ../../topics/testing/index.txt:19
msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr "Когда вы проводите рефакторинг старого кода, тесты обеспечивают гарантию, что изменения не внесут в приложение новых ошибок."

# 6d7a8e7428644bc99465bb00ba328777
#: ../../topics/testing/index.txt:23
msgid ""
"Testing a Web application is a complex task, because a Web application is "
"made of several layers of logic -- from HTTP-level request handling, to form "
"validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr "Тестирование веб-приложений представляет собой сложную задачу, так как веб-приложение состоит из нескольких слоев логики -- от HTTP запросов на уровне обработки запросов до форм проверки и рендеринга страницы. С помощью тестового фреймворка, встроенного в Django, и нескольких утилит вы можете эмулировать запросы пользователя и проверять какая страница показалась в ответ."

# cc21620ace4c4e17898616d1a48461d0
#: ../../topics/testing/index.txt:30
msgid "The best part is, it's really easy."
msgstr "Самое приятное, что это очень легко."

# fb56420a3a7b481d9daf0db4776084be
#: ../../topics/testing/index.txt:33
msgid "Unit tests v. doctests"
msgstr "Unit tests v. doctests"

# 7df4e1b0f0cc43fa87ffdf67cdc4d9e3
#: ../../topics/testing/index.txt:35
msgid ""
"There are two primary ways to write tests with Django, corresponding to the "
"two test frameworks that ship in the Python standard library. The two "
"frameworks are:"
msgstr "Есть два основных пути написания тестов для Django, которые используют разные фреймворки:"

# abd5f4927aef44bb847eb10cca24ccee
#: ../../topics/testing/index.txt:39
msgid ""
"**Unit tests** -- tests that are expressed as methods on a Python class that "
"subclasses :class:`unittest.TestCase` or Django's customized :class:`~django."
"test.TestCase`. For example::"
msgstr "**Unit tests** -- тесты оформляются как методы Python-класса, который унаследован от :class:`unittest.TestCase` или Django-класса :class:`~django.test.TestCase`. Например::"

# 5631230e54a44100bbf9d417eb649e43
#: ../../topics/testing/index.txt:51
msgid ""
"**Doctests** -- tests that are embedded in your functions' docstrings and "
"are written in a way that emulates a session of the Python interactive "
"interpreter. For example::"
msgstr "**Doctests** -- тесты встроены в строку документации для функции и написаны как будто для выполнения в интерактивном режиме. Например::"

# 089ebbdfcf4841df818b52a2349c2958
#: ../../topics/testing/index.txt:66
msgid "Which should I use?"
msgstr "Так что же использовать?"

# 4fdfae1534fc41afa6562686defc0e22
#: ../../topics/testing/index.txt:68
msgid ""
"Because Django supports both of the standard Python test frameworks, it's up "
"to you and your tastes to decide which one to use. You can even decide to "
"use *both*."
msgstr "Поскольку Django поддерживает оба способа, можете выбрать любой. А можете использовать и оба сразу."

# debc1fae6ce74941abc4b36207dbb03f
#: ../../topics/testing/index.txt:72
msgid ""
"For developers new to testing, however, this choice can seem confusing. "
"Here, then, are a few key differences to help you decide which approach is "
"right for you:"
msgstr "Новичкам может быть сложно выбрать что-либо одно, поэтому приведём несколько ключевых различий, чтобы помочь с выбором:"

# f6c356f7e2ce4e6ba6a95f7363bfba57
#: ../../topics/testing/index.txt:76
msgid ""
"If you've been using Python for a while, :mod:`doctest` will probably feel "
"more \"pythonic\". It's designed to make writing tests as easy as possible, "
"so it requires no overhead of writing classes or methods. You simply put "
"tests in docstrings. This has the added advantage of serving as "
"documentation (and correct documentation, at that!). However, while doctests "
"are good for some simple example code, they are not very good if you want to "
"produce either high quality, comprehensive tests or high quality "
"documentation. Test failures are often difficult to debug as it can be "
"unclear exactly why the test failed. Thus, doctests should generally be "
"avoided and used primarily for documentation examples only."
msgstr "Если вы уже погрузились в Python, то способ с :mod:`doctest` может показаться более \"pythonic\". Он создан, чтобы наиболее упростить написание тестов, посему не требует дополнительных классов или методов. Просто пишите тесты в строке документации. Ещё один плюс состоит в том, что эти тесты будут видны в документации. Однако, этот способ подходит только для простых случаев; он не подойдёт, если вам нужно высокое качество кода или документации. Очень часто бывает сложно отлаживать такой тест, т.к. непонятно где именно он свалился. Таким образом, doctests больше подходит для пример в документации, в остальных случаях его лучше избегать."

# 0de6bce249ef42d1b36c683b38f04861
#: ../../topics/testing/index.txt:87
msgid ""
"The :mod:`unittest` framework will probably feel very familiar to developers "
"coming from Java. :mod:`unittest` is inspired by Java's JUnit, so you'll "
"feel at home with this method if you've used JUnit or any test framework "
"inspired by JUnit."
msgstr ":mod:`unittest`, вероятно, знаком разработчикам, которые писали на Java. Этот фреймворк похож на JUnit и его производные, так что сложностей здесь быть не должно."

# 18dd46f81677480c965066fb2cb52da8
#: ../../topics/testing/index.txt:92
msgid ""
"If you need to write a bunch of tests that share similar code, then you'll "
"appreciate the :mod:`unittest` framework's organization around classes and "
"methods. This makes it easy to abstract common tasks into common methods. "
"The framework also supports explicit setup and/or cleanup routines, which "
"give you a high level of control over the environment in which your test "
"cases are run."
msgstr "Если вам нужно написать кучу тестов для разных кусков кода, то вы оцените организацию классов и методов в :mod:`unittest`. Схожие задачи там легко группируются в схожие методы. Система также поддерживает настройку среды тестирования для прохождения всех возможных ситуаций."

# 89456f3c5c7344489bf84a00b2a3ac41
#: ../../topics/testing/index.txt:99
msgid ""
"If you're writing tests for Django itself, you should use :mod:`unittest`."
msgstr "Если вы пишете тесты для Django, то используйте :mod:`unittest`."

# d7e089c30c194455a6430c41ed865391
#: ../../topics/testing/index.txt:102
msgid "Where to go from here"
msgstr "Чего бы ещё почитать?"

# 73535dfa10b4408fbbb2d8758cb0f5c1
#: ../../topics/testing/index.txt:104
msgid ""
"As unit tests are preferred in Django, we treat them in detail in the :doc:"
"`overview` document."
msgstr "Так как модульные тесты являются предпочтительными в Django, то мы рассмотрим их в :doc:`overview`."

# 2db661527dc14e84ae88d56f8283a036
#: ../../topics/testing/index.txt:107
msgid ":doc:`doctests` describes Django-specific features when using doctests."
msgstr "В :doc:`doctests` разобраны специфичные для Django методы использования тестов в комментариях."

# 148f291b4b8e4ca5a0845aed6dc4ace5
#: ../../topics/testing/index.txt:109
msgid ""
"You can also use any *other* Python test framework, Django provides an API "
"and tools for that kind of integration. They are described in the :ref:"
"`other-testing-frameworks` section of :doc:`advanced`."
msgstr "Вы можете использовать и *другие* фреймворки для тестирования, т.к. в Django есть API и утилиты для быстрой интеграции. Они описаны в разделе :ref:`other-testing-frameworks` документации :doc:`advanced`."
