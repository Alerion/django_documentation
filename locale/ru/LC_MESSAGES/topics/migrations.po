# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2016-03-17 14:49+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 4ae0e898410b4af1b5d8986d8651b691
#: ../../topics/migrations.txt:3
msgid "Migrations"
msgstr "Миграции"

# 66934939f1db41d99199317ae317b295
#: ../../topics/migrations.txt:8
msgid ""
"Migrations are Django's way of propagating changes you make to your models "
"(adding a field, deleting a model, etc.) into your database schema. They're "
"designed to be mostly automatic, but you'll need to know when to make "
"migrations, when to run them, and the common problems you might run into."
msgstr ""
"Django использует миграции для переноса изменений в моделях (добавление "
"поля, удаление модели и т.д.) на структуру базы данных. Миграции создавались "
"в основном для автоматической работы, но вам необходимо знать когда их "
"создавать, запускать и как решать различные проблемы."

# 1a8912ad5d704b3b876f04bac5346056
#: ../../topics/migrations.txt:14
msgid "The Commands"
msgstr "Команды"

# 6c4f1d8c388a459c9c4d0fe254f1b03a
#: ../../topics/migrations.txt:16
msgid ""
"There are several commands which you will use to interact with migrations "
"and Django's handling of database schema:"
msgstr ""
"Django предоставляет две команды для работы с миграциями и структурой базы "
"данных:"

# 0fa0b246ddad45dc91d8907d5b7da1fb
#: ../../topics/migrations.txt:19
#, fuzzy
msgid ""
":djadmin:`migrate`, which is responsible for applying and unapplying "
"migrations."
msgstr ""
":djadmin:`migrate`, которая отвечает за применение миграций, за откат "
"миграций и за вывод статуса миграций."

# 23ed031a276b4b06a1944ea56aea58f2
#: ../../topics/migrations.txt:22
msgid ""
":djadmin:`makemigrations`, which is responsible for creating new migrations "
"based on the changes you have made to your models."
msgstr ""
":djadmin:`makemigrations`, которая отвечает за создание новых миграций на "
"основе изменений в моделях."

# 209f9c7b1cb84f7684c642a0e2aa48aa
#: ../../topics/migrations.txt:25
msgid ""
":djadmin:`sqlmigrate`, which displays the SQL statements for a migration."
msgstr ":djadmin:`sqlmigrate`, которая выводит SQL запросы для миграции."

# 209f9c7b1cb84f7684c642a0e2aa48aa
#: ../../topics/migrations.txt:27
#, fuzzy
msgid ""
":djadmin:`showmigrations`, which lists a project's migrations and their "
"status."
msgstr ":djadmin:`sqlmigrate`, которая выводит SQL запросы для миграции."

# 724b590ec3a943cf945cc976894f62cb
#: ../../topics/migrations.txt:30
msgid ""
"You should think of migrations as a version control system for your database "
"schema. ``makemigrations`` is responsible for packaging up your model "
"changes into individual migration files - analogous to commits - and "
"``migrate`` is responsible for applying those to your database."
msgstr ""
"Следует рассматривать миграции, как систему контроля версий для базы данных. "
"``makemigrations`` отвечает за сохранение состояния моделей в файле миграции "
"- аналог коммита - а ``migrate`` отвечает за их применение к базе данных."

# d9c3b8cb714f4013b7b1f79e93b81789
#: ../../topics/migrations.txt:35
msgid ""
"The migration files for each app live in a \"migrations\" directory inside "
"of that app, and are designed to be committed to, and distributed as part "
"of, its codebase. You should be making them once on your development machine "
"and then running the same migrations on your colleagues' machines, your "
"staging machines, and eventually your production machines."
msgstr ""
"Файлы с миграциями находятся в каталоге \"migrations\" приложения. Они "
"являются частью приложения и должны распространятся вместе с остальным кодом "
"приложения. Они должны создаваться при разработке и потом применятся на "
"машинах коллег, тестовом и \"боевом\" серверах."

# 5866b5664d854729a01a79c25c987775
#: ../../topics/migrations.txt:42
msgid ""
"It is possible to override the name of the package which contains the "
"migrations on a per-app basis by modifying the :setting:`MIGRATION_MODULES` "
"setting."
msgstr ""
"Вы можете изменить пакет, который хранит миграции, указав его в настройке :"
"setting:`MIGRATION_MODULES`."

# 3333bc2205fc4c539390d7d3314e5703
#: ../../topics/migrations.txt:46
msgid ""
"Migrations will run the same way on the same dataset and produce consistent "
"results, meaning that what you see in development and staging is, under the "
"same circumstances, exactly what will happen in production."
msgstr ""
"Миграции работают идентично на одном и том же наборе данных. Это означает, "
"что на сервере разработки, тестовом и \"боевом\" серверах вы получите один и "
"тот же результат при одинаковых условиях выполнения миграций."

# 5129f9020a16432393401f4aa1f6fbcd
#: ../../topics/migrations.txt:50
msgid ""
"Django will make migrations for any change to your models or fields - even "
"options that don't affect the database - as the only way it can reconstruct "
"a field correctly is to have all the changes in the history, and you might "
"need those options in some data migrations later on (for example, if you've "
"set custom validators)."
msgstr ""
"Django создаст миграции при любых изменениях модели или полей - даже тех "
"параметров, которые не влияют на базу данных - т.к. единственный способ "
"восстановить состояние моделей - это хранить все изменения в истории. Вам "
"могут понадобится эти параметры в миграциях данных в будущем (например, если "
"вы добавите собственную проверку данных)."

# e602150881c64a76b7ac2446ea8b138f
#: ../../topics/migrations.txt:57
msgid "Backend Support"
msgstr "Поддержка бэкендами"

# 52d53c914fe04fc38bacc2e67fc9e533
#: ../../topics/migrations.txt:59
msgid ""
"Migrations are supported on all backends that Django ships with, as well as "
"any third-party backends if they have programmed in support for schema "
"alteration (done via the :doc:`SchemaEditor </ref/schema-editor>` class)."
msgstr ""
"Миграции поддерживаются всеми бэкендами, которые предоставляет Django, как и "
"сторонними, если они реализуют API внесения изменений в структуру базы "
"данных (через класс :doc:`SchemaEditor </ref/schema-editor>`)."

# 3b9737ee454a4c6f81f5f0c1d72994a0
#: ../../topics/migrations.txt:63
msgid ""
"However, some databases are more capable than others when it comes to schema "
"migrations; some of the caveats are covered below."
msgstr ""
"Тем не менее, некоторые базы данных поддерживают больше возможностей, чем "
"другие, в случаях когда речь идёт о миграциях схемы. Некоторые ограничения "
"будут описаны далее."

# f5cbd8fff95a409e93031614beb07b0c
#: ../../topics/migrations.txt:67
msgid "PostgreSQL"
msgstr "PostgreSQL"

#: ../../topics/migrations.txt:69
msgid ""
"PostgreSQL is the most capable of all the databases here in terms of schema "
"support."
msgstr ""

# 7865129d0b8d428bbb80c221e58fec4b
#: ../../topics/migrations.txt:72
#, fuzzy
msgid ""
"The only caveat is that prior to PostgreSQL 11, adding columns with default "
"values causes a full rewrite of the table, for a time proportional to its "
"size. For this reason, it's recommended you always create new columns with "
"``null=True``, as this way they will be added immediately."
msgstr ""
"По этой причине рекомендуется всегда создавать новые столбцы с "
"``null=True``, т.к. таким образом они будут добавлены сразу."

# 01f0d309a6e645839e84158c9515ce5f
#: ../../topics/migrations.txt:78
msgid "MySQL"
msgstr "MySQL"

# 82f57992e60a42adadccaeab300fee48
#: ../../topics/migrations.txt:80
msgid ""
"MySQL lacks support for transactions around schema alteration operations, "
"meaning that if a migration fails to apply you will have to manually unpick "
"the changes in order to try again (it's impossible to roll back to an "
"earlier point)."
msgstr ""
"В MySQL отсутствует поддержка транзакций при изменении структуры. Это "
"означает, что если миграция не выполнится из-за ошибки вам придется вручную "
"откатывать изменения, чтобы попытаться снова (т.к. невозможно вернуться к "
"исходному состоянию автоматически)."

# 53796914fdff474593d19c84c355e67f
#: ../../topics/migrations.txt:85
msgid ""
"In addition, MySQL will fully rewrite tables for almost every schema "
"operation and generally takes a time proportional to the number of rows in "
"the table to add or remove columns. On slower hardware this can be worse "
"than a minute per million rows - adding a few columns to a table with just a "
"few million rows could lock your site up for over ten minutes."
msgstr ""
"Кроме того, MySQL будет полностью переписывать таблицы почти для каждой "
"операции изменения структуры, это занимает время, пропорциональное "
"количеству строк в таблице. На медленном оборудовании это может занимать "
"больше, чем минута на миллион строк. Добавление нескольких столбцов в "
"таблицу с всего несколькими миллионами строк может заблокировать ваш сайт на "
"более чем десять минут."

# b3e4d3493b474db5b545bb590bc204b6
#: ../../topics/migrations.txt:91
#, fuzzy
msgid ""
"Finally, MySQL has relatively small limits on name lengths for columns, "
"tables and indexes, as well as a limit on the combined size of all columns "
"an index covers. This means that indexes that are possible on other backends "
"will fail to be created under MySQL."
msgstr ""
"Наконец, MySQL имеет достаточно малый предел для длины имен столбцов, таблиц "
"и индексов, а также ограничение на общий размер всех столбцов и индексов. "
"Это означает, что индексы, которые могут создать другие бэкенды, не будут "
"созданы MySQL."

# b0c83ab5fa6b4d968f6285bb9c6812eb
#: ../../topics/migrations.txt:97
msgid "SQLite"
msgstr "SQLite"

# a48f00f1d859482d9b856382217ed931
#: ../../topics/migrations.txt:99
msgid ""
"SQLite has very little built-in schema alteration support, and so Django "
"attempts to emulate it by:"
msgstr ""
"SQLite очень плохо поддерживает изменения в структуре базы данных, но Django "
"пытается эмулировать их следующим образом:"

# edd1c416b9194276935df566ff109f52
#: ../../topics/migrations.txt:102
msgid "Creating a new table with the new schema"
msgstr "Создание новой таблицы для новой структуры"

# 8594d81ee95d41a4a953d3ae1b040e75
#: ../../topics/migrations.txt:103
msgid "Copying the data across"
msgstr "Копирование данных в новую таблицу"

# 9e20f7f9570b4e658eb434d72f2dddaa
#: ../../topics/migrations.txt:104
msgid "Dropping the old table"
msgstr "Удаление старой таблицы"

# a3a19e28138d44e39c15547dea89b05f
#: ../../topics/migrations.txt:105
msgid "Renaming the new table to match the original name"
msgstr "Переименование новой таблицы"

# ab790323ace64e6d9bb6f024cf0540a2
#: ../../topics/migrations.txt:107
msgid ""
"This process generally works well, but it can be slow and occasionally "
"buggy. It is not recommended that you run and migrate SQLite in a production "
"environment unless you are very aware of the risks and its limitations; the "
"support Django ships with is designed to allow developers to use SQLite on "
"their local machines to develop less complex Django projects without the "
"need for a full database."
msgstr ""
"Этот процесс как правило хорошо работает, но может быть медленным и иногда "
"глючит. Не рекомендуется использовать и мигрировать SQLite на \"боевом\" "
"сервере, если вы не очень осведомлены о рисках и его ограничениях. Django "
"поддерживает SQLite, чтобы позволить разработчикам использовать SQLite для "
"разработки простых проектов."

# 726b0cfa76d0423cae0d8d3acfdd75de
#: ../../topics/migrations.txt:115
msgid "Workflow"
msgstr "Работа с миграциями"

# 01c957fe7a4446d8a5ceaaf631745256
#: ../../topics/migrations.txt:117
#, fuzzy
msgid ""
"Django can create migrations for you. Make changes to your models - say, add "
"a field and remove a model - and then run :djadmin:`makemigrations`::"
msgstr ""
"Работать с миграциями просто. Измените модели - например, добавьте поле и "
"удалите модель - и затем запустите :djadmin:`makemigrations`::"

# a2b9fa34e05149e6974d78e22c9d00e1
#: ../../topics/migrations.txt:125
msgid ""
"Your models will be scanned and compared to the versions currently contained "
"in your migration files, and then a new set of migrations will be written "
"out. Make sure to read the output to see what ``makemigrations`` thinks you "
"have changed - it's not perfect, and for complex changes it might not be "
"detecting what you expect."
msgstr ""
"Ваши модели будут просканированы и сравнены с версией, которая содержится в "
"файлах миграций, затем будут созданы новые миграции. Не забывайте проверять "
"вывод команды, чтобы понимать, как ``makemigrations`` видит ваши изменения - "
"для сложных изменений вы можете получить не совсем ожидаемый результат."

# 18d7d96e09204ca9840d27da08afebf4
#: ../../topics/migrations.txt:131
msgid ""
"Once you have your new migration files, you should apply them to your "
"database to make sure they work as expected::"
msgstr ""
"Создав новые миграции, вам следует применить их к вашей базе данных, чтобы "
"убедиться, что всё работает::"

# 5d872ee9124b4a07879976c492d5a2e6
#: ../../topics/migrations.txt:141
msgid ""
"Once the migration is applied, commit the migration and the models change to "
"your version control system as a single commit - that way, when other "
"developers (or your production servers) check out the code, they'll get both "
"the changes to your models and the accompanying migration at the same time."
msgstr ""
"После того, как миграция отработала, добавьте миграции и изменения к моделям "
"в одном коммите - таким образом, когда другие разработчики (или на \"боевом"
"\" сервере) обновят код, они получат как изменения ваших моделей, так и "
"миграции для них."

#: ../../topics/migrations.txt:147
#, fuzzy
msgid ""
"If you want to give the migration(s) a meaningful name instead of a "
"generated one, you can use the :option:`makemigrations --name` option::"
msgstr ""
"Вы можете указать свое название для миграции с помощью опции :djadminopt:`--"
"name`::"

# 5ceefbc0ae96437ab20d3ad58c3434e8
#: ../../topics/migrations.txt:153
msgid "Version control"
msgstr "Контроль версий"

# 6e6cc39db4974621ab13eea81290580c
#: ../../topics/migrations.txt:155
msgid ""
"Because migrations are stored in version control, you'll occasionally come "
"across situations where you and another developer have both committed a "
"migration to the same app at the same time, resulting in two migrations with "
"the same number."
msgstr ""
"Поскольку миграции хранятся в системе контроля версий, вы будете иногда "
"сталкиваться с ситуациями, когда вы и другой разработчик одновременно "
"добавили миграции для одного приложения, в результате чего появилось две "
"миграции с одним и тем же номером."

# 9248cefb9a9c40cb8daa54a2877b8741
#: ../../topics/migrations.txt:160
msgid ""
"Don't worry - the numbers are just there for developers' reference, Django "
"just cares that each migration has a different name. Migrations specify "
"which other migrations they depend on - including earlier migrations in the "
"same app - in the file, so it's possible to detect when there's two new "
"migrations for the same app that aren't ordered."
msgstr ""
"Не волнуйтесь - номер просто для разработчиков, Django главное, чтобы "
"миграции имели уникальные названия. Миграции определяют зависимости к другим "
"миграции - включая предыдущую миграцию из этого приложения. Таким образом "
"можно определить наличие двух миграций с неправильным порядком."

# 84deca5223814007a1e161b11de1c08d
#: ../../topics/migrations.txt:166
msgid ""
"When this happens, Django will prompt you and give you some options. If it "
"thinks it's safe enough, it will offer to automatically linearize the two "
"migrations for you. If not, you'll have to go in and modify the migrations "
"yourself - don't worry, this isn't difficult, and is explained more in :ref:"
"`migration-files` below."
msgstr ""
"Когда это произойдет, Django предложит выбрать один из вариантов действий. "
"Если Django определит, что достаточно безопасно может сам решить проблему, "
"он предложит автоматически поменять порядок конфликтующим миграциям. Если "
"нет, то вам придется самостоятельно это сделать - не волнуйтесь, это не "
"трудно, и описано в :ref:`migration-files` ниже."

# 83ce6c2fc4cf419c9290f051e10d0cf6
#: ../../topics/migrations.txt:173
msgid "Dependencies"
msgstr "Зависимости"

# 54679ffa1b544f4f9e116a8ee1e271c9
#: ../../topics/migrations.txt:175
#, fuzzy
msgid ""
"While migrations are per-app, the tables and relationships implied by your "
"models are too complex to be created for one app at a time. When you make a "
"migration that requires something else to run - for example, you add a "
"``ForeignKey`` in your ``books`` app to your ``authors`` app - the resulting "
"migration will contain a dependency on a migration in ``authors``."
msgstr ""
"В то время как миграция находятся в контексте одного приложения, таблицы и "
"зависимости, определенные вашими моделями, обычно намного сложнее, и могут "
"работать не только с одним приложением. Когда вы делаете миграцию, которая "
"требует что-то ещё для запуска - например, вы добавляете ``ForeignKey`` в "
"вашем ``books`` приложении на приложение ``authors`` - в результате миграция "
"будет содержать зависимость от миграции в ``authors``."

# 2ba2a46ffc634bf3a70176dfb2892d2b
#: ../../topics/migrations.txt:181
msgid ""
"This means that when you run the migrations, the ``authors`` migration runs "
"first and creates the table the ``ForeignKey`` references, and then the "
"migration that makes the ``ForeignKey`` column runs afterwards and creates "
"the constraint. If this didn't happen, the migration would try to create the "
"``ForeignKey`` column without the table it's referencing existing and your "
"database would throw an error."
msgstr ""
"Это означает, что при запуске миграций, сначала применяются миграции "
"приложения ``authors``, создаётся таблица, на которую ссылается "
"``ForeignKey``, и затем миграция, которая создаёт ``ForeignKey``. Иначе "
"миграция попыталась бы создать ``ForeignKey`` на таблицу, которая может ещё "
"не существовать, и мы получили бы ошибку."

# 84fe850e74ea4945afd72b027500164e
#: ../../topics/migrations.txt:188
msgid ""
"This dependency behavior affects most migration operations where you "
"restrict to a single app. Restricting to a single app (either in "
"``makemigrations`` or ``migrate``) is a best-efforts promise, and not a "
"guarantee; any other apps that need to be used to get dependencies correct "
"will be."
msgstr ""
"Такое поведение зависимостей влияет на большинство миграционных операций, "
"которые вы ограничили рамками одного приложения. Подобное ограничение (в "
"``makemigrations`` или ``migrate``) было отличным обещанием, но не "
"гарантией. Любое другое приложение, которое потребуется для удовлетворения "
"зависимости, будет использовано автоматически."

#: ../../topics/migrations.txt:194
msgid ""
"Apps without migrations must not have relations (``ForeignKey``, "
"``ManyToManyField``, etc.) to apps with migrations. Sometimes it may work, "
"but it's not supported."
msgstr ""

# 93d22c6595194f3094940c55f3f59219
#: ../../topics/migrations.txt:201
msgid "Migration files"
msgstr "Файлы с миграциями"

# f4191a9e044c4817838ac48b0bda9b7d
#: ../../topics/migrations.txt:203
#, fuzzy
msgid ""
"Migrations are stored as an on-disk format, referred to here as \"migration "
"files\". These files are actually normal Python files with an agreed-upon "
"object layout, written in a declarative style."
msgstr ""
"Миграции сохраняются в так называемых \"файлах миграции\". Это обычные "
"Python файлы с классом миграции, который соблюдает определенный интерфейс. В "
"нём декларативно можно описать все необходимые операции и прочее."

# 5072a48f1c374d9a844fa2f42b150445
#: ../../topics/migrations.txt:207
msgid "A basic migration file looks like this::"
msgstr "Базовый файл миграции выглядит следующим образом::"

# 97a17ea5b5c04fc7ba0c30b4ae18d257
#: ../../topics/migrations.txt:220
msgid ""
"What Django looks for when it loads a migration file (as a Python module) is "
"a subclass of ``django.db.migrations.Migration`` called ``Migration``. It "
"then inspects this object for four attributes, only two of which are used "
"most of the time:"
msgstr ""
"При загрузке файла миграции (импортируя как Python модуль) Django ищет "
"дочерний класс ``django.db.migrations.Migration``, который должен называться "
"``Migration``. Затем он анализирует четыре атрибута класса, из которых "
"обычно используются только два:"

# 85521968937c4b35809f0651bfb13c3e
#: ../../topics/migrations.txt:225
msgid "``dependencies``, a list of migrations this one depends on."
msgstr "``dependencies`` - список зависимых миграций."

# a66452d7d04e4322aa8852309d5adc01
#: ../../topics/migrations.txt:226
msgid ""
"``operations``, a list of ``Operation`` classes that define what this "
"migration does."
msgstr ""
"``operations`` - список подклассов ``Operation``, которые определяют "
"необходимые для миграции операции."

# d16d3f5b003d4776af466667cb8adaac
#: ../../topics/migrations.txt:229
msgid ""
"The operations are the key; they are a set of declarative instructions which "
"tell Django what schema changes need to be made. Django scans them and "
"builds an in-memory representation of all of the schema changes to all apps, "
"and uses this to generate the SQL which makes the schema changes."
msgstr ""
"Список операций - самое главное в миграции. Он декларативно описывает "
"необходимые операции для изменения структуры базы данных. Django анализирует "
"все операции и в памяти строит схему всех необходимых изменений, чтобы "
"сгенерировать необходимые SQL-запросы."

# 0c1878d05fdb48a789a10c4e4500cb83
#: ../../topics/migrations.txt:234
msgid ""
"That in-memory structure is also used to work out what the differences are "
"between your models and the current state of your migrations; Django runs "
"through all the changes, in order, on an in-memory set of models to come up "
"with the state of your models last time you ran ``makemigrations``. It then "
"uses these models to compare against the ones in your ``models.py`` files to "
"work out what you have changed."
msgstr ""
"Схема в памяти также используется чтобы определить отличия между вашими "
"текущими моделями и состоянием моделей, описанном в миграциях. Django "
"проходит по всем изменениям и создает структуру моделей на момент последнего "
"выполнения ``makemigrations``. Затем эта структура сравнивается со "
"структурой моделей в ``models.py`` и определяются изменения, которые вы "
"внесли в ваши модели."

# 828822aec941440881441e9570538990
#: ../../topics/migrations.txt:241
msgid ""
"You should rarely, if ever, need to edit migration files by hand, but it's "
"entirely possible to write them manually if you need to. Some of the more "
"complex operations are not autodetectable and are only available via a hand-"
"written migration, so don't be scared about editing them if you have to."
msgstr ""
"Скорее всего вам никогда не понадобится менять сгенерированные миграции, но "
"при необходимости вы можете сами написать миграцию. Некоторые сложные "
"изменения Django не может автоматически определить, в таких случаях их "
"необходимо описать самостоятельно. Но не бойтесь, это несложно."

# 24659d2038274962b6b7efd88419eeb3
#: ../../topics/migrations.txt:247
msgid "Custom fields"
msgstr "Собственные поля"

# ad921bb3a72f42caa41885f7acc086d2
#: ../../topics/migrations.txt:249
msgid ""
"You can't modify the number of positional arguments in an already migrated "
"custom field without raising a ``TypeError``. The old migration will call "
"the modified ``__init__`` method with the old signature. So if you need a "
"new argument, please create a keyword argument and add something like "
"``assert 'argument_name' in kwargs`` in the constructor."
msgstr ""
"Вы не можете поменять количество позиционных аргументов в уже "
"промигрированном собственном поле, в таком случае будет вызвано исключение "
"``TypeError``. Это вызвано тем, что старая миграция попытается вызвать "
"измененный метод ``__init__`` со старыми аргументами. Поэтому, если вам "
"необходимо добавить новый аргумент в конструктор поля, используйте "
"именованный аргумент и добавьте в конструктор что-то вроде ``assert "
"'argument_name' in kwargs``."

#: ../../topics/migrations.txt:258
msgid "Model managers"
msgstr "Менеджеры модели"

#: ../../topics/migrations.txt:260
msgid ""
"You can optionally serialize managers into migrations and have them "
"available in :class:`~django.db.migrations.operations.RunPython` operations. "
"This is done by defining a ``use_in_migrations`` attribute on the manager "
"class::"
msgstr ""
"Вы можете сериализировать менеджеры модели в миграции, чтобы использовать в "
"их операциях :class:`~django.db.migrations.operations.RunPython`. Для этого "
"укажите атрибут ``use_in_migrations`` в классе менеджера::"

#: ../../topics/migrations.txt:270
msgid ""
"If you are using the :meth:`~django.db.models.from_queryset` function to "
"dynamically generate a manager class, you need to inherit from the generated "
"class to make it importable::"
msgstr ""
"Если вы используете функцию :meth:`~django.db.models.from_queryset`для "
"создания менеджера, вам следует унаследоваться от сгенерированного класса::"

#: ../../topics/migrations.txt:280
msgid ""
"Please refer to the notes about :ref:`historical-models` in migrations to "
"see the implications that come along."
msgstr "Советуем ознакомиться с заметками в разделе :ref:`historical-models`."

# 78cc6c6026894dd2a2a1825b20160148
#: ../../topics/migrations.txt:284
msgid "Initial migrations"
msgstr "Начальные миграции"

#: ../../topics/migrations.txt:288
#, fuzzy
msgid ""
"The \"initial migrations\" for an app are the migrations that create the "
"first version of that app's tables. Usually an app will have one initial "
"migration, but in some cases of complex model interdependencies it may have "
"two or more."
msgstr ""
"\"Начальные миграции\" приложения -- это миграции, которые создают первую "
"версию таблиц для приложения. Обычно приложение содержит только одну "
"начальную миграцию, но для сложной структуры моделей их может быть несколько."

#: ../../topics/migrations.txt:292
msgid ""
"Initial migrations are marked with an ``initial = True`` class attribute on "
"the migration class. If an ``initial`` class attribute isn't found, a "
"migration will be considered \"initial\" if it is the first migration in the "
"app (i.e. if it has no dependencies on any other migration in the same app)."
msgstr ""
"Начальные миграции помечаются атрибутом ``initial = True`` в классе "
"миграции. Если атрибут ``initial`` не указан, миграция будет считаться "
"\"начальной\", если это первая миграция в приложении (то есть она не зависит "
"от другой миграции текущего приложения)."

#: ../../topics/migrations.txt:297
#, fuzzy
msgid ""
"When the :option:`migrate --fake-initial` option is used, these initial "
"migrations are treated specially. For an initial migration that creates one "
"or more tables (``CreateModel`` operation), Django checks that all of those "
"tables already exist in the database and fake-applies the migration if so. "
"Similarly, for an initial migration that adds one or more fields "
"(``AddField`` operation), Django checks that all of the respective columns "
"already exist in the database and fake-applies the migration if so. Without "
"``--fake-initial``, initial migrations are treated no differently from any "
"other migration."
msgstr ""
"При запуске :djadmin:`migrate` с опцией :djadminopt:`--fake-initial` "
"начальные миграция выполняются по особенному. Если создаются таблицы "
"(операция ``CreateModel``), Django проверит наличие таблиц в базе данных, и "
"пометит миграцию выполненной, если таблицы найдены. Аналогично при "
"добавлении полей (операция ``AddField``), Django проверит наличие полей. Без "
"опции :djadminopt:`--fake-initial` начальные миграции выполняются как и "
"обычные."

#: ../../topics/migrations.txt:309
msgid "History consistency"
msgstr ""

#: ../../topics/migrations.txt:311
msgid ""
"As previously discussed, you may need to linearize migrations manually when "
"two development branches are joined. While editing migration dependencies, "
"you can inadvertently create an inconsistent history state where a migration "
"has been applied but some of its dependencies haven't. This is a strong "
"indication that the dependencies are incorrect, so Django will refuse to run "
"migrations or make new migrations until it's fixed. When using multiple "
"databases, you can use the :meth:`allow_migrate` method of :ref:`database "
"routers <topics-db-multi-db-routing>` to control which databases :djadmin:"
"`makemigrations` checks for consistent history."
msgstr ""

# d6e3c9c33e4140e3b2671b71649a2e33
#: ../../topics/migrations.txt:322
msgid "Adding migrations to apps"
msgstr "Добавление миграций в приложение"

# 21ccfb96e75f4b52b1212c4c0f055208
#: ../../topics/migrations.txt:324
#, fuzzy
msgid ""
"New apps come preconfigured to accept migrations, and so you can add "
"migrations by running :djadmin:`makemigrations` once you've made some "
"changes."
msgstr ""
"Добавить миграции в новое приложение очень просто. Они уже настроены на "
"использование миграций. Просто выполните :djadmin:`makemigrations` после "
"изменений моделей."

# 2f44414d8ff34e48a6eb1f3930e2f71f
#: ../../topics/migrations.txt:327
#, fuzzy
msgid ""
"If your app already has models and database tables, and doesn't have "
"migrations yet (for example, you created it against a previous Django "
"version), you'll need to convert it to use migrations by running::"
msgstr ""
"Если ваше приложение уже содержит модели и таблицы в базе данных, но не "
"содержит миграции (например, вы используете приложение для предыдущих версий "
"Django), вам необходимо преобразовать, чтобы использовать миграции. Это "
"просто::"

# 1a20f8ca21fa42a1a6f8c78530a04a9c
#: ../../topics/migrations.txt:333
#, fuzzy
msgid ""
"This will make a new initial migration for your app. Now, run ``python "
"manage.py migrate --fake-initial``, and Django will detect that you have an "
"initial migration *and* that the tables it wants to create already exist, "
"and will mark the migration as already applied. (Without the :option:"
"`migrate --fake-initial` flag, the command would error out because the "
"tables it wants to create already exist.)"
msgstr ""
"В приложении будет создана начальная миграция. Теперь выполните ``python "
"manage.py migrate --fake-initial``, Django увидит начальную миграцию, *и* "
"что таблицы, которые необходимо создать, уже существуют, и просто пометит "
"миграцию как уже выполненную. (Без флага :djadminopt:`--fake-initial` "
"команда :djadmin:`migrate` вернет ошибку т.к. таблицы, которые она пытается "
"создать, уже существуют.)"

# 96cea579051d4d039ba0b4e515506164
#: ../../topics/migrations.txt:340
msgid "Note that this only works given two things:"
msgstr ""
"Обратите внимание, это работает только при соблюдении следующих условий:"

# 68271eb684a84780b274d8f0343bbec5
#: ../../topics/migrations.txt:342
msgid ""
"You have not changed your models since you made their tables. For migrations "
"to work, you must make the initial migration *first* and then make changes, "
"as Django compares changes against migration files, not the database."
msgstr ""
"Вы не меняли модели после создания таблиц в базе данных. Чтобы миграции "
"сработали, необходимо *сначала* создать начальную миграцию, а потом вносить "
"изменения, т.к. Django определяет изменения по файлам миграций, а не "
"структуре в базе данных."

# bda3a3a821914dd3a6f694c835d4aa8f
#: ../../topics/migrations.txt:346
msgid ""
"You have not manually edited your database - Django won't be able to detect "
"that your database doesn't match your models, you'll just get errors when "
"migrations try to modify those tables."
msgstr ""
"Вы не меняли самостоятельно структуру базы данных. Django не сможет "
"определить, что структура базы данных не соответствует структуре ваших "
"моделей. Скорее всего вы получите ошибку при выполнении миграций."

# b05c63762b6144fbb47e2c647d51a802
#: ../../topics/migrations.txt:351
#, fuzzy
msgid "Reverting migrations"
msgstr "Объединение миграций"

#: ../../topics/migrations.txt:353
msgid ""
"Any migration can be reverted with :djadmin:`migrate` by using the number of "
"previous migrations::"
msgstr ""

#: ../../topics/migrations.txt:363
msgid ""
"If you want to revert all migrations applied for an app, use the name "
"``zero``::"
msgstr ""

# 8cfe809f9f394256aee811195a17024d
#: ../../topics/migrations.txt:377
msgid "Historical models"
msgstr "\"Исторические\" модели"

# 2ea6bb146c5845cd88c541474c9fa1fb
#: ../../topics/migrations.txt:379
#, fuzzy
msgid ""
"When you run migrations, Django is working from historical versions of your "
"models stored in the migration files. If you write Python code using the :"
"class:`~django.db.migrations.operations.RunPython` operation, or if you have "
"``allow_migrate`` methods on your database routers, you **need to use** "
"these historical model versions rather than importing them directly."
msgstr ""
"При выполнении миграций Django использует сгенерированные версии ваших "
"моделей, которые хранятся в файлах миграций. Если вы пишете Python код для "
"выполнения миграции, используя операцию :class:`~django.db.migrations."
"operations.RunPython`, или добавляете метод ``allow_migrate`` в ваш роутер "
"базы данных, Django предоставит вам эти модели для использования."

#: ../../topics/migrations.txt:387
msgid ""
"If you import models directly rather than using the historical models, your "
"migrations *may work initially* but will fail in the future when you try to "
"re-run old migrations (commonly, when you set up a new installation and run "
"through all the migrations to set up the database)."
msgstr ""

#: ../../topics/migrations.txt:392
msgid ""
"This means that historical model problems may not be immediately obvious. If "
"you run into this kind of failure, it's OK to edit the migration to use the "
"historical models rather than direct imports and commit those changes."
msgstr ""

# b23e65a8ba3d450da348b6f11d11dd42
#: ../../topics/migrations.txt:396
msgid ""
"Because it's impossible to serialize arbitrary Python code, these historical "
"models will not have any custom methods that you have defined. They will, "
"however, have the same fields, relationships, managers (limited to those "
"with ``use_in_migrations = True``) and ``Meta`` options (also versioned, so "
"they may be different from your current ones)."
msgstr ""
"Т.к. невозможно сериализовать произвольный код Python, эти версии моделей не "
"будут содержать методы, который вы добавили в модели. Однако, модели будут "
"содержать аналогичные поля, связи, менеджеры(только те, которые содержат "
"``use_in_migrations = True``) и параметры ``Meta`` (с учетом версии модели, "
"так что они могут отличаться от моделей, которые находятся на данный момент "
"в приложении)."

# bf580196957d4288b45074ec834e67a4
#: ../../topics/migrations.txt:404
msgid ""
"This means that you will NOT have custom ``save()`` methods called on "
"objects when you access them in migrations, and you will NOT have any custom "
"constructors or instance methods. Plan appropriately!"
msgstr ""
"Это означает, что вы НЕ сможете использовать переопределённый метод "
"``save()``. Также НЕ будет использоваться переопределённый конструктор "
"модели. Вы должны учитывать это при создании Python кода миграций!"

# f1d29382bef94e928c47fb3d66c9fc1e
#: ../../topics/migrations.txt:408
msgid ""
"References to functions in field options such as ``upload_to`` and "
"``limit_choices_to`` and model manager declarations with managers having "
"``use_in_migrations = True`` are serialized in migrations, so the functions "
"and classes will need to be kept around for as long as there is a migration "
"referencing them. Any :doc:`custom model fields </howto/custom-model-"
"fields>` will also need to be kept, since these are imported directly by "
"migrations."
msgstr ""
"Ссылки на функции, которые используются в параметрах поля (например, "
"``upload_to`` и ``limit_choices_to``), и менеджеры моделей с "
"``use_in_migrations = True`` будут сериализированы в миграциях. Такие "
"функции нельзя удалять из кода проекта, пока существуют миграции, которые "
"ссылаются на них. Все :doc:`собственные поля моделей </howto/custom-model-"
"fields>` также должы быть доступны т.к. они явно импортируются в миграциях."

# cb56ad648d0f46ef9c2f673870718af0
#: ../../topics/migrations.txt:415
#, fuzzy
msgid ""
"In addition, the concrete base classes of the model are stored as pointers, "
"so you must always keep base classes around for as long as there is a "
"migration that contains a reference to them. On the plus side, methods and "
"managers from these base classes inherit normally, so if you absolutely need "
"access to these you can opt to move them into a superclass."
msgstr ""
"В дополнение, родительские классы модели также сохраняются в миграциях в "
"виде указателей. Их необходимо сохранять, пока существует миграция, которая "
"ссылается на них. Но в качестве бонуса у вас будет доступ ко всем методам и "
"менеджерам из родительских классов. Так что, если вам действительно "
"необходим доступ в миграциях к собственным методам и менеджерам, вы можете "
"вынести их в родительский класс."

#: ../../topics/migrations.txt:421
msgid ""
"To remove old references, you can :ref:`squash migrations <migration-"
"squashing>` or, if there aren't many references, copy them into the "
"migration files."
msgstr ""

#: ../../topics/migrations.txt:427
msgid "Considerations when removing model fields"
msgstr "Советы по удалению полей модели"

#: ../../topics/migrations.txt:429
msgid ""
"Similar to the \"references to historical functions\" considerations "
"described in the previous section, removing custom model fields from your "
"project or third-party app will cause a problem if they are referenced in "
"old migrations."
msgstr ""
"Из предыдущего раздела вы узнали, что удаление собственных полей модели из "
"проекта или используемых приложений может привести к проблемам с миграциями, "
"если существуют миграции, которые ссылаются на эти поля."

#: ../../topics/migrations.txt:433
msgid ""
"To help with this situation, Django provides some model field attributes to "
"assist with model field deprecation using the :doc:`system checks framework "
"</topics/checks>`."
msgstr ""
"Чтобы помочь решить эту проблему, были добавлены атрибуты в поля модели, "
"которые могут указать на устаревшие поля при :doc:`проверке проекта </topics/"
"checks>`."

#: ../../topics/migrations.txt:437
msgid ""
"Add the ``system_check_deprecated_details`` attribute to your model field "
"similar to the following::"
msgstr "Добавьте атрибут ``system_check_deprecated_details`` к полю модели::"

#: ../../topics/migrations.txt:450
msgid ""
"After a deprecation period of your choosing (two or three feature releases "
"for fields in Django itself), change the ``system_check_deprecated_details`` "
"attribute to ``system_check_removed_details`` and update the dictionary "
"similar to::"
msgstr ""
"После определенного периода поддержки устаревшего кода (Django использует "
"три мажорных релиза для своих полей), замените "
"``system_check_deprecated_details`` на ``system_check_removed_details`` со "
"следующим значением::"

#: ../../topics/migrations.txt:465
msgid ""
"You should keep the field's methods that are required for it to operate in "
"database migrations such as ``__init__()``, ``deconstruct()``, and "
"``get_internal_type()``. Keep this stub field for as long as any migrations "
"which reference the field exist. For example, after squashing migrations and "
"removing the old ones, you should be able to remove the field completely."
msgstr ""
"Вы должны сохранить методы поля поля, которые используются в миграции: "
"``__init__()``, ``deconstruct()`` и ``get_internal_type()``. Храните это "
"поле-заглушку, пока существуют миграции, которые ссылаются на него. "
"Например, после объединения миграций и удаления старых, вы сможете полностью "
"удалить эти поля."

# 78cc6c6026894dd2a2a1825b20160148
#: ../../topics/migrations.txt:474
msgid "Data Migrations"
msgstr "Миграция данных"

# caca08d3c0924c9d869ea3e08a3a426b
#: ../../topics/migrations.txt:476
msgid ""
"As well as changing the database schema, you can also use migrations to "
"change the data in the database itself, in conjunction with the schema if "
"you want."
msgstr ""
"Вы можете использовать миграции не только для изменения структуры базы "
"данных, но и для изменения данных. Можно и в контексте изменения структуры, "
"чтобы мигрировать данные на новую структуру таблицы."

# 86ebda27190b4a50b41994a3bf942453
#: ../../topics/migrations.txt:479
msgid ""
"Migrations that alter data are usually called \"data migrations\"; they're "
"best written as separate migrations, sitting alongside your schema "
"migrations."
msgstr ""
"Миграции, которые изменяют данные, обычно называют \"миграциями данных\". Их "
"лучше выносить в отдельную миграцию."

# a964547006c94a2da3e5083deb24c044
#: ../../topics/migrations.txt:482
msgid ""
"Django can't automatically generate data migrations for you, as it does with "
"schema migrations, but it's not very hard to write them. Migration files in "
"Django are made up of :doc:`Operations </ref/migration-operations>`, and the "
"main operation you use for data migrations is :class:`~django.db.migrations."
"operations.RunPython`."
msgstr ""
"Django не может автоматически создать миграции данных для вас, как это "
"происходит с миграциями структуры, но их не сложно создать самостоятельно. "
"Файлы миграций в Django содержат :doc:`Операции </ref/migration-"
"operations>`. Для миграций данных вы будете использовать в основном :class:"
"`~django.db.migrations.operations.RunPython`."

# ba967cea60ea4690b64191434c501eaf
#: ../../topics/migrations.txt:488
msgid ""
"To start, make an empty migration file you can work from (Django will put "
"the file in the right place, suggest a name, and add dependencies for you)::"
msgstr ""
"Для начала создайте пустую миграцию (Django создаст файл миграции, положит "
"его в правильно место, создаст название и добавит необходимые зависимости)::"

# 7ac15aee7d1147b08226919cbd2e083f
#: ../../topics/migrations.txt:493
msgid "Then, open up the file; it should look something like this::"
msgstr "Теперь откройте файл, он будет выглядеть следующим образом::"

# 35cbbf276d474a86a0498482574aa6a3
#: ../../topics/migrations.txt:507
msgid ""
"Now, all you need to do is create a new function and have :class:`~django.db."
"migrations.operations.RunPython` use it. :class:`~django.db.migrations."
"operations.RunPython` expects a callable as its argument which takes two "
"arguments - the first is an :doc:`app registry </ref/applications/>` that "
"has the historical versions of all your models loaded into it to match where "
"in your history the migration sits, and the second is a :doc:`SchemaEditor </"
"ref/schema-editor>`, which you can use to manually effect database schema "
"changes (but beware, doing this can confuse the migration autodetector!)"
msgstr ""
"Теперь необходимо создать новую функцию и указать её в :class:`~django.db."
"migrations.operations.RunPython`. :class:`~django.db.migrations.operations."
"RunPython` принимает в качестве аргумента функцию (или любой другой "
"вызываемый объект), которая принимает два аргумента. Первый - это :doc:"
"`регистр приложений </ref/applications/>`, который содержит приложения и "
"исторические версии моделей, соответствующие текущей структуре, описанной в "
"миграциях. Второй - :doc:`SchemaEditor </ref/schema-editor>`, который можно "
"использовать для изменения структуры базы данных (но будьте осторожны, это "
"может сбить с толку автоматическое определение изменений структуры моделей!)"

# d5ddfd6ed08e4171a9d56e53e6e4c5af
#: ../../topics/migrations.txt:517
#, fuzzy
msgid ""
"Let's write a migration that populates our new ``name`` field with the "
"combined values of ``first_name`` and ``last_name`` (we've come to our "
"senses and realized that not everyone has first and last names). All we need "
"to do is use the historical model and iterate over the rows::"
msgstr ""
"Давайте создадим простую миграцию, которая заполняет новое поле ``name`` "
"комбинацией значений ``first_name`` и ``last_name``. Для этого будем "
"использовать текущую версию модели и в цикле изменим все объекты::"

# 47d1000613f6492f84b5b2943397671b
#: ../../topics/migrations.txt:542
#, fuzzy
msgid ""
"Once that's done, we can run ``python manage.py migrate`` as normal and the "
"data migration will run in place alongside other migrations."
msgstr ""
"Теперь выполним ``python manage.py migrate`` и миграция данных будет "
"применена вместе с остальными миграциями."

# 59ba1eb9a4674d268180de43e7448bec
#: ../../topics/migrations.txt:545
msgid ""
"You can pass a second callable to :class:`~django.db.migrations.operations."
"RunPython` to run whatever logic you want executed when migrating backwards. "
"If this callable is omitted, migrating backwards will raise an exception."
msgstr ""
"Вы можете передать вторым аргументом :class:`~django.db.migrations."
"operations.RunPython` еще одну функцию, которая будет использоваться при "
"отмене миграции. Если такая функция не указана, то при попытке отменить "
"миграцию будет вызвано исключение."

#: ../../topics/migrations.txt:551
msgid "Accessing models from other apps"
msgstr "Доступ к моделям в других приложениях"

#: ../../topics/migrations.txt:553
msgid ""
"When writing a ``RunPython`` function that uses models from apps other than "
"the one in which the migration is located, the migration's ``dependencies`` "
"attribute should include the latest migration of each app that is involved, "
"otherwise you may get an error similar to: ``LookupError: No installed app "
"with label 'myappname'`` when you try to retrieve the model in the "
"``RunPython`` function using ``apps.get_model()``."
msgstr ""
"Если функция для ``RunPython`` использует модели другого приложения, атрибут "
"``dependencies`` миграции должен включать последнюю миграцию приложения, "
"модель которого используется. Иначе вы можете получить исключение: "
"``LookupError: No installed app with label 'myappname'`` в функции "
"``RunPython`` при использовании ``apps.get_model()``."

#: ../../topics/migrations.txt:560
msgid ""
"In the following example, we have a migration in ``app1`` which needs to use "
"models in ``app2``. We aren't concerned with the details of ``move_m1`` "
"other than the fact it will need to access models from both apps. Therefore "
"we've added a dependency that specifies the last migration of ``app2``::"
msgstr ""
"В примере у нас есть миграция из приложения ``app1``, которая используем "
"модели из приложения ``app2``. Нас не интересует реализация ``move_m1``, но "
"мы знаем, что этой функции необходим доступ к моделям из обоих приложений. "
"Для этого мы добавили в зависимости последнюю миграцию ``app2``::"

# 78cc6c6026894dd2a2a1825b20160148
#: ../../topics/migrations.txt:578
msgid "More advanced migrations"
msgstr "Миграции для продвинутых"

# 243e42c894724ebc90d42ee79ec26b26
#: ../../topics/migrations.txt:580
msgid ""
"If you're interested in the more advanced migration operations, or want to "
"be able to write your own, see the :doc:`migration operations reference </"
"ref/migration-operations>` and the \"how-to\" on :doc:`writing migrations </"
"howto/writing-migrations>`."
msgstr ""
"Если вы хотите узнать как писать более сложные миграции, или как создавать "
"миграции с нуля, смотрите :doc:`раздел об операциях в миграциях </ref/"
"migration-operations>` и \"how-to\" о :doc:`создании миграций </howto/"
"writing-migrations>`."

# b05c63762b6144fbb47e2c647d51a802
#: ../../topics/migrations.txt:588
msgid "Squashing migrations"
msgstr "Объединение миграций"

# cfb42be39fa345f89d66b0390bfe1925
#: ../../topics/migrations.txt:590
msgid ""
"You are encouraged to make migrations freely and not worry about how many "
"you have; the migration code is optimized to deal with hundreds at a time "
"without much slowdown. However, eventually you will want to move back from "
"having several hundred migrations to just a few, and that's where squashing "
"comes in."
msgstr ""
"Вы можете создавать сколько угодно миграций и не задумываться об их "
"количестве. Код миграций оптимизирован и может работать с сотнями миграций "
"за вменяемое время. Но, если вы хотите уменьшить количество миграций, вы "
"можете объединить их."

# d57634a0412740bb8edf86915f98f1e0
#: ../../topics/migrations.txt:595
msgid ""
"Squashing is the act of reducing an existing set of many migrations down to "
"one (or sometimes a few) migrations which still represent the same changes."
msgstr ""
"Объединение позволяет сократить количество миграций до одной (или "
"нескольких), которая будет выполнять аналогичные изменения структуры."

# aeffdbc435b244b1b46c8924ed9a3654
#: ../../topics/migrations.txt:598
msgid ""
"Django does this by taking all of your existing migrations, extracting their "
"``Operation``\\s and putting them all in sequence, and then running an "
"optimizer over them to try and reduce the length of the list - for example, "
"it knows that :class:`~django.db.migrations.operations.CreateModel` and :"
"class:`~django.db.migrations.operations.DeleteModel` cancel each other out, "
"and it knows that :class:`~django.db.migrations.operations.AddField` can be "
"rolled into :class:`~django.db.migrations.operations.CreateModel`."
msgstr ""
"Django загрузит все ваши миграции, соберёт последовательность объектов "
"``Operation``, затем попытается оптимизировать и сократить этот список. "
"Например, Django понимает, что :class:`~django.db.migrations.operations."
"CreateModel` и :class:`~django.db.migrations.operations.DeleteModel` "
"отменяют друг друга, и что :class:`~django.db.migrations.operations."
"AddField` может быть добавлена в :class:`~django.db.migrations.operations."
"CreateModel`."

# 84f7908d57ba42109a3ddd1f6de8cc35
#: ../../topics/migrations.txt:606
#, fuzzy
msgid ""
"Once the operation sequence has been reduced as much as possible - the "
"amount possible depends on how closely intertwined your models are and if "
"you have any :class:`~django.db.migrations.operations.RunSQL` or :class:"
"`~django.db.migrations.operations.RunPython` operations (which can't be "
"optimized through unless they are marked as ``elidable``) - Django will then "
"write it back out into a new set of migration files."
msgstr ""
"Когда список операций будет оптимизирован насколько возможно - это зависит "
"от сложности связей между моделями, использовались ли операции :class:"
"`~django.db.migrations.operations.RunSQL` или :class:`~django.db.migrations."
"operations.RunPython` (которые нельзя оптимизировать) - Django добавит их в "
"новые миграции."

# e066934d762f4f90ac2019c019074338
#: ../../topics/migrations.txt:613
#, fuzzy
msgid ""
"These files are marked to say they replace the previously-squashed "
"migrations, so they can coexist with the old migration files, and Django "
"will intelligently switch between them depending where you are in the "
"history. If you're still part-way through the set of migrations that you "
"squashed, it will keep using them until it hits the end and then switch to "
"the squashed history, while new installs will use the new squashed migration "
"and skip all the old ones."
msgstr ""
"Новые файлы миграций содержат пометку, что они созданы на основе "
"существующих миграций, таким образом они могут существовать и использоваться "
"параллельно со старыми миграциями. Django самостоятельно переключится между "
"этими миграциями, учитывая в какой точке истории миграций вы сейчас "
"находитесь. Если вы применили только часть миграций, которые были "
"объединены, Django будет использовать старые миграции, пока не выполнит их, "
"затем переключится на новую историю. Для новой базы данных сразу будут "
"использоваться новые миграции, старые миграции будут пропущены."

# a01fb381ce1e4fdeb85506cf995740a5
#: ../../topics/migrations.txt:620
#, fuzzy
msgid ""
"This enables you to squash and not mess up systems currently in production "
"that aren't fully up-to-date yet. The recommended process is to squash, "
"keeping the old files, commit and release, wait until all systems are "
"upgraded with the new release (or if you're a third-party project, ensure "
"your users upgrade releases in order without skipping any), and then remove "
"the old files, commit and do a second release."
msgstr ""
"Это позволяет объединить миграции и не сломать проект на сервере, который "
"ещё не обновили до последней версии. Рекомендуем следующую "
"последовательность действий: объединяем миграции, старые не удаляем, "
"коммитим и обновляем все сервера при следующем релизе (если это "
"распространяемое приложение, убеждаемся, что все пользователи обновились до "
"последней версии), удаляем старые миграции, коммитим и обновляем сервера до "
"последней релизной версии."

# 3451808250c94876afff0bbdd45f13b6
#: ../../topics/migrations.txt:627
#, fuzzy
msgid ""
"The command that backs all this is :djadmin:`squashmigrations` - pass it the "
"app label and migration name you want to squash up to, and it'll get to "
"work::"
msgstr ""
"Для объединения миграций существует команда djadmin:`squashmigrations`. "
"Просто передайте ей название приложения и название миграции, до который вы "
"хотите выполнить объединение::"

#: ../../topics/migrations.txt:645
msgid ""
"Use the :option:`squashmigrations --squashed-name` option if you want to set "
"the name of the squashed migration rather than use an autogenerated one."
msgstr ""

# 46598c23bf684d70a430c487472d4800
#: ../../topics/migrations.txt:648
msgid ""
"Note that model interdependencies in Django can get very complex, and "
"squashing may result in migrations that do not run; either mis-optimized (in "
"which case you can try again with ``--no-optimize``, though you should also "
"report an issue), or with a ``CircularDependencyError``, in which case you "
"can manually resolve it."
msgstr ""
"Обратите внимание, зависимости между моделями могут быть очень сложными. В "
"результате объединения может получиться неработающая миграция или "
"неправильно оптимизированная (в этом случае можете попробовать с опцией ``--"
"no-optimize``, и желательно сообщить нам о проблеме), или может вызывать "
"исключение ``CircularDependencyError`` (в этом случае вы можете "
"самостоятельно исправить проблему)."

# 5066f1f881df4e05b94b3e15db7b33f1
#: ../../topics/migrations.txt:653
#, fuzzy
msgid ""
"To manually resolve a ``CircularDependencyError``, break out one of the "
"ForeignKeys in the circular dependency loop into a separate migration, and "
"move the dependency on the other app with it. If you're unsure, see how :"
"djadmin:`makemigrations` deals with the problem when asked to create brand "
"new migrations from your models. In a future release of Django, :djadmin:"
"`squashmigrations` will be updated to attempt to resolve these errors itself."
msgstr ""
"Чтобы устранить исключение ``CircularDependencyError``, вынесите один из "
"``ForeignKey``, который привел к циклической зависимости, в отдельную "
"миграцию и перенести зависимость миграции в другое приложение, которое "
"использует этот ``ForeignKey``. Если вы не уверены как сделать это "
"правильно, посмотрите как ``makemigrations`` делает это при создании новой "
"миграции по вашим моделям. В следующих версиях Django мы обновим "
"``squashmigrations``, чтобы такие проблемы решались автоматически."

# bf4541873091465f9b37a58cfe2ce083
#: ../../topics/migrations.txt:661
msgid ""
"Once you've squashed your migration, you should then commit it alongside the "
"migrations it replaces and distribute this change to all running instances "
"of your application, making sure that they run ``migrate`` to store the "
"change in their database."
msgstr ""
"После объединения миграций закоммитьте их, не удаляя старые миграции. После "
"этого обновите все установленные версии проекта."

# aa8e15497a994beca02cf01681f4da83
#: ../../topics/migrations.txt:666
#, fuzzy
msgid ""
"You must then transition the squashed migration to a normal migration by:"
msgstr ""
"После этого объединенную миграцию можно преобразовать в обычную начальную "
"миграцию:"

# b37376d7fb7447d799c3f7f9ee09bf17
#: ../../topics/migrations.txt:668
#, fuzzy
msgid "Deleting all the migration files it replaces."
msgstr "Удалите все миграции, которые она заменяет"

#: ../../topics/migrations.txt:669
msgid ""
"Updating all migrations that depend on the deleted migrations to depend on "
"the squashed migration instead."
msgstr ""

# f44825f894a04615ae01b6556783d2a1
#: ../../topics/migrations.txt:671
#, fuzzy
msgid ""
"Removing the ``replaces`` attribute in the ``Migration`` class of the "
"squashed migration (this is how Django tells that it is a squashed "
"migration)."
msgstr ""
"Удалите аргумент ``replaces`` в классе ``Migration`` объединенной миграции "
"(он указывает Django, что это объединенная миграция)"

# 83726789d7a8414da267edcbc8ede394
#: ../../topics/migrations.txt:675
msgid ""
"Once you've squashed a migration, you should not then re-squash that "
"squashed migration until you have fully transitioned it to a normal "
"migration."
msgstr ""
"Объединив миграции в новую, вы не можете снова использовать её при новом "
"объединении, пока она не будет преобразована в обычную миграцию."

# 8158664a9a024e989692d2fea012dbe4
#: ../../topics/migrations.txt:682
msgid "Serializing values"
msgstr "Сериализация значений"

# 3835dae0ccbd4a0290e45bf8b2e28c36
#: ../../topics/migrations.txt:684
#, fuzzy
msgid ""
"Migrations are Python files containing the old definitions of your models - "
"thus, to write them, Django must take the current state of your models and "
"serialize them out into a file."
msgstr ""
"Миграции - это Python файлы, которые содержат старые определения ваших "
"моделей. Поэтому, чтобы создать их, Django необходимо получить текущее "
"состояние ваших моделей и сериализовать его в файле."

# 4e3f435fa57444b89db594c7775fe810
#: ../../topics/migrations.txt:688
msgid ""
"While Django can serialize most things, there are some things that we just "
"can't serialize out into a valid Python representation - there's no Python "
"standard for how a value can be turned back into code (``repr()`` only works "
"for basic values, and doesn't specify import paths)."
msgstr ""
"Хотя Django может сериализовать большинство вещей, есть некоторые веши, "
"которые нельзя сериализовать в представление Python - нет в Python "
"стандарта, который определяет как преобразовать значение обратно в код "
"(``repr()`` работает только для простых значений и не позволяет указать путь "
"для импорта)."

# 24a0141f270c435cb51d7200f3235c4e
#: ../../topics/migrations.txt:693
msgid "Django can serialize the following:"
msgstr "Django позволяет сериализовать следующее:"

# 3c023ba5c7bb4f328ba2a69bb452d4b9
#: ../../topics/migrations.txt:695
#, fuzzy
msgid ""
"``int``, ``float``, ``bool``, ``str``, ``bytes``, ``None``, ``NoneType``"
msgstr ""
"``int``, ``long``, ``float``, ``bool``, ``str``, ``unicode``, ``bytes``, "
"``None``"

# 8ac31979a06049e6b613c6934ef117d5
#: ../../topics/migrations.txt:696
#, fuzzy
msgid "``list``, ``set``, ``tuple``, ``dict``, ``range``."
msgstr "``list``, ``set``, ``tuple``, ``dict``"

# c5c2b1bb8f8046d89d64035c31fbe595
#: ../../topics/migrations.txt:697
msgid ""
"``datetime.date``, ``datetime.time``, and ``datetime.datetime`` instances "
"(include those that are timezone-aware)"
msgstr ""
"Объекты ``datetime.date``, ``datetime.time`` и ``datetime.datetime`` "
"(включая те, у которых указан часовой пояс)"

# dccd4f32c500499495cb2d0b1695c0a6
#: ../../topics/migrations.txt:699
msgid "``decimal.Decimal`` instances"
msgstr "Объекты ``decimal.Decimal``"

# dccd4f32c500499495cb2d0b1695c0a6
#: ../../topics/migrations.txt:700
#, fuzzy
msgid "``enum.Enum`` instances"
msgstr "Объекты ``decimal.Decimal``"

# dccd4f32c500499495cb2d0b1695c0a6
#: ../../topics/migrations.txt:701
#, fuzzy
msgid "``uuid.UUID`` instances"
msgstr "Объекты ``decimal.Decimal``"

#: ../../topics/migrations.txt:702
#, fuzzy
msgid ""
":func:`functools.partial` and :class:`functools.partialmethod` instances "
"which have serializable ``func``, ``args``, and ``keywords`` values."
msgstr ""
"Объекты ``functools.partial``, которые содержат сериализируемые значения "
"``func``, ``args`` и ``keywords``."

#: ../../topics/migrations.txt:704
msgid "``LazyObject`` instances which wrap a serializable value."
msgstr "Объекты ``LazyObject``, которые содержат сериализируемое значение."

#: ../../topics/migrations.txt:705
msgid ""
"Enumeration types (e.g. ``TextChoices`` or ``IntegerChoices``) instances."
msgstr ""

# 3c7e2115eade4fdb8ff6d89fce83e488
#: ../../topics/migrations.txt:706
msgid "Any Django field"
msgstr "Любое поле Django"

# 2ccc05225783451e82a337bc5807e94c
#: ../../topics/migrations.txt:707
msgid ""
"Any function or method reference (e.g. ``datetime.datetime.today``) (must be "
"in module's top-level scope)"
msgstr ""
"Ссылку на любую функцию или метод (например ``datetime.datetime.today``) "
"(должны быть доступны на уровне модуля)"

# fb8f447a22184d50a0c6a13137869e0c
#: ../../topics/migrations.txt:708
#, fuzzy
msgid "Unbound methods used from within the class body"
msgstr "Непривязанные методы в теле класса (смотрите ниже)"

#: ../../topics/migrations.txt:709
msgid "Any class reference (must be in module's top-level scope)"
msgstr "Ссылка на класс (должны быть доступны на уровне модуля)"

# 3690be5782854dcd89e24d2ecba67e13
#: ../../topics/migrations.txt:710
msgid ""
"Anything with a custom ``deconstruct()`` method (:ref:`see below <custom-"
"deconstruct-method>`)"
msgstr ""
"Любой объект с методом ``deconstruct()`` (:ref:`смотрите ниже <custom-"
"deconstruct-method>`)"

#: ../../topics/migrations.txt:714
#, fuzzy
msgid "Serialization support for ``NoneType`` was added."
msgstr ""
"Была добавлена возможность сериализации объектов ``functools.partial`` и "
"``LazyObject``."

# b65f12427a76490c92420917724eee76
#: ../../topics/migrations.txt:716
msgid "Django cannot serialize:"
msgstr "Django не может сериализовать:"

#: ../../topics/migrations.txt:718
msgid "Nested classes"
msgstr "Вложенные классы"

# 13268fe8db994ec9b7c900f028469b2f
#: ../../topics/migrations.txt:719
msgid "Arbitrary class instances (e.g. ``MyClass(4.3, 5.7)``)"
msgstr "Экземпляры произвольного класса (например ``MyClass(4.3, 5.7)``)"

# 52ca0452e3b04e1aabbad36d63fa5563
#: ../../topics/migrations.txt:720
msgid "Lambdas"
msgstr "Лямбда-функции"

# 24659d2038274962b6b7efd88419eeb3
#: ../../topics/migrations.txt:725
#, fuzzy
msgid "Custom serializers"
msgstr "Собственные поля"

#: ../../topics/migrations.txt:729
msgid ""
"You can serialize other types by writing a custom serializer. For example, "
"if Django didn't serialize :class:`~decimal.Decimal` by default, you could "
"do this::"
msgstr ""

#: ../../topics/migrations.txt:744
msgid ""
"The first argument of ``MigrationWriter.register_serializer()`` is a type or "
"iterable of types that should use the serializer."
msgstr ""

#: ../../topics/migrations.txt:747
msgid ""
"The ``serialize()`` method of your serializer must return a string of how "
"the value should appear in migrations and a set of any imports that are "
"needed in the migration."
msgstr ""

# 2fa61872887743bc9e75f74209baa682
#: ../../topics/migrations.txt:754
#, fuzzy
msgid "Adding a ``deconstruct()`` method"
msgstr "Метод deconstruct()"

# 117714d32b1948669f2087b00f43647b
#: ../../topics/migrations.txt:756
msgid ""
"You can let Django serialize your own custom class instances by giving the "
"class a ``deconstruct()`` method. It takes no arguments, and should return a "
"tuple of three things ``(path, args, kwargs)``:"
msgstr ""
"Вы можете научить Django сериализовать объекты вашего класса, добавив ему "
"метод ``deconstruct()``. Он не принимает аргументы и должен вернуть кортеж "
"из трех элементов ``(path, args, kwargs)``:"

# 89f6e73cf8a34929a83c105d8d335c17
#: ../../topics/migrations.txt:760
msgid ""
"``path`` should be the Python path to the class, with the class name "
"included as the last part (for example, ``myapp.custom_things.MyClass``). If "
"your class is not available at the top level of a module it is not "
"serializable."
msgstr ""
"``path`` - Python путь для импорта класса, включая название класса (например "
"``myapp.custom_things.MyClass``). Если класс не доступен для импорта "
"напрямую из модуля, его нельзя сериализировать."

# 01cf3c978b104f3b85885d5b9ecebf5d
#: ../../topics/migrations.txt:764
msgid ""
"``args`` should be a list of positional arguments to pass to your class' "
"``__init__`` method. Everything in this list should itself be serializable."
msgstr ""
"``args`` - список позиционных аргументов, которые необходимо передать в "
"метод ``__init__``. Аргументы также должны быть сериализируемыми."

# 25d989e3b97545d9a8a97300e228dabe
#: ../../topics/migrations.txt:767
msgid ""
"``kwargs`` should be a dict of keyword arguments to pass to your class' "
"``__init__`` method. Every value should itself be serializable."
msgstr ""
"``kwargs`` - список именованных аргументов, которые необходимо передать в "
"метод ``__init__``. Аргументы также должны быть сериализируемыми."

# f00919bbd84045d783b7c4fdf0fb1c34
#: ../../topics/migrations.txt:772
msgid ""
"This return value is different from the ``deconstruct()`` method :ref:`for "
"custom fields <custom-field-deconstruct-method>` which returns a tuple of "
"four items."
msgstr ""
"Метод ``deconstruct()`` :ref:`собственных полей <custom-field-deconstruct-"
"method>` немного отличается, он должен возвращать кортеж из четырех "
"элементов."

# 9b59414e533a418fbe719f49f202c836
#: ../../topics/migrations.txt:776
msgid ""
"Django will write out the value as an instantiation of your class with the "
"given arguments, similar to the way it writes out references to Django "
"fields."
msgstr ""
"Django запишет полученное значение, как инициализацию для всего класса с "
"заданными аргументами, аналогично тому, как это делается для встроенных "
"полей."

#: ../../topics/migrations.txt:779
msgid ""
"To prevent a new migration from being created each time :djadmin:"
"`makemigrations` is run, you should also add a ``__eq__()`` method to the "
"decorated class. This function will be called by Django's migration "
"framework to detect changes between states."
msgstr ""
"Чтобы Django не создавал новую миграцию при каждом выполнении :djadmin:"
"`makemigrations`, добавьте метод ``__eq__()`` к декорируемому классу. Эта "
"функция будет вызываться Django, чтобы определить не поменялось ли состояние "
"моделей."

# 9025384595b24055a0a4eeb44186c79e
#: ../../topics/migrations.txt:784
msgid ""
"As long as all of the arguments to your class' constructor are themselves "
"serializable, you can use the ``@deconstructible`` class decorator from "
"``django.utils.deconstruct`` to add the ``deconstruct()`` method::"
msgstr ""
"Если все аргументы вашего класса сериализируемые, то для автоматического "
"создания метода вы можете использовать декоратор класса ``@deconstructible`` "
"из ``django.utils.deconstruct``, чтобы добавить метод ``deconstruct()``::"

# 9f6ea85914344b83b692ecbb472af7b3
#: ../../topics/migrations.txt:801
msgid ""
"The decorator adds logic to capture and preserve the arguments on their way "
"into your constructor, and then returns those arguments exactly when "
"deconstruct() is called."
msgstr ""
"Декоратор сохраняет все аргументы, передаваемые в конструктор, и возвращает "
"их при вызове ``deconstruct()``."

#: ../../topics/migrations.txt:806
msgid "Supporting multiple Django versions"
msgstr "Поддержка нескольких версий Django"

#: ../../topics/migrations.txt:808
msgid ""
"If you are the maintainer of a third-party app with models, you may need to "
"ship migrations that support multiple Django versions. In this case, you "
"should always run :djadmin:`makemigrations` **with the lowest Django version "
"you wish to support**."
msgstr ""
"Если вы разрабатываете распространяемое приложение с моделями, вам "
"необходимо создать миграции, которые поддерживают различные версии Django. В "
"этом случае вы должны всегда выполнять :djadmin:`makemigrations` **для самый "
"старой версии Django, которую вы поддерживаете**."

#: ../../topics/migrations.txt:813
msgid ""
"The migrations system will maintain backwards-compatibility according to the "
"same policy as the rest of Django, so migration files generated on Django X."
"Y should run unchanged on Django X.Y+1. The migrations system does not "
"promise forwards-compatibility, however. New features may be added, and "
"migration files generated with newer versions of Django may not work on "
"older versions."
msgstr ""
"Система миграций поддерживает обратную совместимость как и остальная часть "
"Django, и файлы миграций для Django X.Y должны работать для Django X.Y+1. "
"Однако, система миграций не гарантирует обратную совместимость. Могут "
"добавляться новые возможности и новые миграции не будут работать на старой "
"версии Django."

#: ../../topics/migrations.txt:823
#, fuzzy
msgid ":doc:`The Migrations Operations Reference </ref/migration-operations>`"
msgstr ":doc:`Описание операций миграции </ref/migration-operations>`"

#: ../../topics/migrations.txt:822
msgid ""
"Covers the schema operations API, special operations, and writing your own "
"operations."
msgstr ""
"Описывает API операций для изменений структуры базы данных, специальные "
"операции, и создания своих операций."

#: ../../topics/migrations.txt:826
#, fuzzy
msgid ":doc:`The Writing Migrations \"how-to\" </howto/writing-migrations>`"
msgstr ":doc:`\"how-to\" о создании миграций </howto/writing-migrations>`"

#: ../../topics/migrations.txt:826
msgid ""
"Explains how to structure and write database migrations for different "
"scenarios you might encounter."
msgstr ""
"Описывает как самостоятельно создать миграции для решения различных ситуаций."

# b2a89d061fa44bb28495371dca883717
#~ msgid ""
#~ "PostgreSQL is the most capable of all the databases here in terms of "
#~ "schema support; the only caveat is that adding columns with default "
#~ "values will cause a full rewrite of the table, for a time proportional to "
#~ "its size."
#~ msgstr ""
#~ "PostgreSQL предоставляет больше всего возможностей для миграций структуры "
#~ "данных. Единственное ограничение в том, что добавление столбцов со "
#~ "значениями по умолчанию вызывает полную перезапись таблицы и требует "
#~ "времени, пропорциональное её размеру."

#, fuzzy
#~ msgid "Serialization support for ``uuid.UUID`` was added."
#~ msgstr ""
#~ "Была добавлена возможность сериализации объектов ``functools.partial`` и "
#~ "``LazyObject``."

# e6c9f707415a4039a56aa5554374de94
#~ msgid "Django can serialize the following on Python 3 only:"
#~ msgstr "Django может сериализовать следующее только в Python 3:"

# 2c8ab6d200d245e1ad286a66e289866e
#~ msgid ""
#~ "Due to the fact ``__qualname__`` was only introduced in Python 3, Django "
#~ "can only serialize the following pattern (an unbound method used within "
#~ "the class body) on Python 3, and will fail to serialize a reference to it "
#~ "on Python 2::"
#~ msgstr ""
#~ "Т.к. ``__qualname__`` был добавлен только в Python 3, Django может "
#~ "сериализовать следующее только в Python 3 (непривязанный метод в теле "
#~ "класса), но не может в Python 2::"

# 0f4145e724d1413db78f0733b080c625
#~ msgid ""
#~ "If you are using Python 2, we recommend you move your methods for "
#~ "upload_to and similar arguments that accept callables (e.g. ``default``) "
#~ "to live in the main module body, rather than the class body."
#~ msgstr ""
#~ "Для Python 2 мы рекомендуем вынести методы, которые используются как "
#~ "значения для ``upload_to`` или других подобных параметров, принимающих "
#~ "функции (например ``default``), в тело модуля."

#~ msgid "Supporting Python 2 and 3"
#~ msgstr "Поддержка Python 2 и 3"

#~ msgid ""
#~ "In order to generate migrations that support both Python 2 and 3, all "
#~ "string literals used in your models and fields (e.g. ``verbose_name``, "
#~ "``related_name``, etc.), must be consistently either bytestrings or text "
#~ "(unicode) strings in both Python 2 and 3 (rather than bytes in Python 2 "
#~ "and text in Python 3, the default situation for unmarked string "
#~ "literals.) Otherwise running :djadmin:`makemigrations` under Python 3 "
#~ "will generate spurious new migrations to convert all these string "
#~ "attributes to text."
#~ msgstr ""
#~ "Чтобы создать миграции, которые поддерживают Python 2 и 3, все строки, "
#~ "которые используются в ваших моделях и полях (например ``verbose_name``, "
#~ "``related_name``, и т.д.), должны быть байтовыми строками или текстовыми "
#~ "(unicode) и в Python 2, и Python 3 (а не байтами в Python 2 и текстом в "
#~ "Python 3, что бывает по умолчанию, если тип строки явно не указан.) Иначе "
#~ "выполнение :djadmin:`makemigrations` на Python 3 создаст миграцию, "
#~ "которая преобразует все строковые атрибуты в текст."

#~ msgid ""
#~ "The easiest way to achieve this is to follow the advice in Django's :doc:"
#~ "`Python 3 porting guide </topics/python3>` and make sure that all your "
#~ "modules begin with ``from __future__ import unicode_literals``, so that "
#~ "all unmarked string literals are always unicode, regardless of Python "
#~ "version. When you add this to an app with existing migrations generated "
#~ "on Python 2, your next run of :djadmin:`makemigrations` on Python 3 will "
#~ "likely generate many changes as it converts all the bytestring attributes "
#~ "to text strings; this is normal and should only happen once."
#~ msgstr ""
#~ "Самый простой способ добиться этого - следовать :doc:`гайду Django по "
#~ "переходу на Python 3 </topics/python3>` и убедиться, что все модули "
#~ "содержат в начале ``from __future__ import unicode_literals``, и все "
#~ "строки в них являются юникод-строками, независимо от версии Python. Если "
#~ "вы добавите это текущий проект, который содержим миграции, созданные на "
#~ "Python 2, при следующем запуске :djadmin:`makemigrations` на Python 3 "
#~ "будет создана большая миграция с преобразованием всех байтовых строк в "
#~ "текстовые. Это нормально и необходимо выполнить всего лишь раз."

#~ msgid ""
#~ "Serialization support for ``functools.partial`` and ``LazyObject`` "
#~ "instances was added."
#~ msgstr ""
#~ "Была добавлена возможность сериализации объектов ``functools.partial`` и "
#~ "``LazyObject``."

#~ msgid ""
#~ "The ``--fake-initial`` flag to :djadmin:`migrate` was added. Previously, "
#~ "Django would always automatically fake-apply initial migrations if it "
#~ "detected that the tables exist."
#~ msgstr ""
#~ "Был добавлен флаг :djadminopt:`--fake-initial` для :djadmin:`migrate`. "
#~ "Ранее начальные миграции всегда автоматически помечались выполненными, "
#~ "если были найдены таблицы в базе данных."

# 32c8c625df184822ad2fd29bc2a4017a
#~ msgid "Upgrading from South"
#~ msgstr "Обновление с South"

# 4fadb49cdb774d48ab51f6765e906e44
#~ msgid ""
#~ "If you already have pre-existing migrations created with `South <http://"
#~ "south.aeracode.org>`_, then the upgrade process to use ``django.db."
#~ "migrations`` is quite simple:"
#~ msgstr ""
#~ "Если вы уже используете `South <http://south.aeracode.org>`_ для "
#~ "миграций, то обновиться до ``django.db.migrations`` будет просто:"

# 45e05114b12c443f816deae28e6fe7e0
#~ msgid "Ensure all installs are fully up-to-date with their migrations."
#~ msgstr ""
#~ "Убедитесь, что все установки проекта используют последнюю версию миграций"

#~ msgid "Remove ``'south'`` from :setting:`INSTALLED_APPS`."
#~ msgstr "Удалите ``'south'`` из :setting:`INSTALLED_APPS`."

# ae5d850c67f7479b9d6870a305000b48
#~ msgid ""
#~ "Delete all your (numbered) migration files, but not the directory or "
#~ "``__init__.py`` - make sure you remove the ``.pyc`` files too."
#~ msgstr ""
#~ "Удалите все ваши файлы с миграциями (пронумерованные), но не удаляйте "
#~ "каталог и файл ``__init__.py``. Не забудьте удалить файлы ``.pyc``."

# 7c2887daf39c4167938ac2127917c5a4
#~ msgid ""
#~ "Run ``python manage.py makemigrations``. Django should see the empty "
#~ "migration directories and make new initial migrations in the new format."
#~ msgstr ""
#~ "Выполните ``python manage.py makemigrations``. Django увидит пустой "
#~ "каталог с миграциями и создаст новые начальные миграции в новом формате."

# 16af3c30b8e64f8e8bbf7f175735bcb2
#~ msgid ""
#~ "Run ``python manage.py migrate --fake-initial``. Django will see that the "
#~ "tables for the initial migrations already exist and mark them as applied "
#~ "without running them. (Django won't check that the table schema match "
#~ "your models, just that the right table names exist)."
#~ msgstr ""
#~ "Выполните ``python manage.py migrate --fake-initial``. Django увидит, что "
#~ "все таблицы в базе данных соответствуют начальным миграциям и пометит их "
#~ "как выполненные. (Django не проверяет соответствие структуры таблиц и "
#~ "моделей, только наличие таблицы в базе данных)."

#~ msgid ""
#~ "The :djadminopt:`--fake-initial` flag was added to :djadmin:`migrate`; "
#~ "previously, initial migrations were always automatically fake-applied if "
#~ "existing tables were detected."
#~ msgstr ""
#~ "Был добавлен флаг :djadminopt:`--fake-initial` для :djadmin:`migrate`. "
#~ "Ранее начальные миграции всегда автоматически помечались выполненными, "
#~ "если были найдены таблицы в базе данных."

# dd0e45ee4bb744f2a394e116b33fa524
#~ msgid "Libraries/Third-party Apps"
#~ msgstr "Сторонние библиотеки и приложения"

# a2738a0e271c498086f4927a6585035b
#~ msgid ""
#~ "If you are a library or app maintainer, and wish to support both South "
#~ "migrations (for Django 1.6 and below) and Django migrations (for 1.7 and "
#~ "above) you should keep two parallel migration sets in your app, one in "
#~ "each format."
#~ msgstr ""
#~ "Если вы разрабатываете библиотеку или приложение и хотите поддерживать "
#~ "как миграции South (для Django 1.6 и ниже) так и Django (для 1.7 и выше), "
#~ "вам необходимо предоставлять параллельно два набора миграций в вашем "
#~ "приложении."

# 73beb343404948e99d472e66a5f8776f
#~ msgid ""
#~ "To aid in this, South 1.0 will automatically look for South-format "
#~ "migrations in a ``south_migrations`` directory first, before looking in "
#~ "``migrations``, meaning that users' projects will transparently use the "
#~ "correct set as long as you put your South migrations in the "
#~ "``south_migrations`` directory and your Django migrations in the "
#~ "``migrations`` directory."
#~ msgstr ""
#~ "Для этого South 1.0 сначала будет искать South-миграции в каталоге "
#~ "``south_migrations``, а затем в ``migrations``. Проект пользователя будет "
#~ "использовать правильный набор миграций пока South миграции находятся в "
#~ "каталоге ``south_migrations``, а миграции Django в каталоге "
#~ "``migrations``."

# 2379038b2edb410fb315877627d359e7
#~ msgid ""
#~ "More information is available in the `South 1.0 release notes <http://"
#~ "south.readthedocs.org/en/latest/releasenotes/1.0.html#library-migration-"
#~ "path>`_."
#~ msgstr ""
#~ "Подробности смотрите в `списке обновлений South 1.0 <http://south."
#~ "readthedocs.org/en/latest/releasenotes/1.0.html#library-migration-path>`_."

# bcaa02ba15314001b110f5c3b9c2116e
#~ msgid "A Brief History"
#~ msgstr "Краткая история"

# 52c5b149d71d4d7d864240c74908243b
#~ msgid ""
#~ "Prior to version 1.7, Django only supported adding new models to the "
#~ "database; it was not possible to alter or remove existing models via the "
#~ "``syncdb`` command (the predecessor to :djadmin:`migrate`)."
#~ msgstr ""
#~ "До версии 1.7, Django позволял только добавлять новые модели в базу "
#~ "данных; не было возможности изменять или удалять существующие модели, "
#~ "используя команду ``syncdb`` (предок команды :djadmin:`migrate`)."

# 8bce4b1048d543eea2b37bf02ba9b6e9
#~ msgid ""
#~ "Third-party tools, most notably `South <http://south.aeracode.org>`_, "
#~ "provided support for these additional types of change, but it was "
#~ "considered important enough that support was brought into core Django."
#~ msgstr ""
#~ "Сторонние инструменты, самый известный `South <http://south.aeracode."
#~ "org>`_, позволяли создавать и выполнять миграции. Со временем было решено "
#~ "перенести этот функционал в Django."

# f9f66f2d17dd4dfb8c67928d3d2aebec
#~ msgid ""
#~ "It's worth noting that migrations are created and run on a per-app basis. "
#~ "In particular, it's possible to have apps that *do not use migrations* "
#~ "(these are referred to as \"unmigrated\" apps) - these apps will instead "
#~ "mimic the legacy behavior of just adding new models."
#~ msgstr ""
#~ "Стоит отметить, что миграции создаются и работают в контексте отдельного "
#~ "приложения. В частности, можно создать приложение, которое *не использует "
#~ "миграции* - такие приложения имитируют старое поведение и просто создают "
#~ "новые модели."

# 5378d8cacfe94d879e3b74f7123de48c
#~ msgid ""
#~ "The command runs in two stages; first, it synchronizes unmigrated apps "
#~ "(performing the same functionality that ``syncdb`` used to provide), and "
#~ "then it runs any migrations that have not yet been applied."
#~ msgstr ""
#~ "Команда работает в два этапа. Сначала она синхронизирует приложения без "
#~ "миграций (по сути выполняет действия аналогичные ``syncdb``), а затем "
#~ "применяются миграции, которые ещё не применялись к базе данных."

# 37093d6b9dbd45ed884f64a969bf5ffb
#~ msgid ""
#~ "Be aware, however, that unmigrated apps cannot depend on migrated apps, "
#~ "by the very nature of not having migrations. This means that it is not "
#~ "generally possible to have an unmigrated app have a ``ForeignKey`` or "
#~ "``ManyToManyField`` to a migrated app; some cases may work, but it will "
#~ "eventually fail."
#~ msgstr ""
#~ "Обратите внимание, приложения без миграций не могут зависеть от "
#~ "приложений с миграциями. Это означает, что приложение без миграций не "
#~ "могут содержать ``ForeignKey`` или ``ManyToManyField`` на приложение с "
#~ "миграциями, в некоторых случаях это будет работать, но скорее всего вы "
#~ "получите ошибку."

#~ msgid ""
#~ "Even if things appear to work with unmigrated apps depending on migrated "
#~ "apps, Django may not generate all the necessary foreign key constraints!"
#~ msgstr ""
#~ "Даже если ваш проект работает с приложением без миграций, которое "
#~ "ссылается на приложение с миграциями, Django не сможет создать все "
#~ "необходимые проверки(constraints) для внешних ключей!"

# afcb3b102be446f591f0072e862037af
#~ msgid ""
#~ "This is particularly apparent if you use swappable models (e.g. "
#~ "``AUTH_USER_MODEL``), as every app that uses swappable models will need "
#~ "to have migrations if you're unlucky. As time goes on, more and more "
#~ "third-party apps will get migrations, but in the meantime you can either "
#~ "give them migrations yourself (using :setting:`MIGRATION_MODULES` to "
#~ "store those modules outside of the app's own module if you wish), or keep "
#~ "the app with your user model unmigrated."
#~ msgstr ""
#~ "Вы столкнетесь с этим при использовании заменяемых моделей (например, "
#~ "``AUTH_USER_MODEL``). Все приложения, которые работают с такими моделями, "
#~ "должны содержать миграции. Вам может не повезти и какое-то стороннее "
#~ "приложение, которое использует вашу заменяемую модель, будет без "
#~ "миграций. С течением времени всё больше и больше сторонних приложений "
#~ "будут поддерживать миграции, но вы можете и сами их создать (указав в :"
#~ "setting:`MIGRATION_MODULES` где искать миграции), или же не использовать "
#~ "миграции в своем приложении, которое определяет заменяемую модель."

#~ msgid "Support for serializing timezone-aware datetimes was added."
#~ msgstr ""
#~ "Была добавлена возможность сериализовать ``datetime`` с часовым поясом."

# 65b3045a520c4d2299efe1697fe565b1
#~ msgid ""
#~ "That's it! The only complication is if you have a circular dependency "
#~ "loop of foreign keys; in this case, ``makemigrations`` might make more "
#~ "than one initial migration, and you'll need to mark them all as applied "
#~ "using::"
#~ msgstr ""
#~ "Это всё! Единственной проблемой могут стать циклические внешние ключи. В "
#~ "этом случае ``makemigrations`` может создать несколько начальных миграций "
#~ "и вам необходимо самостоятельно пометить их как выполненные::"

# f9f395e87c474b439fc28216568a412f
#~ msgid "Any class reference"
#~ msgstr "Ссылку на класс"
