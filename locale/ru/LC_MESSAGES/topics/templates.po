# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2016-03-02 14:55+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 95a64c65987a4095b4e869c612e78ccb
#: ../../topics/templates.txt:3
msgid "Templates"
msgstr "Шаблоны"

#: ../../topics/templates.txt:8
msgid ""
"Being a web framework, Django needs a convenient way to generate HTML "
"dynamically. The most common approach relies on templates. A template "
"contains the static parts of the desired HTML output as well as some special "
"syntax describing how dynamic content will be inserted. For a hands-on "
"example of creating HTML pages with templates, see :doc:`Tutorial 3 </intro/"
"tutorial03>`."
msgstr ""
"Будучи веб фреймверком, Django позволяет динамически генерировать HTML. "
"Самый распространенный подход - использование шаблонов. Шаблоны содержат "
"статический HTML и динамические данные, рендеринг которых описан специальным "
"синтаксисом. Пример использования шаблонов для создания HTML шаблонов можно "
"найти в учебнике :doc:`Часть 3 </intro/tutorial03>`."

#: ../../topics/templates.txt:14
msgid ""
"A Django project can be configured with one or several template engines (or "
"even zero if you don't use templates). Django ships built-in backends for "
"its own template system, creatively called the Django template language "
"(DTL), and for the popular alternative Jinja2_. Backends for other template "
"languages may be available from third-parties."
msgstr ""
"Проект Django может использовать один или несколько механизмов создания "
"шаблонов (или ни одного, если вы не используете шаблоны). Django "
"предоставляет бэкенд для собственной системы шаблонов, которая называется - "
"язык шаблонов Django (Django template language, DTL), и популярного "
"альтернативного шаблонизатора `Jinja2 <http://jinja.pocoo.org/>`_. Сторонние "
"приложения могут предоставлять бэкенд и для других систем шаблонов."

#: ../../topics/templates.txt:20
msgid ""
"Django defines a standard API for loading and rendering templates regardless "
"of the backend. Loading consists of finding the template for a given "
"identifier and preprocessing it, usually compiling it to an in-memory "
"representation. Rendering means interpolating the template with context data "
"and returning the resulting string."
msgstr ""
"Django предоставляет стандартный API для загрузки и рендеринга шаблонов, "
"незавимисо от используемого бэкенда. Загрузка включает в себя поиск шаблона "
"по названию и предварительную обработку, обычно выполняется загрузка шаблона "
"в память. Рендеринг означает передачу данных контекста в шаблон и "
"возвращение строки с результатом."

#: ../../topics/templates.txt:26
msgid ""
"The :doc:`Django template language </ref/templates/language>` is Django's "
"own template system. Until Django 1.8 it was the only built-in option "
"available. It's a good template library even though it's fairly opinionated "
"and sports a few idiosyncrasies. If you don't have a pressing reason to "
"choose another backend, you should use the DTL, especially if you're writing "
"a pluggable application and you intend to distribute templates. Django's "
"contrib apps that include templates, like :doc:`django.contrib.admin </ref/"
"contrib/admin/index>`, use the DTL."
msgstr ""
":doc:`Язык шаблонов Django </ref/templates/language>` -- собственная система "
"шаблонов Django. До Django 1.8 -- это была единственная альтернатива. Это "
"хорошая система шаблонов, но со своими особенностями. Если у вас нет причин "
"использовать другую систему шаблон, используйте встроенную, особенно, если "
"разрабатываете распространяемое приложение, содержащее шаблоны. Встроенные "
"шаблоны Django, которые содержат шаблоны, например :doc:`django.contrib."
"admin </ref/contrib/admin/index>`, используют систему шаблонов Django."

#: ../../topics/templates.txt:35
msgid ""
"For historical reasons, both the generic support for template engines and "
"the implementation of the Django template language live in the ``django."
"template`` namespace."
msgstr ""
"По историческим причинам поддержка шаблонов и встроенная система шаблонов "
"Django находятся в одном пакете ``django.template``."

#: ../../topics/templates.txt:41
msgid ""
"The template system isn't safe against untrusted template authors. For "
"example, a site shouldn't allow its users to provide their own templates, "
"since template authors can do things like perform XSS attacks and access "
"properties of template variables that may contain sensitive information."
msgstr ""

#: ../../topics/templates.txt:49
msgid "Support for template engines"
msgstr "Поддержка систем шаблонов"

#: ../../topics/templates.txt:52
msgid "Configuration"
msgstr "Настройки"

#: ../../topics/templates.txt:54
msgid ""
"Templates engines are configured with the :setting:`TEMPLATES` setting. It's "
"a list of configurations, one for each engine. The default value is empty. "
"The ``settings.py`` generated by the :djadmin:`startproject` command defines "
"a more useful value::"
msgstr ""
"Шаблоны можно настроить с помощью настройки :setting:`TEMPLATES`. Это "
"список, который содержит настройки для систем шаблонов. По умолчанию "
"настройка пустая. ``settings.py``, сгенерированный командой :djadmin:"
"`startproject`, содержит более полезное значение::"

#: ../../topics/templates.txt:70
msgid ""
":setting:`BACKEND <TEMPLATES-BACKEND>` is a dotted Python path to a template "
"engine class implementing Django's template backend API. The built-in "
"backends are :class:`django.template.backends.django.DjangoTemplates` and :"
"class:`django.template.backends.jinja2.Jinja2`."
msgstr ""
":setting:`BACKEND <TEMPLATES-BACKEND>` путь для импорта Python к классу "
"бэкенда шаблонов. Встроенные бэкенды это :class:`django.template.backends."
"django.DjangoTemplates` и :class:`django.template.backends.jinja2.Jinja2`."

#: ../../topics/templates.txt:75
msgid ""
"Since most engines load templates from files, the top-level configuration "
"for each engine contains two common settings:"
msgstr ""
"Т.к. большинство систем шаблонов загружают шаблоны с файлов, настройки "
"содержат:"

#: ../../topics/templates.txt:78
msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` defines a list of directories where the "
"engine should look for template source files, in search order."
msgstr ""
":setting:`DIRS <TEMPLATES-DIRS>`, которая содержим список каталогов с "
"шаблонами. Бэкенд ищет в них шаблон в указанном порядке."

#: ../../topics/templates.txt:80
msgid ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` tells whether the engine should "
"look for templates inside installed applications. Each backend defines a "
"conventional name for the subdirectory inside applications where its "
"templates should be stored."
msgstr ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` указывает бэкенду искать ли шаблоны "
"в установленных приложениях. Каждый бэкенд определяет определенное название "
"для каталога с шаблонами в приложении."

#: ../../topics/templates.txt:85
msgid ""
"While uncommon, it's possible to configure several instances of the same "
"backend with different options. In that case you should define a unique :"
"setting:`NAME <TEMPLATES-NAME>` for each engine."
msgstr ""
"Хотя это и не особо полезно, вы можете настроить несколько экземпляров одной "
"системы шаблонов. В этом случае необходимо указать уникальные значения :"
"setting:`NAME <TEMPLATES-NAME>` для каждого экземпляра."

#: ../../topics/templates.txt:89
msgid ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` contains backend-specific settings."
msgstr ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` содержит настройки специфические для "
"бэкенда."

#: ../../topics/templates.txt:92
msgid "Usage"
msgstr "Использование"

#: ../../topics/templates.txt:98
msgid ""
"The ``django.template.loader`` module defines two functions to load "
"templates."
msgstr ""
"Модуль ``django.template.loader`` предоставляет две функции для загрузки "
"шаблонов."

#: ../../topics/templates.txt:102
msgid ""
"This function loads the template with the given name and returns a "
"``Template`` object."
msgstr ""
"Эта функция загружает шаблон с указанным названием и возвращает объект "
"``Template``."

#: ../../topics/templates.txt:105
msgid ""
"The exact type of the return value depends on the backend that loaded the "
"template. Each backend has its own ``Template`` class."
msgstr ""
"Возвращаемое значение зависит от используемого бэкенда т.к. каждый бэкенд "
"использует свой класс ``Template``."

#: ../../topics/templates.txt:108
msgid ""
"``get_template()`` tries each template engine in order until one succeeds. "
"If the template cannot be found, it raises :exc:`~django.template."
"TemplateDoesNotExist`. If the template is found but contains invalid syntax, "
"it raises :exc:`~django.template.TemplateSyntaxError`."
msgstr ""
"``get_template()`` пытается загрузить шаблон каждым из бэкендов, пока шаблон "
"не будет загружен. Если шаблон не найден, будет вызвано исключение :exc:"
"`~django.template.TemplateDoesNotExist`. Если шаблон найден, но синтаксис не "
"верен, будет вызвано :exc:`~django.template.TemplateSyntaxError`."

#: ../../topics/templates.txt:114
msgid ""
"How templates are searched and loaded depends on each engine's backend and "
"configuration."
msgstr ""
"Как шаблоны ищутся и загружаются, зависит от используемого бэкенда шаблонов "
"и его настроек."

#: ../../topics/templates.txt:117
msgid ""
"If you want to restrict the search to a particular template engine, pass the "
"engine's :setting:`NAME <TEMPLATES-NAME>` in the ``using`` argument."
msgstr ""
"Если вы хотите использовать конкретный бэкенд, передайте его название из :"
"setting:`NAME <TEMPLATES-NAME>` в аргументе ``using``."

#: ../../topics/templates.txt:122
msgid ""
"``select_template()`` is just like ``get_template()``, except it takes a "
"list of template names. It tries each name in order and returns the first "
"template that exists."
msgstr ""
"``select_template()`` как и ``get_template()``, но принимает список названий "
"шаблонов. Пытается загрузить по очереди каждый из шаблонов, возвращает "
"первый загруженный."

#: ../../topics/templates.txt:128
msgid ""
"If loading a template fails, the following two exceptions, defined in "
"``django.template``, may be raised:"
msgstr ""
"Если не удалось загрузить шаблон, вызываются исключения, описанные в "
"``django.template``:"

#: ../../topics/templates.txt:133
msgid ""
"This exception is raised when a template cannot be found. It accepts the "
"following optional arguments for populating the :ref:`template postmortem "
"<template-postmortem>` on the debug page:"
msgstr ""
"Это исключение вызывается, если шаблоне не был найден. Принимает "
"дополнительные параметры, которые отображаются на :ref:`странице ошибки "
"<template-postmortem>`:"

#: ../../topics/templates.txt:138
#, fuzzy
msgid "``backend``"
msgstr "``backend``"

#: ../../topics/templates.txt:138
msgid "The template backend instance from which the exception originated."
msgstr "Бэкенд шаблонов, который вызывал исключение."

#: ../../topics/templates.txt:144
#, fuzzy
msgid "``tried``"
msgstr "``tried``"

#: ../../topics/templates.txt:141
msgid ""
"A list of sources that were tried when finding the template. This is "
"formatted as a list of tuples containing ``(origin, status)``, where "
"``origin`` is an :ref:`origin-like <template-origin-api>` object and "
"``status`` is a string with the reason the template wasn't found."
msgstr ""
"Список источников шаблонов, которые проверялись при поиске шаблона. Состоит "
"из списка кортежей вида ``(origin, status)``, где ``origin`` -- это :ref:"
"`объект Origin <template-origin-api>`, а ``status`` -- строка, которая "
"описывает ошибку."

#: ../../topics/templates.txt:149
#, fuzzy
msgid "``chain``"
msgstr "``chain``"

#: ../../topics/templates.txt:147
msgid ""
"A list of intermediate :exc:`~django.template.TemplateDoesNotExist` "
"exceptions raised when trying to load a template. This is used by functions, "
"such as :func:`~django.template.loader.get_template`, that try to load a "
"given template from multiple engines."
msgstr ""
"Список промежуточных ошибок :exc:`~django.template.TemplateDoesNotExist`, "
"которые были вызваны при поиске шаблона. Используется функцией, например :"
"func:`~django.template.loader.get_template`, которая пытается загрузить "
"шаблон, используя разные бэкенды."

#: ../../topics/templates.txt:154
msgid "This exception is raised when a template was found but contains errors."
msgstr "Это исключение вызывается, если шаблон найден, но содержит ошибки."

#: ../../topics/templates.txt:156
msgid ""
"``Template`` objects returned by ``get_template()`` and "
"``select_template()`` must provide a ``render()`` method with the following "
"signature:"
msgstr ""
"Объекты ``Template``, которые возвращают ``get_template()`` и "
"``select_template()``, должны содержать метод ``render()`` со следующей "
"сигнатурой:"

#: ../../topics/templates.txt:163
msgid "Renders this template with a given context."
msgstr "Рендерит шаблон с переданным контекстом."

#: ../../topics/templates.txt:165
msgid ""
"If ``context`` is provided, it must be a :class:`dict`. If it isn't "
"provided, the engine will render the template with an empty context."
msgstr ""
"Если ``context`` передан, это должен быть :class:`dict`. Если не передан, "
"используется пустой контекст."

#: ../../topics/templates.txt:168
msgid ""
"If ``request`` is provided, it must be an :class:`~django.http.HttpRequest`. "
"Then the engine must make it, as well as the CSRF token, available in the "
"template. How this is achieved is up to each backend."
msgstr ""
"Если передан ``request``, это должен быть экземпляр :class:`~django.http."
"HttpRequest`. Шаблонизатор должен добавить его в шаблон, как и CSRF токен. "
"Как это должно происходит определяет шаблонизатор."

#: ../../topics/templates.txt:172
msgid ""
"Here's an example of the search algorithm. For this example the :setting:"
"`TEMPLATES` setting is::"
msgstr ""
"Пример алгоритма поиска шаблона. Возьмем следующую настройку :setting:"
"`TEMPLATES`::"

#: ../../topics/templates.txt:191
msgid ""
"If you call ``get_template('story_detail.html')``, here are the files Django "
"will look for, in order:"
msgstr ""
"Если вызвать ``get_template('story_detail.html')``, Django будет искать "
"следующие файлы:"

#: ../../topics/templates.txt:194 ../../topics/templates.txt:204
msgid "``/home/html/example.com/story_detail.html`` (``'django'`` engine)"
msgstr ""
"``/home/html/example.com/story_detail.html`` (шаблонизатор ``'django'``)"

#: ../../topics/templates.txt:195 ../../topics/templates.txt:205
msgid "``/home/html/default/story_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/default/story_detail.html`` (шаблонизатор ``'django'``)"

#: ../../topics/templates.txt:196 ../../topics/templates.txt:206
msgid "``/home/html/jinja2/story_detail.html`` (``'jinja2'`` engine)"
msgstr "``/home/html/jinja2/story_detail.html`` (шаблонизатор ``'jinja2'``)"

#: ../../topics/templates.txt:198
msgid ""
"If you call ``select_template(['story_253_detail.html', 'story_detail."
"html'])``, here's what Django will look for:"
msgstr ""
"Если вызвать ``select_template(['story_253_detail.html', 'story_detail."
"html'])``, Django бдудет искать:"

#: ../../topics/templates.txt:201
msgid "``/home/html/example.com/story_253_detail.html`` (``'django'`` engine)"
msgstr ""
"``/home/html/example.com/story_253_detail.html`` (шаблонизатор ``'django'``)"

#: ../../topics/templates.txt:202
msgid "``/home/html/default/story_253_detail.html`` (``'django'`` engine)"
msgstr ""
"``/home/html/default/story_253_detail.html`` (шаблонизатор ``'django'``)"

#: ../../topics/templates.txt:203
msgid "``/home/html/jinja2/story_253_detail.html`` (``'jinja2'`` engine)"
msgstr ""
"``/home/html/jinja2/story_253_detail.html`` (шаблонизатор ``'jinja2'``)"

#: ../../topics/templates.txt:208
msgid "When Django finds a template that exists, it stops looking."
msgstr "Если Django находит шаблон, поиск останавливается."

#: ../../topics/templates.txt:210
msgid "Tip"
msgstr "Советы"

#: ../../topics/templates.txt:212
msgid ""
"You can use :func:`~django.template.loader.select_template()` for flexible "
"template loading. For example, if you've written a news story and want some "
"stories to have custom templates, use something like "
"``select_template(['story_%s_detail.html' % story.id, 'story_detail."
"html'])``. That'll allow you to use a custom template for an individual "
"story, with a fallback template for stories that don't have custom templates."
msgstr ""
"Вы можете использовать :func:`~django.template.loader.select_template()` для "
"гибкой загрузки шаблонов. Например, вы написали новость и хотите "
"использовать другой шаблон для некоторых новостей. Вы можете использовать "
"``select_template(['story_%s_detail.html' % story.id, 'story_detail."
"html'])``. Это позволить создать отдельный шаблон для определенных новостей, "
"а для всех остальных использовать шаблон по умолчанию."

#: ../../topics/templates.txt:220
msgid ""
"It's possible -- and preferable -- to organize templates in subdirectories "
"inside each directory containing templates. The convention is to make a "
"subdirectory for each Django app, with subdirectories within those "
"subdirectories as needed."
msgstr ""
"Мы советуем хранить шаблоны в подкаталогах в каталогах с шаблонами. Следует "
"создать подкаталог для каждого приложения Django, в котором вы можете "
"хранить шаблоны в различных подкаталогах, если это необходимо."

#: ../../topics/templates.txt:225
msgid ""
"Do this for your own sanity. Storing all templates in the root level of a "
"single directory gets messy."
msgstr ""
"Хранить все шаблоны в корневом каталоге может привести к хаосу в шаблонах."

#: ../../topics/templates.txt:228
#, fuzzy
msgid "To load a template that's within a subdirectory, use a slash, like so::"
msgstr "Чтобы загрузить каталог из подкаталога, просто используйте слэш::"

#: ../../topics/templates.txt:232
msgid ""
"Using the same :setting:`TEMPLATES` option as above, this will attempt to "
"load the following templates:"
msgstr ""
"При использовании настроек :setting:`TEMPLATES`, приведенных выше, Django "
"будет искать следующие шаблоны:"

#: ../../topics/templates.txt:235
msgid "``/home/html/example.com/news/story_detail.html`` (``'django'`` engine)"
msgstr ""
"``/home/html/example.com/news/story_detail.html`` (шаблонизатор ``'django'``)"

#: ../../topics/templates.txt:236
msgid "``/home/html/default/news/story_detail.html`` (``'django'`` engine)"
msgstr ""
"``/home/html/default/news/story_detail.html`` (шаблонизатор ``'django'``)"

#: ../../topics/templates.txt:237
msgid "``/home/html/jinja2/news/story_detail.html`` (``'jinja2'`` engine)"
msgstr ""
"``/home/html/jinja2/news/story_detail.html`` (шаблонизатор ``'jinja2'``)"

#: ../../topics/templates.txt:241
msgid ""
"In addition, to cut down on the repetitive nature of loading and rendering "
"templates, Django provides a shortcut function which automates the process."
msgstr ""
"Django предоставляет несколько вспомогательных функций для работы с "
"шаблонами."

#: ../../topics/templates.txt:246
msgid ""
"``render_to_string()`` loads a template like :func:`get_template` and calls "
"its ``render()`` method immediately. It takes the following arguments."
msgstr ""
"``render_to_string()`` загружает шаблон как и :func:`get_template`, и "
"вызывает метод ``render()``. Принимает следующие аргументы."

#: ../../topics/templates.txt:253
#, fuzzy
msgid "``template_name``"
msgstr "``template_name``"

#: ../../topics/templates.txt:251
msgid ""
"The name of the template to load and render. If it's a list of template "
"names, Django uses :func:`select_template` instead of :func:`get_template` "
"to find the template."
msgstr ""
"Название шаблона, который будет загружен и выполнен. Если указать список "
"шаблонов, для поиска шаблонов Django будет использовать :func:"
"`select_template` вместо :func:`get_template`."

#: ../../topics/templates.txt:256
msgid "``context``"
msgstr "``context``"

#: ../../topics/templates.txt:256
msgid "A :class:`dict` to be used as the template's context for rendering."
msgstr ""
":class:`dict`, который будет использовать как контекст при рендеринге "
"шаблона."

#: ../../topics/templates.txt:260
#, fuzzy
msgid "``request``"
msgstr "``request``"

#: ../../topics/templates.txt:259
msgid ""
"An optional :class:`~django.http.HttpRequest` that will be available during "
"the template's rendering process."
msgstr ""
"Необязательный :class:`~django.http.HttpRequest`, который будет "
"использоваться при рендеринге шаблона."

#: ../../topics/templates.txt:264
msgid "``using``"
msgstr ""

#: ../../topics/templates.txt:263
msgid ""
"An optional template engine :setting:`NAME <TEMPLATES-NAME>`. The search for "
"the template will be restricted to that engine."
msgstr ""

# 6bb84b800595413e9ab43ee3a5328351
#: ../../topics/templates.txt:266
#, fuzzy
msgid "Usage example::"
msgstr "Например::"

#: ../../topics/templates.txt:271
#, fuzzy
msgid ""
"See also the :func:`~django.shortcuts.render()` shortcut which calls :func:"
"`render_to_string()` and feeds the result into an :class:`~django.http."
"HttpResponse` suitable for returning from a view."
msgstr ""
"Смотрите также :func:`~django.shortcuts.render()` и :func:`~django.shortcuts."
"render_to_response()`, которые вызывают :func:`render_to_string()` и "
"передают результат в :class:`~django.http.HttpResponse`, который можно "
"вернуть из представления."

#: ../../topics/templates.txt:275
msgid "Finally, you can use configured engines directly:"
msgstr "Вы можете использовать шаблонизатор непосредственно:"

#: ../../topics/templates.txt:279
msgid "Template engines are available in ``django.template.engines``::"
msgstr "Шаблонизаторы доступны в ``django.template.engines``::"

#: ../../topics/templates.txt:286
msgid ""
"The lookup key — ``'django'`` in this example — is the engine's :setting:"
"`NAME <TEMPLATES-NAME>`."
msgstr ""
"Ключ ``'django'`` в этом примере соответствует :setting:`NAME <TEMPLATES-"
"NAME>`."

#: ../../topics/templates.txt:292
msgid "Built-in backends"
msgstr "Встроенные бэкенды"

#: ../../topics/templates.txt:298
msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to ``'django.template.backends."
"django.DjangoTemplates'`` to configure a Django template engine."
msgstr ""
"Укажите ``'django.template.backends.django.DjangoTemplates'`` в :setting:"
"`BACKEND <TEMPLATES-BACKEND>`, чтобы использовать шаблонизатор Django."

#: ../../topics/templates.txt:302
msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, "
"``DjangoTemplates`` engines look for templates in the ``templates`` "
"subdirectory of installed applications. This generic name was kept for "
"backwards-compatibility."
msgstr ""
"Если :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` равна ``True``, "
"``DjangoTemplates`` будет искать шаблоны в подкаталогах ``templates`` "
"установленных приложений. Такое название используется для обратной "
"совместимости."

#: ../../topics/templates.txt:306
msgid ""
"``DjangoTemplates`` engines accept the following :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`:"
msgstr ""
"``DjangoTemplates`` принимает следующие параметры :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`:"

#: ../../topics/templates.txt:309
msgid ""
"``'autoescape'``: a boolean that controls whether HTML autoescaping is "
"enabled."
msgstr ""

#: ../../topics/templates.txt:312
#, fuzzy
msgid "It defaults to ``True``."
msgstr "По умолчанию содержит пустой список."

#: ../../topics/templates.txt:316
msgid "Only set it to ``False`` if you're rendering non-HTML templates!"
msgstr ""

#: ../../topics/templates.txt:318 ../../topics/templates.txt:411
msgid ""
"``'context_processors'``: a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request. "
"These callables take a request object as their argument and return a :class:"
"`dict` of items to be merged into the context."
msgstr ""
"``'context_processors'``: список путей Python, который указывают на "
"процессоры контекста, которые добавляют дополнительные переменные в контекст "
"при рендеринге шаблона в процессе обработки запроса. Процессоры контекста -- "
"это функции, или другие вызываемые объекты, которые принимают объект запроса "
"и возвращают :class:`dict` значений, который будут добавлены в контекст."

#: ../../topics/templates.txt:323 ../../topics/templates.txt:416
msgid "It defaults to an empty list."
msgstr "По умолчанию содержит пустой список."

#: ../../topics/templates.txt:325
msgid "See :class:`~django.template.RequestContext` for more information."
msgstr ""
"Подробности смотрите в описании :class:`~django.template.RequestContext`."

#: ../../topics/templates.txt:327
msgid ""
"``'debug'``: a boolean that turns on/off template debug mode. If it is "
"``True``, the fancy error page will display a detailed report for any "
"exception raised during template rendering. This report contains the "
"relevant snippet of the template with the appropriate line highlighted."
msgstr ""
"``'debug'``: булево значение, которое включает/выключает отладку шаблонов. "
"При ``True`` будет отображаться страница с отладочной информацией, если "
"возникнет ошибка при рендеринге шаблона. Страница показывает часть шаблона, "
"которая вызвала ошибку."

#: ../../topics/templates.txt:332
msgid "It defaults to the value of the :setting:`DEBUG` setting."
msgstr "По умолчанию равна значению :setting:`DEBUG`."

#: ../../topics/templates.txt:334
msgid ""
"``'loaders'``: a list of dotted Python paths to template loader classes. "
"Each ``Loader`` class knows how to import templates from a particular "
"source. Optionally, a tuple can be used instead of a string. The first item "
"in the tuple should be the ``Loader`` class name, and subsequent items are "
"passed to the ``Loader`` during initialization."
msgstr ""
"``'loaders'``: список путей Python к загрузчикам шаблонов. Каждый класс "
"``Loader`` знает как загрузить шаблон из определенного источника. Можно "
"использовать кортеж вместо строки. Первым элементом должен быть путь к "
"``Loader``, последующие элементы передаются в ``Loader`` при инициализации."

#: ../../topics/templates.txt:340
msgid ""
"The default depends on the values of :setting:`DIRS <TEMPLATES-DIRS>` and :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>`."
msgstr ""
"Значение по умолчанию зависит от значений :setting:`DIRS <TEMPLATES-DIRS>` "
"и :setting:`APP_DIRS <TEMPLATES-APP_DIRS>`."

#: ../../topics/templates.txt:343
msgid "See :ref:`template-loaders` for details."
msgstr "Подробности смотрите в :ref:`template-loaders`."

#: ../../topics/templates.txt:345
msgid ""
"``'string_if_invalid'``: the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""
"``'string_if_invalid'``: строка, которая будет использоваться для "
"неправильных (например, с опечаткой) переменных в шаблоне."

#: ../../topics/templates.txt:348
msgid "It defaults to an empty string."
msgstr "По умолчанию пустая строка."

#: ../../topics/templates.txt:350
msgid "See :ref:`invalid-template-variables` for details."
msgstr "Подробности смотрите в  :ref:`invalid-template-variables`."

#: ../../topics/templates.txt:352
msgid "``'file_charset'``: the charset used to read template files on disk."
msgstr ""
"``'file_charset'``: кодировка, которая используется при чтении файла шаблона "
"с диска."

#: ../../topics/templates.txt:354
#, fuzzy
msgid "It defaults to ``'utf-8'``."
msgstr "По умолчанию содержит пустой список."

#: ../../topics/templates.txt:356
msgid ""
"``'libraries'``: A dictionary of labels and dotted Python paths of template "
"tag modules to register with the template engine. This can be used to add "
"new libraries or provide alternate labels for existing ones. For example::"
msgstr ""
"``'libraries'``: словарь библиотек тегов, которые зарегистрированы для "
"бэкенда. Состоит из названия библиотеки и пути для импорта. Позволяет "
"добавлять новые библиотеки, или поменять название для существующих. "
"Например::"

#: ../../topics/templates.txt:367
msgid ""
"Libraries can be loaded by passing the corresponding dictionary key to the :"
"ttag:`{% load %}<load>` tag."
msgstr ""
"Библиотеки могут быть загружены с помощью тега :ttag:`{% load %}<load>`, в "
"котором нужно указать соответствующий ключ словаря."

#: ../../topics/templates.txt:370
msgid ""
"``'builtins'``: A list of dotted Python paths of template tag modules to add "
"to :doc:`built-ins </ref/templates/builtins>`. For example::"
msgstr ""
"``'builtins'``: список путей для импорта библиотек тегов, которые будут "
"автоматически загружены и добавлены к :doc:`встроенным тегам и фильтрам </"
"ref/templates/builtins>`. Например::"

#: ../../topics/templates.txt:377
msgid ""
"Tags and filters from built-in libraries can be used without first calling "
"the :ttag:`{% load %} <load>` tag."
msgstr ""
"Теги и фильтры из этих библиотек могу быть использованы без вызова :ttag:`{% "
"load %} <load>`."

#: ../../topics/templates.txt:384
msgid "Requires Jinja2_ to be installed:"
msgstr "Для использования необходимо установить Jinja2_:"

#: ../../topics/templates.txt:390
msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to ``'django.template.backends."
"jinja2.Jinja2'`` to configure a Jinja2_ engine."
msgstr ""
"Укажите ``'django.template.backends.jinja2.Jinja2'`` в :setting:`BACKEND "
"<TEMPLATES-BACKEND>` для настройки шаблонизатора Jinja2_."

#: ../../topics/templates.txt:393
msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, ``Jinja2`` "
"engines look for templates in the ``jinja2`` subdirectory of installed "
"applications."
msgstr ""
"Если :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` равна ``True``, ``Jinja2`` "
"будет искать шаблоны в подкаталоге ``jinja2``установленных приложений."

#: ../../topics/templates.txt:396
msgid ""
"The most important entry in :setting:`OPTIONS <TEMPLATES-OPTIONS>` is "
"``'environment'``. It's a dotted Python path to a callable returning a "
"Jinja2 environment. It defaults to ``'jinja2.Environment'``. Django invokes "
"that callable and passes other options as keyword arguments. Furthermore, "
"Django adds defaults that differ from Jinja2's for a few options:"
msgstr ""
"Самой важной настройкой в :setting:`OPTIONS <TEMPLATES-OPTIONS>` является "
"``'environment'``. Это путь для импорта функции, или другого вызываемого "
"объекта, которая возвращает Jinja2. По умолчанию ``'jinja2.Environment'``. "
"Django вызывает функцию и передает другие параметры как именованные "
"аргументы. Также Django указывает значения по умолчанию для некоторых "
"параметров Jinja2:"

#: ../../topics/templates.txt:402
msgid "``'autoescape'``: ``True``"
msgstr "``'autoescape'``: ``True``"

#: ../../topics/templates.txt:403
msgid ""
"``'loader'``: a loader configured for :setting:`DIRS <TEMPLATES-DIRS>` and :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>`"
msgstr ""
"``'loader'``: загрузчик соответствующий настройкам :setting:`DIRS <TEMPLATES-"
"DIRS>` и :setting:`APP_DIRS <TEMPLATES-APP_DIRS>`"

#: ../../topics/templates.txt:405
msgid "``'auto_reload'``: ``settings.DEBUG``"
msgstr "``'auto_reload'``: ``settings.DEBUG``"

#: ../../topics/templates.txt:406
msgid "``'undefined'``: ``DebugUndefined if settings.DEBUG else Undefined``"
msgstr "``'undefined'``: ``DebugUndefined if settings.DEBUG else Undefined``"

#: ../../topics/templates.txt:408
#, fuzzy
msgid ""
"``Jinja2`` engines also accept the following :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>`:"
msgstr ""
"``DjangoTemplates`` принимает следующие параметры :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`:"

#: ../../topics/templates.txt:418
msgid "Using context processors with Jinja2 templates is discouraged."
msgstr ""

#: ../../topics/templates.txt:420
msgid ""
"Context processors are useful with Django templates because Django templates "
"don't support calling functions with arguments. Since Jinja2 doesn't have "
"that limitation, it's recommended to put the function that you would use as "
"a context processor in the global variables available to the template using "
"``jinja2.Environment`` as described below. You can then call that function "
"in the template:"
msgstr ""

#: ../../topics/templates.txt:431
msgid ""
"Some Django templates context processors return a fixed value. For Jinja2 "
"templates, this layer of indirection isn't necessary since you can add "
"constants directly in ``jinja2.Environment``."
msgstr ""

#: ../../topics/templates.txt:435
msgid ""
"The original use case for adding context processors for Jinja2 involved:"
msgstr ""

#: ../../topics/templates.txt:437
msgid "Making an expensive computation that depends on the request."
msgstr ""

#: ../../topics/templates.txt:438
msgid "Needing the result in every template."
msgstr ""

#: ../../topics/templates.txt:439
msgid "Using the result multiple times in each template."
msgstr ""

#: ../../topics/templates.txt:441
msgid ""
"Unless all of these conditions are met, passing a function to the template "
"is more in line with the design of Jinja2."
msgstr ""

#: ../../topics/templates.txt:444
#, fuzzy
msgid ""
"The default configuration is purposefully kept to a minimum. If a template "
"is rendered with a request (e.g. when using :py:func:`~django.shortcuts."
"render`), the ``Jinja2`` backend adds the globals ``request``, "
"``csrf_input``, and ``csrf_token`` to the context. Apart from that, this "
"backend doesn't create a Django-flavored environment. It doesn't know about "
"Django filters and tags. In order to use Django-specific APIs, you must "
"configure them into the environment."
msgstr ""
"Настройки по умолчанию намерено сокращены до минимума. ``Jinja2`` не создает "
"окружение заточенное под Django. Шаблонизатор ничего не знает про процессоры "
"контекста Django, фильтры и теги. Чтобы использовать API Django, необходимо "
"настроить окружение шаблонизатора."

#: ../../topics/templates.txt:452
msgid "For example, you can create ``myproject/jinja2.py`` with this content::"
msgstr "Например, вы можете создать следующий ``myproject/jinja2.py``::"

#: ../../topics/templates.txt:468
msgid ""
"and set the ``'environment'`` option to ``'myproject.jinja2.environment'``."
msgstr ""
"и указать в настройке ``'environment'`` ``'myproject.jinja2.environment'``."

#: ../../topics/templates.txt:470
msgid "Then you could use the following constructs in Jinja2 templates:"
msgstr "Теперь вы можете использовать в шаблонах Jinja2:"

#: ../../topics/templates.txt:478
#, fuzzy
msgid ""
"The concepts of tags and filters exist both in the Django template language "
"and in Jinja2 but they're used differently. Since Jinja2 supports passing "
"arguments to callables in templates, many features that require a template "
"tag or filter in Django templates can be achieved by calling a function in "
"Jinja2 templates, as shown in the example above. Jinja2's global namespace "
"removes the need for template context processors. The Django template "
"language doesn't have an equivalent of Jinja2 tests."
msgstr ""
"Концепция тегов и фильтров существует как в шаблонах Django, так и Jinja2, "
"но используется по разному. Так как Jinja2 позволяет передавать аргументы "
"при вызове функций и методов, многие вещи, для которых необходим тег или "
"фильтр в шаблонах Django, можно использовать напрямую в шаблонах Jinja2, как "
"это делается в примере выше. Глобальное пространство имен Jinja2 не требует "
"процессоров контекста. Язык шаблонов Django не имеет аналогов тестов Jinja2."

#: ../../topics/templates.txt:487
msgid "Custom backends"
msgstr "Собственный бэкенд"

#: ../../topics/templates.txt:489
msgid ""
"Here's how to implement a custom template backend in order to use another "
"template system. A template backend is a class that inherits ``django."
"template.backends.base.BaseEngine``. It must implement ``get_template()`` "
"and optionally ``from_string()``. Here's an example for a fictional "
"``foobar`` template library::"
msgstr ""
"Вот небольшой пример собственного шаблонизатора. Шаблонизатор должен "
"наследоваться от ``django.template.backends.base.BaseEngine`` и определить "
"метод ``get_template()``, и опционально ``from_string()``. Код нашего "
"шаблонизатора ``foobar``::"

#: ../../topics/templates.txt:544
msgid "See `DEP 182`_ for more information."
msgstr "Подробности смотрите в `DEP 182`_."

#: ../../topics/templates.txt:549
msgid "Debug integration for custom engines"
msgstr ""

#: ../../topics/templates.txt:551
msgid ""
"The Django debug page has hooks to provide detailed information when a "
"template error arises. Custom template engines can use these hooks to "
"enhance the traceback information that appears to users. The following hooks "
"are available:"
msgstr ""

# 95a64c65987a4095b4e869c612e78ccb
#: ../../topics/templates.txt:558
#, fuzzy
msgid "Template postmortem"
msgstr "Шаблоны"

#: ../../topics/templates.txt:560
msgid ""
"The postmortem appears when :exc:`~django.template.TemplateDoesNotExist` is "
"raised. It lists the template engines and loaders that were used when trying "
"to find a given template. For example, if two Django engines are configured, "
"the postmortem will appear like:"
msgstr ""

#: ../../topics/templates.txt:567
msgid ""
"Custom engines can populate the postmortem by passing the ``backend`` and "
"``tried`` arguments when raising :exc:`~django.template."
"TemplateDoesNotExist`. Backends that use the postmortem :ref:`should specify "
"an origin <template-origin-api>` on the template object."
msgstr ""

#: ../../topics/templates.txt:573
msgid "Contextual line information"
msgstr ""

#: ../../topics/templates.txt:575
msgid ""
"If an error happens during template parsing or rendering, Django can display "
"the line the error happened on. For example:"
msgstr ""

#: ../../topics/templates.txt:580
msgid ""
"Custom engines can populate this information by setting a ``template_debug`` "
"attribute on exceptions raised during parsing and rendering. This attribute "
"is a :class:`dict` with the following values:"
msgstr ""

#: ../../topics/templates.txt:584
msgid "``'name'``: The name of the template in which the exception occurred."
msgstr ""

#: ../../topics/templates.txt:586
msgid "``'message'``: The exception message."
msgstr ""

#: ../../topics/templates.txt:588
msgid ""
"``'source_lines'``: The lines before, after, and including the line the "
"exception occurred on. This is for context, so it shouldn't contain more "
"than 20 lines or so."
msgstr ""

#: ../../topics/templates.txt:592
msgid "``'line'``: The line number on which the exception occurred."
msgstr ""

#: ../../topics/templates.txt:594
msgid ""
"``'before'``: The content on the error line before the token that raised the "
"error."
msgstr ""

#: ../../topics/templates.txt:597
msgid "``'during'``: The token that raised the error."
msgstr ""

#: ../../topics/templates.txt:599
msgid ""
"``'after'``: The content on the error line after the token that raised the "
"error."
msgstr ""

#: ../../topics/templates.txt:602
msgid "``'total'``: The number of lines in ``source_lines``."
msgstr ""

#: ../../topics/templates.txt:604
msgid "``'top'``: The line number where ``source_lines`` starts."
msgstr ""

#: ../../topics/templates.txt:606
msgid "``'bottom'``: The line number where ``source_lines`` ends."
msgstr ""

#: ../../topics/templates.txt:608
msgid "Given the above template error, ``template_debug`` would look like::"
msgstr ""

#: ../../topics/templates.txt:635
msgid "Origin API and 3rd-party integration"
msgstr ""

#: ../../topics/templates.txt:637
msgid ""
"Django templates have an :class:`~django.template.base.Origin` object "
"available through the ``template.origin`` attribute. This enables debug "
"information to be displayed in the :ref:`template postmortem <template-"
"postmortem>`, as well as in 3rd-party libraries, like the `Django Debug "
"Toolbar`_."
msgstr ""

#: ../../topics/templates.txt:642
msgid ""
"Custom engines can provide their own ``template.origin`` information by "
"creating an object that specifies the following attributes:"
msgstr ""

#: ../../topics/templates.txt:645
msgid "``'name'``: The full path to the template."
msgstr ""

#: ../../topics/templates.txt:647
msgid ""
"``'template_name'``: The relative path to the template as passed into the "
"the template loading methods."
msgstr ""

#: ../../topics/templates.txt:650
msgid ""
"``'loader_name'``: An optional string identifying the function or class used "
"to load the template, e.g. ``django.template.loaders.filesystem.Loader``."
msgstr ""

# f2ec389c092c4aeb9911e01fe093419a
#: ../../topics/templates.txt:658
msgid "The Django template language"
msgstr "Язык шаблонов Django"

#: ../../topics/templates.txt:663
msgid "Syntax"
msgstr "Синтаксис"

# 91617ae39d904c4dbab66c87e6b8e303
#: ../../topics/templates.txt:665 ../../topics/templates.txt:764
msgid "About this section"
msgstr "Об этом документе"

#: ../../topics/templates.txt:667
msgid ""
"This is an overview of the Django template language's syntax. For details "
"see the :doc:`language syntax reference </ref/templates/language>`."
msgstr ""
"Этот раздел описывает основы синтаксиса языка шаблонов Django. Подробности "
"смотрите в :doc:`полном описании </ref/templates/language>`."

#: ../../topics/templates.txt:670
#, fuzzy
msgid ""
"A Django template is a text document or a Python string marked-up using the "
"Django template language. Some constructs are recognized and interpreted by "
"the template engine. The main ones are variables and tags."
msgstr ""
"Шаблон Django -- это просто текстовый файл, или строка Python, которые "
"следуют языку шаблонов Django. Определенные конструкции распознаются и "
"интерпретируются шаблонизатором. Основные -- это переменные и теги."

#: ../../topics/templates.txt:674
msgid ""
"A template is rendered with a context. Rendering replaces variables with "
"their values, which are looked up in the context, and executes tags. "
"Everything else is output as is."
msgstr ""
"Шаблон рендерится с контекстом. Рендеринг заменяет переменные на их "
"значения, которые ищутся в контексте, и выполняет теги. Все остальное "
"выводится как есть."

#: ../../topics/templates.txt:678
msgid "The syntax of the Django template language involves four constructs."
msgstr "Синтаксис языка шаблонов Django использует четыре конструкции."

# 7e41b7d93cf348bfaae0488724faffc1
#: ../../topics/templates.txt:681
msgid "Variables"
msgstr "Переменные"

#: ../../topics/templates.txt:683
msgid ""
"A variable outputs a value from the context, which is a dict-like object "
"mapping keys to values."
msgstr "Переменные выводят значения из контекста, который является словарем."

#: ../../topics/templates.txt:686
msgid "Variables are surrounded by ``{{`` and ``}}`` like this::"
msgstr "Переменные выделяются ``{{`` и ``}}``, например::"

#: ../../topics/templates.txt:690
msgid ""
"With a context of ``{'first_name': 'John', 'last_name': 'Doe'}``, this "
"template renders to::"
msgstr ""
"Для контекста ``{'first_name': 'John', 'last_name': 'Doe'}`` шаблон "
"отрендерит::"

#: ../../topics/templates.txt:695
msgid ""
"Dictionary lookup, attribute lookup and list-index lookups are implemented "
"with a dot notation::"
msgstr ""
"Обращение к ключам словаря, атрибутам объектов и элементам списка "
"выполняется через точку::"

#: ../../topics/templates.txt:702
msgid ""
"If a variable resolves to a callable, the template system will call it with "
"no arguments and use its result instead of the callable."
msgstr ""
"Если значение переменной является вызываемый объект, шаблонизатор вызовет "
"его без аргументов и подставит результат."

# e2fbc31c77dc405cb13535ecd88ee4ba
#: ../../topics/templates.txt:706
msgid "Tags"
msgstr "Теги"

#: ../../topics/templates.txt:708
msgid "Tags provide arbitrary logic in the rendering process."
msgstr "Теги позволяют добавлять произвольную логику в шаблон."

#: ../../topics/templates.txt:710
msgid ""
"This definition is deliberately vague. For example, a tag can output "
"content, serve as a control structure e.g. an \"if\" statement or a \"for\" "
"loop, grab content from a database, or even enable access to other template "
"tags."
msgstr ""
"Например, теги могут выводить текст, добавлять логические операторы, такие "
"как \"if\" или \"for\", получать содержимое из базы данных, или "
"предоставлять доступ к другим тегам."

#: ../../topics/templates.txt:714
msgid "Tags are surrounded by ``{%`` and ``%}`` like this::"
msgstr "Теги выделяются ``{%`` и ``%}``, например::"

#: ../../topics/templates.txt:718
msgid "Most tags accept arguments::"
msgstr "Большинство тегов принимают аргументы::"

#: ../../topics/templates.txt:722
msgid "Some tags require beginning and ending tags::"
msgstr "Некоторые теги требуют закрывающий тег::"

#: ../../topics/templates.txt:726
msgid ""
"A :ref:`reference of built-in tags <ref-templates-builtins-tags>` is "
"available as well as :ref:`instructions for writing custom tags <howto-"
"writing-custom-template-tags>`."
msgstr ""
"Ознакомьтесь со :ref:`списком всех встроенных тегов <ref-templates-builtins-"
"tags>` и с :ref:`руководством по созданию тегов <howto-writing-custom-"
"template-tags>`."

# 56fb6d3ca10743198e2d5676744b2562
#: ../../topics/templates.txt:731
msgid "Filters"
msgstr "Фильтры"

#: ../../topics/templates.txt:733
msgid "Filters transform the values of variables and tag arguments."
msgstr "Фильтры преобразуют переменные и аргументы тегов."

# 03489c2c588c4eff917c0e36bd13aa9e
#: ../../topics/templates.txt:735
msgid "They look like this::"
msgstr "Могут выглядеть таким образом::"

#: ../../topics/templates.txt:739
msgid ""
"With a context of ``{'django': 'the web framework for perfectionists with "
"deadlines'}``, this template renders to::"
msgstr ""
"Для контекста ``{'django': 'the web framework for perfectionists with "
"deadlines'}`` этот шаблон выведет::"

#: ../../topics/templates.txt:744
msgid "Some filters take an argument::"
msgstr "Некоторые фильтры принимают аргументы::"

#: ../../topics/templates.txt:748
msgid ""
"A :ref:`reference of built-in filters <ref-templates-builtins-filters>` is "
"available as well as :ref:`instructions for writing custom filters <howto-"
"writing-custom-template-filters>`."
msgstr ""
"Ознакомьтесь со  :ref:`списком встроенных фильтров <ref-templates-builtins-"
"filters>` и :ref:`руководством по созданию фильтра <howto-writing-custom-"
"template-filters>`."

# 2342c1ccf2604587a62e089602b2fadf
#: ../../topics/templates.txt:753
msgid "Comments"
msgstr "Комментарии"

# 03489c2c588c4eff917c0e36bd13aa9e
#: ../../topics/templates.txt:755
msgid "Comments look like this::"
msgstr "Комментарии могут выглядеть таким образом::"

#: ../../topics/templates.txt:759
msgid "A :ttag:`{% comment %} <comment>` tag provides multi-line comments."
msgstr ""
"Тег :ttag:`{% comment %} <comment>` позволяет добавлять многострочные "
"комментарии."

# 2342c1ccf2604587a62e089602b2fadf
#: ../../topics/templates.txt:762
msgid "Components"
msgstr "Компоненты"

#: ../../topics/templates.txt:766
msgid ""
"This is an overview of the Django template language's APIs. For details see "
"the :doc:`API reference </ref/templates/api>`."
msgstr ""
"Это обзор API языка шаблонов Django. Подробности смотрите в :doc:`полном "
"описании API </ref/templates/api>`."

#: ../../topics/templates.txt:770
msgid "Engine"
msgstr "Engine"

#: ../../topics/templates.txt:772
msgid ""
":class:`django.template.Engine` encapsulates an instance of the Django "
"template system. The main reason for instantiating an :class:`~django."
"template.Engine` directly is to use the Django template language outside of "
"a Django project."
msgstr ""
":class:`django.template.Engine` инкапсулирует шаблонизатор Django. Главная "
"причина использовать непосредственно :class:`~django.template.Engine` -- "
"использовать шаблонизатор Django все проекта Django."

#: ../../topics/templates.txt:777
msgid ""
":class:`django.template.backends.django.DjangoTemplates` is a thin wrapper "
"adapting :class:`django.template.Engine` to Django's template backend API."
msgstr ""
":class:`django.template.backends.django.DjangoTemplates` -- адаптер :class:"
"`django.template.Engine` для API шаблонов Django."

# 95a64c65987a4095b4e869c612e78ccb
#: ../../topics/templates.txt:781
msgid "Template"
msgstr "Шаблон"

#: ../../topics/templates.txt:783
msgid ""
":class:`django.template.Template` represents a compiled template. Templates "
"are obtained with :meth:`Engine.get_template() <django.template.Engine."
"get_template>` or :meth:`Engine.from_string() <django.template.Engine."
"from_string>`"
msgstr ""
":class:`django.template.Template` представляет скомпилированный шаблон. "
"Шаблоны загружаются с помощью :meth:`Engine.get_template() <django.template."
"Engine.get_template>` или :meth:`Engine.from_string() <django.template."
"Engine.from_string>`"

#: ../../topics/templates.txt:788
msgid ""
"Likewise ``django.template.backends.django.Template`` is a thin wrapper "
"adapting :class:`django.template.Template` to the common template API."
msgstr ""
"``django.template.backends.django.Template``  -- адаптер :class:`django."
"template.Template` для API шаблонов Django."

#: ../../topics/templates.txt:792
msgid "Context"
msgstr "Контекст"

#: ../../topics/templates.txt:794
msgid ""
":class:`django.template.Context` holds some metadata in addition to the "
"context data. It is passed to :meth:`Template.render() <django.template."
"Template.render>` for rendering a template."
msgstr ""
":class:`django.template.Context` содержит данные контекста и некоторые "
"метаданные. Передается в :meth:`Template.render() <django.template.Template."
"render>` при рендеринге шаблона."

#: ../../topics/templates.txt:798
msgid ""
":class:`django.template.RequestContext` is a subclass of :class:`~django."
"template.Context` that stores the current :class:`~django.http.HttpRequest` "
"and runs template context processors."
msgstr ""
":class:`django.template.RequestContext` -- дочерний класс :class:`~django."
"template.Context`, который содержит текущий :class:`~django.http."
"HttpRequest` и выполняет процессоры контекста."

#: ../../topics/templates.txt:802
msgid ""
"The common API doesn't have an equivalent concept. Context data is passed in "
"a plain :class:`dict` and the current :class:`~django.http.HttpRequest` is "
"passed separately if needed."
msgstr ""
"API шаблонов Django не содержит аналога. Данные контекста передаются как :"
"class:`dict`, а текущий :class:`~django.http.HttpRequest` передается "
"отдельно при необходимости."

#: ../../topics/templates.txt:807
msgid "Loaders"
msgstr "Загрузчики"

#: ../../topics/templates.txt:809
msgid ""
"Template loaders are responsible for locating templates, loading them, and "
"returning :class:`~django.template.Template` objects."
msgstr ""
"Загрузчики шаблонов отвечают за их поиск, загрузку и создание объекта :class:"
"`~django.template.Template`."

#: ../../topics/templates.txt:812
msgid ""
"Django provides several :ref:`built-in template loaders <template-loaders>` "
"and supports :ref:`custom template loaders <custom-template-loaders>`."
msgstr ""
"Django предоставляет несколько :ref:`встроенных загрузчиков шаблонов "
"<template-loaders>` и поддерживает :ref:`собственные загрузчики <custom-"
"template-loaders>`."

#: ../../topics/templates.txt:816
msgid "Context processors"
msgstr "Процессоры контекста"

#: ../../topics/templates.txt:818
msgid ""
"Context processors are functions that receive the current :class:`~django."
"http.HttpRequest` as an argument and return a :class:`dict` of data to be "
"added to the rendering context."
msgstr ""
"Процессоры контекста -- это функции, которые принимают текущий :class:"
"`~django.http.HttpRequest`, и возвращают :class:`dict` данными, которые "
"будут добавлены в контекст."

#: ../../topics/templates.txt:822
msgid ""
"Their main use is to add common data shared by all templates to the context "
"without repeating code in every view."
msgstr ""
"Используются для добавления данных, которые необходимы при рендеринге "
"различных шаблонов, чтобы избежать дублирования кода в представлениях."

#: ../../topics/templates.txt:825
#, fuzzy
msgid ""
"Django provides many :ref:`built-in context processors <context-"
"processors>`, and you can implement your own additional context processors, "
"too."
msgstr ""
"Django предоставляет множество :ref:`встроенных процессоров контекста "
"<context-processors>`. Создать собственный процессор контекста так же "
"просто, как и создать функцию."

#~ msgid "It defaults to the value of :setting:`FILE_CHARSET`."
#~ msgstr "По умолчанию равна значению :setting:`FILE_CHARSET`."

#, fuzzy
#~ msgid "The ``'context_processors'`` option was added."
#~ msgstr "Был добавлен параметр ``using``."

#, fuzzy
#~ msgid "context"
#~ msgstr "Контекст"

#, fuzzy
#~ msgid "The ``autoescape`` option was added."
#~ msgstr "Был добавлен параметр ``using``."

#~ msgid "The ``backend``, ``tried``, and ``chain`` arguments were added."
#~ msgstr "Были добавлены аргументы ``backend``, ``tried`` и ``chain``."

#~ msgid "The ``libraries`` and ``builtins`` arguments were added."
#~ msgstr "Были добавлены аргументы ``libraries`` и ``builtins``."

#~ msgid ""
#~ "Support for multiple template engines and the :setting:`TEMPLATES` "
#~ "setting were added in Django 1.8."
#~ msgstr ""
#~ "Была добавлена поддержка различных механизмов шаблонов и настройка :"
#~ "setting:`TEMPLATES`."

#~ msgid "The ``dirs`` parameter was deprecated."
#~ msgstr "Параметр ``dirs`` устарел."

#~ msgid ""
#~ "``get_template()`` returns a backend-dependent ``Template`` instead of a :"
#~ "class:`django.template.Template`."
#~ msgstr ""
#~ "``get_template()`` возвращает ``Template`` конкретного бэкенда, а не :"
#~ "class:`django.template.Template`."

#~ msgid ""
#~ "``select_template()`` returns a backend-dependent ``Template`` instead of "
#~ "a :class:`django.template.Template`."
#~ msgstr ""
#~ "``select_template()`` возвращает ``Template`` для конкретного бэкенда, а "
#~ "не :class:`django.template.Template`."

#~ msgid ""
#~ "The ``context`` argument used to be called ``dictionary``. That name is "
#~ "deprecated in Django 1.8 and will be removed in Django 1.10."
#~ msgstr ""
#~ "``context`` ранее назывался ``dictionary``. Это название устарело в "
#~ "Django 1.8 и будет удалено Django 1.10."

#~ msgid ""
#~ "``context`` is now optional. An empty context will be used if it isn't "
#~ "provided."
#~ msgstr ""
#~ "``context`` теперь не обязательный аргумент. Если он не указан, будет "
#~ "использоваться пустой контекст."

#~ msgid "``context_instance``"
#~ msgstr "``context_instance``"

#~ msgid ""
#~ "An instance of :class:`~django.template.Context` or a subclass (e.g., an "
#~ "instance of :class:`~django.template.RequestContext`) to use as the "
#~ "template's context."
#~ msgstr ""
#~ "Экземпляр :class:`~django.template.Context` или дочернего класса "
#~ "(например, экземпляр :class:`~django.template.RequestContext`), который "
#~ "будет использоваться как контекст шаблона."

#~ msgid ""
#~ "The ``context_instance`` argument is deprecated. Use ``context`` and if "
#~ "needed ``request``."
#~ msgstr ""
#~ "Аргумент ``context_instance`` устарел. Используйте ``context`` и "
#~ "``request``, если необходимо."

#~ msgid "The ``request`` argument was added."
#~ msgstr "Был добавлен аргумент ``request``."

#~ msgid ""
#~ "``'allowed_include_roots'``: a list of strings representing allowed "
#~ "prefixes for the ``{% ssi %}`` template tag. This is a security measure, "
#~ "so that template authors can't access files that they shouldn't be "
#~ "accessing."
#~ msgstr ""
#~ "``'allowed_include_roots'``: список строк, который определяют доступные "
#~ "префиксы для тега ``{% ssi %}``. Эта настройка используется для "
#~ "безопасности, чтобы ограничить доступ к файлам."

#~ msgid ""
#~ "For example, if ``'allowed_include_roots'`` is ``['/home/html', '/var/"
#~ "www']``, then ``{% ssi /home/html/foo.txt %}`` would work, but ``{% ssi /"
#~ "etc/passwd %}`` wouldn't."
#~ msgstr ""
#~ "Например, если ``'allowed_include_roots'`` равен ``['/home/html', '/var/"
#~ "www']``, тогда ``{% ssi /home/html/foo.txt %}`` будет работать, а ``{% "
#~ "ssi /etc/passwd %}`` не будет."

#~ msgid ""
#~ "``allowed_include_roots`` is deprecated because the {% ssi %} tag is "
#~ "deprecated."
#~ msgstr "``allowed_include_roots`` устарела т.к. устарел тег {% ssi %}."

#~ msgid "The ``dirs`` parameter was added."
#~ msgstr "Был добавлен параметр ``dirs``."

#~ msgid "This exception is raised when a template cannot be found."
#~ msgstr "Это исключение вызывается, если шаблон не был найден."

# 338bc381cbe84a36a6237088e1b1a4af
#~ msgid ""
#~ "This document explains the language syntax of the Django template system. "
#~ "If you're looking for a more technical perspective on how it works and "
#~ "how to extend it, see :doc:`/ref/templates/api`."
#~ msgstr ""
#~ "Этот раздел описывает синтаксис языка шаблонов Django. Если вы ищете "
#~ "технически подробности как он работает и как расширять его, смотрите :doc:"
#~ "`/ref/templates/api`."

# 54f37eb253234e3ea62bddaa6549c3e4
#~ msgid ""
#~ "Django's template language is designed to strike a balance between power "
#~ "and ease. It's designed to feel comfortable to those used to working with "
#~ "HTML. If you have any exposure to other text-based template languages, "
#~ "such as Smarty_ or CheetahTemplate_, you should feel right at home with "
#~ "Django's templates."
#~ msgstr ""
#~ "Язык шаблонов Django представляет баланс между возможностями и простотой. "
#~ "Он создавался, чтобы быть удобным для пользователей HTML. Если у вас есть "
#~ "опыт работы с другими языками текстовых шаблонов, таких как Smarty_ или "
#~ "CheetahTemplate_, вы должны себя чувствовать как дома с шаблонами Django."

# 2ef291f17dbc479ea5e8ea15022546d8
# 768873a9c8c3447cbb52bbcb1cd8f8a6
#~ msgid "Philosophy"
#~ msgstr "Философия"

# 7dd5c2828d124882b34d64fc1151c90c
#~ msgid ""
#~ "If you have a background in programming, or if you're used to languages "
#~ "which mix programming code directly into HTML, you'll want to bear in "
#~ "mind that the Django template system is not simply Python embedded into "
#~ "HTML. This is by design: the template system is meant to express "
#~ "presentation, not program logic."
#~ msgstr ""
#~ "Если у вас есть опыт программирования или вы использовали PHP, который "
#~ "позволяет интегрировать программный код прямо HTML, вам стоит помнить, "
#~ "что система шаблонов Django -- это не просто Python встроенный в HTML. "
#~ "Это сделано намеренно: шаблоны предназначены для представления, а не для "
#~ "реализации логики программы."

# ab34b638ed6d4f3a876bcccddd82b4f7
#~ msgid ""
#~ "The Django template system provides tags which function similarly to some "
#~ "programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:"
#~ "`for` tag for looping, etc. -- but these are not simply executed as the "
#~ "corresponding Python code, and the template system will not execute "
#~ "arbitrary Python expressions. Only the tags, filters and syntax listed "
#~ "below are supported by default (although you can add :doc:`your own "
#~ "extensions </howto/custom-template-tags>` to the template language as "
#~ "needed)."
#~ msgstr ""
#~ "Шаблоны Django предоставляют теги, которые повторяют некоторые структуры "
#~ "языка программирования -- тег :ttag:`if` для проверки на истинность, тег :"
#~ "ttag:`for` для циклов, и др. -- но они не выполняются непосредственно как "
#~ "код Python, и система шаблонов не будет выполнять произвольное выражение "
#~ "Python. Только теги, фильтры и синтаксис, перечисленные ниже, "
#~ "поддерживаются по умолчанию (хотя вы можете добавить :doc:`собственное "
#~ "расширение </howto/custom-template-tags>` для языка шаблонов при "
#~ "необходимости)."

# d7e87bf68be94e87a5da384ee28a63ef
#~ msgid ""
#~ "A template is simply a text file. It can generate any text-based format "
#~ "(HTML, XML, CSV, etc.)."
#~ msgstr ""
#~ "Шаблон это просто текстовый файл. Он позволяет создать любой текстовый "
#~ "формат (HTML, XML, CSV, и др.)."

# 0efad2a595dc40e0bc4eb4582b3e2fa8
#~ msgid ""
#~ "A template contains **variables**, which get replaced with values when "
#~ "the template is evaluated, and **tags**, which control the logic of the "
#~ "template."
#~ msgstr ""
#~ "Шаблон содержит **переменные**, которые будут заменены значениями при "
#~ "выполнении шаблона, и **теги**, которые управляют логикой шаблона."

# 65336cb59f2e4dfabf855ea8e0c88fd2
#~ msgid ""
#~ "Below is a minimal template that illustrates a few basics. Each element "
#~ "will be explained later in this document."
#~ msgstr ""
#~ "Ниже приводится простой шаблон, который иллюстрирует некоторые основы. "
#~ "Каждый элемент будет объяснен далее в этом разделе."

# 8f01df6c6a6a47ab943ca7841df22c8c
#~ msgid ""
#~ "Why use a text-based template instead of an XML-based one (like Zope's "
#~ "TAL)? We wanted Django's template language to be usable for more than "
#~ "just XML/HTML templates. At World Online, we use it for emails, "
#~ "JavaScript and CSV. You can use the template language for any text-based "
#~ "format."
#~ msgstr ""
#~ "Зачем использовать текстовый шаблон, а не на основе XML (как TAL в Zope)? "
#~ "Мы хотели, чтобы шаблоны Django были больше, чем просто XML/HTML шаблоны. "
#~ "На World Online, мы используем их для email, JavaScript и CSV. Вы можете "
#~ "использовать шаблоны для любого текстового формата."

# 27d8a353303c4a39a9a6f19060f348c5
#~ msgid "Oh, and one more thing: Making humans edit XML is sadistic!"
#~ msgstr "Ах да, еще одно: заставлять людей редактировать XML -- это садизм!"

# dd6987b4df5942dfa94a4f9fc7b6af4b
#~ msgid ""
#~ "Variables look like this: ``{{ variable }}``. When the template engine "
#~ "encounters a variable, it evaluates that variable and replaces it with "
#~ "the result. Variable names consist of any combination of alphanumeric "
#~ "characters and the underscore (``\"_\"``). The dot (``\".\"``) also "
#~ "appears in variable sections, although that has a special meaning, as "
#~ "indicated below. Importantly, *you cannot have spaces or punctuation "
#~ "characters in variable names.*"
#~ msgstr ""
#~ "Переменные выглядят таким образом: ``{{ variable }}``. Когда шаблон "
#~ "встречает переменную, он вычисляет ее и заменяет результатом. Названия "
#~ "переменных могут состоять из букв, цифр и нижнего подчеркивания(``\"_"
#~ "\"``). Точку (``\".\"``) также можно использовать, но она имеет особый "
#~ "смысл описанный ниже. Важно, *нельзя использовать пробелы и знаки "
#~ "пунктуации в названии переменных.*"

# 94fbd9e4c7cb404290161934bb965100
#~ msgid "Use a dot (``.``) to access attributes of a variable."
#~ msgstr "Используйте точку (``.``) для доступа к атрибутам переменной."

# 25cbe35d544244f4b084422918fcdff8
#~ msgid "Behind the scenes"
#~ msgstr "За кадром"

# cf89805da4474fdc80890ff5260e774b
#~ msgid ""
#~ "Technically, when the template system encounters a dot, it tries the "
#~ "following lookups, in this order:"
#~ msgstr ""
#~ "Технически, когда шаблон встречает точку, он пытается получить значения в "
#~ "таком порядке:"

# a2197c683a4d49a6a53cd93ae13199d5
#~ msgid "Dictionary lookup"
#~ msgstr "Ключ словаря"

# dd9a54e445104def8b4cbb8d95e8cc44
#~ msgid "Attribute or method lookup"
#~ msgstr "Атрибут или метод"

# 84e4e3707a72476aa76b24717c4a8146
#~ msgid "Numeric index lookup"
#~ msgstr "Индекс списка"

# 19e2e28027be42e1aa8642e4f868e7db
#~ msgid ""
#~ "If the resulting value is callable, it is called with no arguments. The "
#~ "result of the call becomes the template value."
#~ msgstr ""
#~ "Если найден вызываемый объект(функция или метод), он будет вызван без "
#~ "аргументов. Результат будет использоваться шаблоном как значение."

# db188db83e9b492ca33955153e47181f
#~ msgid ""
#~ "This lookup order can cause some unexpected behavior with objects that "
#~ "override dictionary lookup. For example, consider the following code "
#~ "snippet that attempts to loop over a ``collections.defaultdict``::"
#~ msgstr ""
#~ "Это может приводить к неожиданным результатам с объектами, которые "
#~ "переопределяют поиск по словарю. Например, рассмотрим следующий код, "
#~ "который пытается выполнить цикл по ``collections.defaultdict``::"

# 37364c19bd254f96a88726093d1db9d0
#~ msgid ""
#~ "Because dictionary lookup happens first, that behavior kicks in and "
#~ "provides a default value instead of using the intended ``.iteritems()`` "
#~ "method. In this case, consider converting to a dictionary first."
#~ msgstr ""
#~ "Так как поиск словаре происходит вперёд, такое поведение предоставляет "
#~ "значение по умолчанию вместо использования метода ``.iteritems()``. В "
#~ "данном случае, сначала рассмотрим преобразование в словарь."

# 7a115c2e50194cc69b0f1d70a1346a27
#~ msgid ""
#~ "In the above example, ``{{ section.title }}`` will be replaced with the "
#~ "``title`` attribute of the ``section`` object."
#~ msgstr ""
#~ "В примере выше, ``{{ section.title }}`` будет заменен на атрибут "
#~ "``title`` объекта ``section``."

# ba0cdd5e0b144067a45e90f29f0ec624
#~ msgid ""
#~ "If you use a variable that doesn't exist, the template system will insert "
#~ "the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is "
#~ "set to ``''`` (the empty string) by default."
#~ msgstr ""
#~ "Если переменная не найдена, шаблон вставит значение из настройки :setting:"
#~ "`TEMPLATE_STRING_IF_INVALID`, которая равна ``''`` (пустой строке) по-"
#~ "умолчанию."

# 8bd19adf676f49d5b677f04b09ccb7a3
#~ msgid ""
#~ "Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be "
#~ "interpreted as a literal string and not using the value of the variable "
#~ "\"bar\", if one exists in the template context."
#~ msgstr ""
#~ "Следует отметить, что \"bar\" в шаблонном выражении выглядит как ``{{ foo."
#~ "bar }}`` и будет интерпретирован как строка. Если в шаблонном контексте "
#~ "определена переменная с таким именем, то значение локальной переменной "
#~ "\"bar\" будет проигнорировано."

# 0fe29e1597bc4576bf8d9d5cb48dcbe1
#~ msgid "You can modify variables for display by using **filters**."
#~ msgstr "Вы можете изменить значение переменной используя **фильтры**."

# b0209fc4074d46a596c794234e74ee7d
#~ msgid ""
#~ "Filters look like this: ``{{ name|lower }}``. This displays the value of "
#~ "the ``{{ name }}`` variable after being filtered through the :tfilter:"
#~ "`lower` filter, which converts text to lowercase. Use a pipe (``|``) to "
#~ "apply a filter."
#~ msgstr ""
#~ "Фильтры выглядят таким образом: ``{{ name|lower }}``. Это выведет "
#~ "значение переменной ``{{ name }}`` после применения фильтра :tfilter:"
#~ "`lower` к нему, который преобразует значение в нижний регистр. "
#~ "Используйте символ (``|``) для применения фильтра."

# d5c9d37c690d4a2a837b40f3dd1ed88d
#~ msgid ""
#~ "Filters can be \"chained.\" The output of one filter is applied to the "
#~ "next. ``{{ text|escape|linebreaks }}`` is a common idiom for escaping "
#~ "text contents, then converting line breaks to ``<p>`` tags."
#~ msgstr ""
#~ "Можно использовать \"цепочку\" фильтров. Вывод одного фильтра "
#~ "используется для другого. ``{{ text|escape|linebreaks }}`` обычно "
#~ "применяется для экранирования текста, и замены переноса строки тегами "
#~ "``<p>``."

# 83cf676da9224ff5801ddbfbdad40bba
#~ msgid ""
#~ "Some filters take arguments. A filter argument looks like this: ``{{ bio|"
#~ "truncatewords:30 }}``. This will display the first 30 words of the "
#~ "``bio`` variable."
#~ msgstr ""
#~ "Некоторые фильтры принимают аргументы. Аргумент фильтра выглядит таким "
#~ "образом: ``{{ bio|truncatewords:30 }}``. Этот код отобразит первые 30 "
#~ "слов переменной ``bio``."

# a66aecb77ae84b7c8b0f69a6d19527af
#~ msgid ""
#~ "Filter arguments that contain spaces must be quoted; for example, to join "
#~ "a list with commas and spaced you'd use ``{{ list|join:\", \" }}``."
#~ msgstr ""
#~ "Аргументы фильтров, которые содержат пробелы, должны быть заключены в "
#~ "кавычки. Например, чтобы объединить список пробелом и запятой, "
#~ "используйте ``{{ list|join:\", \" }}``."

# 10da6836ea97410e90a71c392bb0c885
#~ msgid ""
#~ "Django provides about thirty built-in template filters. You can read all "
#~ "about them in the :ref:`built-in filter reference <ref-templates-builtins-"
#~ "filters>`. To give you a taste of what's available, here are some of the "
#~ "more commonly used template filters:"
#~ msgstr ""
#~ "Django предоставляет около тридцати встроенных фильтров. Вы можете "
#~ "прочитать о них в :ref:`разделе о встроенных фильтрах <ref-templates-"
#~ "builtins-filters>`. Чтобы дать вам представление о возможностях, вот "
#~ "некоторые из наиболее часто используемых фильтров:"

# dd5ed53839254cc1ac30f396c2f06e9f
#~ msgid ":tfilter:`default`"
#~ msgstr ":tfilter:`default`"

# b70ade8790344ea1b641352e32d2d31c
#~ msgid ""
#~ "If a variable is false or empty, use given default. Otherwise, use the "
#~ "value of the variable"
#~ msgstr ""
#~ "Если значение равно ``False``, будет использовано значение по умолчанию. "
#~ "В противном случае используется значение."

# 7480af08eb0444e5bc78895573259d44
#~ msgid ""
#~ "If ``value`` isn't provided or is empty, the above will display "
#~ "\"``nothing``\"."
#~ msgstr ""
#~ "Если ``value`` равно ``\"\"`` (пустая строка), будет выведено ``nothing``."

# da94379ccb9f4c9d9fe3abcc76c9293e
#~ msgid ":tfilter:`length`"
#~ msgstr ":tfilter:`length`"

# 90ce9dab4b9e4d3fa7e650fdb5144c8d
#~ msgid ""
#~ "Returns the length of the value. This works for both strings and lists; "
#~ "for example::"
#~ msgstr ""
#~ "Возвращает размер значения. Работает для строк и списков, например::"

# 67bcf20d7db3486dab8c29ed1fc8d667
#~ msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
#~ msgstr "Если ``value`` равно ``['a', 'b', 'c', 'd']``, выведет ``4``."

# a76a3a16f67e4ba4a7c393c679788b14
#~ msgid ":tfilter:`striptags`"
#~ msgstr ":tfilter:`striptags`"

# 5d7a0dbe7e3b43e78d4baa609d7f64c8
#~ msgid "Strips all [X]HTML tags. For example::"
#~ msgstr "Удаляет все [X]HTML теги. Например::"

# 07e20e060066445dae60c46478ee9859
#~ msgid ""
#~ "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>"
#~ "\"``, the output will be ``\"Joel is a slug\"``."
#~ msgstr ""
#~ "Если ``value`` равно ``\"<b>Joel</b> <button>is</button> a <span>slug</"
#~ "span>\"``, выведет ``\"Joel is a slug\"``."

# 192621bec1a44a1fafeb028a92712923
#~ msgid ""
#~ "Again, these are just a few examples; see the :ref:`built-in filter "
#~ "reference <ref-templates-builtins-filters>` for the complete list."
#~ msgstr ""
#~ "Опять же, это всего лишь несколько примеров; полный список смотрите :ref:"
#~ "`раздел о встроенных фильтрах <ref-templates-builtins-filters>`."

# 0b5e9162b74d446da8c488714bf54f63
#~ msgid ""
#~ "You can also create your own custom template filters; see :doc:`/howto/"
#~ "custom-template-tags`."
#~ msgstr ""
#~ "Вы можете создать собственный фильтр; смотрите :doc:`/howto/custom-"
#~ "template-tags`."

# d2112403e8ee43ecbac7ba7ce9f5d19d
# 6a62d74a8a114b09aa28afc7e17e0bd5
#~ msgid ""
#~ "Django's admin interface can include a complete reference of all template "
#~ "tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
#~ "admindocs`."
#~ msgstr ""
#~ "Интерфейс администратора Django может предоставить полный список "
#~ "доступных тегов и фильтров. Смотрите :doc:`/ref/contrib/admin/admindocs`."

# ade3c60483524723a2d406d81467d1be
#~ msgid ""
#~ "Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
#~ "Some create text in the output, some control flow by performing loops or "
#~ "logic, and some load external information into the template to be used by "
#~ "later variables."
#~ msgstr ""
#~ "Теги выглядят таким образом: ``{% tag %}``. Теги сложнее чем переменные: "
#~ "одни создают текст для вывода, влияют на выполнение используя условия и "
#~ "циклы, другие загружают дополнительную информацию в шаблоны, чтобы "
#~ "использовать ее далее через переменные."

# 000111c65907405f89bce087e49326a5
#~ msgid ""
#~ "Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
#~ "contents ... {% endtag %}``)."
#~ msgstr ""
#~ "Некоторые теги требуют открывающий и закрывающий теги (например, ``{% tag "
#~ "%} ... содержимое тега ... {% endtag %}``)."

# 049efc7c33f8445aa9b86d0927bd4253
#~ msgid ""
#~ "Django ships with about two dozen built-in template tags. You can read "
#~ "all about them in the :ref:`built-in tag reference <ref-templates-"
#~ "builtins-tags>`. To give you a taste of what's available, here are some "
#~ "of the more commonly used tags:"
#~ msgstr ""
#~ "Django содержит около двадцати встроенных тегов. Вы можете прочитать все "
#~ "о них в :ref:`разделе о встроенных тегах <ref-templates-builtins-tags>`. "
#~ "Чтобы дать вам представление о возможностях, вот некоторые из наиболее "
#~ "часто используемых тегов:"

# ce7ba1d0a6f7445f8d0c92da6082d4c8
#~ msgid ":ttag:`for`"
#~ msgstr ":ttag:`for`"

# f02470727ab144538ddaa297e2113369
#~ msgid ""
#~ "Loop over each item in an array.  For example, to display a list of "
#~ "athletes provided in ``athlete_list``::"
#~ msgstr ""
#~ "Цикл по каждому элементу массива.  Например, выведем список спортсменов "
#~ "из ``athlete_list``::"

# 8b53531238944f308d0c4e1a29f92a36
#~ msgid ":ttag:`if`, ``elif``, and ``else``"
#~ msgstr ":ttag:`if`, ``elif``, и ``else``"

# 44157ac6b0894d2aa1b7ae97cd938ab3
#~ msgid ""
#~ "Evaluates a variable, and if that variable is \"true\" the contents of "
#~ "the block are displayed::"
#~ msgstr ""
#~ "Вычисляет переменную и если она равна \"true\", выводит содержимое блока::"

# b5b5bceafb8e488885d80742d6e77cb1
#~ msgid ""
#~ "In the above, if ``athlete_list`` is not empty, the number of athletes "
#~ "will be displayed by the ``{{ athlete_list|length }}`` variable. "
#~ "Otherwise, if ``athlete_in_locker_room_list`` is not empty, the message "
#~ "\"Athletes should be out...\" will be displayed. If both lists are empty, "
#~ "\"No athletes.\" will be displayed."
#~ msgstr ""
#~ "В примере выше, если ``athlete_list`` не пустой, будет отображено "
#~ "количество спортсменов ``{{ athlete_list|length }}``. Иначе, если "
#~ "``athlete_in_locker_room_list`` не пустой, будет показано сообщение "
#~ "\"Athletes should be out...\". Если оба списка пустые, будет показано "
#~ "сообщение \"No athletes.\"."

# 63efcc2e1e2d4592bfc2ef4de29562b8
#~ msgid ""
#~ "You can also use filters and various operators in the :ttag:`if` tag::"
#~ msgstr "Вы можете использовать фильтры и операторы в теге :ttag:`if` tag::"

# 8a6c3fced7ef4b4f830af442f3aecc01
#~ msgid ""
#~ "While the above example works, be aware that most template filters return "
#~ "strings, so mathematical comparisons using filters will generally not "
#~ "work as you expect. :tfilter:`length` is an exception."
#~ msgstr ""
#~ "Несмотря на работоспособность вышеупомянутого примера, помните, что "
#~ "большинство шаблонных фильтров возвращает строки, таким образом, "
#~ "математическое сравнение результатов фильтров в общем случае будет "
#~ "работать не так, как вы можете ожидать. Хотя : tfilter:`length` является "
#~ "исключением."

# ae55f950596a4548a48c8b8e3f184c3f
#~ msgid ":ttag:`block` and :ttag:`extends`"
#~ msgstr ":ttag:`block` и :ttag:`extends`"

# 819c94a354a040adb26deceb65dd0749
#~ msgid ""
#~ "Set up `template inheritance`_ (see below), a powerful way of cutting "
#~ "down on \"boilerplate\" in templates."
#~ msgstr ""
#~ "Определяет  :ref:`наследование шаблонов <template-inheritance>` (смотрите "
#~ "ниже), эффективный способ использовать шаблоны."

# b713d4c8d03f41e8862285a3ca24215d
#~ msgid ""
#~ "Again, the above is only a selection of the whole list; see the :ref:"
#~ "`built-in tag reference <ref-templates-builtins-tags>` for the complete "
#~ "list."
#~ msgstr ""
#~ "Опять же, это только несколько тегов; полный список смотрите в :ref:"
#~ "`разделе о встроенных тегах <ref-templates-builtins-tags>`."

# 9b5f027343cb4e43a8d4ecc508dac416
#~ msgid ""
#~ "You can also create your own custom template tags; see :doc:`/howto/"
#~ "custom-template-tags`."
#~ msgstr ""
#~ "Вы можете создать собственный тег; смотрите :doc:`/howto/custom-template-"
#~ "tags`."

# f7cca4597a424b43af51c36a9804fef0
#~ msgid ""
#~ "To comment-out part of a line in a template, use the comment syntax: ``{# "
#~ "#}``."
#~ msgstr ""
#~ "Чтобы закомментировать строку в шаблоне, используйте синтаксис "
#~ "комментариев: ``{# #}``."

# dbc1f319d437477087f300d2be853579
#~ msgid "For example, this template would render as ``'hello'``::"
#~ msgstr "Например, этот шаблон выведет ``'hello'``::"

# 070199fbd8ea457da6be2d0a5d67a9bf
#~ msgid ""
#~ "A comment can contain any template code, invalid or not. For example::"
#~ msgstr ""
#~ "Комментарий может содержать любой код шаблона, правильный или нет. "
#~ "Например::"

# abcff62b7a704a09a532b9c18aee6853
#~ msgid ""
#~ "This syntax can only be used for single-line comments (no newlines are "
#~ "permitted between the ``{#`` and ``#}`` delimiters). If you need to "
#~ "comment out a multiline portion of the template, see the :ttag:`comment` "
#~ "tag."
#~ msgstr ""
#~ "Этот синтаксис может быть использован только для однострочных "
#~ "комментариев (нельзя использовать перенос строки между ``{#`` и ``#}``). "
#~ "Если вам нужно закомментировать несколько строк, используйте тег :ttag:"
#~ "`comment`."

# 6ab4da952ddc458daa72ceee5385affb
#~ msgid "Template inheritance"
#~ msgstr "Наследование шаблонов"

# 89ae1e5cdd7346daa96dbd88e81f3b4f
#~ msgid ""
#~ "The most powerful -- and thus the most complex -- part of Django's "
#~ "template engine is template inheritance. Template inheritance allows you "
#~ "to build a base \"skeleton\" template that contains all the common "
#~ "elements of your site and defines **blocks** that child templates can "
#~ "override."
#~ msgstr ""
#~ "Самая могущественная -- и, следовательно, самая сложная -- часть "
#~ "механизма шаблонов Django -- это наследование шаблонов. Наследование "
#~ "шаблонов позволяет создать вам шаблон-\"скелет\", который содержит "
#~ "базовые элементы вашего сайта и определяет **блоки**, которые могут быть "
#~ "переопределены дочерними шаблонами."

# c2f1e9ea43bc4635b8d334bcad53fcc4
#~ msgid ""
#~ "It's easiest to understand template inheritance by starting with an "
#~ "example::"
#~ msgstr "Проще всего понять наследования шаблонов с помощью примера:"

# f144259fe2e3434087e0cbb6ef6a8688
#~ msgid ""
#~ "This template, which we'll call ``base.html``, defines a simple HTML "
#~ "skeleton document that you might use for a simple two-column page. It's "
#~ "the job of \"child\" templates to fill the empty blocks with content."
#~ msgstr ""
#~ "Этот шаблон, который мы будем называть ``base.html``, определяет HTML "
#~ "структуру документа, которую вы можете использовать для двух-колоночной "
#~ "страницы. Задача \"дочернего\" шаблона заполнить пустые блоки содержимым."

# 8684aa413a2745a494c8e083f9806e0f
#~ msgid ""
#~ "In this example, the :ttag:`block` tag defines three blocks that child "
#~ "templates can fill in. All the :ttag:`block` tag does is to tell the "
#~ "template engine that a child template may override those portions of the "
#~ "template."
#~ msgstr ""
#~ "В этом примере, тег :ttag:`block` определяет три блока, которые может "
#~ "переопределить дочерний шаблон. Все что делает тег :ttag:`block` -- "
#~ "указывает механизму шаблонов, какая часть шаблона может быть "
#~ "переопределена в дочернем шаблоне."

# 7d4af052a16d4e149fc6b9b27ff9f3d5
#~ msgid ""
#~ "The :ttag:`extends` tag is the key here. It tells the template engine "
#~ "that this template \"extends\" another template. When the template system "
#~ "evaluates this template, first it locates the parent -- in this case, "
#~ "\"base.html\"."
#~ msgstr ""
#~ "Ключевым здесь есть тег :ttag:`extends`. Он говорит механизму шаблонов, "
#~ "что этот шаблон \"наследует\" другой шаблон. Когда механизм шаблонов "
#~ "выполняет этот шаблон, первым делом находится родительский шаблон -- в "
#~ "этом примере \"base.html\"."

# 7ea85e9dff2048dcabcef386187c65ab
#~ msgid ""
#~ "At that point, the template engine will notice the three :ttag:`block` "
#~ "tags in ``base.html`` and replace those blocks with the contents of the "
#~ "child template. Depending on the value of ``blog_entries``, the output "
#~ "might look like::"
#~ msgstr ""
#~ "Далее механизм шаблонов находит три тега :ttag:`block` в ``base.html`` и "
#~ "заменяет их содержимым дочернего шаблона. В зависимости от значения "
#~ "``blog_entries``, результат может выглядеть таким образом::"

# a3741c0605b64fb08d6f4da55ab71501
#~ msgid ""
#~ "Note that since the child template didn't define the ``sidebar`` block, "
#~ "the value from the parent template is used instead. Content within a ``{% "
#~ "block %}`` tag in a parent template is always used as a fallback."
#~ msgstr ""
#~ "Так как дочерний шаблон не определяет блок ``sidebar``, будет "
#~ "использовано значение из родительского шаблона. Содержимое тега ``{% "
#~ "block %}`` родительского шаблона всегда используется как значение по "
#~ "умолчанию."

# 6cd2b627ce5f441cb716d4be3604a489
#~ msgid ""
#~ "You can use as many levels of inheritance as needed. One common way of "
#~ "using inheritance is the following three-level approach:"
#~ msgstr ""
#~ "Вы можете использовать столько уровней наследование, сколько вам нужно. "
#~ "Один из распространенных способов использовать наследование -- это "
#~ "трехуровневый подход:"

# 5ad81e4a174349fbbdd3eff0bc03c3b6
#~ msgid ""
#~ "Create a ``base.html`` template that holds the main look-and-feel of your "
#~ "site."
#~ msgstr ""
#~ "Создать шаблон ``base.html``, который отображает основной вид вашего "
#~ "сайта."

# c98d15d3d34540b2a9301e705ff5c0f0
#~ msgid ""
#~ "Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
#~ "site. For example, ``base_news.html``, ``base_sports.html``. These "
#~ "templates all extend ``base.html`` and include section-specific styles/"
#~ "design."
#~ msgstr ""
#~ "Создать шаблон ``base_SECTIONNAME.html`` для каждого \"раздела\" вашего "
#~ "сайта. Например, ``base_news.html``, ``base_sports.html``. Все эти "
#~ "шаблоны наследуют ``base.html`` и включают стили и дизайн специфические "
#~ "для конкретного раздела."

# d9124e875c514688bdf8635b2e759aab
#~ msgid ""
#~ "Create individual templates for each type of page, such as a news article "
#~ "or blog entry. These templates extend the appropriate section template."
#~ msgstr ""
#~ "Создание шаблона для каждого типа страницы, такие как новость или запись "
#~ "в блоге. Эти шаблоны наследуют соответствующий шаблон раздела."

# 74e11a742c0b4b7696acb714f5d5940b
#~ msgid ""
#~ "This approach maximizes code reuse and makes it easy to add items to "
#~ "shared content areas, such as section-wide navigation."
#~ msgstr ""
#~ "Такой подход позволяет максимально использовать существующий код и легко "
#~ "добавлять элементы, такие как элементы навигации специфические для "
#~ "каждого раздела, в общие блоки шаблона."

# ff3ac870f9d54ae8b06464c6fa7560ea
#~ msgid "Here are some tips for working with inheritance:"
#~ msgstr "Вот несколько советов по работе с наследованием:"

# 65d489883ec546c786a4379643e41e4c
#~ msgid ""
#~ "If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
#~ "first template tag in that template. Template inheritance won't work, "
#~ "otherwise."
#~ msgstr ""
#~ "Если вы используете :ttag:`{% extends %}<extends>`, он должен быть первым "
#~ "тегом в шаблоне. Иначе наследование не будет работать."

# 3bb1d212e3b645d7a5bc718ac79ed746
#~ msgid ""
#~ "More :ttag:`{% block %}<block>` tags in your base templates are better. "
#~ "Remember, child templates don't have to define all parent blocks, so you "
#~ "can fill in reasonable defaults in a number of blocks, then only define "
#~ "the ones you need later. It's better to have more hooks than fewer hooks."
#~ msgstr ""
#~ "Чем больше тегов :ttag:`{% block %}<block>` в вашем шаблоне, тем лучше. "
#~ "Помните, дочерний шаблон не обязан определять все блоки родительского, вы "
#~ "можете указать значение по умолчанию для всех блоков, а затем определить "
#~ "в дочернем шаблоне только те, которые необходимы. Лучше иметь больше "
#~ "\"hooks\", чем меньше \"hooks\"."

# 20e5ce4f9cd04acd9bb8a39a6471473c
#~ msgid ""
#~ "If you find yourself duplicating content in a number of templates, it "
#~ "probably means you should move that content to a ``{% block %}`` in a "
#~ "parent template."
#~ msgstr ""
#~ "Если вы дублируете содержимое в нескольких шаблонах, возможно вы должны "
#~ "перенести его в тег ``{% block %}`` родительского шаблона."

# 464196833fc74e5eb819a0d618398397
#~ msgid ""
#~ "If you need to get the content of the block from the parent template, the "
#~ "``{{ block.super }}`` variable will do the trick. This is useful if you "
#~ "want to add to the contents of a parent block instead of completely "
#~ "overriding it. Data inserted using ``{{ block.super }}`` will not be "
#~ "automatically escaped (see the `next section`_), since it was already "
#~ "escaped, if necessary, in the parent template."
#~ msgstr ""
#~ "Если вам необходимо содержимое блока родительского шаблона, используйте "
#~ "переменную ``{{ block.super }}``. Эта полезно, если вам необходимо "
#~ "дополнить содержимое родительского блока, а не полностью переопределить "
#~ "его. Содержимое ``{{ block.super }}`` не будет автоматически экранировано "
#~ "(смотрите :ref:`раздел ниже <automatic-html-escaping>`), так как оно уже "
#~ "было экранировано, при необходимости, в родительском шаблоне."

# 825c11434b42412d8992b2462ea6f9b8
#~ msgid ""
#~ "For extra readability, you can optionally give a *name* to your ``{% "
#~ "endblock %}`` tag. For example::"
#~ msgstr ""
#~ "Для ясности, вы можете добавить *название* вашему тегу ``{% endblock %}"
#~ "``. Например::"

# 91669ac2e8ba434a9001ccef3ddd0e13
#~ msgid ""
#~ "In larger templates, this technique helps you see which ``{% block %}`` "
#~ "tags are being closed."
#~ msgstr ""
#~ "В больших шаблонах такой подход поможет вам увидеть какой тег ``{% block "
#~ "%}`` был закрыт."

# 05d84092ba2d442a9b5cb3fa076c46e5
#~ msgid ""
#~ "Finally, note that you can't define multiple :ttag:`block` tags with the "
#~ "same name in the same template. This limitation exists because a block "
#~ "tag works in \"both\" directions. That is, a block tag doesn't just "
#~ "provide a hole to fill -- it also defines the content that fills the hole "
#~ "in the *parent*. If there were two similarly-named :ttag:`block` tags in "
#~ "a template, that template's parent wouldn't know which one of the blocks' "
#~ "content to use."
#~ msgstr ""
#~ "Вы не можете определить несколько тегов :ttag:`block` с одним названием в "
#~ "одном шаблоне. Такое ограничение существует потому, что тег :ttag:`block` "
#~ "работает в \"оба\" направления. :ttag:`block` не просто предоставляет "
#~ "\"полость\" в шаблоне -- он определяет содержимое, которое заполняет "
#~ "\"полость\" в *родительском шаблоне*. Если бы было несколько тегов :ttag:"
#~ "`block` с одним названием, родительский шаблон не знал содержимое какого "
#~ "блока использовать."

# af289496010943e9a9569dcd732824d3
#~ msgid "Automatic HTML escaping"
#~ msgstr "Автоматическое экранирование HTML"

# 61e37993781e46abb74e831f1078a8d0
#~ msgid ""
#~ "When generating HTML from templates, there's always a risk that a "
#~ "variable will include characters that affect the resulting HTML. For "
#~ "example, consider this template fragment::"
#~ msgstr ""
#~ "Создавая HTML используя шаблон, есть риск, что переменная может содержать "
#~ "символы, которые повлияют на структуру полученного HTML. Например, "
#~ "рассмотрим такой фрагмент::"

# 7779f35b760249f8bcdd44857ac3a973
#~ msgid ""
#~ "At first, this seems like a harmless way to display a user's name, but "
#~ "consider what would happen if the user entered their name as this::"
#~ msgstr ""
#~ "На первый взгляд это кажется безобидным способом отображения имени "
#~ "пользователя, но давайте посмотрим, что произойдет, если пользователь "
#~ "выбрал такое имя:::"

# cb4b76ad8fbf4fd6905012c84ba26823
#~ msgid "With this name value, the template would be rendered as::"
#~ msgstr "С таким именем шаблон вернет::"

# ca040842b8d943a2b2b4d9a7d136085e
#~ msgid "...which means the browser would pop-up a JavaScript alert box!"
#~ msgstr "...что приведет к отображению alert-окна JavaScript!"

# fda644aefd5f4c4290f75cbea670ade4
#~ msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
#~ msgstr "Аналогично, что если имя содержит символ ``'<'``?"

# 73a9fd3bacdb4f30bf4204270248062a
#~ msgid "That would result in a rendered template like this::"
#~ msgstr "Шаблон вернет такое содержимое::"

# bb6114e1f8a84f0886848c0f3117320c
#~ msgid ""
#~ "...which, in turn, would result in the remainder of the Web page being "
#~ "bolded!"
#~ msgstr ""
#~ "...в результате оставшееся содержимое страницы будет выделено полужирным!"

# f3464b2288854e18a8b0f3885428bd83
#~ msgid ""
#~ "Clearly, user-submitted data shouldn't be trusted blindly and inserted "
#~ "directly into your Web pages, because a malicious user could use this "
#~ "kind of hole to do potentially bad things. This type of security exploit "
#~ "is called a `Cross Site Scripting`_ (XSS) attack."
#~ msgstr ""
#~ "Очевидно, пользовательским данными нельзя слепо доверять и вставлять "
#~ "непосредственно в содержимое страницы, так как злоумышленники могут "
#~ "использовать это с плохими намерениями. Такой тип уязвимости называется "
#~ "`Cross Site Scripting <http://ru.wikipedia.org/wiki/%D0%9C"
#~ "%D0%B5%D0%B6%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D1%81%D0%BA"
#~ "%D1%80%D0%B8%D0%BF%D1%82%D0%B8%D0%BD%D0%B3>`_ (XSS) атакой."

# e2489e5fef944e68a1b7868b233139ab
#~ msgid "To avoid this problem, you have two options:"
#~ msgstr "Чтобы избежать этой проблемы, у вас есть два варианта:"

# 7c268055785344208ab6b0047d07eff0
#~ msgid ""
#~ "One, you can make sure to run each untrusted variable through the :"
#~ "tfilter:`escape` filter (documented below), which converts potentially "
#~ "harmful HTML characters to unharmful ones. This was the default solution "
#~ "in Django for its first few years, but the problem is that it puts the "
#~ "onus on *you*, the developer / template author, to ensure you're escaping "
#~ "everything. It's easy to forget to escape data."
#~ msgstr ""
#~ "Первый, вы можете применять ко всем сомнительным переменным фильтр :"
#~ "tfilter:`escape` (описанный далее), который преобразует потенциально "
#~ "опасные HTML символы в безопасные. Такое решение было принятым в первых "
#~ "версиях Django, но проблема в том, что оно возлагает бремя "
#~ "ответственности за безопасность на *вас*, разработчика / автора шаблона. "
#~ "Легко забыть экранировать переменную."

# 9a6f99a3008e4c448d9362048e1ddf27
#~ msgid ""
#~ "Two, you can take advantage of Django's automatic HTML escaping. The "
#~ "remainder of this section describes how auto-escaping works."
#~ msgstr ""
#~ "Второй, вы можете позволить Django автоматически экранировать HTML. "
#~ "Оставшаяся часть этого раздела описывает, как автоматическое "
#~ "экранирование работает."

# a2c6625e0d9c4eaeaf0e0ad6ba1c4044
#~ msgid ""
#~ "By default in Django, every template automatically escapes the output of "
#~ "every variable tag. Specifically, these five characters are escaped:"
#~ msgstr ""
#~ "По-умолчанию в Django, каждый шаблон экранирует все переменные. В "
#~ "частности выполняются такие замены:"

# ef39136807bb41f68f1bb31100c3f4f6
#~ msgid "``<`` is converted to ``&lt;``"
#~ msgstr "``<`` заменяется на ``&lt;``"

# f6bf91e855a540478a714b55afce1026
#~ msgid "``>`` is converted to ``&gt;``"
#~ msgstr "``>`` заменяется на ``&gt;``"

# 16e820ce340943a8a9c54ee47a851c29
#~ msgid "``'`` (single quote) is converted to ``&#39;``"
#~ msgstr "``'`` (одинарная кавычка) заменяется на ``&#39;``"

# ca3b7e4f5ce4484b8d8615f01049c57b
#~ msgid "``\"`` (double quote) is converted to ``&quot;``"
#~ msgstr "``\"`` (двойная кавычка) заменяется на ``&quot;``"

# 1429057ff3a345b8a9d806ccfb2969c3
#~ msgid "``&`` is converted to ``&amp;``"
#~ msgstr "``&`` заменяется на ``&amp;``"

# 4ce97e2e0eef404eb910b0526f3cadfa
#~ msgid ""
#~ "Again, we stress that this behavior is on by default. If you're using "
#~ "Django's template system, you're protected."
#~ msgstr ""
#~ "Опять же, мы подчеркиваем, что такое поведение используется по умолчанию. "
#~ "Если вы используете систему шаблонов Django, вы в безопасности."

# dfd5ad7103ec4051aea2c8b45447a3b7
#~ msgid "How to turn it off"
#~ msgstr "Как это отключить"

# 717c058f5dec40acbc5bc30ea75cd31c
#~ msgid ""
#~ "If you don't want data to be auto-escaped, on a per-site, per-template "
#~ "level or per-variable level, you can turn it off in several ways."
#~ msgstr ""
#~ "Если вы не хотите, чтобы данные автоматически экранировались, на уровне "
#~ "сайта, шаблона или одной переменной, вы можете отключить это несколькими "
#~ "способами."

# 3ea07dba136443238fc2df6cad2902fe
#~ msgid ""
#~ "Why would you want to turn it off? Because sometimes, template variables "
#~ "contain data that you *intend* to be rendered as raw HTML, in which case "
#~ "you don't want their contents to be escaped. For example, you might store "
#~ "a blob of HTML in your database and want to embed that directly into your "
#~ "template. Or, you might be using Django's template system to produce text "
#~ "that is *not* HTML -- like an email message, for instance."
#~ msgstr ""
#~ "Зачем вам отключить экранирование? Потому что в некоторых ситуациях, вы "
#~ "*намеренно* добавляете HTML в переменную, и хотите, чтобы он выводился "
#~ "без экранирования. Например, вы можете хранить HTML в базе данных и "
#~ "хотите непосредственно вставить его в содержимое страницы. Или шаблоны "
#~ "Django используются для создания текста, который *не* является HTML -- "
#~ "например email."

# c040440af6354e7f89d2f715b4ee7946
#~ msgid "For individual variables"
#~ msgstr "Для отдельных переменных"

# 30ef4d501ec34d25845715a731376e9a
#~ msgid ""
#~ "To disable auto-escaping for an individual variable, use the :tfilter:"
#~ "`safe` filter::"
#~ msgstr ""
#~ "Для отключения авто-экранирования для отдельных переменных, используйте "
#~ "фильтр :tfilter:`safe`::"

# 1d5bfe3a8c1b4e49915f1d9ffbbb13e7
#~ msgid ""
#~ "Think of *safe* as shorthand for *safe from further escaping* or *can be "
#~ "safely interpreted as HTML*. In this example, if ``data`` contains "
#~ "``'<b>'``, the output will be::"
#~ msgstr ""
#~ "Думайте о :tfilter:`safe` как сокращение *\"обезопасить от последующего "
#~ "экранирования\"* или *\"может быть смело интерпретировано как HTML\"*. В "
#~ "этом примере, если ``data`` содержит ``'<b>'``, будет выведено::"

# 5d76a9fb7da64e6f873f4c7288aa6004
#~ msgid "For template blocks"
#~ msgstr "Для блоков шаблона"

# ebfcbddf66d347f2bad1632847caf084
#~ msgid ""
#~ "To control auto-escaping for a template, wrap the template (or just a "
#~ "particular section of the template) in the :ttag:`autoescape` tag, like "
#~ "so::"
#~ msgstr ""
#~ "Для контроля авто-экранирования в шаблоне, \"оберните\" шаблон (или часть "
#~ "шаблона) тегом :ttag:`autoescape`, например::"

# f11304f6313745bfab986c1560b9926a
#~ msgid ""
#~ "The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its "
#~ "argument. At times, you might want to force auto-escaping when it would "
#~ "otherwise be disabled. Here is an example template::"
#~ msgstr ""
#~ "Тег :ttag:`autoescape` в качестве аргумента принимает ``on`` или ``off``. "
#~ "В некоторых случаях, вы захотите включить экранирование в шаблоне, в "
#~ "котором оно было отключено. Например::"

# 0c31d7de36ec45b68ff617b47a501653
#~ msgid ""
#~ "The auto-escaping tag passes its effect onto templates that extend the "
#~ "current one as well as templates included via the :ttag:`include` tag, "
#~ "just like all block tags. For example:"
#~ msgstr ""
#~ "Тег :ttag:`autoescape` распространяет свой эффект на шаблоны, которые "
#~ "наследуют текущий, и на включенные тегом  :ttag:`include` шаблоны, как и "
#~ "другие блочные теги. Например::"

# 9816b544495a4ae9bfe8434296f27edb
#~ msgid ""
#~ "Because auto-escaping is turned off in the base template, it will also be "
#~ "turned off in the child template, resulting in the following rendered "
#~ "HTML when the ``greeting`` variable contains the string ``<b>Hello!</"
#~ "b>``::"
#~ msgstr ""
#~ "Так как авто-экранирование отключено в базовом шаблоне, оно будет "
#~ "отключено и в дочернем шаблоне. Если переменная ``greeting`` равна "
#~ "``<b>Hello!</b>``, будет выведено::"

# 74505fbc46e243be9f6dc16fc8c9f47d
#~ msgid "Notes"
#~ msgstr "Заметки"

# 78c9fcf6ca4c44a8965945a06e480e83
#~ msgid ""
#~ "Generally, template authors don't need to worry about auto-escaping very "
#~ "much. Developers on the Python side (people writing views and custom "
#~ "filters) need to think about the cases in which data shouldn't be "
#~ "escaped, and mark data appropriately, so things Just Work in the template."
#~ msgstr ""
#~ "Обычно, авторы шаблонов не должны волноваться про авто-экранирование. "
#~ "Разработчики на стороне Python (те, кто создает представления и фильтры) "
#~ "должны определять в каких случаях данные не должны экранироваться и "
#~ "помечать их соответствующим образом, так что все будет `просто работать` "
#~ "в шаблонах."

# 3adf79c9439045a2bf357116d94536d5
#~ msgid ""
#~ "If you're creating a template that might be used in situations where "
#~ "you're not sure whether auto-escaping is enabled, then add an :tfilter:"
#~ "`escape` filter to any variable that needs escaping. When auto-escaping "
#~ "is on, there's no danger of the :tfilter:`escape` filter *double-"
#~ "escaping* data -- the :tfilter:`escape` filter does not affect auto-"
#~ "escaped variables."
#~ msgstr ""
#~ "Если вы создаете шаблон, который может использовать как с включенным авто-"
#~ "экранированием так и без него, добавляйте фильтр :tfilter:`escape` для "
#~ "каждой переменной, которую нужно экранировать. При включенном авто-"
#~ "экранировании фильтр :tfilter:`escape` не выполнит замену символов "
#~ "повторно."

# 80abbf16c49b4e76a9b8707eeaacd4a4
#~ msgid "String literals and automatic escaping"
#~ msgstr "Строки и автоматическое экранирование"

# e16e132ffa21439a83c41ee682b1fadc
#~ msgid "As we mentioned earlier, filter arguments can be strings::"
#~ msgstr "Как уже упоминалось выше, аргументом фильтра может быть строка::"

# aa9051f5a5f74618b288a3dbf7b4528c
#~ msgid ""
#~ "All string literals are inserted **without** any automatic escaping into "
#~ "the template -- they act as if they were all passed through the :tfilter:"
#~ "`safe` filter. The reasoning behind this is that the template author is "
#~ "in control of what goes into the string literal, so they can make sure "
#~ "the text is correctly escaped when the template is written."
#~ msgstr ""
#~ "Все строки в шаблоне вставляются **без** автоматического экранирования -- "
#~ "они обрабатываются как строки, к которым применили фильтр :tfilter:"
#~ "`safe`. Причина этого состоит в том, что автор шаблона контролирует "
#~ "содержимое этих строк и самостоятельно может убедиться при создании "
#~ "шаблона, что они не содержат не безопасных символов."

# a70dfd2f9e424c5fa70c5eddc920ad4c
#~ msgid "This means you would write ::"
#~ msgstr "Это означает, чтобы вы должны писать::"

# 7654fae00eb84ffe87cb70680ebf331b
#~ msgid "...rather than::"
#~ msgstr "...вместо::"

# d980614a2ed5486cb04a4d5b9ee62e04
#~ msgid ""
#~ "This doesn't affect what happens to data coming from the variable itself. "
#~ "The variable's contents are still automatically escaped, if necessary, "
#~ "because they're beyond the control of the template author."
#~ msgstr ""
#~ "Это правило не распространяется на переменные, которые используются в "
#~ "качестве аргументов, так как автор шаблоне не может контролировать "
#~ "содержимое этих переменных."

# 2c992443237d42628791b5ea4cdef854
#~ msgid "Accessing method calls"
#~ msgstr "Вызов методов"

# 026c75c58f34405ba5e59f9fddff44a8
#~ msgid ""
#~ "Most method calls attached to objects are also available from within "
#~ "templates. This means that templates have access to much more than just "
#~ "class attributes (like field names) and variables passed in from views. "
#~ "For example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-"
#~ "queries-related>` syntax for finding a collection of objects related on a "
#~ "foreign key. Therefore, given a model called \"comment\" with a foreign "
#~ "key relationship to a model called \"task\" you can loop through all "
#~ "comments attached to a given task like this::"
#~ msgstr ""
#~ "Вызов большинства методов объектов также доступен в шаблоне. Это "
#~ "означает, что шаблон имеет доступ не только к атрибутам классов "
#~ "(например, название поля) и переменных переданных из представлениях. "
#~ "Например, Django ORM предоставляет :ref:`\"entry_set\"<topics-db-queries-"
#~ "related>` атрибут для получения связанных через внешний ключ объектов. "
#~ "Следовательно, для модели комментариев(\"comment\") с внешним ключом на "
#~ "модель задач(\"task\") вы можете обратиться в цикле ко всем связанным "
#~ "комментариям переданного объекта задачи::"

# 58fee8333363456888033bb6e9b70912
#~ msgid ""
#~ "Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
#~ "method to count the number of objects they contain. Therefore, you can "
#~ "obtain a count of all comments related to the current task with::"
#~ msgstr ""
#~ "Также, :doc:`QuerySets</ref/models/querysets>` предоставляет метод "
#~ "``count()`` для получения количества объектов. Следовательно, вы можете "
#~ "получить количество комментариев связанных с конкретной задачей::"

# 61c3299bc4fc4e4b9a54ae452ccd74ee
#~ msgid ""
#~ "And of course you can easily access methods you've explicitly defined on "
#~ "your own models:"
#~ msgstr "И конечно вы можете использовать методы вашей модели::"

# b4ced439160e483eb7b6cef1603ff964
#~ msgid ""
#~ "Because Django intentionally limits the amount of logic processing "
#~ "available in the template language, it is not possible to pass arguments "
#~ "to method calls accessed from within templates. Data should be calculated "
#~ "in views, then passed to templates for display."
#~ msgstr ""
#~ "Так как Django намеренно ограничивает определение логики проекта в "
#~ "шаблоне, передавать аргументы при вызове метода в шаблоне нельзя. Данные "
#~ "должны вычисляться в представлении и передаваться в шаблон для "
#~ "отображения."

# 99065e3a3719449681326a140d52999f
#~ msgid "Custom tag and filter libraries"
#~ msgstr "Собственные библиотеки тегов и фильтров"

# 4a586a7486e54832a6895584032d6fea
#~ msgid ""
#~ "Certain applications provide custom tag and filter libraries. To access "
#~ "them in a template, use the :ttag:`load` tag::"
#~ msgstr ""
#~ "Некоторые приложения предоставляют собственные библиотеки тегов и "
#~ "фильтров. Чтобы использовать их в шаблоне, используйте тег :ttag:`load`::"

# 6ac26bfb05ac49b99b8f98ed9fab8a28
#~ msgid ""
#~ "In the above, the :ttag:`load` tag loads the ``comments`` tag library, "
#~ "which then makes the ``comment_form`` tag available for use. Consult the "
#~ "documentation area in your admin to find the list of custom libraries in "
#~ "your installation."
#~ msgstr ""
#~ "В это примере, тег :ttag:`load` загружает библиотеку ``comments``, "
#~ "которая предоставляет тег ``comment_form``. В разделе документации вашего "
#~ "интерфейса администратора вы можете найти список всех установленных "
#~ "библиотек."

# d9bfd6e9a8ff4150b2a1e2dc01d96109
#~ msgid ""
#~ "The :ttag:`load` tag can take multiple library names, separated by "
#~ "spaces. Example::"
#~ msgstr ""
#~ "Тег :ttag:`load` может принимать названия нескольких библиотек, "
#~ "разделенные пробелом. Например::"

# 8430e73cf0524ee490e457590f276827
#~ msgid ""
#~ "See :doc:`/howto/custom-template-tags` for information on writing your "
#~ "own custom template libraries."
#~ msgstr ""
#~ "Смотрите раздел :doc:`/howto/custom-template-tags`, чтобы узнать как "
#~ "создавать собственные библиотеки для шаблонов."

# ddef1274f1474e478913b65ac3438f84
#~ msgid "Custom libraries and template inheritance"
#~ msgstr "Собственные библиотеки и наследование шаблонов"

# d5d8baf3983240038939f0f92ce73ed5
#~ msgid ""
#~ "When you load a custom tag or filter library, the tags/filters are only "
#~ "made available to the current template -- not any parent or child "
#~ "templates along the template-inheritance path."
#~ msgstr ""
#~ "При загрузке библиотеки, теги и фильтры, которые она содержит, будут "
#~ "доступны только в текущем шаблоне -- не в родительском или дочернем "
#~ "шаблонах."

# 47dafada49574497b1814ed513faa3cd
#~ msgid ""
#~ "For example, if a template ``foo.html`` has ``{% load comments %}``, a "
#~ "child template (e.g., one that has ``{% extends \"foo.html\" %}``) will "
#~ "*not* have access to the comments template tags and filters. The child "
#~ "template is responsible for its own ``{% load comments %}``."
#~ msgstr ""
#~ "Например, если шаблон ``foo.html`` содержит ``{% load comments %}``, "
#~ "дочерний шаблон (например, содержащий``{% extends \"foo.html\" %}``) *не* "
#~ "сможет использовать теги и фильтры из этой библиотеки. Дочерний шаблон "
#~ "должен самостоятельно загрузить библиотеку, используя ``{% load comments "
#~ "%}``."

# 2a77ab437d8f4083881b4173217cb18e
#~ msgid "This is a feature for the sake of maintainability and sanity."
#~ msgstr "Так сделано ради \"maintainability\" и \"sanity\"."

# 359db41b2272480ab6238b5f9dc045b6
#~ msgid "Method call"
#~ msgstr "Вызов метода"
