# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-23 16:09\n"
"PO-Revision-Date: 2013-07-01 23:08+0300\n"
"Last-Translator: aum <compfaculty@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Poedit 1.5.4\n"

# 652d59e6451747f09a641d0f1965c572
#: ../../topics/class-based-views/generic-display.txt:5
msgid "Class-based generic views"
msgstr "Общие(generic) представления-классы"

# 9d45f73d8a484ed6a120093c37046360
#: ../../topics/class-based-views/generic-display.txt:7
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""
"При создании вэб-приложений мы часто снова и снова повторяем определенные "
"шаблоны в разработке, что делает саму разработку скучной и монотонной. "
"Django старается избавить нас от этой монотонности при работе с моделями и "
"шаблонами, но и на уровне создания представлений часто возникают такие же "
"проблемы."

# db164cd55a544c3fb2949b02ab2b2098
#: ../../topics/class-based-views/generic-display.txt:12
msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""
"*Общие представления(generic views)* Django были разработаны, чтобы избавить "
"нас от этой скуки. В их основе лежит набор идиом и шаблонов, базирующийся на "
"практическом опыте создания представлений, который дает нам абстрактный "
"каркас для быстрого создания собственных представлений, без необходимости "
"писать лишний, повторяющийся код."

# 89d3f3c8fcf446c0bab90c04b341fcd9
#: ../../topics/class-based-views/generic-display.txt:17
msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""
"Мы можем выделить некоторые общие задачи, такие как отображение списка "
"объектов, и написать код, который будет отображает список *любых* объектов. "
"Затем мы можем указать модель, хранящую нужные объекты, и передать ее как "
"дополнительный аргумент в URLconf."

# 88c4797e8e844845a2e4b87aaeaf881a
#: ../../topics/class-based-views/generic-display.txt:21
msgid "Django ships with generic views to do the following:"
msgstr ""
"Django содержит встроенный набор общих представлений, которые могут делать "
"следующее:"

# 3e14f61264584bb982bc650eddea5e86
#: ../../topics/class-based-views/generic-display.txt:23
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""
"Отображать список и страницу подробной информации для одиночного объекта. "
"Если бы мы создавали приложение для управления обсуждениями, то "
"``TalkListView`` и ``RegisteredUserListView`` могли бы использоваться как "
"представления для отображения списков. Отдельная страница с обсуждениями, "
"может быть примером того, что мы зазываем  \"подробное(detail)\" "
"представление."

# 20dff073747d4c368050d71c7f2f6762
#: ../../topics/class-based-views/generic-display.txt:28
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages."
msgstr ""
"Представлять объекты-даты в указателях год/месяц/день в архиве страниц, "
"связанные детальные данные, и страницы  \"последние(latest)\"."

# eaace248c3044200981e9ffdb73ed9ce
#: ../../topics/class-based-views/generic-display.txt:31
msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""
"Позволять пользователям(как авторизованным так и нет) создавать, обновлять и "
"удалять объекты."

# 599fb353e2304622a17a2e54e3bd0c80
#: ../../topics/class-based-views/generic-display.txt:34
msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""
"Собранные вместе, эти представления предоставляют разработчику интерфейс для "
"решения наиболее часто встречаемых задач."

# 6fe7f31389504c36b8f5569cc650445d
#: ../../topics/class-based-views/generic-display.txt:39
msgid "Extending generic views"
msgstr "Расширение общих представлений"

# 14dbc72e36d541089f572de2ded6afe7
#: ../../topics/class-based-views/generic-display.txt:41
msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""
"Нет сомнений, что использование общих представлений может существенно "
"ускорить разработку . Однако, в большинстве проектов,  наступает момент, "
"когда общие представления перестают быть эффективными и достаточными. "
"Действительно, наиболее распространенный вопрос, который задают новые Django "
"разработчики, как заставить базовые представления обрабатывать более широкий "
"спектр ситуаций."

# 9cf0e8c6a5a34d4681a5c2f1da419784
#: ../../topics/class-based-views/generic-display.txt:47
msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release "
"- previously, they were just view functions with a bewildering array of "
"options; now, rather than passing in a large amount of configuration in the "
"URLconf, the recommended way to extend generic views is to subclass them, "
"and override their attributes or methods."
msgstr ""
"Это одна из причин, по которой общие представления были переработаны в "
"версии 1.3 .  Раньше они были просто функциями-представлениями с огромным "
"массивом возможных передаваемых параметров. Сейчас, вместо передачи "
"параметров конфигурации в файл URLconf, рекомендуемый способ расширения "
"общих представлений, это использование их в качестве родительских классов в "
"пользовательских классах  с последующим переопределением их атрибутов и "
"методов."

# 47e948ce3fdf4ef68f9d75a1ad3a105b
#: ../../topics/class-based-views/generic-display.txt:53
msgid ""
"That said, generic views will have a limit. If you find you're struggling to "
"implement your view as a subclass of a generic view, then you may find it "
"more effective to write just the code you need, using your own class-based "
"or functional views."
msgstr ""
"Тем не менее, общие представления имеют свои пределы. Если реализация вашего "
"представления, как подкласса общего представления вызывает большие "
"трудности, то вероятнее более эффективным будет написание необходимого вам "
"кода с использованием ваших собственных представлений-классов или "
"представлений-функций."

# b0a836525387458f8b64c4c591947e9e
#: ../../topics/class-based-views/generic-display.txt:58
msgid ""
"More examples of generic views are available in some third party "
"applications, or you could write your own as needed."
msgstr ""
"Больше примеров использования общих представлений вы можете найти в "
"некоторых приложениях сторонних разработчиков, или создать свое собственное, "
"выполняющее ваши задачи."

# ed5d86bf051745ea89454a5552eb71b2
#: ../../topics/class-based-views/generic-display.txt:63
msgid "Generic views of objects"
msgstr "Общие представления и отображение объектов"

# 148404d41efd4a2f8854ed343040a899
#: ../../topics/class-based-views/generic-display.txt:65
msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views that make generating list and detail views "
"of objects incredibly easy."
msgstr ""
"Класс :class:`~django.views.generic.base.TemplateView` безусловно очень "
"полезен, но настоящая мощь общих представлений Django раскрывается при "
"создании представлениий для работы с содержимым базы данных. Так как такая "
"задача возникает часто, Django предлагает полезный и удобный набор "
"встроенных общих представлений-классов, который позволяют с легкостью "
"отображать список объектов или конкретный объект."

# 059f80857cf94b3c91718e87eab93e49
#: ../../topics/class-based-views/generic-display.txt:71
msgid ""
"Let's start by looking at some examples of showing a list of objects or an "
"individual object."
msgstr ""
"Давайте начнем с рассмотрения примеров, показывающих получение списка "
"объектов или индивидуального объекта."

# e86371cc68624f289e4c220c597f9879
#: ../../topics/class-based-views/generic-display.txt:76
msgid "We'll be using these models::"
msgstr "Мы будем использовать следующие модели::"

# 9cf41248834049d08d39a22691c68645
#: ../../topics/class-based-views/generic-display.txt:101
msgid "Now we need to define a view::"
msgstr "Теперь мы должны определить представление::"

# ffe322bf5899431fbd4022736782d17c
#: ../../topics/class-based-views/generic-display.txt:110
msgid "Finally hook that view into your urls::"
msgstr "Ну и наконец, привяжем представление  к url::"

# 3b38b2d145074db49cd693282aea90bb
#: ../../topics/class-based-views/generic-display.txt:120
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by adding a ``template_name`` attribute to the view, but in the absence of "
"an explicit template Django will infer one from the object's name. In this "
"case, the inferred template will be ``\"books/publisher_list.html\"`` -- the "
"\"books\" part comes from the name of the app that defines the model, while "
"the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""
"Это весь код на Python, который нам необходимо написать. Хотя, нам еще "
"необходим шаблон. Мы можем явно указать в представлении, какой шаблон мы "
"хотим использовать. Для этого мы должны добавить  в представление атрибут "
"``template_name``, с указанием имени шаблона. Если если явно не указывать "
"этот атрибут, Django \"вычислит\" его из названия объекта. В данном случае, "
"таким \"вычисленным\" шаблоном будет ``\"books/publisher_list.html\"`` -- "
"часть \"books\"  берется из имени приложения, определяющего модель,  а часть "
"\"publisher\" - это просто название модели в нижнем регистре."

# d8a29357741f485e9214b99aaf9bc0bb
#: ../../topics/class-based-views/generic-display.txt:130
msgid ""
"Thus, when (for example) the :class:`django.template.loaders.app_directories."
"Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, a "
"template location could be: /path/to/project/books/templates/books/"
"publisher_list.html"
msgstr ""
"Таким образом, если (например)  в настройках :setting:`TEMPLATE_LOADERS` "
"\"включен\" класс загрузчика  :class:`django.template.loaders."
"app_directories.Loader`, то путь к шаблону будет следующим : /path/to/"
"project/books/templates/books/publisher_list.html"

# 3c8fcc9c92014c71a904e4f99b48e377
#: ../../topics/class-based-views/generic-display.txt:137
msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following::"
msgstr ""
"При обработке шаблона (рэндеринге), будет использоваться контекст, "
"содержащий переменную ``object_list``. Это переменная хранит список всех "
"объектов издателей(publisher). Очень простой шаблон мог бы выглядить так::"

# 5d27dbe50bd244689bf14ecade0c06c5
#: ../../topics/class-based-views/generic-display.txt:152
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the attributes set on the generic view. The :doc:`generic "
"views reference</ref/class-based-views/index>` documents all the generic "
"views and their options in detail; the rest of this document will consider "
"some of the common ways you might customize and extend generic views."
msgstr ""
"Это действительно все, что нужно сделать. Все крутые \"фичи\" общих "
"представлений-классов можно получить лишь устанавливая значения определенных "
"атрибутов в представлении. В разделе  :doc:`общие представления </ref/class-"
"based-views/index>` вы найдете детальное описание всех общих представлений; "
"в оставшейся части раздела мы рассмотрим общие подходы в расширении и "
"модификации общих представлений."

# 5fe3342be4674033a2fa8bc554fd315b
#: ../../topics/class-based-views/generic-display.txt:160
msgid "Making \"friendly\" template contexts"
msgstr "Создание \"дружелюбного\" контента для шаблона"

# 010f0476edc2444196e485ebfa2d5bcf
#: ../../topics/class-based-views/generic-display.txt:164
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""
"Вы должны были обратить внимание, что в нашем примере список издателей "
"хранится в переменной с именем  ``object_list``. И хотя все прекрасно "
"работает, с нашей стороны это не сильно \"дружелюбно\" к разработчикам "
"шаблонов: они должны \"как-то понять\", что имеют здесь дело со списком "
"издателей."

# 1e160952c74e4b79ad1722f37b894550
#: ../../topics/class-based-views/generic-display.txt:169
msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the lower cased version of the model class' name. This is "
"provided in addition to the default ``object_list`` entry, but contains "
"exactly the same data, i.e. ``publisher_list``."
msgstr ""
"Что ж, если вы имеете дело с моделью, - то считайте что все уже сделано.  "
"Если вы оперируете запросом(queryset) или объектом, Django способно добавить "
"в контекст переменную с именем модели в нижнем регистре.  Эта переменная "
"предоставляется в дополнение к стандартному  значению ``object_list``, и "
"содержит то же самое значение,  н-р, ``publisher_list``."

# 21f929035f204fe89c47fd62b79e6d14
#: ../../topics/class-based-views/generic-display.txt:175
msgid ""
"If this still isn't a good match, you can manually set the name of the "
"context variable. The ``context_object_name`` attribute on a generic view "
"specifies the context variable to use::"
msgstr ""
"Если и этот вариант вас не устраивает, то имя переменной контекста можно "
"задать вручную. Для этой цели служит атрибут ``context_object_name``, "
"который  определяет имя переменной в контексте::"

# d99faeff330f421782371d487f19bcf4
#: ../../topics/class-based-views/generic-display.txt:187
msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""
"Задать переменной контекста понятное имя(отражающее его предназначение) - "
"это всегда замечательно. Ваши коллеги, занимающиеся разработкой шаблонов, "
"будут вам благодарны."

# 284b6aaeeb4a4a09b60c1700085a126f
#: ../../topics/class-based-views/generic-display.txt:192
msgid "Adding extra context"
msgstr "Добавление дополнительного контента"

# a0e07cd3f70945798f6a4d7bc7e5abd5
#: ../../topics/class-based-views/generic-display.txt:194
msgid ""
"Often you simply need to present some extra information beyond that provided "
"by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The :class:`~django.views.generic.detail."
"DetailView` generic view provides the publisher to the context, but how do "
"we get additional information in that template."
msgstr ""
"Часто возникает потребность передать в контекст некоторые дополнительные "
"данные, помимо тех, что автоматически предоставляются представлением. Н-р, "
"представим что нам необходимо отобразить список всех книг на странице с "
"детальной информацией об издателе. Представление-класс :class:`~django.views."
"generic.detail.DetailView` предоставляет нам только переменную контекста, "
"содержащую данные об издателе, но как нам передать дополнительную информацию "
"в шаблон?"

# e4208b71e59840249f048c6b4bbfc053
#: ../../topics/class-based-views/generic-display.txt:201
msgid ""
"However, there is; you can subclass :class:`~django.views.generic.detail."
"DetailView` and provide your own implementation of the ``get_context_data`` "
"method. The default implementation of this that comes with :class:`~django."
"views.generic.detail.DetailView` simply adds in the object being displayed "
"to the template, but you can override it to send more::"
msgstr ""
"Вот решение: вы можете создать подкласс от :class:`~django.views.generic."
"detail.DetailView` и переопределить в нем метод  ``get_context_data``. "
"Реализация метода по умолчанию (в классе  :class:`~django.views.generic."
"detail.DetailView`) просто добавляет объект, который будет доступен в "
"шаблоне. Но переопределив метод, вы можете добавить любые дополнительные "
"данные(расширить контекст)::"

# 68bff8d0f7aa44ac8f357c2d0c577d38
#: ../../topics/class-based-views/generic-display.txt:225
msgid ""
"Generally, get_context_data will merge the context data of all parent "
"classes with those of the current class. To preserve this behavior in your "
"own classes where you want to alter the context, you should be sure to call "
"get_context_data on the super class. When no two classes try to define the "
"same key, this will give the expected results. However if any class attempts "
"to override a key after parent classes have set it (after the call to "
"super), any children of that class will also need to explictly set it after "
"super if they want to be sure to override all parents. If you're having "
"trouble, review the method resolution order of your view."
msgstr ""
"В общем случае, метод get_context_data объединяет(сливает вместе) данные "
"контекста всех родительских классов с данными текущего класса. Чтобы "
"сохранить такое поведение в пользовательских классах, в которых вы "
"собираетесь изменять контекст,  вы должны в начале вызвать  метод "
"get_context_data родительского класса. Если нет двух классов, которые "
"пытаются  определить  одинаковый ключ, - вы получите желаемый результат. "
"Однако, если есть некий класс, который  пытается переопределить ключ, "
"установленный родительскими классами(после вызова super), то любой потомок "
"этого класса также должен явно установить такой ключ(после вызова super), "
"если необходимо гарантировать полное переопределение данных родителей. Если "
"у вас возникли проблемы, просмотрите mro(method resolution order) вашего "
"представления."

# 73dbfca1d44c438d8deaa4036a77ff60
#: ../../topics/class-based-views/generic-display.txt:238
msgid "Viewing subsets of objects"
msgstr "Отображение подмножеств объектов"

# 704433cd3d2a46339700efac7c47871c
#: ../../topics/class-based-views/generic-display.txt:240
msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""
"Давай теперь рассмотрим подробнее аргумент ``model``, который мы уже активно "
"использовали. Аргумент ``model``, определяющий модель базы данных, с которой "
"работает данное представление, доступен во всех общих представлениях-"
"классах, которые предназначены для отображения единичного объекта или списка "
"объектов.  Тем не менее, аргумент ``model`` это не единственный способ, "
"указать представлению с какими данными оно должно работать. Вы также можете "
"указать необходимый список объектов используя аргумент ``queryset``::"

# bd323dc1c60b4aeead899a6cf9a5c425
#: ../../topics/class-based-views/generic-display.txt:256
msgid ""
"Specifying ``model = Publisher`` is really just shorthand for saying "
"``queryset = Publisher.objects.all()``. However, by using ``queryset`` to "
"define a filtered list of objects you can be more specific about the objects "
"that will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`~django.db.models.query.QuerySet` objects, and see "
"the :doc:`class-based views reference </ref/class-based-views/index>` for "
"the complete details)."
msgstr ""
"Запись ``model = Publisher`` это всего лишь сокращенный вариант записи "
"``queryset = Publisher.objects.all()``. Однако, используя ``queryset`` вы "
"можете в полной мере использовать механизмы выборки данных, фильтрации , "
"предоставив вашему представлению более конкретный список объектов, с которым "
"оно должно работать. (смотри :doc:`/topics/db/queries` для дополнительной "
"информацией о классе :class:`~django.db.models.query.QuerySet`, а также :doc:"
"`class-based views reference </ref/class-based-views/index>` за "
"подробностями)."

# 033f810047474d8f92f4d8f4a52c4d20
#: ../../topics/class-based-views/generic-display.txt:264
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first::"
msgstr ""
"Вот простой пример: нам необходимо упорядочить список книг по дате "
"публикации, в порядке \"новизны\" публикации::"

# bbde88abf81a4e0dbaeba1c388530692
#: ../../topics/class-based-views/generic-display.txt:274
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique::"
msgstr ""
"Это очень простой пример, но он прекрасно иллюстрирует саму основную идею. "
"Конечно, на практике вам может потребоваться реализовать нечто более "
"сложное, чем простая сортировка объектов. Если мы хотим получить список книг "
"определенного издателя, мы можем использовать аналогичную технику::"

# 58cae3bd15b540c8be7605f58179b9de
#: ../../topics/class-based-views/generic-display.txt:288
msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""
"Обратите внимание, что вместе с созданием отфильтрованной выборки объектов с "
"использованием  ``queryset``, мы также используем другое(пользовательское) "
"имя шаблона. Если мы этого не сделаем, представление будет использовать тот "
"же шаблон, что и для отображения  \"родного\" списка объектов, что нас не "
"устраивает."

# e4c8ff4eada146c58dd3ca3c61e8edeb
#: ../../topics/class-based-views/generic-display.txt:292
msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""
"Также обратите внимание, что это не очень элегантный способ отобразить "
"список книг для  конкретного издателя. Если мы захотим добавить страницу о "
"другом издателе, нам придется добавить дополнительные строки кода  в "
"URLconf, а добавление более чем несколько издателей обернется непомерно "
"высокими накладными расходами. Мы разберемся с этой проблемой в следующем "
"разделе."

# a9ca943b285d47b381ec725e0ea08041
#: ../../topics/class-based-views/generic-display.txt:299
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views/index>` for more details."
msgstr ""
"Если при запросе к ``/books/acme/`` вы получаете ошибку 404, убедитесь, что "
"для модели Publisher существует издатель с именем 'ACME Publishing'.  Общие "
"представления-классы предоставляют на этот случай параметр ``allow_empty``.  "
"Смотрите подробнее в  :doc:`class-based-views reference</ref/class-based-"
"views/index>` ."

# 95e7f85314774ea6b759f3ff6aee2e67
#: ../../topics/class-based-views/generic-display.txt:307
msgid "Dynamic filtering"
msgstr "Динамическое фильтрование"

# b33e103af9fb4d839205250d1213f3ca
#: ../../topics/class-based-views/generic-display.txt:309
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""
"Другой часто встречающейся задачей является необходимость отфильтровать "
"список объектов по переданному в URL ключу. Ранее мы жестко прописывали имя "
"издателя в URLconf, но что если нам необходимо написать представление, "
"отображающее все книги некоторого произвольного издателя?"

# 44f768643b414d409c0ae498ede0a512
#: ../../topics/class-based-views/generic-display.txt:314
msgid ""
"Handily, the ``ListView`` has a :meth:`~django.views.generic.list."
"MultipleObjectMixin.get_queryset` method we can override. Previously, it has "
"just been returning the value of the ``queryset`` attribute, but now we can "
"add more logic."
msgstr ""
"Для этого удобно воспользоваться методом :meth:`~django.views.generic.list."
"MultipleObjectMixin.get_queryset` класса  ``ListView``, который мы можем "
"переопределить для наших целей. Без переопределения метод возвращает "
"значение  атрибута ``queryset``, но мы собираемся расширить его поведение."

# 9bcd4201cd9746ff91edfc3541522342
#: ../../topics/class-based-views/generic-display.txt:319
msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request (``self."
"request``) this includes the positional (``self.args``) and name-based "
"(``self.kwargs``) arguments captured according to the URLconf."
msgstr ""
"Ключевым моментом в выполнении этой работы, является понимание того, что при "
"вызове представления-класса, в его ссылке на экземпляр  ``self`` сохраняется "
"много \"полезных вещей\". Н-р, там сохраняется экземпляр текущего запроса "
"(request  (в ``self.request``)), а так же список позиционных  (``self."
"args``) и именованных (``self.kwargs``) аргументов, которые \"отлавливаются"
"\" из строки запроса в URLconf."

# 297b2829e0164b7f803bbbd8d4171a69
#: ../../topics/class-based-views/generic-display.txt:324
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""
"Вот, например, у нас есть строка в URLconf,  \"захватывающая\" одиночную "
"группу::"

# 8d75f392190a4e3bb3465d9955171bde
#: ../../topics/class-based-views/generic-display.txt:333
msgid "Next, we'll write the ``PublisherBookList`` view itself::"
msgstr "Теперь мы напишем само представление ``PublisherBookList``::"

# 5a801bd4f43c4fbabba1713fc2a2a353
#: ../../topics/class-based-views/generic-display.txt:348
msgid ""
"As you can see, it's quite easy to add more logic to the queryset selection; "
"if we wanted, we could use ``self.request.user`` to filter using the current "
"user, or other more complex logic."
msgstr ""
"Как вы можете видеть, добавление дополнительной логики в генерацию queryset, "
"- это совсем несложно. Если бы нам потребовалось, мы могли бы использовать "
"значение ``self.request.user`` чтобы отфильтровать данные с учетом текущего "
"пользователя, или добавить любую другую более сложную логику."

# bae77d6c2a4d4c439f61e67ae5a17348
#: ../../topics/class-based-views/generic-display.txt:352
msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""
"Одновременно мы можем также добавить издателя в контекст, и затем "
"использовать это значение в шаблоне ::"

# 4f59660d3ecf470ab34eaa6efcf115b1
#: ../../topics/class-based-views/generic-display.txt:367
msgid "Performing extra work"
msgstr "Решение дополнительных задач"

# b36f371d3cd6420c8f029bee7432e5da
#: ../../topics/class-based-views/generic-display.txt:369
msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""
"Последний пример, который мы рассмотрим, покажет как выполнить "
"дополнительную работу до или после вызова общего представления-класса."

# 2c535aedf13b47c6b840b7e86df16a5f
#: ../../topics/class-based-views/generic-display.txt:372
msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` object that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""
"Представьте, что у нас есть поле ``last_accessed`` в объекте ``Author``, "
"которое отслеживает информацию о том, когда в последний раз, кто-либо "
"интересовался данным автором::"

# 49f0834b12354288ad72cfc7178bdeba
#: ../../topics/class-based-views/generic-display.txt:384
msgid ""
"The generic ``DetailView`` class, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""
"Разумеется, класс ``DetailView`` ничего не знает об этом поле, но мы можем "
"без проблем написать пользовательское представление-класс, которое будет "
"отслеживать обновление этого поля."

# e16dfc5ff96649a1969fb7a138572bd2
#: ../../topics/class-based-views/generic-display.txt:388
msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view::"
msgstr ""
"Первое, мы должны добавить запись в URLconf для отображения информации об "
"авторе, и связать ее с нашим представлением::"

# 8dad1dbacbb5440bbccd7bd7c3195e53
#: ../../topics/class-based-views/generic-display.txt:398
msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we simply override it and wrap the call::"
msgstr ""
"Затем мы создадим наше новое представление: ``get_object``-- это метод, "
"который получает и возвращает \"рабочий\" объект, таким образом, нам нужно "
"лишь переопределить его(не забыв вызвать метод родительского класса)::"

# 5a1f55626035446aa9cded983c1515b0
#: ../../topics/class-based-views/generic-display.txt:421
msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name "
"that ``DetailView`` uses to find the value of the primary key used to filter "
"the queryset."
msgstr ""
"В URLconf указана именованная группа  ``pk``. Это имя является именем по "
"умолчанию, которое использует ``DetailView`` для определения значения "
"первичного ключа и последующей фильтрации объектов в запросе (в queryset)."

# 2e5818c41e614acb8225b075e766719f
#: ../../topics/class-based-views/generic-display.txt:425
msgid ""
"If you want to call the group something else, you can set ``pk_url_kwarg`` "
"on the view. More details can be found in the reference for :class:`~django."
"views.generic.detail.DetailView`"
msgstr ""
"Если вы хотите задать для группы другое имя, вы можете указать его в "
"атрибуте ``pk_url_kwarg`` представления. За подробностями обращайтесь к "
"дополнительной информации для  :class:`~django.views.generic.detail."
"DetailView`."
