# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
# Viktor Tyshchenko <tyvik8@gmail.com>, 2014, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2017-11-16 15:40+0200\n"
"Last-Translator: Viktor Tyshchenko <tyvik8@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 871d1fd9d40e468e9c15785fab1401dd
#: ../../topics/class-based-views/intro.txt:3
msgid "Introduction to class-based views"
msgstr "Введение в представления-классы (Class-based views, CBV)"

# 57717ff44a46445e9277d83db8fc75c3
#: ../../topics/class-based-views/intro.txt:5
msgid ""
"Class-based views provide an alternative way to implement views as Python "
"objects instead of functions. They do not replace function-based views, but "
"have certain differences and advantages when compared to function-based "
"views:"
msgstr ""
"Представления, основанные на классах, представляют собой альтернативный путь "
"реализации представлений. Вместо функций здесь используются объекты Python. "
"Этот способ не лучше и не хуже, он другой. Вот основные отличия:"

# 2b112a8ff1ce4c678562aaea75be41d6
#: ../../topics/class-based-views/intro.txt:9
msgid ""
"Organization of code related to specific HTTP methods (``GET``, ``POST``, "
"etc.) can be addressed by separate methods instead of conditional branching."
msgstr ""
"Организация обработки специфичных для HTTP методов (``GET``, ``POST``, и т."
"д.) разнесена по соответствующим методам, вместо того, чтобы писать кучу "
"условий."

# 7e7413d06389483c94fa2c48e9e05876
#: ../../topics/class-based-views/intro.txt:12
msgid ""
"Object oriented techniques such as mixins (multiple inheritance) can be used "
"to factor code into reusable components."
msgstr ""
"Объектно-ориентированные технологии, такие как миксины (примеси, "
"множественное наследование) позволяют выделять код в компоненты, которые "
"могут повторно использоваться."

# 8153fcce037040df940c16cbf26ba2f9
#: ../../topics/class-based-views/intro.txt:16
msgid ""
"The relationship and history of generic views, class-based views, and class-"
"based generic views"
msgstr ""
"Связь и история обобщённых представлений, представлений, основанных на "
"классах, а также обобщённых представлений, основанных на классах."

# 62c1f03fbdee4561b5e9d8e85d7c1129
#: ../../topics/class-based-views/intro.txt:18
msgid ""
"In the beginning there was only the view function contract, Django passed "
"your function an :class:`~django.http.HttpRequest` and expected back an :"
"class:`~django.http.HttpResponse`. This was the extent of what Django "
"provided."
msgstr ""
"В самом начале были только функции: Django передавал ей :class:`~django.http."
"HttpRequest` и ожидал получения :class:`~django.http.HttpResponse`. Это всё, "
"что было предусмотрено."

# d72306577e5a4bbfa7cb2109d9ce7fbf
#: ../../topics/class-based-views/intro.txt:22
msgid ""
"Early on it was recognized that there were common idioms and patterns found "
"in view development. Function-based generic views were introduced to "
"abstract these patterns and ease view development for the common cases."
msgstr ""
"Ранее были найдены общие шаблоны в разработке представлений. Обобщённые "
"представления, основанные на функциях, были выделены в абстрактные шаблоны, "
"подходящие для большинства случаев."

# c588fb8fc03943d48b16c340260bc735
#: ../../topics/class-based-views/intro.txt:26
#, fuzzy
msgid ""
"The problem with function-based generic views is that while they covered the "
"simple cases well, there was no way to extend or customize them beyond some "
"configuration options, limiting their usefulness in many real-world "
"applications."
msgstr ""
"По мере покрытия всё больших возможных случаев выявилась одна проблема - "
"шаблоны становились громоздкими и не расширяемыми. Это ограничивало их "
"использование во многих реальных приложениях."

# c12bb6b8c15d421187226475ea9642a6
#: ../../topics/class-based-views/intro.txt:31
msgid ""
"Class-based generic views were created with the same objective as function-"
"based generic views, to make view development easier. However, the way the "
"solution is implemented, through the use of mixins, provides a toolkit that "
"results in class-based generic views being more extensible and flexible than "
"their function-based counterparts."
msgstr ""
"Представления, основанные на классах, были созданы для решения той же "
"задачи, что и обобщённые функции-представления: упростить разработку. "
"Однако, реализовано это было с помощью примесей: наборов классов, которые "
"делают обобщённые представления-классы более расширяемыми и гибкими в "
"настройке, нежели соответствующие функции."

# f54a9d1186274849a03caab659af4f93
#: ../../topics/class-based-views/intro.txt:37
#, fuzzy
msgid ""
"If you have tried function based generic views in the past and found them "
"lacking, you should not think of class-based generic views as a class-based "
"equivalent, but rather as a fresh approach to solving the original problems "
"that generic views were meant to solve."
msgstr ""
"Если вы ранее успешно использовали функции и их возможностей вам хватало, то "
"не стоит относиться к обобщённым представлениям-классам как к ещё одному "
"эквивалентному способу решения задач. Попробуйте по-новому взглянуть на те "
"случаи, когда этот подход будет более уместен."

# 73edb240016c4cefa92758c2704f741b
#: ../../topics/class-based-views/intro.txt:42
#, fuzzy
msgid ""
"The toolkit of base classes and mixins that Django uses to build class-based "
"generic views are built for maximum flexibility, and as such have many hooks "
"in the form of default method implementations and attributes that you are "
"unlikely to be concerned with in the simplest use cases. For example, "
"instead of limiting you to a class-based attribute for ``form_class``, the "
"implementation uses a ``get_form`` method, which calls a ``get_form_class`` "
"method, which in its default implementation returns the ``form_class`` "
"attribute of the class. This gives you several options for specifying what "
"form to use, from an attribute, to a fully dynamic, callable hook. These "
"options seem to add hollow complexity for simple situations, but without "
"them, more advanced designs would be limited."
msgstr ""
"Инструментарий базовых классов и примесей Django позволяет создавать "
"обобщённые представления-классы максимально гибкими, имеющими множество "
"хуков, таких как значение атрибутов по умолчанию или базовая реализация "
"методов, которую зачастую не надо переопределять в каждом конкретном случае. "
"Например, вместо того, чтобы использовать атрибут базового класса "
"``form_class``, реализация вызывает метод ``get_form``, который вызывает "
"``get_form_class``, который в свою очередь по умолчанию просто возвращает "
"атрибут ``form_class`` базового класса. Это даёт вам возможность указать "
"какую форму использовать как в атрибуте так и динамически в переопределённом "
"методе. На первый взгляд такое поведение порождает излишнюю сложность для "
"простых случаев, но это необходимо для покрытия максимально возможных "
"случаев использования."

# abfa355edc09449bb8a208aaf3231253
#: ../../topics/class-based-views/intro.txt:55
msgid "Using class-based views"
msgstr "Использование представлений, основанных на классах"

# eb418f150f454de5800614b72db885ba
#: ../../topics/class-based-views/intro.txt:57
msgid ""
"At its core, a class-based view allows you to respond to different HTTP "
"request methods with different class instance methods, instead of with "
"conditionally branching code inside a single view function."
msgstr ""
"По своей сути представления, основанные на классах, позволяют реагировать на "
"различные методы HTTP запроса различными методами объекта, а не городить "
"ветвление внутри одной функции."

# 4b5cb18fb2b44581b81859a76d5c4567
#: ../../topics/class-based-views/intro.txt:61
msgid ""
"So where the code to handle HTTP ``GET`` in a view function would look "
"something like::"
msgstr "Для примера возьмём обработку ``GET`` запроса в функции::"

# 869dc47defe3458fa585c9285ae49579
#: ../../topics/class-based-views/intro.txt:71
msgid "In a class-based view, this would become::"
msgstr "Теперь та же реализация через классы::"

# bb8a565e3be74d0f8d3cfa464baec8a5
#: ../../topics/class-based-views/intro.txt:81
#, fuzzy
msgid ""
"Because Django's URL resolver expects to send the request and associated "
"arguments to a callable function, not a class, class-based views have an :"
"meth:`~django.views.generic.base.View.as_view` class method which returns a "
"function that can be called when a request arrives for a URL matching the "
"associated pattern. The function creates an instance of the class, calls :"
"meth:`~django.views.generic.base.View.setup` to initialize its attributes, "
"and then calls its :meth:`~django.views.generic.base.View.dispatch` method. "
"``dispatch`` looks at the request to determine whether it is a ``GET``, "
"``POST``, etc, and relays the request to a matching method if one is "
"defined, or raises :class:`~django.http.HttpResponseNotAllowed` if not::"
msgstr ""
"Поскольку роутинг Django отправляет запрос и ассоциированные с ним аргументы "
"в вызываемую функцию, а не класс, все классы имеют статичный метод :meth:"
"`~django.views.generic.base.View.as_view`, который указан как точка входа "
"при вызове этого класса. В нём создаётся экземпляр вашего класса и "
"вызывается метод :meth:`~django.views.generic.base.View.dispatch`. "
"``dispatch`` определяет тип запроса (``GET``, ``POST`` и др.) и вызывается "
"соответствующий метод. Если такового не нашлось, то происходит исключение :"
"class:`~django.http.HttpResponseNotAllowed`::"

# 2243da3dc49a4e4aa8595c5496fe6cba
#: ../../topics/class-based-views/intro.txt:101
msgid ""
"It is worth noting that what your method returns is identical to what you "
"return from a function-based view, namely some form of :class:`~django.http."
"HttpResponse`. This means that :doc:`http shortcuts </topics/http/"
"shortcuts>` or :class:`~django.template.response.TemplateResponse` objects "
"are valid to use inside a class-based view."
msgstr ""
"Стоит отметить, что этот метод возвращает результат, который идентичен "
"результату функции, а именно :class:`~django.http.HttpResponse`. Это "
"означает, что :doc:`http shortcuts </topics/http/shortcuts>` или объекты :"
"class:`~django.template.response.TemplateResponse` можно использовать внутри "
"представлений-классов."

# 1de3bdd6510146b88b1df4e4570c370c
#: ../../topics/class-based-views/intro.txt:108
msgid ""
"While a minimal class-based view does not require any class attributes to "
"perform its job, class attributes are useful in many class-based designs, "
"and there are two ways to configure or set class attributes."
msgstr ""
"В то время как минимальное представление, основанное на классах, не "
"нуждается в каких-либо атрибутах этого класса, они могут быть полезны во "
"многих внутренних методах. Есть два способа их установки."

# 1e3fd6284801466998e5794556511722
#: ../../topics/class-based-views/intro.txt:112
msgid ""
"The first is the standard Python way of subclassing and overriding "
"attributes and methods in the subclass. So that if your parent class had an "
"attribute ``greeting`` like this::"
msgstr ""
"Первым является стандартный для Python механизм наследования и "
"переопределения атрибутов или методов. Так, если родительский класс имеет "
"атрибут ``greeting``, то выглядеть это будет как-то так::"

# 64cf396375204312922146d3941b4a8c
#: ../../topics/class-based-views/intro.txt:125
msgid "You can override that in a subclass::"
msgstr "Вы можете переопределить это в наследнике::"

# 453e0f1540614a7ab2a7b0fd71c9a033
#: ../../topics/class-based-views/intro.txt:130
msgid ""
"Another option is to configure class attributes as keyword arguments to the :"
"meth:`~django.views.generic.base.View.as_view` call in the URLconf::"
msgstr ""
"Другим способом является указание параметра с соответствующим именем при "
"вызове :meth:`~django.views.generic.base.View.as_view` в URLconf::"

# 6f762e5ad20542528e798c1f90ad2aad
#: ../../topics/class-based-views/intro.txt:139
msgid ""
"While your class is instantiated for each request dispatched to it, class "
"attributes set through the :meth:`~django.views.generic.base.View.as_view` "
"entry point are configured only once at the time your URLs are imported."
msgstr ""
"Хотя ваш класс инициализируется для обработки каждого запроса, атрибуты в "
"методе :meth:`~django.views.generic.base.View.as_view` задаются только раз "
"при импорте URL`ов."

# df7f4b5828a044419489898be4d4ba6d
#: ../../topics/class-based-views/intro.txt:145
msgid "Using mixins"
msgstr "Использование примесей (mixins)"

# 7e91b85a31a14269a976ce9c4b06c008
#: ../../topics/class-based-views/intro.txt:147
msgid ""
"Mixins are a form of multiple inheritance where behaviors and attributes of "
"multiple parent classes can be combined."
msgstr ""
"Примеси представляют собой форму множественного наследования, в котором "
"поведение и атрибуты всех родителей соединены в один класс."

# 35735e9c6a2e4f0b9fbd90181e86a153
#: ../../topics/class-based-views/intro.txt:150
msgid ""
"For example, in the generic class-based views there is a mixin called :class:"
"`~django.views.generic.base.TemplateResponseMixin` whose primary purpose is "
"to define the method :meth:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response`. When combined with the behavior of the :class:`~django."
"views.generic.base.View` base class, the result is a :class:`~django.views."
"generic.base.TemplateView` class that will dispatch requests to the "
"appropriate matching methods (a behavior defined in the ``View`` base "
"class), and that has a :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response` method that uses a :attr:`~django."
"views.generic.base.TemplateResponseMixin.template_name` attribute to return "
"a :class:`~django.template.response.TemplateResponse` object (a behavior "
"defined in the ``TemplateResponseMixin``)."
msgstr ""
"Например, в Django есть примесь под названием :class:`~django.views.generic."
"base.TemplateResponseMixin`, основной задачей которого является определение "
"метода :meth:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response`. Когда она будет объединена с поведением базового "
"класса :class:`~django.views.generic.base.View`, получится класс :class:"
"`~django.views.generic.base.TemplateView`, который обрабатывает запрос "
"соответствующим методом (реализация находится в классе ``View``), а затем "
"передаётся в :meth:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response`, который, используя атрибут :attr:`~django.views.generic."
"base.TemplateResponseMixin.template_name`, возвращает объект :class:`~django."
"template.response.TemplateResponse` (реализовано в "
"``TemplateResponseMixin``)."

# 49e92710295541be9d7e09f897eafee1
#: ../../topics/class-based-views/intro.txt:164
msgid ""
"Mixins are an excellent way of reusing code across multiple classes, but "
"they come with some cost. The more your code is scattered among mixins, the "
"harder it will be to read a child class and know what exactly it is doing, "
"and the harder it will be to know which methods from which mixins to "
"override if you are subclassing something that has a deep inheritance tree."
msgstr ""
"Примеси - великолепный путь для повторного использования общего кода, однако "
"у них есть некоторые минусы. Чем больше реализация методов будет размазана "
"по примесям, тем сложнее будет читать дочерний класс и понимать что же он "
"всё-таки делает, какие методы откуда берутся и какие методы уже перекрыты в "
"родительских классах."

# d620a021a77546178ffeaaabb4d5191b
#: ../../topics/class-based-views/intro.txt:170
msgid ""
"Note also that you can only inherit from one generic view - that is, only "
"one parent class may inherit from :class:`~django.views.generic.base.View` "
"and the rest (if any) should be mixins. Trying to inherit from more than one "
"class that inherits from ``View`` - for example, trying to use a form at the "
"top of a list and combining :class:`~django.views.generic.edit."
"ProcessFormView` and :class:`~django.views.generic.list.ListView` - won't "
"work as expected."
msgstr ""
"Стоит отметить, что можно унаследоваться только от одного обобщённого "
"класса, т.к. каждый из них наследуется от :class:`~django.views.generic.base."
"View`; остальные должны быть примеси. Попытка скрестить более чем один "
"обобщённый класс, например, :class:`~django.views.generic.edit."
"ProcessFormView` и :class:`~django.views.generic.list.ListView`, не будет "
"работать так, как вы ожидаете."

# a1ccdc9ad21d4f1382e6d28e1edf295f
#: ../../topics/class-based-views/intro.txt:179
msgid "Handling forms with class-based views"
msgstr "Обработка форм с помощью представлений-классов"

# 8f24262e6ebb4112bc70c4d677dc757d
#: ../../topics/class-based-views/intro.txt:181
msgid ""
"A basic function-based view that handles forms may look something like this::"
msgstr "Обработка формы через представление-функцию выглядит как-то так::"

# af7be15bf0ac47a89adc98250228f25c
#: ../../topics/class-based-views/intro.txt:199
msgid "A similar class-based view might look like::"
msgstr "Код, выполняющий тоже самое, но реализованный через классы::"

# 873d65eff3054b93b0d7bc7740780060
#: ../../topics/class-based-views/intro.txt:224
#, fuzzy
msgid ""
"This is a minimal case, but you can see that you would then have the option "
"of customizing this view by overriding any of the class attributes, e.g. "
"``form_class``, via URLconf configuration, or subclassing and overriding one "
"or more of the methods (or both!)."
msgstr ""
"Это очень простой пример, однако он демонстрирует возможности настройки "
"атрибутов класса, таких как ``form_class``, через конфигурацию URLconf или "
"же переопределение методов в дочернем классе."

# 0371a0b4a58545daab7f0ce237b055d8
#: ../../topics/class-based-views/intro.txt:230
msgid "Decorating class-based views"
msgstr "Декорирование представлений-классов"

# ad4a790b6f7043e9a06e274797dc5db2
#: ../../topics/class-based-views/intro.txt:232
msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"also use decorators. Since class-based views aren't functions, decorating "
"them works differently depending on if you're using ``as_view()`` or "
"creating a subclass."
msgstr ""
"Расширение представлений-классов не ограничивается использованием миксинов, "
"также можно подключить декораторы. Так как представления-классы не являются "
"функциями, то работа с ними несколько отличается в зависимости от того "
"вызываете ли вы ``as_view()`` или создаёте дочерний класс."

# 7fc0bc6f04314cc3a77e3d1fe9c040c2
#: ../../topics/class-based-views/intro.txt:237
msgid "Decorating in URLconf"
msgstr "Декорирование в URLconf"

# d920536443a940fd9eab1ca43e4f0db9
#: ../../topics/class-based-views/intro.txt:239
#, fuzzy
msgid ""
"You can adjust class-based views by decorating the result of the :meth:"
"`~django.views.generic.base.View.as_view` method. The easiest place to do "
"this is in the URLconf where you deploy your view::"
msgstr ""
"Простейшим вариантом является передача результата вызова метода :meth:"
"`~django.views.generic.base.View.as_view` в нужный декоратор. Лучшее место "
"для этого - URLconf, в котором используется представление::"

# 52d802e01717485292c0d528a2721711
#: ../../topics/class-based-views/intro.txt:253
msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""
"Этот подход работает только когда нужно обернуть только один вызов, в "
"противном случае следует действовать по-другому."

# eb859a6354654e96b2e6e23d82586eac
#: ../../topics/class-based-views/intro.txt:260
msgid "Decorating the class"
msgstr "Декорирование классов"

# 460e6f85de094322bd76f828132979a3
#: ../../topics/class-based-views/intro.txt:262
msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""
"Для декорирования каждого метода представления-класса, вам нужно было бы "
"обернуть каждый метод. В Django это сделано проще: надо всего лишь "
"декорировать метод :meth:`~django.views.generic.base.View.dispatch`."

# 6d6921e7d22343bbadfb1a33633f3b94
#: ../../topics/class-based-views/intro.txt:266
msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""
"Метод класса не то же самое, что и обычная функция, к нему просто так "
"применить декоратор не получится -- нужно сначала преобразовать его в метод-"
"декоратор. Для этого существует декоратор ``method_decorator``, которым "
"можно воспользоваться как-то так:: "

#: ../../topics/class-based-views/intro.txt:283
msgid ""
"Or, more succinctly, you can decorate the class instead and pass the name of "
"the method to be decorated as the keyword argument ``name``::"
msgstr ""
"Также вы можете декорировать класс, указав название методы, которые "
"необходимо декорировать, в аргументе ``name``::"

#: ../../topics/class-based-views/intro.txt:290
msgid ""
"If you have a set of common decorators used in several places, you can "
"define a list or tuple of decorators and use this instead of invoking "
"``method_decorator()`` multiple times. These two classes are equivalent::"
msgstr ""
"Если у вас есть список декораторов, которые используются в нескольких "
"местах, вы можете указать список или кортеж декораторов и использовать его в "
"``method_decorator()`` несколько раз. Следующие два класса одинаковы::"

#: ../../topics/class-based-views/intro.txt:305
msgid ""
"The decorators will process a request in the order they are passed to the "
"decorator. In the example, ``never_cache()`` will process the request before "
"``login_required()``."
msgstr ""
"Декораторы обрабатывают запрос в указанном порядке. В нашем примере "
"``never_cache()`` выполнится перед ``login_required()``."

#: ../../topics/class-based-views/intro.txt:309
msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection. These examples use ``login_required``, however, the same "
"behavior can be obtained by using :class:`~django.contrib.auth.mixins."
"LoginRequiredMixin`."
msgstr ""

# 9b231bf2835547d987c4df7bf607a0b9
#: ../../topics/class-based-views/intro.txt:316
msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""
"``method_decorator`` передаёт ``*args`` и ``**kwargs`` как параметры в "
"декорированный метод. Если ваш метод не сможет их принять, то будет "
"сгенерировано исключение ``TypeError``."

# 34adc408a2e44b95afb9d5c35665a6bd
#~ msgid ""
#~ "In this example, every instance of ``ProtectedView`` will have login "
#~ "protection."
#~ msgstr ""
#~ "В этом примере каждый вызов метода из ``ProtectedView`` будет требовать "
#~ "авторизацию."

#~ msgid ""
#~ "The ability to use ``method_decorator()`` on a class and the ability for "
#~ "it to accept a list or tuple of decorators were added."
#~ msgstr ""
#~ "Была добавлена возможность использовать ``method_decorator()`` для класса "
#~ "и возможность передать список или кортеж декораторов."

# c9823e0d57634becbd7a486ed7ddc363
#~ msgid "Mixins that wrap ``as_view()``"
#~ msgstr "Mixin-ы декорирующие метод ``as_view()``"

# 453e0f1540614a7ab2a7b0fd71c9a033
#~ msgid ""
#~ "One way to apply common behavior to many classes is to write a mixin that "
#~ "wraps the :meth:`~django.views.generic.base.View.as_view()` method."
#~ msgstr ""
#~ "Один из способов добавить логику ко многим классам -- создать mixin, "
#~ "декорирующий метод :meth:`~django.views.generic.base.View.as_view()`."

# dc34056c480a43d9ac1fa202a7385e7d
#~ msgid ""
#~ "For example, if you have many generic views that should be decorated "
#~ "with :func:`~django.contrib.auth.decorators.login_required` you could "
#~ "implement a mixin like this::"
#~ msgstr ""
#~ "Например, если у вас большое количество представлений, которые должны "
#~ "быть декорированы :func:`~django.contrib.auth.decorators.login_required`, "
#~ "вы можете использовать следующий mixin::"
