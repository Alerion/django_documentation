# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2013-06-15 23:09+0300\n"
"Last-Translator: aum <compfaculty@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Poedit 1.5.4\n"

# 47a073888a034522ab4690cd85079701
#: ../../topics/class-based-views/generic-editing.txt:2
msgid "Form handling with class-based views"
msgstr "Обработка форм в представлениях-классах"

# 11bed16e5d8741db965ee1b899f352bf
#: ../../topics/class-based-views/generic-editing.txt:4
msgid "Form processing generally has 3 paths:"
msgstr "Обработка форм осуществляется обычно в три этапа:"

# 0339ff803c6b4044a04b0f982dd3fe62
#: ../../topics/class-based-views/generic-editing.txt:6
msgid "Initial GET (blank or prepopulated form)"
msgstr ""
"Инициализирующий GET запрос(пустая или частично проинициализированная форма)"

# f5fad13a45fd4f9eab4df89933d39b07
#: ../../topics/class-based-views/generic-editing.txt:7
msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""
"Запрос POST с неверными данными(обычно отображается форма с указанием ошибок)"

# 804abfddc5f64cf596a81e1208d32064
#: ../../topics/class-based-views/generic-editing.txt:8
msgid "POST with valid data (process the data and typically redirect)"
msgstr ""
"Запрос POST с корректными данными(обработка данных и , как правило, "
"перенаправление)"

# 6fa566b0b398436f8a3200058894f2d5
#: ../../topics/class-based-views/generic-editing.txt:10
msgid ""
"Implementing this yourself often results in a lot of repeated boilerplate "
"code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help "
"avoid this, Django provides a collection of generic class-based views for "
"form processing."
msgstr ""
"При самостоятельной реализации подобной обработки форм, вы сталкиваетесь с "
"большим количеством повторяющегося \"шаблонного\" кода.  (См.  :ref:"
"`использование форм в представлениях <using-a-form-in-a-view>`). Чтобы "
"избавиться от этого, Django предоставляет нам коллекцию общих CBV для работы "
"с формами."

# 41e07977777944f0a08ff58113fe6d61
#: ../../topics/class-based-views/generic-editing.txt:16
msgid "Basic Forms"
msgstr "Базовые классы форм"

# 81acfc564871464998e1e540caa8b663
#: ../../topics/class-based-views/generic-editing.txt:18
msgid "Given a simple contact form::"
msgstr "Рассмотрим простую форму взаимодействия::"

# e941c06edd594baeaabc92089d1eb987
#: ../../topics/class-based-views/generic-editing.txt:31
msgid "The view can be constructed using a ``FormView``::"
msgstr "Представление можно создать используя класс ``FormView``::"

# 4f168e88773f4e358e5dda4ac5fdfa70
#: ../../topics/class-based-views/generic-editing.txt:48
msgid "Notes:"
msgstr "Примечания:"

# ac772bae3c9b4b5288fba315ae146dae
#: ../../topics/class-based-views/generic-editing.txt:50
msgid ""
"FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` "
"so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"can be used here."
msgstr ""
"FormView наследует :class:`~django.views.generic.base."
"TemplateResponseMixin`, таким образом вы можете использовать атрибут  :attr:"
"`~django.views.generic.base.TemplateResponseMixin.template_name`."

# b2a13543392749b5ab783d6229bdbab2
#: ../../topics/class-based-views/generic-editing.txt:54
msgid ""
"The default implementation for :meth:`~django.views.generic.edit.FormMixin."
"form_valid` simply redirects to the :attr:`~django.views.generic.edit."
"FormMixin.success_url`."
msgstr ""
"Реализация по умолчанию для метода :meth:`~django.views.generic.edit."
"FormMixin.form_valid` просто осуществляет редирект на URL, хранящийся в "
"атрибуте :attr:`~django.views.generic.edit.FormMixin.success_url`."

# 7d578ee5737347ffa334be31246c183b
#: ../../topics/class-based-views/generic-editing.txt:59
msgid "Model Forms"
msgstr "Формы моделей(Model Forms)"

# 8d85fab479584efb8d2ef359f47b3156
#: ../../topics/class-based-views/generic-editing.txt:61
msgid ""
"Generic views really shine when working with models.  These generic views "
"will automatically create a :class:`~django.forms.ModelForm`, so long as "
"they can work out which model class to use:"
msgstr ""
"Общие CBV раскрываются во всей красе при работе с моделями. Они "
"автоматически создают  класс :class:`~django.forms.ModelForm` при работе с "
"моделями:"

# 39d0a56a9fbe4db5a46c63083dae0d9b
#: ../../topics/class-based-views/generic-editing.txt:65
msgid ""
"If the :attr:`~django.views.generic.edit.ModelFormMixin.model` attribute is "
"given, that model class will be used."
msgstr ""
"Если указано значение атрибута :attr:`~django.views.generic.edit."
"ModelFormMixin.model`, то будет использоваться этот класс модели."

# 35ca2be9ba26444689d56cf7780e52c6
#: ../../topics/class-based-views/generic-editing.txt:67
msgid ""
"If :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` "
"returns an object, the class of that object will be used."
msgstr ""
"Если метод :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()"
"` возвращает объект, то будет использоваться класс этого объекта."

# 288bf6c3b5e1411bad9c1c3b5e0f4f3b
#: ../../topics/class-based-views/generic-editing.txt:69
msgid ""
"If a :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` is "
"given, the model for that queryset will be used."
msgstr ""
"Если указан атрибут :attr:`~django.views.generic.detail.SingleObjectMixin."
"queryset`, то будет использована модель этого запроса(queryset)."

# b3d4cbf7c822437b932c2e05c87515a6
#: ../../topics/class-based-views/generic-editing.txt:72
msgid ""
"Model form views provide a :meth:`~django.views.generic.edit.ModelFormMixin."
"form_valid()` implementation that saves the model automatically.  You can "
"override this if you have any special requirements; see below for examples."
msgstr ""
"Представления форм, связанные с моделями, предоставляют реализацию метода :"
"meth:`~django.views.generic.edit.ModelFormMixin.form_valid()`, которая "
"автоматически сохраняет модель. Вы можете переопределить этот метод согласно "
"вашим требованиям; смотрите примеры ниже."

# fad1b075afdb495fb0222cb5dad47758
#: ../../topics/class-based-views/generic-editing.txt:77
msgid ""
"You don't even need to provide a ``success_url`` for :class:`~django.views."
"generic.edit.CreateView` or :class:`~django.views.generic.edit.UpdateView` - "
"they will use :meth:`~django.db.models.Model.get_absolute_url()` on the "
"model object if available."
msgstr ""
"Вы можете не устанавливать значение ``success_url`` для классов :class:"
"`~django.views.generic.edit.CreateView` или :class:`~django.views.generic."
"edit.UpdateView` - они воспользуются методом  :meth:`~django.db.models.Model."
"get_absolute_url()` объекта модели (если такой объект доступен)."

# ae41e2d4a4314f65ab9fe6cc6ef1ccc8
#: ../../topics/class-based-views/generic-editing.txt:82
msgid ""
"If you want to use a custom :class:`~django.forms.ModelForm` (for instance "
"to add extra validation) simply set :attr:`~django.views.generic.edit."
"FormMixin.form_class` on your view."
msgstr ""
"Если вам необходимо специальное поведение для :class:`~django.forms."
"ModelForm` (например для дополнительной валидации данных) просто установите :"
"attr:`~django.views.generic.edit.FormMixin.form_class` в нужное значение."

# 3fa172128af848359c8247764527e4a4
#: ../../topics/class-based-views/generic-editing.txt:87
msgid ""
"When specifying a custom form class, you must still specify the model, even "
"though the :attr:`~django.views.generic.edit.FormMixin.form_class` may be a :"
"class:`~django.forms.ModelForm`."
msgstr ""
"При создании пользовательского класса формы, вы по прежнему должны указать "
"модель. Даже в том случае если в :attr:`~django.views.generic.edit.FormMixin."
"form_class` используется :class:`~django.forms.ModelForm`."

# 9e0c99e1f5354f18bb7a7cc450520753
#: ../../topics/class-based-views/generic-editing.txt:91
msgid ""
"First we need to add :meth:`~django.db.models.Model.get_absolute_url()` to "
"our ``Author`` class:"
msgstr ""
"Во-первых, мы должны добавить метод :meth:`~django.db.models.Model."
"get_absolute_url()` в наш класс ``Author`` :"

# 7f5199e4ed6744bfabae973193e09903
#: ../../topics/class-based-views/generic-editing.txt:106
msgid ""
"Then we can use :class:`CreateView` and friends to do the actual work. "
"Notice how we're just configuring the generic class-based views here; we "
"don't have to write any logic ourselves::"
msgstr ""
"Затем мы можем использовать класс :class:`CreateView` и \"сотоварищей\" "
"чтобы выполнить необходимую работу. Обратите внимание, что мы лишь создаем "
"конфигурацию для CBV; нам не нужно писать никакого кода, реализующего "
"логику::"

# b959d57d897b445f9687ba658c9dcff4
#: ../../topics/class-based-views/generic-editing.txt:126
msgid ""
"We have to use :func:`~django.core.urlresolvers.reverse_lazy` here, not just "
"``reverse`` as the urls are not loaded when the file is imported."
msgstr ""
"Мы должны использовать здесь функцию :func:`~django.core.urlresolvers."
"reverse_lazy`, а не просто ``reverse``, поскольку urls не \"загружаются\" "
"при импорте файла."

# c828f22fc59947d4ae472650d77659d7
#: ../../topics/class-based-views/generic-editing.txt:129
msgid "Finally, we hook these new views into the URLconf::"
msgstr "И наконец, мы подключаем новые представления в URLconf::"

# e21db45eda0b4a758973d383a77d7a9f
#: ../../topics/class-based-views/generic-editing.txt:144
msgid ""
"These views inherit :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` which uses :attr:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin.template_name_suffix` to construct "
"the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"based on the model."
msgstr ""
"Эти представления наследуют  :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`,который использует атрибут :attr:`~django."
"views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` "
"для создания :attr:`~django.views.generic.base.TemplateResponseMixin."
"template_name` с помощью имени модели."

# c97dd086a3b24d1ab51d1ccee5ae5851
#: ../../topics/class-based-views/generic-editing.txt:152
msgid "In this example:"
msgstr "В этом примере:"

# 424cf773719e4df9a62f84f052baabae
#: ../../topics/class-based-views/generic-editing.txt:154
msgid ""
":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""
"Классы :class:`CreateView` и :class:`UpdateView` используют ``myapp/"
"author_form.html``"

# 7f6504ad1ede4599a83cc4e9276e58a3
#: ../../topics/class-based-views/generic-editing.txt:155
msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""
"Классы :class:`DeleteView` используют ``myapp/author_confirm_delete.html``"

# 939cff26c1224fbda6c0137cdda4f428
#: ../../topics/class-based-views/generic-editing.txt:157
msgid ""
"If you wish to have separate templates for :class:`CreateView` and :class:"
"`UpdateView`, you can set either :attr:`~django.views.generic.base."
"TemplateResponseMixin.template_name` or :attr:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin.template_name_suffix` on your view class."
msgstr ""
"Если вам нужно разделить шаблоны для классов :class:`CreateView` и :class:"
"`UpdateView`, вы можете либо назначить атрибут :attr:`~django.views.generic."
"base.TemplateResponseMixin.template_name`, либо использовать  :attr:`~django."
"views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` "
"в ваших классах представлений."

# 9c4c190ab5c0473a9f6fae9dacbcdec8
#: ../../topics/class-based-views/generic-editing.txt:164
msgid "Models and request.user"
msgstr "Модели и request.user"

# 2d22f852feb84cd094a86cb4725fb7cf
#: ../../topics/class-based-views/generic-editing.txt:166
msgid ""
"To track the user that created an object using a :class:`CreateView`, you "
"can use a custom :class:`~django.forms.ModelForm` to do this. First, add the "
"foreign key relation to the model::"
msgstr ""
"Чтобы отслеживать пользователя, создавшего некий объект с помощью :class:"
"`CreateView`, вы можете использовать пользовательский класс :class:`~django."
"forms.ModelForm`, чтобы сделать это. Первое, добавьте внешний ключ (foreign "
"key) к модели::"

# ef2409c4b958410c837cfb7320ee38d3
#: ../../topics/class-based-views/generic-editing.txt:180
msgid ""
"Create a custom :class:`~django.forms.ModelForm` in order to exclude the "
"``created_by`` field and prevent the user from editing it:"
msgstr ""
"Создайте пользовательский класс :class:`~django.forms.ModelForm` для того, "
"чтобы исключить поле ``created_by`` и не дать пользователю возможность "
"редактировать его:"

# 2efd65c3d21c4d1ea47cb8b11a246b4d
#: ../../topics/class-based-views/generic-editing.txt:194
msgid ""
"In the view, use the custom :attr:`~django.views.generic.edit.FormMixin."
"form_class` and override :meth:`~django.views.generic.edit.ModelFormMixin."
"form_valid()` to add the user::"
msgstr ""
"В представлении, укажите пользовательский атрибут :attr:`~django.views."
"generic.edit.FormMixin.form_class` и переопределите метод  :meth:`~django."
"views.generic.edit.ModelFormMixin.form_valid()` для добавления пользователя::"

# 36dd8fb53345448d8af5023e369d5534
#: ../../topics/class-based-views/generic-editing.txt:212
msgid ""
"Note that you'll need to :ref:`decorate this view<decorating-class-based-"
"views>` using :func:`~django.contrib.auth.decorators.login_required`, or "
"alternatively handle unauthorized users in the :meth:`~django.views.generic."
"edit.ModelFormMixin.form_valid()`."
msgstr ""
"Обратите внимание, что вам необходимо :ref:`задекорировать "
"представление<decorating-class-based-views>` используя :func:`~django."
"contrib.auth.decorators.login_required`,  или в качестве альтернативы, "
"обрабатывать неавторизированных пользователей в методе :meth:`~django.views."
"generic.edit.ModelFormMixin.form_valid()`."

# 44bb8584ac4f45a8abf8e7ad06ba2f7b
#: ../../topics/class-based-views/generic-editing.txt:219
msgid "AJAX example"
msgstr "Пример с использованием AJAX"

# 16509343d6cc4b83b65515701ae7f149
#: ../../topics/class-based-views/generic-editing.txt:221
msgid ""
"Here is a simple example showing how you might go about implementing a form "
"that works for AJAX requests as well as 'normal' form POSTs::"
msgstr ""
"Вот простой пример, показывающий, как вы могли бы реализовать форму, которая "
"работает и с запросами AJAX,  и с  \"обычными\" POST запросами формы::"
