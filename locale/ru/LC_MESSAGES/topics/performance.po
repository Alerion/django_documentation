# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# b9cfdf0af61c4c9c8857571b22192b5b
#: ../../topics/performance.txt:3
msgid "Performance and optimization"
msgstr ""

# 24b373265f534c2e9221f8342e7fa088
#: ../../topics/performance.txt:5
msgid ""
"This document provides an overview of techniques and tools that can help get "
"your Django code running more efficiently - faster, and using fewer system "
"resources."
msgstr ""

# f4c387abf79d40c9be0d9dc41911adfa
#: ../../topics/performance.txt:10
msgid "Introduction"
msgstr ""

# 146292cc344a41e982aa8b38d75ff4a4
#: ../../topics/performance.txt:12
msgid ""
"Generally one's first concern is to write code that *works*, whose logic "
"functions as required to produce the expected output. Sometimes, however, "
"this will not be enough to make the code work as *efficiently* as one would "
"like."
msgstr ""

# 15f48f2d43d94fe6b82fa0e3954d20f0
#: ../../topics/performance.txt:16
msgid ""
"In this case, what's needed is something - and in practice, often a "
"collection of things - to improve the code's performance without, or only "
"minimally, affecting its behavior."
msgstr ""

# 7aa6e6aeacd64e2bbe5af647b5276c97
#: ../../topics/performance.txt:21
msgid "General approaches"
msgstr ""

# 724602cd2126415f930cd5c3e9c3487a
#: ../../topics/performance.txt:24
msgid "What are you optimizing *for*?"
msgstr ""

# 79f9aa07726047e18e3e07100feb5d91
#: ../../topics/performance.txt:26
msgid ""
"It's important to have a clear idea what you mean by 'performance'. There is "
"not just one metric of it."
msgstr ""

# 908d220848fb4fae9185c743af3d4aa2
#: ../../topics/performance.txt:29
msgid ""
"Improved speed might be the most obvious aim for a program, but sometimes "
"other performance improvements might be sought, such as lower memory "
"consumption or fewer demands on the database or network."
msgstr ""

# d824d490c85744ceb352130a6f8657a9
#: ../../topics/performance.txt:33
msgid ""
"Improvements in one area will often bring about improved performance in "
"another, but not always; sometimes one can even be at the expense of "
"another. For example, an improvement in a program's speed might cause it to "
"use more memory. Even worse, it can be self-defeating - if the speed "
"improvement is so memory-hungry that the system starts to run out of memory, "
"you'll have done more harm than good."
msgstr ""

# 17a6462438404408a529116dbf05b2ee
#: ../../topics/performance.txt:40
msgid ""
"There are other trade-offs to bear in mind. Your own time is a valuable "
"resource, more precious than CPU time. Some improvements might be too "
"difficult to be worth implementing, or might affect the portability or "
"maintainability of the code. Not all performance improvements are worth the "
"effort."
msgstr ""

# 0c5c1e1b2e114df89e057d8b93ff81de
#: ../../topics/performance.txt:45
msgid ""
"So, you need to know what performance improvements you are aiming for, and "
"you also need to know that you have a good reason for aiming in that "
"direction - and for that you need:"
msgstr ""

# 72d4f6bf7da4426bbb327129e8740cee
#: ../../topics/performance.txt:50
msgid "Performance benchmarking"
msgstr ""

# d9a04ff6d7e1462ab4f3c1439aa8aed3
#: ../../topics/performance.txt:52
msgid ""
"It's no good just guessing or assuming where the inefficiencies lie in your "
"code."
msgstr ""

# 544cc4cb87404badbf7e3e09c679b409
#: ../../topics/performance.txt:56
msgid "Django tools"
msgstr ""

# 98f369b850664d38977913fa32ccc636
#: ../../topics/performance.txt:58
msgid ""
"`django-debug-toolbar <https://github.com/django-debug-toolbar/django-debug-"
"toolbar/>`_ is a very handy tool that provides insights into what your code "
"is doing and how much time it spends doing it. In particular it can show you "
"all the SQL queries your page is generating, and how long each one has taken."
msgstr ""

# 66b9a98f96be4b8c90938ecc0e753f56
#: ../../topics/performance.txt:64
msgid ""
"Third-party panels are also available for the toolbar, that can (for "
"example) report on cache performance and template rendering times."
msgstr ""

# 6c930f7745e243b8b81fa5b5a95b3dab
#: ../../topics/performance.txt:68
msgid "Third-party services"
msgstr ""

# 52a7d7dbf0b1494d858db5c8ae1af0ba
#: ../../topics/performance.txt:70
msgid ""
"There are a number of free services that will analyze and report on the "
"performance of your site's pages from the perspective of a remote HTTP "
"client, in effect simulating the experience of an actual user."
msgstr ""

# 0519f949bbdb43b4bd0f4027a2c45740
#: ../../topics/performance.txt:74
msgid ""
"These can't report on the internals of your code, but can provide a useful "
"insight into your site's overall performance, including aspects that can't "
"be adequately measured from within Django environment. Examples include:"
msgstr ""

#: ../../topics/performance.txt:78
msgid "`Yahoo's Yslow <http://yslow.org/>`_"
msgstr ""

# 4e00f2c675f144a699ced178c9a74667
#: ../../topics/performance.txt:79
msgid "`Google PageSpeed <https://developers.google.com/speed/pagespeed/>`_"
msgstr ""

# 6ada02ccfd194e969906cdebe29a0370
#: ../../topics/performance.txt:81
msgid ""
"There are also several paid-for services that perform a similar analysis, "
"including some that are Django-aware and can integrate with your codebase to "
"profile its performance far more comprehensively."
msgstr ""

# f7c963fec3674f449f9fbb4c4078047f
#: ../../topics/performance.txt:86
msgid "Get things right from the start"
msgstr ""

# 67877f460280419681dde729a76391dd
#: ../../topics/performance.txt:88
msgid ""
"Some work in optimization involves tackling performance shortcomings, but "
"some of the work can simply be built in to what you'd do anyway, as part of "
"the good practices you should adopt even before you start thinking about "
"improving performance."
msgstr ""

# 544714bbe7284009a94b7e14b6cb7202
#: ../../topics/performance.txt:93
msgid ""
"In this respect Python is an excellent language to work with, because "
"solutions that look elegant and feel right usually are the best performing "
"ones. As with most skills, learning what \"looks right\" takes practice, but "
"one of the most useful guidelines is:"
msgstr ""

# d54f1ff1de2b43948526c92a0d18b70d
#: ../../topics/performance.txt:99
msgid "Work at the appropriate level"
msgstr ""

# 97073681c6c7424ea5e9e1b374ca3e77
#: ../../topics/performance.txt:101
msgid ""
"Django offers many different ways of approaching things, but just because "
"it's possible to do something in a certain way doesn't mean that it's the "
"most appropriate way to do it. For example, you might find that you could "
"calculate the same thing - the number of items in a collection, perhaps - in "
"a ``QuerySet``, in Python, or in a template."
msgstr ""

# 85dfdc8085814185a54630c9742575bd
#: ../../topics/performance.txt:107
msgid ""
"However, it will almost always be faster to do this work at lower rather "
"than higher levels. At higher levels the system has to deal with objects "
"through multiple levels of abstraction and layers of machinery."
msgstr ""

# c1789295e8134c15add7de2ffa822684
#: ../../topics/performance.txt:111
msgid ""
"That is, the database can typically do things faster than Python can, which "
"can do them faster than the template language can::"
msgstr ""

# 385d0431800f4592937b394e49258feb
#: ../../topics/performance.txt:128
msgid ""
"Generally speaking, the most appropriate level for the job is the lowest-"
"level one that it is comfortable to code for."
msgstr ""

# b18456e80cdb46878daa859caa1b1c13
#: ../../topics/performance.txt:133
msgid "The example above is merely illustrative."
msgstr ""

# 14744a6ccc084c0aa879306da9993680
#: ../../topics/performance.txt:135
msgid ""
"Firstly, in a real-life case you need to consider what is happening before "
"and after your count to work out what's an optimal way of doing it *in that "
"particular context*. The database optimization documents describes :ref:`a "
"case where counting in the template would be better "
"<overuse_of_count_and_exists>`."
msgstr ""

# 32d0ab721fe84093bec78a1c9e826629
#: ../../topics/performance.txt:141
msgid ""
"Secondly, there are other options to consider: in a real-life case, "
"``{{ my_bicycles.count }}``, which invokes the ``QuerySet`` ``count()`` "
"method directly from the template, might be the most appropriate choice."
msgstr ""

# 280f7e57339b4d398ed02fbec157e7c8
#: ../../topics/performance.txt:146
msgid "Caching"
msgstr ""

# 404b90d982e6411fa953cef6a5e439ef
#: ../../topics/performance.txt:148
msgid ""
"Often it is expensive (that is, resource-hungry and slow) to compute a "
"value, so there can be huge benefit in saving the value to a quickly "
"accessible cache, ready for the next time it's required."
msgstr ""

# 6c797ee209d040ec9b910c9e324fface
#: ../../topics/performance.txt:152
msgid ""
"It's a sufficiently significant and powerful technique that Django includes "
"a comprehensive caching framework, as well as other smaller pieces of "
"caching functionality."
msgstr ""

# b5553128c86c4ee3b04a614cf09a9317
#: ../../topics/performance.txt:157
msgid ":doc:`The caching framework </topics/cache>`"
msgstr ""

# 56e178f21259420c9509f146e5279cdb
#: ../../topics/performance.txt:159
msgid ""
"Django's :doc:`caching framework </topics/cache>` offers very significant "
"opportunities for performance gains, by saving dynamic content so that it "
"doesn't need to be calculated for each request."
msgstr ""

# c0ae76be89b44590bc24f4ab83807abf
#: ../../topics/performance.txt:163
msgid ""
"For convenience, Django offers different levels of cache granularity: you "
"can cache the output of specific views, or only the pieces that are "
"difficult to produce, or even an entire site."
msgstr ""

# 24e91497fa624f4f98cb594abc4e7395
#: ../../topics/performance.txt:167
msgid ""
"Implementing caching should not be regarded as an alternative to improving "
"code that's performing poorly because it has been written badly. It's one of "
"the final steps towards producing well-performing code, not a shortcut."
msgstr ""

# cb68812969df496783482b5309b9ebac
#: ../../topics/performance.txt:172
msgid ":class:`~django.utils.functional.cached_property`"
msgstr ""

#: ../../topics/performance.txt:174
msgid ""
"It's common to have to call a class instance's method more than once. If "
"that function is expensive, then doing so can be wasteful."
msgstr ""

#: ../../topics/performance.txt:177
msgid ""
"Using the :class:`~django.utils.functional.cached_property` decorator saves "
"the value returned by a property; the next time the function is called on "
"that instance, it will return the saved value rather than re-computing it. "
"Note that this only works on methods that take ``self`` as their only "
"argument and that it changes the method to a property."
msgstr ""

# cc6048319cf24dd09152667314e791b7
#: ../../topics/performance.txt:183
msgid ""
"Certain Django components also have their own caching functionality; these "
"are discussed below in the sections related to those components."
msgstr ""

# e9eee6ca9c9d42b9a4a6eefd4f2432ba
#: ../../topics/performance.txt:187
msgid "Understanding laziness"
msgstr ""

# fa4dd2f2a4bf4a5b9ec98e1104b1a1aa
#: ../../topics/performance.txt:189
msgid ""
"*Laziness* is a strategy complementary to caching. Caching avoids "
"recomputation by saving results; laziness delays computation until it's "
"actually required."
msgstr ""

# 1b0404f3faaa449f84beb7f774a72381
#: ../../topics/performance.txt:193
msgid ""
"Laziness allows us to refer to things before they are instantiated, or even "
"before it's possible to instantiate them. This has numerous uses."
msgstr ""

# eb97982ddae74b05bf14d4e644763357
#: ../../topics/performance.txt:196
msgid ""
"For example, :ref:`lazy translation <lazy-translations>` can be used before "
"the target language is even known, because it doesn't take place until the "
"translated string is actually required, such as in a rendered template."
msgstr ""

# 1517533b9c37463091f477313cf51694
#: ../../topics/performance.txt:200
msgid ""
"Laziness is also a way to save effort by trying to avoid work in the first "
"place. That is, one aspect of laziness is not doing anything until it has to "
"be done, because it may not turn out to be necessary after all. Laziness can "
"therefore have performance implications, and the more expensive the work "
"concerned, the more there is to gain through laziness."
msgstr ""

# f3bed2681bd54a829e225c9f28a9af67
#: ../../topics/performance.txt:206
msgid ""
"Python provides a number of tools for lazy evaluation, particularly through "
"the :py:term:`generator` and :py:term:`generator expression` constructs. "
"It's worth reading up on laziness in Python to discover opportunities for "
"making use of lazy patterns in your code."
msgstr ""

# b8abcf9515de4eeb91d41dc7e8d3e9b5
#: ../../topics/performance.txt:212
msgid "Laziness in Django"
msgstr ""

# 3c5d4256bafa45ab9cd8d1de401cb84a
#: ../../topics/performance.txt:214
msgid ""
"Django is itself quite lazy. A good example of this can be found in the "
"evaluation of ``QuerySets``. :ref:`QuerySets are lazy <querysets-are-lazy>`. "
"Thus a ``QuerySet`` can be created, passed around and combined with other "
"``QuerySets``, without actually incurring any trips to the database to fetch "
"the items it describes. What gets passed around is the ``QuerySet`` object, "
"not the collection of items that - eventually - will be required from the "
"database."
msgstr ""

# d2135ad54cd94f299ae55b6124540736
#: ../../topics/performance.txt:221
msgid ""
"On the other hand, :ref:`certain operations will force the evaluation of a "
"QuerySet <when-querysets-are-evaluated>`. Avoiding the premature evaluation "
"of a ``QuerySet`` can save making an expensive and unnecessary trip to the "
"database."
msgstr ""

#: ../../topics/performance.txt:226
msgid ""
"Django also offers a :meth:`~django.utils.functional.keep_lazy` decorator. "
"This allows a function that has been called with a lazy argument to behave "
"lazily itself, only being evaluated when it needs to be. Thus the lazy "
"argument - which could be an expensive one - will not be called upon for "
"evaluation until it's strictly required."
msgstr ""

# 67657d55a5074627b6d5e8d14681defa
#: ../../topics/performance.txt:233
msgid "Databases"
msgstr ""

#: ../../topics/performance.txt:236
msgid "Database optimization"
msgstr ""

# e33f182257cf48459a809373d5827427
#: ../../topics/performance.txt:238
msgid ""
"Django’s database layer provides various ways to help developers get the "
"best performance from their databases. The :doc:`database optimization "
"documentation </topics/db/optimization>` gathers together links to the "
"relevant documentation and adds various tips that outline the steps to take "
"when attempting to optimize your database usage."
msgstr ""

# d84d01a96219450d9e50a462d1bc348a
#: ../../topics/performance.txt:245
msgid "Other database-related tips"
msgstr ""

# fabb793c91d8458c93408435392c5d13
#: ../../topics/performance.txt:247
msgid ""
"Enabling :ref:`persistent-database-connections` can speed up connections to "
"the database accounts for a significant part of the request processing time."
msgstr ""

# e3268fb46bf14d4b84f1a698a6ad791f
#: ../../topics/performance.txt:250
msgid ""
"This helps a lot on virtualized hosts with limited network performance, for "
"example."
msgstr ""

# a9a3875d56ce4d2caf9a7a5d80e72ea9
#: ../../topics/performance.txt:253
msgid "HTTP performance"
msgstr ""

# 96dd2ac1cbe44e1daea5543e651642c6
#: ../../topics/performance.txt:256
msgid "Middleware"
msgstr ""

# 2487c028a5d740deab16f3f273c5de5f
#: ../../topics/performance.txt:258
msgid ""
"Django comes with a few helpful pieces of :doc:`middleware </ref/"
"middleware>` that can help optimize your site's performance. They include:"
msgstr ""

# 29d9a86e4d2d4a60be2323e8b1430fbf
#: ../../topics/performance.txt:262
msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ""

#: ../../topics/performance.txt:264
msgid ""
"Adds support for modern browsers to conditionally GET responses based on the "
"``ETag`` and ``Last-Modified`` headers. It also calculates and sets an ETag "
"if needed."
msgstr ""

# cb9957d0c08a4631b4dd8d775ff623fa
#: ../../topics/performance.txt:269
msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ""

# f21424a9a29249e4b5e909cc1b0da8e3
#: ../../topics/performance.txt:271
msgid ""
"Compresses responses for all modern browsers, saving bandwidth and transfer "
"time. Note that GZipMiddleware is currently considered a security risk, and "
"is vulnerable to attacks that nullify the protection provided by TLS/SSL. "
"See the warning in :class:`~django.middleware.gzip.GZipMiddleware` for more "
"information."
msgstr ""

# acdbd7e6ea4c4e7b966b7a4cf3b1e183
#: ../../topics/performance.txt:277
msgid "Sessions"
msgstr ""

#: ../../topics/performance.txt:280
msgid "Using cached sessions"
msgstr ""

# 1860ab0b6f304fdcacf8bc2bd63869bc
#: ../../topics/performance.txt:282
msgid ""
":ref:`Using cached sessions <cached-sessions-backend>` may be a way to "
"increase performance by eliminating the need to load session data from a "
"slower storage source like the database and instead storing frequently used "
"session data in memory."
msgstr ""

# 2ce630c2f97a4158b7c30305b9c71a9c
#: ../../topics/performance.txt:288
msgid "Static files"
msgstr ""

# bca6d369e4bd45029427b4750e06d7a0
#: ../../topics/performance.txt:290
msgid ""
"Static files, which by definition are not dynamic, make an excellent target "
"for optimization gains."
msgstr ""

# d385ef4f5c1f4431979cc63ab134f648
#: ../../topics/performance.txt:294
msgid ":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage`"
msgstr ""

# 5212a936fdfd4c23886964f0f9275a15
#: ../../topics/performance.txt:296
msgid ""
"By taking advantage of web browsers' caching abilities, you can eliminate "
"network hits entirely for a given file after the initial download."
msgstr ""

# 88e8213808cf47de9a51437838efa8b1
#: ../../topics/performance.txt:299
msgid ""
":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` "
"appends a content-dependent tag to the filenames of :doc:`static files </ref/"
"contrib/staticfiles>` to make it safe for browsers to cache them long-term "
"without missing future changes - when a file changes, so will the tag, so "
"browsers will reload the asset automatically."
msgstr ""

# 221a8feae8d0468d9ed5032ca12f7d3b
#: ../../topics/performance.txt:306
msgid "\"Minification\""
msgstr ""

# 7d5647887297481e8c090a5f07cae938
#: ../../topics/performance.txt:308
msgid ""
"Several third-party Django tools and packages provide the ability to \"minify"
"\" HTML, CSS, and JavaScript. They remove unnecessary whitespace, newlines, "
"and comments, and shorten variable names, and thus reduce the size of the "
"documents that your site publishes."
msgstr ""

# 3b4ec27b673140d8b8f18bcfb3dc2378
#: ../../topics/performance.txt:314
msgid "Template performance"
msgstr ""

# 22e8b18688d24108bf0b9358518cfdef
#: ../../topics/performance.txt:316
msgid "Note that:"
msgstr ""

# 9960bbd48e7140e88006c62cd270447f
#: ../../topics/performance.txt:318
msgid "using ``{% block %}`` is faster than using ``{% include %}``"
msgstr ""

# 719ec91a9f964511bd953f60e7f51a39
#: ../../topics/performance.txt:319
msgid ""
"heavily-fragmented templates, assembled from many small pieces, can affect "
"performance"
msgstr ""

# 0e48b184cfdc4d409b3577cfb679cfc9
#: ../../topics/performance.txt:323
msgid "The cached template loader"
msgstr ""

# b4bbf371cc2b43f88a8f316e4cffea41
#: ../../topics/performance.txt:325
msgid ""
"Enabling the :class:`cached template loader <django.template.loaders.cached."
"Loader>` often improves performance drastically, as it avoids compiling each "
"template every time it needs to be rendered."
msgstr ""

# aeba273588f2418db2cb6bb9df9f9c0f
#: ../../topics/performance.txt:331
msgid "Using different versions of available software"
msgstr ""

# d8ab59b71a0b47cdb94580ba7fc39bd1
#: ../../topics/performance.txt:333
msgid ""
"It can sometimes be worth checking whether different and better-performing "
"versions of the software that you're using are available."
msgstr ""

# a9efcddfedee44b4b933441d73894b41
#: ../../topics/performance.txt:336
msgid ""
"These techniques are targeted at more advanced users who want to push the "
"boundaries of performance of an already well-optimized Django site."
msgstr ""

# 5141f8bef3114c44a99b23dc45da03a1
#: ../../topics/performance.txt:339
msgid ""
"However, they are not magic solutions to performance problems, and they're "
"unlikely to bring better than marginal gains to sites that don't already do "
"the more basic things the right way."
msgstr ""

# 7be4ce2c4cba436791e454a827007895
#: ../../topics/performance.txt:345
msgid ""
"It's worth repeating: **reaching for alternatives to software you're already "
"using is never the first answer to performance problems**. When you reach "
"this level of optimization, you need a formal benchmarking solution."
msgstr ""

# ef763a55c62144438abcdc3dabb62d53
#: ../../topics/performance.txt:351
msgid "Newer is often - but not always - better"
msgstr ""

# 16e9a966d5804183bb905464ae2293d7
#: ../../topics/performance.txt:353
msgid ""
"It's fairly rare for a new release of well-maintained software to be less "
"efficient, but the maintainers can't anticipate every possible use-case - so "
"while being aware that newer versions are likely to perform better, don't "
"simply assume that they always will."
msgstr ""

# f622701514fc4fb6ba4416e341c8b730
#: ../../topics/performance.txt:358
msgid ""
"This is true of Django itself. Successive releases have offered a number of "
"improvements across the system, but you should still check the real-world "
"performance of your application, because in some cases you may find that "
"changes mean it performs worse rather than better."
msgstr ""

# 69f39ae5f06e490fb4584c775e2ef264
#: ../../topics/performance.txt:363
msgid ""
"Newer versions of Python, and also of Python packages, will often perform "
"better too - but measure, rather than assume."
msgstr ""

# 52ff97be0a2e49dcaa52ec88a0740f30
#: ../../topics/performance.txt:368
msgid ""
"Unless you've encountered an unusual performance problem in a particular "
"version, you'll generally find better features, reliability, and security in "
"a new release and that these benefits are far more significant than any "
"performance you might win or lose."
msgstr ""

# 6cc6eabce0894e0db50b7d73ae4e322b
#: ../../topics/performance.txt:374
msgid "Alternatives to Django's template language"
msgstr ""

# ec92d3f1bb76474da97eef8344b1bc41
#: ../../topics/performance.txt:376
msgid ""
"For nearly all cases, Django's built-in template language is perfectly "
"adequate. However, if the bottlenecks in your Django project seem to lie in "
"the template system and you have exhausted other opportunities to remedy "
"this, a third-party alternative may be the answer."
msgstr ""

# 3a0d9e509c0f4ba5a29b187fb9012088
#: ../../topics/performance.txt:381
msgid ""
"`Jinja2 <http://jinja.pocoo.org/docs/>`_ can offer performance improvements, "
"particularly when it comes to speed."
msgstr ""

# dc4eb1f373754508a10e19a234b59b9c
#: ../../topics/performance.txt:384
msgid ""
"Alternative template systems vary in the extent to which they share Django's "
"templating language."
msgstr ""

# 2e4f7084486f4ff085c77963dc868b90
#: ../../topics/performance.txt:389
msgid ""
"*If* you experience performance issues in templates, the first thing to do "
"is to understand exactly why. Using an alternative template system may prove "
"faster, but the same gains may also be available without going to that "
"trouble - for example, expensive processing and logic in your templates "
"could be done more efficiently in your views."
msgstr ""

# 402ba170252348179f484057e51d3b01
#: ../../topics/performance.txt:396
msgid "Alternative software implementations"
msgstr ""

# 8a5de74dc5494e97b9f22575e6033dfd
#: ../../topics/performance.txt:398
msgid ""
"It may be worth checking whether Python software you're using has been "
"provided in a different implementation that can execute the same code faster."
msgstr ""

# 868d8947f2e0459d82354127ddfa751f
#: ../../topics/performance.txt:401
msgid ""
"However: most performance problems in well-written Django sites aren't at "
"the Python execution level, but rather in inefficient database querying, "
"caching, and templates. If you're relying on poorly-written Python code, "
"your performance problems are unlikely to be solved by having it execute "
"faster."
msgstr ""

# 99fd255745fc4a44ae40c40e21b66c7b
#: ../../topics/performance.txt:406
msgid ""
"Using an alternative implementation may introduce compatibility, deployment, "
"portability, or maintenance issues. It goes without saying that before "
"adopting a non-standard implementation you should ensure it provides "
"sufficient performance gains for your application to outweigh the potential "
"risks."
msgstr ""

# 362f301b521c4f389acf93d3889de360
#: ../../topics/performance.txt:411
msgid "With these caveats in mind, you should be aware of:"
msgstr ""

# 7ad66b298a894e43b918c4c649a96d8e
#: ../../topics/performance.txt:414
msgid "`PyPy <http://pypy.org/>`_"
msgstr ""

# 62d38fdea3de4ac7954632d0fa3bf11d
#: ../../topics/performance.txt:416
msgid ""
"`PyPy <http://pypy.org/>`_ is an implementation of Python in Python itself "
"(the 'standard' Python implementation is in C). PyPy can offer substantial "
"performance gains, typically for heavyweight applications."
msgstr ""

# 07965ab878634cbc97c2fdc43786debb
#: ../../topics/performance.txt:420
msgid ""
"A key aim of the PyPy project is `compatibility <http://pypy.org/compat."
"html>`_ with existing Python APIs and libraries. Django is compatible, but "
"you will need to check the compatibility of other libraries you rely on."
msgstr ""

# 26f3332e73e04acd9103e412c335f39a
#: ../../topics/performance.txt:426
msgid "C implementations of Python libraries"
msgstr ""

# c84fadb21b184a17bb329f08c6853bf7
#: ../../topics/performance.txt:428
msgid ""
"Some Python libraries are also implemented in C, and can be much faster. "
"They aim to offer the same APIs. Note that compatibility issues and behavior "
"differences are not unknown (and not always immediately evident)."
msgstr ""
