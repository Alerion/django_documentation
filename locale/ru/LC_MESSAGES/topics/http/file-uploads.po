# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2014, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2015-03-25 16:09+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# c097dd0357e04273a8f1746b8ac24050
#: ../../topics/http/file-uploads.txt:3
msgid "File Uploads"
msgstr "Загрузка файлов"

# 9c41e65a75024b698a49f77c7bd45d11
#: ../../topics/http/file-uploads.txt:7
msgid ""
"When Django handles a file upload, the file data ends up placed in :attr:"
"`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` "
"object see the documentation for :doc:`request and response objects </ref/"
"request-response>`). This document explains how files are stored on disk and "
"in memory, and how to customize the default behavior."
msgstr ""
"Когда Django обрабатывает загрузку файла, данные о нем в конце концов "
"попадают в :attr:`request.FILES <django.http.HttpRequest.FILES>` (подробнее "
"об объекте ``request`` смотрите в :doc:`соответствующем разделе </ref/"
"request-response>`). Этот раздел описывает как файлы сохраняются на диск или "
"в памяти и как переопределить это."

# d96816d7842a4de39d3a5606cd321dfa
#: ../../topics/http/file-uploads.txt:15
msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr ""
"Принимать загруженный контент от непроверенных пользователей -- опасно! "
"Подробности смотрите в :ref:`user-uploaded-content-security`."

# 6dc0c5d716424bd5b5ec921708e8b467
#: ../../topics/http/file-uploads.txt:20
msgid "Basic file uploads"
msgstr "Основы загрузки файла"

# 0773879a49014d95844db44e32a58390
#: ../../topics/http/file-uploads.txt:22
#, fuzzy
msgid "Consider a simple form containing a :class:`~django.forms.FileField`:"
msgstr ""
"Рассмотрим простую форму, содержащую :class:`~django.forms.FileField`::"

# 6d97c789ff1b4dcbb1a975c1caa86631
#: ../../topics/http/file-uploads.txt:33
msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`, which is a dictionary containing a key for "
"each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, "
"or other :class:`~django.forms.FileField` subclass) in the form. So the data "
"from the above form would be accessible as ``request.FILES['file']``."
msgstr ""
"Представление, обрабатывающее эту форму, получает данные файла из :attr:"
"`request.FILES <django.http.HttpRequest.FILES>`, который является словарем "
"содержащим ключ для каждого поля :class:`~django.forms.FileField` (или :"
"class:`~django.forms.ImageField`, или подкласса :class:`~django.forms."
"FileField`) в форме. Так что данные из формы выше будут доступны в ``request."
"FILES['file']``."

# 74f58ff63c2040bdbaadc7be6604ac94
#: ../../topics/http/file-uploads.txt:40
msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST`` and the ``<form>`` that "
"posted the request has the attribute ``enctype=\"multipart/form-data\"``. "
"Otherwise, ``request.FILES`` will be empty."
msgstr ""
"Заметим, что атрибут :attr:`request.FILES <django.http.HttpRequest.FILES>` "
"будет содержать данные только при ``POST`` запросе и если форма ``<form>`` "
"содержит ``enctype=\"multipart/form-data\"``. В противном случае ``request."
"FILES`` будет пустым."

# 9300b42a621842f7956fa824b022f6e2
#: ../../topics/http/file-uploads.txt:45
#, fuzzy
msgid ""
"Most of the time, you'll simply pass the file data from ``request`` into the "
"form as described in :ref:`binding-uploaded-files`. This would look "
"something like:"
msgstr ""
"В большинстве случаев вы просто передадите данные из ``request`` в форму, "
"как описано в разделе :ref:`binding-uploaded-files`. Это будет выглядеть "
"следующим образом::"

# 48cc0c1edcfd4a69a3af8649157f23e0
#: ../../topics/http/file-uploads.txt:69
msgid ""
"Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest."
"FILES>` into the form's constructor; this is how file data gets bound into a "
"form."
msgstr ""
"Заметим, что вы должны передать :attr:`request.FILES <django.http."
"HttpRequest.FILES>` в конструктор формы."

# 99b1443c96474c6d912c6362502a3339
#: ../../topics/http/file-uploads.txt:72
msgid "Here's a common way you might handle an uploaded file::"
msgstr "Вот пример стандартной обработки загруженного файла::"

# 9dc1317a45004f69968d09d426fb1549
#: ../../topics/http/file-uploads.txt:79
msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr ""
"Цикл по ``UploadedFile.chunks()``, вместо использования ``read()``, "
"обезопасит вас от нагрузки системы при загрузке большого файла."

# a064fe9c816b42a1af746d6ede25c285
#: ../../topics/http/file-uploads.txt:82
msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see :class:`UploadedFile` for a complete reference."
msgstr ""
"Объект ``UploadedFile`` содержит и другие методы и атрибуты, смотрите "
"описание :class:`UploadedFile`."

# 4e95a3afb8cb42cc94c917fbe44d2b03
#: ../../topics/http/file-uploads.txt:86
msgid "Handling uploaded files with a model"
msgstr "Обработка загруженных файлов используя модель"

# 26c1ae658e604274b4da66a8082a3c58
#: ../../topics/http/file-uploads.txt:88
msgid ""
"If you're saving a file on a :class:`~django.db.models.Model` with a :class:"
"`~django.db.models.FileField`, using a :class:`~django.forms.ModelForm` "
"makes this process much easier. The file object will be saved to the "
"location specified by the :attr:`~django.db.models.FileField.upload_to` "
"argument of the corresponding :class:`~django.db.models.FileField` when "
"calling ``form.save()``::"
msgstr ""
"Если вы сохраняете файлы для модели :class:`~django.db.models.Model` с :"
"class:`~django.db.models.FileField`, использование :class:`~django.forms."
"ModelForm` значительно упростит этот процесс. Файл будет сохранен по "
"указанному в аргументе :attr:`~django.db.models.FileField.upload_to` поля :"
"class:`~django.db.models.FileField` пути, при вызове ``form.save()``::"

# 5d9406a29ff44729bccddd6d989773e4
#: ../../topics/http/file-uploads.txt:110
msgid ""
"If you are constructing an object manually, you can simply assign the file "
"object from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the "
"file field in the model::"
msgstr ""
"Если вы создаете объект самостоятельно, вы можете назначить файл из :attr:"
"`request.FILES <django.http.HttpRequest.FILES>` соответствующему полю "
"модели::"

# 4e95a3afb8cb42cc94c917fbe44d2b03
#: ../../topics/http/file-uploads.txt:131
#, fuzzy
msgid "Uploading multiple files"
msgstr "Обработка загруженных файлов"

#: ../../topics/http/file-uploads.txt:133
msgid ""
"If you want to upload multiple files using one form field, set the "
"``multiple`` HTML attribute of field's widget:"
msgstr ""

#: ../../topics/http/file-uploads.txt:144
msgid ""
"Then override the ``post`` method of your :class:`~django.views.generic.edit."
"FormView` subclass to handle multiple file uploads:"
msgstr ""

# 5856b4cc510f4739af05ae2bc0b624cb
#: ../../topics/http/file-uploads.txt:171
msgid "Upload Handlers"
msgstr "Обработчики загрузки"

# 8533ac80430b4c2db21e76faa49c7a8e
#: ../../topics/http/file-uploads.txt:175
msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload "
"handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""
"Когда пользователь загружает файл, Django передает содержимое файла в "
"*обработчик загрузки* -- небольшой класс, который обрабатывает загруженные "
"данные. Обработчики загрузки определенны в настройке :setting:"
"`FILE_UPLOAD_HANDLERS`, по умолчанию::"

# 0776796c14654e96a19e49a032d2fe63
#: ../../topics/http/file-uploads.txt:183
msgid ""
"Together :class:`MemoryFileUploadHandler` and :class:"
"`TemporaryFileUploadHandler` provide Django's default file upload behavior "
"of reading small files into memory and large ones onto disk."
msgstr ""
":class:`MemoryFileUploadHandler` и :class:`TemporaryFileUploadHandler` "
"определяются обработку файлов по умолчанию в Django, загрузка небольших "
"файлов в память и больших на диск."

# c4bc9f29800e4635ab5e56024ba87019
#: ../../topics/http/file-uploads.txt:187
msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally. See :ref:"
"`custom_upload_handlers` for details on how you can customize or completely "
"replace upload behavior."
msgstr ""
"Вы можете написать собственный обработчик загрузки файлов. Вы можете "
"использовать его, например, для определения квоты для пользователей на "
"загрузку файлов, сжатие данных \"на лету\", отображение прогресса загрузки "
"файла, или пересылать файл в хранилище данных без сохранения его локально. "
"Смотрите :ref:`custom_upload_handlers`, чтобы узнать как настроить или "
"полностью переопределить поведение загрузки."

# 022d578a80834ccf9cf207898cd36414
#: ../../topics/http/file-uploads.txt:196
msgid "Where uploaded data is stored"
msgstr "Где хранятся загруженный данные"

# 95e31c71c1db4f2ebd6b990268bc78a4
#: ../../topics/http/file-uploads.txt:198
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""
"Перед тем, как вы сохраните загруженный файл, загруженные данные должны где-"
"то храниться."

# 2298f681725f421a934ddef7e2ee0483
#: ../../topics/http/file-uploads.txt:200
msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the "
"file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""
"По умолчанию, если загруженный файл меньше 2.5 мегабайт, Django поместит "
"содержимое файла в память. Это означает, что при сохранении файла содержимое "
"прочитается с памяти и сохранится на диск, а это быстрая операция."

# ab7438a775bf4a89ab013311ce9bf0c5
#: ../../topics/http/file-uploads.txt:204
msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto "
"disk."
msgstr ""
"Однако, если загруженный файл большой, Django запишет его во временный "
"каталог вашей системы. На Unix-системах это означает, что Django создаст, "
"например, такой файл ``/tmp/tmpzfp6I6.upload``. Если загружаемый файл "
"достаточно большой, вы можете отследить, как увеличивается размер файла, в "
"процессе загрузки данных."

# a9ee8abbdf514c04bdbe5e80c3cdc68c
#: ../../topics/http/file-uploads.txt:210
msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable "
"defaults\" which can be customized as described in the next section."
msgstr ""
"Эти значения -- 2.5 мегабайта, ``/tmp`` и др. -- просто «разумные значения "
"по умолчанию\", которое вы можете переопределить. Об этом в следующем "
"разделе."

# a9f16b09d4a34f9a943655b8b1a06586
#: ../../topics/http/file-uploads.txt:214
msgid "Changing upload handler behavior"
msgstr "Изменение процесса загрузки"

# 373af4e2e652431ca9c3fa6416a11e7b
#: ../../topics/http/file-uploads.txt:216
msgid ""
"There are a few settings which control Django's file upload behavior. See :"
"ref:`File Upload Settings <file-upload-settings>` for details."
msgstr ""
"Процесс загрузки файлов использует несколько настроек. Подробности смотрите "
"в :ref:`разделе настроек <file-upload-settings>`."

# df0987a8821f46d98e4f42ae89c3771f
#: ../../topics/http/file-uploads.txt:220
msgid "Modifying upload handlers on the fly"
msgstr "Изменение обработчиков загрузки файла \"на лету\""

# 69a90fed87cd4f6e9786b3b70f40fa55
#: ../../topics/http/file-uploads.txt:222
msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""
"Иногда различные представления требуют различной обработки загруженных "
"файлов. В таких случаях вы можете переопределить обработчики загрузки, "
"изменив ``request.upload_handlers``. По умолчанию этот атрибут содержит "
"обработчики из настройки :setting:`FILE_UPLOAD_HANDLERS`, но вы можете "
"изменить его."

# da5657e8db7648afa55997bfd244459f
#: ../../topics/http/file-uploads.txt:228
msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""
"Например, вы создали ``ProgressBarUploadHandler``, который уведомляет "
"страницу через AJAX-запросы о прогрессе загрузки файла . Вы можете "
"использовать его таким образом::"

# 5c6c415ad67e4f7f8d5df574cc584fb6
#: ../../topics/http/file-uploads.txt:234
msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""
"Использование ``list.insert()`` в этом случае (вместо ``append()``)  буде "
"уместней, так как обработчик, уведомляющий о прогрессе загрузки, должен "
"использоваться *перед* другими обработчиками. Запомните, обработчики "
"загрузки используются по-порядку."

# 4da0dec2bb8d416bbe5324bb13a1680f
#: ../../topics/http/file-uploads.txt:238
msgid ""
"If you want to replace the upload handlers completely, you can just assign a "
"new list::"
msgstr ""
"Если вы хотите полностью переопределить обработчики, просто укажите новый "
"список::"

# b4e456f696184fc0b81060773ffd867d
#: ../../topics/http/file-uploads.txt:245
msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify ``request."
"upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` "
"Django will throw an error."
msgstr ""
"Вы можете изменить обработчики загрузок *перед* использованием ``request."
"POST`` или ``request.FILES`` -- не имеет смысла это делать после начала "
"загрузки. Если вы попытаетесь изменить ``request.upload_handlers`` после "
"использования ``request.POST`` или ``request.FILES``, Django вызовет "
"исключение."

# fddd46c2332d46ab95fcbf3321a704bf
#: ../../topics/http/file-uploads.txt:252
msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""
"Вы должны изменять обработчики загрузки в представлении как можно раньше."

# 5626f10113114fc3b63f8d8bbeef1e8a
#: ../../topics/http/file-uploads.txt:255
msgid ""
"Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf."
"CsrfViewMiddleware` which is enabled by default. This means you will need to "
"use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow "
"you to change the upload handlers.  You will then need to use :func:`~django."
"views.decorators.csrf.csrf_protect` on the function that actually processes "
"the request.  Note that this means that the handlers may start receiving the "
"file upload before the CSRF checks have been done. Example code::"
msgstr ""
"Также ``request.POST`` используется :class:`~django.middleware.csrf."
"CsrfViewMiddleware`, который включен по умолчанию. Это означает, что вы "
"должны использовать :func:`~django.views.decorators.csrf.csrf_exempt` для "
"представления, в котором собираетесь изменить обработчики загрузки.  Также "
"не забывайте воспользоваться  декоратором :func:`~django.views.decorators."
"csrf.csrf_protect` для функции, которая будет обрабатывать запрос.  Обратите "
"внимание, что получение файла может начаться перед выполнением CSRF "
"проверки. Например::"

# 5eedd4c1c00c4f4fb7bf7c29c93c576c
#~ msgid ":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"
#~ msgstr ":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"

# a4e0354315ee42e19a022ec97c348f23
#~ msgid ""
#~ "The maximum size, in bytes, for files that will be uploaded into memory. "
#~ "Files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be streamed "
#~ "to disk."
#~ msgstr ""
#~ "Максимальный размер файла, в байтах, который будет загружен в память. "
#~ "Файлы больше чем :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` будут загружены "
#~ "на диск."

# 403427a148764f52865c58e6bdfa304c
#~ msgid "Defaults to 2.5 megabytes."
#~ msgstr "Значение по умолчанию 2.5 мегабайта."

# b0add7689c644ae392ecb594cfd7ccaf
#~ msgid ":setting:`FILE_UPLOAD_TEMP_DIR`"
#~ msgstr ":setting:`FILE_UPLOAD_TEMP_DIR`"

# ba3c29498ed84ffab9f97933c6f3c366
#~ msgid ""
#~ "The directory where uploaded files larger than :setting:"
#~ "`FILE_UPLOAD_MAX_MEMORY_SIZE` will be stored."
#~ msgstr ""
#~ "Каталог, в который сохраняются загруженные файлы больше чем :setting:"
#~ "`FILE_UPLOAD_MAX_MEMORY_SIZE`."

# d4212b198e6b466eb79049d3174b3979
#~ msgid ""
#~ "Defaults to your system's standard temporary directory (i.e. ``/tmp`` on "
#~ "most Unix-like systems)."
#~ msgstr ""
#~ "По умолчанию - системная папка для временных файлов (например, ``/tmp`` "
#~ "на большинстве Unix-систем)."

# d5a49939360f419c9c3d865a4e0d1aa5
#~ msgid ":setting:`FILE_UPLOAD_PERMISSIONS`"
#~ msgstr ":setting:`FILE_UPLOAD_PERMISSIONS`"

# 91af59e672c945dc8f1a43372fb3f2dc
#, fuzzy
#~ msgid ""
#~ "The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For "
#~ "more information about what these modes mean, see the documentation for :"
#~ "func:`os.chmod`."
#~ msgstr ""
#~ "Числовое представление прав на файл (например, ``0644``), которые "
#~ "устанавливаются для загруженных файлов. Подробности можно прочитать в "
#~ "описании функции :func:`os.chmod`."

# 925b7a589eda495cbc690f5e18ee17be
#, fuzzy
#~ msgid ""
#~ "If this isn't given or is ``None``, you'll get operating-system dependent "
#~ "behavior. On most platforms, temporary files will have a mode of "
#~ "``0o600``, and files saved from memory will be saved using the system's "
#~ "standard umask."
#~ msgstr ""
#~ "Если не указана или равно ``None``, будет зависеть от системы, которую вы "
#~ "используете. В большинстве систем, временные файлы сохраняются с правами "
#~ "``0600``. Файлы сохраненные с памяти используют системное значение umask."

# 1f3f76486eb9431ca8ef2f30bc5cab69
#~ msgid ""
#~ "If you're not familiar with file modes, please note that the leading "
#~ "``0`` is very important: it indicates an octal number, which is the way "
#~ "that modes must be specified. If you try to use ``644``, you'll get "
#~ "totally incorrect behavior."
#~ msgstr ""
#~ "Если вы не знакомы с правами доступа, запомните что ``0`` очень важен: "
#~ "это указывает на восьмеричное число, которые используются для определения "
#~ "прав. Если вы укажите ``644``, все будет работать неправильно."

# e96947d7a3ec463c8b91f0d86353e3fb
#~ msgid "**Always prefix the mode with a 0.**"
#~ msgstr "**Всегда добавляйте 0 в начале.**"

# d5a49939360f419c9c3d865a4e0d1aa5
#, fuzzy
#~ msgid ":setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`"
#~ msgstr ":setting:`FILE_UPLOAD_PERMISSIONS`"

# 3dd20c2024f644d3bc756f413460576c
#~ msgid ":setting:`FILE_UPLOAD_HANDLERS`"
#~ msgstr ":setting:`FILE_UPLOAD_HANDLERS`"

# a14ced1f69a1414094a357c5305026bb
#, fuzzy
#~ msgid ""
#~ "The actual handlers for uploaded files. Changing this setting allows "
#~ "complete customization -- even replacement -- of Django's upload process."
#~ msgstr ""
#~ "Обработчик загрузки файлов. Переопределение этой настройки позволит вам "
#~ "полностью изменить процесс загрузки файлов в Django. Смотрите описание "
#~ "`upload handlers`_ ниже."

# 527fffbb13db402189b69591591ba352
#~ msgid ""
#~ "The final piece of the puzzle is handling the actual file data from :attr:"
#~ "`request.FILES <django.http.HttpRequest.FILES>`. Each entry in this "
#~ "dictionary is an ``UploadedFile`` object -- a simple wrapper around an "
#~ "uploaded file. You'll usually use one of these methods to access the "
#~ "uploaded content:"
#~ msgstr ""
#~ "Последняя часть головоломки -- обработка данных файлов из :attr:`request."
#~ "FILES <django.http.HttpRequest.FILES>`. Каждый элемент словаря является "
#~ "объектом ``UploadedFile`` -- простая обертка над загруженным файлом, "
#~ "которая содержит методы для доступа к загруженным данным:"

# d0a600dc158e4ef6861736fc53ae1fad
#~ msgid ""
#~ "Read the entire uploaded data from the file. Be careful with this method: "
#~ "if the uploaded file is huge it can overwhelm your system if you try to "
#~ "read it into memory. You'll probably want to use ``chunks()`` instead; "
#~ "see below."
#~ msgstr ""
#~ "Читает все загруженные данные из файла. Будьте осторожны с этим методом: "
#~ "если загруженный файл большой, загрузка его в память может сильно "
#~ "нагрузить вашу систему. Лучше использовать метод ``chunks()``, описанные "
#~ "ниже."

# 2d9978b87aa640c0af778d0b628f1852
#~ msgid ""
#~ "Returns ``True`` if the uploaded file is big enough to require reading in "
#~ "multiple chunks. By default this will be any file larger than 2.5 "
#~ "megabytes, but that's configurable; see below."
#~ msgstr ""
#~ "Возвращает ``True``, если загруженный файл достаточно большой, чтобы "
#~ "читать его по частям. По умолчанию это файл больше 2.5 мегабайт, но это "
#~ "можно настроить(смотрите ниже)."

# 5b6f68402de8432b812a30dbb4fe3f93
#~ msgid ""
#~ "A generator returning chunks of the file. If ``multiple_chunks()`` is "
#~ "``True``, you should use this method in a loop instead of ``read()``."
#~ msgstr ""
#~ "Генератор, который возвращает часть(chunk) файла. Если "
#~ "``multiple_chunks()`` равен ``True``, вы должны использовать этот метод в "
#~ "цикле вместо метода ``read()``."

# 6cfeb3ed05804b64a0bcb99e8be85951
#~ msgid ""
#~ "In practice, it's often easiest simply to use ``chunks()`` all the time; "
#~ "see the example below."
#~ msgstr ""
#~ "На практике, чаще всего проще всегда использовать метод ``chunks()``, "
#~ "смотрите пример ниже."

# 1ca5b87e1e914ee1a8d59b0f731906d0
#~ msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
#~ msgstr "Название загруженного файла (например, ``my_file.txt``)."

# 02f7126a69ec4e17b449cc7450f8c81d
#~ msgid "The size, in bytes, of the uploaded file."
#~ msgstr "Размер, в байтах, загруженного файла."

# fc27148b2975425aabfc1f373b2598bb
#~ msgid "Defaults to::"
#~ msgstr "По умолчанию::"

# af52caa564924e8ab9dfd50e45ea7fe1
#~ msgid ""
#~ "Which means \"try to upload to memory first, then fall back to temporary "
#~ "files.\""
#~ msgstr ""
#~ "Что означает \"попробуем сначала загрузить в память, а потом во временной "
#~ "файл.\""

# 55935377fd864cf4a874106a8b54c0aa
#~ msgid "``UploadedFile`` objects"
#~ msgstr "Объект ``UploadedFile``"

# 46074885a40643c3a26346efcfef5c1a
#~ msgid ""
#~ "In addition to those inherited from :class:`~django.core.files.File`, all "
#~ "``UploadedFile`` objects define the following methods/attributes:"
#~ msgstr ""
#~ "В дополнение к атрибутам и методам определенным в классе :class:`~django."
#~ "core.files.File`, базовом классе класса ``UploadedFile``, также "
#~ "дополнительно определены:"

# 58cfaa851c5d475592d63b7da1c0ff94
#~ msgid ""
#~ "The content-type header uploaded with the file (e.g. :mimetype:`text/"
#~ "plain` or :mimetype:`application/pdf`). Like any data supplied by the "
#~ "user, you shouldn't trust that the uploaded file is actually this type. "
#~ "You'll still need to validate that the file contains the content that the "
#~ "content-type header claims -- \"trust but verify.\""
#~ msgstr ""
#~ "\"Content-Type\" заголовок, переданный с загруженным файлом (например, :"
#~ "mimetype:`text/plain` или :mimetype:`application/pdf`). Как и всем данным "
#~ "предоставленным пользователям, вы не должны доверять этому значению. Вам "
#~ "по-прежнему необходимо проверять, что содержимое файла отвечает "
#~ "указанному \"Content-Type\" -- \"доверяй, но проверяй\"."

# 612cfb3d432d439998d71eba1ae2291f
#~ msgid ""
#~ "For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) "
#~ "supplied by the browser. Again, \"trust but verify\" is the best policy "
#~ "here."
#~ msgstr ""
#~ "Для файлов с MIME-типом :mimetype:`text/*`, кодировка (например, "
#~ "``utf8``) указанная браузером. Опять же, \"доверяй, но проверяй\"."

# f80310f355444fe3a59d62d246b1f62c
#~ msgid ""
#~ "Only files uploaded onto disk will have this method; it returns the full "
#~ "path to the temporary uploaded file."
#~ msgstr ""
#~ "Только файлы загруженные на диск будут содержать этот метод. Возвращает "
#~ "полный путь к временному файлу."

# e2c79ede8567425c85acfd8c2f4264c5
#~ msgid ""
#~ "Like regular Python files, you can read the file line-by-line simply by "
#~ "iterating over the uploaded file:"
#~ msgstr ""
#~ "Как и с обычным Python файлом, вы можете прочитать его содержимое строкой "
#~ "за строкой в цикле:"

# c42b85e2ed634b1388286ea6182a40df
#~ msgid ""
#~ "However, *unlike* standard Python files, :class:`UploadedFile` only "
#~ "understands ``\\n`` (also known as \"Unix-style\") line endings. If you "
#~ "know that you need to handle uploaded files with different line endings, "
#~ "you'll need to do so in your view."
#~ msgstr ""
#~ "Однако, *в отличии от* стандартного Python файла, :class:`UploadedFile` "
#~ "понимает только ``\\n`` (также известный как \"Unix-стиль\") перенос "
#~ "строки. Если вам необходимо обработать файл с разными стилями переноса "
#~ "строки, вы должны сделать это самостоятельно."

# eb91584715f84ef294e646264fba42de
#~ msgid "Writing custom upload handlers"
#~ msgstr "Создание собственного обработчика загрузки"

# 2415de6ac6c74746b2c3b8e70a0b3951
#~ msgid ""
#~ "All file upload handlers should be subclasses of ``django.core.files."
#~ "uploadhandler.FileUploadHandler``. You can define upload handlers "
#~ "wherever you wish."
#~ msgstr ""
#~ "Все обработчики загрузки файлов должны наследоваться от ``django.core."
#~ "files.uploadhandler.FileUploadHandler``. Вы можете определять их в любом "
#~ "модуле."

# bf9ce994ae2c42918a62e78e0052d6ff
#~ msgid "Required methods"
#~ msgstr "Обязательные методы"

# e7d9aa05fa69459a8e16ba31a13496fd
#~ msgid "Custom file upload handlers **must** define the following methods:"
#~ msgstr ""
#~ "Собственный обработчик загрузки файлов **должен** определять следующие "
#~ "методы:"

# c5e52ce212b84119b05a3fcadfd83758
#~ msgid "``FileUploadHandler.receive_data_chunk(self, raw_data, start)``"
#~ msgstr "``FileUploadHandler.receive_data_chunk(self, raw_data, start)``"

# 8891c43c58264084af2c373bdd9498a0
#~ msgid "Receives a \"chunk\" of data from the file upload."
#~ msgstr "Получение \"части\" данных загружаемого файла."

# 3def19e654af406abb9b58a7ca8858b3
#~ msgid "``raw_data`` is a byte string containing the uploaded data."
#~ msgstr "``raw_data`` -- байтовая строка с загружаемыми данными."

# 76f5ad1cda39444187b27a3ccffc64ec
#~ msgid ""
#~ "``start`` is the position in the file where this ``raw_data`` chunk "
#~ "begins."
#~ msgstr ""
#~ "``start`` -- указывает на расположения данных из ``raw_data`` в файле."

# 4c9cccc847c24a368f537eb0ce59e334
#~ msgid ""
#~ "The data you return will get fed into the subsequent upload handlers' "
#~ "``receive_data_chunk`` methods. In this way, one handler can be a \"filter"
#~ "\" for other handlers."
#~ msgstr ""
#~ "Данные, возвращаемые этим методом будут переданы в метод "
#~ "``receive_data_chunk`` следующих обработчиков. То есть один обработчик "
#~ "может быть \"фильтром\" для других."

# 5631126d68ac4be0bc57e4807896c985
#~ msgid ""
#~ "Return ``None`` from ``receive_data_chunk`` to short-circuit remaining "
#~ "upload handlers from getting this chunk. This is useful if you're storing "
#~ "the uploaded data yourself and don't want future handlers to store a copy "
#~ "of the data."
#~ msgstr ""
#~ "Верните ``None`` из ``receive_data_chunk``, если последующие обработчики "
#~ "не должны обрабатывать эти данные. Это может быть полезным, если данные "
#~ "сохраняются в вашем обработчике и вы не хотите, чтобы последующие "
#~ "сохраняли еще одну копию данных."

# 7392fe17c12f4f69bf2a0c94c4d0214f
#~ msgid ""
#~ "If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload "
#~ "will abort or the file will be completely skipped."
#~ msgstr ""
#~ "При вызове исключения ``StopUpload`` или ``SkipFile``, загрузка будет "
#~ "остановлена или файл будет полностью проигнорирован."

# 3c392a891845415eb5bf24ed68b9a29b
#~ msgid "``FileUploadHandler.file_complete(self, file_size)``"
#~ msgstr "``FileUploadHandler.file_complete(self, file_size)``"

# a45b2ffe69444aec8856f1a18c8be0c4
#~ msgid "Called when a file has finished uploading."
#~ msgstr "Вызывается после окончания загрузки файла."

# a31ad4d6c9614383968d5d9e7384bf01
#~ msgid ""
#~ "The handler should return an ``UploadedFile`` object that will be stored "
#~ "in ``request.FILES``. Handlers may also return ``None`` to indicate that "
#~ "the ``UploadedFile`` object should come from subsequent upload handlers."
#~ msgstr ""
#~ "Обработчик должен вернуть объект ``UploadedFile``, который будет добавлен "
#~ "в ``request.FILES``. Обработчик может вернуть ``None`` указав, что объект "
#~ "``UploadedFile`` должен быть получен из последующих обработчиков."

# 2999b5f7bcdc4849a11c5911fe7b86fc
#~ msgid "Optional methods"
#~ msgstr "Необязательные методы"

# 07d64797234846dcb72764fde4371994
#~ msgid ""
#~ "Custom upload handlers may also define any of the following optional "
#~ "methods or attributes:"
#~ msgstr ""
#~ "Собственный загрузчик файлов может определить следующие методы и атрибуты:"

# d80e7672ee6a450695f4fb2d0bb05aba
#~ msgid "``FileUploadHandler.chunk_size``"
#~ msgstr "``FileUploadHandler.chunk_size``"

# 84373936ba8941b48f32824329a1247f
#~ msgid ""
#~ "Size, in bytes, of the \"chunks\" Django should store into memory and "
#~ "feed into the handler. That is, this attribute controls the size of "
#~ "chunks fed into ``FileUploadHandler.receive_data_chunk``."
#~ msgstr ""
#~ "Размер, в байтах, \"части\" файла, которую Django должен сохранить в "
#~ "памяти и передать в обработчик. То есть, этот атрибут контролирует размер "
#~ "\"асти файла, которая передается в ``FileUploadHandler."
#~ "receive_data_chunk``."

# fd610497c3944078af7ac93d2923c6bc
#~ msgid ""
#~ "For maximum performance the chunk sizes should be divisible by ``4`` and "
#~ "should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are "
#~ "multiple chunk sizes provided by multiple handlers, Django will use the "
#~ "smallest chunk size defined by any handler."
#~ msgstr ""
#~ "Для максимальной производительности это значение должно быть кратным  "
#~ "``4`` и не превышать 2 GB (2\\ :sup:`31` байтов). Если несколько "
#~ "обработчик указывают разное значение, Django будет использовать самое "
#~ "маленькое."

# 924905416cb84e589729b00bc278a222
#~ msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
#~ msgstr "Значение по умолчанию 64*2\\ :sup:`10` байтов, или 64 KB."

# 71a1098cda324ace86ea6bf75d2aa768
#~ msgid ""
#~ "``FileUploadHandler.new_file(self, field_name, file_name, content_type, "
#~ "content_length, charset)``"
#~ msgstr ""
#~ "``FileUploadHandler.new_file(self, field_name, file_name, content_type, "
#~ "content_length, charset)``"

# d4c2214d4358428a952985fec66c79aa
#~ msgid ""
#~ "Callback signaling that a new file upload is starting. This is called "
#~ "before any data has been fed to any upload handlers."
#~ msgstr ""
#~ "Вызывает перед началом загрузки, до того, как данные будут переданы в "
#~ "один из обработчиков."

# fb3b866e71ba42c0a3e5e4814a2ed72b
#~ msgid "``field_name`` is a string name of the file ``<input>`` field."
#~ msgstr "``field_name`` строковое название поля ``<input>``."

# 4955f27aa08d4addb2b6da4b092c5a6b
#~ msgid ""
#~ "``file_name`` is the unicode filename that was provided by the browser."
#~ msgstr "``file_name`` название файла в unicode, предоставленное браузером."

# a773a1ad93ac4818b3f447250819ae55
#~ msgid ""
#~ "``content_type`` is the MIME type provided by the browser -- E.g. "
#~ "``'image/jpeg'``."
#~ msgstr ""
#~ "``content_type`` -- MIME-тип, предоставленный браузером -- например, "
#~ "``'image/jpeg'``."

# 9f3aadf534e54f998bcc4e0182c65e27
#~ msgid ""
#~ "``content_length`` is the length of the image given by the browser. "
#~ "Sometimes this won't be provided and will be ``None``."
#~ msgstr ""
#~ "``content_length`` -- размер изображения, предоставленный браузером. "
#~ "Может быть не предоставлен и значение будет равным ``None``."

# afc4e81d79db4fa5a1a5744f46a19052
#~ msgid ""
#~ "``charset`` is the character set (i.e. ``utf8``) given by the browser. "
#~ "Like ``content_length``, this sometimes won't be provided."
#~ msgstr ""
#~ "``charset`` -- кодировка (например, ``utf8``), предоставленная браузером. "
#~ "Как и ``content_length`` может быть пустым."

# ea46f36d3a9a468d8993b0c84b680817
#~ msgid ""
#~ "This method may raise a ``StopFutureHandlers`` exception to prevent "
#~ "future handlers from handling this file."
#~ msgstr ""
#~ "Этот метод может вызвать исключение ``StopFutureHandlers`` и остановить "
#~ "последующую обработку файла всем обработчиками."

# 0138561c4b414f1ab47c85c5893a8202
#~ msgid "``FileUploadHandler.upload_complete(self)``"
#~ msgstr "``FileUploadHandler.upload_complete(self)``"

# 89b1e939596c4f6e98fbb4019bc12b21
#~ msgid "Callback signaling that the entire upload (all files) has completed."
#~ msgstr "Вызывается после полной загрузки всех файлов."

# 1eba6bc56ca34aebbfc1f083435e5b69
#~ msgid ""
#~ "``FileUploadHandler.handle_raw_input(self, input_data, META, "
#~ "content_length, boundary, encoding)``"
#~ msgstr ""
#~ "``FileUploadHandler.handle_raw_input(self, input_data, META, "
#~ "content_length, boundary, encoding)``"

# 2e297edb2ab34f44ae16b098b97d01fd
#~ msgid ""
#~ "Allows the handler to completely override the parsing of the raw HTTP "
#~ "input."
#~ msgstr "Позволяет полностью переопределить обработку \"сырых\" HTTP-данных."

# 904572a138914bd2917b062718b69a54
#~ msgid "``input_data`` is a file-like object that supports ``read()``-ing."
#~ msgstr "``input_data`` -- объект с интерфейсом файла с данными."

# 54ceb3925f8c4c5cab2e0bb3e01725b7
#~ msgid "``META`` is the same object as ``request.META``."
#~ msgstr "``META`` -- объект из ``request.META``."

# 1adf8dfae7f843128dcbbf5fbe6655a5
#~ msgid ""
#~ "``content_length`` is the length of the data in ``input_data``. Don't "
#~ "read more than ``content_length`` bytes from ``input_data``."
#~ msgstr ""
#~ "``content_length`` -- размер данных из ``input_data``. Не читайте больше "
#~ "чем ``content_length`` байтов из ``input_data``."

# f873ea6df22b4f89aca0d87e0367784d
#~ msgid "``boundary`` is the MIME boundary for this request."
#~ msgstr "``boundary`` -- \"MIME boundary\" запроса."

# 24a2f387ee974ec1b8582188dc1a8d1c
#~ msgid "``encoding`` is the encoding of the request."
#~ msgstr "``encoding`` -- кодировка запроса."

# a7a701072e984d0eb83bfa0079d67e62
#~ msgid ""
#~ "Return ``None`` if you want upload handling to continue, or a tuple of "
#~ "``(POST, FILES)`` if you want to return the new data structures suitable "
#~ "for the request directly."
#~ msgstr ""
#~ "Верните ``None`` для продолжения обработки, или кортеж ``(POST, FILES)``, "
#~ "который будет добавлен в объект запроса."
