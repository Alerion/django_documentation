# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2017-11-16 15:43+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 024deeab8ad54ef7bfb83e0b2fcfbb18
#: ../../topics/http/views.txt:3
msgid "Writing views"
msgstr "Создание представлений"

# 3054ece438c34a6aac92ab7f5fb98a2f
#: ../../topics/http/views.txt:5
msgid ""
"A view function, or *view* for short, is simply a Python function that takes "
"a Web request and returns a Web response. This response can be the HTML "
"contents of a Web page, or a redirect, or a 404 error, or an XML document, "
"or an image . . . or anything, really. The view itself contains whatever "
"arbitrary logic is necessary to return that response. This code can live "
"anywhere you want, as long as it's on your Python path. There's no other "
"requirement--no \"magic,\" so to speak. For the sake of putting the code "
"*somewhere*, the convention is to put views in a file called ``views.py``, "
"placed in your project or application directory."
msgstr ""
"Функция представления, или коротко *представление* -- это функция Python, "
"которая принимает Web-запрос и возвращает Web-ответ. Ответом может быть HTML-"
"содержимое страницы, или перенаправление, или 404 ошибка, или XML-документ, "
"или изображение . . .  что угодно. Представление содержит всю необходимую "
"логику для создания ответа. Этот код может находиться где угодно, главное, "
"чтобы он находился в ``PYTHON_PATH``. Никаких других требований нет -- "
"никакой \"магии\". Несмотря на возможность расположить код представлений "
"*где угодно*, принято держать его в файле ``views.py``, который находится в "
"каталоге проекта или приложения."

# 1e5367f89dc144659e03dbcb2c2854aa
#: ../../topics/http/views.txt:16
msgid "A simple view"
msgstr "Простое представление"

# 2ba3491ae5114742847bc6838b00a29d
#: ../../topics/http/views.txt:18
msgid ""
"Here's a view that returns the current date and time, as an HTML document::"
msgstr ""
"Вот пример простого представления, которое отображает текущую дату и время, "
"как документ HTML::"

# 18d5a840228f479f82f87d24ef5bd91b
#: ../../topics/http/views.txt:28
msgid "Let's step through this code one line at a time:"
msgstr "Давайте проанализируем код строка за строкой:"

# 23e4a8ce1d124eba9af3c38b5078cae5
#: ../../topics/http/views.txt:30
msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the :mod:"
"`django.http` module, along with Python's ``datetime`` library."
msgstr ""
"Сначала мы импортировали класс :class:`~django.http.HttpResponse` из модуля :"
"mod:`django.http` и библиотеку Python ``datetime``."

# 84baa25adf3b4e15a7e4ce5c3cc35d9e
#: ../../topics/http/views.txt:33
msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""
"Теперь определим функцию ``current_datetime``. Это функция представления. "
"Каждая функция представления принимает объект :class:`~django.http."
"HttpRequest` первым аргументом, который обычно называют ``request``."

# 02fc7a9baf374c6f96ca4da334c1a8c6
#: ../../topics/http/views.txt:37
msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling "
"it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""
"Название функции может быть каким угодно, нет никаких конкретных правил для "
"именования. Мы назвали функцию ``current_datetime``."

# 9a7e6c48a9bc4fb59381bd04c0b56d33
#: ../../topics/http/views.txt:42
msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an :"
"class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""
"Представление возвращает объект :class:`~django.http.HttpResponse`, который "
"содержит сгенерированный ответ. Каждая функция представления должна "
"возвращать объект :class:`~django.http.HttpResponse`. (Есть исключения, но "
"мы расскажем об этом далее.)"

# ce492af3e84147b5acb0a6c67c9db51e
#: ../../topics/http/views.txt:47
msgid "Django's Time Zone"
msgstr "Часовые пояса в Django"

# 46ef2a032f6f4af08fc1c649441fd6ae
#: ../../topics/http/views.txt:49
msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/"
"Chicago``. This probably isn't where you live, so you might want to change "
"it in your settings file."
msgstr ""
"Django содержит настройку :setting:`TIME_ZONE` равную по умолчанию ``America/"
"Chicago``. Возможно это не там, где вы живете, вы можете изменить эту "
"настройку в файле настройки."

# f5b2fc4fc261481c98d795b366c1c177
#: ../../topics/http/views.txt:54
msgid "Mapping URLs to views"
msgstr "Сопоставление представления с URL"

# 861c00841c704545851bccb333a2964a
#: ../../topics/http/views.txt:56
msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need "
"to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""
"Итак, напомним, функция представления возвращает HTML-страницу, которая "
"содержит текущую дату и время. Чтобы привязать это представление к "
"определенному URL-у, необходимо создать *URLconf*; подробности смотрите в  "
"разделе :doc:`/topics/http/urls`."

# 55f153f1b0b148419b4fd82546ff8d62
#: ../../topics/http/views.txt:61
msgid "Returning errors"
msgstr "Возвращение ошибок"

# cb200bf5b79d454fa899a878622e9315
#: ../../topics/http/views.txt:63
msgid ""
"Returning HTTP error codes in Django is easy. There are subclasses of :class:"
"`~django.http.HttpResponse` for a number of common HTTP status codes other "
"than 200 (which means *\"OK\"*). You can find the full list of available "
"subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` "
"documentation.  Just return an instance of one of those subclasses instead "
"of a normal :class:`~django.http.HttpResponse` in order to signify an error. "
"For example::"
msgstr ""
"Возвращение HTTP ошибок в Django очень просто. Существует ряд подклассов :"
"class:`~django.http.HttpResponse` для распространенных HTTP-состояний, "
"отличных от 200 (что означает *\"OK\"*). Вы можете посмотреть полный список "
"доступных подклассов в разделе о :ref:`HTTP запросах и ответах <ref-"
"httpresponse-subclasses>`.  Просто верните экземпляр необходимого подкласса "
"вместо :class:`~django.http.HttpResponse`. Например::"

# 105cff04ac214a61bea6114022bf93dc
#: ../../topics/http/views.txt:80
msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in "
"the :class:`~django.http.HttpResponse` documentation, you can also pass the "
"HTTP status code into the constructor for :class:`~django.http.HttpResponse` "
"to create a return class for any status code you like. For example::"
msgstr ""
"Не существует подкласса для всех HTTP-состояний, так как многие из них редко "
"используются. Однако, как указанно в описании :class:`~django.http."
"HttpResponse`, вы можете передать код HTTP-состояния в конструктор :class:"
"`~django.http.HttpResponse`. Например::"

# c7cada90c62640dca28fc170b791c65c
#: ../../topics/http/views.txt:94
msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""
"Так как ошибка 404 самая используемая HTTP-ошибка, существует простой способ "
"работы с такими ошибками."

# d299f52d5e7543efaf5eb0755dcea2c1
#: ../../topics/http/views.txt:98
msgid "The ``Http404`` exception"
msgstr "Исключение ``Http404``"

# 613a3703b6ff4109b2ce90301446f513
#: ../../topics/http/views.txt:102
msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`, "
"you're responsible for defining the HTML of the resulting error page::"
msgstr ""
"Если вы возвращаете ошибку :class:`~django.http.HttpResponseNotFound`, вы "
"должны добавить HTML содержимое страницы с ошибкой::"

# bbe0c4d934f44b7b9b47985b04bbce49
#: ../../topics/http/views.txt:107
msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error "
"page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""
"Для удобства и чтобы все страницы для ошибки 404 выглядели одинаково, Django "
"предоставляет исключение ``Http404``. Если вы вызываете исключение "
"``Http404`` в любой момент обработки запроса, Django перехватит его и вернет "
"стандартную страницу 404 ошибки вашего проекта вместе с 404 кодом состояния "
"HTTP."

# cf1e264f964541a3a57ac36a06485fec
#: ../../topics/http/views.txt:112
msgid "Example usage::"
msgstr "Пример использования::"

#: ../../topics/http/views.txt:125
msgid ""
"In order to show customized HTML when Django returns a 404, you can create "
"an HTML template named ``404.html`` and place it in the top level of your "
"template tree. This template will then be served when :setting:`DEBUG` is "
"set to ``False``."
msgstr ""
"Чтобы переопределить страницу, которую Django возвращает для 404 ошибки, вы "
"можете создать HTML шаблон с названием ``404.html`` в корне каталога с "
"шаблонами. Этот шаблон будет использоваться, если настройка :setting:`DEBUG` "
"равна ``False``."

#: ../../topics/http/views.txt:130
msgid ""
"When :setting:`DEBUG` is ``True``, you can provide a message to ``Http404`` "
"and it will appear in the standard 404 debug template. Use these messages "
"for debugging purposes; they generally aren't suitable for use in a "
"production 404 template."
msgstr ""
"Если указать сообщение в исключении ``Http404``, оно появится на 404 "
"странице при :setting:`DEBUG` равном ``True``. Используйте эти сообщения для "
"отладки; сообщения не отображаются при отключенной отладке."

# 2a11ccc6e9ad49089f04f6985fe2fbe1
#: ../../topics/http/views.txt:138
msgid "Customizing error views"
msgstr "Настройка представления обрабатывающего ошибки"

# 2a00399ca3274c7a8008f5464138c565
#: ../../topics/http/views.txt:140
msgid ""
"The default error views in Django should suffice for most Web applications, "
"but can easily be overridden if you need any custom behavior. Simply specify "
"the handlers as seen below in your URLconf (setting them anywhere else will "
"have no effect)."
msgstr ""
"Встроенных представлений для обработки ошибок хватит для большинства Web-"
"приложенийю Но если вы хотите переопределить их, добавьте ваше обработчики в "
"главный URLconf(добавление куда-либо еще не сработает)."

# 9dd4a5f329ce4596afbb2d55e899969d
#: ../../topics/http/views.txt:145
msgid ""
"The :func:`~django.views.defaults.page_not_found` view is overridden by :"
"data:`~django.conf.urls.handler404`::"
msgstr ""
":func:`~django.views.defaults.page_not_found` переопределяется :data:"
"`~django.conf.urls.handler404`::"

# 23b77216bd834ffc98d226d523646b79
#: ../../topics/http/views.txt:150
msgid ""
"The :func:`~django.views.defaults.server_error` view is overridden by :data:"
"`~django.conf.urls.handler500`::"
msgstr ""
":func:`~django.views.defaults.server_error` переопределяется :data:`~django."
"conf.urls.handler500`::"

# fc1890c71ba74b8facc69eae7291af54
#: ../../topics/http/views.txt:155
msgid ""
"The :func:`~django.views.defaults.permission_denied` view is overridden by :"
"data:`~django.conf.urls.handler403`::"
msgstr ""
":func:`~django.views.defaults.permission_denied` переопределяется :data:"
"`~django.conf.urls.handler403`::"

# 5b41069254894373bda13b84f3e859df
#: ../../topics/http/views.txt:160
msgid ""
"The :func:`~django.views.defaults.bad_request` view is overridden by :data:"
"`~django.conf.urls.handler400`::"
msgstr ""
":func:`~django.views.defaults.bad_request` переопределяется :data:`~django."
"conf.urls.handler400`::"

#: ../../topics/http/views.txt:167
msgid ""
"Use the :setting:`CSRF_FAILURE_VIEW` setting to override the CSRF error view."
msgstr ""
"Чтобы переопределить представление, которое обрабатывает ошибку CSRF, "
"используйте настройку :setting:`CSRF_FAILURE_VIEW`."

# 9df37dd025db4cc3ab33fd8421a9465f
#~ msgid ""
#~ "In order to use the ``Http404`` exception to its fullest, you should "
#~ "create a template that is displayed when a 404 error is raised. This "
#~ "template should be called ``404.html`` and located in the top level of "
#~ "your template tree."
#~ msgstr ""
#~ "Чтобы использовать ``Http404`` исключение, вам необходимо создать шаблон "
#~ "для станицы с ошибкой. Этот шаблон должен называться ``404.html`` и "
#~ "находиться в корневом каталоге шаблонов."

# 47c9adc2659f4512ad156aef5aad0c5d
#~ msgid "The 404 (page not found) view"
#~ msgstr "Представление обрабатывающее 404 ошибку(страница не найдена)"

# b9ed7d9a68ae4f578f2a666150de9216
#~ msgid ""
#~ "When you raise :exc:`~django.http.Http404` from within a view, Django "
#~ "loads a special view devoted to handling 404 errors. By default, it's the "
#~ "view :func:`django.views.defaults.page_not_found`, which either produces "
#~ "a very simple \"Not Found\" message or loads and renders the template "
#~ "``404.html`` if you created it in your root template directory."
#~ msgstr ""
#~ "Когда вы вызываете :exc:`~django.http.Http404` исключение, Django "
#~ "загружает специальное представление, назначение которого обрабатывать 404 "
#~ "ошибку. По умолчанию, это функция  :func:`django.views.defaults."
#~ "page_not_found`, которая возвращает сообщение \"Not Found\" или загружает "
#~ "и выполняет шаблон  ``404.html``, если вы его создали в корне каталога с "
#~ "шаблонами."

# 66754b74d6c348baa5bb4adf1eaf1d29
#~ msgid ""
#~ "The default 404 view will pass one variable to the template: "
#~ "``request_path``, which is the URL that resulted in the error."
#~ msgstr ""
#~ "Представление для обработки 404 ошибки передает в шаблон одну переменную: "
#~ "``request_path``, значение которой URL, вернувший ошибку."

# 19d24f75a24e49cfa4b075696068b61c
#~ msgid ""
#~ "Behind the scenes, Django determines the 404 view by looking for "
#~ "``handler404`` in your root URLconf, and falling back to ``django.views."
#~ "defaults.page_not_found`` if you did not define one."
#~ msgstr ""
#~ "При 404 ошибке Django ищет функцию ``handler404`` в URLconf, если она не "
#~ "найден - использует ``django.views.defaults.page_not_found``."

# 8324afecf36c41f88b3676b4cad310fc
#~ msgid "Three things to note about 404 views:"
#~ msgstr ""
#~ "Три вещи, которые необходимо знать о представлении, обрабатывающем 404 "
#~ "ошибку:"

# 382a1c6a66d8416281acefc949537305
#~ msgid ""
#~ "The 404 view is also called if Django doesn't find a match after checking "
#~ "every regular expression in the URLconf."
#~ msgstr ""
#~ "404-представление вызывается, если Django не находит подходящего URL-"
#~ "шаблона в URLconf."

# 8422486c1d4e4906b3c0971e95fdc4b4
#~ msgid ""
#~ "The 404 view is passed a :class:`~django.template.RequestContext` and "
#~ "will have access to variables supplied by your :setting:"
#~ "`TEMPLATE_CONTEXT_PROCESSORS` setting (e.g., ``MEDIA_URL``)."
#~ msgstr ""
#~ "Представление обрабатывающее 404 ошибку использует :class:`~django."
#~ "template.RequestContext`, и в шаблоне будут доступные все переменные, "
#~ "добавленные процессорами контекста из настройки :setting:"
#~ "`TEMPLATE_CONTEXT_PROCESSORS` (например, ``MEDIA_URL``)."

# b2f3cbce988748638f1a038cb35d7201
#~ msgid ""
#~ "If :setting:`DEBUG` is set to ``True`` (in your settings module), then "
#~ "your 404 view will never be used, and your URLconf will be displayed "
#~ "instead, with some debug information."
#~ msgstr ""
#~ "Если :setting:`DEBUG` установлен в ``True`` (в настройках проекта), "
#~ "представление для обработки 404 ошибки никогда не будет использовано, и "
#~ "будет показан URLconf с отладочной информацией."

# e7d619aba2dd4f8c90ec5e0efeb08aeb
#~ msgid "The 500 (server error) view"
#~ msgstr "Представление обрабатывающее 500 ошибку(ошибка сервера)"

# ad53ede3b1e549c1b30c04086d5bd69e
#~ msgid ""
#~ "Similarly, Django executes special-case behavior in the case of runtime "
#~ "errors in view code. If a view results in an exception, Django will, by "
#~ "default, call the view ``django.views.defaults.server_error``, which "
#~ "either produces a very simple \"Server Error\" message or loads and "
#~ "renders the template ``500.html`` if you created it in your root template "
#~ "directory."
#~ msgstr ""
#~ "Кроме того, Django вызывает определенный обработчик и при исключении в "
#~ "коде. Если представление вызовет исключение, Django по умолчанию вызовет "
#~ "представление ``django.views.defaults.server_error``, которое вернет "
#~ "сообщение \"Server Error\" или загрузит и вернет шаблон ``500.html``, "
#~ "если такой существует."

# 7486bc647a6f421bba460f59dad1ad5f
#~ msgid ""
#~ "The default 500 view passes no variables to the ``500.html`` template and "
#~ "is rendered with an empty ``Context`` to lessen the chance of additional "
#~ "errors."
#~ msgstr ""
#~ "Представление обрабатывающее ошибку 500 не передает переменных в шаблон и "
#~ "использует ``Context``, чтобы избежать дополнительных ошибок."

# a8ad1444096647f8b0bdf3dcc57ef842
#~ msgid ""
#~ "This ``server_error`` view should suffice for 99% of Web applications, "
#~ "but if you want to override the view, you can specify :data:`~django.conf."
#~ "urls.handler500` in your root URLconf, like so::"
#~ msgstr ""
#~ "Представления ``server_error`` хватит для 99% Web-приложений, но если вы "
#~ "хотите переопределить его, добавьте функцию :data:`~django.conf.urls."
#~ "handler500` в URLconf, например::"

# 50207fec8dc843578664980488deefd4
#~ msgid ""
#~ "Behind the scenes, Django determines the 500 view by looking for "
#~ "``handler500`` in your root URLconf, and falling back to ``django.views."
#~ "defaults.server_error`` if you did not define one."
#~ msgstr ""
#~ "При 500 ошибке Django ищет функцию ``handler500`` в URLconf, если она не "
#~ "найден - использует ``django.views.defaults.server_error``."

# 3d72f0fc154b45d9af275f84e85536e7
#~ msgid "One thing to note about 500 views:"
#~ msgstr ""
#~ "Одна вещь необходимо знать о представлении обрабатывающем 500 ошибку:"

# b3155f17ca174dc59770fa09428ee0f6
#~ msgid ""
#~ "If :setting:`DEBUG` is set to ``True`` (in your settings module), then "
#~ "your 500 view will never be used, and the traceback will be displayed "
#~ "instead, with some debug information."
#~ msgstr ""
#~ "Если :setting:`DEBUG` установлен в ``True`` (в настройках проекта), "
#~ "представление для обработки 500 ошибки никогда не будет использовано, и "
#~ "будет показан стек вызовов с отладочной информацией."

# 8c5c1dc9ffea40908ae959335f32cc4b
#~ msgid "The 403 (HTTP Forbidden) view"
#~ msgstr "Представление обрабатывающее 403 ошибку(запрещено)"

# 66652edaa0b24e4cbd65702f2317f654
#~ msgid ""
#~ "In the same vein as the 404 and 500 views, Django has a view to handle "
#~ "403 Forbidden errors. If a view results in a 403 exception then Django "
#~ "will, by default, call the view ``django.views.defaults."
#~ "permission_denied``."
#~ msgstr ""
#~ "Как и для 404 и 500 ошибок, Django вызывает представление для обработки "
#~ "403 ошибки. Если представление вызовет 403 исключение, Django по "
#~ "умолчанию выполнит представление ``django.views.defaults."
#~ "permission_denied``."

# 107570fa640e4af9b550ab65e12c1aea
#~ msgid ""
#~ "This view loads and renders the template ``403.html`` in your root "
#~ "template directory, or if this file does not exist, instead serves the "
#~ "text \"403 Forbidden\", as per :rfc:`2616` (the HTTP 1.1 Specification)."
#~ msgstr ""
#~ "Это представление загружает и выполняет шаблон ``403.html`` из корневом "
#~ "каталоге шаблонов, или, если он не существует, вернет текст \"403 "
#~ "Forbidden\", в соответствии с :rfc:`2616` (спецификация HTTP 1.1)."

# 8c7b09d2289547a08b2a5aa684094ce7
#~ msgid ""
#~ "``django.views.defaults.permission_denied`` is triggered by a :exc:"
#~ "`~django.core.exceptions.PermissionDenied` exception. To deny access in a "
#~ "view you can use code like this::"
#~ msgstr ""
#~ "``django.views.defaults.permission_denied`` вызывается при исключении :"
#~ "exc:`~django.core.exceptions.PermissionDenied`. Ограничить доступ вы "
#~ "можете следующим образом::"

# e7d619aba2dd4f8c90ec5e0efeb08aeb
#~ msgid "The 400 (bad request) view"
#~ msgstr "Представление обрабатывающее 400 ошибку(неверный запрос)"

# ba142d4d2ec54ae0881967a1a7f46706
#~ msgid ""
#~ "When a :exc:`~django.core.exceptions.SuspiciousOperation` is raised in "
#~ "Django, it may be handled by a component of Django (for example resetting "
#~ "the session data). If not specifically handled, Django will consider the "
#~ "current request a 'bad request' instead of a server error."
#~ msgstr ""
#~ "Если Django взывает исключение :exc:`~django.core.exceptions."
#~ "SuspiciousOperation`, оно может быть обработано другими компонентами "
#~ "(например, будет сброшены данные сессии). Если исключение не обработано, "
#~ "Django пометит запрос как неверный('bad request') вместо вызова ошибки "
#~ "сервера."

# e60e58bd137b49e78a3948f7be8c94da
#~ msgid ""
#~ "``django.views.defaults.bad_request``, is otherwise very similar to the "
#~ "``server_error`` view, but returns with the status code 400 indicating "
#~ "that the error condition was the result of a client operation."
#~ msgstr ""
#~ "``django.views.defaults.bad_request`` очень похоже на представление "
#~ "``server_error``, но возвращает 400 ответ, означающий, что ошибка вызвана "
#~ "на стороне клиента."

# a8ad1444096647f8b0bdf3dcc57ef842
#~ msgid ""
#~ "Like ``server_error``, the default ``bad_request`` should suffice for 99% "
#~ "of Web applications, but if you want to override the view, you can "
#~ "specify :data:`~django.conf.urls.handler400` in your root URLconf, like "
#~ "so::"
#~ msgstr ""
#~ "Как и ``server_error``, стандартного ``bad_request`` хватит для 99% Web-"
#~ "приложений, но если вы хотите переопределить его, добавьте функцию :data:"
#~ "`~django.conf.urls.handler400` в главный URLconf, например::"

# 6bbadc66d75046bc892ad654e570a0cc
#~ msgid ""
#~ "``bad_request`` views are also only used when :setting:`DEBUG` is "
#~ "``False``."
#~ msgstr ""
#~ "``bad_request`` используется только при :setting:`DEBUG` равном ``False``."
