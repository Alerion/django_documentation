# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2016-03-22 14:56+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 75c3b35c3f9543a0af67100a0a1d4336
#: ../../topics/email.txt:3
msgid "Sending email"
msgstr "Отправка электронных писем"

# abb84d9d5f304305ac148297fc62636f
#: ../../topics/email.txt:8
msgid ""
"Although Python makes sending email relatively easy via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to make it easy to test "
"email sending during development, and to provide support for platforms that "
"can't use SMTP."
msgstr ""
"Хотя Python позволяет легко отправлять электронные письма с помощью модуля :"
"mod:`smtplib`, Django предоставляет несколько дополнительных функций. Они "
"позволяют быстро отправлять письма, легко отлаживать оправку при разработке, "
"и предоставляют поддержку окружений, которые не могут использовать SMTP."

# 7a395d773e6d42a5bbb4e4f258b42a42
#: ../../topics/email.txt:14
msgid "The code lives in the ``django.core.mail`` module."
msgstr "Код находится в модуле ``django.core.mail``."

# c84c7c6129314962aa107410ffa6ab12
#: ../../topics/email.txt:17
msgid "Quick example"
msgstr "Простой пример"

# fe440809a03b4dd889fd9bae94fcbbbf
#: ../../topics/email.txt:19
msgid "In two lines::"
msgstr "В две строки кода::"

# 624d777888e34b8f8ae92495571460eb
#: ../../topics/email.txt:31
msgid ""
"Mail is sent using the SMTP host and port specified in the :setting:"
"`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:"
"`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are "
"used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` "
"and :setting:`EMAIL_USE_SSL` settings control whether a secure connection is "
"used."
msgstr ""
"Письмо отправлено через SMTP хост и порт, которые указаны в настройках :"
"setting:`EMAIL_HOST` и :setting:`EMAIL_PORT`. Настройки :setting:"
"`EMAIL_HOST_USER` и :setting:`EMAIL_HOST_PASSWORD`, если указаны, "
"используются для авторизации на SMTP сервере, а настройки :setting:"
"`EMAIL_USE_TLS` и :setting:`EMAIL_USE_SSL` указывают использовать ли "
"безопасное соединение."

# d5e188f25ed8478ca3d8c97edaa6bcf5
#: ../../topics/email.txt:40
msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the "
"value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""
"При отправке письма через ``django.core.mail`` будет использоваться "
"кодировка из :setting:`DEFAULT_CHARSET`."

# e80861d4396445b0a2dd772b17d89b0b
#: ../../topics/email.txt:44
#, fuzzy
msgid "``send_mail()``"
msgstr "send_mail()"

# 10f02ee084f241518812f6561c98f23c
#: ../../topics/email.txt:48
msgid ""
"The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""
"Самый простой способ отправить письмо -- использовать ``django.core.mail."
"send_mail()``."

# 0c4b0cae1c394efdb2dbbe6a75ff0fbe
#: ../../topics/email.txt:51
msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr ""
"Параметры ``subject``, ``message``, ``from_email`` и ``recipient_list`` "
"являются обязательными."

# db834a0f152d42a8ad0949c0dd84a7c9
#: ../../topics/email.txt:54
msgid "``subject``: A string."
msgstr "``subject``: строка."

# f8eaef5274a64456a6ffd5deb2b88479
#: ../../topics/email.txt:55
msgid "``message``: A string."
msgstr "``message``: строка."

# 49a990cb8a294fbe8b025f150c226fd1
#: ../../topics/email.txt:56
msgid "``from_email``: A string."
msgstr "``from_email``: строка."

# 3baef2f9f7db4ddb9f13d6d14609091e
#: ../../topics/email.txt:57
msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of "
"``recipient_list`` will see the other recipients in the \"To:\" field of the "
"email message."
msgstr ""
"``recipient_list``: список строк, каждая является email. Каждый получатель "
"из ``recipient_list`` будет видеть остальных получателей в поле \"To:\" "
"письма."

# 97f3848173804f1ea4137f5e6a99a9fc
#: ../../topics/email.txt:60
msgid ""
"``fail_silently``: A boolean. If it's ``False``, ``send_mail`` will raise "
"an :exc:`smtplib.SMTPException`. See the :mod:`smtplib` docs for a list of "
"possible exceptions, all of which are subclasses of :exc:`~smtplib."
"SMTPException`."
msgstr ""
"``fail_silently``: булево. При ``False`` ``send_mail`` вызовет :exc:`smtplib."
"SMTPException`. Смотрите документацию :mod:`smtplib`, чтобы узнать список "
"всех ошибок, каждый из которых наследуется от :exc:`~smtplib.SMTPException`."

# 441e3fbf84114af9b119bda16d2e5359
#: ../../topics/email.txt:64
msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_USER` setting."
msgstr ""
"``auth_user``: необязательное имя пользователя, которое используется при "
"авторизации на SMTP сервере. Если не указано, Django будет использовать "
"значение :setting:`EMAIL_HOST_USER`."

# 327191bdddc64a699042234db4133bd8
#: ../../topics/email.txt:67
msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_PASSWORD` setting."
msgstr ""
"``auth_password``: необязательный пароль, который используется при "
"авторизации на SMTP сервере. Если не указано, Django будет использовать "
"значение :setting:`EMAIL_HOST_PASSWORD`."

# 4b0ce352ade94a9299826d7a628bd134
#: ../../topics/email.txt:70
msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr ""
"``connection``: необязательный бэкенд, который будет использоваться для "
"отправки письма. Если не указан, будет использоваться бэкенд по умолчанию. "
"Смотрите раздел о :ref:`бэкендах для отправки электронной почты <topic-email-"
"backends>`."

# 3b4547c7c54642b9a72da3e35eb0ccb2
#: ../../topics/email.txt:74
msgid ""
"``html_message``: If ``html_message`` is provided, the resulting email will "
"be a :mimetype:`multipart/alternative` email with ``message`` as the :"
"mimetype:`text/plain` content type and ``html_message`` as the :mimetype:"
"`text/html` content type."
msgstr ""
"``html_message``: если ``html_message`` указано, письмо будет с :mimetype:"
"`multipart/alternative`, и будет содержать ``message`` с типом :mimetype:"
"`text/plain`, и ``html_message`` с типом :mimetype:`text/html`."

# 444aa32f5d594080a8e5b4d9a47e96b0
#: ../../topics/email.txt:79
msgid ""
"The return value will be the number of successfully delivered messages "
"(which can be ``0`` or ``1`` since it can only send one message)."
msgstr ""
"Возвращает количество успешно отправленных писем (которое будет ``0`` или "
"``1``, т.к. функция отправляет только одно письмо)."

# a847c5281fbf464d962eb80b02099d6a
#: ../../topics/email.txt:83
#, fuzzy
msgid "``send_mass_mail()``"
msgstr "send_mass_mail()"

# 399f7145b96c4895b07d20274bd67da1
#: ../../topics/email.txt:87
msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""
"``django.core.mail.send_mass_mail()`` используется для массовой рассылки "
"электронных писем."

# d3cd64024ef945f18627ef1e9c22a91b
#: ../../topics/email.txt:89
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr "``datatuple`` -- кортеж, каждый элемент которого следующего формата::"

# 896fab30d5224c728e409dcf7733afb7
#: ../../topics/email.txt:93
msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""
"``fail_silently``, ``auth_user`` и ``auth_password`` аналогичны параметрам :"
"meth:`~django.core.mail.send_mail()`."

# 6edb20d0c33049c39fa1ba3577cab9c2
#: ../../topics/email.txt:96
msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr ""
"Каждый элемент ``datatuple`` соответствует отдельному письму. Как и для :"
"meth:`~django.core.mail.send_mail()`, получатели из одного списка "
"``recipient_list`` увидят всех остальных в поле \"To:\" письма."

# 63fbb57ab07f469793e97ef95bbf9fa4
#: ../../topics/email.txt:101
msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr ""
"Например, следующий код отправит два отдельных письма двум отдельным спискам "
"получателей. Однако, будет использоваться одно подключения к почтовому "
"серверу::"

# 59e68d2c08a74219a4acffff32a4996f
#: ../../topics/email.txt:109
msgid "The return value will be the number of successfully delivered messages."
msgstr "Возвращает количество успешно отправленных писем."

# 7be9846725d34374907d0743bf601421
#: ../../topics/email.txt:112
#, fuzzy
msgid "``send_mass_mail()`` vs. ``send_mail()``"
msgstr "send_mass_mail() или send_mail()"

# 6aabf22872d9489696fc815180eae27a
#: ../../topics/email.txt:114
msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and :"
"meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail."
"send_mail()` opens a connection to the mail server each time it's executed, "
"while :meth:`~django.core.mail.send_mass_mail()` uses a single connection "
"for all of its messages. This makes :meth:`~django.core.mail."
"send_mass_mail()` slightly more efficient."
msgstr ""
"Основная разница между :meth:`~django.core.mail.send_mass_mail()` и :meth:"
"`~django.core.mail.send_mail()` -- :meth:`~django.core.mail.send_mail()` "
"создает подключение к почтовому серверу при каждом вызове, в то время как :"
"meth:`~django.core.mail.send_mass_mail()` использует одно подключения для "
"всех писем. Это делает :meth:`~django.core.mail.send_mass_mail()` более "
"эффективной."

# 82a844640d3c49fd92bbd64a5a875335
#: ../../topics/email.txt:122
#, fuzzy
msgid "``mail_admins()``"
msgstr "mail_admins()"

# 995e68c609524760a2fec11dc49bb71d
#: ../../topics/email.txt:126
msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the "
"site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""
"``django.core.mail.mail_admins()`` отправляет письма администраторам сайта, "
"которые указаны в настройке :setting:`ADMINS`."

# 87ada9eca79f4606a7dedaade0857b1b
#: ../../topics/email.txt:129
msgid ""
"``mail_admins()`` prefixes the subject with the value of the :setting:"
"`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""
"``mail_admins()`` к заголовку письма добавляет префикс из :setting:"
"`EMAIL_SUBJECT_PREFIX`, по умолчанию ``\"[Django] \"``."

# 16b81c3c16da45fbaf73c95dec94b008
#: ../../topics/email.txt:132
msgid ""
"The \"From:\" header of the email will be the value of the :setting:"
"`SERVER_EMAIL` setting."
msgstr "Заголовок \"From:\" будет содержать значение :setting:`SERVER_EMAIL`."

# bc929c4493c743e990ef4b70e9771816
#: ../../topics/email.txt:135
msgid "This method exists for convenience and readability."
msgstr "Этот метод существует для удобства и читаемости."

# 10aa4e7186a94ff5a4bc7a17327aae73
#: ../../topics/email.txt:137
msgid ""
"If ``html_message`` is provided, the resulting email will be a :mimetype:"
"`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` "
"content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""
"Если указан ``html_message``, письмо будет с :mimetype:`multipart/"
"alternative`, и будет содержать ``message`` с типом :mimetype:`text/plain`, "
"и ``html_message`` с типом :mimetype:`text/html`."

# f9e34dce15634b6a993b022bf105042b
#: ../../topics/email.txt:143
#, fuzzy
msgid "``mail_managers()``"
msgstr "mail_managers()"

# 6bd97747558d472b910da50f2154d548
#: ../../topics/email.txt:147
msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the :setting:"
"`MANAGERS` setting."
msgstr ""
"``django.core.mail.mail_managers()`` аналогичен ``mail_admins()``, но "
"отправляет письма менеджерам сайта, которые указаны в :setting:`MANAGERS`."

# 3324bc84592c4216b0e51071b39b2506
#: ../../topics/email.txt:152
msgid "Examples"
msgstr "Примеры"

# 5e79df012d0b40ab852c63340abc94a9
#: ../../topics/email.txt:154
msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr ""
"Отправляет одно письмо john@example.com и jane@example.com, они оба указаны "
"в \"To:\"::"

# 77199cadd737456b83dabc5822266e13
#: ../../topics/email.txt:164
msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr ""
"Отправляет письма john@example.com и jane@example.com, они получать "
"отдельные письма::"

# 99749c1da5ec4a21960f01f4c4e9298f
#: ../../topics/email.txt:174
msgid "Preventing header injection"
msgstr "Защищаемся от инъекции заголовков электронного письма"

# b87a27cf5ca748048e31835d83aeaa4a
#: ../../topics/email.txt:176
msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra "
"email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr ""
"`Инъекции заголовков <http://www.nyphp.org/phundamentals/8_Preventing-Email-"
"Header-Injection>`_ -- это атака, во время которой атакующий добавляет "
"данные в заголовки письма \"To:\" и \"From:\", которое создает ваш код."

# b9d4116da0ba46a6bfded33542085cdb
#: ../../topics/email.txt:180
msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. :meth:`~django.core.mail."
"send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of "
"``ValueError``) and, hence, will not send the email. It's your "
"responsibility to validate all data before passing it to the email functions."
msgstr ""
"Функции для отправки писем в Django запрещают указывать перенос строки в "
"значениях заголовков. Если ``subject``, ``from_email`` или "
"``recipient_list`` содержит перенос строки (в Unix, Windows или Mac стиле), "
"функция отправки писем (например, :meth:`~django.core.mail.send_mail()`) "
"вызовет исключение ``django.core.mail.BadHeaderError`` (дочерний класс "
"``ValueError``), и ничего не оправит. Это ваша ответственность проверять все "
"данные перед тем, как передать в функцию."

# d89c6b4bf507481e8b1ade352b8885da
#: ../../topics/email.txt:188
msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will simply be printed as the first bit of the email message."
msgstr ""
"Если ``message`` содержит заголовки в начале, они просто будут выведены в "
"начале содержимого письма."

# 88da96b49c2a4005add1ebe6e405dc63
#: ../../topics/email.txt:191
msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com "
"and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""
"Вот пример представления, которое получает ``subject``, ``message`` и "
"``from_email`` из POST данных запроса, отправляет их на admin@example.com, и "
"перенаправляет по адресу \"/contact/thanks/\"::"

# d4b434dd0a3945eeb1f0a8f7cb225f4c
#: ../../topics/email.txt:218
#, fuzzy
msgid "The ``EmailMessage`` class"
msgstr "Класс EmailMessage"

# cf41724884684500887a8e2c912a5d6e
#: ../../topics/email.txt:220
msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail."
"send_mass_mail()` functions are actually thin wrappers that make use of the :"
"class:`~django.core.mail.EmailMessage` class."
msgstr ""
"Функции :meth:`~django.core.mail.send_mail()` и :meth:`~django.core.mail."
"send_mass_mail()` на самом деле обертки, которые используют класс :class:"
"`~django.core.mail.EmailMessage`."

# 0b55b450d228436b8d34a9e40620d62b
#: ../../topics/email.txt:224
msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create :"
"class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""
"Не все возможности :class:`~django.core.mail.EmailMessage` доступны через :"
"meth:`~django.core.mail.send_mail()` и остальные функции. Если вы хотите "
"использовать дополнительные возможности, такие как получатели в BCC, "
"отправка файла, или \"multi-part\" письмо, вам следует использовать "
"непосредственно :class:`~django.core.mail.EmailMessage`."

# 574413577df840e1875173b393df1ead
#: ../../topics/email.txt:231
msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense "
"to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr ""
"Это особенности проектирования. :meth:`~django.core.mail.send_mail()` и "
"подобные функции ранее были единственным интерфейсом, который предоставлял "
"Django. Однако, список аргументом постепенно рос и рос. По этому было решено "
"использовать более объектно-ориентированный для электронных писем, а функции "
"оставить для обратной совместимости."

# 253007d375f34b29b077677a1ea51d49
#: ../../topics/email.txt:238
msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ""
":class:`~django.core.mail.EmailMessage` отвечает за создание электронного "
"письма. :ref:`Бэкенд отправки писем <topic-email-backends>` отвечает за "
"отправку писем."

# e5d6b31002ef428f92dfeca98aef2db8
#: ../../topics/email.txt:242
msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a simple "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr ""
"Для удобства :class:`~django.core.mail.EmailMessage` предоставляет простой "
"метод ``send()`` для отправки одного письма. Если вы хотите отправить "
"несколько писем, API бэкенда :ref:`предоставляет дополнительные методы "
"<topics-sending-multiple-emails>`."

# 921d49c76d254e70a07ac1bf3b155d12
#: ../../topics/email.txt:248
#, fuzzy
msgid "``EmailMessage`` Objects"
msgstr "Объекты EmailMessage"

# 4434e92c574e4afba527fdf25265ec8b
#: ../../topics/email.txt:252
msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used). "
"All parameters are optional and can be set at any time prior to calling the "
"``send()`` method."
msgstr ""
"Класс :class:`~django.core.mail.EmailMessage` создает со следующими "
"параметрами (в указанном порядке, если передавать позиционные аргументы). "
"Все параметры не обязательны и их можно установить в любой момент до вызова "
"метода ``send()``."

# f7a93ec2ca3e4d7dad73eb1b74c18654
#: ../../topics/email.txt:257
msgid "``subject``: The subject line of the email."
msgstr "``subject``: Тема письма."

# a962c34fe1a546ad8ee9db140a10e029
#: ../../topics/email.txt:259
msgid "``body``: The body text. This should be a plain text message."
msgstr "``body``: Содержимое письма. Необходимо указать обычный текст."

# bc430c183830472e88b248effe583e6e
#: ../../topics/email.txt:261
msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred "
"<fred@example.com>`` forms are legal. If omitted, the :setting:"
"`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""
"``from_email``: Адрес отправителя. Можно использовать как ``fred@example."
"com``, так и ``Fred <fred@example.com>``. Если не указан, будет использовать "
"значение настройки :setting:`DEFAULT_FROM_EMAIL`."

# 244debc83d254fd19536f3dbb344befc
#: ../../topics/email.txt:265
msgid "``to``: A list or tuple of recipient addresses."
msgstr "``to``: Список, или кортеж, получателей."

# d79cd5f4dfc7430f834ce5f39710e90c
#: ../../topics/email.txt:267
msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr ""
"``bcc``: Список, или кортеж, адресов, которые будут указаны в заголовке \"Bcc"
"\"."

# d17ea296fe374a3787823c3f58855d3f
#: ../../topics/email.txt:270
msgid ""
"``connection``: An email backend instance. Use this parameter if you want to "
"use the same connection for multiple messages. If omitted, a new connection "
"is created when ``send()`` is called."
msgstr ""
"``connection``: Экземпляр бэкенда для отправки писем. Используйте этот "
"параметр, если хотите использовать одно подключения для нескольких писем. "
"Если не указан, будет создано новое подключение при вызове ``send()``."

# 2a0a86e1595a447d9aabb55c6d5e362e
#: ../../topics/email.txt:274
msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either ``email.MIMEBase.MIMEBase`` instances, or ``(filename, content, "
"mimetype)`` triples."
msgstr ""
"``attachments``: Список вложений. Могут быть экземпляры ``email.MIMEBase."
"MIMEBase``, или кортежи ``(filename, content, mimetype)``."

# ba23a89be54d465c8b0112a20648e256
#: ../../topics/email.txt:278
msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message. The corresponding attribute is ``extra_headers``."
msgstr ""
"``headers``: Словарь дополнительных заголовков. Ключами являются названия "
"заголовков, значения -- содержимое заголовка. Вы сами должны убедиться в "
"правильности заголовков. Соответствующий атрибут -- ``extra_headers``."

# e3ae479d009e4a7886cb5cd73b00e5bf
#: ../../topics/email.txt:283
msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr ""
"``cc``: Список, или кортеж, получателей, которые будут указаны в заголовке "
"\"Cc\"."

#: ../../topics/email.txt:286
msgid ""
"``reply_to``: A list or tuple of recipient addresses used in the \"Reply-To"
"\" header when sending the email."
msgstr ""
"``reply_to``: Список, или кортеж, получателей, которые будут указаны в "
"заголовке \"Reply-To\"."

# b70ca86605534d2fb014544f230717d9
# 3e9aa50d3c634fb9af2c6ef79719f563
#: ../../topics/email.txt:289 ../../topics/email.txt:341
msgid "For example::"
msgstr "Например::"

# fb393f9959b344d782f35908f19e6e95
#: ../../topics/email.txt:303
msgid "The class has the following methods:"
msgstr "Класс содержит следующие методы:"

#: ../../topics/email.txt:305
msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used. "
"If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed. An empty list of recipients will "
"not raise an exception."
msgstr ""
"``send(fail_silently=False)`` отправляет письмо. Если при создании объекта "
"указали подключение, оно будет использоваться. Иначе будет создан экземпляр "
"бэкенда для отправки почты по умолчанию. Если ``fail_silently`` равен "
"``True``, все ошибки будут проигнорированы. Пустой список получателей не "
"вызывает исключение."

# 31c6484d511e42b38c88a006f510cbaf
#: ../../topics/email.txt:312
msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's ``email.MIMEText.MIMEText`` class) or a ``django.core."
"mail.SafeMIMEMultipart`` object holding the message to be sent. If you ever "
"need to extend the :class:`~django.core.mail.EmailMessage` class, you'll "
"probably want to override this method to put the content you want into the "
"MIME object."
msgstr ""
"``message()`` создает объект ``django.core.mail.SafeMIMEText`` (дочерний "
"класс ``email.MIMEText.MIMEText``), или ``django.core.mail."
"SafeMIMEMultipart``, который содержит письмо для отправки. Если вам "
"понадобиться переопределить класс :class:`~django.core.mail.EmailMessage`, "
"скорее всего вы переопределите этот метод, чтобы изменить MIME объект."

# 8805e477883e484688b1b51260e1431d
#: ../../topics/email.txt:319
msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This "
"is another method you might need to override when subclassing, because the "
"SMTP server needs to be told the full list of recipients when the message is "
"sent. If you add another way to specify recipients in your class, they need "
"to be returned from this method as well."
msgstr ""
"``recipients()`` возвращает список всех получателей письма из атрибутов "
"``to``, ``cc``, или ``bcc``. Вам может понадобиться переопределить этот "
"метод, т.к. SMTP серверу необходимо указать список всех получателей. Если вы "
"добавите новый способ указывать получателей, они должны возвращаться этим "
"методом."

# d7a2b97b323b4281b64b1e677c0d1965
#: ../../topics/email.txt:326
msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There "
"are two ways to call ``attach()``:"
msgstr ""
"``attach()`` создает новый вложенный файл и добавляет его к письму. Есть два "
"способа вызвать ``attach()``:"

# 9bdcb32558e44d71b420a26a1ae6806d
#: ../../topics/email.txt:329
msgid ""
"You can pass it a single argument that is an ``email.MIMEBase.MIMEBase`` "
"instance. This will be inserted directly into the resulting message."
msgstr ""
"Можно передать экземпляр ``email.MIMEBase.MIMEBase``. Он будет добавлен "
"непосредственно в письмо."

# 46b09cfa02824f0cb5be061659d885c9
#: ../../topics/email.txt:333
msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will "
"be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr ""
"Можно передать три аргумента: ``filename``, ``content`` и ``mimetype``. "
"``filename`` -- название файла, ``content`` -- содержимое файла, "
"``mimetype`` -- необязательный MIME тип файла. Если вы не укажите "
"``mimetype``, он будет построен по названию файла."

# 47beea0e04d546d9ae06532a5cc996fe
#: ../../topics/email.txt:345
msgid ""
"If you specify a ``mimetype`` of ``message/rfc822``, it will also accept :"
"class:`django.core.mail.EmailMessage` and :py:class:`email.message.Message`."
msgstr ""
"Если вы укажите ``message/rfc822`` в ``mimetype``, можно передать :class:"
"`django.core.mail.EmailMessage` и :py:class:`email.message.Message`."

# cf70863b681a4bbdb903f1c591803044
#: ../../topics/email.txt:348
msgid ""
"In addition, ``message/rfc822`` attachments will no longer be base64-encoded "
"in violation of :rfc:`2046#section-5.2.1`, which can cause issues with "
"displaying the attachments in `Evolution`__ and `Thunderbird`__."
msgstr ""
"Также ``message/rfc822`` вложение не будет base64-кодировано в нарушение :"
"rfc:`2046#section-5.2.1`, что может привести к проблемам с отображением "
"вложений в `Evolution`__ и `Thunderbird`__."

# ee01fb625bd74c3197a69962e720af95
#: ../../topics/email.txt:355
msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the "
"MIME type to use for the attachment. If the MIME type is omitted, it will be "
"guessed from the filename. The simplest use would be::"
msgstr ""
"``attach_file()`` создает новое вложения, используя файл с файловой системы. "
"Вызовите, указав путь к файлу. Опционально можно указать MIME тип вложения. "
"Если вы не укажите ``mimetype``, он будет построен по названию файла. Самый "
"простой пример использования::"

# b2540a9d8f5c41b1abad8c41dae12d6b
#: ../../topics/email.txt:363
msgid "Sending alternative content types"
msgstr "Отправка содержимого разного типа"

# cf52be0973144bb096d1d56d34ad88a4
#: ../../topics/email.txt:365
msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail."
"EmailMessage` has an ``attach_alternative()`` method for including extra "
"versions of the message body in the email. All the other methods (including "
"the class initialization) are inherited directly from :class:`~django.core."
"mail.EmailMessage`."
msgstr ""
"Вам может понадобиться отправлять сообщение в нескольких версиях. "
"Классический пример отправлять HTML и текстовую версию сообщения. Django "
"позволяет делать это, используя класс ``EmailMultiAlternatives``. Это "
"дочерний класс :class:`~django.core.mail.EmailMessage` с методом "
"``attach_alternative()``, которые добавляет дополнительную версию сообщения "
"в письмо. Все остальные методы (включая конструктор) наследуются "
"непосредственно от :class:`~django.core.mail.EmailMessage`."

# 73f35b4fd3bd4d55875ce3e30429565c
#: ../../topics/email.txt:373
msgid "To send a text and HTML combination, you could write::"
msgstr ""
"Чтобы отправить и текстовое, и HTML сообщение, используйте следующий код::"

# 1f9b4c3faf2e4658bfd636264092d24a
#: ../../topics/email.txt:384
msgid ""
"By default, the MIME type of the ``body`` parameter in an :class:`~django."
"core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave "
"this alone, because it guarantees that any recipient will be able to read "
"the email, regardless of their mail client. However, if you are confident "
"that your recipients can handle an alternative content type, you can use the "
"``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` "
"class to change the main content type. The major type will always be ``\"text"
"\"``, but you can change the subtype. For example::"
msgstr ""
"По умолчанию  MIME-тип параметра ``body`` в :class:`~django.core.mail."
"EmailMessage` равен ``\"text/plain\"``. Лучше не менять это значение, это "
"гарантирует, что получатель сможет прочитать сообщение любым почтовым "
"клиентом. Однако, если вы уверены, что получатель может принимать различные "
"типа сообщений, вы можете использовать атрибут ``content_subtype`` класса :"
"class:`~django.core.mail.EmailMessage`. Основной тип будет всегда ``\"text"
"\"``, но вы можете поменять подтип. Например::"

# 3b6929716b1945699aa60c1babd88fa6
#: ../../topics/email.txt:401
msgid "Email backends"
msgstr "Бэкенды для отправки электронной почты"

# 7159e68563284731b94c2ce298bd65ed
#: ../../topics/email.txt:403
msgid "The actual sending of an email is handled by the email backend."
msgstr "Непосредственная отправка электронного письма происходит в бэкенде."

# 36262a789c9348bb9d1dc5f82b724bc5
#: ../../topics/email.txt:405
msgid "The email backend class has the following methods:"
msgstr "Бэкенд содержит следующие методы:"

#: ../../topics/email.txt:407
msgid "``open()`` instantiates a long-lived email-sending connection."
msgstr "``open()`` создает длительное соединение."

# 838ace8dd94f4feaaf7e6dd5d7c5a2a2
#: ../../topics/email.txt:409
msgid "``close()`` closes the current email-sending connection."
msgstr "``close()`` закрывает текущее соединение."

# 7514861be16e494bba3ed5aa6a9e875b
#: ../../topics/email.txt:411
msgid ""
"``send_messages(email_messages)`` sends a list of :class:`~django.core.mail."
"EmailMessage` objects. If the connection is not open, this call will "
"implicitly open the connection, and close the connection afterwards. If the "
"connection is already open, it will be left open after mail has been sent."
msgstr ""
"``send_messages(email_messages)`` отправляет список объектов :class:`~django."
"core.mail.EmailMessage`. Если нет открытого соединения, оно будет создано и "
"закрыто после отправки. Если соединение уже открыто, оно останется открытым "
"после отправки."

#: ../../topics/email.txt:417
msgid ""
"It can also be used as a context manager, which will automatically call "
"``open()`` and ``close()`` as needed::"
msgstr ""
"Может использоваться как контекстный менеджер, автоматически вызывая "
"``open()`` и ``close()`` при необходимости::"

# adbcc82e310e4c89b28b911e2de4cce2
#: ../../topics/email.txt:433
msgid "Obtaining an instance of an email backend"
msgstr "Получаем экземпляр бэкенда для отправки электронной почты"

# 3ae46ac24ecf476ea61f812a62e7cf8a
#: ../../topics/email.txt:435
msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr ""
"Функция :meth:`get_connection` из ``django.core.mail`` возвращает экземпляр "
"бэкенда для отправки почты, который вы можете использовать."

# a7c2b90fd3d14d988891c2d151391f98
#: ../../topics/email.txt:442
msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr ""
"По умолчанию вызов ``get_connection()`` вернет экземпляр бэкенда, указанного "
"в :setting:`EMAIL_BACKEND`. Если указать аргумент ``backend``, будет создан "
"указанный бэкенд."

# 2c8a5735139846a3a5aadd4542747f89
#: ../../topics/email.txt:446
msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr ""
"Аргумент ``fail_silently`` указывает как обрабатывать ошибки. Если "
"``fail_silently`` равен ``True``, ошибки, которые возникли при оправке "
"почты, будут проигнорированы."

# 84e27676d42f40d58abb4ad2a4d26f60
#: ../../topics/email.txt:450
msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr ""
"Все остальные аргументы передаются непосредственно в конструктор бэкенда."

# 931fa096b4794a3095ee2ed247cbb162
#: ../../topics/email.txt:453
msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you "
"can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""
"Django предоставляет несколько бэкендов. Эти бэкенды, кроме SMTP (который "
"используется по умолчанию), полезны только при разработке или тестировании. "
"Вы можете создать :ref:`собственный бэкенд <topic-custom-email-backend>`."

# 64244a684ad94295be5ce4a85ce2fc01
#: ../../topics/email.txt:461
msgid "SMTP backend"
msgstr "SMTP бэкенд"

#: ../../topics/email.txt:465
msgid "This is the default backend. Email will be sent through a SMTP server."
msgstr ""
"Бэкенд по умолчанию. Электронные письма отправляются через SMTP сервер."

#: ../../topics/email.txt:467
msgid ""
"The value for each argument is retrieved from the matching setting if the "
"argument is ``None``:"
msgstr ""
"Значение аргумента берется из соответствующей настройки, если аругмент "
"``None``:"

#: ../../topics/email.txt:470
msgid "``host``: :setting:`EMAIL_HOST`"
msgstr "``host``: :setting:`EMAIL_HOST`"

#: ../../topics/email.txt:471
msgid "``port``: :setting:`EMAIL_PORT`"
msgstr "``port``: :setting:`EMAIL_PORT`"

#: ../../topics/email.txt:472
msgid "``username``: :setting:`EMAIL_HOST_USER`"
msgstr "``username``: :setting:`EMAIL_HOST_USER`"

#: ../../topics/email.txt:473
msgid "``password``: :setting:`EMAIL_HOST_PASSWORD`"
msgstr "``password``: :setting:`EMAIL_HOST_PASSWORD`"

#: ../../topics/email.txt:474
msgid "``use_tls``: :setting:`EMAIL_USE_TLS`"
msgstr "``use_tls``: :setting:`EMAIL_USE_TLS`"

#: ../../topics/email.txt:475
msgid "``use_ssl``: :setting:`EMAIL_USE_SSL`"
msgstr "``use_ssl``: :setting:`EMAIL_USE_SSL`"

#: ../../topics/email.txt:476
msgid "``timeout``: :setting:`EMAIL_TIMEOUT`"
msgstr "``timeout``: :setting:`EMAIL_TIMEOUT`"

#: ../../topics/email.txt:477
msgid "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"
msgstr "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"

#: ../../topics/email.txt:478
msgid "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"
msgstr "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"

# c903e1fc9247454b81156f17d832fb46
#: ../../topics/email.txt:480
msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr ""
"SMTP бэкенд используется в Django по умолчанию. Если вы хотите указать его "
"явно, добавьте в настройки::"

#: ../../topics/email.txt:485
msgid ""
"If unspecified, the default ``timeout`` will be the one provided by :func:"
"`socket.getdefaulttimeout()`, which defaults to ``None`` (no timeout)."
msgstr ""
"Если ``timeout`` не указан, будет использоваться результат :func:`socket."
"getdefaulttimeout()`, который по умолчанию ``None`` (без \"таймаута\")."

# f748655bc93e4df1b7fd35b2ce517bca
#: ../../topics/email.txt:491
msgid "Console backend"
msgstr "Консольный бэкенд"

# 3fce583a406e40d992209503b407ca63
#: ../../topics/email.txt:493
msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be sent to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr ""
"Вместо отправки письма, бэкенд выведет его в стандартный вывод. По умолчанию "
"консольный синдром пишет в ``stdout``. Вы можете использовать объекты-"
"потоки, указав параметр ``stream`` при создании соединения."

# 688dff80d01a43adbbc6fd5441e76e0e
# c4f595a234624747b3e3dbe64c66be09
# 93879ea622b34320af43865d9b91ca1d
#: ../../topics/email.txt:498 ../../topics/email.txt:516
#: ../../topics/email.txt:535
msgid "To specify this backend, put the following in your settings::"
msgstr "Чтобы указать этот бэкенд, добавьте следующее в настройки::"

# a5b7f3e3ecfa43de9fae190164a246de
# a622dd792123415887cad0bf6d13cac8
# 5f3f935cca414d83ae125624d5583a55
#: ../../topics/email.txt:502 ../../topics/email.txt:521
#: ../../topics/email.txt:552
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr ""
"Этот бэкенд не следует использовать на боевом сервере, он создавался для "
"разработки."

# ad7fbec6a01b41bbac34d090d8ad5a99
#: ../../topics/email.txt:508
msgid "File backend"
msgstr "Файловый бэкенд"

# f156debf874148b19f7b7e1d3148a3c9
#: ../../topics/email.txt:510
msgid ""
"The file backend writes emails to a file. A new file is created for each new "
"session that is opened on this backend. The directory to which the files are "
"written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from "
"the ``file_path`` keyword when creating a connection with :meth:`~django."
"core.mail.get_connection`."
msgstr ""
"Этот бэкенд пишет почту в файл. Новый файл создается при создании новой "
"сессии этого бэкенда. Каталог, в котором создаются файлы, берется из "
"настройки :setting:`EMAIL_FILE_PATH` или параметра ``file_path``, который "
"передали при создании соединения :meth:`~django.core.mail.get_connection`."

# c6605d3ae9ba4ef489a168e39a150535
#: ../../topics/email.txt:527
msgid "In-memory backend"
msgstr "Бэкенд в памяти"

# aeb9ae54e5d84a5e95675fb541b26f39
#: ../../topics/email.txt:529
msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an :class:`~django.core.mail."
"EmailMessage` instance for each message that would be sent."
msgstr ""
"Бэкенд ``'locmem'`` сохраняет почту в специальном атрибуте модуля ``django."
"core.mail``. Атрибут ``outbox`` создается при первой отправке письма. Это "
"список экземпляров :class:`~django.core.mail.EmailMessage` отправленных "
"писем."

# bc8f1881de5f4f6aa8db3b89cd2395b6
#: ../../topics/email.txt:539
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr ""
"Этот бэкенд не следует использовать на боевом сервере, он создавался для "
"разработки."

# c45ec957bfc54857b139d3b2b09f34ec
#: ../../topics/email.txt:545
msgid "Dummy backend"
msgstr "Dummy бэкенд"

# 5328a73e1f9f4dba9b563bfe9e39f532
#: ../../topics/email.txt:547
msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr ""
"Этот бэкенд ничего не делает с почтой. Чтобы указать этот бэкенд, добавьте "
"следующее в настройки::"

# 51d221066dd44068a6bdcd9d322bb2f3
#: ../../topics/email.txt:558
msgid "Defining a custom email backend"
msgstr "Создание собственного бэкенда"

# 96c8ff5d1f564501a19bc59fc13c900b
#: ../../topics/email.txt:560
msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr ""
"Вы можете создать собственный бэкенд для отправки почты. В настройка :"
"setting:`EMAIL_BACKEND` необходимо указать путь для импорта класса вашего "
"бэкенда."

# 0721a868259642f1815c5c9dd12978f0
#: ../../topics/email.txt:564
msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement "
"the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a "
"reference implementation."
msgstr ""
"Ваш бэкенд должен наследоваться от ``BaseEmailBackend``, который находится в "
"модуле ``django.core.mail.backends.base``. Бэкенд должен определить метод "
"``send_messages(email_messages)``. Этот метод принимает список объектов :"
"class:`~django.core.mail.EmailMessage` и вернуть список успешно отправленных "
"писем. Если ваш бэкенд в каком либо виде определяет постоянное подключение, "
"вам следует определить методы ``open()`` и ``close()``. Примеры реализации "
"можно найти в исходном коде ``smtp.EmailBackend``."

# 48ba554cf5714fd1bcc268e0daf86d0b
#: ../../topics/email.txt:576
msgid "Sending multiple emails"
msgstr "Отправка нескольких писем"

# f434ddd93bec43cfa9618e1f854a2611
#: ../../topics/email.txt:578
msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr ""
"Создание и закрытие SMTP-соединения (или любого другого сетевого "
"подключения) -- это дорогой процесс. Если вам необходимо отправить большое "
"количество писем, есть смысл использовать одно SMTP-соединения, а не "
"создавать каждый раз новое."

# 6ee7d02d97f14214a14b91c2c26c9b82
#: ../../topics/email.txt:583
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr "Есть два способа указать бэкенду использовать одно подключение."

# 0dff056365294d5eaff2ee306e9cea96
#: ../../topics/email.txt:585
msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr ""
"Первое, вы можете использовать метод ``send_messages()``. "
"``send_messages()`` принимает список объектов :class:`~django.core.mail."
"EmailMessage` (или наследников), и отправляет их, используя одно подключение."

# b18d5218cbef4b9e963f9b476871135f
#: ../../topics/email.txt:589
msgid ""
"For example, if you have a function called ``get_notification_email()`` that "
"returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr ""
"Например, если у вас есть функция ``get_notification_email()``, которая "
"возвращает список объектов :class:`~django.core.mail.EmailMessage`, вы "
"можете отправить их следующим образом::"

# f9d3ffd70976475f873ab02700e82165
#: ../../topics/email.txt:599
msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr ""
"В этом примере ``send_messages()`` откроет соединение, отправит письма, и "
"закроет соединение."

# aa7cc6546d4b478c975cd68615505227
#: ../../topics/email.txt:602
msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr ""
"Второй вариант -- использовать методы ``open()`` и ``close()``, чтобы явно "
"контролировать соединение. ``send_messages()`` не будет создавать и "
"закрывать соединение, если оно уже создано. Поэтому, если вы создадите "
"соединение, вы можете контролировать, когда оно будет закрыто. Например::"

# e17e223f46534fb89bb38084da494c47
#: ../../topics/email.txt:645
msgid "Configuring email for development"
msgstr "Настройка почты при разработке"

# 046029227f3c4814ba53c2738e85fbd5
#: ../../topics/email.txt:647
msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a website, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent "
"to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr ""
"Иногда вы не хотите, чтобы Django отправлял почту. Например, при разработке "
"сайта. Вряд ли вы захотите отправлять тысячи писем, но при этом необходимо "
"проверить, что код их отправляет правильным получателям с правильным "
"содержимым."

# 724026d9e865445ca76549bfee4b0109
#: ../../topics/email.txt:653
msgid ""
"The easiest way to configure email for local development is to use the :ref:"
"`console <topic-email-console-backend>` email backend. This backend "
"redirects all email to stdout, allowing you to inspect the content of mail."
msgstr ""
"Самый простой способ настроить почту для разработки -- использовать бэкенд :"
"ref:`console <topic-email-console-backend>`. Этот бэкенд перенаправляет всю "
"почту в stdout, позволяя увидеть содержимое писем."

# 1716c985449d47fbba5b2b6def123270
#: ../../topics/email.txt:657
msgid ""
"The :ref:`file <topic-email-file-backend>` email backend can also be useful "
"during development -- this backend dumps the contents of every SMTP "
"connection to a file that can be inspected at your leisure."
msgstr ""
"Также можно использовать :ref:`file <topic-email-file-backend>`. Этот бэкенд "
"сохраняет содержимое каждого SMTP-соединения в файл."

# 4e5477f2b1ce4921bd809497921c5a62
#: ../../topics/email.txt:661
msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. Python has a built-in way to accomplish this with a single "
"command::"
msgstr ""
"Еще один способ -- использовать локальный SMTP-сервер, который принимает "
"письма и выводит их в консоль, но никуда их не оправляет. Python позволяет "
"создать такой сервер одной командой::"

# 24e80b69694e4a90a640d3ce304b4935
#: ../../topics/email.txt:667
msgid ""
"This command will start a simple SMTP server listening on port 1025 of "
"localhost. This server simply prints to standard output all email headers "
"and the email body. You then only need to set the :setting:`EMAIL_HOST` and :"
"setting:`EMAIL_PORT` accordingly. For a more detailed discussion of SMTP "
"server options, see the Python documentation for the :mod:`smtpd` module."
msgstr ""
"Эта команда запускает простой SMTP-сервер, который слушает 1025 порт на "
"localhost. Этот сервер выводит заголовки и содержимое полученных писем в "
"консоль. Вам необходимо указать в настройках :setting:`EMAIL_HOST` и :"
"setting:`EMAIL_PORT`. Подробности об этом SMTP-сервер смотрите в "
"документации Python к модулю :mod:`smtpd`."

# 076a13b5db344733ad3b381398e166d3
#: ../../topics/email.txt:673
msgid ""
"For information about unit-testing the sending of emails in your "
"application, see the :ref:`topics-testing-email` section of the testing "
"documentation."
msgstr ""
"Информацию об отправке электронной почты при тестировании смотрите в "
"разделе :ref:`topics-testing-email`."

#~ msgid "The ``reply_to`` parameter was added."
#~ msgstr "Был добавлен параметр ``reply_to``."

#~ msgid "The context manager protocol was added."
#~ msgstr "Был добавлен протокол контекстного менеджера."

#~ msgid ""
#~ "The ``ssl_keyfile``, and ``ssl_certfile`` parameters and corresponding "
#~ "settings were added. The ability to customize ``timeout`` using a setting "
#~ "(:setting:`EMAIL_TIMEOUT`) was added."
#~ msgstr ""
#~ "Были добавлены параметры ``ssl_keyfile`` и ``ssl_certfile``, и "
#~ "соответствующие настройки. Была добавлен возможность изменить ``timeout`` "
#~ "в настройке :setting:`EMAIL_TIMEOUT`."

# 902986f41d66477dac09c8a0d3178b18
#~ msgid "The ``html_message`` parameter was added."
#~ msgstr "Был добавлен параметр ``html_message``."

#~ msgid ""
#~ "This is the default backend. Email will be sent through a SMTP server. "
#~ "The server address and authentication credentials are set in the :setting:"
#~ "`EMAIL_HOST`, :setting:`EMAIL_PORT`, :setting:`EMAIL_HOST_USER`, :setting:"
#~ "`EMAIL_HOST_PASSWORD`, :setting:`EMAIL_USE_TLS`, :setting:"
#~ "`EMAIL_USE_SSL`, :setting:`EMAIL_TIMEOUT`, :setting:`EMAIL_SSL_CERTFILE` "
#~ "and :setting:`EMAIL_SSL_KEYFILE` settings in your settings file."
#~ msgstr ""
#~ "Это бэкенд по умолчанию. Почта отправляется через SMTP сервер. Адрес "
#~ "сервера и параметры авторизации указаны в настройках :setting:"
#~ "`EMAIL_HOST`, :setting:`EMAIL_PORT`, :setting:`EMAIL_HOST_USER`, :setting:"
#~ "`EMAIL_HOST_PASSWORD`, :setting:`EMAIL_USE_TLS`, :setting:"
#~ "`EMAIL_USE_SSL`, :setting:`EMAIL_TIMEOUT`, :setting:`EMAIL_SSL_CERTFILE` "
#~ "и :setting:`EMAIL_SSL_KEYFILE`."
