# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-23 16:09\n"
"PO-Revision-Date: 2013-08-03 18:52+0700\n"
"Last-Translator: redvi <liberty195@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# f38e11b567fb446199df212efab97caf
#: ../../topics/python3.txt:3
msgid "Porting to Python 3"
msgstr "Портирование на Python 3"

# 2c7be105f4834419a0e21870f1e2ec3e
#: ../../topics/python3.txt:5
msgid "Django 1.5 is the first version of Django to support Python 3. The same code runs both on Python 2 (≥ 2.6.5) and Python 3 (≥ 3.2), thanks to the six_ compatibility layer."
msgstr "Django 1.5 -- это первая версия Django, поддерживающая Python 3."
" Ваш код может работать с обеими версиями Python: Python 2 (≥ 2.6.5) и Python 3 (≥ 3.2), "
"благодаря приложению `six <http://pythonhosted.org/six/>`_."

# 6063d2fc84604f9aaa541c08377fd923
#: ../../topics/python3.txt:11
msgid "This document is primarily targeted at authors of pluggable application who want to support both Python 2 and 3. It also describes guidelines that apply to Django's code."
msgstr "Этот документ предназначен в первую очередь для авторов повторно используемых"
" (подключаемых) приложений, которые хотят обеспечить поддержку как Python 2,"
" так и Python 3. Он также описывает принципы написания совместимого кода на Django."

# 0907fc5452dc4d67adefb5e8efc5c020
#: ../../topics/python3.txt:16
msgid "Philosophy"
msgstr "Философия"

# 166b6c6352f74f57bd4efebc1956efa1
#: ../../topics/python3.txt:18
msgid "This document assumes that you are familiar with the changes between Python 2 and Python 3. If you aren't, read `Python's official porting guide`_ first. Refreshing your knowledge of unicode handling on Python 2 and 3 will help; the `Pragmatic Unicode`_ presentation is a good resource."
msgstr "Предполагается, что вы знакомы с отличиями версий Python 2 и 3."
" Если это не так, сначала прочтите `руководство по портированию <http://docs.python.org/3/howto/pyporting.html>`_. "
"Также будет нелишним освежить ваши знания о строках unicode; хорошим способом сделать это "
"является просмотр презентации `the Pragmatic Unicode presentation <http://nedbatchelder.com/text/unipain.html>`_."

# 79200498d6c34f7d9d1d4606d8e7b794
#: ../../topics/python3.txt:23
msgid "Django uses the *Python 2/3 Compatible Source* strategy. Of course, you're free to chose another strategy for your own code, especially if you don't need to stay compatible with Python 2. But authors of pluggable applications are encouraged to use the same porting strategy as Django itself."
msgstr "Django придерживается стратегии использования совместимого кода."
" Конечно, вы можете избрать другой подход при написании вашего проекта,"
" особенно в случае, если вам не нужна поддержка Python 2."
" Но авторам подключаемых приложений всё же рекомендуется придерживаться той же стратегии,"
" что и Django."

# 9d8366db8bc54c8c95a879b02940ea5b
#: ../../topics/python3.txt:28
msgid "Writing compatible code is much easier if you target Python ≥ 2.6. Django 1.5 introduces compatibility tools such as :mod:`django.utils.six`. For convenience, forwards-compatible aliases were introduced in Django 1.4.2. If your application takes advantage of these tools, it will require Django ≥ 1.4.2."
msgstr "Написание совместимого кода будет намного легче, если вы используете Python ≥ 2.6."
" Django 1.5 включает некоторые инструменты для совместимости приложений, такие как"
" :mod:`django.utils.six`. Для удобства, некоторые псевдонимы были включены уже в Django 1.4.2."
" Если ваше приложение использует эти инструменты, вам потребуется версия Django ≥ 1.4.2."

# abeda7d67fcd4c4fbcab001f71210bf5
#: ../../topics/python3.txt:34
msgid "Obviously, writing compatible source code adds some overhead, and that can cause frustration. Django's developers have found that attempting to write Python 3 code that's compatible with Python 2 is much more rewarding than the opposite. Not only does that make your code more future-proof, but Python 3's advantages (like the saner string handling) start shining quickly. Dealing with Python 2 becomes a backwards compatibility requirement, and we as developers are used to dealing with such constraints."
msgstr "Очевидно, написание совместимого кода потребует дополнительных сил,"
" что может привести к разочарованию. Разработчики Django обнаружили,"
" что написание кода на Python 3, который был бы совместим с Python 2,"
" всё же приносит больше пользы, чем наоборот."
" Это не только сделает ваш код более перспективным, но и сделает доступными преимущества Python 3"
" (такие как более разумная обработка строк). Работа с Python 2 требует обратной совместимости,"
" и мы как разработчики уже привыкли иметь дело с подобными ограничениями."

# 86160f3734f2486baf01496be373b9c7
#: ../../topics/python3.txt:42
msgid "Porting tools provided by Django are inspired by this philosophy, and it's reflected throughout this guide."
msgstr "Инструменты портирования, предоставляемые Django, соответствуют"
" представленной философии и будут описаны в данной инструкции."

# 3185dd00685841feb759de4217990f31
#: ../../topics/python3.txt:49
msgid "Porting tips"
msgstr "Советы по портированию"

# 703f163f0b8143ed8d59539d4672467a
#: ../../topics/python3.txt:52
msgid "Unicode literals"
msgstr "Строки Unicode"

# f25908e316f74b3ba3ae77eae315fe51
#: ../../topics/python3.txt:54
msgid "This step consists in:"
msgstr "Этот шаг заключается в следующем:"

# 817baac79e4244cd996093471cfa8bf4
#: ../../topics/python3.txt:56
msgid "Adding ``from __future__ import unicode_literals`` at the top of your Python modules -- it's best to put it in each and every module, otherwise you'll keep checking the top of your files to see which mode is in effect;"
msgstr "Добавление ``from __future__ import unicode_literals`` первой строкой"
" в ваш модуль Python – будет лучше, если эта строка присутствует в каждом модуле,"
" в противном случае вы должны проследить какой режим используется;"

# 7a208e241ee944d4b9e94d7496dee89b
#: ../../topics/python3.txt:59
msgid "Removing the ``u`` prefix before unicode strings;"
msgstr "Удаление префикса ``u`` перед строками unicode;"

# c1fe012fc5c64a93800577063083421e
#: ../../topics/python3.txt:60
msgid "Adding a ``b`` prefix before bytestrings."
msgstr "Добавление префикса ``b`` перед байтовыми строками (bytestrings)."

# 9c8913e71de84bc1926d952c8463db99
#: ../../topics/python3.txt:62
msgid "Performing these changes systematically guarantees backwards compatibility."
msgstr "Систематическое выполнение этого шага гарантирует обратную совместимость."

# 22bcb682d4d942298e6ce256306295cf
#: ../../topics/python3.txt:64
msgid "However, Django applications generally don't need bytestrings, since Django only exposes unicode interfaces to the programmer. Python 3 discourages using bytestrings, except for binary data or byte-oriented interfaces. Python 2 makes bytestrings and unicode strings effectively interchangeable, as long as they only contain ASCII data. Take advantage of this to use unicode strings wherever possible and avoid the ``b`` prefixes."
msgstr "Однако, в приложениях Django обычно  не используются байтовые строки,"
" поскольку Django предоставляет лишь интерфейс unicode для программистов."
" При использовании Python 3 не рекомендуется использовать байтовые строки,"
" за исключением двоичных данных или байт-ориентированных интерфейсов."
" Python 2 делает байтовые строки и строки Unicode взаимозаменяемыми,"
" если они содержат только ASCII данные."
" Воспользуйтесь этим, чтобы использовать строки Unicode там,"
" где это возможно, и избежать добавления префиксов ``b``."

# 1d316cfd73eb409695a65eb4e49f6e57
#: ../../topics/python3.txt:73
msgid "Python 2's ``u`` prefix is a syntax error in Python 3.2 but it will be allowed again in Python 3.3 thanks to :pep:`414`. Thus, this transformation is optional if you target Python ≥ 3.3. It's still recommended, per the \"write Python 3 code\" philosophy."
msgstr "Префикс ``u`` из Python 2 в версии Python 3.2 вызовет синтаксическую ошибку,"
" но это будет исправлено в Python 3.3 благодаря :pep:`414`."
" Таким образом, это преобразование опционально в Python ≥ 3.3."
" Это всё ещё рекомендуется в филосифии Python 3 \"write Python 3 code\"."

# 9cf8e44f0de345dcad9158ac2f0cfe30
# 5afd92ae2aa6472982c895e0201c7eb9
#: ../../topics/python3.txt:79
#: ../../topics/python3.txt:336
msgid "String handling"
msgstr "Обработка строк"

# 71f9be57b4a64371a0fb931aa30cfb5c
#: ../../topics/python3.txt:81
msgid "Python 2's :func:`unicode` type was renamed :func:`str` in Python 3, :func:`str` was renamed ``bytes()``, and :func:`basestring` disappeared. six_ provides :ref:`tools <string-handling-with-six>` to deal with these changes."
msgstr "Тип строки  :func:`unicode` из Python 2  был переименован"
" в тип :func:`str` для Python 3, :func:`str` был переименован"
" в ``bytes()``, исчез тип :func:`basestring`."
" `six <http://pythonhosted.org/six/>`_ предоставляет инструменты, учитывающие эти изменения."

# aefc1ef94e3a41b28889e2f9f1f29cdc
#: ../../topics/python3.txt:86
msgid "Django also contains several string related classes and functions in the :mod:`django.utils.encoding` and :mod:`django.utils.safestring` modules. Their names used the words ``str``, which doesn't mean the same thing in Python 2 and Python 3, and ``unicode``, which doesn't exist in Python 3. In order to avoid ambiguity and confusion these concepts were renamed ``bytes`` and ``text``."
msgstr "Django также содержит несколько связанных классов и функций в модулях"
" :mod:`django.utils.encoding` и :mod:`django.utils.safestring`."
" Их имена используют тип ``str``, который неодинаков в Python 2 и Python 3,"
" а также ``unicode``, которого попросту нет в Python 3."
" Для того, чтобы избежать неоднозначности и путаницы они были переименованы в ``bytes`` и ``text``."

# bddcf3506f8b47de9dad649d7eaa6d83
#: ../../topics/python3.txt:93
msgid "Here are the name changes in :mod:`django.utils.encoding`:"
msgstr "Это наименования, которые были изменены в :mod:`django.utils.encoding`:"

# d54bb9ab488641dcb81d675c4ac704dd
# e1db4fc860c342fd8310b4332bd36de8
#: ../../topics/python3.txt:96
#: ../../topics/python3.txt:120
msgid "Old name"
msgstr "Прежнее имя"

# 55f6160c43a746c5ab6c58a96b9e7f67
# 18ba8c194a85403ea0562f812430343c
#: ../../topics/python3.txt:96
#: ../../topics/python3.txt:120
msgid "New name"
msgstr "Новое имя"

# d7534f8f74eb4ccf9804f936ba891634
#: ../../topics/python3.txt:98
msgid "``smart_str``"
msgstr "``smart_str``"

# 6247315b93ca43e799af610abd1ae22e
#: ../../topics/python3.txt:98
msgid "``smart_bytes``"
msgstr "``smart_bytes``"

# 274ee48a86ac4a2997ce5a3a58d217df
#: ../../topics/python3.txt:99
msgid "``smart_unicode``"
msgstr "``smart_unicode``"

# d90f34449e71495785bf97cf8d38e662
#: ../../topics/python3.txt:99
msgid "``smart_text``"
msgstr "``smart_text``"

# 7bcaf11aa5104c51861848c0b2eb3943
#: ../../topics/python3.txt:100
msgid "``force_unicode``"
msgstr "``force_unicode``"

# cafd4b1be8ce4879bbf3177127a17b13
#: ../../topics/python3.txt:100
msgid "``force_text``"
msgstr "``force_text``"

# da93d97711db44b6bbbb8bdf1f38c7d9
#: ../../topics/python3.txt:103
msgid "For backwards compatibility, the old names still work on Python 2. Under Python 3, ``smart_str`` is an alias for ``smart_text``."
msgstr "Для поддержания обратной совместимости прежние имена ещё работают на Python 2."
" В Python 3 ``smart_str`` является псевдонимом ``smart_text``."

# cbae59249b1f48d5bd50215a0f2bc825
# b56677213e9c40128062621e34d598ad
#: ../../topics/python3.txt:106
#: ../../topics/python3.txt:132
msgid "For forwards compatibility, the new names work as of Django 1.4.2."
msgstr "Для обеспечения дальнейшей совместимости новые наименования работают как в Django 1.4.2."

# a1e1215c866a4f30bd235dd244cb34ae
#: ../../topics/python3.txt:110
msgid ":mod:`django.utils.encoding` was deeply refactored in Django 1.5 to provide a more consistent API. Check its documentation for more information."
msgstr ":mod:`django.utils.encoding` был очень сильно изменён в Django 1.5 для улучшения API."
" Просмотрите соответствующую документацию для получения более подробной информации."

# edaed213cc3445dabf84f48f8917fe4c
#: ../../topics/python3.txt:114
msgid ":mod:`django.utils.safestring` is mostly used via the :func:`~django.utils.safestring.mark_safe` and :func:`~django.utils.safestring.mark_for_escaping` functions, which didn't change. In case you're using the internals, here are the name changes:"
msgstr ":mod:`django.utils.safestring` в основном используется через"
" :func:`~django.utils.safestring.mark_safe` и"
" :func:`~django.utils.safestring.mark_for_escaping` функции,"
" которые не изменились. В случае, если вы используете что-то иное, см. таблицу соответствий:"

# d1ea45c1f31a4b4599821320788c3df4
#: ../../topics/python3.txt:122
msgid "``EscapeString``"
msgstr "``EscapeString``"

# 670e9a9e4f0840e5bbb9e2b7d93e9c55
#: ../../topics/python3.txt:122
msgid "``EscapeBytes``"
msgstr "``EscapeBytes``"

# 66aa233d528e4570971b5ff666b92a2d
#: ../../topics/python3.txt:123
msgid "``EscapeUnicode``"
msgstr "``EscapeUnicode``"

# 37f7ee58cde54e1098c799aa8b9b81a5
#: ../../topics/python3.txt:123
msgid "``EscapeText``"
msgstr "``EscapeText``"

# 4675805db27647dea34c80856d2307e9
#: ../../topics/python3.txt:124
msgid "``SafeString``"
msgstr "``SafeString``"

# 72d5fe54bf5a4e42b4ca794eafa51d6f
#: ../../topics/python3.txt:124
msgid "``SafeBytes``"
msgstr "``SafeBytes``"

# 0b646e29e0cd4dc294788ae7ce360a99
#: ../../topics/python3.txt:125
msgid "``SafeUnicode``"
msgstr "``SafeUnicode``"

# d072b6d06fb542e1a3df539dd4ffeefd
#: ../../topics/python3.txt:125
msgid "``SafeText``"
msgstr "``SafeText``"

# 574bd47e42864af1b2e8c74776c77421
#: ../../topics/python3.txt:128
msgid "For backwards compatibility, the old names still work on Python 2. Under Python 3, ``EscapeString`` and ``SafeString`` are aliases for ``EscapeText`` and ``SafeText`` respectively."
msgstr "Для поддержания обратной совместимости прежние имена ещё работают на Python 2."
" В Python 3, ``EscapeString`` и ``SafeString`` являются псевдонимами для"
" ``EscapeText`` и ``SafeText`` соответственно."

# cdb3b9b3798d44e79d2a791214626278
#: ../../topics/python3.txt:135
msgid ":meth:`~object.__str__` and :meth:`~object.__unicode__` methods"
msgstr ":meth:`~object.__str__` и :meth:`~object.__unicode__` методы"

# 0b2553ac3d64427bbf7a164c50091165
#: ../../topics/python3.txt:137
msgid "In Python 2, the object model specifies :meth:`~object.__str__` and :meth:`~object.__unicode__` methods. If these methods exist, they must return ``str`` (bytes) and ``unicode`` (text) respectively."
msgstr "В Python 2 модель объекта имеет :meth:`~object.__str__`  и :meth:`~object.__unicode__` методы."
" Если эти методы существуют, они должны вернуть ``str`` (байт) и ``unicode`` (строку) соответственно."

# 8b1bfddf8f3d441abece20c6ffd6c32b
#: ../../topics/python3.txt:141
msgid "The ``print`` statement and the :func:`str` built-in call :meth:`~object.__str__` to determine the human-readable representation of an object. The :func:`unicode` built-in calls :meth:`~object.__unicode__` if it exists, and otherwise falls back to :meth:`~object.__str__` and decodes the result with the system encoding. Conversely, the :class:`~django.db.models.Model` base class automatically derives :meth:`~object.__str__` from :meth:`~object.__unicode__` by encoding to UTF-8."
msgstr "Оператор ``print`` и :func:`str` вызовет встроеннный метод :meth:`~object.__str__`"
"  для удобочитаемого представления объекта. :func:`unicode`"
" вызовет метод :meth:`~object.__unicode__`, если он существует,"
" в противном случае вернёт  метод :meth:`~object.__str__` и декодирует результат"
" в соответствии с системными настройками."
" Базовый класс :class:`~django.db.models.Model` автоматически получит метод"
" :meth:`~object.__str__` из :meth:`~object.__unicode__` путем кодирования в UTF-8."

# 63b0df411a4a448aa7c4329a9ae8c3d6
#: ../../topics/python3.txt:149
msgid "In Python 3, there's simply :meth:`~object.__str__`, which must return ``str`` (text)."
msgstr "В python 3 есть объект :meth:`~object.__str__`, который должен вернуть ``str`` (строку текста)."

# 552922316f594d02a057777c20de4f48
#: ../../topics/python3.txt:152
msgid "(It is also possible to define ``__bytes__()``, but Django application have little use for that method, because they hardly ever deal with ``bytes``.)"
msgstr "(Также можно определить ``__bytes__()``,"
" но приложения Django практически не используют этот метод,"
" потому что обычно не имеют дело с байтами.)"

# f70e25755ba94ff9888a991573ad5f31
#: ../../topics/python3.txt:156
msgid "Django provides a simple way to define :meth:`~object.__str__` and :meth:`~object.__unicode__` methods that work on Python 2 and 3: you must define a :meth:`~object.__str__` method returning text and to apply the :func:`~django.utils.encoding.python_2_unicode_compatible` decorator."
msgstr "Django предоставляет простой способ определить :meth:`~object.__str__` и"
" :meth:`~object.__unicode__` методы, которые работают на Python 2 и 3:"
" необходимо определить метод :meth:`~object.__str__`, возвращающий текст"
" и применить декоратор :func:`~django.utils.encoding.python_2_unicode_compatible`."

# 844c50ef72ac43aaa2046ac90da68da4
#: ../../topics/python3.txt:161
msgid "On Python 3, the decorator is a no-op. On Python 2, it defines appropriate :meth:`~object.__unicode__` and :meth:`~object.__str__` methods (replacing the original :meth:`~object.__str__` method in the process). Here's an example::"
msgstr "В Python 3, декоратор ничего не выполняет. В Python 2, он определяет"
" соответствующие методы :meth:`~object.__unicode__` и"
" :meth:`~object.__str__` ( в процессе замены оригинального :meth:`~object.__str__`)."
" Вот пример:"

# 851070758e6b42e39cb41faac8e86189
#: ../../topics/python3.txt:173
msgid "This technique is the best match for Django's porting philosophy."
msgstr "Этот метод является наиболее подходящим для портирования  в стиле Django."

# 8aa7763c7288413d9b3dc6a0aa182e36
#: ../../topics/python3.txt:175
msgid "For forwards compatibility, this decorator is available as of Django 1.4.2."
msgstr "Для обеспечения дальнейшей совместимости этот декоратор доступен с версии Django 1.4.2."

# c0ec1d419cf443f59d3c1a8e7e3ed649
#: ../../topics/python3.txt:177
msgid "Finally, note that :meth:`~object.__repr__` must return a ``str`` on all versions of Python."
msgstr "Наконец, отметим, что метод :meth:`~object.__repr__` должен возвращать"
" ``str`` во всех версиях Python."

# df2f10bc1f734ff1829b64b98f3dcf41
#: ../../topics/python3.txt:181
msgid ":class:`dict` and :class:`dict`-like classes"
msgstr ":class:`dict` и :class:`dict`-like классы"

# c8ad640c052d4d3eb3265cebed6f22c5
#: ../../topics/python3.txt:183
msgid ":meth:`dict.keys`, :meth:`dict.items` and :meth:`dict.values` return lists in Python 2 and iterators in Python 3. :class:`~django.http.QueryDict` and the :class:`dict`-like classes defined in :mod:`django.utils.datastructures` behave likewise in Python 3."
msgstr ":meth:`dict.keys`, :meth:`dict.items` и :meth:`dict.values` возвращают списки в Python 2"
" и итераторы в Python 3. :class:`~django.http.QueryDict` и :class:`dict`-like классы,"
" определенные в :mod:`django.utils.datastructures` ведут себя аналогично в Python 3."

# 7188d51bfa824aa08ed452d38a74d555
#: ../../topics/python3.txt:188
msgid "six_ provides compatibility functions to work around this change: :func:`~six.iterkeys`, :func:`~six.iteritems`, and :func:`~six.itervalues`. Django's bundled version adds :func:`~django.utils.six.iterlists` for ``django.utils.datastructures.MultiValueDict`` and its subclasses."
msgstr "`six <http://pythonhosted.org/six/>`_ предоставляет инструменты,"
" учитывающие эти изменения: :func:`~six.iterkeys`, :func:`~six.iteritems` и"
" :func:`~six.itervalues`. Вместе с Django поставляется"
" :func:`~django.utils.six.iterlists` для"
" ``django.utils.datastructures.MultiValueDict`` и его подклассов."

# 4ee6aab4a56944988d64525dc9baa0d1
#: ../../topics/python3.txt:194
msgid ":class:`~django.http.HttpRequest` and :class:`~django.http.HttpResponse` objects"
msgstr ":class:`~django.http.HttpRequest` и :class:`~django.http.HttpResponse` объекты"

# 1f92319e8c114826b04f632cda8ed630
#: ../../topics/python3.txt:196
msgid "According to :pep:`3333`:"
msgstr "В соответствии с :pep:`3333`:"

# 81f7c616d9954a8cb0848a596dfa471d
#: ../../topics/python3.txt:198
msgid "headers are always ``str`` objects,"
msgstr "заголовки всегдя являются строковыми объектами ( ``str`` objects),"

# 361caaeecafc44e38f2904c0a8edb1c7
#: ../../topics/python3.txt:199
msgid "input and output streams are always ``bytes`` objects."
msgstr "поток ввода и вывода всегда является объектом байтов (``bytes`` objects)."

# a49fb70a177449bf954288702f05c039
#: ../../topics/python3.txt:201
msgid "Specifically, :attr:`HttpResponse.content <django.http.HttpResponse.content>` contains ``bytes``, which may become an issue if you compare it with a ``str`` in your tests. The preferred solution is to rely on :meth:`~django.test.TestCase.assertContains` and :meth:`~django.test.TestCase.assertNotContains`. These methods accept a response and a unicode string as arguments."
msgstr "В частности, :attr:`HttpResponse.content <django.http.HttpResponse.content>` содержит байты,"
" что может стать источником проблем, если вы сравните его со строковым объектом в ваших тестах."
" Предпочтительное решение в таком случае: полагаться на :meth:`~django.test.TestCase.assertContains`"
" и :meth:`~django.test.TestCase.assertNotContains`."
" Эти методы принимают ответ со строками unicode в качестве аргументов."

# 28294d80914c4fc1aefb7314aba8a31a
#: ../../topics/python3.txt:209
msgid "Coding guidelines"
msgstr "Рекомендации по написанию кода"

# d4270eeb2af7480da162b3eeeed5ad92
#: ../../topics/python3.txt:211
msgid "The following guidelines are enforced in Django's source code. They're also recommended for third-party application who follow the same porting strategy."
msgstr "Следующие рекомендации применяются в исходных кодах Django."
" Также они рекомендуются для сторонних приложений,"
" которые следуют аналогичной стратегии портирования."

# 2ee9a30ca870452ba7c24d3669ecc971
#: ../../topics/python3.txt:215
msgid "Syntax requirements"
msgstr "Требования к синтаксису"

# 1cc52aefc0c74898a3f4ad21f485b7d8
#: ../../topics/python3.txt:218
msgid "Unicode"
msgstr "Юникод (Unicode)"

# 9074b34da95d4518b414c98373f6019a
#: ../../topics/python3.txt:220
msgid "In Python 3, all strings are considered Unicode by default. The ``unicode`` type from Python 2 is called ``str`` in Python 3, and ``str`` becomes ``bytes``."
msgstr "В Python 3 все строки по-умолчанию считаются строками юникода."
" Тип ``unicode`` из Python 2 аналогичен ``str`` в Python 3, а тип"
" ``str`` становится типом ``bytes``."

# b1ab64d45d184bdcba9cf7597c6e3a4a
#: ../../topics/python3.txt:224
msgid "You mustn't use the ``u`` prefix before a unicode string literal because it's a syntax error in Python 3.2. You must prefix byte strings with ``b``."
msgstr "Вы не должны использовать префикс ``u`` перед строками юникода,"
" поскольку подобный синтакс вызовет ошибку в Python 3.2."
" И вы обязаны ставить префикс ``b`` перед объектом байта."

# 6803c1d8559c413587e2ff2d34658191
#: ../../topics/python3.txt:227
msgid "In order to enable the same behavior in Python 2, every module must import ``unicode_literals`` from ``__future__``::"
msgstr "Чтобы в Python 2 появилось такое же поведение,"
" всегда импортируйте в модулях ``unicode_literals`` из ``__future__``::"

# 72e1744552fa448793d428c536f1b0e0
#: ../../topics/python3.txt:235
msgid "If you need a byte string literal under Python 2 and a unicode string literal under Python 3, use the :func:`str` builtin::"
msgstr "Если вам нужны строки байтов в Python 2 и строки юникода в Python 3,"
" используйте встроенную функцию :func:`str`::"

# b7871d12129f48d898be8cdafd5d19c0
#: ../../topics/python3.txt:240
msgid "In Python 3, there aren't any automatic conversions between ``str`` and ``bytes``, and the :mod:`codecs` module became more strict. :meth:`str.decode` always returns ``bytes``, and ``bytes.decode`` always returns ``str``. As a consequence, the following pattern is sometimes necessary::"
msgstr "В Python 3, нет никаких автоматических преобразований между ``str`` и ``bytes``,"
" а модуль :mod:`codecs` стал более строгим. Метод :meth:`str.decode` всегда возвращает тип"
" ``bytes``, в свою очередь ``bytes.decode`` всегда возвращает тип ``str``."
" В следствие этого иногда может появиться такая необходимость::"

# c78aba5ca86444f6a38d3bf8d438a654
#: ../../topics/python3.txt:247
msgid "Be cautious if you have to `index bytestrings`_."
msgstr "Будьте осторожны с `index bytestrings <http://docs.python.org/3/howto/pyporting.html#bytes-literals>`_."

# 302ab952a3c645b08181e6636ec75b93
#: ../../topics/python3.txt:252
msgid "Exceptions"
msgstr "Исключения"

# 937534b7779247cfb6f40ba9d81dc668
#: ../../topics/python3.txt:254
msgid "When you capture exceptions, use the ``as`` keyword::"
msgstr "При вызове исключения используйте в качестве ключевого слово ``as``::"

# 85ef57034ed9446d8da2c1a0af00f42b
#: ../../topics/python3.txt:261
msgid "This older syntax was removed in Python 3::"
msgstr "Прежний синтаксис был удалён из Python 3::"

# bf3fc5f3f3704bc6a1c2d69be2f97b2b
#: ../../topics/python3.txt:268
msgid "The syntax to reraise an exception with a different traceback also changed. Use :func:`six.reraise`."
msgstr "Синтаксис reraise-исключений также подвергся изменениям. См. :func:`six.reraise`."

# 22c50f271574477a988af9ca03f95c3a
#: ../../topics/python3.txt:272
msgid "Magic methods"
msgstr "Магические методы (Magic methods)"

# c2d44214aa1f47338c32821676936966
#: ../../topics/python3.txt:274
msgid "Use the patterns below to handle magic methods renamed in Python 3."
msgstr "Используйте шаблоны, данные ниже, для обработки магических методов, переименованных в Python 3. "

# e7b863d08edf4122a648a106637e5f6e
#: ../../topics/python3.txt:277
msgid "Iterators"
msgstr "Итераторы (Iterators)"

# ab2a216ddfa1407885226a4dd5865631
#: ../../topics/python3.txt:289
msgid "Boolean evaluation"
msgstr "Булевы выражения (Boolean evaluation)"

# 4bba3957c9f8482b84c5cb2b9912a7ae
#: ../../topics/python3.txt:302
msgid "Division"
msgstr "Division"

# 3beffd4746fc43a8a8b4ab4502e52a7e
#: ../../topics/python3.txt:323
msgid "Writing compatible code with six"
msgstr "Написание совместимого кода с помощью six"

# 653beafb566c4cefb0d832cdef5e1a5c
#: ../../topics/python3.txt:325
msgid "six_ is the canonical compatibility library for supporting Python 2 and 3 in a single codebase. Read its documentation!"
msgstr "`six <http://pythonhosted.org/six/>`_ является канонической библиотекой"
" для одновременной поддержки Python 2 и 3. Ознакомьтесь с его документацией!"

# f636957553be43cfb0e7f2070f44cf67
#: ../../topics/python3.txt:328
msgid ":mod:`six` is bundled with Django as of version 1.4.2. You can import it as :mod:`django.utils.six`."
msgstr ":mod:`six` входит в поставку Django начиная с версии 1.4.2."
" Вы можете импортировать его как :mod:`django.utils.six`."

# c091bfff040f4857bd0df19d477c0b63
#: ../../topics/python3.txt:331
msgid "Here are the most common changes required to write compatible code."
msgstr "В нём учитываются наиболее распространенные изменения,"
" что позволит написать совместимый код."

# d78f41e835bb426d8daa3e247af2d46c
#: ../../topics/python3.txt:338
msgid "The ``basestring`` and ``unicode`` types were removed in Python 3, and the meaning of ``str`` changed. To test these types, use the following idioms::"
msgstr "Типы ``basestring`` и ``unicode`` были удалены в Python 3,"
" а метод ``str`` изменён. Для проверки этих типов, используйте следующие идиомы ::"

# 6056f74d90824880aff8e91b262e4b5a
#: ../../topics/python3.txt:345
msgid "Python ≥ 2.6 provides ``bytes`` as an alias for ``str``, so you don't need :data:`six.binary_type`."
msgstr "Python ≥ 2.6 предоставляет тип ``bytes`` как псевдоним типа ``str``,"
" так что вам не нужен :data:`six.binary_type`."

# 5375045461964d7cbf68c64fab455509
#: ../../topics/python3.txt:349
msgid "``long``"
msgstr "Тип ``long``"

# 9b62d4f61a1c478488e718dce722502e
#: ../../topics/python3.txt:351
msgid "The ``long`` type no longer exists in Python 3. ``1L`` is a syntax error. Use :data:`six.integer_types` check if a value is an integer or a long::"
msgstr "Типа ``long`` больше не существует в Python 3. ``1L`` вызовет синтаксическую ошибку."
" Используйте :data:`six.integer_types`, чтобы проверить является ли число обычным целым"
" или это число типа ``long``::"

# 187efa1fe16f4b5c98594371d13e1bb9
#: ../../topics/python3.txt:357
msgid "``xrange``"
msgstr "``xrange``"

# 76137db4ce734b1f9046df79a003b7fe
#: ../../topics/python3.txt:359
msgid "Import ``six.moves.xrange`` wherever you use ``xrange``."
msgstr "Импортируйте ``six.moves.xrange`` всюду, где вы использовали ``xrange``."

# c05a22aa64d8462298c8710d5c0a3aef
#: ../../topics/python3.txt:362
msgid "Moved modules"
msgstr "Перемещённые модули"

# 81b3d7fd30e741059f4fe9a72eafb552
#: ../../topics/python3.txt:364
msgid "Some modules were renamed in Python 3. The :mod:`django.utils.six.moves <six.moves>` module provides a compatible location to import them."
msgstr "Некоторые модули были переименованы в Python 3."
" Модуль :mod:`django.utils.six.moves <six.moves>` обеспечивает совместимость с ними"
" и вы можете импортировать их."

# d8267fead7844784a0170b0a44d0b5aa
#: ../../topics/python3.txt:367
msgid "The ``urllib``, ``urllib2`` and ``urlparse`` modules were reworked in depth and :mod:`django.utils.six.moves <six.moves>` doesn't handle them. Django explicitly tries both locations, as follows::"
msgstr "Модули ``urllib``, ``urllib2`` и ``urlparse`` были значительно изменены"
" и :mod:`django.utils.six.moves <six.moves>` не сможет обработать их."
" Django explicitly tries both locations, as follows::"

# c9f2ad3f46a041a2bc7c93f2e2613c0f
#: ../../topics/python3.txt:377
msgid "PY3"
msgstr "PY3"

# 4b88955c02024af0871814ef8dcf3258
#: ../../topics/python3.txt:379
msgid "If you need different code in Python 2 and Python 3, check :data:`six.PY3`::"
msgstr "Для получения разного кода при использовании Python 2 и Python 3,"
" проверьте :data:`six.PY3`::"

# 04ea289b510f4bcd8707b2a205b4ccda
#: ../../topics/python3.txt:386
msgid "This is a last resort solution when :mod:`six` doesn't provide an appropriate function."
msgstr "Это решение используется в крайнем случае, только когда"
" :mod:`six` не может обеспечить необходимый функционал."

# d86840f3853e428c944625f8ca57b403
#: ../../topics/python3.txt:392
msgid "Customizations of six"
msgstr "Настройки six"

# b76a8d438d9540b3871a8784d5c0b047
#: ../../topics/python3.txt:394
msgid "The version of six bundled with Django includes one extra function:"
msgstr "Версия six, идущая в поставке с Django, имеет одну дополнительную функцию:"

# fca4adc8720d431c8e498e6260b42239
#: ../../topics/python3.txt:398
msgid "Returns an iterator over the lists of values of a ``MultiValueDict``. This replaces ``iterlists()`` on Python 2 and ``lists()`` on Python 3."
msgstr "Возвращает итератор со списком значений из ``MultiValueDict``."
" Это заменяет ``iterlists()`` в Python 2 и ``lists()`` в Python 3."

# f42185da3ecf4a07b926ee75127383b8
#: ../../topics/python3.txt:403
msgid "This replaces ``testcase.assertRaisesRegexp`` on Python 2, and ``testcase.assertRaisesRegex`` on Python 3. ``assertRaisesRegexp`` still exists in current Python3 versions, but issues a warning."
msgstr "Это заменяет ``testcase.assertRaisesRegexp`` в Python 2,"
" и ``testcase.assertRaisesRegex`` в Python 3."
" ``assertRaisesRegexp`` всё ещё доступен в текущей версии Python3, но выдаст предупреждение."

# 0b2c3500ad00415a952244ac3462ab14
#: ../../topics/python3.txt:408
msgid "In addition to six' defaults moves, Django's version provides ``thread`` as ``_thread`` and ``dummy_thread`` as ``_dummy_thread``."
msgstr "В дополнение к инструментам six Django предоставляет "
"``thread`` как ``_thread`` и ``dummy_thread`` как ``_dummy_thread``."

