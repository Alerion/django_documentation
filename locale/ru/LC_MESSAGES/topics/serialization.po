# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-03 16:48+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 72873f0cec314e45b708c2658c28f9c0
#: ../../topics/serialization.txt:3
msgid "Serializing Django objects"
msgstr ""

# c090d67f267640019caa1903275feb17
#: ../../topics/serialization.txt:5
msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django models into other formats. Usually these other formats will be text-"
"based and used for sending Django data over a wire, but it's possible for a "
"serializer to handle any format (text-based or not)."
msgstr ""

# 1bca91deff684b45b4ecb48314a83e00
#: ../../topics/serialization.txt:12
msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""

# 07f7248a8c1542479df8e205b57816a0
#: ../../topics/serialization.txt:16
msgid "Serializing data"
msgstr ""

# 1d4db9e07a19480e9980d2aeb2e151cb
#: ../../topics/serialization.txt:18
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

# ead91385dc89433cb1e0f9df7e37edcc
#: ../../topics/serialization.txt:23
msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a :class:`~django.db.models.query."
"QuerySet` to serialize. (Actually, the second argument can be any iterator "
"that yields Django model instances, but it'll almost always be a QuerySet)."
msgstr ""

# 223b090e93604bffa712c110244bee09
#: ../../topics/serialization.txt:31
msgid "You can also use a serializer object directly::"
msgstr ""

# 30dcc5b218514dcebaf41717d32ce289
#: ../../topics/serialization.txt:38
msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

# c29b1811a0474814bc5246bd454ba2e7
#: ../../topics/serialization.txt:46
msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:"
"`format <serialization-formats>` will raise a ``django.core.serializers."
"SerializerDoesNotExist`` exception."
msgstr ""

# 5fe59626f35b48289171a884f7fdc4ac
#: ../../topics/serialization.txt:53
msgid "Subset of fields"
msgstr ""

# bd47cd9b0c0d4d26b36d1c2ba311cccf
#: ../../topics/serialization.txt:55
msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""

#: ../../topics/serialization.txt:61
msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized. The primary key is always serialized as the ``pk`` "
"element in the resulting output; it never appears in the ``fields`` part."
msgstr ""

# 6dbc8d09ac564b1b8592640bb41d3ca1
#: ../../topics/serialization.txt:67
msgid ""
"Depending on your model, you may find that it is not possible to deserialize "
"a model that only serializes a subset of its fields. If a serialized object "
"doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""

#: ../../topics/serialization.txt:73
msgid "Inherited models"
msgstr ""

# 686c29eb5a2f4b3888c75d855c8c8be9
#: ../../topics/serialization.txt:75
msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize "
"that model. Just call the serializer on the object (or objects) that you "
"want to serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""

# 2e3d6825133342599e90e7b3d091a299
#: ../../topics/serialization.txt:81
msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""

# a4322e3df8354bb8869d5b3d13c7c6fc
#: ../../topics/serialization.txt:92
msgid "If you only serialize the Restaurant model::"
msgstr ""

# 3d939ecaab3840c0a07d2a858b2548b2
#: ../../topics/serialization.txt:96
msgid ""
"the fields on the serialized output will only contain the "
"``serves_hot_dogs`` attribute. The ``name`` attribute of the base class will "
"be ignored."
msgstr ""

# a3e476fc1b624cb785fdd36c29df8341
#: ../../topics/serialization.txt:99
msgid ""
"In order to fully serialize your ``Restaurant`` instances, you will need to "
"serialize the ``Place`` models as well::"
msgstr ""

# a0b9d8ba3aac45a5b0310613b2f00167
#: ../../topics/serialization.txt:106
msgid "Deserializing data"
msgstr ""

# 1abcfe850e4342cd8176013475bb5a1d
#: ../../topics/serialization.txt:108
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

# f5b8638a4c4a4e65b9a8771fbe04b338
#: ../../topics/serialization.txt:113
msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

# 3e18411ec75a4342a19b891f48cbb18b
#: ../../topics/serialization.txt:116
msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* simple Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""

# e4e07c674cda45fb8238cec6873bd373
#: ../../topics/serialization.txt:121
msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

# a598dbaf7e3a47f98a547226305f3269
#: ../../topics/serialization.txt:125
msgid ""
"If the ``pk`` attribute in the serialized data doesn't exist or is null, a "
"new instance will be saved to the database."
msgstr ""

# f64e2a25330540e49446520525be9152
#: ../../topics/serialization.txt:128
msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the "
"database. Usually, working with these ``DeserializedObject`` instances looks "
"something like::"
msgstr ""

# 7bf8f3606bcd4ab69a710c752686ab28
#: ../../topics/serialization.txt:137
msgid ""
"In other words, the usual use is to examine the deserialized objects to make "
"sure that they are \"appropriate\" for saving before doing so.  Of course, "
"if you trust your data source you could just save the object and move on."
msgstr ""

# b4f0d67218e042ad94f31a334f58fe2d
#: ../../topics/serialization.txt:141
msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``. "
"If fields in the serialized data do not exist on a model, a "
"``DeserializationError`` will be raised unless the ``ignorenonexistent`` "
"argument is passed in as ``True``::"
msgstr ""

# 185d0ebbd43f42bcacb27fe97953d4d1
#: ../../topics/serialization.txt:151
msgid "Serialization formats"
msgstr ""

# 2fe0217c06734ba88b00ecd7a7398d34
#: ../../topics/serialization.txt:153
msgid ""
"Django supports a number of serialization formats, some of which require you "
"to install third-party Python modules:"
msgstr ""

# 18bd3168753944c1a3a5391ff799904f
#: ../../topics/serialization.txt:157
msgid "Identifier"
msgstr ""

# 2628f2494e444948a0640abcd0b4797d
#: ../../topics/serialization.txt:157
msgid "Information"
msgstr ""

# 1794c7997cc1403d819003b4efbb2c31
#: ../../topics/serialization.txt:159
msgid "``xml``"
msgstr ""

# f39f8df2078a47aeae350d65c250e484
#: ../../topics/serialization.txt:159
msgid "Serializes to and from a simple XML dialect."
msgstr ""

# 2cc8c2114a444480ab6b56e7dd86598b
#: ../../topics/serialization.txt:161
msgid "``json``"
msgstr ""

# dc2aa2ee3e2e4465b2e98887ff0ac63f
#: ../../topics/serialization.txt:161
msgid "Serializes to and from JSON_."
msgstr ""

# dd45abd41c5547fd90fc364fbc1937b7
#: ../../topics/serialization.txt:163
msgid "``yaml``"
msgstr ""

# 9908f65c4ae14f0bb919e36c5d3947bf
#: ../../topics/serialization.txt:163
msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""

# e22d3423c92b4110baa5e9d7c8051b2c
#: ../../topics/serialization.txt:171
msgid "XML"
msgstr ""

# 63230399128248e7a7993a54778d35bf
#: ../../topics/serialization.txt:173
msgid "The basic XML serialization format is quite simple::"
msgstr ""

#: ../../topics/serialization.txt:183
msgid ""
"The whole collection of objects that is either serialized or deserialized is "
"represented by a ``<django-objects>``-tag which contains multiple "
"``<object>``-elements. Each such object has two attributes: \"pk\" and "
"\"model\", the latter being represented by the name of the app (\"sessions"
"\") and the lowercase name of the model (\"session\") separated by a dot."
msgstr ""

# 7d7ab0831fa147b49d99cfb72e97dc9a
#: ../../topics/serialization.txt:189
msgid ""
"Each field of the object is serialized as a ``<field>``-element sporting the "
"fields \"type\" and \"name\". The text content of the element represents the "
"value that should be stored."
msgstr ""

# c9df4ebf280c4940b20130902b2a756f
#: ../../topics/serialization.txt:193
msgid ""
"Foreign keys and other relational fields are treated a little bit "
"differently::"
msgstr ""

#: ../../topics/serialization.txt:201
msgid ""
"In this example we specify that the ``auth.Permission`` object with the PK "
"27 has a foreign key to the ``contenttypes.ContentType`` instance with the "
"PK 9."
msgstr ""

#: ../../topics/serialization.txt:204
msgid ""
"ManyToMany-relations are exported for the model that binds them. For "
"instance, the ``auth.User`` model has such a relation to the ``auth."
"Permission`` model::"
msgstr ""

# ef86105f9a4d42c7aa30e1a61b08079f
#: ../../topics/serialization.txt:215
msgid ""
"This example links the given user with the permission models with PKs 46 and "
"47."
msgstr ""

#: ../../topics/serialization.txt:217
msgid "Control characters"
msgstr ""

#: ../../topics/serialization.txt:219
msgid ""
"If the content to be serialized contains control characters that are not "
"accepted in the XML 1.0 standard, the serialization will fail with a :exc:"
"`ValueError` exception. Read also the W3C's explanation of `HTML, XHTML, XML "
"and Control Codes <https://www.w3.org/International/questions/qa-controls>`_."
msgstr ""

# 673a83274b6f43e1987843d4ac501bf1
#: ../../topics/serialization.txt:228
msgid "JSON"
msgstr ""

# efea9aacb7a4495d96dbf95c22ad96c6
#: ../../topics/serialization.txt:230
msgid ""
"When staying with the same example data as before it would be serialized as "
"JSON in the following way::"
msgstr ""

# b6955719e58c4e5ea62d35b27894928a
#: ../../topics/serialization.txt:244
msgid ""
"The formatting here is a bit simpler than with XML. The whole collection is "
"just represented as an array and the objects are represented by JSON objects "
"with three properties: \"pk\", \"model\" and \"fields\". \"fields\" is again "
"an object containing each field's name and value as property and property-"
"value respectively."
msgstr ""

# 1f4b09cbbe754bbe8b4bd5ef445e8eea
#: ../../topics/serialization.txt:250
msgid ""
"Foreign keys just have the PK of the linked object as property value. "
"ManyToMany-relations are serialized for the model that defines them and are "
"represented as a list of PKs."
msgstr ""

#: ../../topics/serialization.txt:254
msgid ""
"Be aware that not all Django output can be passed unmodified to :mod:`json`. "
"For example, if you have some custom type in an object to be serialized, "
"you'll have to write a custom :mod:`json` encoder for it. Something like "
"this will work::"
msgstr ""

#: ../../topics/serialization.txt:267
msgid ""
"You can then pass ``cls=LazyEncoder`` to the ``serializers.serialize()`` "
"function::"
msgstr ""

#: ../../topics/serialization.txt:274
msgid ""
"Also note that GeoDjango provides a :doc:`customized GeoJSON serializer </"
"ref/contrib/gis/serializers>`."
msgstr ""

#: ../../topics/serialization.txt:278
msgid "``DjangoJSONEncoder``"
msgstr ""

#: ../../topics/serialization.txt:282
msgid ""
"The JSON serializer uses ``DjangoJSONEncoder`` for encoding. A subclass of :"
"class:`~json.JSONEncoder`, it handles these additional types:"
msgstr ""

#: ../../topics/serialization.txt:287
msgid ":class:`~datetime.datetime`"
msgstr ""

#: ../../topics/serialization.txt:286
msgid ""
"A string of the form ``YYYY-MM-DDTHH:mm:ss.sssZ`` or ``YYYY-MM-DDTHH:mm:ss."
"sss+HH:MM`` as defined in `ECMA-262`_."
msgstr ""

#: ../../topics/serialization.txt:290
msgid ":class:`~datetime.date`"
msgstr ""

#: ../../topics/serialization.txt:290
msgid "A string of the form ``YYYY-MM-DD`` as defined in `ECMA-262`_."
msgstr ""

#: ../../topics/serialization.txt:293
msgid ":class:`~datetime.time`"
msgstr ""

#: ../../topics/serialization.txt:293
msgid "A string of the form ``HH:MM:ss.sss`` as defined in `ECMA-262`_."
msgstr ""

#: ../../topics/serialization.txt:298
msgid ":class:`~datetime.timedelta`"
msgstr ""

#: ../../topics/serialization.txt:296
msgid ""
"A string representing a duration as defined in ISO-8601. For example, "
"``timedelta(days=1, hours=2, seconds=3.4)`` is represented as "
"``'P1DT02H00M03.400000S'``."
msgstr ""

#: ../../topics/serialization.txt:301
msgid ""
":class:`~decimal.Decimal`, ``Promise`` (``django.utils.functional.lazy()`` "
"objects), :class:`~uuid.UUID`"
msgstr ""

#: ../../topics/serialization.txt:301
msgid "A string representation of the object."
msgstr ""

# 406f7a9fcdf64a289697fc179dc8d0f5
#: ../../topics/serialization.txt:306
msgid "YAML"
msgstr ""

# 86a626b9354d4296b9124ec6fe67421c
#: ../../topics/serialization.txt:308
msgid ""
"YAML serialization looks quite similar to JSON. The object list is "
"serialized as a sequence mappings with the keys \"pk\", \"model\" and "
"\"fields\". Each field is again a mapping with the key being name of the "
"field and the value the value::"
msgstr ""

# 3948fb5c16d44763b3a7bfbbc034033d
#: ../../topics/serialization.txt:316
msgid ""
"Referential fields are again just represented by the PK or sequence of PKs."
msgstr ""

# d9fc343f240e451bb8f33afd2982eefe
#: ../../topics/serialization.txt:321
msgid "Natural keys"
msgstr ""

# 8488aef23215450fa97f524ac42e1385
#: ../../topics/serialization.txt:323
msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""

# e62de72e214f40fd940e176de2f3c58c
#: ../../topics/serialization.txt:328
msgid ""
"Consider the case of a list of objects that have a foreign key referencing :"
"class:`~django.contrib.contenttypes.models.ContentType`. If you're going to "
"serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`migrate` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, :class:`~django."
"contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

# 6bf64397ee114d10b4bb9d7d4804f69a
#: ../../topics/serialization.txt:342
msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""

# 23534447895f4c3c96ea3e53e4e61250
#: ../../topics/serialization.txt:348
msgid ""
"There is also the matter of convenience. An integer id isn't always the most "
"convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""

# 613d5d14371a4446bd97f4e4bff5463b
#: ../../topics/serialization.txt:352
msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""

# 18a5a8388674425684614e3e8cddd95d
#: ../../topics/serialization.txt:357
msgid "Deserialization of natural keys"
msgstr ""

# 5ef0d3fc4e6444488c486c2821216ba3
#: ../../topics/serialization.txt:359
msgid "Consider the following two models::"
msgstr ""

# f07cabce99af4e0b8ec717444eab6617
#: ../../topics/serialization.txt:376
msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

# e0f5c4db9f8241d2adda5d3fc0624cfb
#: ../../topics/serialization.txt:390
msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""

# 496d9fb9656644cab4770d15f428bb8c
#: ../../topics/serialization.txt:394
msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""

# 9646cb764e5a45a0b39945f8e81cd0d8
#: ../../topics/serialization.txt:417
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

# 516dcd27af1d4240b30edbba073eb1e3
#: ../../topics/serialization.txt:430
msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into "
"the primary key of an actual ``Person`` object."
msgstr ""

# 6f8c4b869a114d45a27477a3594201a6
#: ../../topics/serialization.txt:436
msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either unique=True on a single field, or ``unique_together`` over "
"multiple fields) for the field or fields in your natural key. However, "
"uniqueness doesn't need to be enforced at the database level. If you are "
"certain that a set of fields will be effectively unique, you can still use "
"those fields as a natural key."
msgstr ""

# 14fac0bd3d3346afbae20fb0d0f862a5
#: ../../topics/serialization.txt:445
msgid ""
"Deserialization of objects with no primary key will always check whether the "
"model's manager has a ``get_by_natural_key()`` method and if so, use it to "
"populate the deserialized object's primary key."
msgstr ""

# 32ab1c1564144b00a5ec7ffc78bd7d8c
#: ../../topics/serialization.txt:450
msgid "Serialization of natural keys"
msgstr ""

# 7ce6dcc36bf2421c91bc3b9c2c6bc00b
#: ../../topics/serialization.txt:452
msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

# 87b3d4eac13b46bc86346873d9b373e2
#: ../../topics/serialization.txt:469
msgid ""
"That method should always return a natural key tuple -- in this example, "
"``(first name, last name)``. Then, when you call ``serializers."
"serialize()``, you provide ``use_natural_foreign_keys=True`` or "
"``use_natural_primary_keys=True`` arguments::"
msgstr ""

# 4c1713d265e6497fb3b732c8fc4f3619
#: ../../topics/serialization.txt:477
msgid ""
"When ``use_natural_foreign_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any foreign key reference to objects "
"of the type that defines the method."
msgstr ""

# b9cf23b36ff6404ab4d9b5c6d8221406
#: ../../topics/serialization.txt:481
msgid ""
"When ``use_natural_primary_keys=True`` is specified, Django will not provide "
"the primary key in the serialized data of this object since it can be "
"calculated during deserialization::"
msgstr ""

# d3d3cd8c4fcb4f879d8fcc4b686dd6f8
#: ../../topics/serialization.txt:496
msgid ""
"This can be useful when you need to load serialized data into an existing "
"database and you cannot guarantee that the serialized primary key value is "
"not already in use, and do not need to ensure that deserialized objects "
"retain the same primary keys."
msgstr ""

#: ../../topics/serialization.txt:501
msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, use the :"
"option:`dumpdata --natural-foreign` and :option:`dumpdata --natural-primary` "
"command line flags to generate natural keys."
msgstr ""

# 93fd6d461cfb45aca10394bc7eff5cb4
#: ../../topics/serialization.txt:507
msgid ""
"You don't need to define both ``natural_key()`` and "
"``get_by_natural_key()``. If you don't want Django to output natural keys "
"during serialization, but you want to retain the ability to load natural "
"keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

# 1d639729f75440ecad22007eb81dc2b9
#: ../../topics/serialization.txt:513
msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""

# 7da9e775a04d45bd8e619f48cad6d7bd
#: ../../topics/serialization.txt:518
msgid "Dependencies during serialization"
msgstr ""

# c026303c46ca4b0f952fce55e989edbd
#: ../../topics/serialization.txt:520
msgid ""
"Since natural keys rely on database lookups to resolve references, it is "
"important that the data exists before it is referenced. You can't make a "
"\"forward reference\" with natural keys -- the data you're referencing must "
"exist before you include a natural key reference to that data."
msgstr ""

#: ../../topics/serialization.txt:525
msgid ""
"To accommodate this limitation, calls to :djadmin:`dumpdata` that use the :"
"option:`dumpdata --natural-foreign` option will serialize any model with a "
"``natural_key()`` method before serializing standard primary key objects."
msgstr ""

# 8f72f724f3194da596c5c7160c536265
#: ../../topics/serialization.txt:529
msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""

# d6f4bba335404a87af802c483cc4e2b7
#: ../../topics/serialization.txt:535
msgid ""
"To control this ordering, you can define dependencies on your "
"``natural_key()`` methods. You do this by setting a ``dependencies`` "
"attribute on the ``natural_key()`` method itself."
msgstr ""

# 519ddb02429541faa4262392c13df2f3
#: ../../topics/serialization.txt:539
msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""

# bbc5ff6504fc459b8f77963a1c6309c3
#: ../../topics/serialization.txt:549
msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""

# a32677f58f93420aaaabf9930545061b
#: ../../topics/serialization.txt:557
msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""
