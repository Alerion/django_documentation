# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013, 2014, 2015, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2017-11-16 15:27+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# abfabd9542ed41ddb6bc6ae5c954472a
#: ../../topics/signing.txt:3
msgid "Cryptographic signing"
msgstr "Криптографическая подпись"

# 0b5959e288a5401eb34df0975fc40f34
#: ../../topics/signing.txt:8
msgid ""
"The golden rule of Web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""
"Золотое правило безопасного веб приложения -- это никогда не доверять данным "
"из чужих источников. Временами передача данных через недоверенную среду "
"может оказаться полезной. Криптографически подписанные значения могут "
"безопасно передаваться через недоверенный канал, если известно, что любая "
"подмена данных будет обнаружена."

# 06c95e7eb9d34c2ca96f1453ff5e4b00
#: ../../topics/signing.txt:13
msgid ""
"Django provides both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""
"Django предоставляет низкоуровневое API для подписывания значения и "
"высокоуровневое API для установки и чтения подписанных кук, одного из "
"наиболее часто используемых функционалов подписи в веб приложениях."

# d7a43dc5089441caa5d74d0816a06fc4
#: ../../topics/signing.txt:17
msgid "You may also find signing useful for the following:"
msgstr "Вы также можете найти подпись полезной для следующего:"

# 7838e8911fae455bb1e515a22af27503
#: ../../topics/signing.txt:19
msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""
"Генерация URL для восстановления аккаунта пользователя, которые будут "
"отправлены пользователю, потерявшему свой пароль."

# 4f7c74342be04ef4bf3615cf11b9c3af
#: ../../topics/signing.txt:22
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr "Проверка целостности данных, спрятанных в скрытом поле формы."

# 52d735fe0f8a40709c8e6477de82de41
#: ../../topics/signing.txt:24
msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected "
"resource, for example a downloadable file that a user has paid for."
msgstr ""
"Генерация одноразового секретного URL для обеспечения временного доступа к "
"защищённому ресурсу, например на скачивание файла за который заплатил "
"пользователь."

# 84287ac23a5a4b91b22f2a509b32906a
#: ../../topics/signing.txt:29
msgid "Protecting the ``SECRET_KEY``"
msgstr "Защита ``SECRET_KEY``"

# b3814905aee14c8b83524965666e4815
#: ../../topics/signing.txt:31
msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random :setting:"
"`SECRET_KEY` value. This value is the key to securing signed data -- it is "
"vital you keep this secure, or attackers could use it to generate their own "
"signed values."
msgstr ""
"При создании нового Django проекта с помощью :djadmin:`startproject` "
"автоматически генерируется файл ``settings.py`` и определяется случайное "
"значение :setting:`SECRET_KEY`. Это значение является ключевым аспектом "
"защиты подписанных данных -- очень важно сохранять его в тайне. В противном "
"случае у сторонних людей появляется возможность генерировать собственные "
"подписанные значения."

# 872938d72dd64580a5b9c588df914358
#: ../../topics/signing.txt:38
msgid "Using the low-level API"
msgstr "Использование низкоуровневого API"

# 9e530c53052641b782bc909022197e8f
#: ../../topics/signing.txt:40
msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign "
"a value, first instantiate a ``Signer`` instance::"
msgstr ""
"Методы подписи расположены в модуле ``django.core.signing``. Для того, чтобы "
"подписать значение, сначала создайте экземпляр ``Signer``::"

# 7dfbe325246e46018cb39d5a3ecddd35
#: ../../topics/signing.txt:49
msgid ""
"The signature is appended to the end of the string, following the colon. You "
"can retrieve the original value using the ``unsign`` method::"
msgstr ""
"Сигнатура добавляется в конец строки, отделённая двоеточием. Вы можете "
"получить оригинальное значение с помощью метода ``unsing``::"

# bed6687c7e6147e9943f5c946f4602d6
#: ../../topics/signing.txt:56
msgid ""
"If the signature or value have been altered in any way, a ``django.core."
"signing.BadSignature`` exception will be raised::"
msgstr ""
"Если подпись или значение были изменены любым способом, то будет вызвано "
"исключение ``django.core.signing.BadSignature``::"

# ed96a08d3c0a4c25b31b6197b8c62b26
#: ../../topics/signing.txt:66
msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""
"По умолчанию, класс ``Signer`` использует настройку :setting:`SECRET_KEY` "
"для генерации сигнатур. Вы можете использовать другой ключ, передав его в "
"конструктор::"

# f17f7b5617b643e78202a25feea88bc8
#: ../../topics/signing.txt:77
msgid ""
"Returns a signer which uses ``key`` to generate signatures and ``sep`` to "
"separate values. ``sep`` cannot be in the `URL safe base64 alphabet <https://"
"tools.ietf.org/html/rfc4648#section-5>`_.  This alphabet contains "
"alphanumeric characters, hyphens, and underscores."
msgstr ""
"Возвращает класс для подписи, который использует ``key`` для генерации "
"подписи и ``sep`` для разделения значений. ``sep`` не может быть частью `URL "
"safe base64 таблицы <https://tools.ietf.org/html/rfc4648#section-5>`_, "
"которая содержит буквы, цифры, дефис и подчеркивание."

# cd4d774a021e4123bc008e4145b27c26
#: ../../topics/signing.txt:83
msgid "Using the ``salt`` argument"
msgstr "Использование аргумента ``salt``"

# 39d0996efe0b48a39a8800aa8da88b43
#: ../../topics/signing.txt:85
msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both "
"the salt and your :setting:`SECRET_KEY`::"
msgstr ""
"Если требуется, чтобы подпись одинаковой строки всегда создавала разные "
"сигнатуры, вы можете использовать необязательный аргумент ``salt`` "
"конструктора. Функция подписи воспользуется \"солью\" и :setting:"
"`SECRET_KEY`::"

# e6f6f9c26745466d8bf8f6c9f1a9b188
#: ../../topics/signing.txt:99
msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as "
"input to another piece of code that is generating (and verifying) signatures "
"using a different salt."
msgstr ""
"Использование \"соли\" размещает разные сигнатуры в разных именованных "
"областях. Сигнатура из одной области (определённая значением \"соли\") не "
"может быть использована для проверки исходной строки текста в другой "
"именованной области (другое значение \"соли\"). Результатом является "
"невозможность использовать атакующим строки, подписанные в одном месте, в "
"качестве источника данных в другом."

# d4c3a392329b4c429a49695e9e41888e
#: ../../topics/signing.txt:107
msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""
"В отличие от значения :setting:`SECRET_KEY`, ваша \"соль\" не является "
"секретом."

# 01b7b85d36e444a5b8cb1d24db9c8833
#: ../../topics/signing.txt:111
msgid "Verifying timestamped values"
msgstr "Проверка значений с подписанным слепком времени"

# 6d6e6704db3d497e8b48a3f018c5a5be
#: ../../topics/signing.txt:113
msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""
"``TimestampSigner`` -- подкласс :class:`~Signer`, который добавляет "
"подписанный слепок времени к значению. Это позволяет вам удостоверять, что "
"подписанное значение было создано в указанный период времени::"

# 767347073e8243e99d067374cc275909
#: ../../topics/signing.txt:137
msgid "Sign ``value`` and append current timestamp to it."
msgstr "Подписывает ``value`` и добавляет текущее время к нему."

# d12dac9f2c5545d89f41d2d1088659b6
#: ../../topics/signing.txt:141
msgid ""
"Checks if ``value`` was signed less than ``max_age`` seconds ago, otherwise "
"raises ``SignatureExpired``. The ``max_age`` parameter can accept an integer "
"or a :py:class:`datetime.timedelta` object."
msgstr ""
"Проверяет, был ли подписан ``value`` меньше чем ``max_age`` секунд назад, "
"иначе выбрасывает исключение ``SignatureExpired``. Параметр ``max_age`` "
"может принимать как целое, так и объект вида :py:class:`datetime.timedelta`."

# ea6694af73cd4cccbae8a9d4dc0ef57a
#: ../../topics/signing.txt:146
msgid "Protecting complex data structures"
msgstr "Защита сложных структур данных"

# 662f79d4a0f14262bf3e3d8649b62a18
#: ../../topics/signing.txt:148
msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"signing module's ``dumps`` and ``loads`` functions. These imitate Python's "
"pickle module, but use JSON serialization under the hood. JSON ensures that "
"even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to "
"execute arbitrary commands by exploiting the pickle format::"
msgstr ""
"Если вам потребуется защитить список, кортеж или словарь, вы можете это "
"сделать с помощью функций ``dumps`` и ``loads`` модуля. Они имитируют "
"поведение функций модуля Pickle, но используют JSON сериализацию. JSON "
"гарантирует, что даже украв ваш :setting:`SECRET_KEY`, атакующий не сможет "
"выполнить определённые команды взломав pickle формат::"

# ee8e493bd6964679b623063a419dd21c
#: ../../topics/signing.txt:161
msgid ""
"Because of the nature of JSON (there is no native distinction between lists "
"and tuples) if you pass in a tuple, you will get a list from ``signing."
"loads(object)``::"
msgstr ""
"Из-за особенностей JSON (нет отдельных типов для списка и кортежа), если "
"передать кортеж, в результате выполнения ``signing.loads(object)`` будет "
"получен список::"

# 25adc06622604f4f95465b1b9aeb5b5b
#: ../../topics/signing.txt:172
msgid ""
"Returns URL-safe, sha1 signed base64 compressed JSON string. Serialized "
"object is signed using :class:`~TimestampSigner`."
msgstr ""
"Возвращает безопасный (с точки зрения URL), подписанный SHA1, закодированную "
"base64 JSON строку. Сериализованный объект подписывается с помощью класса :"
"class:`~TimestampSigner`."

# 3fac9f4b391b4733ab2ed2ac244f280b
#: ../../topics/signing.txt:177
msgid ""
"Reverse of ``dumps()``, raises ``BadSignature`` if signature fails. Checks "
"``max_age`` (in seconds) if given."
msgstr ""
"Обратный методу``dumps()``, вызывает исключение ``BadSignature``, если "
"проверка подписи не пройдена. Проверяет ``max_age`` (в секундах) при его "
"наличии."

#~ msgid "Previously, the ``max_age`` parameter only accepted an integer."
#~ msgstr "Ранее параметр the ``max_age`` принимал только целые значения."

# 7b3b0897289d4345ba2dd65753fbd3ab
#~ msgid ""
#~ "Returns a signer which uses ``key`` to generate signatures and ``sep`` to "
#~ "separate values."
#~ msgstr ""
#~ "Возвращает подписавшего, который использовал ``key`` для генерации "
#~ "сигнатур и ``sep`` для отдельных значений."
