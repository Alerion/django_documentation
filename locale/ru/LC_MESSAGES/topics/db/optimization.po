# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2015-11-17 15:27+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# c550f10a3f8e403ca35ec3485c432600
#: ../../topics/db/optimization.txt:3
msgid "Database access optimization"
msgstr "Оптимизация работы с базой данных"

# 366a113245f740c690331ac2c94def45
#: ../../topics/db/optimization.txt:5
msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""
"Django всячески помогает разработчикам получить максимальную отдачу от "
"используемой базы данных. В этом разделе собрана информация, которая "
"пригодится при оптимизации вашего приложения."

# 33e617a2572e4629a7f7be4ea668a61f
#: ../../topics/db/optimization.txt:11
msgid "Profile first"
msgstr "Первым делом - профайлинг"

# 4d1d0c8e70ee4d1ea0f53fdf8b85602e
#: ../../topics/db/optimization.txt:13
msgid ""
"As general programming practice, this goes without saying. Find out :ref:"
"`what queries you are doing and what they are costing you <faq-see-raw-sql-"
"queries>`. You may also want to use an external project like django-debug-"
"toolbar_, or a tool that monitors your database directly."
msgstr ""
"Для практикующих программистов - это само собой разумеется. Первым делом "
"определите :ref:`какие запросы выполняются и как быстро <faq-see-raw-sql-"
"queries>`. Вы также можете использовать сторонние приложения, например, "
"django-debug-toolbar_, или инструменты, которые мониторят непосредственно "
"базу данных."

# 742acb2ef89c4035b36d4cd91eae5e43
#: ../../topics/db/optimization.txt:18
msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as "
"required since this will depend on your application and server."
msgstr ""
"Вы можете оптимизировать скорость работы, или потребляемую память, или оба "
"параметра. Иногда оптимизация одного пагубно влияет на другой параметр, но "
"иногда можно улучшить оба. Так же нагрузка на базу данных может быть не так "
"важна(для вас) как нагрузка на сервер(работы python). Вы сами определяете "
"золотую средину, и не забывайте выполнить профайлинг всего этого, перед "
"оптимизацией."

# 32e8a24617284c8499582a397d2dbe5e
#: ../../topics/db/optimization.txt:26
msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""
"Не забывайте выполнять профайлинг после каждого изменения, чтобы "
"удостоверится что изменения повысили производительность, и что это повышение "
"стоит усложнения кода. **Все** советы ниже могут и не сработать в вашем "
"случае, или даже понизить производительность."

# 4f80163cb1a9438d9111c3b3b8bcc9d4
#: ../../topics/db/optimization.txt:35
msgid "Use standard DB optimization techniques"
msgstr "Используйте стандартные техники оптимизации БД"

# e7ce268ce1f74743a555d35a22133e7b
#: ../../topics/db/optimization.txt:37
msgid "...including:"
msgstr "...включая:"

# e302e88c534748d4935f47f60264d10c
#: ../../topics/db/optimization.txt:39
msgid ""
"Indexes_. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`Field.db_index <django.db."
"models.Field.db_index>` or :attr:`Meta.index_together <django.db.models."
"Options.index_together>` to add these from Django. Consider adding indexes "
"to fields that you frequently query using :meth:`~django.db.models.query."
"QuerySet.filter()`, :meth:`~django.db.models.query.QuerySet.exclude()`, :"
"meth:`~django.db.models.query.QuerySet.order_by()`, etc. as indexes may help "
"to speed up lookups. Note that determining the best indexes is a complex "
"database-dependent topic that will depend on your particular application. "
"The overhead of maintaining an index may outweigh any gains in query speed."
msgstr ""
"`Индексы <http://ru.wikipedia.org/wiki/%D0%98%D0%BD%D0%B4%D0%B5%D0%BA"
"%D1%81_(%D0%B1%D0%B0%D0%B7%D1%8B_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85)>`_. "
"Следует добавить в первую очередь, *после* того, когда вы определите через "
"профайлинг, какие индексы требуются. Используйте :attr:`Field.db_index "
"<django.db.models.Field.db_index>` или :attr:`Meta.index_together <django.db."
"models.Options.index_together>` чтобы добавить индексы из Django. Следует "
"добавить индексы полям, которые используются в :meth:`~django.db.models."
"query.QuerySet.filter()`, :meth:`~django.db.models.query.QuerySet."
"exclude()`, :meth:`~django.db.models.query.QuerySet.order_by()` и др., т.к. "
"они ускоряют поиск по полям. Куда добавлять индексы - сложный вопрос, "
"который зависит от БД и вашего приложения. Накладные расходы на поддержку "
"индекса могут перевесить полученное ускорение при выполнении запросов."

# d265a3a52510472cb9bbae3172418fd1
#: ../../topics/db/optimization.txt:53
msgid "Appropriate use of field types."
msgstr "Используйте правильные типы полей."

# 08f3b1017d674309809a1426f1f7bbac
#: ../../topics/db/optimization.txt:55
msgid ""
"We will assume you have done the obvious things above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""
"Предположим вы уже выполнили эти очевидные вещи. Остальная часть этого "
"раздела расскажет, как оптимально использовать Django. Этот документ не "
"описывает другие методы оптимизации, которые применимы для всех \"тяжелых\" "
"операций, например, :doc:`кэширование </topics/cache>`."

# 98dac2da39094c20a0aed5e0bf19620b
#: ../../topics/db/optimization.txt:62
#, fuzzy
msgid "Understand ``QuerySet``\\s"
msgstr "Понимание QuerySets"

# 62b934cd1fad405897ec7b511bfedabc
#: ../../topics/db/optimization.txt:64
msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""
"Понимание :doc:`QuerySets </ref/models/querysets>` - важная часть для "
"написания эффективного простого кода. В частности:"

# bb9128fc0e05465192152478a14c8c46
#: ../../topics/db/optimization.txt:68
#, fuzzy
msgid "Understand ``QuerySet`` evaluation"
msgstr "Понимание выполнения QuerySet"

# 49090294f46840468b6483438b16e9ff
#: ../../topics/db/optimization.txt:70
msgid "To avoid performance problems, it is important to understand:"
msgstr "Для избежания проблем с производительностью, важно понимать:"

# 29c270420daf49c8996300348d4b5225
#: ../../topics/db/optimization.txt:72
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr "что :ref:`QuerySets - \"ленивый\" <querysets-are-lazy>`."

# a64b14e054174c82b5dc65077474ae7d
#: ../../topics/db/optimization.txt:74
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr "когда :ref:`происходит вычисление <when-querysets-are-evaluated>`."

# c2bbfe769c044d7eaad6f8bc279ace65
#: ../../topics/db/optimization.txt:76
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr "как :ref:`данные загружаются в память <caching-and-querysets>`."

# 4b07335a0d5c4844af8e88ed7d44fdaa
#: ../../topics/db/optimization.txt:79
msgid "Understand cached attributes"
msgstr "Понимание кэширования атрибутов"

# 299e3156d72b44bf8b598d1f885d3169
#: ../../topics/db/optimization.txt:81
msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result "
"of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example Weblog models "
"<queryset-model-example>`::"
msgstr ""
"Как и кэширование всего ``QuerySet``, существует кэширование значения "
"атрибутов в объектах ORM. В общем, не вызываемые атрибуты(not callable) "
"будут закэшированы. Например, возьмем :ref:`модель Weblog из примеров "
"<queryset-model-example>`::"

# 1c36be41b4cf4a87ab9c4724be280999
#: ../../topics/db/optimization.txt:90
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""
"Но обращение к вызываемым атрибутам каждый раз выполняет запрос к базе "
"данных::"

# 2f9ca2ae11b74c72bf5b83df1be45c9d
#: ../../topics/db/optimization.txt:96
msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""
"Будьте внимательны читая код шаблонов - шаблонизатор не позволяет "
"использовать скобки и автоматом вызывает функции и методы."

# 52e3c08d0bf04e63b61a622384914e93
#: ../../topics/db/optimization.txt:100
msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching when required, for example using the :class:`~django.utils."
"functional.cached_property` decorator."
msgstr ""
"Будьте внимательны с собственными свойствами - вы должны самостоятельно "
"реализовать кэширование, используя, например, декоратор :class:`~django."
"utils.functional.cached_property`."

# b4ea962ec4af4177bf3eff6c1581a766
#: ../../topics/db/optimization.txt:105
msgid "Use the ``with`` template tag"
msgstr "Используйте шаблонный тэг ``with``"

# 373a4ad8d020471f93fe88d083d07572
#: ../../topics/db/optimization.txt:107
msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use "
"the :ttag:`with` template tag."
msgstr ""
"Для использования кэширования в ``QuerySet`` можно использовать шаблонный "
"тэг :ttag:`with`."

# cbe492922fb24ead87801d69fca514f6
#: ../../topics/db/optimization.txt:111
msgid "Use ``iterator()``"
msgstr "Используйте ``iterator()``"

# dac021ccb63e4035952c863585eb1fa1
#: ../../topics/db/optimization.txt:113
msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can "
"cause a large amount of memory to be used. In this case, :meth:`~django.db."
"models.query.QuerySet.iterator()` may help."
msgstr ""
"Если у вас очень много объектов, кэширование в ``QuerySet`` может "
"использовать большой объем памяти. В этом случае может помочь :meth:`~django."
"db.models.query.QuerySet.iterator()`."

# 7b65efe2f9214ff4b0d0714be62a0039
#: ../../topics/db/optimization.txt:118
msgid "Do database work in the database rather than in Python"
msgstr "Выполняйте задачи базы данных в базе данных, а не в Python"

# 479f5aff470346e3af4ac5bbd9ce78e9
#: ../../topics/db/optimization.txt:120
msgid "For instance:"
msgstr "Например:"

# c0853f15029d42648049aff911b788c3
#: ../../topics/db/optimization.txt:122
msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""
"Самое простое: используйте :ref:`filter и exclude <queryset-api>` для "
"фильтрации данных в БД."

# 37c6e65eff90457cba6a8ecc9dac551e
#: ../../topics/db/optimization.txt:125
msgid ""
"Use :class:`F expressions <django.db.models.F>` to filter based on other "
"fields within the same model."
msgstr ""
"Используйте :class:`объект F() <django.db.models.F>` для фильтрации по "
"другим полям модели."

# bee3827876144f8fb70a6cd44a075d5a
#: ../../topics/db/optimization.txt:128
msgid ""
"Use :doc:`annotate to do aggregation in the database </topics/db/"
"aggregation>`."
msgstr ""
"Используйте :doc:`annotate для выполнения агрегации в базе данных </topics/"
"db/aggregation>`."

# 234f9537eff44f48b3d2ae2584c44740
#: ../../topics/db/optimization.txt:131
msgid "If these aren't enough to generate the SQL you need:"
msgstr "Если этого не достаточно для создания необходимого SQL:"

# 7443435178f245b18937b9bfb68a08a7
#: ../../topics/db/optimization.txt:134
msgid "Use ``RawSQL``"
msgstr "Используйте ``RawSQL``"

# a40efcd2596e45378cf6dfd271f7ae73
#: ../../topics/db/optimization.txt:136
msgid ""
"A less portable but more powerful method is the :class:`~django.db.models."
"expressions.RawSQL` expression, which allows some SQL to be explicitly added "
"to the query. If that still isn't powerful enough:"
msgstr ""
"Не совсем переносимый между разными БД, но очень мощный метод -- :class:"
"`~django.db.models.expressions.RawSQL`, который позволяет добавить SQL "
"непосредственно в запрос. Если и этого вам не достаточно:"

# 7443435178f245b18937b9bfb68a08a7
#: ../../topics/db/optimization.txt:141
msgid "Use raw SQL"
msgstr "Используйте SQL"

# f17d0d6a954a4642a2a381faf9fd05e9
#: ../../topics/db/optimization.txt:143
msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models </topics/"
"db/sql>`. Use ``django.db.connection.queries`` to find out what Django is "
"writing for you and start from there."
msgstr ""
"Используйте :doc:`собственный SQL запрос для получения данных и загрузки в "
"модели </topics/db/sql>`. Используйте ``django.db.connection.queries``, "
"чтобы понять что создает Django и начните с изменения этого запроса."

# 90a315af6e21457aaecbeafe9c0bd14f
#: ../../topics/db/optimization.txt:148
msgid "Retrieve individual objects using a unique, indexed column"
msgstr "Получения объекта, используя уникальное или проиндексированное поле"

# 3e3d0b9c3c8749e2b4f38f2234f433c3
#: ../../topics/db/optimization.txt:150
msgid ""
"There are two reasons to use a column with :attr:`~django.db.models.Field."
"unique` or :attr:`~django.db.models.Field.db_index` when using :meth:"
"`~django.db.models.query.QuerySet.get` to retrieve individual objects. "
"First, the query will be quicker because of the underlying database index. "
"Also, the query could run much slower if multiple objects match the lookup; "
"having a unique constraint on the column guarantees this will never happen."
msgstr ""
"Есть две причины использовать поле с :attr:`~django.db.models.Field.unique` "
"или :attr:`~django.db.models.Field.db_index` в методе :meth:`~django.db."
"models.query.QuerySet.get`. Первая - запрос будет быстрее т.к. будет "
"использовать индекс в базе данных. Вторая - запрос будет гораздо медленнее, "
"если несколько объектов будут удовлетворять запросу, уникальное поле "
"исключает такую ситуацию."

# 0715b8536d1e4418ae5ae4e18f72ea3c
#: ../../topics/db/optimization.txt:158
msgid "So using the :ref:`example Weblog models <queryset-model-example>`::"
msgstr "Для нашего :ref:`примера блога <queryset-model-example>`::"

# 0840219e352743978221119fb34baa38
#: ../../topics/db/optimization.txt:162
msgid "will be quicker than:"
msgstr "будет быстрее чем:"

# 8e447906ef5a4c9b80a714d1a47326a8
#: ../../topics/db/optimization.txt:166
msgid ""
"because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr "т.к. ``id`` проиндексировано и уникально."

# b71057a05b874f92bd95be9fb4144c37
#: ../../topics/db/optimization.txt:168
msgid "Doing the following is potentially quite slow:"
msgstr "Следующий запрос будет скорее всего медленным:"

# afb91a5db1314f30adc688e4f4221085
#: ../../topics/db/optimization.txt:172
msgid ""
"First of all, ``headline`` is not indexed, which will make the underlying "
"database fetch slower."
msgstr ""
"Во-первых `headline` не проиндексировано и база данных будет медленнее "
"вычислять результат."

# 8dede60bdbfa4b1a9f962f8687448469
#: ../../topics/db/optimization.txt:175
msgid ""
"Second, the lookup doesn't guarantee that only one object will be returned. "
"If the query matches more than one object, it will retrieve and transfer all "
"of them from the database. This penalty could be substantial if hundreds or "
"thousands of records are returned. The penalty will be compounded if the "
"database lives on a separate server, where network overhead and latency also "
"play a factor."
msgstr ""
"Во-вторых - запрос не гарантирует, что будет возвращен только один объект. "
"Если несколько объектов удовлетворяют запросу, они все будут переданы с базы "
"данных. Задержка может быть значительной при передачи сотен или тысяч "
"объектов. Еще большую задержку получаем, если база данных находится на "
"другом сервере."

# 99311418590e45cbb9490c71ec3bbb86
#: ../../topics/db/optimization.txt:183
msgid "Retrieve everything at once if you know you will need it"
msgstr "Загружайте все данные сразу, если уверены, что будете использовать их."

# 6f055181058148f690f0bbabd9e08994
#: ../../topics/db/optimization.txt:185
msgid ""
"Hitting the database multiple times for different parts of a single 'set' of "
"data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a "
"query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""
"Обращение несколько раз к базе данных для получения различных частей одного "
"\"массива\" данных обычно менее эффективно, чем получение всех данных одним "
"запросом. Это особенно важно для запросов, выполняемых в цикле, что может "
"привести к большому количеству запросов. Поэтому:"

# 78584f80ddf34e7cb81ed39ddb05a7ca
#: ../../topics/db/optimization.txt:192
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr "Используйте ``QuerySet.select_related()`` и ``prefetch_related()``"

# 828d22e2734547d2aa87e4d37e9a5055
#: ../../topics/db/optimization.txt:194
msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""
"Изучите :meth:`~django.db.models.query.QuerySet.select_related` и :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` и используйте их в:"

# 67f974fd1f3b439689ed34f3826b08e1
#: ../../topics/db/optimization.txt:198
msgid "in view code,"
msgstr "коде представлений,"

# f28cc50fafe246d5bbaa4e4b81c98c29
#: ../../topics/db/optimization.txt:200
msgid ""
"and in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""
":doc:`своих менеджерах и в менеджерах по умолчанию </topics/db/managers>` "
"при необходимости. Учитывайте когда используется менеджер, а когда нет; "
"иногда это не однозначно, проверяйте самостоятельно."

# 7e6fad8c043b43e8a8c7bb9ee74f894e
#: ../../topics/db/optimization.txt:205
msgid "Don't retrieve things you don't need"
msgstr "Не получайте данные, которые вам не нужны"

# 89960ddd479f488fa44a41f202dd1a33
#: ../../topics/db/optimization.txt:208
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr "Используйте ``QuerySet.values()`` и ``values_list()``"

# 4aef5fe470a7490c9d32b7bea937a4e7
#: ../../topics/db/optimization.txt:210
msgid ""
"When you just want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of :meth:`~django.db.models.query."
"QuerySet.values()`. These can be useful for replacing model objects in "
"template code - as long as the dicts you supply have the same attributes as "
"those used in the template, you are fine."
msgstr ""
"Если вам нужен ``dict`` или ``list`` значений, а не объекты моделей ORM, "
"используйте :meth:`~django.db.models.query.QuerySet.values()`. Это можно "
"использовать для подмены объектов моделей в шаблоне - если атрибуты словаря "
"совпадают с используемыми атрибутами моделей, все будет хорошо работать."

# de2cc55d327e4c849f79f5fed2616504
#: ../../topics/db/optimization.txt:218
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr "Используйте ``QuerySet.defer()`` и ``only()``"

# 1c1303e8125d453f9a60e826daebe0f8
#: ../../topics/db/optimization.txt:220
msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db."
"models.query.QuerySet.only()` if there are database columns you know that "
"you won't need (or won't need in most cases) to avoid loading them. Note "
"that if you *do* use them, the ORM will have to go and get them in a "
"separate query, making this a pessimization if you use it inappropriately."
msgstr ""
"Используйте :meth:`~django.db.models.query.QuerySet.defer()` и :meth:"
"`~django.db.models.query.QuerySet.only()`, если есть колонки в базе данных, "
"которые вы не будете использовать. Запомните, что если вы все же *будете* их "
"использовать, ORM сделает дополнительный запрос для их получения, что "
"уменьшит производительность."

# 3f28276c21184e25b145120c3dd54ff8
#: ../../topics/db/optimization.txt:226
msgid ""
"Also, be aware that there is some (small extra) overhead incurred inside "
"Django when constructing a model with deferred fields. Don't be too "
"aggressive in deferring fields without profiling as the database has to read "
"most of the non-text, non-VARCHAR data from the disk for a single row in the "
"results, even if it ends up only using a few columns. The ``defer()`` and "
"``only()`` methods are most useful when you can avoid loading a lot of text "
"data or for fields that might take a lot of processing to convert back to "
"Python. As always, profile first, then optimize."
msgstr ""
"Заметим, что при создании моделей с \"deferred\" полями Django выполняет "
"некоторую дополнительную работу. Не перестарайтесь, так как база данных "
"читает большинство не текстовых, не VARCHAR данных с диска при запросе, даже "
"если будет использоваться только несколько колонок, используйте профайлинг. "
"Методы ``defer()`` и ``only()`` полезны, если вы можете избежать загрузки "
"большинства текстовых полей или полей, которые долго конвертируются в "
"объекты Python. Как всегда - используйте сначала профайлинг."

# b90ecba80b574bd08cec9a78f3c429b6
#: ../../topics/db/optimization.txt:236
#, fuzzy
msgid "Use ``QuerySet.count()``"
msgstr "Используйте QuerySet.count()"

# e0e2731f65f1400b9182c0a7abac4bcd
#: ../../topics/db/optimization.txt:238
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""
"...вместо``len(queryset)``, если вам необходимо только количество объектов."

# c2ee8b46f953450b96f3866e1a8ab3af
#: ../../topics/db/optimization.txt:241
#, fuzzy
msgid "Use ``QuerySet.exists()``"
msgstr "Используйте QuerySet.exists()"

# 9d2de4bd2bd142a285373ede3df71b41
#: ../../topics/db/optimization.txt:243
msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""
"...если необходимо проверить есть ли результат, вместо ``if queryset``."

# 825db166712945788583cb66a110538d
#: ../../topics/db/optimization.txt:246
msgid "But:"
msgstr "Но:"

# 680a7b16493444fca8c997d7fb7a5242
#: ../../topics/db/optimization.txt:251
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr "Но не переусердствуйте с ``count()`` и ``exists()``"

# 8d40b1aac7f2438bb1c89fdc4301e3ff
#: ../../topics/db/optimization.txt:253
msgid ""
"If you are going to need other data from the QuerySet, just evaluate it."
msgstr "Если вам необходимы остальные данные из QuerySet, просто вычислите их."

# 4c0df63b84774817ae5177f8878b3ffa
#: ../../topics/db/optimization.txt:255
msgid ""
"For example, assuming an Email model that has a ``body`` attribute and a "
"many-to-many relation to User, the following template code is optimal:"
msgstr ""
"Например, возьмем модель Email с полем ``body`` и связь многое-го-многим с "
"моделью User, следующий шаблон будет оптимальным:"

# cdbfa25b0f35471aa0165c38aeb61e67
#: ../../topics/db/optimization.txt:274
msgid "It is optimal because:"
msgstr "Он оптимальный потому что:"

# 9539eb6825604efcb39d33b0ed04cb68
#: ../../topics/db/optimization.txt:276
msgid ""
"Since QuerySets are lazy, this does no database queries if 'display_inbox' "
"is False."
msgstr ""
"Так как QuerySets ленивый, запрос не будет выполнен при 'display_inbox' "
"равном False."

# cb9c698a658944e596e39d5c85f766a8
#: ../../topics/db/optimization.txt:279
msgid ""
"Use of :ttag:`with` means that we store ``user.emails.all`` in a variable "
"for later use, allowing its cache to be re-used."
msgstr ""
"Тег :ttag:`with` означает что мы сохраняем ``user.emails.all`` в переменной "
"для последующего использования."

# 41963778875445df8194f09882561a4b
#: ../../topics/db/optimization.txt:282
msgid ""
"The line ``{% if emails %}`` causes ``QuerySet.__bool__()`` to be called, "
"which causes the ``user.emails.all()`` query to be run on the database, and "
"at the least the first line to be turned into an ORM object. If there aren't "
"any results, it will return False, otherwise True."
msgstr ""
"Строка ``{% if emails %}`` вызывает ``QuerySet.__bool__()``, который "
"выполняет``user.emails.all()`` что приводит к запросу к базе данных, и как "
"минимум первая строка ответа будет преобразована в ORM объект. Если "
"результат будет пуст, вернется False, иначе True."

# 897016007b2242d28e538e6fec0ee0de
#: ../../topics/db/optimization.txt:287
msgid ""
"The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out "
"the rest of the cache without doing another query."
msgstr ""
"Использование ``{{ emails|length }}`` вызывает ``QuerySet.__len__()``, "
"заполняя оставшийся кэш без выполнения запроса."

# 880be6de921144128e7de9856d8ecaed
#: ../../topics/db/optimization.txt:290
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ":ttag:`for` выполняет цикл по уже заполненному кэшу."

# f18cf12f128f42fba506a84fa4f36446
#: ../../topics/db/optimization.txt:292
msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is the use of the :ttag:`with` tag. Using "
"``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause "
"additional queries."
msgstr ""
"В общем этот код делает один или ноль запросов к базе данных. Единственная "
"необходимая оптимизация -- это использование тега :ttag:`with`. "
"Использование ``QuerySet.exists()`` или ``QuerySet.count()`` вызвало бы "
"дополнительные запросы."

# b0119bef52584804a9822cda3e081ffd
#: ../../topics/db/optimization.txt:298
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr "Используйте ``QuerySet.update()`` и ``delete()``"

# 490e14f2ea55444cbd90de13bd971e97
#: ../../topics/db/optimization.txt:300
msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""
"Вместо загрузки данных в объекты, изменения значений и отдельного их "
"сохранения, используйте SQL UPDATE запросы через :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Аналогично используйте :ref:`массовое удаление "
"<topics-db-queries-delete>` при возможности."

# 9ff2b21223164cd9a2bab0057145fbb1
#: ../../topics/db/optimization.txt:305
msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals </ref/"
"signals>`."
msgstr ""
"Однако учтите, что эти методы не вызывают ``save()`` или ``delete()`` "
"объектов. Это означает, что логика добавленная вами в эти методы, не будет "
"выполнена, учитывая обработчики :doc:`сигналов от объектов </ref/signals>`."

# d8de60e82ee2404a9885dfcd0236c2ad
#: ../../topics/db/optimization.txt:311
msgid "Use foreign key values directly"
msgstr "Используйте значения ключей непосредственно"

# 0cbe76f10432449e92a33f3923a54a52
#: ../../topics/db/optimization.txt:313
msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""
"Если вам необходимо только значение внешнего ключа, используйте его, т.к. "
"оно уже в объекте, который вы получили, вместо получения всего связанного "
"объекта и использования первичного ключа. Например, делайте::"

# 1f21a309620f4cc38605feb4b259192a
#: ../../topics/db/optimization.txt:319
msgid "instead of::"
msgstr "вместо::"

# 7e6fad8c043b43e8a8c7bb9ee74f894e
#: ../../topics/db/optimization.txt:324
msgid "Don't order results if you don't care"
msgstr "Не сортируйте данные, если вам это не требуется"

# aeccd631c03d4ff9872f3aba0cd5ecc0
#: ../../topics/db/optimization.txt:326
msgid ""
"Ordering is not free; each field to order by is an operation the database "
"must perform. If a model has a default ordering (:attr:`Meta.ordering "
"<django.db.models.Options.ordering>`) and you don't need it, remove it on a "
"``QuerySet`` by calling :meth:`~django.db.models.query.QuerySet.order_by()` "
"with no parameters."
msgstr ""
"Сортировка требует ресурсы. Каждое поле, по которому производится "
"сортировка, требует от базы данных дополнительных ресурсов. Если модель "
"имеет сортировку по-умолчанию (:attr:`Meta.ordering <django.db.models."
"Options.ordering>`) и она вам не нужна, уберите её из запроса с помощью :"
"meth:`~django.db.models.query.QuerySet.order_by()` (без параметров)."

# 0a6ec86a6c4d4401b53874bfabe4f174
#: ../../topics/db/optimization.txt:332
msgid ""
"Adding an index to your database may help to improve ordering performance."
msgstr ""
"Добавление индекса в вашу базу данных может улучшить производительность "
"операции сортировки."

# 8f2cd743a02e414fb829a47c475b9ab8
#: ../../topics/db/optimization.txt:335
msgid "Insert in bulk"
msgstr "Используйте общее добавление"

# 440fe947da084800a61fc04f46faa86b
#: ../../topics/db/optimization.txt:337
msgid ""
"When creating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_create()` method to reduce the number of SQL queries. "
"For example::"
msgstr ""
"При создании объектов, если возможно, используйте метод :meth:`~django.db."
"models.query.QuerySet.bulk_create()` чтобы сократить количество SQL "
"запросов. Например::"

# be83dba411f4479987d55b1077f74f69
# c6c2483ab396498da884cfb6af72144d
#: ../../topics/db/optimization.txt:346 ../../topics/db/optimization.txt:360
msgid "...is preferable to::"
msgstr "...предпочтительнее чем::"

# 0f10db6f7f07418abd894abd7fddbeb5
#: ../../topics/db/optimization.txt:351
msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your "
"use case."
msgstr ""
"Заметим, что есть несколько :meth:`предостережений к этому методу <django.db."
"models.query.QuerySet.bulk_create>`, убедитесь что этот метод подходит для "
"всего случая."

# 62b79a7f55d94eaa93f7e8c956d1ecc5
#: ../../topics/db/optimization.txt:355
msgid ""
"This also applies to :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, so doing::"
msgstr ""
"Это относится и к :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, это::"

# e68b76058bec4186af237f0a0b441b29
#: ../../topics/db/optimization.txt:365
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr "...где ``Bands`` и ``Artists`` связаны через многие-ко-многим."

# 1663bc34bae84627b1f9d221c197f0f7
#~ msgid "Use ``QuerySet.extra()``"
#~ msgstr "Используйте ``QuerySet.extra()``"

# 10b985c3c255419880095c8d54208c31
#~ msgid ""
#~ "Indexes. This is a number one priority, *after* you have determined from "
#~ "profiling what indexes should be added. Use :attr:`django.db.models.Field."
#~ "db_index` or :attr:`Meta.index_together <django.db.models.Options."
#~ "index_together>` to add these from Django."
#~ msgstr ""
#~ "Индексы. Используйте их в первую очередь, *после* того, как определите "
#~ "через профайлинг какие индексы необходимо добавить. Используйте :attr:"
#~ "`django.db.models.Field.db_index` или attr:`Meta.index_together <django."
#~ "db.models.Options.index_together>`, чтобы добавить их через Django."
