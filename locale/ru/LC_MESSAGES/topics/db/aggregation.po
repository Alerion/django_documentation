# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2014, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2017-11-30 13:11+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 0bcaa27a761b4011964d415b54377f59
#: ../../topics/db/aggregation.txt:3
msgid "Aggregation"
msgstr "Агрегация"

# fffa983fd8904be6b538631e3194bf24
#: ../../topics/db/aggregation.txt:7
msgid ""
"The topic guide on :doc:`Django's database-abstraction API </topics/db/"
"queries>` described the way that you can use Django queries that create, "
"retrieve, update and delete individual objects. However, sometimes you will "
"need to retrieve values that are derived by summarizing or *aggregating* a "
"collection of objects. This topic guide describes the ways that aggregate "
"values can be generated and returned using Django queries."
msgstr ""
"Руководство :doc:`API для доступа к данным</topics/db/queries>` описывает, "
"как создавать запросы с помощью Django для создания, обновления, получения и "
"удаления отдельных объектов. Но иногда необходимы данные полученные через "
"обобщение или *агрегацию* данных нескольких объектов. Этот раздел расскажет "
"как создавать такие запросы с помощью Django."

# 71a8e0af98f44f0e836e7c676f90a64a
#: ../../topics/db/aggregation.txt:14
msgid ""
"Throughout this guide, we'll refer to the following models. These models are "
"used to track the inventory for a series of online bookstores:"
msgstr ""
"В данном руководстве мы будем ссылаться на следующие модели. Эти модели "
"хранят информацию для книжного магазина:"

# d9fe2688ce934e919e53c77b32ea58eb
#: ../../topics/db/aggregation.txt:46
msgid "Cheat sheet"
msgstr "Шпаргалка"

# 68376556b99443a6a248102c9ee2b5fc
#: ../../topics/db/aggregation.txt:48
msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above:"
msgstr ""
"Спешите? Вот как выполнить стандартные запросы агрегации для моделей "
"представленных выше::"

# 2b3997a640294e9e91559b33669c850f
#: ../../topics/db/aggregation.txt:103
msgid "Generating aggregates over a ``QuerySet``"
msgstr "Создание агрегации с помощью ``QuerySet``"

# b1c1a74e131e4e0280c0bb1e2f7e0f9d
#: ../../topics/db/aggregation.txt:105
msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books::"
msgstr ""
"Django предоставляет два способа использовать агрегацию. Первый способ "
"заключается в использовании агрегации для всех объектов ``QuerySet``. "
"Например, мы хотим вычислить среднюю цену для всех книг. Чтобы получить все "
"книги, необходимо выполнить такой запрос::"

# ff791af02ee74870addab1c02ebc3434
#: ../../topics/db/aggregation.txt:112
msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``::"
msgstr ""
"Нам нужно вычислить среднее значение для всех объектов в ``QuerySet``. Это "
"можно сделать, добавив ``aggregate()`` в ``QuerySet``::"

# d60c53f6e3254f9887fb466c4fc18293
#: ../../topics/db/aggregation.txt:120
msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""
"``all()`` не обязательно использовать в данном примере, так что можно "
"упростить::"

# 0dc0cf3d44684914bf5a93fe2e652b12
#: ../../topics/db/aggregation.txt:125
msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""
"Аргумент для ``aggregate()`` определяет, что нам нужно вычислить - в данном "
"примере среднее значение поля ``price`` для модели ``Book``. Полный список "
"функций агрегации можно найти в :ref:`разделе о QuerySet<aggregation-"
"functions>`."

# b47801ad10c64752805e0062f6eda5b2
#: ../../topics/db/aggregation.txt:130
msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause::"
msgstr ""
"``aggregate()`` завершающая инструкция для ``QuerySet``, которая возвращает "
"словарь с результатом. Ключ словаря - идентификатор вычисленного значения; "
"значение - результат. Название создается автоматически из поля и функции "
"агрегации. Если вы хотите самостоятельно определить имя результата, вы "
"можете указать его при определении функции агрегации::"

# 865d3da61f154d9bb5be589f5d05e949
#: ../../topics/db/aggregation.txt:140
msgid ""
"If you want to generate more than one aggregate, you just add another "
"argument to the ``aggregate()`` clause. So, if we also wanted to know the "
"maximum and minimum price of all books, we would issue the query::"
msgstr ""
"Если вам необходимо вычислить больше одного значения, добавьте еще один "
"аргумент в ``aggregate()``. Например, нам нужно узнать минимальную и "
"максимальную цену книг::"

# 7bd279623dd44f02a33386c451b62164
#: ../../topics/db/aggregation.txt:149
msgid "Generating aggregates for each item in a ``QuerySet``"
msgstr "Создание агрегации для каждого объекта в ``QuerySet``"

# ea331a1bb38b478f9b6b2f63e5d17b97
#: ../../topics/db/aggregation.txt:151
msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a ``QuerySet``. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the "
"Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""
"Второй способ получения обобщенных данных -- вычислить обобщенное значение "
"для каждого объекта в ``QuerySet``. Например, при получении списка книг, вы "
"хотите знать количество их авторов. Каждая модель книги имеет связь много-ко-"
"многому с моделью автора, нам нужно обобщить это отношение для каждой книги "
"в ``QuerySet``."

# d1d789375c094e399ebb04c7ca7a7645
#: ../../topics/db/aggregation.txt:157
msgid ""
"Per-object summaries can be generated using the ``annotate()`` clause. When "
"an ``annotate()`` clause is specified, each object in the ``QuerySet`` will "
"be annotated with the specified values."
msgstr ""
"Обобщение отношения можно выполнить с помощью ``annotate()``. ``annotate()`` "
"для каждого объекта ``QuerySet`` добавит вычисленное значение."

# fc23f31d7f0a4b3daf94e8af4cb11f0f
#: ../../topics/db/aggregation.txt:161
msgid ""
"The syntax for these annotations is identical to that used for the "
"``aggregate()`` clause. Each argument to ``annotate()`` describes an "
"aggregate that is to be calculated. For example, to annotate books with the "
"number of authors:"
msgstr ""
"Синтаксис совпадает с синтаксисом ``aggregate()``. Каждый аргумент "
"``annotate()`` описывает агрегацию, которая должна быть выполнена. Например, "
"чтобы добавить количество авторов, необходимо выполнить такой код::"

# 9d1e5aa9565b482eb55cfebb54cdc791
#: ../../topics/db/aggregation.txt:182
msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation::"
msgstr ""
"Как и для ``aggregate()``, название будет вычислено из названия поля и "
"функции агрегации. Вы можете переопределить это имя, добавив его при "
"определении аннотации::"

# 49f9a20e36054ecdbfec7af69bc5a489
#: ../../topics/db/aggregation.txt:193
msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can "
"be modified using any other ``QuerySet`` operation, including ``filter()``, "
"``order_by()``, or even additional calls to ``annotate()``."
msgstr ""
"В отличии от ``aggregate()``, ``annotate()`` *не* завершающая функция. "
"Результат функции ``annotate()`` будет ``QuerySet``; этот ``QuerySet`` может "
"быть изменен любой другой операцией ``QuerySet``, включая ``filter()``, "
"``order_by``, или еще одним вызовом ``annotate()``."

#: ../../topics/db/aggregation.txt:201
msgid "Combining multiple aggregations"
msgstr "Объединение нескольких агрегаций"

#: ../../topics/db/aggregation.txt:203
msgid ""
"Combining multiple aggregations with ``annotate()`` will `yield the wrong "
"results <https://code.djangoproject.com/ticket/10060>`_ because joins are "
"used instead of subqueries:"
msgstr ""
"Объединение нескольких агрегаций через ``annotate()`` может привести к "
"`неправильному результату <https://code.djangoproject.com/ticket/10060>`_, т."
"к. используется объединение вместо подзапросов:"

#: ../../topics/db/aggregation.txt:218
msgid ""
"For most aggregates, there is no way to avoid this problem, however, the :"
"class:`~django.db.models.Count` aggregate has a ``distinct`` parameter that "
"may help:"
msgstr ""
"Для большинства агрегаций нет способа избежать этой проблемы. Однако, "
"агрегация :class:`~django.db.models.Count` принимает аргумент ``distinct``, "
"который может помочь:"

#: ../../topics/db/aggregation.txt:228
msgid "If in doubt, inspect the SQL query!"
msgstr "Если вы сомневаетесь, изучите SQL запрос!"

#: ../../topics/db/aggregation.txt:230
msgid ""
"In order to understand what happens in your query, consider inspecting the "
"``query`` property of your ``QuerySet``."
msgstr "Запрос можно получить из свойства ``query`` экземпляра ``QuerySet``."

# a6070665cb734bd8a3906cfd58c0bd78
#: ../../topics/db/aggregation.txt:234
msgid "Joins and aggregates"
msgstr "Объединения и агрегация"

# b54c3bea2101491b9d74e8742f158c4c
#: ../../topics/db/aggregation.txt:236
msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""
"До этого мы работали с агрегацией для полей модели запроса. Однако, иногда "
"данные для агрегации находятся в связанной модели."

# 1a2e91528aa94c5c8d50c17993a52158
#: ../../topics/db/aggregation.txt:240
msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""
"Для указания поля для агрегации, Django позволяет использовать :ref:`двойное "
"подчеркивание <field-lookups-intro>`, которое используется для фильтрации по "
"связанным полям. Django автоматически добавит необходимые объединения таблиц."

# 7285f8906fe7445abdd143f342d82e8f
#: ../../topics/db/aggregation.txt:246
msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation::"
msgstr "Например, чтобы найти диапазон цен на книги в каждом магазине::"

# 8ea8d9b7f28e49c8a41f94579c8b1feb
#: ../../topics/db/aggregation.txt:252
msgid ""
"This tells Django to retrieve the ``Store`` model, join (through the many-to-"
"many relationship) with the ``Book`` model, and aggregate on the price field "
"of the book model to produce a minimum and maximum value."
msgstr ""
"Django получит модель ``Store``, сделает объединение (через связь многое-ко-"
"многим) с моделью ``Book``, и агрегирует значение цены, чтобы получить "
"минимальное и максимальное значение."

# d3ea01a8b78740a5ae6612e5e141423b
#: ../../topics/db/aggregation.txt:256
msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in any "
"of the stores, you could use the aggregate::"
msgstr ""
"Те же правила действуют и для ``aggregate()``. Если вы хотите узнать "
"максимальную и минимальную цену книги доступной в магазине, вы можете "
"использовать такой код::"

# 5b48d4b2d7754c0798df075e2fbf26ee
#: ../../topics/db/aggregation.txt:262
msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query::"
msgstr ""
"Объединение может быть любой вложенности. Например, чтобы получить возраст "
"самого молодого автора, используйте такой запрос::"

# b559830b216b45acb85d909c9847f092
#: ../../topics/db/aggregation.txt:269
msgid "Following relationships backwards"
msgstr "Использование обратных связей"

# f1e895d37af94f7fa29350ec862e0f68
#: ../../topics/db/aggregation.txt:271
msgid ""
"In a way similar to :ref:`lookups-that-span-relationships`, aggregations and "
"annotations on fields of models or models that are related to the one you "
"are querying can include traversing \"reverse\" relationships. The lowercase "
"name of related models and double-underscores are used here too."
msgstr ""
"Аналогично :ref:`lookups-that-span-relationships`, можно выполнить агрегацию "
"и аннотацию по полям модели или связанных моделей, используя \"обратные\" "
"связи. Аналогично используйте название модели в нижнем регистре и два "
"символа нижнего подчеркивания."

# b3fcb9682b5840dd956fb97d720d60c5
#: ../../topics/db/aggregation.txt:276
msgid ""
"For example, we can ask for all publishers, annotated with their respective "
"total book stock counters (note how we use ``'book'`` to specify the "
"``Publisher`` -> ``Book`` reverse foreign key hop)::"
msgstr ""
"Например, мы хотим получить всех издателей и количество их книг (обратите "
"внимание, как мы используем `'book'`, указывая на связь обратную связь "
"Publisher->Book)::"

# a15f1cec40bf470dac68a697466a1ccc
#: ../../topics/db/aggregation.txt:283
msgid ""
"(Every ``Publisher`` in the resulting ``QuerySet`` will have an extra "
"attribute called ``book__count``.)"
msgstr ""
"(Каждый объект  Publisher в QuerySet будет содержать дополнительный атрибут "
"``book__count``.)"

# 015e4754793c4e309f3bfae41b7fd1f9
#: ../../topics/db/aggregation.txt:286
msgid ""
"We can also ask for the oldest book of any of those managed by every "
"publisher::"
msgstr "Мы также можем получить самую старую книгу издателя::"

# dec18e3e9ced495cb27b66ab7d759ac9
#: ../../topics/db/aggregation.txt:290
msgid ""
"(The resulting dictionary will have a key called ``'oldest_pubdate'``. If no "
"such alias were specified, it would be the rather long "
"``'book__pubdate__min'``.)"
msgstr ""
"(В результате получим словарь с ключом ``'oldest_pubdate'``. Если имя ключа "
"не было указано, оно будет следующим - ``'book__pubdate__min'``.)"

# d39dbd4e5c974a28886fbad7c31f6bfb
#: ../../topics/db/aggregation.txt:293
msgid ""
"This doesn't apply just to foreign keys. It also works with many-to-many "
"relations. For example, we can ask for every author, annotated with the "
"total number of pages considering all the books the author has (co-)authored "
"(note how we use ``'book'`` to specify the ``Author`` -> ``Book`` reverse "
"many-to-many hop)::"
msgstr ""
"Это относиться не только к внешним ключам и работает также для связей многое-"
"ко-многим. Например, мы можем получить всех авторов и общее количество "
"страниц в книгах, которые он написал (обратите внимание как мы используем "
"`'book'` для указания на обратную связь ``Author`` -> ``Book``)::"

# 7e57c4ee1f954706b2ba5ddfe18b534d
#: ../../topics/db/aggregation.txt:300
msgid ""
"(Every ``Author`` in the resulting ``QuerySet`` will have an extra attribute "
"called ``total_pages``. If no such alias were specified, it would be the "
"rather long ``book__pages__sum``.)"
msgstr ""
"(Каждый объект Author в результате будет содержать атрибут ``total_pages``. "
"Если имя атрибута не указано, оно будет - ``book__pages__sum``.)"

# 56cbfea920f1491a823b2893ae06d24d
#: ../../topics/db/aggregation.txt:304
msgid ""
"Or ask for the average rating of all the books written by author(s) we have "
"on file::"
msgstr "Или получим средний рейтинг книг каждого автора::"

# 828de536b84a44648ac138d6a78c86f2
#: ../../topics/db/aggregation.txt:309
msgid ""
"(The resulting dictionary will have a key called ``'average_rating'``. If no "
"such alias were specified, it would be the rather long "
"``'book__rating__avg'``.)"
msgstr ""
"(В результате получим словарь с ключом ``'average__rating'``. Если не "
"указать имя ключа, получим длинный ``'book__rating__avg'``.)"

# 7c8f43904dbe4fe7bcc2e1cbc99d2917
#: ../../topics/db/aggregation.txt:313
msgid "Aggregations and other ``QuerySet`` clauses"
msgstr "Агрегация и другие методы ``QuerySet``"

# 8d73a44d849a4093a256dfb9ce45360d
#: ../../topics/db/aggregation.txt:316
msgid "``filter()`` and ``exclude()``"
msgstr "``filter()`` и ``exclude()``"

# 2cd6a4c9a1d448d6a7f141edfaab8017
#: ../../topics/db/aggregation.txt:318
msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or "
"``exclude()``) applied to normal model fields will have the effect of "
"constraining the objects that are considered for aggregation."
msgstr ""
"Фильтры могут использоваться вместе с агрегацией. Любой ``filter()`` (или "
"``exclude()``) повлияет на выборку объектов, используемых для агрегации."

# e0dcc106c131413bbb550a67ba01a519
#: ../../topics/db/aggregation.txt:322
msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example, "
"you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query::"
msgstr ""
"При использовании с ``annotate()``, фильтр ограничит выборку объектов, для "
"которых необходимо выполнить \"аннотацию\". Например, чтобы получить список "
"книг, название которых начинается с \"Django\", и количество авторов книги, "
"используйте::"

# c8057a8acb1341ed98bf9e8ea1ee17ce
#: ../../topics/db/aggregation.txt:330
msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query::"
msgstr ""
"При использовании с ``aggregate()``, фильтр ограничит множество объектов, "
"над которыми выполняется агрегация. Например, вы можете получить среднюю "
"цену книг, название которых начинается с \"Django\"::"

# e9161c498f964d7aa23e8b1f0c669034
#: ../../topics/db/aggregation.txt:340
msgid "Filtering on annotations"
msgstr "Фильтрация по \"аннотации\""

# 60e8528f2ff34e42a60e85d82bd02583
#: ../../topics/db/aggregation.txt:342
msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""
"\"Аннотированные\" значения могут быть использованы для фильтрации. "
"Псевдонимы для \"аннотированных\" значений могут быть использованы в "
"``filter()`` и ``exclude()`` так же, как и другие поля модели."

# a08e83f1afac4484865179e4c66aff98
#: ../../topics/db/aggregation.txt:346
msgid ""
"For example, to generate a list of books that have more than one author, you "
"can issue the query::"
msgstr ""
"Например, чтобы получить список книг хотя бы с одним автором, используем "
"такой код::"

# 734e607c8c0f400aa184f42ceb419869
#: ../../topics/db/aggregation.txt:351
msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""
"Этот запрос вычисляет \"аннотированное\" значение, потом применяет фильтр по "
"этому значению."

#: ../../topics/db/aggregation.txt:354
msgid ""
"If you need two annotations with two separate filters you can use the "
"``filter`` argument with any aggregate. For example, to generate a list of "
"authors with a count of highly rated books::"
msgstr ""
"Если вам необходимы две аннотации с двумя различными фильтрами, вы можете "
"использовать аргумент ``filter`` с любой агрегацией. Например, чтобы "
"сгенерировать список авторов с количеством популярных книг::"

#: ../../topics/db/aggregation.txt:361
msgid ""
"Each ``Author`` in the result set will have the ``num_books`` and "
"``highly_rated_books`` attributes."
msgstr ""
"Каждый ``Author`` в результате будет содержать атрибуты ``num_books`` и "
"``highly_rated_books``."

#: ../../topics/db/aggregation.txt:364
msgid "Choosing between ``filter`` and ``QuerySet.filter()``"
msgstr "Выбор между ``filter`` и ``QuerySet.filter()``"

#: ../../topics/db/aggregation.txt:366
msgid ""
"Avoid using the ``filter`` argument with a single annotation or aggregation. "
"It's more efficient to use ``QuerySet.filter()`` to exclude rows. The "
"aggregation ``filter`` argument is only useful when using two or more "
"aggregations over the same relations with different conditionals."
msgstr ""
"Не используйте аргумент ``filter`` с одной аннотацией или агрегацией. "
"Эффективнее использовать ``QuerySet.filter()`` для фильтрации записей. "
"Аргумент ``filter`` полезен только при нескольких агрегаций для одной связи "
"с различными условиями выборки."

#: ../../topics/db/aggregation.txt:373
msgid "The ``filter`` argument was added to aggregates."
msgstr "Для агрегаций был добавлен аргумент ``filter``."

# ec6c9eae74d8428484030b5cc02a4922
#: ../../topics/db/aggregation.txt:376
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr "Порядок ``annotate()`` и ``filter()``"

# ef972f61ff3e4703846733c4a190eb0a
#: ../../topics/db/aggregation.txt:378
msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, pay particular attention to the order in which the "
"clauses are applied to the ``QuerySet``."
msgstr ""
"При создании сложного запроса с использованием ``annotate()`` и "
"``filter()``, необходимо учитывать порядок использования этих методов в "
"``QuerySet``."

# e3d1481616b24a6aa232bf62ca6d4f44
#: ../../topics/db/aggregation.txt:382
msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is "
"requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations."
msgstr ""
"При добавлении ``annotate()`` в запрос аннотация вычисляется над состоянием "
"запроса, которое было на момент её добавления. По этому нужно учитывать, что "
"операции ``filter()`` и ``annotate()`` не коммутативные(порядок важен)."

#: ../../topics/db/aggregation.txt:387
msgid "Given:"
msgstr "Берем следующий набор данных:"

#: ../../topics/db/aggregation.txt:389
msgid "Publisher A has two books with ratings 4 and 5."
msgstr "У издателя A есть две книги с рейтингом 4 и 5."

#: ../../topics/db/aggregation.txt:390
msgid "Publisher B has two books with ratings 1 and 4."
msgstr "У издателя B есть две книги с рейтингом 1 и 4."

#: ../../topics/db/aggregation.txt:391
msgid "Publisher C has one book with rating 1."
msgstr "У издателя C есть одна книга с рейтингом 1."

#: ../../topics/db/aggregation.txt:393
msgid "Here's an example with the ``Count`` aggregate::"
msgstr "Пример с агрегацией ``Count``::"

#: ../../topics/db/aggregation.txt:407
msgid ""
"Both queries return a list of publishers that have at least one book with a "
"rating exceeding 3.0, hence publisher C is excluded."
msgstr ""
"Оба запроса вернули список издателей, у которых есть хотя бы одна книга с "
"рейтингом выше 3.0, по этому издатель C исключен из выборки."

#: ../../topics/db/aggregation.txt:410
msgid ""
"In the first query, the annotation precedes the filter, so the filter has no "
"effect on the annotation. ``distinct=True`` is required to avoid a :ref:"
"`query bug <combining-multiple-aggregations>`."
msgstr ""
"В первом запросе аннотация следует перед фильтрацией, по этому фильтрация не "
"влияет на аннотацию. ``distinct=True`` необходим, чтобы избежать :ref:`бага "
"с объединением таблиц <combining-multiple-aggregations>`."

#: ../../topics/db/aggregation.txt:414
msgid ""
"The second query counts the number of books that have a rating exceeding 3.0 "
"for each publisher. The filter precedes the annotation, so the filter "
"constrains the objects considered when calculating the annotation."
msgstr ""
"Второй запрос вычисляет количество книг с рейтингом выше 3.0 для каждого "
"издателя. Фильтрация следует перед аннотацией, тем самым влияет на данные, "
"которые используются при вычислении аннотации."

#: ../../topics/db/aggregation.txt:418
msgid "Here's another example with the ``Avg`` aggregate::"
msgstr "Еще один пример с ``Avg``::"

#: ../../topics/db/aggregation.txt:432
msgid ""
"The first query asks for the average rating of all a publisher's books for "
"publisher's that have at least one book with a rating exceeding 3.0. The "
"second query asks for the average of a publisher's book's ratings for only "
"those ratings exceeding 3.0."
msgstr ""
"Первый запрос вычисляет средний рейтинг книг для издателей, у которых есть "
"хотя бы одна книга с рейтингом выше 3.0. Второй вычисляет средний рейтинг "
"для книг, рейтинг которых выше 3.0."

#: ../../topics/db/aggregation.txt:437
msgid ""
"It's difficult to intuit how the ORM will translate complex querysets into "
"SQL queries so when in doubt, inspect the SQL with ``str(queryset.query)`` "
"and write plenty of tests."
msgstr ""
"Тяжело интуитивно догадаться как ORM преобразует сложный ``QuerySet`` в SQL "
"запрос. По этому изучайте созданный SQL в случае сомнений, используя "
"``str(queryset.query)``, и покрывайте тестами."

# 0371b8585a81415f98b67ef7c4de8f02
#: ../../topics/db/aggregation.txt:442
msgid "``order_by()``"
msgstr "``order_by()``"

# 13c2ac20bc454882b9e47b6925e9ae89
#: ../../topics/db/aggregation.txt:444
msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""
"Результат \"аннотации\" может быть использован для сортировки. При "
"определении ``order_by()``, вы можете использовать параметр, указанный в "
"``annotate()``."

# def51bbafd344c18b21c72432c92dbf7
#: ../../topics/db/aggregation.txt:448
msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query::"
msgstr ""
"Например, чтобы отсортировать книги из ``QuerySet`` по количеству авторов, "
"используйте запрос::"

# f598fc7cc708435ca8d4fc7b5002d93b
#: ../../topics/db/aggregation.txt:454
msgid "``values()``"
msgstr "``values()``"

# e482d10c99184e3b8b72268c160be0d6
#: ../../topics/db/aggregation.txt:456
msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr ""
"Обычно, аннотация вычисляется для каждого объекта - ``QuerySet`` вернет одно "
"значение для каждого объекта в изначальном ``QuerySet``. Однако, при "
"использовании ``values()`` \"аннотация\" вычисляется немного по другому. "
"Вместо того, чтобы вычислить значение для каждого объекта ``QuerySet``, "
"сначала все объекты результата будут разделены на группы по уникальному "
"значению полей, указанных в ``values()``. \"Аннотация\" будет использована "
"для каждой группы и будут использованы значения всех объектов группы."

# fe1cd19d7df04bc2bef51809faad05ac
#: ../../topics/db/aggregation.txt:466
msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr ""
"Например, возьмем запрос для получения среднего рейтинга всех книг "
"написанным автором:"

# 739a5379a9f146bba10dca11ccd739a6
#: ../../topics/db/aggregation.txt:471
msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr ""
"Этот запрос вернет результат для каждого автора в базе данных, "
"\"аннотированный\" средним рейтингом книг автора."

# 955a3f5e374c4792856f891df9cc98f7
#: ../../topics/db/aggregation.txt:474
msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause::"
msgstr "Однако, результат будет другим при использовании ``values()``::"

# f2caa8de21374bbda3dd6c923f06874d
#: ../../topics/db/aggregation.txt:478
msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr ""
"В этом примере, авторы будут сгруппированы по имени, поэтому вы получите "
"средний рейтинг для *уникального* имени автора. Это означает, что, если в "
"базе есть два автора с одинаковым именем, их результаты будут объединены "
"вместе; среднее значение будет вычислено как среднее значение книг обоих "
"авторов."

# d6c0081183d74c75b48da79f31dc0a51
#: ../../topics/db/aggregation.txt:485
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr "Порядок ``annotate()`` и ``values()``"

# 065e69d2b17b4ed681fa74a62dbbfeed
#: ../../topics/db/aggregation.txt:487
msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the "
"``values()`` clause precedes the ``annotate()``, the annotation will be "
"computed using the grouping described by the ``values()`` clause."
msgstr ""
"Так же, как и с ``filter()``, порядок использования ``annotate()`` и "
"``values()`` важен. Если ``values()`` используется перед ``annotate()``, "
"\"аннотация\" будет вычислена, используя группирование ``values()`` "
"описанное выше."

# 424c267181bf45ee8260b31b89ad1e7b
#: ../../topics/db/aggregation.txt:492
msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr ""
"Однако, если ``annotate()`` используется перед ``values()``, \"аннотация\" "
"будет вычислена для каждого объекта. В этом случае ``values()`` просто "
"ограничивает возвращаемые поля."

# 999f406540f94039b9973d27a4f5878f
#: ../../topics/db/aggregation.txt:497
msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example::"
msgstr ""
"Например, если мы поменяем местами ``values()`` и ``annotate()`` из "
"предыдущего примера::"

# 48472c6e750f4b1db39fcd9663b5a962
#: ../../topics/db/aggregation.txt:502
msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr ""
"Будет вычислено одно значение для каждого автора, но результат будет "
"содержать только имя автора и вычисленное значение ``average_rating``."

# 19fa9eae314843d8ba36bc3232e11274
#: ../../topics/db/aggregation.txt:506
msgid ""
"You should also note that ``average_rating`` has been explicitly included in "
"the list of values to be returned. This is required because of the ordering "
"of the ``values()`` and ``annotate()`` clause."
msgstr ""
"Заметьте, что ``average_rating`` был явно включен в список значений, которые "
"будут возвращены. Это необходимо из-за порядка использования ``values()`` и "
"``annotate()``."

# dd014920e8c041d891584e5be69f6146
#: ../../topics/db/aggregation.txt:510
msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""
"Если ``values()`` следует перед ``annotate()``, любая \"аннотация\" будет "
"добавлена в результат. Однако, если ``values()`` используется после "
"``annotate()``, вы должны указать их."

# 194bdac8f17c4ff598b7729cb69162ba
#: ../../topics/db/aggregation.txt:518
msgid "Interaction with default ordering or ``order_by()``"
msgstr "Влияние сортировки по-умолчанию и ``order_by()``"

# 7b500b773348465d8057084c1cb3798c
#: ../../topics/db/aggregation.txt:520
msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset (or which "
"are used in the default ordering on a model) are used when selecting the "
"output data, even if they are not otherwise specified in the ``values()`` "
"call. These extra fields are used to group \"like\" results together and "
"they can make otherwise identical result rows appear to be separate. This "
"shows up, particularly, when counting things."
msgstr ""
"Поля, упомянутые в ``order_by()`` (или используемые в сортировке по-"
"умолчанию), используются при получении результата, даже если они не указаны "
"в ``values()``. Это влияет на порядок следования строк, нарушая уникальные "
"группы, по которым вычисляется аннотация. Это влияет на результат, например, "
"при подсчете."

# c9c1ae608aa74eefa499d12b6e74a4f5
#: ../../topics/db/aggregation.txt:527
msgid "By way of example, suppose you have a model like this::"
msgstr "Например, у нас есть такая модель::"

# 072d97628dd246c08a153df3db8d6fb5
#: ../../topics/db/aggregation.txt:538
msgid ""
"The important part here is the default ordering on the ``name`` field. If "
"you want to count how many times each distinct ``data`` value appears, you "
"might try this::"
msgstr ""
"Важная часть -- сортировка по-умолчанию по полю ``name``. Если вы хотите "
"подсчитать, сколько раз встречается каждое уникальное значение поля "
"``data``, вы могли бы использовать этот запрос::"

# 02f6b7d709764aadb037835a2722af62
#: ../../topics/db/aggregation.txt:545
msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and "
"then count the number of ``id`` values in each group. Except that it won't "
"quite work. The default ordering by ``name`` will also play a part in the "
"grouping, so this query will group by distinct ``(data, name)`` pairs, which "
"isn't what you want. Instead, you should construct this queryset::"
msgstr ""
"... который сгруппирует объекты ``Item`` по значениям поля ``data`` и потом "
"подсчитает ``id`` в каждой группе. Но \n"
"запрос работает не совсем так. Сортировка по-умолчанию по полю ``name`` "
"играет свою роль при группировании. Группы будут уникальны по совокупности "
"значений ``(data, name)``, и это не совсем то, что вам нужно. Поэтому, "
"используйте запрос::"

# 214c23cdab1a49fcbf3013b5f32e85a7
#: ../../topics/db/aggregation.txt:553
msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""
"...убирая любую сортировку из запроса. Вы можете отсортировать по полю "
"``data`` без какого-либо влияния на результат, т.к. оно уже сыграло свою "
"роль в запросе."

# 0fd82903cd754306afa13c44b576a253
#: ../../topics/db/aggregation.txt:557
msgid ""
"This behavior is the same as that noted in the queryset documentation for :"
"meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the "
"same: normally you won't want extra columns playing a part in the result, so "
"clear out the ordering, or at least make sure it's restricted only to those "
"fields you also select in a ``values()`` call."
msgstr ""
"Это поведение идентично поведению метода :meth:`~django.db.models.query."
"QuerySet.distinct` и общее правило аналогично: лишние поля не должны быть "
"использованы в запросе, поэтому очистите любую сортировку, или, по крайней "
"мере, убедитесь что эти поля добавляются в результат вызовом ``values()``."

# a7c53d608f4f464ca85896ba4ddb3c21
#: ../../topics/db/aggregation.txt:564
msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""
"Вы можете спросить, почему Django не заботится об этом. Причина та же, что и "
"для ``distinct()`` и др.: Django **никогда** не удаляет сортировку, "
"определенную вами (и мы не может изменить такое поведение, т.к. это нарушает "
"нашу :doc:`/misc/api-stability` политику стабильности API)."

# 9b6679a6f6ef470c8a5ce305659c9c53
#: ../../topics/db/aggregation.txt:571
msgid "Aggregating annotations"
msgstr "Аннотация агрегации"

# 99d93774018548d389532adba9e87bd8
#: ../../topics/db/aggregation.txt:573
msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""
"Вы можете использовать агрегацию для результата \"аннотации\". При "
"определении ``aggregate()``, можно указать имя результата, указанное в  "
"``annotate()`` этого запроса."

# c9ad8edfe19f432c9923c54f23ae82ea
#: ../../topics/db/aggregation.txt:577
msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field::"
msgstr ""
"Например, если вы хотите посчитать среднее количество авторов для каждой "
"книги, сначала используйте \"аннотацию\" для количества авторов, потом "
"агрегацию для этого значения::"

#~ msgid ""
#~ "For instance, combining multiple aggregations with ``annotate()`` will "
#~ "yield the wrong results, as `multiple tables are cross joined`_, "
#~ "resulting in duplicate row aggregations."
#~ msgstr ""
#~ "Например, объединение нескольких ``annotate()`` приведет к неверному "
#~ "результату, т.к. `таблицы неверно объединяются <https://code."
#~ "djangoproject.com/ticket/10060>`_, что приводит к дублированию строк при "
#~ "агрегации."

# 99710d340e0a4faebf0839f6993f36b2
#~ msgid "and the query::"
#~ msgstr "и запросом::"

# 32a967a88b464814a0c6b86ed80532be
#~ msgid ""
#~ "Both queries will return a list of publishers that have at least one good "
#~ "book (i.e., a book with a rating exceeding 3.0). However, the annotation "
#~ "in the first query will provide the total number of all books published "
#~ "by the publisher; the second query will only include good books in the "
#~ "annotated count. In the first query, the annotation precedes the filter, "
#~ "so the filter has no effect on the annotation. In the second query, the "
#~ "filter precedes the annotation, and as a result, the filter constrains "
#~ "the objects considered when calculating the annotation."
#~ msgstr ""
#~ "Оба запроса вернут список издателей хотя бы с одной хорошей книгой (то "
#~ "есть книгу с рейтингом выше 3.0). Однако, аннотация в первом запросе "
#~ "вернет количество всех книг издателя; второй запрос будет содержать "
#~ "количество хороших книг. В первом запросе аннотация идет перед фильтром, "
#~ "поэтому фильтр не влияет на аннотацию. Во втором запросе, фильтр идет "
#~ "перед аннотацией, поэтому фильтр ограничит множество объектов "
#~ "используемых при вычислении значения для аннотации."
