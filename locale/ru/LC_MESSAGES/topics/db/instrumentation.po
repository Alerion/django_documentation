# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2017-11-16 11:56+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../topics/db/instrumentation.txt:3
msgid "Database instrumentation"
msgstr ""

#: ../../topics/db/instrumentation.txt:5
msgid ""
"To help you understand and control the queries issued by your code, Django "
"provides a hook for installing wrapper functions around the execution of "
"database queries. For example, wrappers can count queries, measure query "
"duration, log queries, or even prevent query execution (e.g. to make sure "
"that no queries are issued while rendering a template with prefetched data)."
msgstr ""

#: ../../topics/db/instrumentation.txt:11
msgid ""
"The wrappers are modeled after :doc:`middleware </topics/http/middleware>` "
"-- they are callables which take another callable as one of their arguments. "
"They call that callable to invoke the (possibly wrapped) database query, and "
"they can do what they want around that call. They are, however, created and "
"installed by user code, and so don't need a separate factory like middleware "
"do."
msgstr ""

#: ../../topics/db/instrumentation.txt:17
msgid ""
"Installing a wrapper is done in a context manager -- so the wrappers are "
"temporary and specific to some flow in your code."
msgstr ""

#: ../../topics/db/instrumentation.txt:20
msgid ""
"As mentioned above, an example of a wrapper is a query execution blocker. It "
"could look like this::"
msgstr ""

#: ../../topics/db/instrumentation.txt:26
msgid ""
"And it would be used in a view to block queries from the template like so::"
msgstr ""

#: ../../topics/db/instrumentation.txt:37
msgid "The parameters sent to the wrappers are:"
msgstr ""

#: ../../topics/db/instrumentation.txt:39
msgid ""
"``execute`` -- a callable, which should be invoked with the rest of the "
"parameters in order to execute the query."
msgstr ""

#: ../../topics/db/instrumentation.txt:42
msgid "``sql`` -- a ``str``, the SQL query to be sent to the database."
msgstr ""

#: ../../topics/db/instrumentation.txt:44
msgid ""
"``params`` -- a list/tuple of parameter values for the SQL command, or a "
"list/tuple of lists/tuples if the wrapped call is ``executemany()``."
msgstr ""

#: ../../topics/db/instrumentation.txt:47
msgid ""
"``many`` -- a ``bool`` indicating whether the ultimately invoked call is "
"``execute()`` or ``executemany()`` (and whether ``params`` is expected to be "
"a sequence of values, or a sequence of sequences of values)."
msgstr ""

#: ../../topics/db/instrumentation.txt:51
msgid ""
"``context`` -- a dictionary with further data about the context of "
"invocation. This includes the connection and cursor."
msgstr ""

#: ../../topics/db/instrumentation.txt:54
msgid ""
"Using the parameters, a slightly more complex version of the blocker could "
"include the connection name in the error message::"
msgstr ""

#: ../../topics/db/instrumentation.txt:61
msgid "For a more complete example, a query logger could look like this::"
msgstr ""

#: ../../topics/db/instrumentation.txt:87
msgid ""
"To use this, you would create a logger object and install it as a wrapper::"
msgstr ""

#: ../../topics/db/instrumentation.txt:100
msgid "``connection.execute_wrapper()``"
msgstr ""

#: ../../topics/db/instrumentation.txt:104
msgid ""
"Returns a context manager which, when entered, installs a wrapper around "
"database query executions, and when exited, removes the wrapper. The wrapper "
"is installed on the thread-local connection object."
msgstr ""

#: ../../topics/db/instrumentation.txt:108
msgid ""
"``wrapper`` is a callable taking five arguments.  It is called for every "
"query execution in the scope of the context manager, with arguments "
"``execute``, ``sql``, ``params``, ``many``, and ``context`` as described "
"above. It's expected to call ``execute(sql, params, many, context)`` and "
"return the return value of that call."
msgstr ""
