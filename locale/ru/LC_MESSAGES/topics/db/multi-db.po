# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013, 2014, 2015, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2017-11-30 13:01+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# bcda587ca63046259b0310b271887f4c
#: ../../topics/db/multi-db.txt:3
msgid "Multiple databases"
msgstr "Использование нескольких баз данных"

# ef835e5dffc1439da8d84e1cb08167db
#: ../../topics/db/multi-db.txt:5
msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""
"Этот документ описывает функционал Django для работы с несколькими базами "
"данных. Большая часть документации Django предполагает, что вы работаете с "
"единственной базой данных. Если вам требуется работать с несколькими базами "
"данных, вам понадобится выполнить ряд дополнительных действий."

# 0c5f4f719df24c168a178fda9a7f7444
#: ../../topics/db/multi-db.txt:11
msgid "Defining your databases"
msgstr "Определение ваших баз данных"

# 1aac27f6a23b422e9ca6badef10e531c
#: ../../topics/db/multi-db.txt:13
msgid ""
"The first step to using more than one database with Django is to tell Django "
"about the database servers you'll be using. This is done using the :setting:"
"`DATABASES` setting. This setting maps database aliases, which are a way to "
"refer to a specific database throughout Django, to a dictionary of settings "
"for that specific connection. The settings in the inner dictionaries are "
"described fully in the :setting:`DATABASES` documentation."
msgstr ""
"Первым шагом к использованию нескольких баз данных с Django будет "
"определение серверов БД, которые вы планируете использовать. Это выполняется "
"с помощью параметра конфигурации :setting:`DATABASES`. Этот параметр "
"привязывает к базам данных псевдонимы, по которым эти базы будут доступны в "
"Django и словари параметров с характеристиками подключения к ним. Эти "
"дополнительные параметры полностью описаны в документации на :setting:"
"`DATABASES`."

# 3ec99ffaa0cc4447ae1de5179bd55f6b
#: ../../topics/db/multi-db.txt:21
msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default`` "
"when no other database has been selected."
msgstr ""
"Базам данных можно назначать любой псевдоним. Тем не менее, псевдоним "
"``default`` имеет особое значение. Django использует базу данных с "
"псевдонимом ``default``, если явно не указано использование другой базы "
"данных."

# d6cbbc6b2d6e4a509d7a35d0801f3e8b
#: ../../topics/db/multi-db.txt:25
msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``::"
msgstr ""
"Далее показан пример ``settings.py``, в котором определяются две базы данных "
"-- стандартная БД PostgreSQL и БД MySQL с псевдонимом ``users``::"

# 68d2b5bc84c841ceb7579353316b58cc
#: ../../topics/db/multi-db.txt:44
msgid ""
"If the concept of a ``default`` database doesn't make sense in the context "
"of your project, you need to be careful to always specify the database that "
"you want to use. Django requires that a ``default`` database entry be "
"defined, but the parameters dictionary can be left blank if it will not be "
"used. To do this, you must set up :setting:`DATABASE_ROUTERS` for all of "
"your apps' models, including those in any contrib and third-party apps "
"you're using, so that no queries are routed to the default database. The "
"following is an example ``settings.py`` snippet defining two non-default "
"databases, with the ``default`` entry intentionally left empty::"
msgstr ""
"Если концепция стандартной (``default``) базы данных не соответствует "
"контексту вашего проекта, вам потребуется быть аккуратным, каждый раз "
"указывая какую именно базу данных следует использовать в каждом случае. "
"Django требует наличия записи ``default`` в конфигурации баз данных, но "
"словарь его параметров можно оставить пустым, если вы не планируете его "
"использовать. Вы должны настроить :setting:`DATABASE_ROUTERS` для всех "
"моделей ваших приложений, включая те, которые расположены в сторонних "
"приложениях, чтобы ни один запрос не был отправлен в стандартную базу. "
"Следующий пример ``settings.py`` определяет две базы данных, оставляя запись "
"``default`` пустой::"

# cb3c2ab4bdfb4d6e8298766cab1a1dfe
#: ../../topics/db/multi-db.txt:70
msgid ""
"If you attempt to access a database that you haven't defined in your :"
"setting:`DATABASES` setting, Django will raise a ``django.db.utils."
"ConnectionDoesNotExist`` exception."
msgstr ""
"Если вы попробуете получить доступ к базе данных, которая не определена в "
"параметре конфигурации :setting:`DATABASES`, то Django выбросит исключение "
"``django.db.utils.ConnectionDoesNotExist``."

# 822de62948914e3aadf6847ceeb9174f
#: ../../topics/db/multi-db.txt:75
msgid "Synchronizing your databases"
msgstr "Синхронизация ваших баз данных"

# 95e12d2636b948f9b6b81858c8bf3cc9
#: ../../topics/db/multi-db.txt:77
msgid ""
"The :djadmin:`migrate` management command operates on one database at a "
"time. By default, it operates on the ``default`` database, but by providing "
"the :option:`--database <migrate --database>` option, you can tell it to "
"synchronize a different database. So, to synchronize all models onto all "
"databases in the first example above, you would need to call::"
msgstr ""
"Команда :djadmin:`migrate` работает единовременно только с одной базой "
"данных. По умолчанию, она работает с базой данных ``default``, но добавив "
"аргумент :option:`--database <migrate --database>`, вы можете указать "
"команде, что надо работать с другой базой данных. Таким образом, для того, "
"чтобы синхронизировать все модели со всеми базами данных в нашем примере, "
"вам потребуется вызвать::"

# 5011b97dd9e04ced98c10edc1cac8c98
#: ../../topics/db/multi-db.txt:86
msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""
"Если не хотите, чтобы модели приложения синхронизировались в конкретную базу "
"данных, вы можете определить :ref:`роутер<topics-db-multi-db-routing>`, "
"который будет управлять размещением моделей по базам данных"

#: ../../topics/db/multi-db.txt:91
msgid ""
"If, as in the second example above, you've left the ``default`` database "
"empty, you must provide a database name each time you run :djadmin:"
"`migrate`. Omitting the database name would raise an error. For the second "
"example::"
msgstr ""
"Если вы оставили ``default`` базу данных пустой, как в примере выше, вам "
"следует указывать название базы данных при каждом запуске :djadmin:"
"`migrate`, иначе будет вызвано исключение. Для второго примера::"

# 7b239145c2134716baa306929f3728dd
#: ../../topics/db/multi-db.txt:99
msgid "Using other management commands"
msgstr "Использование других команд"

# 129b927ced0b4213a495b5c27e38f26d
#: ../../topics/db/multi-db.txt:101
msgid ""
"Most other ``django-admin`` commands that interact with the database operate "
"in the same way as :djadmin:`migrate` -- they only ever operate on one "
"database at a time, using ``--database`` to control the database used."
msgstr ""
"Остальные команды ``django-admin``, работающие с базой данных, аналогичны :"
"djadmin:`migrate` -- т.е., только с одной базой данных за раз. Добавляйте "
"``--database``, чтобы указать, какую базу данных следует использовать."

#: ../../topics/db/multi-db.txt:105
msgid ""
"An exception to this rule is the :djadmin:`makemigrations` command. It "
"validates the migration history in the databases to catch problems with the "
"existing migration files (which could be caused by editing them) before "
"creating new migrations. By default, it checks only the ``default`` "
"database, but it consults the :meth:`allow_migrate` method of :ref:`routers "
"<topics-db-multi-db-routing>` if any are installed."
msgstr ""
"Исключением является команда :djadmin:`makemigrations`. Она проверяет "
"историю миграций в базах данных, чтобы найти проблему в существующих файлах "
"миграций (что может быть вызвано их редактированием), перед тем, как создать "
"новые миграции. По умолчанию проверяется только ``default`` база данных, но "
"она учитывает метод :meth:`allow_migrate` :ref:`роутеров <topics-db-multi-db-"
"routing>`, если они используются на проекте."

# 8a3dbcfac1b043e58999147cf37a3fb4
#: ../../topics/db/multi-db.txt:115
msgid "Automatic database routing"
msgstr "Автоматический роутинг для баз данных"

# 001e42d0fdc345c5af0fc847a761bd3c
#: ../../topics/db/multi-db.txt:117
msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database "
"will be saved on the same database). The default routing scheme ensures that "
"if a database isn't specified, all queries fall back to the ``default`` "
"database."
msgstr ""
"Простейшим способом использования нескольких баз данных является настройка "
"схемы роутинга. Стандартная схема роутинга проверяет, что объекты привязаны "
"к их оригинальной базе данных (т.е., объект, полученный из базы данных "
"``foo``, будет сохранён в ту же базу данных). Стандартная схема роутинга "
"проверяет, что если база данных не указана, то все запросы направляются к "
"базе данных ``default``."

# c616754e64c74e0489b22aa4bf091555
#: ../../topics/db/multi-db.txt:124
msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""
"Для активации стандартной схемы роутинга делать ничего не надо. Она уже "
"настроена для каждого проекта Django. Тем не менее, если вы желаете "
"реализовать более сложное поведение при выборе базы данных, вы можете "
"определить и установить собственные роутеры для баз данных."

# c49df0a2aef44c919762fd90a8cb1d61
#: ../../topics/db/multi-db.txt:130
msgid "Database routers"
msgstr "Роутеры баз данных"

# 512d3cf89582400b9d9e7075bbee12ce
#: ../../topics/db/multi-db.txt:132
msgid "A database Router is a class that provides up to four methods:"
msgstr ""
"Роутер базы данных является классом, который предоставляет четыре метода:"

# 5a54f7cd2a50468bb2d96729166a52a7
#: ../../topics/db/multi-db.txt:136
msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""
"Выбирает базу данных, которая должна использоваться для операций чтения для "
"объектов типа ``model``."

# aee841638e974d16be08f4424e0dc25a
# 06fd749e2c0544acbe4c77eb6550458a
#: ../../topics/db/multi-db.txt:139 ../../topics/db/multi-db.txt:151
msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-"
"db-hints>`."
msgstr ""
"Если операция над базой данных может предоставить любую дополнительную "
"информацию, которая может помочь в выборе базы данных, она будет "
"предоставлена в словаре ``hints`` (подсказки). Подробности смотрите :ref:"
"`далее <topics-db-multi-db-hints>`."

# a45d02c7fc8a4704bb190a3d662151fd
# 4f9e2c34e3a1450c9803ea66affa85d7
#: ../../topics/db/multi-db.txt:144 ../../topics/db/multi-db.txt:156
msgid "Returns ``None`` if there is no suggestion."
msgstr "Возвращает ``None``, если ничего не может предложить."

# 2677f3fecd2348a7a26767266a17d9d2
#: ../../topics/db/multi-db.txt:148
msgid ""
"Suggest the database that should be used for writes of objects of type Model."
msgstr ""
"Выбирает базу данных, которая должна использоваться для операций записи "
"объектов типа ``model``."

# 35af379fbb3d4945ab81eb1420e4fdca
#: ../../topics/db/multi-db.txt:160
msgid ""
"Return ``True`` if a relation between ``obj1`` and ``obj2`` should be "
"allowed, ``False`` if the relation should be prevented, or ``None`` if the "
"router has no opinion. This is purely a validation operation, used by "
"foreign key and many to many operations to determine if a relation should be "
"allowed between two objects."
msgstr ""
"Возвращает ``True``, если связь между ``obj1`` и ``obj2`` должна быть "
"разрешена, ``False``, если связь запрещена или ``None``, если у роутера нет "
"идей на этот счёт. Это обычная операция проверки, использующаяся операциями "
"с внешними ключами и M2M, для определения возможности организации связи "
"между двумя объектами."

# 1c3cf101aec0411a8049c6fbde3daece
#: ../../topics/db/multi-db.txt:168
msgid ""
"Determine if the migration operation is allowed to run on the database with "
"alias ``db``. Return ``True`` if the operation should run, ``False`` if it "
"shouldn't run, or ``None`` if the router has no opinion."
msgstr ""
"Определяет должна ли выполняться миграция для базы данных с именем ``db``. "
"Возвращает ``True``, если миграция должна быть выполнена, ``False``, если "
"нет или ``None`` - если у роутера нет идей."

#: ../../topics/db/multi-db.txt:172
msgid ""
"The ``app_label`` positional argument is the label of the application being "
"migrated."
msgstr ""
"Позиционный аргумент ``app_label`` является меткой приложения, которое "
"подвергается миграции."

#: ../../topics/db/multi-db.txt:175
msgid ""
"``model_name`` is set by most migration operations to the value of ``model."
"_meta.model_name`` (the lowercased version of the model ``__name__``) of the "
"model being migrated. Its value is ``None`` for the :class:`~django.db."
"migrations.operations.RunPython` and :class:`~django.db.migrations."
"operations.RunSQL` operations unless they provide it using hints."
msgstr ""
"``model_name`` устанавливается большинством миграционных операций в значение "
"``model._meta.model_name`` (строчная версия атрибута модели ``__name__``) "
"модели, над которой производится миграция. Значение будет ``None`` для "
"операций :class:`~django.db.migrations.operations.RunPython` и :class:"
"`~django.db.migrations.operations.RunSQL`, если не будет указано, что "
"используются подсказки."

#: ../../topics/db/multi-db.txt:182
msgid ""
"``hints`` are used by certain operations to communicate additional "
"information to the router."
msgstr ""
"``hints`` используются определёнными операциями для передачи дополнительной "
"информации роутеру."

# f05fbd08a3274c8f85435287062235ac
#: ../../topics/db/multi-db.txt:185
msgid ""
"When ``model_name`` is set, ``hints`` normally contains the model class "
"under the key ``'model'``. Note that it may be a :ref:`historical model "
"<historical-models>`, and thus not have any custom attributes, methods, or "
"managers. You should only rely on ``_meta``."
msgstr ""
"Когда ``model_name`` установлен, ``hints`` обычно содержит класс модели в "
"ключе ``'model'``. Следует отметить, что он может быть :ref:`исторической "
"моделью <historical-models>` и, следовательно, не иметь определённых "
"атрибутов, методов или менеджеров. Вам следует руководствоваться информацией "
"из ``_meta``."

#: ../../topics/db/multi-db.txt:190
msgid ""
"This method can also be used to determine the availability of a model on a "
"given database."
msgstr ""
"Этот метод также может быть использован для определения доступности модели в "
"текущей базе данных."

#: ../../topics/db/multi-db.txt:193
msgid ""
":djadmin:`makemigrations` always creates migrations for model changes, but "
"if ``allow_migrate()`` returns ``False``, any migration operations for the "
"``model_name`` will be silently skipped when running :djadmin:`migrate` on "
"the ``db``. Changing the behavior of ``allow_migrate()`` for models that "
"already have migrations may result in broken foreign keys, extra tables, or "
"missing tables. When :djadmin:`makemigrations` verifies the migration "
"history, it skips databases where no app is allowed to migrate."
msgstr ""
":djadmin:`makemigrations` всегда создает миграции при изменении модели, но "
"если ``allow_migrate()`` вернул ``False``, все операции миграции для "
"``model_name`` будут пропущены при выполнении :djadmin:`migrate` для ``db``. "
"Изменяя ``allow_migrate()`` для модели, которая уже содержит миграции, может "
"привести к сломанным внешним ключам, дополнительным таблицам, или "
"пропущенным таблицам. Когда :djadmin:`makemigrations` историю миграций, она "
"пропускает базы данных, для которых нет приложений с возможностью миграций."

# d18b25a565c74c41a577b5b80fc36ea4
#: ../../topics/db/multi-db.txt:201
msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router "
"when performing the relevant check."
msgstr ""
"Роутер не должен предоставлять *все* эти методы. Если некоторые методы не "
"определенны, Django пропустит этот роутер, выполняя соответствующую операцию."

# 93f5dc7a46494a24973b44ee2e2faa64
#: ../../topics/db/multi-db.txt:208
msgid "Hints"
msgstr "Подсказки"

# 64fbc03f3ea047f9b434ee267ade60ed
#: ../../topics/db/multi-db.txt:210
msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""
"В аргументах `hints` могут передаваться данные, помогающие определить какую "
"базу данных использовать для запроса."

# 9c696ee806394d7c9f96a94519619a73
#: ../../topics/db/multi-db.txt:213
msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""
"Сейчас передается только ``instance`` - объект связанный с операциями записи "
"или чтения. Это может быть создаваемый объект, или объект добавляемый через "
"связь многое-ко-многим. В некоторых случаях объект не будет передаваться. "
"Роутер определяет наличие такого объекта и решает передавать его или нет при "
"вызове метода."

# 4304203950f74d819129b70baeb59191
#: ../../topics/db/multi-db.txt:222
msgid "Using routers"
msgstr "Использование роутеров"

# f19edac9491f4fc4a9ed742bd77948e4
#: ../../topics/db/multi-db.txt:224
msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""
"Роутеры для базы данных можно использовать, указав в настройке :setting:"
"`DATABASE_ROUTERS`. Вы должны указать список путей для импорта классов "
"роутера, которые будут использоваться главным роутером (``django.db."
"router``)."

# 170d737f9b0e4cf39485a671dcfb7282
#: ../../topics/db/multi-db.txt:229
msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django "
"then tries each router in turn until a database suggestion can be found. If "
"no suggestion can be found, it tries the current ``_state.db`` of the hint "
"instance. If a hint instance wasn't provided, or the instance doesn't "
"currently have database state, the master router will allocate the "
"``default`` database."
msgstr ""
"Мастер роутеров используются Django для определения какую БД использовать "
"для запросов. Если необходимо определить для какой БД выполнять запрос, "
"Django вызывает мастер роутеров передавая модель и \"hint\"(подсказки) (если "
"они есть). Django проверяет каждый роутер пока не получит ответ о том, какую "
"БД использовать. Если ответ не был найден, Django проверяет ``_state.db`` "
"объекта \"hint\". Если \"hint\" не был передан, или не содержит информацию "
"какую БД использовать, мастер роутеров укажет использовать БД из настроек "
"``default``."

# e4a6b47937454b10b570b6fdd10e4697
#: ../../topics/db/multi-db.txt:239
msgid "An example"
msgstr "Пример"

# f17bd0c2814f415d8f44ca4c2a7bbce4
#: ../../topics/db/multi-db.txt:241
msgid "Example purposes only!"
msgstr "Только в целях примера!"

# a298ae7107a54b2194b7d2940444ac02
#: ../../topics/db/multi-db.txt:243
msgid ""
"This example is intended as a demonstration of how the router infrastructure "
"can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""
"Этот пример показывает как можно использовать роутеры для управления "
"несколькими БД. В нем намеренно игнорируются некоторые проблемы такой "
"конфигурации, основная цель - продемонстрировать возможности роутеров."

# 8fe23b6135cb47bfa303cf7c2ffc57fb
#: ../../topics/db/multi-db.txt:248
msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""
"Этот пример не будет работать, если какая-либо модель из ``myapp`` содержит "
"связи с моделями не из ``other`` БД. Раздел :ref:`Связи между разными БД "
"<no_cross_database_relations>` описывает проблемы таких связей, которые "
"Django пока не может обрабатывать."

# 5211c6fb22b44d39bb3e8cdf5284f164
#: ../../topics/db/multi-db.txt:254
msgid ""
"The primary/replica (referred to as master/slave by some databases) "
"configuration described is also flawed -- it doesn't provide any solution "
"for handling replication lag (i.e., query inconsistencies introduced because "
"of the time taken for a write to propagate to the replicas). It also doesn't "
"consider the interaction of transactions with the database utilization "
"strategy."
msgstr ""
"Описанная настройка primary/replice (также известная в некоторых базах "
"данных как master/slave) не учитывает некоторые проблемы. Она не "
"предоставляет никакого решения для обработки задержек в репликации (т.е. "
"нарушение целостности запросов из-за времени, затраченного на рассылку "
"данных на подчинённые базы данных). Она также не рассматривает "
"взаимодействие транзакций со стратегией использования базы данных."

# 2e6ec892940247b4ab36d286827957a9
#: ../../topics/db/multi-db.txt:261
msgid ""
"So - what does this mean in practice? Let's consider another sample "
"configuration. This one will have several databases: one for the ``auth`` "
"application, and all other apps using a primary/replica setup with two read "
"replicas. Here are the settings specifying these databases::"
msgstr ""
"Итак, что же это означает на практике? Давайте рассмотрим другую "
"конфигурацию. В ней будет несколько баз данных: одна для приложения "
"``auth``, все остальные приложения используют primary/replica настройку, с "
"двумя читающими репликами. Покажем настройки для этих баз данных::"

# 69447b67daba42aa98fee2c6790757db
#: ../../topics/db/multi-db.txt:295
msgid ""
"Now we'll need to handle routing. First we want a router that knows to send "
"queries for the ``auth`` app to ``auth_db``::"
msgstr ""
"Теперь нам надо настроить роутинг. Сначала опишем роутер, который будет "
"слать запросы от приложения ``auth`` в базу данных ``auth_db``::"

# 160e817653d5480aaa8be3b6816f7e85
#: ../../topics/db/multi-db.txt:337
msgid ""
"And we also want a router that sends all other apps to the primary/replica "
"configuration, and randomly chooses a replica to read from::"
msgstr ""
"Также нам нужен роутер, который будет слать запросы всех остальных "
"приложений в конфигурацию primary/replica и случайно выбирать реплику для "
"чтения из неё::"

# e03de57bece744c7b3623b7473bb084b
#: ../../topics/db/multi-db.txt:372
msgid ""
"Finally, in the settings file, we add the following (substituting ``path.to."
"`` with the actual Python path to the module(s) where the routers are "
"defined)::"
msgstr ""
"Наконец, в файле конфигурации мы добавим следующее (подставим ``path.to`` с "
"реальным путём к модулю(-ям), в которых определены роутеры)::"

# 46b30ee88d794f4ca99f6510bae0527f
#: ../../topics/db/multi-db.txt:378
msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order they are listed in the :setting:`DATABASE_ROUTERS` "
"setting. In this example, the ``AuthRouter`` is processed before the "
"``PrimaryReplicaRouter``, and as a result, decisions concerning the models "
"in ``auth`` are processed before any other decision is made. If the :setting:"
"`DATABASE_ROUTERS` setting listed the two routers in the other order, "
"``PrimaryReplicaRouter.allow_migrate()`` would be processed first. The catch-"
"all nature of the PrimaryReplicaRouter implementation would mean that all "
"models would be available on all databases."
msgstr ""
"Порядок применения роутеров имеет важное значение. Роутеры вызываются в "
"порядке, в котором они перечислены в параметре конфигурации :setting:"
"`DATABASE_ROUTERS`. В этом примере ``AuthRouter`` применяется до "
"``PrimaryReplicaRouter`` и в результате, решение по модели в ``auth`` "
"принимается до всех остальных решений. Если же поменять порядок роутеров в :"
"setting:`DATABASE_ROUTERS`, то ``PrimaryReplicaRouter.allow_migrate()`` "
"будет применено первым. Сущность \"принимаем всё\" реализации этого роутера "
"приведёт к тому, что все модели будут доступны во всех базах данных."

# 97c12a233dfa428cbcf86ebc9111ee40
#: ../../topics/db/multi-db.txt:389
msgid "With this setup installed, lets run some Django code::"
msgstr "Используя вышеприведённую конфигурацию, выполним следующий код::"

#: ../../topics/db/multi-db.txt:414
msgid ""
"This example defined a router to handle interaction with models from the "
"``auth`` app, and other routers to handle interaction with all other apps. "
"If you left your ``default`` database empty and don't want to define a catch-"
"all database router to handle all apps not otherwise specified, your routers "
"must handle the names of all apps in :setting:`INSTALLED_APPS` before you "
"migrate. See :ref:`contrib_app_multiple_databases` for information about "
"contrib apps that must be together in one database."
msgstr ""
"Этот пример определяет роутер для работы с ``auth`` приложением и другие "
"роутеры для работы с другими приложениями. Если не указывать ``default`` "
"базу данных и не добавлять роутер, который обрабатывает все приложения, "
"необходимо указать все приложения из :setting:`INSTALLED_APPS` в ваших "
"роутерах чтобы выполнить миграции. Смотрите :ref:"
"`contrib_app_multiple_databases`, чтобы узнать какие приложения должны "
"находиться в одной базе данных."

# 05c0f317efbd4d28962e6b3ce4ceb203
#: ../../topics/db/multi-db.txt:423
msgid "Manually selecting a database"
msgstr "Ручное указание базы данных"

# fbc0eb82c3394156828fe4fd7374aa80
#: ../../topics/db/multi-db.txt:425
msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""
"Django также предоставляет API, которое позволяет вам получить полный "
"контроль над использованием баз данных в вашем коде. Ручное указание базы "
"данных имеет приоритет над действиями роутера."

# aeadcd3980a643fbaf100534de0720fc
#: ../../topics/db/multi-db.txt:430
msgid "Manually selecting a database for a ``QuerySet``"
msgstr "Ручное выбор базы данных для ``QuerySet``"

# 96e8706a60c043cb855b7fa0c70f47dc
#: ../../topics/db/multi-db.txt:432
msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get "
"another ``QuerySet`` that uses the specified database."
msgstr ""
"Вы можете выбрать базу данных для ``QuerySet`` в любой точке его цепочки. "
"Для этого надо применить метод ``using()``, который изменит базу данных, к "
"которой будет выполнен запрос."

# 9d0afe0f900342c0a7c52697e7bdaa34
#: ../../topics/db/multi-db.txt:436
msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""
"Метод ``using()`` принимает псевдоним базы данных в качестве единственного "
"аргумента. Например::"

# a62409f5bd4c4589ae6ec37fe81f8ec8
#: ../../topics/db/multi-db.txt:449
msgid "Selecting a database for ``save()``"
msgstr "Выбор базы данных для ``save()``"

# baf49f6b61a140c2a39d928d603f9f4c
#: ../../topics/db/multi-db.txt:451
msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""
"Используйте именованный аргумент ``using`` для метода ``Model.save()``, "
"чтобы указать базу данных, в которую должны быть записаны данные."

# 9ca9cdb4925549099f31956baf734100
#: ../../topics/db/multi-db.txt:454
msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""
"Например, для сохранения объекта в базе данных ``legacy_users``, вам "
"потребуется сделать::"

# cbbd04662ed54ee1ade638309bee50df
#: ../../topics/db/multi-db.txt:459
msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""
"Если вы не укажете ``using`` в методе ``save()``, то запись будет "
"произведена в стандартную базу данных, которую выберет роутер."

# dfeae7b21f944c88b530302f9450a1bd
#: ../../topics/db/multi-db.txt:463
msgid "Moving an object from one database to another"
msgstr "Перемещение объекта между базами данных"

# 163a8d0a0fde429fa74cbaccaa6774d3
#: ../../topics/db/multi-db.txt:465
msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""
"При сохранении экземпляра данных в одну базу данных, может показаться "
"заманчивым использовать ``save(using=...)`` в качестве способа переноса "
"экземпляра данных в новую базу данных. Однако, если вы не предприняли "
"соответствующих действий, такой подход может привести к неожиданным "
"последствиям."

# aae75878ae5043c58a56044fa5b63264
#: ../../topics/db/multi-db.txt:470
msgid "Consider the following example::"
msgstr "Рассмотрим следующий пример::"

# ed854a299d8f4777a137b88b6cab1600
#: ../../topics/db/multi-db.txt:476
msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues an SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""
"В первом операторе создаётся новый объект ``Person`` в базе данных "
"``first``. В этот момент ``p`` не обладает первичным ключом, поэтому Djangо "
"выполняет SQL запрос ``INSERT``. Запрос создаёт первичный ключ и Django "
"назначает его для ``p``."

# e5e58f03afa64671afd7a2e7a090f6d5
#: ../../topics/db/multi-db.txt:481
msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""
"При сохранении объекта во втором операторе, ``p`` уже обладает первичным "
"ключом и Django попытается использовать его для новой базы данных. Если "
"значение первичного ключа ещё не было использовано в базе данных ``second``, "
"то вы не заметите никаких проблем, объект будет скопирован в новую базу "
"данных."

# 6fe8e2a8670f4471b39ce677bb225148
#: ../../topics/db/multi-db.txt:487
msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""
"Тем не менее, если первичный ключ ``p`` уже используется в базе данных "
"``second``, то произойдёт перезапись объекта с таким ключом данными объекта "
"``p``."

# 122197f5c3984fb09a9e116fe2c10147
#: ../../topics/db/multi-db.txt:491
msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""
"Этого можно избежать двумя способами. Первый, вы можете очищать значение "
"первичного ключа в экземпляре. Если объект не имеет первичного ключа, Django "
"считает его новым, не позволяя потерь данных в базе ``second``::"

# 5ed2f5d95ff1420ea361263d2dd61e2b
#: ../../topics/db/multi-db.txt:501
msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does an SQL ``INSERT``::"
msgstr ""
"Вторым способом будет использование параметра ``force_insert`` метода "
"``save()``, чтобы явно заставить Django использовать SQL запрос ``INSERT``::"

# 1f8ef3b43a80445b852ac082cd59d4a9
#: ../../topics/db/multi-db.txt:508
msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to "
"save onto the ``second`` database, an error will be raised."
msgstr ""
"Это обеспечит одинаковое значение первичного ключа для персоны ``Fred`` в "
"обоих базах данных. Если такой первичный ключ уже используется в базе данных "
"``second``, то будет выброшена ошибка."

# a8ec9ce8fd464bab93e909dc8c373c2b
#: ../../topics/db/multi-db.txt:514
msgid "Selecting a database to delete from"
msgstr "Выбор базы для удаления данных"

# c4128abae09141859b8720c7b6064f09
#: ../../topics/db/multi-db.txt:516
msgid ""
"By default, a call to delete an existing object will be executed on the same "
"database that was used to retrieve the object in the first place::"
msgstr ""
"По-умолчанию, удаление существующего объекта будет выполнено в той же базе "
"данных из которой объект был получен::"

# f8907d036b024ee1885a4f0f89b655bc
#: ../../topics/db/multi-db.txt:523
msgid ""
"To specify the database from which a model will be deleted, pass a ``using`` "
"keyword argument to the ``Model.delete()`` method. This argument works just "
"like the ``using`` keyword argument to ``save()``."
msgstr ""
"Для указания базы данных из которой должна быть удалена модель, передайте "
"именованный аргумент ``using`` в метод ``Model.delete()``. Этот аргумент "
"работает аналогично такому же аргументу метода ``save()``."

# 1640abb55c4c4cc186c0416888340146
#: ../../topics/db/multi-db.txt:527
msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""
"Например, если вы перемещаете пользователя из базы данных ``legacy_users`` в "
"базу данных ``new_users``, вы можете использовать эти команды::"

# fb2a0a235b50425f99eafe809a0b33a1
#: ../../topics/db/multi-db.txt:534
msgid "Using managers with multiple databases"
msgstr "Использование менеджеров с множеством баз данных"

# d2035829ba124f6ab46d67ef95fd81e6
#: ../../topics/db/multi-db.txt:536
msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a non-"
"default database."
msgstr ""
"Используйте ``db_manager()`` метод менеджеров, чтобы дать им доступ к "
"нестандартной базе данных."

# 68413b8257174b0e93fccf2a6431048c
#: ../../topics/db/multi-db.txt:539
msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do ``User.objects."
"using('new_users').create_user()``. (The ``create_user()`` method is only "
"available on ``User.objects``, the manager, not on ``QuerySet`` objects "
"derived from the manager.) The solution is to use ``db_manager()``, like "
"this::"
msgstr ""
"Например, у вас есть свой метод менеджера, который изменяет данные в базе -- "
"``User.objects.create_user()``. Так как ``create_user()`` является методом "
"менеджера, а не запроса, вы не можете сделать ``User.objects."
"using('new_users').create_user()``. (Метод ``create_user()`` доступен только "
"в ``User.objects``, в менеджере, а не в объектах запроса, полученных из "
"менеджера.) Решением будет использование метода ``db_manager()``, например "
"так::"

# cf7883d81c944642b385716ea9f299f1
#: ../../topics/db/multi-db.txt:549
msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""
"``db_manager()`` возвращает копию менеджера для указанной вами базы данных."

# 8b21bcdff92e489ab3d088893192371f
#: ../../topics/db/multi-db.txt:552
msgid "Using ``get_queryset()`` with multiple databases"
msgstr "Использование ``get_queryset()`` с множеством баз данных"

# 855da973a2d64f1c8a2463204edf713c
#: ../../topics/db/multi-db.txt:554
msgid ""
"If you're overriding ``get_queryset()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""
"Если вы переопределяете ``get_queryset()`` в вашем менеджере, "
"удостоверьтесь, что вызываете метод родительского объекта (через "
"``super()``) или выполняйте соответствующую обработку атрибута ``_db`` в "
"менеджере (строка, содержащая имя используемой базы данных)."

# 513ec3a7b9fa43c59aeca199468aa594
#: ../../topics/db/multi-db.txt:559
msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_queryset`` method, you could do this::"
msgstr ""
"Например, если требуется вернуть свой класс ``QuerySet`` из метода "
"``get_queryset()``, то можно поступить так::"

# ea86ba305e074356ac930b8c828e511c
#: ../../topics/db/multi-db.txt:570
msgid "Exposing multiple databases in Django's admin interface"
msgstr "Использование множества баз данных в интерфейсе администратора"

# 9556109aaef040d3917666687e522f3f
#: ../../topics/db/multi-db.txt:572
msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom :class:"
"`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use "
"a specific database for content."
msgstr ""
"Интерфейс администратора Django не имеет явной поддержки для использования "
"множества баз данных. Если вам требуется предоставить интерфейс для модели в "
"базе данных, отличной от указанной в вашей цепочке роутеров, то потребуется "
"написать свои классы :class:`~django.contrib.admin.ModelAdmin`, которые "
"будут обеспечивать доступ к требуемой базе данных."

# 87a53aecfeb74918a25506848827bafe
#: ../../topics/db/multi-db.txt:578
msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""
"Объекты ``ModelAdmin`` имеют пять методов, которые требуют внесения "
"изменений для поддержки множества баз данных::"

# 549cfb825cec40118e901cf229a830b8
#: ../../topics/db/multi-db.txt:607
msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""
"Данная реализация обеспечивает мульти-БД стратегий, где все объекты "
"определённого типа хранятся в указанной базе данных (т.е. все объекты "
"``User`` хранятся в базе данных ``other``). Если ваша конфигурация множества "
"баз данных более сложна, тогда ваши ``ModelAdmin`` должны соответствовать "
"вашей стратегии."

# 9aeac70f95884fc6826146203dcfab6f
#: ../../topics/db/multi-db.txt:613
msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` objects can be handled in a "
"similar fashion. They require three customized methods::"
msgstr ""
":class:`~django.contrib.admin.InlineModelAdmin` обекты могут обрабатываться "
"аналогично. Они требуют три метода::"

# 584e76d919ff44f3bcd6c59cf1a570af
#: ../../topics/db/multi-db.txt:633
msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""
"После создания определений для ваших моделей, они могут быть "
"зарегистрированы в любом экземпляре ``Admin``::"

# 5bbfe64b0f8043f7856ff283cc18b59a
#: ../../topics/db/multi-db.txt:651
msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have a tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""
"Этот пример настраивает два административных сайта. На первом отображаются "
"объекты ``Author`` и ``Publisher``. Объекты ``Publisher`` имеют табличный "
"инлайн, показывающий книги данного издателя. Второй сайт отображает просто "
"издателей, без инлайнов."

# 8c1b9d49627c4ae09be2be97b0cd6c15
#: ../../topics/db/multi-db.txt:658
msgid "Using raw cursors with multiple databases"
msgstr "Использование raw курсоров с множеством баз данных"

# 0d8f03cf5527443482bc4a30fe1be898
#: ../../topics/db/multi-db.txt:660
msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""
"При использовании нескольких баз данных вы можете применять ``django.db."
"connections`` для получения соединения (и курсора) с указанной базой данных. "
"Объект ``django.db.connections`` является словарным объектом, который "
"позволяет вам получать нужное соединение, указав его псевдоним::"

# 139b54192cca4548ac87b9582a3bf590
#: ../../topics/db/multi-db.txt:670
msgid "Limitations of multiple databases"
msgstr "Ограничения в использовании множества баз данных"

# 3ef1d67b7b8b498b9ced094e5a696765
#: ../../topics/db/multi-db.txt:675
msgid "Cross-database relations"
msgstr "Связи между базами данных"

# bbc8612e03de4985b2d28a37ab5574d6
#: ../../topics/db/multi-db.txt:677
msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many "
"relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""
"В настоящее время Django не предоставляет поддержки для внешних ключей и "
"связей многие-ко-многим между множеством баз данных. Если вы используете "
"роутер для распределения моделей по различным базам данных, любой внешний "
"ключ и связи многие-ко-многим, определённые для этих моделей, должны быть "
"выполнены внутри одной базы данных."

# 6ee3d3c9ff5749a1ae3c4b18590ddbf3
#: ../../topics/db/multi-db.txt:683
msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""
"Всему причиной является ссылочная целостность. Для того, чтобы осуществлять "
"связь между двумя объектами, Django должно знать, что первичный ключ "
"связанного объекта является верным. Если первичный ключ сохранён в отдельной "
"базе данных, не существует возможности простого вычисления верности этого "
"первичного ключа."

# 130c2cf8e0a14720922a0f3ec78b1851
#: ../../topics/db/multi-db.txt:689
msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""
"При использовании Postgres, Oracle или MySQL с движком InnoDB, это "
"выполняется на уровне целостности базы данных - ограничения на ключи на "
"уровне базы данных не допускают создание связей, которые нельзя проверить."

# 9c61bdcf428844b0a05e46f0560da50e
#: ../../topics/db/multi-db.txt:693
msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross "
"database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""
"Тем не менее, если вы используете SQLite или MySQL с движком MyISAM, никакой "
"ссылочной целостности нет. В результате, вы можете создавать \"плюшевые\" "
"внешние ключи между базами данных. Однако, эта конфигурация не попадает в "
"список официально поддерживаемых Django."

# 3d8a837622bf4f9781ce3cc2bac9e6b0
#: ../../topics/db/multi-db.txt:701
msgid "Behavior of contrib apps"
msgstr "Поведение contrib приложений"

# 90157813c65b4f029669692eea4c9956
#: ../../topics/db/multi-db.txt:703
msgid ""
"Several contrib apps include models, and some apps depend on others. Since "
"cross-database relationships are impossible, this creates some restrictions "
"on how you can split these models across databases:"
msgstr ""
"Несколько поставляемых приложений содержат модели, а некоторые приложения "
"зависят от других. Так как невозможно достичь меж-БД целостности, это "
"создаёт некоторые ограничения на распределение этих моделей между базами "
"данных:"

# d0a1644b71f74e3f8d822ac6ae7bb645
#: ../../topics/db/multi-db.txt:707
msgid ""
"each one of ``contenttypes.ContentType``, ``sessions.Session`` and ``sites."
"Site`` can be stored in any database, given a suitable router."
msgstr ""
"каждый элемент ``contenttypes.ContentType``, ``sessions.Session`` и ``sites."
"Site`` может быть сохранён в любой базе данных, используя соответствующий "
"роутер."

# 115d14c495ab4fb6af2e07391369d240
#: ../../topics/db/multi-db.txt:709
msgid ""
"``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked "
"together and linked to ``ContentType``, so they must be stored in the same "
"database as ``ContentType``."
msgstr ""
"Модели приложения ``auth`` — ``User``, ``Group`` и ``Permission`` — "
"соединены друг с другом и с ``ContentType``, таким образом, они должны быть "
"сохранены в той же базе данных, что и ``ContentType``."

# 6fc01e00859c44bc8e41e48ad90ff12b
#: ../../topics/db/multi-db.txt:712
msgid ""
"``admin`` depends on ``auth``, so its models must be in the same database as "
"``auth``."
msgstr ""
"Приложение ``admin`` зависит от приложения ``auth``, таким образом, его "
"модели должны располагаться в той же базе данных, что и модели приложения "
"``auth``."

# c1564a3c4ab8461a93ae5e80092adc07
#: ../../topics/db/multi-db.txt:714
msgid ""
"``flatpages`` and ``redirects`` depend on ``sites``, so their models must be "
"in the same database as ``sites``."
msgstr ""
"Приложения ``flatpages`` и ``redirects`` зависят от приложения ``sites``, "
"таким образом их модели должны располагаться в той же базе данных, что и "
"модели приложения ``sites``."

# b1b08c9c3f564c4bbc856fbe94a49413
#: ../../topics/db/multi-db.txt:717
msgid ""
"In addition, some objects are automatically created just after :djadmin:"
"`migrate` creates a table to hold them in a database:"
msgstr ""
"В дополнение, некоторые объекты автоматически создаются после того как :"
"djadmin:`migrate` создаёт таблицу для их хранения в базе данных:"

# 9d0040c83e88441db7d85153fe3c125f
#: ../../topics/db/multi-db.txt:720
msgid "a default ``Site``,"
msgstr "стандартный ``Site``,"

# 71a8819220a2484c8dcee243f345bf16
#: ../../topics/db/multi-db.txt:721
msgid ""
"a ``ContentType`` for each model (including those not stored in that "
"database),"
msgstr ""
"``ContentType`` для каждой модели (включая те, что не сохранены в базе "
"данных),"

# 2b3b82fb60c0475ebb70a4fc98c42a8b
#: ../../topics/db/multi-db.txt:723
msgid ""
"three ``Permission`` for each model (including those not stored in that "
"database)."
msgstr ""
"три ``Permission`` для каждой модели (включая те, что не сохранены в базе "
"данных)."

# 89e351d8928644e98fae284bb4e9e929
#: ../../topics/db/multi-db.txt:726
msgid ""
"For common setups with multiple databases, it isn't useful to have these "
"objects in more than one database. Common setups include primary/replica and "
"connecting to external databases. Therefore, it's recommended to write a :"
"ref:`database router<topics-db-multi-db-routing>` that allows synchronizing "
"these three models to only one database. Use the same approach for contrib "
"and third-party apps that don't need their tables in multiple databases."
msgstr ""
"В стандартных конфигурациях с множеством баз данных, не будет полезным "
"распределять эти объекты по разным базам данных. Стандартные конфигурации "
"включают в себя главную базу данных и реплики, а также подключение к внешним "
"базам данных. В этом случае рекомендуется создать :ref:`роутер<topics-db-"
"multi-db-routing>`, который позволит синхронизировать эти три модели в одной "
"базе данных. Используйте аналогичный подход для поставляемых (contrib) "
"приложений и сторонних приложений, которые не требуют распределение своих "
"моделей по нескольким базам данных."

# 407d1a64372a4408bf200ede38224ef9
#: ../../topics/db/multi-db.txt:735
msgid ""
"If you're synchronizing content types to more than one database, be aware "
"that their primary keys may not match across databases. This may result in "
"data corruption or data loss."
msgstr ""
"Если вы синхронизируете типы контента по нескольким базам данных, обеспечьте "
"уникальность их первичных ключей на уровне всех баз данных. Иначе вы можете "
"столкнуться с потерей или порчей данных."

# c36074da13294ec0befd94c2836d4094
#~ msgid ""
#~ "Note that migrations will just silently not perform any operations on a "
#~ "model for which this returns ``False``. This may result in broken foreign "
#~ "keys, extra tables, or missing tables if you change it once you have "
#~ "applied some migrations."
#~ msgstr ""
#~ "Следует отметить, что миграции будут тихо проигнорированы для модели, "
#~ "которая получит ``False``. Это может привести к сломанным внешним ключам, "
#~ "к появлению лишних таблиц или к отсутствию таблиц, если значение для "
#~ "модели поменяется после применения миграций к базе данных."

#~ msgid ""
#~ "The signature of ``allow_migrate`` has changed significantly from "
#~ "previous versions. See the :ref:`deprecation notes <deprecated-signature-"
#~ "of-allow-migrate>` for more details."
#~ msgstr ""
#~ "Сигнатура ``allow_migrate`` значительно изменилась со времени прошлых "
#~ "версий. Обратитесь к :ref:`заметкам по старью <deprecated-signature-of-"
#~ "allow-migrate>` для получения подробностей."

# eac0ffc7172d47d186381a7a5b506398
#~ msgid ""
#~ "Alternatively, if you want fine-grained control of synchronization, you "
#~ "can pipe all or part of the output of :djadmin:`sqlall` for a particular "
#~ "application directly into your database prompt, like this::"
#~ msgstr ""
#~ "Аналогично, если вам нужен более тонкий контроль над синхронизацией, вы "
#~ "можете перенаправить весь или часть потока от команды :djadmin:`sqlall` "
#~ "для определённого приложения прямо в командную строку базы данных, вот "
#~ "так::"
