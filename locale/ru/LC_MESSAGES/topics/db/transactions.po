# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2014, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-03 16:48+0300\n"
"PO-Revision-Date: 2017-11-17 18:10+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 4cc932d9ef744290bc400ca2a669cae6
#: ../../topics/db/transactions.txt:3
msgid "Database transactions"
msgstr "Управление транзакциями базы данных"

# de779103b58c4774a85e4bc9d4924241
#: ../../topics/db/transactions.txt:7
msgid ""
"Django gives you a few ways to control how database transactions are managed."
msgstr ""
"Django предоставляет несколько инструментов для управления транзакциями базы "
"данных."

# 4cc932d9ef744290bc400ca2a669cae6
#: ../../topics/db/transactions.txt:10
msgid "Managing database transactions"
msgstr "Управление транзакциями"

# 367327ff4acb4fca87958fa26c0eae7a
#: ../../topics/db/transactions.txt:13
msgid "Django's default transaction behavior"
msgstr "Стандартное поведение Django"

# 8ae8c91f9a104df3b44629f9199265b1
#: ../../topics/db/transactions.txt:15
msgid ""
"Django's default behavior is to run in autocommit mode. Each query is "
"immediately committed to the database, unless a transaction is active. :ref:"
"`See below for details <autocommit-details>`."
msgstr ""
"По умолчанию Django использует режим автоматической фиксации(\"autocommit"
"\"). Каждый запрос сразу фиксируется в базе данных, если не используется "
"транзакция. :ref:`Смотрите ниже <autocommit-details>`."

# dd0c1128d07d465aab1481a0094dbc4c
#: ../../topics/db/transactions.txt:19
msgid ""
"Django uses transactions or savepoints automatically to guarantee the "
"integrity of ORM operations that require multiple queries, especially :ref:"
"`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-queries-"
"update>` queries."
msgstr ""
"Django автоматически использует транзакции или точки сохранения для операций "
"ORM, которые требуют нескольких запросов, особенно для :ref:`delete() "
"<topics-db-queries-delete>` и :ref:`update() <topics-db-queries-update>`."

# 9e657551bcff42248329196b88a57d14
#: ../../topics/db/transactions.txt:24
msgid ""
"Django's :class:`~django.test.TestCase` class also wraps each test in a "
"transaction for performance reasons."
msgstr ""
"Класс :class:`~django.test.TestCase` также оборачивает каждый тест в "
"транзакцию для оптимизации скорости выполнения тестов."

# 4b68e0d22c4b4a3d909c42db7413da70
#: ../../topics/db/transactions.txt:30
msgid "Tying transactions to HTTP requests"
msgstr "Привязка транзакций к HTTP запросам"

# 527fea9a731f4bad80d7a51c671de3b9
#: ../../topics/db/transactions.txt:32
msgid ""
"A common way to handle transactions on the web is to wrap each request in a "
"transaction. Set :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` to "
"``True`` in the configuration of each database for which you want to enable "
"this behavior."
msgstr ""
"Обычной практикой для Web-приложений является оборачивание каждого запроса в "
"транзакцию. Чтобы активировать такое поведение, установите :setting:"
"`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` в ``True`` для соответствующей "
"базы данных."

# 8cf50f314cb5478bb0cedc7bc21718cc
#: ../../topics/db/transactions.txt:37
msgid ""
"It works like this. Before calling a view function, Django starts a "
"transaction. If the response is produced without problems, Django commits "
"the transaction. If the view produces an exception, Django rolls back the "
"transaction."
msgstr ""
"Это работает следующим образом: при получении запроса Django начинает "
"транзакцию. Если ответ был создан без возникновения ошибок, Django фиксирует "
"все ожидающие транзакции. Если функция представления вызывает исключение, "
"Django откатывает все ожидающие транзакции."

# 37dd5811322448dc82611ff8d83607fa
#: ../../topics/db/transactions.txt:42
msgid ""
"You may perform subtransactions using savepoints in your view code, "
"typically with the :func:`atomic` context manager. However, at the end of "
"the view, either all or none of the changes will be committed."
msgstr ""
"Вы можете выполнять частичную фиксацию или откат изменений в коде "
"представления, обычно с помощью менеджера контекста :func:`atomic`. Но в "
"конце выполнения представления будут зафиксированы все изменения, или не "
"одно из них."

# 66611132c8a84a379831a542f77c0247
#: ../../topics/db/transactions.txt:48
msgid ""
"While the simplicity of this transaction model is appealing, it also makes "
"it inefficient when traffic increases. Opening a transaction for every view "
"has some overhead. The impact on performance depends on the query patterns "
"of your application and on how well your database handles locking."
msgstr ""
"Хотя такая обработка запросов выглядит очень простой и привлекательной, она "
"может быть неэффективна при росте количества запросов. Создание транзакции "
"для каждого запроса создает небольшую нагрузку на базу данных. Влияние на "
"производительность сервера зависит от запросов в вашем приложении и от того, "
"на сколько эффективно ваша база данных работает с блокировками."

# 52519a239647426fa02098d9afa2e4d6
#: ../../topics/db/transactions.txt:53
msgid "Per-request transactions and streaming responses"
msgstr "Транзакции для запроса и потоковый ответ"

# bdc45215f9ca4a7bb81dcf8a8382834e
#: ../../topics/db/transactions.txt:55
msgid ""
"When a view returns a :class:`~django.http.StreamingHttpResponse`, reading "
"the contents of the response will often execute code to generate the "
"content. Since the view has already returned, such code runs outside of the "
"transaction."
msgstr ""
"Когда представление возвращает :class:`~django.http.StreamingHttpResponse`, "
"чтение содержимого ответа выполняет некоторый код для его ответа. Т.к. "
"представление уже отработало, этот код будет выполняться вне транзакции."

# 74c944f9b5ad437bb484de515f25d7c1
#: ../../topics/db/transactions.txt:60
msgid ""
"Generally speaking, it isn't advisable to write to the database while "
"generating a streaming response, since there's no sensible way to handle "
"errors after starting to send the response."
msgstr ""
"Не советуем выполнять запись в базу данных при генерации потокового ответа, "
"т.к. нет хорошего способа обработать ошибки после начала отправки ответа."

# 5aaa1a274f8a49a79c11c30abe2aa6cb
#: ../../topics/db/transactions.txt:64
msgid ""
"In practice, this feature simply wraps every view function in the :func:"
"`atomic` decorator described below."
msgstr ""
"На практике каждое представление просто оборачивается в декоратор :func:"
"`atomic`, описанный ниже."

# 63e1ec7042834e07975c62b522206459
#: ../../topics/db/transactions.txt:67
msgid ""
"Note that only the execution of your view is enclosed in the transactions. "
"Middleware runs outside of the transaction, and so does the rendering of "
"template responses."
msgstr ""
"Обратите внимание, только представления оборачиваются в транзакцию. "
"Промежуточные слои(middleware) выполняются вне транзакции, аналогично "
"выполняется и рендеринг ответа."

# 8b4e840f905a467aa9761219f8cda533
#: ../../topics/db/transactions.txt:71
msgid ""
"When :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` is enabled, it's "
"still possible to prevent views from running in a transaction."
msgstr ""
"При включенной :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` все еще "
"существует возможность не использовать транзакцию для представления."

# 697984f005d34957857b5a265a735b23
#: ../../topics/db/transactions.txt:76
msgid ""
"This decorator will negate the effect of :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` for a given view::"
msgstr ""
"Этот декоратор отключает эффект :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` для указанного представления::"

# a76a3294bab844e7ade611d2488ad584
#: ../../topics/db/transactions.txt:89
msgid "It only works if it's applied to the view itself."
msgstr "Работает только при применении к представлению."

# 9ec15ad440d54d4eb2d525aa91049116
#: ../../topics/db/transactions.txt:92
msgid "Controlling transactions explicitly"
msgstr "Явное управление транзакциями"

# 4cc932d9ef744290bc400ca2a669cae6
#: ../../topics/db/transactions.txt:94
msgid "Django provides a single API to control database transactions."
msgstr "Django предоставляет один API для управления транзакциями базы данных."

# 9bf568d54a404063aec5a8e488f69bfb
#: ../../topics/db/transactions.txt:98
msgid ""
"Atomicity is the defining property of database transactions. ``atomic`` "
"allows us to create a block of code within which the atomicity on the "
"database is guaranteed. If the block of code is successfully completed, the "
"changes are committed to the database. If there is an exception, the changes "
"are rolled back."
msgstr ""
"Атомарность является основным свойством транзакций базы данных. ``atomic`` "
"позволяет создать блок кода, для которого гарантируется атомарность операций "
"над базой данных. Если этот блок кода выполнился без ошибок, все изменения "
"фиксируются в базе данных. Если произошла ошибка, все изменений будут "
"отменены."

# 5b9f3bebddb0476a98fb1d8267f9fc0d
#: ../../topics/db/transactions.txt:104
msgid ""
"``atomic`` blocks can be nested. In this case, when an inner block completes "
"successfully, its effects can still be rolled back if an exception is raised "
"in the outer block at a later point."
msgstr ""
"``atomic`` блоки могут быть вложенными. В этом случае, если вложенный блок "
"выполнился успешно, изменения в базе данных, которые он произвел, могут быть "
"отменены при ошибке во внешнем блоке кода."

# 813153ed49d944129c2979d08ba55e46
#: ../../topics/db/transactions.txt:108
msgid "``atomic`` is usable both as a :py:term:`decorator`::"
msgstr "``atomic`` может использоваться как :py:term:`decorator`::"

# 705e769a3a4a4801a7ad0540283076c0
#: ../../topics/db/transactions.txt:117
msgid "and as a :py:term:`context manager`::"
msgstr "и как :py:term:`context manager`::"

# 827c6c310995479b988501120c2429b8
#: ../../topics/db/transactions.txt:129
msgid ""
"Wrapping ``atomic`` in a try/except block allows for natural handling of "
"integrity errors::"
msgstr ""
"Обернув ``atomic`` в блок ``try/except``, можно выполнить обработку ошибок::"

# 61ce2d08657d40b09de1caa2c112dfcc
#: ../../topics/db/transactions.txt:146
msgid ""
"In this example, even if ``generate_relationships()`` causes a database "
"error by breaking an integrity constraint, you can execute queries in "
"``add_children()``, and the changes from ``create_parent()`` are still "
"there. Note that any operations attempted in ``generate_relationships()`` "
"will already have been rolled back safely when ``handle_exception()`` is "
"called, so the exception handler can also operate on the database if "
"necessary."
msgstr ""
"В этом примере, вы можете выполнить запросы в ``add_children()``, даже если "
"``generate_relationships()`` вызывал ошибку, также никуда не денутся "
"изменения, выполненные в ``create_parent()``. Обратите внимание, любые "
"операции из ``generate_relationships()`` уже будут отменены, и при обработке "
"ошибки в ``handle_exception()`` можно безопасно выполнять запросы к базе "
"данных."

# 1378fc3be5ab43298b3c9aac698d58c8
#: ../../topics/db/transactions.txt:154
msgid "Avoid catching exceptions inside ``atomic``!"
msgstr "Избегайте перехвата ошибок в ``atomic``!"

# 3b6d50f8dac1415fb7e638d27ad38a3e
#: ../../topics/db/transactions.txt:156
msgid ""
"When exiting an ``atomic`` block, Django looks at whether it's exited "
"normally or with an exception to determine whether to commit or roll back. "
"If you catch and handle exceptions inside an ``atomic`` block, you may hide "
"from Django the fact that a problem has happened. This can result in "
"unexpected behavior."
msgstr ""
"При выходе из блока ``atomic`` Django определяет произошла ли ошибка, чтобы "
"понять фиксировать изменения или отменить их. Если вы перехватите исключение "
"и обработаете его в блоке ``atomic``, вы можете скрыть от Django наличие "
"проблемы. Это может привести к непредвиденному поведению."

# 1798cf44ce8d4496b38e0d5b554e89b3
#: ../../topics/db/transactions.txt:162
msgid ""
"This is mostly a concern for :exc:`~django.db.DatabaseError` and its "
"subclasses such as :exc:`~django.db.IntegrityError`. After such an error, "
"the transaction is broken and Django will perform a rollback at the end of "
"the ``atomic`` block. If you attempt to run database queries before the "
"rollback happens, Django will raise a :class:`~django.db.transaction."
"TransactionManagementError`. You may also encounter this behavior when an "
"ORM-related signal handler raises an exception."
msgstr ""
"В основном это относится к :exc:`~django.db.DatabaseError` и классам "
"наследникам, например :exc:`~django.db.IntegrityError`. При таких ошибках "
"транзакция будет сломана и Django выполнит отмену изменений после завершения "
"блока ``atomic``. Если вы попытаетесь выполнить запросы перед отменой "
"изменений, Django вызовет исключение :class:`~django.db.transaction."
"TransactionManagementError`. Подобное поведение может произойти, если "
"обработчик сигналов ORM вызовет исключение."

# 67ffad60eab84079b178e1fe16b7e36b
#: ../../topics/db/transactions.txt:171
msgid ""
"The correct way to catch database errors is around an ``atomic`` block as "
"shown above. If necessary, add an extra ``atomic`` block for this purpose. "
"This pattern has another advantage: it delimits explicitly which operations "
"will be rolled back if an exception occurs."
msgstr ""
"Правильный способ обработать ошибки базы данных -- перехватить их за блоком "
"``atomic``, как в примере выше. Если необходимо, добавьте дополнительный "
"блок ``atomic`` для этого. У такого подхода есть свои преимущества: он явно "
"разделяет операции, которые должны быть отменены при ошибке."

# 0d1628bb73b1400eba2f5a7f9108e6b2
#: ../../topics/db/transactions.txt:176
msgid ""
"If you catch exceptions raised by raw SQL queries, Django's behavior is "
"unspecified and database-dependent."
msgstr ""
"Если вы перехватите исключение, вызванное чистым SQL запросом, поведение "
"Django будет зависеть от вашей базы данных."

#: ../../topics/db/transactions.txt:179
msgid ""
"You may need to manually revert model state when rolling back a transaction."
msgstr ""
"В некоторых случаях вам необходимо отменить изменения в модели после отката "
"транзакции"

#: ../../topics/db/transactions.txt:181
msgid ""
"The values of a model's fields won't be reverted when a transaction rollback "
"happens. This could lead to an inconsistent model state unless you manually "
"restore the original field values."
msgstr ""
"Значения полей модели не будут изменены обратно после отката транзакции. Это "
"может привести к не согласующемся состоянию модели, если вы явно не "
"восстановите начальные значения."

#: ../../topics/db/transactions.txt:185
msgid ""
"For example, given ``MyModel`` with an ``active`` field, this snippet "
"ensures that the ``if obj.active`` check at the end uses the correct value "
"if updating ``active`` to ``True`` fails in the transaction::"
msgstr ""
"Например, возьмем ``MyModel`` с полем ``active``, этот код проверяет "
"правильное значение в ``if obj.active`` даже если установка ``active`` в "
"``True`` не выполнилась в транзакции::"

# 34c80850557e4a72b47a2fd2e58b89a2
#: ../../topics/db/transactions.txt:202
msgid ""
"In order to guarantee atomicity, ``atomic`` disables some APIs. Attempting "
"to commit, roll back, or change the autocommit state of the database "
"connection within an ``atomic`` block will raise an exception."
msgstr ""
"Чтобы гарантировать атомарность, ``atomic`` блокирует некоторые функции. При "
"попытке явно зафиксировать или отменить изменения, или изменить статус "
"\"autocommit\" подключения к базе данных внутри блока ``atomic``, будет "
"вызвано исключение."

# b5761afe39df4f1880ca5a1d2fd66c1b
#: ../../topics/db/transactions.txt:206
msgid ""
"``atomic`` takes a ``using`` argument which should be the name of a "
"database. If this argument isn't provided, Django uses the ``\"default\"`` "
"database."
msgstr ""
"``atomic`` принимает аргумент ``using``, который обозначает имя базы данных "
"с которой производится работа. Если этот аргумент не указан, то все действия "
"идут относительно стандартной (``\"default\"``) базы данных."

# 9ec15ad440d54d4eb2d525aa91049116
#: ../../topics/db/transactions.txt:210
msgid "Under the hood, Django's transaction management code:"
msgstr "Код обработки транзакций в Django выполняет следующие действия:"

# 36c95550f7b84067b5ba8acc881a65a6
#: ../../topics/db/transactions.txt:212
msgid "opens a transaction when entering the outermost ``atomic`` block;"
msgstr "создает транзакцию при входе в блок ``atomic``;"

# d8b28e3bfe7e4ec1944fdb1662a53ade
#: ../../topics/db/transactions.txt:213
msgid "creates a savepoint when entering an inner ``atomic`` block;"
msgstr "создает точку сохранения при входе во вложенный блок ``atomic``;"

# 7e16b87795e2433492c839f4370fd865
#: ../../topics/db/transactions.txt:214
msgid "releases or rolls back to the savepoint when exiting an inner block;"
msgstr ""
"сохраняет или отменяет точку сохранения при выходе из вложенного блока;"

# 4652ccb9b60f42fdb5f0dc790c3e278a
#: ../../topics/db/transactions.txt:215
msgid "commits or rolls back the transaction when exiting the outermost block."
msgstr "фиксирует или отменяет транзакцию при выходе из последнего блока."

# 9c9408dc4d65480bbc2d3980e19b4480
#: ../../topics/db/transactions.txt:217
msgid ""
"You can disable the creation of savepoints for inner blocks by setting the "
"``savepoint`` argument to ``False``. If an exception occurs, Django will "
"perform the rollback when exiting the first parent block with a savepoint if "
"there is one, and the outermost block otherwise. Atomicity is still "
"guaranteed by the outer transaction. This option should only be used if the "
"overhead of savepoints is noticeable. It has the drawback of breaking the "
"error handling described above."
msgstr ""
"Вы можете отменить создание точки сохранения для внутренних блоков, указав в "
"аргументе ``savepoint`` ``False``. При исключении Django выполнит отмену "
"изменений при выходе из первого попавшегося блока, который создает точку "
"сохранения, или же самого последнего блока. Атомарность внешних транзакций "
"все также гарантирована. Такой подход должен использоваться только для "
"оптимизации создания точек сохранения, т.к. нарушает обработку ошибок, как "
"было описано выше."

# 2229167d23bc4066b6adbd298c2cf76b
#: ../../topics/db/transactions.txt:225
msgid ""
"You may use ``atomic`` when autocommit is turned off. It will only use "
"savepoints, even for the outermost block."
msgstr ""
"Вы можете использовать ``atomic`` при выключенном \"autocommit\". Он "
"использует только точки сохранения, даже для самого внешнего блока."

# 445150fe52704409a295ee1103f29015
#: ../../topics/db/transactions.txt:228
msgid "Performance considerations"
msgstr "Заметка о производительности"

# 278985c207e04d3ea7402fe952b10ff6
#: ../../topics/db/transactions.txt:230
msgid ""
"Open transactions have a performance cost for your database server. To "
"minimize this overhead, keep your transactions as short as possible. This is "
"especially important if you're using :func:`atomic` in long-running "
"processes, outside of Django's request / response cycle."
msgstr ""
"Создание транзакции требует определенных операций от базы данных. Чтобы "
"минимизировать нагрузку на сервер базы данных, делайте транзакции минимально "
"короткими. Это особенно важно при использовании :func:`atomic` в долго "
"выполняемых процессах вне цикла обработки запроса и ответа."

# 4891d04f6280425da08d5bc397e2d6eb
# 3a3c9b3f22c843289ae8b7bca0a0ee99
#: ../../topics/db/transactions.txt:236 ../../topics/db/transactions.txt:433
msgid "Autocommit"
msgstr "Autocommit"

# 40a191800eb04cfd8ae4eb35f729f373
#: ../../topics/db/transactions.txt:241
msgid "Why Django uses autocommit"
msgstr "Почему Django использует автоматическую фиксацию"

# b4958f77d5bc4cdaa5b63ceae1c86264
#: ../../topics/db/transactions.txt:243
msgid ""
"In the SQL standards, each SQL query starts a transaction, unless one is "
"already active. Such transactions must then be explicitly committed or "
"rolled back."
msgstr ""
"По стандартам SQL каждый SQL-запрос начинается с транзакции, если она еще не "
"создана. Эти транзакции должны быть явно зафиксированы или отменены."

# 5c6e4d330a8344d88deb613c8ec8dac7
#: ../../topics/db/transactions.txt:247
msgid ""
"This isn't always convenient for application developers. To alleviate this "
"problem, most databases provide an autocommit mode. When autocommit is "
"turned on and no transaction is active, each SQL query gets wrapped in its "
"own transaction. In other words, not only does each such query start a "
"transaction, but the transaction also gets automatically committed or rolled "
"back, depending on whether the query succeeded."
msgstr ""
"Это не всегда удобно при разработке приложения. Чтобы решить эту проблему, "
"большинство баз данных поддерживает режим автоматической "
"фиксации(autocommit). При включенном \"autocommit\", если транзакция не "
"активна, каждый SQL запрос обернут в транзакцию. То есть транзакция для "
"каждого запроса не только создается, но и автоматически фиксируется, если "
"запросы был успешно выполнен."

# 58cb5ef7fcc44f1a92e8c6834032c1e1
#: ../../topics/db/transactions.txt:254
msgid ""
":pep:`249`, the Python Database API Specification v2.0, requires autocommit "
"to be initially turned off. Django overrides this default and turns "
"autocommit on."
msgstr ""
":pep:`249`, спецификация Python о Database API v2.0, требует чтобы "
"\"autocommit\" по умолчанию был выключен. Django переопределяет это "
"поведение и \"autocommit\" по умолчанию включен."

# dddcb751cf644452995d5a5369060c71
#: ../../topics/db/transactions.txt:258
msgid ""
"To avoid this, you can :ref:`deactivate the transaction management "
"<deactivate-transaction-management>`, but it isn't recommended."
msgstr ""
":ref:`Вы можете отключить такое поведение <deactivate-transaction-"
"management>`, но мы не рекомендует этого делать."

# 9803f47b47444902b7c3ea61078bbab1
#: ../../topics/db/transactions.txt:264
msgid "Deactivating transaction management"
msgstr "Отключение управления транзакциями"

# ab0786299a89455b9d81102408b38f84
#: ../../topics/db/transactions.txt:266
msgid ""
"You can totally disable Django's transaction management for a given database "
"by setting :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` to ``False`` in its "
"configuration. If you do this, Django won't enable autocommit, and won't "
"perform any commits. You'll get the regular behavior of the underlying "
"database library."
msgstr ""
"Вы можете отключить управление транзакциями Django для определенной базы "
"данных, установив :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` в ``False`` в "
"её настройках. При этом Django отключит \"autocommit\" и не будет выполнять "
"фиксирование изменений. Все будут работать в соответствии с библиотекой, "
"которая используется для работы с базой данных."

# 18f4e6db2b754734bfe405f55fa03941
#: ../../topics/db/transactions.txt:272
msgid ""
"This requires you to commit explicitly every transaction, even those started "
"by Django or by third-party libraries. Thus, this is best used in situations "
"where you want to run your own transaction-controlling middleware or do "
"something really strange."
msgstr ""
"При этом вам необходимо явно фиксировать каждую транзакцию, не зависимо была "
"ли она создана Django, или сторонней библиотекой. Это может быть полезно, "
"если вы хотите использовать свой промежуточный слой(middleware) для "
"управления транзакциями, или сделать что-то очень необычное."

#: ../../topics/db/transactions.txt:278
msgid "Performing actions after commit"
msgstr "Выполнение операция после коммита"

#: ../../topics/db/transactions.txt:280
msgid ""
"Sometimes you need to perform an action related to the current database "
"transaction, but only if the transaction successfully commits. Examples "
"might include a `Celery`_ task, an email notification, or a cache "
"invalidation."
msgstr ""
"Иногда вам необходимо выполнить какие-либо действия связанные с текущей "
"транзакцией в базе данных, но только при успешном коммите транзакции. Это "
"может быть задача `Celery`_, отправка электронного письма, или сброс кэша."

#: ../../topics/db/transactions.txt:286
msgid ""
"Django provides the :func:`on_commit` function to register callback "
"functions that should be executed after a transaction is successfully "
"committed:"
msgstr ""
"Django предоставляет функцию :func:`on_commit`, которая позволяет добавить "
"обработчик, вызываемый после успешного коммита транзакции:"

#: ../../topics/db/transactions.txt:291
msgid "Pass any function (that takes no arguments) to :func:`on_commit`::"
msgstr ""
"Передайте функцию (которая не требует аргументов) в :func:`on_commit`::"

#: ../../topics/db/transactions.txt:300
msgid "You can also wrap your function in a lambda::"
msgstr "Можно также использовать lambda::"

#: ../../topics/db/transactions.txt:304
msgid ""
"The function you pass in will be called immediately after a hypothetical "
"database write made where ``on_commit()`` is called would be successfully "
"committed."
msgstr ""
"Обработчик будет выполнен сразу после гипотетической записи в базу данных, "
"которая означает успешное завершение транзакции."

#: ../../topics/db/transactions.txt:308
msgid ""
"If you call ``on_commit()`` while there isn't an active transaction, the "
"callback will be executed immediately."
msgstr ""
"Если вызывать ``on_commit()`` пока транзакция активна, обработчик сразу "
"выполнится."

#: ../../topics/db/transactions.txt:311
msgid ""
"If that hypothetical database write is instead rolled back (typically when "
"an unhandled exception is raised in an :func:`atomic` block), your function "
"will be discarded and never called."
msgstr ""
"Если транзакция будет отменена (обычно при возникновении ошибки в блоке :"
"func:`atomic`), обработчик никогда не выполнится и будет проигнорирован."

# e5353a7c8bb648d6971c583a6fcb7b0a
#: ../../topics/db/transactions.txt:316 ../../topics/db/transactions.txt:486
msgid "Savepoints"
msgstr "Точки сохранения"

#: ../../topics/db/transactions.txt:318
msgid ""
"Savepoints (i.e. nested :func:`atomic` blocks) are handled correctly. That "
"is, an :func:`on_commit` callable registered after a savepoint (in a nested :"
"func:`atomic` block) will be called after the outer transaction is "
"committed, but not if a rollback to that savepoint or any previous savepoint "
"occurred during the transaction::"
msgstr ""
"Точки сохранения (например вложенные блоки :func:`atomic`) обрабатываются "
"правильно. То есть обработчик, добавленный :func:`on_commit` после точки "
"сохранения (во вложенных блоках :func:`atomic`), будет выполнен после "
"коммита внешней транзакции, и не будет выполнен при откате до этой точки "
"сохранения, или другой точки сохранения в текущей транзакции::"

#: ../../topics/db/transactions.txt:332
msgid ""
"On the other hand, when a savepoint is rolled back (due to an exception "
"being raised), the inner callable will not be called::"
msgstr ""
"Другими словами, при выполнении отката точки сохранения (из-за исключения), "
"внутренний обработчик не будет вызван::"

#: ../../topics/db/transactions.txt:348
msgid "Order of execution"
msgstr "Порядок выполнения"

#: ../../topics/db/transactions.txt:350
msgid ""
"On-commit functions for a given transaction are executed in the order they "
"were registered."
msgstr ""
"Обработчики коммита транзакции выполняются в порядке, в котором они были "
"зарегистрированы."

#: ../../topics/db/transactions.txt:354
msgid "Exception handling"
msgstr "Обработка исключений"

#: ../../topics/db/transactions.txt:356
msgid ""
"If one on-commit function within a given transaction raises an uncaught "
"exception, no later registered functions in that same transaction will run. "
"This is, of course, the same behavior as if you'd executed the functions "
"sequentially yourself without :func:`on_commit`."
msgstr ""
"Если один из обработчиков вызывал исключение во время транзакции, другие "
"обработчики не будут вызваны. Такое поведение аналогично, если бы вы "
"последовательно выполняли функции без :func:`on_commit`."

#: ../../topics/db/transactions.txt:362
msgid "Timing of execution"
msgstr "Время выполнения обработчиков"

#: ../../topics/db/transactions.txt:364
msgid ""
"Your callbacks are executed *after* a successful commit, so a failure in a "
"callback will not cause the transaction to roll back. They are executed "
"conditionally upon the success of the transaction, but they are not *part* "
"of the transaction. For the intended use cases (mail notifications, Celery "
"tasks, etc.), this should be fine. If it's not (if your follow-up action is "
"so critical that its failure should mean the failure of the transaction "
"itself), then you don't want to use the :func:`on_commit` hook. Instead, you "
"may want `two-phase commit`_ such as the `psycopg Two-Phase Commit protocol "
"support`_ and the `optional Two-Phase Commit Extensions in the Python DB-API "
"specification`_."
msgstr ""
"Ваши обработчики вызываются *после* успешного коммита, и ошибка в "
"обработчике не приведет к отмене транзакции. Они не являются *частью* "
"транзакции. Для предполагаемых случаев использования (отправка электронных "
"писем, Celery задача, и т.д.) такое поведение работает. Если нет (если "
"выполнение обработчика настолько важно, что при ошибки должна быть выполнена "
"отмена транзакции), тогда вам не следует использовать :func:`on_commit`. "
"Вместо этого может помочь `двухфазный коммит <https://en.wikipedia.org/wiki/"
"Two-phase_commit_protocol>`_, который `поддерживается psycopg <http://initd."
"org/psycopg/docs/usage.html#tpc>_ и `спецификацией Python DB-API <https://"
"www.python.org/dev/peps/pep-0249/#optional-two-phase-commit-extensions>`_."

#: ../../topics/db/transactions.txt:375
msgid ""
"Callbacks are not run until autocommit is restored on the connection "
"following the commit (because otherwise any queries done in a callback would "
"open an implicit transaction, preventing the connection from going back into "
"autocommit mode)."
msgstr ""
"Обработчики не вызываются, пока не будет восстановлен \"autocommit\" (т.к. "
"любой запрос в обработчике неявно создаст транзакцию и заблокирует переход "
"подключения в \"autocommit\" режим)."

#: ../../topics/db/transactions.txt:380
msgid ""
"When in autocommit mode and outside of an :func:`atomic` block, the function "
"will run immediately, not on commit."
msgstr ""
"Если назначить обработчик в \"autocommit\" режиме вне блока :func:`atomic`, "
"он будет выполнен моментально, а не после коммита."

#: ../../topics/db/transactions.txt:383
msgid ""
"On-commit functions only work with :ref:`autocommit mode <managing-"
"autocommit>` and the :func:`atomic` (or :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>`) transaction API. Calling :func:`on_commit` when "
"autocommit is disabled and you are not within an atomic block will result in "
"an error."
msgstr ""
"Обработчики коммита транзакции работают только с :ref:`\"autocommit\" "
"режимом <managing-autocommit>` и :func:`atomic` (или при :setting:"
"`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>`) API транзакций. Вызвав :func:"
"`on_commit` при отключенном \"autocommit\" и вне блока ``atomic`` приведет к "
"ошибке."

#: ../../topics/db/transactions.txt:394
msgid "Use in tests"
msgstr "Использование в тестах"

#: ../../topics/db/transactions.txt:396
msgid ""
"Django's :class:`~django.test.TestCase` class wraps each test in a "
"transaction and rolls back that transaction after each test, in order to "
"provide test isolation. This means that no transaction is ever actually "
"committed, thus your :func:`on_commit` callbacks will never be run. If you "
"need to test the results of an :func:`on_commit` callback, use a :class:"
"`~django.test.TransactionTestCase` instead."
msgstr ""
"Встроенный класс :class:`~django.test.TestCase` оборачивает каждый тест в "
"транзакцию и отменяет её после выполнения теста, чтобы обеспечить "
"изолированность тестов. Это означает, что ни одна транзакция никогда не "
"коммитится, и обработчики :func:`on_commit` никогда не будут вызваны. Если "
"вам нужно протестировать выполнение обработчика :func:`on_commit`, "
"используйте :class:`~django.test.TransactionTestCase`."

#: ../../topics/db/transactions.txt:404
msgid "Why no rollback hook?"
msgstr "Почему нет обработчика отмены транзакции?"

#: ../../topics/db/transactions.txt:406
msgid ""
"A rollback hook is harder to implement robustly than a commit hook, since a "
"variety of things can cause an implicit rollback."
msgstr ""
"Обработчик отмены транзакции реализовать на много сложнее т.к. причин отката "
"на много больше."

#: ../../topics/db/transactions.txt:409
msgid ""
"For instance, if your database connection is dropped because your process "
"was killed without a chance to shut down gracefully, your rollback hook will "
"never run."
msgstr ""
"Например, если подключение к базе данных оборвалось из-за внезапной "
"остановки процесса, ваш обработчик отмены транзакции никогда не сможет "
"выполниться."

#: ../../topics/db/transactions.txt:413
msgid ""
"The solution is simple: instead of doing something during the atomic block "
"(transaction) and then undoing it if the transaction fails, use :func:"
"`on_commit` to delay doing it in the first place until after the transaction "
"succeeds. It's a lot easier to undo something you never did in the first "
"place!"
msgstr ""
"Решение простое: вместо того, чтобы выполнить что-то в блоке транзакции и "
"затем отменять это при отмене транзакции, используйте :func:`on_commit`, "
"чтобы отложить эти действия на момент успешного выполнения транзакции. На "
"много проще отметить то, что никогда не выполнялось!"

# 94cc977612ae4fe9ad1ed461447a0238
#: ../../topics/db/transactions.txt:420
msgid "Low-level APIs"
msgstr "Низкоуровневый API"

# dd135cd5afb14d80b463c31d2e33daa0
#: ../../topics/db/transactions.txt:424
msgid ""
"Always prefer :func:`atomic` if possible at all. It accounts for the "
"idiosyncrasies of each database and prevents invalid operations."
msgstr ""
"При любой возможности используйте :func:`atomic`. Эта функция учитывает "
"особенности различных баз данных и предотвращает использование недоступных "
"операций."

# 09c8ec95affb488eaa07626c4c2e9385
#: ../../topics/db/transactions.txt:427
msgid ""
"The low level APIs are only useful if you're implementing your own "
"transaction management."
msgstr ""
"Низкоуровневый API полезен только при реализации собственного управления "
"транзакциями."

# 3725507756be4f7393dadcaa8fefa300
#: ../../topics/db/transactions.txt:435
msgid ""
"Django provides a straightforward API in the :mod:`django.db.transaction` "
"module to manage the autocommit state of each database connection."
msgstr ""
"Django предоставляет простой API в модуле :mod:`django.db.transaction` для "
"управления \"autocommit\" для каждого подключения к базе данных."

# b5761afe39df4f1880ca5a1d2fd66c1b
#: ../../topics/db/transactions.txt:442 ../../topics/db/transactions.txt:477
msgid ""
"These functions take a ``using`` argument which should be the name of a "
"database. If it isn't provided, Django uses the ``\"default\"`` database."
msgstr ""
"Каждая из этих функций принимает аргумент ``using``, который обозначает имя "
"базы данных. Если этот аргумент не указан, то все действия идут относительно "
"стандартной (``\"default\"``) базы данных."

# f266e0322dac4cc08f31ac892f7986c6
#: ../../topics/db/transactions.txt:445
msgid ""
"Autocommit is initially turned on. If you turn it off, it's your "
"responsibility to restore it."
msgstr ""
"\"autocommit\" по умолчанию включен. Если вы выключили его, на вашей "
"ответственности и его включение."

# b038616bc55a47b08a19d323d3dd965d
#: ../../topics/db/transactions.txt:448
msgid ""
"Once you turn autocommit off, you get the default behavior of your database "
"adapter, and Django won't help you. Although that behavior is specified in :"
"pep:`249`, implementations of adapters aren't always consistent with one "
"another. Review the documentation of the adapter you're using carefully."
msgstr ""
"При выключении \"autocommit\", вы получаете поведение по умолчанию "
"библиотеки, которая используется для работы с базой данных, и Django ничем "
"вам не поможет. Это поведение описано в :pep:`249`, но реализация в "
"различных библиотеках может отличаться. Вам следует изучить документацию "
"используемой библиотеки."

# 3b4b0bc8d4e44319ab38784e2ce03adf
#: ../../topics/db/transactions.txt:453
msgid ""
"You must ensure that no transaction is active, usually by issuing a :func:"
"`commit` or a :func:`rollback`, before turning autocommit back on."
msgstr ""
"Перед включением \"autocommit\" вы должны убедиться, что транзакция не "
"активна, обычно выполнив :func:`commit` или :func:`rollback`."

# 60e04e3b15fc491da1a0fe99ee18d362
#: ../../topics/db/transactions.txt:456
msgid ""
"Django will refuse to turn autocommit off when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""
"Django не позволит выключить \"autocommit\", если активен блок :func:"
"`atomic`, т.к. это нарушит атомарность."

# 1cd9d1e6b3e74602a5909fa7b987370b
#: ../../topics/db/transactions.txt:460
msgid "Transactions"
msgstr "Транзакции"

# a24aef0470f7452fb23ea496b44436e9
#: ../../topics/db/transactions.txt:462
msgid ""
"A transaction is an atomic set of database queries. Even if your program "
"crashes, the database guarantees that either all the changes will be "
"applied, or none of them."
msgstr ""
"Транзакция -- это атомарный набор запросов к базе данных. Даже если ваша "
"программа аварийно завершится, база данных гарантирует, что будут сохранены "
"все изменения, или ни одно из них."

# fe0f0c01f57e4707879e9157890075fd
#: ../../topics/db/transactions.txt:466
msgid ""
"Django doesn't provide an API to start a transaction. The expected way to "
"start a transaction is to disable autocommit with :func:`set_autocommit`."
msgstr ""
"Django не предоставляет API для явного создания транзакции. Чтобы создать "
"транзакцию, отключите \"autocommit\" с помощью :func:`set_autocommit`."

# 5d887f79d8714e008e44b8b9d3401dad
#: ../../topics/db/transactions.txt:469
msgid ""
"Once you're in a transaction, you can choose either to apply the changes "
"you've performed until this point with :func:`commit`, or to cancel them "
"with :func:`rollback`. These functions are defined in :mod:`django.db."
"transaction`."
msgstr ""
"Оказавшись в транзакции, можно зафиксировать выполненные изменения, "
"используя функцию :func:`commit`, или отменить их через функцию :func:"
"`rollback`. Эти функции находятся в модуле :mod:`django.db.transaction`."

# eb8a266b3d2e46aca5bd1ddac0005c63
#: ../../topics/db/transactions.txt:480
msgid ""
"Django will refuse to commit or to rollback when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""
"Django не позволит зафиксировать или отменить изменения, если блок :func:"
"`atomic` активен, т.к. это нарушит атомарность."

# 5596f0f12f7743cbb13950c891733165
#: ../../topics/db/transactions.txt:488
#, fuzzy
msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the SQLite, PostgreSQL, Oracle, and MySQL (when using the "
"InnoDB storage engine) backends. Other backends provide the savepoint "
"functions, but they're empty operations -- they don't actually do anything."
msgstr ""
"Точкой сохранения называют маркер внутри транзакции, который позволяет вам "
"отменить лишь часть транзакции, а не всю. Точки сохранения доступны при "
"использовании бэкендов SQLite (≥ 3.6.8), PostgreSQL 8, Oracle и MySQL(при "
"использовании InnoDB). Все остальные бэкенды предоставляют функции для "
"создания точек сохранения, но они ничего не делают."

# c9eac2da1e1d465b91038a8bd092777e
#: ../../topics/db/transactions.txt:494
msgid ""
"Savepoints aren't especially useful if you are using autocommit, the default "
"behavior of Django. However, once you open a transaction with :func:"
"`atomic`, you build up a series of database operations awaiting a commit or "
"rollback. If you issue a rollback, the entire transaction is rolled back. "
"Savepoints provide the ability to perform a fine-grained rollback, rather "
"than the full rollback that would be performed by ``transaction.rollback()``."
msgstr ""
"Точки сохранения бесполезны, если вы используете стандартное поведение "
"Django -- \"autocommit\". Тем не менее, при создании транзакции через :func:"
"`atomic`, каждая открытая транзакция выполняет ряд операций в базе данных, "
"ожидая фиксации или отката транзакции. Если вы выполните откат транзакции, "
"то будет выполнен откат всей транзакции. Точки сохранения предоставляют "
"возможность выполнять частичный откат, вместо выполнения полного отката, "
"который делается с помощью ``transaction.rollback()``."

# 36b62d4e16be4ac39ed5bf03766d0700
#: ../../topics/db/transactions.txt:501
msgid ""
"When the :func:`atomic` decorator is nested, it creates a savepoint to allow "
"partial commit or rollback. You're strongly encouraged to use :func:`atomic` "
"rather than the functions described below, but they're still part of the "
"public API, and there's no plan to deprecate them."
msgstr ""
"При вложенных блоках :func:`atomic` создаются точки сохранения, которые "
"позволяют выполнить частичную фиксацию или откат изменений. Мы настоятельно "
"рекомендуем использовать :func:`atomic` вместо функций, указанных выше, но "
"они в любом случае входят в публичный API и мы не собираемся удалять их."

# b5761afe39df4f1880ca5a1d2fd66c1b
#: ../../topics/db/transactions.txt:506
msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""
"Каждая из этих функция принимает аргумент ``using``, который обозначает имя "
"базы данных с которой производится работа. Если этот аргумент не указан, то "
"все действия идут относительно стандартной (``\"default\"``) базы данных."

# b6ba6236c63c4374a8a9c9a71fa4578a
#: ../../topics/db/transactions.txt:510
msgid ""
"Savepoints are controlled by three functions in :mod:`django.db.transaction`:"
msgstr ""
"Точки сохранения управляются тремя функциями из :mod:`django.db.transaction`:"

# 9bcb1bc5d14549e2a097ee02ccabb141
#: ../../topics/db/transactions.txt:514
msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known "
"to be in a \"good\" state. Returns the savepoint ID (``sid``)."
msgstr ""
"Создаёт новую точку сохранения, обозначая точку в транзакции, отмечающую "
"\"хорошее\" состояние. Возвращает ID (``sid``) точки сохранения."

# 08d265cb723b4015ad586c4143251921
#: ../../topics/db/transactions.txt:519
msgid ""
"Releases savepoint ``sid``. The changes performed since the savepoint was "
"created become part of the transaction."
msgstr ""
"Закрывает точку сохранения с указанным ``sid``. Все изменения, выполненные "
"до этой точки сохранения, будут добавлены в текущую транзакцию."

# 2240b980574b4bf588bca9f3d8ddc57b
#: ../../topics/db/transactions.txt:524
msgid "Rolls back the transaction to savepoint ``sid``."
msgstr "Откатывает транзакцию до точки сохранения с указанным ``sid``."

# 6f7e2dc306e64760b04c5576ff56809e
#: ../../topics/db/transactions.txt:526
msgid ""
"These functions do nothing if savepoints aren't supported or if the database "
"is in autocommit mode."
msgstr ""
"Эти функции ничего не делают, если точки сохранения не поддерживаются базой "
"данных, или если база данных в режиме \"autocommit\"."

# e15f2b7fe0d04a56b669216a3035bdd0
#: ../../topics/db/transactions.txt:529
msgid "In addition, there's a utility function:"
msgstr "Также Django предоставляет несколько дополнительных функций:"

# 0728600917754ae0933e12f91588bfb8
#: ../../topics/db/transactions.txt:533
msgid "Resets the counter used to generate unique savepoint IDs."
msgstr "Сбрасывает счетчик генератора ID точек сохранения."

# ed997682e0fa4bc9a900c6edb5ab64d0
#: ../../topics/db/transactions.txt:535
msgid "The following example demonstrates the use of savepoints::"
msgstr "Следующие примеры демонстрируют использование промежуточных точек::"

# b227ea8ab4c94f54a73f7782487754d0
#: ../../topics/db/transactions.txt:558
msgid ""
"Savepoints may be used to recover from a database error by performing a "
"partial rollback. If you're doing this inside an :func:`atomic` block, the "
"entire block will still be rolled back, because it doesn't know you've "
"handled the situation at a lower level! To prevent this, you can control the "
"rollback behavior with the following functions."
msgstr ""
"Точки сохранения могут использоваться для восстановления после ошибки в базе "
"данных, отменив часть выполненных изменений. Выполнив это в блоке :func:"
"`atomic`, отмена будет выполнена для всего блока, т.к. он не знает, что вы "
"обработали ошибку на более низком уровне! Чтобы изменить это, вы можете "
"контролировать поведение точек сохранения с помощью следующих функций."

# 96958a14f5944e0bb607aa86a0c6a453
#: ../../topics/db/transactions.txt:568
msgid ""
"Setting the rollback flag to ``True`` forces a rollback when exiting the "
"innermost atomic block. This may be useful to trigger a rollback without "
"raising an exception."
msgstr ""
"Устанавливает флаг отмены изменений в ``True``, форсируя отмену изменений "
"при выходе из самого вложенного атомарного блока. Это может быть полезно для "
"отмены изменений без вызова исключений."

# 5c78043a8d524ebbbe6ab6646047a51e
#: ../../topics/db/transactions.txt:572
msgid ""
"Setting it to ``False`` prevents such a rollback. Before doing that, make "
"sure you've rolled back the transaction to a known-good savepoint within the "
"current atomic block! Otherwise you're breaking atomicity and data "
"corruption may occur."
msgstr ""
"Установив флаг в ``False``, можно отключить отмену изменений. Перед тем как "
"сделать это, убедитесь, что вы откатили транзакцию к последней безопасной "
"точке в текущем атомарном блоке! Иначе вы нарушите атомарность и можете "
"повредить данные."

# 71a016207ea1446690fa3ab4d4af070a
#: ../../topics/db/transactions.txt:578
msgid "Database-specific notes"
msgstr "Заметки о различных базах данных"

# e5353a7c8bb648d6971c583a6fcb7b0a
#: ../../topics/db/transactions.txt:583
msgid "Savepoints in SQLite"
msgstr "Точки сохранения в SQLite"

# 4a4430cdda004033a2f64efc201bc9a7
#: ../../topics/db/transactions.txt:585
#, fuzzy
msgid ""
"While SQLite supports savepoints, a flaw in the design of the :mod:`sqlite3` "
"module makes them hardly usable."
msgstr ""
"Хотя SQLite ≥ 3.6.8 и поддерживает точки сохранения, из-за особенностей "
"работы :mod:`sqlite3` их сложно использовать."

# 25fbcb5c4f5844459321375f0f09ae6e
#: ../../topics/db/transactions.txt:588
msgid ""
"When autocommit is enabled, savepoints don't make sense. When it's "
"disabled, :mod:`sqlite3` commits implicitly before savepoint statements. (In "
"fact, it commits before any statement other than ``SELECT``, ``INSERT``, "
"``UPDATE``, ``DELETE`` and ``REPLACE``.) This bug has two consequences:"
msgstr ""
"При включенном \"autocommit\" точки сохранения не имеют смысла. При "
"отключенном -- :mod:`sqlite3` неявно фиксирует изменения перед созданием "
"точки сохранения. (На самом деле фиксация выполняет перед любой операцией "
"отличной от ``SELECT``, ``INSERT``, ``UPDATE``, ``DELETE`` и ``REPLACE``.) "
"Этот баг приводит к следующим особенностям:"

# fe884406c15f4e69810a94616b7dc27a
#: ../../topics/db/transactions.txt:593
msgid ""
"The low level APIs for savepoints are only usable inside a transaction ie. "
"inside an :func:`atomic` block."
msgstr ""
"Низкоуровневый API для работы с точками сохранения работает только внутри "
"транзакции, то есть в блоке :func:`atomic`."

# 10b6615e29574834b4c20cdd683ff422
#: ../../topics/db/transactions.txt:595
msgid "It's impossible to use :func:`atomic` when autocommit is turned off."
msgstr "Невозможно использовать :func:`atomic` при выключенном \"autocommit\"."

# 1cd9d1e6b3e74602a5909fa7b987370b
#: ../../topics/db/transactions.txt:598
msgid "Transactions in MySQL"
msgstr "Транзакции в MySQL"

# 51bd28f8f81e43c7b112007f204d5076
#: ../../topics/db/transactions.txt:600
msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction "
"peculiarities are outside the scope of this article, but the MySQL site has "
"`information on MySQL transactions`_."
msgstr ""
"При использовании MySQL поддержка транзакция зависит от версии движка базы "
"данных и от используемого типа таблиц. (Под \"типом таблицы\" мы "
"подразумеваем \"InnoDB\" или \"MyISAM\".) Особенности транзакций MySQL "
"выходят за рамки данной статьи, но сайт MySQL содержит `информацию о "
"`транзакциях<http://dev.mysql.com/doc/refman/5.6/en/sql-syntax-transactions."
"html>`_."

# 86c00e13de144dfb86bc00ae45ac780e
#: ../../topics/db/transactions.txt:606
msgid ""
"If your MySQL setup does *not* support transactions, then Django will always "
"function in autocommit mode: statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""
"Если ваша настройка MySQL *не поддерживает* транзакции, тогда Django будет "
"работать в режиме автоматической фиксации: Операторы будут выполняться и "
"сразу же фиксироваться. Если же ваша настройка MySQL *поддерживает* "
"транзакции, Django будет обрабатывать транзакции как описано выше."

# 1235948529204a689b68d888fbd47cfa
#: ../../topics/db/transactions.txt:614
msgid "Handling exceptions within PostgreSQL transactions"
msgstr "Обработка исключений в транзакциях PostgreSQL"

# 075b91c9f5714d708805d4d752be141f
#: ../../topics/db/transactions.txt:618
msgid ""
"This section is relevant only if you're implementing your own transaction "
"management. This problem cannot occur in Django's default mode and :func:"
"`atomic` handles it automatically."
msgstr ""
"Этот раздел важен только при создании собственного управления транзакциями. "
"Описанная проблема не возникнет при стандартном поведении Django и при "
"использовании :func:`atomic`."

# 0d63e1677b8f4b1791dc358247514adb
#: ../../topics/db/transactions.txt:622
msgid ""
"Inside a transaction, when a call to a PostgreSQL cursor raises an exception "
"(typically ``IntegrityError``), all subsequent SQL in the same transaction "
"will fail with the error \"current transaction is aborted, queries ignored "
"until end of transaction block\". While simple use of ``save()`` is unlikely "
"to raise an exception in PostgreSQL, there are more advanced usage patterns "
"which might, such as saving objects with unique fields, saving using the "
"force_insert/force_update flag, or invoking custom SQL."
msgstr ""
"В транзакции, когда вызов к курсору PostgreSQL вызывает исключение (обычно "
"`IntegrityError``), все последующие SQL запросы в той же транзакции будут "
"заблокированы с ошибкой \"текущая транзакция прервана, запросы "
"проигнорированы до конца транзакционного блока\". Хотя обычное использование "
"``save()`` вряд ли вызовет исключение в PostgreSQL, существуют более сложные "
"шаблоны использования, которые могут вызвать исключение: сохранение объектов "
"с уникальными полями, сохранение с использованием флага force_insert/"
"force_update или вызов собственного SQL."

# 41c03d7594854df4bb16214fa841e61c
#: ../../topics/db/transactions.txt:630
msgid "There are several ways to recover from this sort of error."
msgstr "Существует несколько способов избежать таких ошибок."

# 84f83f8b04894213abd824dbfe043ab5
#: ../../topics/db/transactions.txt:633
msgid "Transaction rollback"
msgstr "Откат транзакции"

# 43a06ad2083a4674b0c28d089fbe1270
#: ../../topics/db/transactions.txt:635
msgid "The first option is to roll back the entire transaction. For example::"
msgstr "Первый способ -- выполнить отмену всей транзакции. Например::"

# 5bbb7fec588b4173ba34cd29b42f567e
#: ../../topics/db/transactions.txt:644
msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""
"Вызов ``transaction.rollback()`` откатывает всю транзакцию. Все не "
"зафиксированные в базе данных операции будут потеряны. В этом примере "
"изменения, сделанные с помощью ``a.save()`` будут потеряны, несмотря на то, "
"что эта операция прошла без ошибок."

# a0f73197843a4f25b5c3ce9c5babb344
#: ../../topics/db/transactions.txt:650
msgid "Savepoint rollback"
msgstr "Откат до точки сохранения"

# ea79025d957e4bd7981e474804dc2228
#: ../../topics/db/transactions.txt:652
msgid ""
"You can use :ref:`savepoints <topics-db-transactions-savepoints>` to control "
"the extent of a rollback. Before performing a database operation that could "
"fail, you can set or update the savepoint; that way, if the operation fails, "
"you can roll back the single offending operation, rather than the entire "
"transaction. For example::"
msgstr ""
"Вы можете использовать :ref:`точки сохранения <topics-db-transactions-"
"savepoints>` для управления глубиной отката. Перед выполнением действия над "
"базой данных, которое может завершиться ошибкой, вы можете установить или "
"обновить точку сохранения. Впоследствии, если выполняемое действие "
"завершится ошибкой, вы можете откатить только изменения, созданные этим "
"действием, не оказывая влияние на всю транзакцию в целом. Например::"

# 44fee65141514961b0deaad96a63b382
#: ../../topics/db/transactions.txt:667
msgid ""
"In this example, ``a.save()`` will not be undone in the case where ``b."
"save()`` raises an exception."
msgstr ""
"В этом примере ``a.save()`` не будет отменён, если ``b.save()`` вызовет "
"исключение."

#~ msgid ""
#~ "Previously the outermost atomic block couldn't be declared with "
#~ "``savepoint=False`` when autocommit was turned off."
#~ msgstr ""
#~ "В предыдущих версиях самый внешний блок нельзя было объявить с "
#~ "``savepoint=False`` при выключенном \"autocommit\"."

# 7cef8ed73b7149a89d5f5d36e468a702
#~ msgid "Changes from Django 1.5 and earlier"
#~ msgstr "Изменения с Django 1.5 и ранее"

# 3b7656bb3a374192a1632e93d46e172d
#~ msgid ""
#~ "The features described below were deprecated in Django 1.6 and will be "
#~ "removed in Django 1.8. They're documented in order to ease the migration "
#~ "to the new transaction management APIs."
#~ msgstr ""
#~ "Функционал, описанный ниже, устарел в Django 1.6 и будет удален в Django "
#~ "1.8. Он описан в этом разделе, чтобы упростить процесс обновления до "
#~ "нового API управления транзакциями."

# b99b3d6ca7f94229bfe0ee165534739d
#~ msgid "Legacy APIs"
#~ msgstr "Устаревший API"

# 2520c57d5b684493a8664f7ac1e632cc
#~ msgid ""
#~ "The following functions, defined in ``django.db.transaction``, provided a "
#~ "way to control transactions on a per-function or per-code-block basis. "
#~ "They could be used as decorators or as context managers, and they "
#~ "accepted a ``using`` argument, exactly like :func:`atomic`."
#~ msgstr ""
#~ "Следующие функции, определенные в ``django.db.transaction``, позволяют "
#~ "управлять транзакциями на уровне функции или блока кода. Они могут "
#~ "использоваться как декораторы или менеджеры контекста, и принимают "
#~ "аргумент ``using``, как и :func:`atomic`."

# 367327ff4acb4fca87958fa26c0eae7a
#~ msgid "Enable Django's default autocommit behavior."
#~ msgstr "Включает стандартное поведение автоматический фиксации в Django"

# 553416575631465eaea8928ac1729e63
#~ msgid ""
#~ "Transactions will be committed as soon as you call ``model.save()``, "
#~ "``model.delete()``, or any other function that writes to the database."
#~ msgstr ""
#~ "Транзакции будут зафиксированы, как только вы вызовете ``model.save()``, "
#~ "``model.delete()`` или любую другую функцию, которая приводит к записи в "
#~ "базу данных."

# 5a69201a42a243549c1f0649919f77e7
#~ msgid "Use a single transaction for all the work done in a function."
#~ msgstr "Использует единую транзакцию для всех действий в функции."

# 215db948f3324d6b96ffb4311d23c1b3
#~ msgid ""
#~ "If the function returns successfully, then Django will commit all work "
#~ "done within the function at that point. If the function raises an "
#~ "exception, though, Django will roll back the transaction."
#~ msgstr ""
#~ "Если функция отрабатывает без ошибок, Django зафиксирует все изменения, "
#~ "которые она создала. Если функция вызывает исключение, Django откатывает "
#~ "изменения, созданные в транзакции."

# 74bbb5f9366246139ca0ec1b0d1c5724
#~ msgid "Tells Django you'll be managing the transaction on your own."
#~ msgstr "Указывает Django, что вы самостоятельно управляете транзакцией."

# bf98082ea9db4f33bdbbf64dcf00f7f1
#~ msgid ""
#~ "Whether you are writing or simply reading from the database, you must "
#~ "``commit()`` or ``rollback()`` explicitly or Django will raise a :exc:"
#~ "`TransactionManagementError` exception. This is required when reading "
#~ "from the database because ``SELECT`` statements may call functions which "
#~ "modify tables, and thus it is impossible to know if any data has been "
#~ "modified."
#~ msgstr ""
#~ "При записи или чтении с базы данных необходимо явно выполнить "
#~ "``commit()`` или ``rollback()``, иначе Django вызовет исключение :exc:"
#~ "`TransactionManagementError`. Это необходимо при чтении с базы данных, т."
#~ "к. ``SELECT`` может вызывать функции, изменяющие таблицы и нет "
#~ "возможность узнать были изменены какие либо данные или нет."

# 84f83f8b04894213abd824dbfe043ab5
#~ msgid "Transaction states"
#~ msgstr "Состояния транзакции"

# 605f87e59fc9492597830e29b1ec103a
#~ msgid ""
#~ "The three functions described above relied on a concept called "
#~ "\"transaction states\". This mechanism was deprecated in Django 1.6, but "
#~ "it's still available until Django 1.8."
#~ msgstr ""
#~ "Три функции, описанные выше, используют концепцию, которая называется "
#~ "\"состояние транзакции\". Этот механизм устарел в Django 1.6, но все еще "
#~ "доступен до Django 1.8."

# f2b183309d6448d79bb3aad57d96bb69
#~ msgid "At any time, each database connection is in one of these two states:"
#~ msgstr ""
#~ "В любой момент времени каждое подключение к базе данных находится в одном "
#~ "из двух состояний:"

# 879b43c02084459aa8410b06b5179ad2
#~ msgid "**auto mode**: autocommit is enabled;"
#~ msgstr "**автоматический режим**: автоматическая фиксация включена;"

# 958dbc5d6a4346e1afff326e229f89c2
#~ msgid "**managed mode**: autocommit is disabled."
#~ msgstr "**ручной режим**: автоматическая фиксация выключена."

# c30d29f705df4fad8cadc5fca5bcb138
#~ msgid ""
#~ "Django starts in auto mode. ``TransactionMiddleware``, :func:"
#~ "`commit_on_success` and :func:`commit_manually` activate managed mode; :"
#~ "func:`autocommit` activates auto mode."
#~ msgstr ""
#~ "Django запускается в автоматическом режиме. ``TransactionMiddleware``, :"
#~ "func:`commit_on_success` и :func:`commit_manually` активируют ручной "
#~ "режим; :func:`autocommit` активирует автоматический режим."

# 72aa30becd7f48a59b29ab3f35655c7a
#~ msgid ""
#~ "Internally, Django keeps a stack of states. Activations and deactivations "
#~ "must be balanced."
#~ msgstr ""
#~ "Внутри Django содержит стек состояний. Включения и отключения должны быть "
#~ "уравновешены."

# bea3104838e040ca8f0e01a3423cf564
#~ msgid ""
#~ "For example, :func:`commit_on_success` switches to managed mode when "
#~ "entering the block of code it controls; when exiting the block, it "
#~ "commits or rollbacks, and switches back to auto mode."
#~ msgstr ""
#~ "Например, :func:`commit_on_success` при входе в контролируемый блок кода "
#~ "активирует ручной режим, при выходе из блока -- фиксирует или отменяет "
#~ "изменения и активирует ручной режим."

# b6543eb45f8d43a6917ea40c30beb173
#~ msgid ""
#~ "So :func:`commit_on_success` really has two effects: it changes the "
#~ "transaction state and it defines a transaction block. Nesting will give "
#~ "the expected results in terms of transaction state, but not in terms of "
#~ "transaction semantics. Most often, the inner block will commit, breaking "
#~ "the atomicity of the outer block."
#~ msgstr ""
#~ "Таким образом, :func:`commit_on_success` на самом деле выполняет два "
#~ "действия: изменяет состояния транзакции и создает блок транзакции. "
#~ "Вложенность приведет к ожидаемому результату в контексте состояний "
#~ "транзакции, но не с точки зрения семантики транзакций. В большинстве "
#~ "случаев вложенный блок выполнит фиксацию изменений, нарушив атомарность "
#~ "внешнего блока."

# fa3841de4bd648df92b6b51659a72efc
#~ msgid ""
#~ ":func:`autocommit` and :func:`commit_manually` have similar limitations."
#~ msgstr ""
#~ ":func:`autocommit` и :func:`commit_manually` имеют аналогичные "
#~ "ограничения."

# 0addfd6e2bb04d20ac6cc474541d77de
#~ msgid "API changes"
#~ msgstr "Изменения в API"

# 84f83f8b04894213abd824dbfe043ab5
#~ msgid "Transaction middleware"
#~ msgstr "Промежуточный слой(middleware) транзакций"

# 7958c37868784b04b1ffa8f49a1f312d
#~ msgid ""
#~ "In Django 1.6, ``TransactionMiddleware`` is deprecated and replaced by :"
#~ "setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>`. While the general "
#~ "behavior is the same, there are two differences."
#~ msgstr ""
#~ "В Django 1.6 ``TransactionMiddleware`` устарел и заменен на :setting:"
#~ "`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>`. Хотя общее поведение не "
#~ "изменилось, существует два отличия."

# 0bedd39b29e8481b844a331d7a7829bb
#~ msgid ""
#~ "With the previous API, it was possible to switch to autocommit or to "
#~ "commit explicitly anywhere inside a view. Since :setting:`ATOMIC_REQUESTS "
#~ "<DATABASE-ATOMIC_REQUESTS>` relies on :func:`atomic` which enforces "
#~ "atomicity, this isn't allowed any longer. However, at the top level, it's "
#~ "still possible to avoid wrapping an entire view in a transaction. To "
#~ "achieve this, decorate the view with :func:`non_atomic_requests` instead "
#~ "of :func:`autocommit`."
#~ msgstr ""
#~ "Предыдущий API позволял переключить режим автоматической фиксации, или "
#~ "явно выполнить фиксацию изменений в представлении. Т.к. :setting:"
#~ "`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` использует :func:`atomic`, "
#~ "которая обеспечивает атомарность, теперь это не доступно. Однако, на "
#~ "более высоком уровне вы можете исключить создание транзакции для "
#~ "представления. Для этого оберните представление декоратором :func:"
#~ "`non_atomic_requests` вместо :func:`autocommit`."

# 1ed9e60e2d5d4673bbe1f25afc4621c1
#~ msgid ""
#~ "The transaction middleware applied not only to view functions, but also "
#~ "to middleware modules that came after it. For instance, if you used the "
#~ "session middleware after the transaction middleware, session creation was "
#~ "part of the transaction. :setting:`ATOMIC_REQUESTS <DATABASE-"
#~ "ATOMIC_REQUESTS>` only applies to the view itself."
#~ msgstr ""
#~ "Промежуточный слой транзакций влияет не только на функции представления, "
#~ "но и на все последующие промежуточные слои. Таким образом, если "
#~ "промежуточный слой сессии указан после прослойки транзакций, то создание "
#~ "сессии будет частью транзакции. :setting:`ATOMIC_REQUESTS <DATABASE-"
#~ "ATOMIC_REQUESTS>` применяется только для представления."

# 4cc932d9ef744290bc400ca2a669cae6
#~ msgid "Managing transactions"
#~ msgstr "Управление транзакциями"

# 22a33c93f765410bbf466d6b0f2b0e9c
#~ msgid ""
#~ "Starting with Django 1.6, :func:`atomic` is the only supported API for "
#~ "defining a transaction. Unlike the deprecated APIs, it's nestable and "
#~ "always guarantees atomicity."
#~ msgstr ""
#~ "Начиная с Django 1.6 :func:`atomic` единственный поддерживаемый API для "
#~ "создания транзакций. В отличии от старого API, эта функция поддерживает "
#~ "вложенность и всегда гарантирует атомарность."

# d45de048f62a4f0c8cf24093e9307fd9
#~ msgid ""
#~ "In most cases, it will be a drop-in replacement for :func:"
#~ "`commit_on_success`."
#~ msgstr ""
#~ "В большинстве случаев эта функция просто заменит :func:"
#~ "`commit_on_success`."

# c24399d9ae5b42b39fbc65afbb988978
#~ msgid ""
#~ "During the deprecation period, it's possible to use :func:`atomic` "
#~ "within :func:`autocommit`, :func:`commit_on_success` or :func:"
#~ "`commit_manually`. However, the reverse is forbidden, because nesting the "
#~ "old decorators / context managers breaks atomicity."
#~ msgstr ""
#~ "Пока старый API не будет удален, вы можете использовать :func:`atomic` "
#~ "вместе с :func:`autocommit`, :func:`commit_on_success` или :func:"
#~ "`commit_manually`. Однако, обратное не работает, т.к. вложенные старые "
#~ "декораторы и менеджеры контекста нарушат атомарность."

# 9abf1c8fcad2463486943b652625baa7
#~ msgid "Managing autocommit"
#~ msgstr "Управление автоматической фиксацией"

# 25619a420b2f474a8ffbcd06cb29b1a3
#~ msgid ""
#~ "Django 1.6 introduces an explicit :ref:`API for managing autocommit "
#~ "<managing-autocommit>`."
#~ msgstr ""
#~ "Django 1.6 предоставляет :ref:`API для управления автоматической "
#~ "фиксацией изменений <managing-autocommit>`."

# 9dd0a0732ac0467c980f51de4700a9e9
#~ msgid "To disable autocommit temporarily, instead of::"
#~ msgstr "Чтобы временно отключить автоматическую фиксацию, вместо::"

# be1976eccdec4fb68ba9ec54b5b11a2b
# 49db2d3cb3c642aca4b5d875f1085166
#~ msgid "you should now use::"
#~ msgstr "теперь следует использовать::"

# 6635b058db9042768bdbf8df600a4bb2
#~ msgid "To enable autocommit temporarily, instead of::"
#~ msgstr "Чтобы временно включить автоматическую фиксацию, используйте::"

# 2eb83473673d43cb8a89d7be7d80912b
#~ msgid ""
#~ "Unless you're implementing a transaction management framework, you "
#~ "shouldn't ever need to do this."
#~ msgstr ""
#~ "Если вы не создаете свою библиотеку для управления транзакциями, вам это "
#~ "не понадобится."

# 9ec15ad440d54d4eb2d525aa91049116
#~ msgid "Disabling transaction management"
#~ msgstr "Отключение управления транзакциями"

# c057812019f44a5ca462d12bd6cb0960
#~ msgid ""
#~ "Instead of setting ``TRANSACTIONS_MANAGED = True``, set the "
#~ "``AUTOCOMMIT`` key to ``False`` in the configuration of each database, as "
#~ "explained in :ref:`deactivate-transaction-management`."
#~ msgstr ""
#~ "Вместо настройки ``TRANSACTIONS_MANAGED = True``, установите ключ "
#~ "``AUTOCOMMIT`` в ``False`` для соответствующей настройки базы данных, как "
#~ "это указанно в :ref:`deactivate-transaction-management`."

# 6e160d4594d844fb81e495e4923ae430
#~ msgid "Backwards incompatibilities"
#~ msgstr "Несовместимые изменения"

# bcde12f6e96648a9b7e237857b6a8ce0
#~ msgid ""
#~ "Since version 1.6, Django uses database-level autocommit in auto mode. "
#~ "Previously, it implemented application-level autocommit by triggering a "
#~ "commit after each ORM write."
#~ msgstr ""
#~ "Начиная с 1.6 Django использует \"autocommit\" на уровне базы данных. "
#~ "Ранее использовался \"autocommit\" на уровне приложения, вызывая "
#~ "фиксирование изменения при операциях записи ORM."

# e4efcaececb24fbaac274b2fd5f3eb37
#~ msgid ""
#~ "As a consequence, each database query (for instance, an ORM read) started "
#~ "a transaction that lasted until the next ORM write. Such \"automatic "
#~ "transactions\" no longer exist in Django 1.6."
#~ msgstr ""
#~ "В результате каждый запрос к базе данных (например, запрос записи в ORM) "
#~ "начинает транзакцию, которая длится до операции записи ORM. Такие "
#~ "\"автоматические транзакции\" больше не существуют в Django 1.6."

# b58bbb23fd0a4b0294a49e5ccf661f16
#~ msgid "There are four known scenarios where this is backwards-incompatible."
#~ msgstr ""
#~ "Известно четыре сценария, когда это может привести к проблемам при "
#~ "обновлении."

# 7550ec6c43714ea6aad7b63559ce1ddb
#~ msgid ""
#~ "Note that managed mode isn't affected at all. This section assumes auto "
#~ "mode. See the :ref:`description of modes <transaction-states>` above."
#~ msgstr ""
#~ "Обратите внимание, это не относится к ручному режиму. Этот раздел "
#~ "подразумевает автоматический режим. Смотрите :ref:`описание режимов "
#~ "выше<transaction-states>`."

# a51008b8c14c4236ab04dcf918070cab
#~ msgid "Sequences of custom SQL queries"
#~ msgstr "Последовательность собственных SQL запросов"

# 9ee674a5d7fd4433a264dad6c3cfa377
#~ msgid ""
#~ "If you're executing several :ref:`custom SQL queries <executing-custom-"
#~ "sql>` in a row, each one now runs in its own transaction, instead of "
#~ "sharing the same \"automatic transaction\". If you need to enforce "
#~ "atomicity, you must wrap the sequence of queries in :func:`atomic`."
#~ msgstr ""
#~ "Теперь, если вы выполняете несколько :ref:`собственных SQL запросов "
#~ "<executing-custom-sql>` подряд, каждый из них будет в собственной "
#~ "транзакции, ранее они выполнялись в одной \"автоматической транзакции\". "
#~ "Для старого поведения, чтобы заключить последовательность таких запросов "
#~ "в атомарный блок, используйте :func:`atomic`."

# 87edc024f5b642dba718ca18b1ae940a
#~ msgid ""
#~ "To check for this problem, look for calls to ``cursor.execute()``. "
#~ "They're usually followed by a call to ``transaction."
#~ "commit_unless_managed()``, which isn't useful any more and should be "
#~ "removed."
#~ msgstr ""
#~ "Чтобы определить эту проблему, ищите вызов ``cursor.execute()``. Обычно "
#~ "перед ним используется ``transaction.commit_unless_managed()``, который "
#~ "теперь можно удалить."

# f49908b01e34490d8d172b18a5033b06
#~ msgid "Select for update"
#~ msgstr "Запрос выборки для обновления"

# f9d984a9fd054b2ebae40bf51385beeb
#~ msgid ""
#~ "If you were relying on \"automatic transactions\" to provide locking "
#~ "between :meth:`~django.db.models.query.QuerySet.select_for_update` and a "
#~ "subsequent write operation — an extremely fragile design, but nonetheless "
#~ "possible — you must wrap the relevant code in :func:`atomic`. Since "
#~ "Django 1.6.3, executing a query with :meth:`~django.db.models.query."
#~ "QuerySet.select_for_update` in autocommit mode will raise a :exc:`~django."
#~ "db.transaction.TransactionManagementError`."
#~ msgstr ""
#~ "Если вы полагались на \"автоматическую транзакцию\", которая обеспечивает "
#~ "блокирование между :meth:`~django.db.models.query.QuerySet."
#~ "select_for_update` и последующей операцией записи — чрезвычайно плохой "
#~ "подход, но все же возможен — вам следует обернуть соответствующий код в :"
#~ "func:`atomic`. С Django 1.6.3 выполнение запроса с :meth:`~django.db."
#~ "models.query.QuerySet.select_for_update` в режиме автоматический фиксации "
#~ "вызовет исключение :exc:`~django.db.transaction."
#~ "TransactionManagementError`."

# cbc37bac7bef4ad4bbe66586c221b631
#~ msgid "Using a high isolation level"
#~ msgstr "Использование уровней изоляции транзакций"

# dc3fe6c1c0884d5e9a21280b71928719
#~ msgid ""
#~ "If you were using the \"repeatable read\" isolation level or higher, and "
#~ "if you relied on \"automatic transactions\" to guarantee consistency "
#~ "between successive reads, the new behavior might be backwards-"
#~ "incompatible. To enforce consistency, you must wrap such sequences in :"
#~ "func:`atomic`."
#~ msgstr ""
#~ "Если вы используете \"repeatable read\" уровень изоляции или выше, и вы "
#~ "предполагаете, что \"автоматическая транзакция\" обеспечит "
#~ "согласованность нескольких последовательных запросов на чтение, новое "
#~ "поведение транзакций может нарушить эту логику. Чтобы явно обеспечить "
#~ "согласованность последовательности запросов на чтение, используйте :func:"
#~ "`atomic`."

# c229c8c04b5e4be6837d705362c43722
#~ msgid ""
#~ "MySQL defaults to \"repeatable read\" and SQLite to \"serializable\"; "
#~ "they may be affected by this problem."
#~ msgstr ""
#~ "MySQL по умолчанию использует \"repeatable read\", а SQLite \"serializable"
#~ "\". При использовании этих баз данных можно столкнуться с такой проблемой."

# 2a3097eaa3304be78520854efcec422d
#~ msgid ""
#~ "At the \"read committed\" isolation level or lower, \"automatic "
#~ "transactions\" have no effect on the semantics of any sequence of ORM "
#~ "operations."
#~ msgstr ""
#~ "При уровне изоляции \"read committed\" и ниже, \"автоматические транзакции"
#~ "\" не влияют на работу последовательных операций ORM."

# 16640ca76b3649dfb503a2f9c889641a
#~ msgid ""
#~ "PostgreSQL and Oracle default to \"read committed\" and aren't affected, "
#~ "unless you changed the isolation level."
#~ msgstr ""
#~ "PostgreSQL и Oracle по умолчанию используют \"read committed\" и не "
#~ "подвержены этой проблеме, если только вы не меняли уровень изоляции."

# 23974022d4f14b27ae3e6f86ae8ae2fb
#~ msgid "Using unsupported database features"
#~ msgstr "Использование не поддерживаемых функций базы данных"

# c7d691451edd4f14b5e4daadf6c73857
#~ msgid ""
#~ "With triggers, views, or functions, it's possible to make ORM reads "
#~ "result in database modifications. Django 1.5 and earlier doesn't deal "
#~ "with this case and it's theoretically possible to observe a different "
#~ "behavior after upgrading to Django 1.6 or later. In doubt, use :func:"
#~ "`atomic` to enforce integrity."
#~ msgstr ""
#~ "При использовании тригеров, представлений(VIEW), или функций в базе "
#~ "данных, операции чтения ORM могут вызывать операции изменения на уровне "
#~ "базы данных. В Django 1.5 и ниже эти ситуации никак не обрабатывались. "
#~ "Теоретически это может привести к неоднозначному поведению в Django 1.6 и "
#~ "выше. В случае сомнений используйте :func:`atomic`."

# f27479535c344d4086643eaaca2977c2
#~ msgid ""
#~ "Previous version of Django featured :ref:`a more complicated default "
#~ "behavior <transactions-upgrading-from-1.5>`."
#~ msgstr ""
#~ "В предыдущих версиях Django обработка транзакций :ref:`была сложнее "
#~ "<transactions-upgrading-from-1.5>`."

# 4239869d289d497eab976334e62bb422
#~ msgid ""
#~ "Django used to provide this feature via ``TransactionMiddleware``, which "
#~ "is now deprecated."
#~ msgstr ""
#~ "Ранее Django использовал для этого функционала промежуточный слой "
#~ "``TransactionMiddleware``, который уже устарел."

# 3f66a644e78c402e9c3f35885ffe3fe1
#~ msgid ""
#~ "Before Django 1.6, autocommit was turned off, and it was emulated by "
#~ "forcing a commit after write operations in the ORM."
#~ msgstr ""
#~ "До Django 1.6 \"autocommit\" был выключен, и эмулировался явным "
#~ "фиксированием изменений после каждой операции записи ORM."

# 84f6c99c04a740d8b73855adfab51444
#~ msgid "This used to be controlled by the ``TRANSACTIONS_MANAGED`` setting."
#~ msgstr "Ранее управлялось через настройку ``TRANSACTIONS_MANAGED``."

# 671fdefd331e4b37b4a41f471bec31cb
#~ msgid ""
#~ "Django's default behavior is to run with an open transaction which it "
#~ "commits automatically when any built-in, data-altering model function is "
#~ "called. For example, if you call ``model.save()`` or ``model.delete()``, "
#~ "the change will be committed immediately."
#~ msgstr ""
#~ "Обычно Django выполняет создаёт транзакцию и фиксирует её автоматически "
#~ "после выполнения любой встроенной, изменяющей данный функции модели. "
#~ "Например, если вызвать ``model.save()`` или ``model.delete()``, то "
#~ "изменения будут немедленно зафиксированы в базе данных."

# 4e34ed2db647461f92745f91ef77298c
#~ msgid ""
#~ "This is much like the auto-commit setting for most databases. As soon as "
#~ "you perform an action that needs to write to the database, Django "
#~ "produces the ``INSERT``/``UPDATE``/``DELETE`` statements and then does "
#~ "the ``COMMIT``. There's no implicit ``ROLLBACK``."
#~ msgstr ""
#~ "Такое поведение аналогично автоматической фиксации (``auto-commit``), "
#~ "которая предоставляется большинством баз данных. Как только вы выполняете "
#~ "действие, которое требует записи в базу данных, Django выполняет "
#~ "``INSERT``/``UPDATE``/``DELETE`` операторы и затем фиксирует изменения с "
#~ "помощью ``COMMIT``."

# 3c3660b3f0b74509a6ffcce5689d93a2
#~ msgid ""
#~ "The recommended way to handle transactions in Web requests is to tie them "
#~ "to the request and response phases via Django's ``TransactionMiddleware``."
#~ msgstr ""
#~ "Рекомендованным способом использования транзакций в веб запросах является "
#~ "их привязка к фазам запроса и ответа с помощью прослойки (middleware) "
#~ "Django ``TransactionMiddleware``."

# 7f8eb095ff1d49269075e5bb0b172180
#~ msgid ""
#~ "To activate this feature, just add the ``TransactionMiddleware`` "
#~ "middleware to your :setting:`MIDDLEWARE_CLASSES` setting::"
#~ msgstr ""
#~ "Для активации этой возможности, просто добавьте прослойку "
#~ "``TransactionMiddleware`` в настройку :setting:`MIDDLEWARE_CLASSES`::"

# e4076c0602d84aca8f357970353c6d79
#~ msgid ""
#~ "The various cache middlewares are an exception: ``CacheMiddleware``, :"
#~ "class:`~django.middleware.cache.UpdateCacheMiddleware`, and :class:"
#~ "`~django.middleware.cache.FetchFromCacheMiddleware` are never affected. "
#~ "Even when using database caching, Django's cache backend uses its own "
#~ "database cursor (which is mapped to its own database connection "
#~ "internally)."
#~ msgstr ""
#~ "Различные кэширующие прослойки не попадают под это правило: "
#~ "``CacheMiddleware``, :class:`~django.middleware.cache."
#~ "UpdateCacheMiddleware`, и :class:`~django.middleware.cache."
#~ "FetchFromCacheMiddleware`. Даже при использовании кэширования в базу "
#~ "данных, бэкэнд кэша использует для своей работы отдельный курсор БД."

# dbd04ef21c254e1e9f1bb3f34bd99371
#~ msgid ""
#~ "The ``TransactionMiddleware`` only affects the database aliased as "
#~ "\"default\" within your :setting:`DATABASES` setting.  If you are using "
#~ "multiple databases and want transaction control over databases other than "
#~ "\"default\", you will need to write your own transaction middleware."
#~ msgstr ""
#~ " ``TransactionMiddleware`` работает только с базой данной под именем "
#~ "\"default\" в настройке :setting:`DATABASES`.  Если вы используете "
#~ "несколько баз данных и хотите иметь контроль над транзакциями не только "
#~ "для базы \"default\", создайте собственный middleware."

# 6fa9bbeb71e8433ebd1c321b2ae0efa0
#~ msgid ""
#~ "For most people, implicit request-based transactions work wonderfully. "
#~ "However, if you need more fine-grained control over how transactions are "
#~ "managed, you can use a set of functions in ``django.db.transaction`` to "
#~ "control transactions on a per-function or per-code-block basis."
#~ msgstr ""
#~ "Для большинства людей неявные автоматические транзакции работают отлично. "
#~ "Тем не менее, если вам требуется более тонкий контроль над управлением, "
#~ "вы можете воспользоваться рядом функций из ``django.db.transaction`` на "
#~ "уровне функции или блока кода."

# fcaf422700ff40eeb1acf584346984f5
#~ msgid ""
#~ "These functions, described in detail below, can be used in two different "
#~ "ways:"
#~ msgstr ""
#~ "Эти функции, рассмотренные подробно далее, могут быть использованы двумя "
#~ "способами:"

# 956a913338bd480aaf53ed48593ce0e8
#~ msgid "As a decorator_ on a particular function. For example::"
#~ msgstr "В качестве `декоратора <decorator>`_ функции. Например::"

# e0991ef5370844ec9a1c1c19307e6e8f
#~ msgid "As a `context manager`_ around a particular block of code::"
#~ msgstr ""
#~ "В качестве `менеджера контекста <context manager>`_ вокруг блока кода::"

# 3671dfb2664b4059922ba4315c1f2bb4
#~ msgid "Both techniques work with all supported version of Python."
#~ msgstr "Оба способа работают со всеми поддерживаемыми версиями Python."

# fbeb45f0ed8a4f9e9ee5f00a1fa514d2
#~ msgid ""
#~ "For maximum compatibility, all of the examples below show transactions "
#~ "using the decorator syntax, but all of the follow functions may be used "
#~ "as context managers, too."
#~ msgstr ""
#~ "Для наибольшей совместимости, все приведённые далее примеры показывают "
#~ "использование декоратора для управления транзакциями. Но все эти функции "
#~ "могут быть использованы и с контекстным менеджером."

# 30a4cc289b1344cc9f01fbea3a11c5e1
#~ msgid ""
#~ "Although the examples below use view functions as examples, these "
#~ "decorators and context managers can be used anywhere in your code that "
#~ "you need to deal with transactions."
#~ msgstr ""
#~ "Несмотря на то, что приведённые далее примеры используют функции "
#~ "представления, эти декораторы и контекстные менеджеры могут быть "
#~ "использованы в любом месте вашего кода, в котором их применение имеет "
#~ "смысл."

# 554998e77c6c4d238e32b30f8fa632cd
#~ msgid ""
#~ "Use the ``autocommit`` decorator to switch a view function to Django's "
#~ "default commit behavior, regardless of the global transaction setting."
#~ msgstr ""
#~ "Используйте декоратор ``autocommit`` для принудительного использования "
#~ "стандартного механизма Django для автоматической фиксации изменений, вне "
#~ "зависимости от глобальной настройки управления транзакциями."

# 02b9ea05a5884266b1056bc112afad58
#~ msgid "Example::"
#~ msgstr "Пример::"

# c7502285d1e74815ac3435ca2b551d1d
#~ msgid ""
#~ "Use the ``commit_manually`` decorator if you need full control over "
#~ "transactions. It tells Django you'll be managing the transaction on your "
#~ "own."
#~ msgstr ""
#~ "Используйте декоратор ``commit_manually``, если вам требуется полный "
#~ "контроль над транзакциями. Этот декоратор указывает Django, что "
#~ "транзакцией управляете вы сами."

# 875b4bb15d9c400f90883a692d45ae79
#~ msgid "Manual transaction management looks like this::"
#~ msgstr "Ручное управление транзакцией выглядит следующим образом::"

# daab8651e38c4f809413e27bc665b0b2
#~ msgid "Requirements for transaction handling"
#~ msgstr "Требования для обработки транзакций"

# 23bfdb776e1d4ff694f9accb01a6f307
#~ msgid ""
#~ "Django requires that every transaction that is opened is closed before "
#~ "the completion of a request. If you are using :func:`autocommit` (the "
#~ "default commit mode) or :func:`commit_on_success`, this will be done for "
#~ "you automatically (with the exception of :ref:`executing custom SQL "
#~ "<executing-custom-sql>`). However, if you are manually managing "
#~ "transactions (using the :func:`commit_manually` decorator), you must "
#~ "ensure that the transaction is either committed or rolled back before a "
#~ "request is completed."
#~ msgstr ""
#~ "Django требует, чтобы каждая открытая транзакция была закрыта до "
#~ "завершения обработки запроса. Если вы используете :func:`autocommit` "
#~ "(стандартный режим фиксации) или :func:`commit_on_success`, то фиксация "
#~ "будет произведена автоматически(за исключением :ref:`выполенения "
#~ "собственных SQL запросов <executing-custom-sql>`). При ручном управлении "
#~ "транзакциями (при использовании декоратора :func:`commit_manually`), вы "
#~ "должны обеспечить фиксацию или откат изменений до завершения обработки "
#~ "запроса."

# 115a27fb63934eaab4679941a172f7ae
#~ msgid ""
#~ "This applies to all database operations, not just write operations. Even "
#~ "if your transaction only reads from the database, the transaction must be "
#~ "committed or rolled back before you complete a request."
#~ msgstr ""
#~ "Эти требования обязательны для всех операций с базой данных, не только "
#~ "для записи. Даже если ваша транзакция лишь читает из базы данных, "
#~ "транзакция должна быть зафиксирована или отменена до завершения обработки "
#~ "запроса."

# b5534b84eb6c400ca700808a34e28db3
#~ msgid ""
#~ "Control freaks can totally disable all transaction management by setting :"
#~ "setting:`TRANSACTIONS_MANAGED` to ``True`` in the Django settings file."
#~ msgstr ""
#~ "Сторонники параноидального контроля могут полностью отключить всё "
#~ "управление транзакциями, установив параметр :setting:"
#~ "`TRANSACTIONS_MANAGED` равным ``True`` в файле конфигурации Django."

# ef1857570d224ef286cb9dbf58fe958f
#~ msgid ""
#~ "If you do this, Django won't provide any automatic transaction management "
#~ "whatsoever. Middleware will no longer implicitly commit transactions, and "
#~ "you'll need to roll management yourself. This even requires you to commit "
#~ "changes done by middleware somewhere else."
#~ msgstr ""
#~ "Если вы это сделаете, Django не будет обеспечивать автоматическое "
#~ "управление транзакциями. Прослойка не будет неявно фиксировать транзакции "
#~ "и вам потребуется взять эту работу на себя. Также потребуется взять на "
#~ "себя фиксацию изменений, которые сделаны чужим кодом."

# 15fdde51e90c4dab81c228c636a7f32d
#~ msgid ""
#~ "Thus, this is best used in situations where you want to run your own "
#~ "transaction-controlling middleware or do something really strange. In "
#~ "almost all situations, you'll be better off using the default behavior, "
#~ "or the transaction middleware, and only modify selected functions as "
#~ "needed."
#~ msgstr ""
#~ "Следовательно, делать так лучше в ситуации, когда есть неукротимое "
#~ "желание использовать собственную мидлварь для управления транзакциями или "
#~ "что-то эмоционально подобное. В подавляющем большинстве ситуаций лучше "
#~ "продолжать использовать стандартный функционал Django, лишь в особых "
#~ "случаях беря ситуацию под свой контроль."

# a80c88fe20ea456aabbf62945921842c
#~ msgid "Returns the savepoint ID (sid)."
#~ msgstr "Возвращает идентификатор промежуточной точки (``sid``)."

# 6160f11265e64702998045b02ef423f3
#~ msgid "Database-level autocommit"
#~ msgstr "Автоматическая фиксация на уровне базы данных"

# f94077f8ae154c63aad010d88df177f5
#~ msgid ""
#~ "With PostgreSQL 8.2 or later, there is an advanced option to run "
#~ "PostgreSQL with :doc:`database-level autocommit </ref/databases>`. If you "
#~ "use this option, there is no constantly open transaction, so it is always "
#~ "possible to continue after catching an exception. For example::"
#~ msgstr ""
#~ "Начиная с PostgreSQL 8.2 появилась возможность использовать :doc:"
#~ "`автоматическую фиксацию на уровне базы данных </ref/databases>`. Если вы "
#~ "используете эту опцию, то для вам нет постоянно открытой транзакции, "
#~ "таким образом всегда можно продолжить работу после обработки исключения. "
#~ "Например::"

# 9e5ea91594774d028f49958b72e3ab20
#~ msgid ""
#~ "This is not the same as the :ref:`autocommit decorator <topics-db-"
#~ "transactions-autocommit>`. When using database level autocommit there is "
#~ "no database transaction at all. The ``autocommit`` decorator still uses "
#~ "transactions, automatically committing each transaction when a database "
#~ "modifying operation occurs."
#~ msgstr ""
#~ "Эта опция не аналогична :ref:`декоратору автоматической фиксации <topics-"
#~ "db-transactions-autocommit>`. При использовании автоматической фиксации "
#~ "на уровне базы данных транзакций как бы вообще не существует. Декоратор "
#~ "``autocommit`` использует транзакции, автоматически фиксируя каждую из "
#~ "них при изменениях в базе данных."
