# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2016-02-09 10:21+0700\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Poedit 1.5.4\n"

# 2ef645263c8a4c298fe047118b39ea03
#: ../../topics/checks.txt:3
msgid "System check framework"
msgstr "Фреймворк проверки"

# ad6a21fa011d424a8141d6686539d37a
#: ../../topics/checks.txt:7
msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them. "
"The framework is extensible so you can easily add your own checks."
msgstr ""
"Фреймворк проверки  это набор статических тестов  для проверки проектов "
"Django .  Он обнаруживает распространенные проблемы и дает советы по их "
"исправлению. Этот фреймворк расширяемый, поэтому вы можете легко добавлять "
"свои собственные проверки."

#: ../../topics/checks.txt:11
msgid ""
"Checks can be triggered explicitly via the :djadmin:`check` command. Checks "
"are triggered implicitly before most commands, including :djadmin:"
"`runserver` and :djadmin:`migrate`. For performance reasons, checks are not "
"run as part of the WSGI stack that is used in deployment. If you need to run "
"system checks on your deployment server, trigger them explicitly using :"
"djadmin:`check`."
msgstr ""
"Проверки могут быть вызваны явно через команду :djadmin:`check`. Проверки "
"вызываются явно до большинства команд, включая  :djadmin:`runserver` и  :"
"djadmin:`migrate`.  По соображениям производительности, проверки не  "
"запускаются как часть стека WSGI, который используется при развертывании.  "
"Если необходимо выполнить  проверки на сервере, на котором развертывается "
"приложение, вызовите их явно, используя команду :djadmin:`check`."

# 78b33dcf61474442897a558bb3c3ec89
#: ../../topics/checks.txt:17
msgid ""
"Serious errors will prevent Django commands (such as :djadmin:`runserver`) "
"from running at all. Minor problems are reported to the console. If you have "
"inspected the cause of a warning and are happy to ignore it, you can hide "
"specific warnings using the :setting:`SILENCED_SYSTEM_CHECKS` setting in "
"your project settings file."
msgstr ""
"Серьезные ошибки не позволят выполниться  командам Django (таким как  :"
"djadmin:`runserver`). Незначительные проблемы будут выведены на консоль. "
"Если Вы уже выявили причину предупреждения и хотите ее проигнорировать, Вы "
"можете убрать определенные предупреждения, используя параметр  :setting:"
"`SILENCED_SYSTEM_CHECKS` в файле настроек проекта."

# f5c39b0fc9ed402ab9d5adaba2e79dbf
#: ../../topics/checks.txt:22
msgid ""
"A full list of all checks that can be raised by Django can be found in the :"
"doc:`System check reference </ref/checks>`."
msgstr ""
"Полный список всех проверок, которые могут быть вызваны Django, можно найти "
"в :doc:`System check reference </ref/checks>`."

# 0041f37e7698457ba1c66997e9916261
#: ../../topics/checks.txt:26
msgid "Writing your own checks"
msgstr "Создание собственных проверок"

# cd7e1ae2be5e435f801d374edf17e6e8
#: ../../topics/checks.txt:28
msgid ""
"The framework is flexible and allows you to write functions that perform any "
"other kind of check you may require. The following is an example stub check "
"function::"
msgstr ""
"Фреймворк является гибким и позволяет  создавать функции, выполняющие любые "
"виды проверок, которые могут понадобиться. Далее представлен пример функции-"
"заглушки для проверки::"

# 434d9a4ba9cc4488b7312822dc82291c
#: ../../topics/checks.txt:49
msgid ""
"The check function *must* accept an ``app_configs`` argument; this argument "
"is the list of applications that should be inspected. If None, the check "
"must be run on *all* installed apps in the project. The ``**kwargs`` "
"argument is required for future expansion."
msgstr ""
"Проверяющая функция *должна* принимать ``app_configs`` в качестве "
"аргумента;  этот аргумент является списком приложений, которые должны быть "
"проверены.  Если None, то проверка будет запущена для всех установленных в "
"проекте  приложений. Аргумент ``**kwargs``  необходим для последующего "
"расширения. "

# 10979985b84145219491feb65134a7e5
#: ../../topics/checks.txt:55
msgid "Messages"
msgstr "Сообщения"

# d628275c6e95449b97c587b3e3acaa43
#: ../../topics/checks.txt:57
msgid ""
"The function must return a list of messages. If no problems are found as a "
"result of the check, the check function must return an empty list."
msgstr ""
"Функция должна вернуть список сообщений. Если в ходе проверки не найдены "
"проблемы, то функция возвращает пустой список"

# ae95e5e64b0b485b9b94b36e8efc74a1
#: ../../topics/checks.txt:60
msgid ""
"The warnings and errors raised by the check method must be instances of :"
"class:`~django.core.checks.CheckMessage`. An instance of :class:`~django."
"core.checks.CheckMessage` encapsulates a single reportable error or warning. "
"It also provides context and hints applicable to the message, and a unique "
"identifier that is used for filtering purposes."
msgstr ""
"Предупреждения и ошибки  вызванные проверочным методом должны быть "
"экземплярами класса  :class:`~django.core.checks.CheckMessage`. Экземпляр  :"
"class:`~django.core.checks.CheckMessage` содержит одну  ошибку или "
"предупреждение.  Он также предоставляет  контекст и советы применимые к "
"сообщению. А также уникальный идентификатор, которой используется для "
"фильтрации. "

# e32158de86b249e9a5b17ceff187745d
#: ../../topics/checks.txt:66
msgid ""
"The concept is very similar to messages from the :doc:`message framework </"
"ref/contrib/messages>` or the :doc:`logging framework </topics/logging>`. "
"Messages are tagged with a ``level`` indicating the severity of the message."
msgstr ""
"Идея очень похожа на сообщения  :doc:`message framework </ref/contrib/"
"messages>`  или :doc:`logging framework </topics/logging>`.  Тег  ``level`` "
"показывает уровень важности сообщения. "

#: ../../topics/checks.txt:70
msgid ""
"There are also shortcuts to make creating messages with common levels "
"easier. When using these classes you can omit the ``level`` argument because "
"it is implied by the class name."
msgstr ""
"Также, существуют вспомогательные вспомогательные функции, позволяющие "
"создавать сообщения со стандартными уровнями.  При использовании этих "
"классов Вы можете пропускать аргумент ``level`` , т.к. он вытекает из "
"названия. "

#: ../../topics/checks.txt:74
msgid ":class:`Debug`"
msgstr " "

#: ../../topics/checks.txt:75
msgid ":class:`Info`"
msgstr " "

#: ../../topics/checks.txt:76
msgid ":class:`Warning`"
msgstr " "

#: ../../topics/checks.txt:77
msgid ":class:`Error`"
msgstr " "

#: ../../topics/checks.txt:78
msgid ":class:`Critical`"
msgstr " "

# 230eab319fb94b05838478d200e80d85
#: ../../topics/checks.txt:81
msgid "Registering and labeling checks"
msgstr "Регистрация и маркировка проверок"

# ???
#: ../../topics/checks.txt:83
msgid ""
"Lastly, your check function must be registered explicitly with system check "
"registry. Checks should be registered in a file that's loaded when your "
"application is loaded; for example, in the :meth:`AppConfig.ready() <django."
"apps.AppConfig.ready>` method."
msgstr ""
"Ваша функция проверки должна быть зарегистрирована в системном реестре "
"проверок. Проверка должна быть зарегистрирована в файле, который "
"загружается, когда загружается Ваше приложение;  например,   :meth:"
"`AppConfig.ready() <django.apps.AppConfig.ready>`."

# 839dec5e2ed14ba8a778ed6fc6349852
#: ../../topics/checks.txt:90
msgid ""
"You can pass as many tags to ``register`` as you want in order to label your "
"check. Tagging checks is useful since it allows you to run only a certain "
"group of checks. For example, to register a compatibility check, you would "
"make the following call::"
msgstr ""
"Вы можете передать столько тегов ``register`` сколько хотите, для того чтобы "
"пометить свою проверку.  Помеченные проверки очень полезны, т.к. позволяют "
"запускать только определенную группу проверок. Например, для регистрации "
"проверки на совместимость, Вы можете сделать следующий вызов::"

#: ../../topics/checks.txt:102
msgid ""
"You can register \"deployment checks\" that are only relevant to a "
"production settings file like this::"
msgstr ""
"Вы можете регистрировать  \"deployment checks\" , которые уместны только для "
"настроек сервера:"

#: ../../topics/checks.txt:109
#, fuzzy
msgid ""
"These checks will only be run if the :option:`check --deploy` option is used."
msgstr ""
"Эти проверки будут запускаться  если опция :djadminopt:`--deploy` передана в "
"команду :djadmin:`check`"

#: ../../topics/checks.txt:111
msgid ""
"You can also use ``register`` as a function rather than a decorator by "
"passing a callable object (usually a function) as the first argument to "
"``register``."
msgstr ""
"Вы можете использовать  ``register`` как функцию, а не как декоратор, "
"передавая вызываемый объект (обычно функцию) как первый аргумент в "
"``register``."

#: ../../topics/checks.txt:115
msgid "The code below is equivalent to the code above::"
msgstr "Код ниже эквивалентен коду выше::"

# dfd682e1b412485db46979b8721e0613
#: ../../topics/checks.txt:124
#, fuzzy
msgid "Field, model, manager, and database checks"
msgstr "Проверки полей, моделей и менеджеров"

# 93931386bb014de9b40e875fb1ea7c9d
#: ../../topics/checks.txt:126
msgid ""
"In some cases, you won't need to register your check function -- you can "
"piggyback on an existing registration."
msgstr ""
"В некоторых случаях Вам не нужно регистрировать проверочную функцию,  можете "
"просто  дополнить существующую регистрацию. "

#: ../../topics/checks.txt:129
#, fuzzy
msgid ""
"Fields, models, model managers, and database backends all implement a "
"``check()`` method that is already registered with the check framework. If "
"you want to add extra checks, you can extend the implementation on the base "
"class, perform any extra checks you need, and append any messages to those "
"generated by the base class. It's recommended that you delegate each check "
"to separate methods."
msgstr ""
"Поля, модели и менеджеры моделей выполняют  метод ``check()``, который уже "
"зарегистрирован в  фреймворке проверок. Если Вы хотите добавить "
"дополнительные проверки, вы можете расширить реализацию базового класса, "
"выполняя любые дополнительные проверки, которые Вам нужны, и добавляя любые "
"сообщения к тем, которые генерируются базовым классом. Рекомендуется "
"использовать отдельные методы для каждой проверки."

#: ../../topics/checks.txt:138
msgid "Database backend checks were added."
msgstr ""

# 4133b4ad5bba4dbfaf24474b256563ba
#: ../../topics/checks.txt:140
msgid ""
"Consider an example where you are implementing a custom field named "
"``RangedIntegerField``. This field adds ``min`` and ``max`` arguments to the "
"constructor of ``IntegerField``. You may want to add a check to ensure that "
"users provide a min value that is less than or equal to the max value. The "
"following code snippet shows how you can implement this check::"
msgstr ""
"Рассмотрим пример, в котором Вы реализуете настраиваемое поле с именем "
"``RangedIntegerField``.  Это поле добавляет аргументы ``min`` и ``max`` к "
"конструктору   ``IntegerField``.  Вы можете захотеть добавить проверку, "
"чтобы убедиться, что пользователь  предоставляет  минимальное значение, "
"которое меньше или равно максимальному значению. Следующий фрагмент кода "
"показывает, как можно выполнить эту проверку::"

# 5718a979d1894ed9b58b3e337110187e
#: ../../topics/checks.txt:180
msgid ""
"If you wanted to add checks to a model manager, you would take the same "
"approach on your subclass of :class:`~django.db.models.Manager`."
msgstr ""
"Если Вы хотите добавить проверку к менеджеру модели,  Вы должны использовать "
"такой же подход в вашем подклассе :class:`~django.db.models.Manager`."

# 34fa230d635f4582a97cc2c0032c3395
#: ../../topics/checks.txt:183
msgid ""
"If you want to add a check to a model class, the approach is *almost* the "
"same: the only difference is that the check is a classmethod, not an "
"instance method::"
msgstr ""
"Если Вы хотите добавить проверку в класс модели, то подход будет *почти*  "
"такой же: единственное отличие в том, что проверка будет методом класса, а "
"не методом экземпляра::"

#: ../../topics/checks.txt:194
#, fuzzy
msgid "Writing tests"
msgstr "Написание тестов"

# 08b0edc386014fdfbc5cc62829b38009
#: ../../topics/checks.txt:196
msgid "Messages are comparable. That allows you to easily write tests::"
msgstr "Сообщения можно сравнивать. Это позволяет легко писать тесты::"

#~ msgid "The ability to use register as a function was added."
#~ msgstr "Была добавлена возможность использовать регистр как функцию "
