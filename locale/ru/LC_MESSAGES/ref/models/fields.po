# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2016-03-22 16:00+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 8c3574e0b9844bc2ab306e3fd9e3a480
#: ../../ref/models/fields.txt:3
msgid "Model field reference"
msgstr "Справочник по полям модели"

# bf5836b84ffa41dea84a87ed1603e8ad
#: ../../ref/models/fields.txt:10
msgid ""
"This document contains all the API references of :class:`Field` including "
"the `field options`_ and `field types`_ Django offers."
msgstr ""
"Этот раздел содержит все существующие подробности о всех :ref:`параметрах "
"поля <common-model-field-options>` и :ref:`типах полей <model-field-types>` "
"в Django."

# 8db684042d98466aa16a0d154ee0faf0
#: ../../ref/models/fields.txt:15
#, fuzzy
msgid ""
"If the built-in fields don't do the trick, you can try `django-localflavor "
"<https://github.com/django/django-localflavor>`_ (`documentation <https://"
"django-localflavor.readthedocs.io/>`_), which contains assorted pieces of "
"code that are useful for particular countries and cultures."
msgstr ""
"Если существующие поля не предоставляют необходимого функционала, вы можете "
"поискать в `django-localflavor <https://github.com/django/django-"
"localflavor>`_, который содержит дополнительный функционал полезный для "
"различных стран."

#: ../../ref/models/fields.txt:20
msgid ""
"Also, you can easily :doc:`write your own custom model fields </howto/custom-"
"model-fields>`."
msgstr ""
"Также вы можете легко :doc:`создать собственное поле для модели </howto/"
"custom-model-fields>`."

# b1f19cc7b4d44b24bbcc23bdaf3ee60f
#: ../../ref/models/fields.txt:25
msgid ""
"Technically, these models are defined in :mod:`django.db.models.fields`, but "
"for convenience they're imported into :mod:`django.db.models`; the standard "
"convention is to use ``from django.db import models`` and refer to fields as "
"``models.<Foo>Field``."
msgstr ""
"Технически, эти поля определенны в :mod:`django.db.models.fields`, но для "
"удобства они импортированы в :mod:`django.db.models`; по неписанному "
"соглашению принято использовать ``from django.db import models`` и "
"обращаться к полям, как ``models.<Foo>Field``."

# 949e35976cf4493d969fdcafdd398184
#: ../../ref/models/fields.txt:33
msgid "Field options"
msgstr "Параметры поля"

# 1f48e229206740f489037756eb045c48
#: ../../ref/models/fields.txt:35
msgid ""
"The following arguments are available to all field types. All are optional."
msgstr "Приведенные аргументы доступны для всех полей. Все они не обязательны."

# a64b7d33d09d4249afe63ec8c430cb6c
#: ../../ref/models/fields.txt:38
msgid "``null``"
msgstr "``null``"

# 5edcb87a14ed4743a4bd25d9552d0291
#: ../../ref/models/fields.txt:42
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""
"При ``True`` Django сохранит пустое значение как ``NULL`` в базе данных. "
"Значение по умолчанию -- ``False``."

# 746d1969e15243ac924113ffee5bfa3e
#: ../../ref/models/fields.txt:45
#, fuzzy
msgid ""
"Avoid using :attr:`~Field.null` on string-based fields such as :class:"
"`CharField` and :class:`TextField`. If a string-based field has "
"``null=True``, that means it has two possible values for \"no data\": "
"``NULL``, and the empty string. In most cases, it's redundant to have two "
"possible values for \"no data;\" the Django convention is to use the empty "
"string, not ``NULL``. One exception is when a :class:`CharField` has both "
"``unique=True`` and ``blank=True`` set. In this situation, ``null=True`` is "
"required to avoid unique constraint violations when saving multiple objects "
"with blank values."
msgstr ""
"Избегайте использования :attr:`~Field.null` для строковых полей таких, как :"
"class:`CharField` и :class:`TextField`, т.к. пустое значение всегда будет "
"сохранено как пустая строка, а не ``NULL``. Если строковое поле содержит "
"``null=True``, это означает, что оно может содержать два возможных \"пустых"
"\" значения: ``NULL`` и пустую строку. В большинстве случаев избыточно иметь "
"два варианты \"пустых\" значений. Правило Django использовать пустую строку, "
"вместо ``NULL``."

# 299c9454fa224fce9ffd2932e94b7ee0
#: ../../ref/models/fields.txt:54
msgid ""
"For both string-based and non-string-based fields, you will also need to set "
"``blank=True`` if you wish to permit empty values in forms, as the :attr:"
"`~Field.null` parameter only affects database storage (see :attr:`~Field."
"blank`)."
msgstr ""
"Для всех типов полей, вы также должны указать ``blank=True`` если вы хотите "
"разрешить пустые значения в формах, т.к. параметр :attr:`~Field.null` влияет "
"только на сохранение в базе данных (смотрите :attr:`~Field.blank`)."

# 9f35d8792c6540219ee6ef19225344a6
#: ../../ref/models/fields.txt:61
msgid ""
"When using the Oracle database backend, the value ``NULL`` will be stored to "
"denote the empty string regardless of this attribute."
msgstr ""
"При использовании Oracle, ``NULL`` будет использоваться для пустой строки "
"независимо от значения этого параметра."

# 8f49544161974108b7bb7556c08adb53
#: ../../ref/models/fields.txt:64
msgid ""
"If you want to accept :attr:`~Field.null` values with :class:`BooleanField`, "
"use :class:`NullBooleanField` instead."
msgstr ""
"Если хотите использовать :attr:`~Field.null` для :class:`BooleanField`, "
"используйте :class:`NullBooleanField` вместо этого."

# 21722edb888c48a3adb088c10c164695
#: ../../ref/models/fields.txt:68
msgid "``blank``"
msgstr "``blank``"

# 6b8cd9cf2523413cb14648f334c6a2b6
#: ../../ref/models/fields.txt:72
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""
"При ``True`` поле может быть пустым. Значение по умолчанию -- ``False``."

# 15dc731b778542e3b2a7b42fb3efd545
#: ../../ref/models/fields.txt:74
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has ``blank=True``, form validation will allow entry of an empty "
"value. If a field has ``blank=False``, the field will be required."
msgstr ""
"Заметим что этот параметр отличается от :attr:`~Field.null`. :attr:`~Field."
"null` указывается для базы данных, в то время как :attr:`~Field.blank` -- "
"для проверки данных. При ``blank=True``, проверка данных в форме позволит "
"сохранять пустое значение в поле. При ``blank=False`` поле будет "
"обязательным."

# 0932349bf5ae4d69ac2dd2c90ebedeeb
#: ../../ref/models/fields.txt:82
msgid "``choices``"
msgstr "``choices``"

# 2f1ab5c723af4d5faf0a33502fbd4930
#: ../../ref/models/fields.txt:86
msgid ""
"An iterable (e.g., a list or tuple) consisting itself of iterables of "
"exactly two items (e.g. ``[(A, B), (A, B) ...]``) to use as choices for this "
"field. If this is given, the default form widget will be a select box with "
"these choices instead of the standard text field."
msgstr ""
"Итератор (например, список или кортеж) двухэлементных кортежей(например, "
"``[(A, B), (A, B) ...]``), который будет использоваться как варианты "
"значений для поля. Если этот параметр указан, в форме будет использоваться "
"``select`` для этого поля."

# 06b3378ed2e84d00a25066994511c71f
#: ../../ref/models/fields.txt:91
msgid ""
"The first element in each tuple is the actual value to be set on the model, "
"and the second element is the human-readable name. For example::"
msgstr ""
"Первый элемент каждого кортежа -- это значение, которое будет сохранено в "
"базе данных. Второй элемент -- название, которое будет отображаться для "
"пользователей. Например::"

# 7e59d10e970145238c2d46b69156f9f5
#: ../../ref/models/fields.txt:101
msgid ""
"Generally, it's best to define choices inside a model class, and to define a "
"suitably-named constant for each value::"
msgstr "Значения лучше указать в константах внутри модели::"

# 0b5991526b3e4a02b49e980f837915bb
#: ../../ref/models/fields.txt:126
msgid ""
"Though you can define a choices list outside of a model class and then refer "
"to it, defining the choices and names for each choice inside the model class "
"keeps all of that information with the class that uses it, and makes the "
"choices easy to reference (e.g, ``Student.SOPHOMORE`` will work anywhere "
"that the ``Student`` model has been imported)."
msgstr ""
"Можно указать список значений и не в модели, но так все данные будут связаны "
"с моделью, и к значениям можно легко обратиться (например, ``Student."
"SOPHOMORE`` можно использовать импортировав модель ``Student``)."

# 719553d08a9b404c98548b5bd2ec62cf
#: ../../ref/models/fields.txt:132
msgid ""
"You can also collect your available choices into named groups that can be "
"used for organizational purposes::"
msgstr "Вы можете сгруппировать значения в именованные группы::"

# 2c6993e86ae243979d2a220d5468b55f
#: ../../ref/models/fields.txt:149
msgid ""
"The first element in each tuple is the name to apply to the group. The "
"second element is an iterable of 2-tuples, with each 2-tuple containing a "
"value and a human-readable name for an option. Grouped options may be "
"combined with ungrouped options within a single list (such as the `unknown` "
"option in this example)."
msgstr ""
"Первый элемент каждого кортежа -- это название группы. Второй элемент -- "
"итератор с двух-элементными кортежами содержащими значение и отображаемое "
"название. Сгруппированные опции могут комбинироваться с не сгруппированными "
"(как `unknown` в примере выше)."

# 112c83d1f8e24ac29d752bf16d1b34de
#: ../../ref/models/fields.txt:155
msgid ""
"For each model field that has :attr:`~Field.choices` set, Django will add a "
"method to retrieve the human-readable name for the field's current value. "
"See :meth:`~django.db.models.Model.get_FOO_display` in the database API "
"documentation."
msgstr ""
"Для каждой модели с полем содержащим :attr:`~Field.choices`, Django "
"добавляет метод для получения названия текущего значения поля. Смотрите :"
"meth:`~django.db.models.Model.get_FOO_display` в документации про API для "
"работы с базой данных."

# 1ac62f308271409fb2ccb1481d849071
#: ../../ref/models/fields.txt:160
msgid ""
"Note that choices can be any iterable object -- not necessarily a list or "
"tuple. This lets you construct choices dynamically. But if you find yourself "
"hacking :attr:`~Field.choices` to be dynamic, you're probably better off "
"using a proper database table with a :class:`ForeignKey`. :attr:`~Field."
"choices` is meant for static data that doesn't change much, if ever."
msgstr ""
"Отметим что в качестве списка вариантов значений может быть любой итератор "
"-- не обязательно список или кортеж. Это позволяет определять варианты "
"значений динамически. Но, если вам необходимо использовать динамический :"
"attr:`~Field.choices`, возможно вам следует использовать правильную "
"структуру таблицы базы данных с :class:`ForeignKey`. :attr:`~Field.choices` "
"предназначен для статических данных, которые почти или вообще не изменяются."

# 1d99bffe3f8644bfaa1262d6a0d37927
#: ../../ref/models/fields.txt:166
msgid ""
"Unless :attr:`blank=False<Field.blank>` is set on the field along with a :"
"attr:`~Field.default` then a label containing ``\"---------\"`` will be "
"rendered with the select box. To override this behavior, add a tuple to "
"``choices`` containing ``None``; e.g. ``(None, 'Your String For Display')``. "
"Alternatively, you can use an empty string instead of ``None`` where this "
"makes sense - such as on a :class:`~django.db.models.CharField`."
msgstr ""
"Если поле содержит :attr:`blank=False<Field.blank>`, но :attr:`~Field."
"default` не определен, в поле выбора будет добавлено значение с названием ``"
"\"---------\"``. Чтобы это изменить, добавьте в ``choices`` элемент с "
"``None``, например, ``(None, 'Your String For Display')``. Также можно "
"использовать пустую строку вместо ``None``, где это имеет смысл, например, "
"для :class:`~django.db.models.CharField`."

# 4c0fd3c3453b4abebfe2e64d1007a2e6
#: ../../ref/models/fields.txt:174
msgid "``db_column``"
msgstr "``db_column``"

# b47a9cc6ebe84c5a800278745e914956
#: ../../ref/models/fields.txt:178
msgid ""
"The name of the database column to use for this field. If this isn't given, "
"Django will use the field's name."
msgstr ""
"Имя колонки в базе данных для хранения данных этого поля. Если этот параметр "
"не указан, Django будет использовать название поля."

# 31bef95c88c0488c90db54961c7e6d2d
#: ../../ref/models/fields.txt:181
msgid ""
"If your database column name is an SQL reserved word, or contains characters "
"that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""
"Если имя колонки это зарезервированное SQL слово, или содержит символы "
"запрещенные в названиях переменной  в Python -- в частности, дефис -- все "
"нормально. Django автоматически экранирует название колонок и таблиц."

# 5b0a481694314364b83c2b1cb19600be
#: ../../ref/models/fields.txt:187
msgid "``db_index``"
msgstr "``db_index``"

# c9014c14bbc34b37bc7e551859db8b90
#: ../../ref/models/fields.txt:191
msgid "If ``True``, a database index will be created for this field."
msgstr "При ``True`` для поля будет создан индекс в базе данных."

# 55032a4532e54bfea9e535058dc8e01a
#: ../../ref/models/fields.txt:194
msgid "``db_tablespace``"
msgstr "``db_tablespace``"

# 62481809a3694862bcc3cb0ff5b26b1f
#: ../../ref/models/fields.txt:198
msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this field's index, if this field is indexed. The default is the "
"project's :setting:`DEFAULT_INDEX_TABLESPACE` setting, if set, or the :attr:"
"`~Options.db_tablespace` of the model, if any. If the backend doesn't "
"support tablespaces for indexes, this option is ignored."
msgstr ""
"Имя :doc:`\"tablespace\" базы данных </topics/db/tablespaces>` используемое "
"для индекса поля, если поле имеет индекс. По-умолчанию используется значение "
"настройки :setting:`DEFAULT_INDEX_TABLESPACE` проекта, если оно указано, "
"иначе :attr:`~Options.db_tablespace` модели. Если база данных не "
"поддерживает \"tablespace\" для индексов, этот параметр будет проигнорирован."

# 738893ac9a464bf587a73a8c34d12a11
#: ../../ref/models/fields.txt:205
msgid "``default``"
msgstr "``default``"

# 66cc0377f8d54c998b5efa6c0b63b349
#: ../../ref/models/fields.txt:209
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""
"Значение по умолчанию для поля. Это может быть значение или "
"вызываемый(callable) объект. Если это вызываемый объект, он будет вызван при "
"создании нового объекта."

# ef2a2a52a0f54d58947685a918ca2403
#: ../../ref/models/fields.txt:212
#, fuzzy
msgid ""
"The default can't be a mutable object (model instance, ``list``, ``set``, "
"etc.), as a reference to the same instance of that object would be used as "
"the default value in all new model instances. Instead, wrap the desired "
"default in a callable. For example, if you want to specify a default "
"``dict`` for :class:`~django.contrib.postgres.fields.JSONField`, use a "
"function::"
msgstr ""
"Значение по умолчанию не может быть изменяемым значением (экземпляр модели, "
"список, множество и т.д.), т.к. все объекты модели будут ссылаться на этот "
"объект и использовать его как значение по умолчанию. Вместо этого укажите "
"функцию, которая возвращает нужное значение.  Например, если у вас есть "
"собственное поле ``JSONField`` и вы хотите указать словарь как значение по "
"умолчанию, используйте следующую функцию::"

# 3312d1b1acb94a00b737119c64013917
#: ../../ref/models/fields.txt:223
#, fuzzy
msgid ""
"``lambda``\\s can't be used for field options like ``default`` because they "
"can't be :ref:`serialized by migrations <migration-serializing>`. See that "
"documentation for other caveats."
msgstr ""
"Обратите внимание, ``lambda`` нельзя использовать в качестве значения для "
"``default`` т.к. она не может быть :ref:`сериализована для миграций "
"<migration-serializing>`. Подробности смотрите в соответствующем разделе."

#: ../../ref/models/fields.txt:227
msgid ""
"For fields like :class:`ForeignKey` that map to model instances, defaults "
"should be the value of the field they reference (``pk`` unless :attr:"
"`~ForeignKey.to_field` is set) instead of model instances."
msgstr ""
"Для полей типа :class:`ForeignKey`, которые ссылаются на объекты модели, "
"значением по умолчанию должно быть значение поля на которое они ссылаются "
"(``pk``, если не указан :attr:`~ForeignKey.to_field`), а не объект модели."

#: ../../ref/models/fields.txt:231
msgid ""
"The default value is used when new model instances are created and a value "
"isn't provided for the field. When the field is a primary key, the default "
"is also used when the field is set to ``None``."
msgstr ""
"Значение по умолчанию используется, если был создан экземпляр модели, а "
"значение для поля не было указано. Если поле является первичным ключом, "
"значение по умолчанию также использует и при указании ``None``."

# 750eb18dc5034be3ac51a5db175f3c2b
#: ../../ref/models/fields.txt:236
msgid "``editable``"
msgstr "``editable``"

# 7c3627d3daaa459b8889099957a25618
#: ../../ref/models/fields.txt:240
msgid ""
"If ``False``, the field will not be displayed in the admin or any other :"
"class:`~django.forms.ModelForm`. They are also skipped during :ref:`model "
"validation <validating-objects>`. Default is ``True``."
msgstr ""
"При ``False``, поле не будет отображаться в админке или любой другой :class:"
"`~django.forms.ModelForm` для модели. Такие поля также пропускаются при :ref:"
"`валидации модели <validating-objects>`. Значение по умолчанию -- ``True``."

# 6e65b2b6c34947a59d781de6605a92b4
#: ../../ref/models/fields.txt:245
msgid "``error_messages``"
msgstr "``error_messages``"

# 146706692c50405190649f6c8075250a
#: ../../ref/models/fields.txt:249
msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the field will raise. Pass in a dictionary with keys matching the error "
"messages you want to override."
msgstr ""
"``error_messages`` позволяет переопределить сообщения ошибок возвращаемых "
"полем. Используйте словарь с ключами соответствующими необходимым ошибкам."

# 39febea652b5492d9d74801ea19ee1a9
#: ../../ref/models/fields.txt:253
msgid ""
"Error message keys include ``null``, ``blank``, ``invalid``, "
"``invalid_choice``, ``unique``, and ``unique_for_date``. Additional error "
"message keys are specified for each field in the `Field types`_ section "
"below."
msgstr ""
"Ключи ошибок такие: ``null``, ``blank``, ``invalid``, ``invalid_choice``, "
"``unique`` и ``unique_for_date`. Дополнительные ошибки указаны для каждого :"
"ref:`типа поля ниже<model-field-types>`."

# e21a3bb0e16d454cb6229717eb7796e2
#: ../../ref/models/fields.txt:258
msgid "``help_text``"
msgstr "``help_text``"

# 7000d523df3846a78b92c5b0b63d58ce
#: ../../ref/models/fields.txt:262
msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""
"Подсказка, отображаемая под полем в интерфейсе администратора. Это полезно "
"для описания поля, даже если модель не используется в форме."

# 82dcba9212a944749b0d7c7121a6e8c0
#: ../../ref/models/fields.txt:265
msgid ""
"Note that this value is *not* HTML-escaped in automatically-generated forms. "
"This lets you include HTML in :attr:`~Field.help_text` if you so desire. For "
"example::"
msgstr ""
"Заметим, что, при отображении в форме, HTML-символы не экранируются. Это "
"позволяет использовать HTML в :attr:`~Field.help_text` если вам необходимо. "
"Например::"

# 580032aedb9b4beeab09ffd1e206acbe
#: ../../ref/models/fields.txt:271
msgid ""
"Alternatively you can use plain text and ``django.utils.html.escape()`` to "
"escape any HTML special characters. Ensure that you escape any help text "
"that may come from untrusted users to avoid a cross-site scripting attack."
msgstr ""
"Также вы можете использовать обычный текст и ``django.utils.html.escape()``, "
"чтобы экранировать HTML. Убедитесь, что вы экранируете все подсказки, "
"которые могут определять непроверенные пользователи, чтобы избежать XSS атак."

# ccb13b4516194e24a9ad1349ee5cf320
#: ../../ref/models/fields.txt:277
msgid "``primary_key``"
msgstr "``primary_key``"

# c9014c14bbc34b37bc7e551859db8b90
#: ../../ref/models/fields.txt:281
msgid "If ``True``, this field is the primary key for the model."
msgstr "При ``True`` это поле будет первичным ключом."

# d28040dbddaa47b5b6ceecea9677247d
#: ../../ref/models/fields.txt:283
msgid ""
"If you don't specify ``primary_key=True`` for any field in your model, "
"Django will automatically add an :class:`AutoField` to hold the primary key, "
"so you don't need to set ``primary_key=True`` on any of your fields unless "
"you want to override the default primary-key behavior. For more, see :ref:"
"`automatic-primary-key-fields`."
msgstr ""
"Если вы не укажите ``primary_key=True`` для какого-либо поля в модели, "
"Django самостоятельно добавит :class:`AutoField` для хранения первичного "
"ключа, вы не обязаны указывать ``primary_key=True``, если не хотите "
"переопределить первичный ключ по умолчанию. Подробнее смотрите :ref:"
"`automatic-primary-key-fields`."

# e979e5b8d0ce4ebe93e0247fbf073b7a
#: ../../ref/models/fields.txt:289
msgid ""
"``primary_key=True`` implies :attr:`null=False <Field.null>` and :attr:"
"`unique=True <Field.unique>`. Only one primary key is allowed on an object."
msgstr ""
"``primary_key=True`` подразумевает :attr:`null=False <Field.null>` и :attr:"
"`unique=True <Field.unique>`. Модель может содержать только один первичный "
"ключ."

#: ../../ref/models/fields.txt:293
msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one."
msgstr ""
"Первичный ключ доступен только для чтения. Если вы поменяете значение для "
"существующего объекта и сохраните его, будет создан новый объект."

# 593fb17b072141369e1e208341eda565
#: ../../ref/models/fields.txt:298
msgid "``unique``"
msgstr "``unique``"

# 95788ac44fcf48ec9547b21db29a57b0
#: ../../ref/models/fields.txt:302
msgid "If ``True``, this field must be unique throughout the table."
msgstr "При ``True`` значение поля должно быть уникальным."

# 38d364c67e0a4b3798cbd4592b5bff91
#: ../../ref/models/fields.txt:304
msgid ""
"This is enforced at the database level and by model validation. If you try "
"to save a model with a duplicate value in a :attr:`~Field.unique` field, a :"
"exc:`django.db.IntegrityError` will be raised by the model's :meth:`~django."
"db.models.Model.save` method."
msgstr ""
"Этот параметр учитывается при сохранении в базу данных и при проверке данных "
"в модели. Если вы попытаетесь сохранить повторное значение в поле с :attr:"
"`~Field.unique`, будет вызвана ошибка :exc:`django.db.IntegrityError` "
"методом :meth:`~django.db.models.Model.save`."

# 9228e41d79ad4f8c9a4a5c808992b330
#: ../../ref/models/fields.txt:309
#, fuzzy
msgid ""
"This option is valid on all field types except :class:`ManyToManyField` and :"
"class:`OneToOneField`."
msgstr ""
"Этот параметр можно использовать для любого типа поля кроме :class:"
"`ManyToManyField`, :class:`OneToOneField` и :class:`FileField`."

# 703fa578992f4195ac316e755b6bb62a
#: ../../ref/models/fields.txt:312
msgid ""
"Note that when ``unique`` is ``True``, you don't need to specify :attr:"
"`~Field.db_index`, because ``unique`` implies the creation of an index."
msgstr ""
"Заметим что, при ``unique`` равном ``True``, не нужно указывать :attr:"
"`~Field.db_index`, т.к. ``unique`` создает индекс."

#: ../../ref/models/fields.txt:317
msgid "In older versions, ``unique=True`` can't be used on :class:`FileField`."
msgstr ""

# 16ac57d4c130475b88e90bfa9b59d0f7
#: ../../ref/models/fields.txt:320
msgid "``unique_for_date``"
msgstr "``unique_for_date``"

# 7676407ce35e44f18d360ba2de0890a5
#: ../../ref/models/fields.txt:324
msgid ""
"Set this to the name of a :class:`DateField` or :class:`DateTimeField` to "
"require that this field be unique for the value of the date field."
msgstr ""
"Этот параметр должен быть равен названию :class:`DateField` или :class:"
"`DateTimeField` поля, для которого значение должно быть уникальным."

# 23874035c391463cba86e99e2c4beb25
#: ../../ref/models/fields.txt:327
msgid ""
"For example, if you have a field ``title`` that has ``unique_for_date="
"\"pub_date\"``, then Django wouldn't allow the entry of two records with the "
"same ``title`` and ``pub_date``."
msgstr ""
"Например, если модель имеет поле ``title`` с ``unique_for_date=\"pub_date"
"\"``, тогда Django позволит сохранять записи только с уникальной комбинацией "
"``title`` и ``pub_date``."

# 2c95ad98abdc4856aa2f669bec590ae5
#: ../../ref/models/fields.txt:331
msgid ""
"Note that if you set this to point to a :class:`DateTimeField`, only the "
"date portion of the field will be considered. Besides, when :setting:"
"`USE_TZ` is ``True``, the check will be performed in the :ref:`current time "
"zone <default-current-time-zone>` at the time the object gets saved."
msgstr ""
"Если указать этот параметр для :class:`DateTimeField`, только дата значения "
"будет учитываться. Но при :setting:`USE_TZ` равном ``True``, проверка будет "
"выполнена в :ref:`текущем часовом поясе <default-current-time-zone>` во "
"время сохранения объекта."

# fe1c0aa2472648a9bb46d4a025243404
#: ../../ref/models/fields.txt:336
msgid ""
"This is enforced by :meth:`Model.validate_unique()` during model validation "
"but not at the database level. If any :attr:`~Field.unique_for_date` "
"constraint involves fields that are not part of a :class:`~django.forms."
"ModelForm` (for example, if one of the fields is listed in ``exclude`` or "
"has :attr:`editable=False<Field.editable>`), :meth:`Model.validate_unique()` "
"will skip validation for that particular constraint."
msgstr ""
"Проверка выполняется методом :meth:`Model.validate_unique()` во время "
"валидации модели, не на уровне базы данных. Если :attr:`~Field."
"unique_for_date` содержит поля, которые не входят в :class:`~django.forms."
"ModelForm` (например, поле было указанно в ``exclude`` или содержит :attr:"
"`editable=False<Field.editable>`), :meth:`Model.validate_unique()` не будет "
"выполнять эту валидацию."

# 8896dd7bc9294164a27a32b55196b7c7
#: ../../ref/models/fields.txt:344
msgid "``unique_for_month``"
msgstr "``unique_for_month``"

# bf8b8c34cc3342a28c0617fd5a46a863
#: ../../ref/models/fields.txt:348
msgid ""
"Like :attr:`~Field.unique_for_date`, but requires the field to be unique "
"with respect to the month."
msgstr ""
"Аналогично :attr:`~Field.unique_for_date`, но значение будет уникально для "
"месяца."

# 9998918199404177bb376e9d49164202
#: ../../ref/models/fields.txt:352
msgid "``unique_for_year``"
msgstr "``unique_for_year``"

# 34718c18f48d4beebe457cd4ea532bf4
#: ../../ref/models/fields.txt:356
msgid ""
"Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`."
msgstr ""
"Аналогично :attr:`~Field.unique_for_date` и :attr:`~Field.unique_for_month`."

# 810d4df1fe7b445095fc7c61d7006ad8
#: ../../ref/models/fields.txt:359
msgid "``verbose_name``"
msgstr "``verbose_name``"

# a17ba1776b8b4aa88a8325a70871da6b
#: ../../ref/models/fields.txt:363
msgid ""
"A human-readable name for the field. If the verbose name isn't given, Django "
"will automatically create it using the field's attribute name, converting "
"underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`."
msgstr ""
"Отображаемое имя поля. Если параметр не указан, Django самостоятельно "
"создаст его используя имя атрибута поля, заменяя подчеркивание на пробелы. "
"Смотрите раздел про :ref:`отображаемые имена полей <verbose-field-names>`."

# 2d7b380f37764041b6fbe885bef493bd
#: ../../ref/models/fields.txt:368
msgid "``validators``"
msgstr "``validators``"

# 5164e5b66d10475eabaf9c1c543a5f4c
#: ../../ref/models/fields.txt:372
msgid ""
"A list of validators to run for this field. See the :doc:`validators "
"documentation </ref/validators>` for more information."
msgstr ""
"Список проверок(\"валидаторов\") выполняемых для этого поля. Смотрите :doc:"
"`раздел о \"валидаторах\" </ref/validators>` для подробной информации."

# 9f56b6848bcf4fbabb1c4f62ab2fafba
#: ../../ref/models/fields.txt:376
msgid "Registering and fetching lookups"
msgstr "Регистрация и загрузка операторов для фильтрации"

# c293fdd9207c47f4baf57e02cd26bc89
#: ../../ref/models/fields.txt:378
msgid ""
"``Field`` implements the :ref:`lookup registration API <lookup-registration-"
"api>`. The API can be used to customize which lookups are available for a "
"field class, and how lookups are fetched from a field."
msgstr ""
"``Field`` предоставляет :ref:`API для регистрации своих операторов "
"фильтрации <lookup-registration-api>`. Этот API позволяет добавить свои "
"варианты фильтрации по полю."

# 18b963e82b4546918406f0f304af94eb
#: ../../ref/models/fields.txt:385
msgid "Field types"
msgstr "Типы полей"

# 082b945827d14012a2e68d4f99bb07bd
#: ../../ref/models/fields.txt:390
msgid "``AutoField``"
msgstr "``AutoField``"

# 82e1fe5d0c71467d9862d47b34404f7e
#: ../../ref/models/fields.txt:394
msgid ""
"An :class:`IntegerField` that automatically increments according to "
"available IDs. You usually won't need to use this directly; a primary key "
"field will automatically be added to your model if you don't specify "
"otherwise. See :ref:`automatic-primary-key-fields`."
msgstr ""
"Автоинкрементное поле :class:`IntegerField`. Используется для хранения ID. "
"Скорее всего вам не придется использовать это поле, первичный ключ будет "
"автоматически добавлен к модели. Смотрите :ref:`automatic-primary-key-"
"fields`."

# 082b945827d14012a2e68d4f99bb07bd
#: ../../ref/models/fields.txt:400
#, fuzzy
msgid "``BigAutoField``"
msgstr "``AutoField``"

# 5ec28ef1e8e642deb0da59abb230a9c0
#: ../../ref/models/fields.txt:406
#, fuzzy
msgid ""
"A 64-bit integer, much like an :class:`AutoField` except that it is "
"guaranteed to fit numbers from ``1`` to ``9223372036854775807``."
msgstr ""
"64-битное целочисленное, аналогично :class:`IntegerField` но позволяет "
"хранить числа от ``-9223372036854775808`` до ``9223372036854775807``. Форма "
"будет использовать :class:`~django.forms.TextInput` для отображения."

# 83d29df4fc8d46cd907838a39c49f99a
#: ../../ref/models/fields.txt:410
msgid "``BigIntegerField``"
msgstr "``BigIntegerField``"

# 5ec28ef1e8e642deb0da59abb230a9c0
#: ../../ref/models/fields.txt:414
#, fuzzy
msgid ""
"A 64-bit integer, much like an :class:`IntegerField` except that it is "
"guaranteed to fit numbers from ``-9223372036854775808`` to "
"``9223372036854775807``. The default form widget for this field is a :class:"
"`~django.forms.TextInput`."
msgstr ""
"64-битное целочисленное, аналогично :class:`IntegerField` но позволяет "
"хранить числа от ``-9223372036854775808`` до ``9223372036854775807``. Форма "
"будет использовать :class:`~django.forms.TextInput` для отображения."

# 85f1d44cd44143a0855fb1a1dc492c4a
#: ../../ref/models/fields.txt:420
msgid "``BinaryField``"
msgstr "``BinaryField``"

# 0cf365c34505416da313bca413053f8d
#: ../../ref/models/fields.txt:424
#, fuzzy
msgid ""
"A field to store raw binary data. It only supports ``bytes`` assignment. Be "
"aware that this field has limited functionality. For example, it is not "
"possible to filter a queryset on a ``BinaryField`` value. It is also not "
"possible to include a ``BinaryField`` in a :class:`~django.forms.ModelForm`."
msgstr ""
"Поля для хранения бинарных данных. Принимает значение типа ``bytes``. Это "
"поле имеет ограниченный функционал. Например, ``QuerySet`` нельзя "
"фильтровать по значению ``BinaryField``."

# 85f1d44cd44143a0855fb1a1dc492c4a
#: ../../ref/models/fields.txt:429
msgid "Abusing ``BinaryField``"
msgstr "Злоупотребление ``BinaryField``"

# bf4154b3cee04acf8119a340e9223b9b
#: ../../ref/models/fields.txt:431
msgid ""
"Although you might think about storing files in the database, consider that "
"it is bad design in 99% of the cases. This field is *not* a replacement for "
"proper :doc:`static files </howto/static-files/index>` handling."
msgstr ""
"Помните, хранение файлов в базе данных в 99% случаях - это плохой подход. "
"Это поле *не* замена :doc:`статическим файлам </howto/static-files/index>`."

# a5cb2135a6bd43d7bd284e7312447416
#: ../../ref/models/fields.txt:436
msgid "``BooleanField``"
msgstr "``BooleanField``"

# 68b6f9896d334c4f868ad663cdc47cb0
#: ../../ref/models/fields.txt:440
msgid "A true/false field."
msgstr "Поле хранящее значение true/false."

# 35625f2943664e72be6c119741801075
#: ../../ref/models/fields.txt:442
msgid ""
"The default form widget for this field is a :class:`~django.forms."
"CheckboxInput`."
msgstr ""
"Виджет по умолчанию для этого поля :class:`~django.forms.CheckboxInput`."

# 594009a7a8ff428e8572d1daf75d7b4e
#: ../../ref/models/fields.txt:445
msgid ""
"If you need to accept :attr:`~Field.null` values then use :class:"
"`NullBooleanField` instead."
msgstr ""
"Если вам нужен параметр :attr:`~Field.null`, используйте поле :class:"
"`NullBooleanField`."

# 47694632da724487a512b1ae41723f4a
#: ../../ref/models/fields.txt:448
msgid ""
"The default value of ``BooleanField`` is ``None`` when :attr:`Field.default` "
"isn't defined."
msgstr ""
"Значение по умолчанию для ``BooleanField`` ``None``, если :attr:`Field."
"default` не указан."

# 85f1d44cd44143a0855fb1a1dc492c4a
#: ../../ref/models/fields.txt:452
msgid "``CharField``"
msgstr "``CharField``"

# 4b41c5b207494cc8be62a33a6c66953f
#: ../../ref/models/fields.txt:456
msgid "A string field, for small- to large-sized strings."
msgstr "Строковое поле для хранения коротких или длинных строк."

# c234a5f64c2247bd84e3791e292fb555
#: ../../ref/models/fields.txt:458
msgid "For large amounts of text, use :class:`~django.db.models.TextField`."
msgstr ""
"Для большого количества текстовой информации используйте :class:`~django.db."
"models.TextField`."

# ebb7457df0b646a98fa6c05394bc5050
# 5a49337e18f64618b252f334bbd41efb
# 99addf16a3d6431ea08c33328f5458c5
# 2bcfac1f138c460aa7c52435559f5693
#: ../../ref/models/fields.txt:460 ../../ref/models/fields.txt:1111
msgid ""
"The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr "Виджет по умолчанию для этого поля :class:`~django.forms.TextInput`."

# 33c6fdea57dd430c8057f0e066e9f475
#: ../../ref/models/fields.txt:462
msgid ":class:`CharField` has one extra required argument:"
msgstr ":class:`CharField` принимает один дополнительный аргумент:"

# 3685f67898574a29a149e781eaa8f2a8
#: ../../ref/models/fields.txt:466
msgid ""
"The maximum length (in characters) of the field. The max_length is enforced "
"at the database level and in Django's validation."
msgstr ""
"Максимальная длинна(в символах) этого поля. ``max_length`` используется для "
"проверки данных на уровне базы данных и форм Django."

# bf3bae0a55664dd5a2f69042f03e4673
#: ../../ref/models/fields.txt:471
msgid ""
"If you are writing an application that must be portable to multiple database "
"backends, you should be aware that there are restrictions on ``max_length`` "
"for some backends. Refer to the :doc:`database backend notes </ref/"
"databases>` for details."
msgstr ""
"Если вы создаете независимое приложение, которое должно работать на "
"различных базах данных, помните что существуют некоторые ограничения "
"использования ``max_length`` для некоторых типов баз данных. Смотрите раздел "
"про :doc:`использование различных типов баз данных </ref/databases>`."

# 692ea20f1f5e4e5984fad147ba250369
#: ../../ref/models/fields.txt:477
msgid "``CommaSeparatedIntegerField``"
msgstr "``CommaSeparatedIntegerField``"

#: ../../ref/models/fields.txt:483
msgid ""
"This field is deprecated in favor of :class:`~django.db.models.CharField` "
"with ``validators=[``\\ :func:`validate_comma_separated_integer_list <django."
"core.validators.validate_comma_separated_integer_list>`\\ ``]``."
msgstr ""

# 05eaed3139b940a88587706a154f9b41
#: ../../ref/models/fields.txt:487
msgid ""
"A field of integers separated by commas. As in :class:`CharField`, the :attr:"
"`~CharField.max_length` argument is required and the note about database "
"portability mentioned there should be heeded."
msgstr ""
"Поле, содержащее целые числа разделенные запятыми. Как и в :class:"
"`CharField`, необходим параметр :attr:`~CharField.max_length`. Упомянутые "
"особенности работы с различными типами баз данных актуальны."

# 1a94384169c84ed7ab5888cd212442a6
#: ../../ref/models/fields.txt:492
msgid "``DateField``"
msgstr "``DateField``"

# fbc801227a4a40dc8b8f34282e001c1c
#: ../../ref/models/fields.txt:496
msgid ""
"A date, represented in Python by a ``datetime.date`` instance. Has a few "
"extra, optional arguments:"
msgstr ""
"Дата, представленная в виде объекта ``datetime.date`` Python. Принимает "
"несколько дополнительных параметров:"

# 79635f0fed254a31aa7973c53ae4bacb
#: ../../ref/models/fields.txt:501
msgid ""
"Automatically set the field to now every time the object is saved. Useful "
"for \"last-modified\" timestamps. Note that the current date is *always* "
"used; it's not just a default value that you can override."
msgstr ""
"Значение поля будет автоматически установлено в текущую дату при каждом "
"сохранении объекта. Полезно для хранения времени последнего изменения. "
"Заметим, что текущее время будет использовано *всегда*; это не просто "
"значение по умолчанию, которое вы можете переопределить."

#: ../../ref/models/fields.txt:505
msgid ""
"The field is only automatically updated when calling :meth:`Model.save() "
"<django.db.models.Model.save>`. The field isn't updated when making updates "
"to other fields in other ways such as :meth:`QuerySet.update() <django.db."
"models.query.QuerySet.update>`, though you can specify a custom value for "
"the field in an update like that."
msgstr ""

# f32850092b49421897cd5b0a79858302
#: ../../ref/models/fields.txt:513
msgid ""
"Automatically set the field to now when the object is first created. Useful "
"for creation of timestamps. Note that the current date is *always* used; "
"it's not just a default value that you can override. So even if you set a "
"value for this field when creating the object, it will be ignored. If you "
"want to be able to modify this field, set the following instead of "
"``auto_now_add=True``:"
msgstr ""
"Значение поля будет автоматически установлено в текущую дату при "
"создании(первом сохранении) объекта. Полезно для хранения времени создания. "
"Заметим, что текущее время будет использовано *всегда*; это не просто "
"значение по-умолчанию, которое вы можете переопределить. По этому, даже если "
"вы укажите значение для этого поля, оно будет проигнорировано. Если вы "
"хотите изменять значения этого поля, используйте следующее вместо "
"``auto_now_add=True``:"

#: ../../ref/models/fields.txt:520
msgid ""
"For :class:`DateField`: ``default=date.today`` - from :meth:`datetime.date."
"today`"
msgstr ""
"Для :class:`DateField`: ``default=date.today`` - из :meth:`datetime.date."
"today`"

#: ../../ref/models/fields.txt:522
msgid ""
"For :class:`DateTimeField`: ``default=timezone.now`` - from :func:`django."
"utils.timezone.now`"
msgstr ""
"Для :class:`DateTimeField`: ``default=timezone.now`` - из :func:`django."
"utils.timezone.now`"

# 7ce7b7d9be9646ac83ee43e2da746588
#: ../../ref/models/fields.txt:525
msgid ""
"The default form widget for this field is a :class:`~django.forms."
"TextInput`. The admin adds a JavaScript calendar, and a shortcut for \"Today"
"\". Includes an additional ``invalid_date`` error message key."
msgstr ""
"В форме поле будет представлено как `:class:`~django.forms.TextInput` с "
"JavaScript календарем, и кнопкой \"Сегодня\". Содержит дополнительную ошибку "
"``invalid_date``."

#: ../../ref/models/fields.txt:530
msgid ""
"The options ``auto_now_add``, ``auto_now``, and ``default`` are mutually "
"exclusive. Any combination of these options will result in an error."
msgstr ""
"Опции ``auto_now_add``, ``auto_now`` и ``default`` взаимоисключающие. "
"Использование их вместе вызовет ошибку."

# 9676f0dc473b47a99f2aad98dbf1e16e
#: ../../ref/models/fields.txt:534
msgid ""
"As currently implemented, setting ``auto_now`` or ``auto_now_add`` to "
"``True`` will cause the field to have ``editable=False`` and ``blank=True`` "
"set."
msgstr ""
"При использовании ``auto_now`` или ``auto_now_add`` со значением ``True`` "
"будут установлены параметры ``editable=False`` и ``blank=True``."

#: ../../ref/models/fields.txt:539
msgid ""
"The ``auto_now`` and ``auto_now_add`` options will always use the date in "
"the :ref:`default timezone <default-current-time-zone>` at the moment of "
"creation or update. If you need something different, you may want to "
"consider simply using your own callable default or overriding ``save()`` "
"instead of using ``auto_now`` or ``auto_now_add``; or using a "
"``DateTimeField`` instead of a ``DateField`` and deciding how to handle the "
"conversion from datetime to date at display time."
msgstr ""
"Опции``auto_now`` и ``auto_now_add`` всегда используют дату в :ref:`часовом "
"поясе по умолчанию <default-current-time-zone>` в момент создания или "
"изменения объекта. Если такое поведение вам не подходит, вы можете указать "
"свою функцию как значение по умолчанию, или переопределить метод ``save()``, "
"вместо использования ``auto_now`` или ``auto_now_add``. Или использовать "
"``DateTimeField`` вместо ``DateField`` и выполнять преобразование в дату при "
"выводе значения."

# 9ea587e4e3524b39a67603cfda36d057
#: ../../ref/models/fields.txt:548
msgid "``DateTimeField``"
msgstr "``DateTimeField``"

# 7ddddeee8f264a7caed679719fd17558
#: ../../ref/models/fields.txt:552
msgid ""
"A date and time, represented in Python by a ``datetime.datetime`` instance. "
"Takes the same extra arguments as :class:`DateField`."
msgstr ""
"Дата и время, представленные объектом ``datetime.datetime`` Python. "
"Принимает аналогичные параметры что и :class:`DateField`."

# 67119680598048e0be2289b889eeac18
#: ../../ref/models/fields.txt:555
msgid ""
"The default form widget for this field is a single :class:`~django.forms."
"TextInput`. The admin uses two separate :class:`~django.forms.TextInput` "
"widgets with JavaScript shortcuts."
msgstr ""
"Виджет по умолчанию в форме для этого поля - :class:`~django.forms."
"TextInput`. Интерфейс администратора использует два виджета :class:`~django."
"forms.TextInput` и JavaScript."

# a845530191a544dcb5ba3624790feb2d
#: ../../ref/models/fields.txt:560
msgid "``DecimalField``"
msgstr "``DecimalField``"

# d25c51fab5bb410fbd56e4f1441f1d0b
#: ../../ref/models/fields.txt:564
msgid ""
"A fixed-precision decimal number, represented in Python by a :class:"
"`~decimal.Decimal` instance. Has two **required** arguments:"
msgstr ""
"Десятичное число с фиксированной точностью, представленное объектом  :class:"
"`~decimal.Decimal` Python. Принимает два **обязательных** параметра:"

# b9801849694b463d9a74448b5f4a93e3
#: ../../ref/models/fields.txt:569
msgid ""
"The maximum number of digits allowed in the number. Note that this number "
"must be greater than or equal to ``decimal_places``."
msgstr ""
"Максимальное количество цифр в числе. Заметим, что это число должно быть "
"больше или равно ``decimal_places``."

# 1926a9516f52462b9b715ced195e8251
#: ../../ref/models/fields.txt:574
msgid "The number of decimal places to store with the number."
msgstr "Количество знаков после запятой."

# 4e32207e096e49c29e7577574ed3633c
#: ../../ref/models/fields.txt:576
msgid ""
"For example, to store numbers up to ``999`` with a resolution of 2 decimal "
"places, you'd use::"
msgstr ""
"Например, для хранения числа до ``999`` с двумя знаками после запятой, "
"используйте::"

# 9aca9a3a948f44259a57f69ba3c15981
#: ../../ref/models/fields.txt:581
msgid ""
"And to store numbers up to approximately one billion with a resolution of 10 "
"decimal places::"
msgstr "Для хранения числа до миллиарда и 10 знаков после запятой::"

# 67119680598048e0be2289b889eeac18
#: ../../ref/models/fields.txt:586 ../../ref/models/fields.txt:928
msgid ""
"The default form widget for this field is a :class:`~django.forms."
"NumberInput` when :attr:`~django.forms.Field.localize` is ``False`` or :"
"class:`~django.forms.TextInput` otherwise."
msgstr ""
"Виджет по умолчанию в форме для этого поля - :class:`~django.forms."
"NumberInput`,  если :attr:`~django.forms.Field.localize` равен ``False``, "
"иначе :class:`~django.forms.TextInput`."

# d20e1f8cff3d4abd9f64e5b34dab3e86
#: ../../ref/models/fields.txt:592
msgid ""
"For more information about the differences between the :class:`FloatField` "
"and :class:`DecimalField` classes, please see :ref:`FloatField vs. "
"DecimalField <floatfield_vs_decimalfield>`."
msgstr ""
"Для дополнительной информации о разнице между :class:`FloatField` и :class:"
"`DecimalField`, смотрите раздел :ref:`FloatField vs. DecimalField "
"<floatfield_vs_decimalfield>`."

# 082b945827d14012a2e68d4f99bb07bd
#: ../../ref/models/fields.txt:597
msgid "``DurationField``"
msgstr "``DurationField``"

#: ../../ref/models/fields.txt:601
msgid ""
"A field for storing periods of time - modeled in Python by :class:`~python:"
"datetime.timedelta`. When used on PostgreSQL, the data type used is an "
"``interval`` and on Oracle the data type is ``INTERVAL DAY(9) TO "
"SECOND(6)``. Otherwise a ``bigint`` of microseconds is used."
msgstr ""
"Поля для хранения периодов времени - используется объект Python :class:"
"`~python:datetime.timedelta`. Для PostgreSQL используется тип ``interval``, "
"а в Oracle -- ``INTERVAL DAY(9) TO SECOND(6)``. Иначе используется "
"``bigint``, в котором хранится количество микросекунд."

#: ../../ref/models/fields.txt:608
msgid ""
"Arithmetic with ``DurationField`` works in most cases. However on all "
"databases other than PostgreSQL, comparing the value of a ``DurationField`` "
"to arithmetic on ``DateTimeField`` instances will not work as expected."
msgstr ""
"Арифметика над ``DurationField`` работает в большинстве случаев. Однако, для "
"всех баз данных, кроме PostgreSQL, арифметическое сравнение "
"``DurationField`` и ``DateTimeField`` работает не как ожидается."

# 5643c3c3b85f43c49301e730cb781305
#: ../../ref/models/fields.txt:613
msgid "``EmailField``"
msgstr "``EmailField``"

# db898623fc2a46148f39e94967e3cfd0
#: ../../ref/models/fields.txt:617
msgid ""
"A :class:`CharField` that checks that the value is a valid email address. It "
"uses :class:`~django.core.validators.EmailValidator` to validate the input."
msgstr ""
"Поле :class:`CharField` для хранения правильного email-адреса. Использует :"
"class:`~django.core.validators.EmailValidator` для проверки значения."

# 2f2a524f57904e969789685ccd0efdee
#: ../../ref/models/fields.txt:621
msgid "``FileField``"
msgstr "``FileField``"

# 9b089018e91144c7ae42062df86fb5c7
#: ../../ref/models/fields.txt:625
msgid "A file-upload field."
msgstr "Поле для загрузки файла."

# 6ebc973729c348798c659e7eaf5f06a5
#: ../../ref/models/fields.txt:628
#, fuzzy
msgid ""
"The ``primary_key`` argument isn't supported and will raise a an error if "
"used."
msgstr ""
"``primary_key`` и ``unique`` не принимаются, и вызовут исключение "
"``TypeError`` при использовании."

# f2df786f57d547b39cf855f10e9c4a8a
#: ../../ref/models/fields.txt:631
msgid "Has two optional arguments:"
msgstr "Также принимается два дополнительных параметра:"

#: ../../ref/models/fields.txt:635
msgid ""
"This attribute provides a way of setting the upload directory and file name, "
"and can be set in two ways. In both cases, the value is passed to the :meth:"
"`Storage.save() <django.core.files.storage.Storage.save>` method."
msgstr ""
"Этот атрибут позволяет указать каталог и название файла при его сохранении. "
"Его можно использовать двумя способами. В обоих случаях значение будет "
"передано в метод :meth:`Storage.save() <django.core.files.storage.Storage."
"save>`."

# ffe8dc7d538b48be84193da1edf66984
#: ../../ref/models/fields.txt:639
msgid ""
"If you specify a string value, it may contain :func:`~time.strftime` "
"formatting, which will be replaced by the date/time of the file upload (so "
"that uploaded files don't fill up the given directory). For example::"
msgstr ""
"Поддерживает форматирование :func:`~time.strftime`, которое будет заменено "
"на дату/время загруженного файла (и загружаемые файлы не заполнят один "
"каталог). Например::"

#: ../../ref/models/fields.txt:650
msgid ""
"If you are using the default :class:`~django.core.files.storage."
"FileSystemStorage`, the string value will be appended to your :setting:"
"`MEDIA_ROOT` path to form the location on the local filesystem where "
"uploaded files will be stored. If you are using a different storage, check "
"that storage's documentation to see how it handles ``upload_to``."
msgstr ""
"Если вы используйте бэкенд по умолчанию :class:`~django.core.files.storage."
"FileSystemStorage`, значение будет добавлено к :setting:`MEDIA_ROOT`, чтобы "
"сформировать путь в файловой системе для сохранения файла. Если вы "
"используете другой бэкенд, обратитесь к его документации, чтобы узнать как "
"он обрабатывает ``upload_to``."

# b13e63c3d15c4bda8e1619e28c867f0c
#: ../../ref/models/fields.txt:657
msgid ""
"``upload_to`` may also be a callable, such as a function. This will be "
"called to obtain the upload path, including the filename. This callable must "
"accept two arguments and return a Unix-style path (with forward slashes) to "
"be passed along to the storage system. The two arguments are:"
msgstr ""
"``upload_to`` также принимается вызываемый объект, такой как функция, "
"который будет вызван для получения пути к загруженному файлу, включая имя "
"файла. Вызываемый объект должен принимать два обязательных аргумента, и "
"возвращать путь в стиле Unix (с прямыми слэшами), который будет передан в "
"систему хранения файлов(storage). Два аргумента это:"

# e5a274e5ee6447eb983ed3e7aee124e4
#: ../../ref/models/fields.txt:663
msgid "Argument"
msgstr "Аргумент"

# d19f1390467348f5ae3be0c273b00d06
#: ../../ref/models/fields.txt:663
msgid "Description"
msgstr "Описание"

# f1eaa67b17484094b4180f2b64c88999
#: ../../ref/models/fields.txt:665
msgid "``instance``"
msgstr "``instance``"

# 51d7ea9394724b928722b1b640115e79
#: ../../ref/models/fields.txt:665
msgid ""
"An instance of the model where the ``FileField`` is defined. More "
"specifically, this is the particular instance where the current file is "
"being attached."
msgstr ""
"Экземпляр модели, для которой определено поле ``FileField``. Точнее, это "
"объект, для которого сохраняется текущий файл."

# c840ca02ec9f4d34ab785e49b6729966
#: ../../ref/models/fields.txt:670
msgid ""
"In most cases, this object will not have been saved to the database yet, so "
"if it uses the default ``AutoField``, *it might not yet have a value for its "
"primary key field*."
msgstr ""
"В большинстве случаев объект еще не будет сохранен в базу данных, и при "
"использовании ``AutoField``, *первичный ключ объекта может быть пустым*."

# 08b51c302ebd44e8b45b506d7629c8da
#: ../../ref/models/fields.txt:675
msgid "``filename``"
msgstr "``filename``"

# b3fbea48879148bdaa500977c206519f
#: ../../ref/models/fields.txt:675
msgid ""
"The filename that was originally given to the file. This may or may not be "
"taken into account when determining the final destination path."
msgstr ""
"Оригинальное имя файла. Вы можете его учитывать, или проигнорировать при "
"определении окончательного пути к файлу."

# 0e7f2b72867d45599018565a3073968d
#: ../../ref/models/fields.txt:680 ../../ref/models/fields.txt:1330
msgid "For example::"
msgstr "Например::"

# 79ba275a2ca349e88c2e118052f87601
#: ../../ref/models/fields.txt:691
msgid ""
"A storage object, which handles the storage and retrieval of your files. "
"See :doc:`/topics/files` for details on how to provide this object."
msgstr ""
"Объект \"storage\", который отвечает за хранение и получение файлов. "
"Смотрите :doc:`/topics/files` для подробной информации."

# a2c46f513a22423a9b4bb537b35fe226
#: ../../ref/models/fields.txt:694 ../../ref/models/fields.txt:975
msgid ""
"The default form widget for this field is a :class:`~django.forms."
"ClearableFileInput`."
msgstr ""
"Виджет форма для этого поля - :class:`~django.forms.ClearableFileInput`."

# 0644b76ce62441aaa7f0cd15a92c9a27
#: ../../ref/models/fields.txt:697
msgid ""
"Using a :class:`FileField` or an :class:`ImageField` (see below) in a model "
"takes a few steps:"
msgstr ""
"Использование :class:`FileField` или :class:`ImageField` (смотрите ниже) "
"требует некоторых дополнительных действий:"

# a6795ee231464a619bf58d72ce463600
#: ../../ref/models/fields.txt:700
msgid ""
"In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the "
"full path to a directory where you'd like Django to store uploaded files. "
"(For performance, these files are not stored in the database.) Define :"
"setting:`MEDIA_URL` as the base public URL of that directory. Make sure that "
"this directory is writable by the Web server's user account."
msgstr ""
"В файле настроек необходимо определить :setting:`MEDIA_ROOT`, как полный "
"путь к каталогу, куда Django должен сохранять файлы. (Для повышения "
"производительности файлы не хранятся в базе данных.) Определить :setting:"
"`MEDIA_URL`, который является URL-ом к этому каталогу и используется для "
"создания URL-а к файлу. Убедитесь, что пользователь, от которого работает "
"сервер, имеет права записи в этот каталог."

# 7e466f2d372b4bc295d8ef8ca77cd635
#: ../../ref/models/fields.txt:706
msgid ""
"Add the :class:`FileField` or :class:`ImageField` to your model, defining "
"the :attr:`~FileField.upload_to` option to specify a subdirectory of :"
"setting:`MEDIA_ROOT` to use for uploaded files."
msgstr ""
"Добавьте :class:`FileField` или :class:`ImageField` к модели, определите :"
"attr:`~FileField.upload_to`, чтобы указать Django в каком подкаталоге в :"
"setting:`MEDIA_ROOT` должны быть сохранены файлы."

# 2b93b64f17ef4548b5a447c10fb61f18
#: ../../ref/models/fields.txt:710
msgid ""
"All that will be stored in your database is a path to the file (relative to :"
"setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:"
"`~django.db.models.fields.files.FieldFile.url` attribute provided by Django. "
"For example, if your :class:`ImageField` is called ``mug_shot``, you can get "
"the absolute path to your image in a template with ``{{ object.mug_shot."
"url }}``."
msgstr ""
"Все, что будет сохранено в базе данных, это путь к файлу (относительно :"
"setting:`MEDIA_ROOT`). Скорее всего вы будете использовать :attr:`~django.db."
"models.fields.files.FieldFile.url` предоставленную Django. Например, если :"
"class:`ImageField` назван ``mug_shot``, вы можете получить URL к файлу в "
"шаблоне используя ``{{ object.mug_shot.url }}``."

# 3755e07f631d4b4a83e71bba8133d25e
#: ../../ref/models/fields.txt:717
msgid ""
"For example, say your :setting:`MEDIA_ROOT` is set to ``'/home/media'``, "
"and :attr:`~FileField.upload_to` is set to ``'photos/%Y/%m/%d'``. The ``'%Y/"
"%m/%d'`` part of :attr:`~FileField.upload_to` is :func:`~time.strftime` "
"formatting; ``'%Y'`` is the four-digit year, ``'%m'`` is the two-digit month "
"and ``'%d'`` is the two-digit day. If you upload a file on Jan. 15, 2007, it "
"will be saved in the directory ``/home/media/photos/2007/01/15``."
msgstr ""
"Например, :setting:`MEDIA_ROOT` равен ``'/home/media'``, и :attr:`~FileField."
"upload_to` равен ``'photos/%Y/%m/%d'``. ``'%Y/%m/%d'`` часть параметра :attr:"
"`~FileField.upload_to` это форматирование :func:`~time.strftime`; ``'%Y'`` "
"-- год из 4-х цифр, ``'%m'`` -- номер месяца из 2-х цифр и ``'%d'`` -- число "
"месяца из 2-х цифр. Если вы загрузили файл 15 января 2007, он будет сохранен "
"в каталоге ``/home/media/photos/2007/01/15``."

# 24a7aff69f894620bc484c8f0c57a76e
#: ../../ref/models/fields.txt:724
msgid ""
"If you wanted to retrieve the uploaded file's on-disk filename, or the "
"file's size, you could use the :attr:`~django.core.files.File.name` and :"
"attr:`~django.core.files.File.size` attributes respectively; for more "
"information on the available attributes and methods, see the :class:`~django."
"core.files.File` class reference and the :doc:`/topics/files` topic guide."
msgstr ""
"Если вам нужны название файла или его размер, используйте атрибуты :attr:"
"`~django.core.files.File.name` и :attr:`~django.core.files.File.size` "
"соответственно; больше информации о доступных методах и атрибутах вы найдете "
"в справке о :class:`~django.core.files.File` и разделе документации :doc:`/"
"topics/files`."

# 331bc9a31d734743b73ab865cccd49a2
#: ../../ref/models/fields.txt:732
msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""
"Процесс сохранения файла -- часть процесса сохранения объекта, таким образом "
"имя файла, сохраненного на диске, не будет доступно, пока объект не будет "
"сохранен."

# 75e79999d24a4aabb4fffc2e9efbbe94
#: ../../ref/models/fields.txt:736
msgid ""
"The uploaded file's relative URL can be obtained using the :attr:`~django.db."
"models.fields.files.FieldFile.url` attribute. Internally, this calls the :"
"meth:`~django.core.files.storage.Storage.url` method of the underlying :"
"class:`~django.core.files.storage.Storage` class."
msgstr ""
"Чтобы получить URL к загруженному файлу, используйте атрибут :attr:`~django."
"db.models.fields.files.FieldFile.url`. При этом будет вызван метод :meth:"
"`~django.core.files.storage.Storage.url` класса :class:`~django.core.files."
"storage.Storage`."

# 4f30fb5c203440dd95125ae0c5fa2206
#: ../../ref/models/fields.txt:743
msgid ""
"Note that whenever you deal with uploaded files, you should pay close "
"attention to where you're uploading them and what type of files they are, to "
"avoid security holes. *Validate all uploaded files* so that you're sure the "
"files are what you think they are. For example, if you blindly let somebody "
"upload files, without validation, to a directory that's within your Web "
"server's document root, then somebody could upload a CGI or PHP script and "
"execute that script by visiting its URL on your site. Don't allow that."
msgstr ""
"Заметим, что при загрузке файлов, вы должны обращать внимание, куда вы "
"загружаете файлы и какие типы файлов загружаются, чтобы предотвратить "
"возможные уязвимости в защите системы. *Проверяйте все загружаемые файлы*. "
"Например, если вы разрешите загрузить файл без проверки в каталог, который "
"обрабатывается сервером, кто-нибудь сможет загрузить CGI или PHP скрипт и "
"выполнить его, посетив его URL на вашем сайте. Не допускайте это."

# 82d3e19145f149e1ba0b68d7a1b9bc17
#: ../../ref/models/fields.txt:751
msgid ""
"Also note that even an uploaded HTML file, since it can be executed by the "
"browser (though not by the server), can pose security threats that are "
"equivalent to XSS or CSRF attacks."
msgstr ""
"Также заметим что это относится и к HTML файлам, так как они могу быть "
"выполнены в браузере(хоть и не на сервере), и нести угрозу XSS или CSRF "
"атаки."

# 62509adbe0414b92b2aae736e8e5cb68
#: ../../ref/models/fields.txt:755
msgid ""
":class:`FileField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
"По-умолчанию, экземпляр :class:`FileField` создается как колонка ``varchar`` "
"в базе данных. Как и с другими полями, вы можете изменить максимальную "
"длину, используя аргумент :attr:`~CharField.max_length`."

# d0fba97f8c144d3fbc44c789f00b1f70
#: ../../ref/models/fields.txt:760
#, fuzzy
msgid "``FileField`` and ``FieldFile``"
msgstr "FileField и FieldFile"

# 1652b28e48d24256abde753aa031246b
#: ../../ref/models/fields.txt:766
#, fuzzy
msgid ""
"When you access a :class:`~django.db.models.FileField` on a model, you are "
"given an instance of :class:`FieldFile` as a proxy for accessing the "
"underlying file."
msgstr ""
"При доступе к :class:`~django.db.models.FileField` модели, вы получаете "
"экземпляр :class:`FieldFile` как \"proxy\" для работы с файлом. Этот класс "
"содержит несколько дополнительных атрибутов и методов для работы с файлом, "
"кроме унаследованных от :class:`django.core.files.File`:"

#: ../../ref/models/fields.txt:770
msgid ""
"The API of :class:`FieldFile` mirrors that of :class:`~django.core.files."
"File`, with one key difference: *The object wrapped by the class is not "
"necessarily a wrapper around Python's built-in file object.* Instead, it is "
"a wrapper around the result of the :attr:`Storage.open()<django.core.files."
"storage.Storage.open>` method, which may be a :class:`~django.core.files."
"File` object, or it may be a custom storage's implementation of the :class:"
"`~django.core.files.File` API."
msgstr ""

#: ../../ref/models/fields.txt:777
msgid ""
"In addition to the API inherited from :class:`~django.core.files.File` such "
"as :meth:`~django.core.files.File.read` and :meth:`~django.core.files.File."
"write`, :class:`FieldFile` includes several methods that can be used to "
"interact with the underlying file:"
msgstr ""

#: ../../ref/models/fields.txt:784
msgid ""
"Two methods of this class, :meth:`~FieldFile.save` and :meth:`~FieldFile."
"delete`, default to saving the model object of the associated ``FieldFile`` "
"in the database."
msgstr ""

#: ../../ref/models/fields.txt:790
msgid ""
"The name of the file including the relative path from the root of the :class:"
"`~django.core.files.storage.Storage` of the associated :class:`~django.db."
"models.FileField`."
msgstr ""

#: ../../ref/models/fields.txt:796
msgid ""
"The result of the underlying :attr:`Storage.size() <django.core.files."
"storage.Storage.size>` method."
msgstr ""

# 75e79999d24a4aabb4fffc2e9efbbe94
#: ../../ref/models/fields.txt:801
msgid ""
"A read-only property to access the file's relative URL by calling the :meth:"
"`~django.core.files.storage.Storage.url` method of the underlying :class:"
"`~django.core.files.storage.Storage` class."
msgstr ""
"read-only свойство для получения URL вызовом метода :meth:`~django.core."
"files.storage.Storage.url` класса :class:`~django.core.files.storage."
"Storage`."

#: ../../ref/models/fields.txt:807
msgid ""
"Opens or reopens the file associated with this instance in the specified "
"``mode``. Unlike the standard Python ``open()`` method, it doesn't return a "
"file descriptor."
msgstr ""

#: ../../ref/models/fields.txt:811
msgid ""
"Since the underlying file is opened implicitly when accessing it, it may be "
"unnecessary to call this method except to reset the pointer to the "
"underlying file or to change the ``mode``."
msgstr ""

# e2375f94a807447f9bbb555003b817b2
#: ../../ref/models/fields.txt:817
msgid ""
"Behaves like the standard Python ``file.close()`` method and closes the file "
"associated with this instance."
msgstr ""
"Работает так же как и метод ``file.close()`` в Python  и закрывает файл "
"связанный с объектом."

# 9461704bb51d499b89e444fb66f14211
#: ../../ref/models/fields.txt:822
msgid ""
"This method takes a filename and file contents and passes them to the "
"storage class for the field, then associates the stored file with the model "
"field. If you want to manually associate file data with :class:`~django.db."
"models.FileField` instances on your model, the ``save()`` method is used to "
"persist that file data."
msgstr ""
"Этот метод принимает имя файла и содержимое и передает его в экземпляр "
"класса \"storage\" этого поля, потом добавляет файл в модель. Если вы хотите "
"самостоятельно добавить содержимое файла в поле :class:`~django.db.models."
"FileField` вашей модели, метод ``save()`` то, что вам нужно."

# f875b0b4104c4415a1f0ddcacf846357
#: ../../ref/models/fields.txt:828
msgid ""
"Takes two required arguments: ``name`` which is the name of the file, and "
"``content`` which is an object containing the file's contents.  The optional "
"``save`` argument controls whether or not the model instance is saved after "
"the file associated with this field has been altered. Defaults to ``True``."
msgstr ""
"Принимает два аргумента: ``name`` -- название файла, и ``content`` -- "
"содержимое файла.  Дополнительный аргумент ``save`` указывает сохранять ли "
"объект после изменения поля. По-умолчанию ``True``."

# 5a35a656cac94d348b007fda814f4b32
#: ../../ref/models/fields.txt:834
msgid ""
"Note that the ``content`` argument should be an instance of :class:`django."
"core.files.File`, not Python's built-in file object. You can construct a :"
"class:`~django.core.files.File` from an existing Python file object like "
"this::"
msgstr ""
"Заметим, что аргумент ``content`` должен быть экземпляром :class:`django."
"core.files.File`, а не встроенный объект файла в Python. Вы можете создать "
"объект :class:`~django.core.files.File` из существующего объекта файла "
"Python::"

# 42648af5e1344238a58edab90f87bdb7
#: ../../ref/models/fields.txt:844
msgid "Or you can construct one from a Python string like this::"
msgstr "Или же создать из строки с содержимым файла::"

# 55163e17c41e43fcaba376b95531e153
#: ../../ref/models/fields.txt:849
msgid "For more information, see :doc:`/topics/files`."
msgstr "Подробности в :doc:`/topics/files`."

# db96c77494b542b3b68ff09250e383c3
#: ../../ref/models/fields.txt:853
msgid ""
"Deletes the file associated with this instance and clears all attributes on "
"the field. Note: This method will close the file if it happens to be open "
"when ``delete()`` is called."
msgstr ""
"Удаляет файл связанный с объектом и очищает все атрибуты поля. Заметка: этот "
"метод закрывает файл, если он был открыт во время вызова ``delete()``."

# 65dfde837435447191e53893a216728b
#: ../../ref/models/fields.txt:857
msgid ""
"The optional ``save`` argument controls whether or not the model instance is "
"saved after the file associated with this field has been deleted. Defaults "
"to ``True``."
msgstr ""
"Дополнительный аргумент ``save`` указывает сохранять ли модель после "
"удаления файла. По-умолчанию ``True``."

# 5038e28aafea4691b6a7246d7217384b
#: ../../ref/models/fields.txt:861
msgid ""
"Note that when a model is deleted, related files are not deleted. If you "
"need to cleanup orphaned files, you'll need to handle it yourself (for "
"instance, with a custom management command that can be run manually or "
"scheduled to run periodically via e.g. cron)."
msgstr ""
"Обратите внимание, когда объект модели удаляется, связанные файлы не "
"удаляются. Если вам необходимо удалять их, делайте это самостоятельно "
"(например, используя команду, запущенную через cron)."

# 385fd41490fb49c880e3f92d620bab25
#: ../../ref/models/fields.txt:869
msgid "``FilePathField``"
msgstr "``FilePathField``"

# 0585d29386c94d5ba1bf44d9f508d210
#: ../../ref/models/fields.txt:873
msgid ""
"A :class:`CharField` whose choices are limited to the filenames in a certain "
"directory on the filesystem. Has three special arguments, of which the first "
"is **required**:"
msgstr ""
"Поле :class:`CharField` значение которого ограничено именем файла из "
"определенного каталога. Принимает три дополнительных аргумента, первый из "
"них **обязателен**:"

# 87ebbe7c341b437da3babc01bf72b52c
#: ../../ref/models/fields.txt:879
msgid ""
"Required. The absolute filesystem path to a directory from which this :class:"
"`FilePathField` should get its choices. Example: ``\"/home/images\"``."
msgstr ""
"Обязательно. Абсолютный путь к каталогу, из которого :class:`FilePathField` "
"принимает значение. Например: ``\"/home/images\"``."

# 07530c2dcfef4f08802d4940560059b5
#: ../../ref/models/fields.txt:884
msgid ""
"Optional. A regular expression, as a string, that :class:`FilePathField` "
"will use to filter filenames. Note that the regex will be applied to the "
"base filename, not the full path. Example: ``\"foo.*\\.txt$\"``, which will "
"match a file called ``foo23.txt`` but not ``bar.txt`` or ``foo23.png``."
msgstr ""
"Необязательный. Регулярное выражение как строка, которое :class:"
"`FilePathField` использует как фильтр названий. Регулярное выражение "
"применяется к названию файла, а не к полному пути. Например: ``\"foo.*\\.txt$"
"\"``, соответствует ``foo23.txt`` но отфильтрует ``bar.txt`` или ``foo23."
"gif``."

# 5421eb38402143589395bf27d57d672c
#: ../../ref/models/fields.txt:891
msgid ""
"Optional. Either ``True`` or ``False``. Default is ``False``. Specifies "
"whether all subdirectories of :attr:`~FilePathField.path` should be included"
msgstr ""
"Необязательный. Принимает ``True`` или ``False``. По-умолчанию ``False``. "
"Определяет, должны ли быть включены подкаталоги :attr:`~FilePathField.path`."

# 5421eb38402143589395bf27d57d672c
#: ../../ref/models/fields.txt:896
msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies "
"whether files in the specified location should be included.  Either this or :"
"attr:`~FilePathField.allow_folders` must be ``True``."
msgstr ""
"Необязательный. Принимает ``True`` или ``False``. По-умолчанию ``True``. "
"Определяет, должны ли быть включены указанные подкаталоги. Этот параметр "
"или :attr:`~FilePathField.allow_folders` должен быть ``True``."

# 5421eb38402143589395bf27d57d672c
#: ../../ref/models/fields.txt:902
msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies "
"whether folders in the specified location should be included.  Either this "
"or :attr:`~FilePathField.allow_files` must be ``True``."
msgstr ""
"Необязательный. Принимает ``True`` или ``False``. По-умолчанию ``False``. "
"Определяет, должны ли быть включены указанные подкаталоги. Этот параметр "
"или :attr:`~FilePathField.allow_files` должен быть ``True``."

# f874b74b1b98491c86ceda74f32a799b
#: ../../ref/models/fields.txt:906
msgid "Of course, these arguments can be used together."
msgstr "Конечно же можно использовать все аргумента вместе."

# 1f2f5a551ea44eb1a6f3e279a0b38fab
#: ../../ref/models/fields.txt:908
msgid ""
"The one potential gotcha is that :attr:`~FilePathField.match` applies to the "
"base filename, not the full path. So, this example::"
msgstr ""
"Следует помнить, что :attr:`~FilePathField.match` применяется к имени файла, "
"а не абсолютному пути. Таким образом::"

# f17ceaa13f8f488185382de87d36d775
#: ../../ref/models/fields.txt:913
msgid ""
"...will match ``/home/images/foo.png`` but not ``/home/images/foo/bar.png`` "
"because the :attr:`~FilePathField.match` applies to the base filename (``foo."
"png`` and ``bar.png``)."
msgstr ""
"...распознает ``/home/images/foo.png``, но не ``/home/images/foo/bar.png``, "
"т.к. :attr:`~FilePathField.match` применяется к имени файла (``foo.png`` и "
"``bar.png``)."

# 2262ca133bee441584b0eece2e4a35a2
#: ../../ref/models/fields.txt:917
msgid ""
":class:`FilePathField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
"По-умолчанию, экземпляр :class:`FilePathField` создается как колонка "
"``varchar`` в базе данных с максимальной длинной по умолчанию 100 символов. "
"Как и с другими полями, вы можете изменить максимальную длину, используя "
"аргумент :attr:`~CharField.max_length`."

# 0d4b75c208d1453698b1f5da20114b1f
#: ../../ref/models/fields.txt:922
msgid "``FloatField``"
msgstr "``FloatField``"

# 0ff04ae1624148f0a2e3ca4e3f6cfa7e
#: ../../ref/models/fields.txt:926
msgid "A floating-point number represented in Python by a ``float`` instance."
msgstr "Число с плавающей точкой представленное объектом ``float``."

# a845530191a544dcb5ba3624790feb2d
#: ../../ref/models/fields.txt:934
msgid "``FloatField`` vs. ``DecimalField``"
msgstr "``FloatField`` или ``DecimalField``"

# 1a919f175dce4b58bae1e6ab899292b9
#: ../../ref/models/fields.txt:936
msgid ""
"The :class:`FloatField` class is sometimes mixed up with the :class:"
"`DecimalField` class. Although they both represent real numbers, they "
"represent those numbers differently. ``FloatField`` uses Python's ``float`` "
"type internally, while ``DecimalField`` uses Python's ``Decimal`` type. For "
"information on the difference between the two, see Python's documentation "
"for the :mod:`decimal` module."
msgstr ""
":class:`FloatField` иногда путают с :class:`DecimalField`. Хоть оба и "
"представляют вещественные числа, они делают это по разному. ``FloatField`` "
"использует тип ``float`` в Python, в то время как ``DecimalField`` "
"использует тип ``Decimal``. Подробности смотрите в документации  Python "
"модуля :mod:`decimal`."

# 468c1c14b7904a12b113fc543eeb7ac1
#: ../../ref/models/fields.txt:944
msgid "``ImageField``"
msgstr "``ImageField``"

# 3ec80fb0e2db41f083e3b6b0e83057eb
#: ../../ref/models/fields.txt:948
msgid ""
"Inherits all attributes and methods from :class:`FileField`, but also "
"validates that the uploaded object is a valid image."
msgstr ""
"Наследует все атрибуты и методы поля :class:`FileField`, но также проверяет "
"является ли загруженный файл изображением."

# 9639abfecb544310851a7d1cdc2d0c6a
#: ../../ref/models/fields.txt:951
msgid ""
"In addition to the special attributes that are available for :class:"
"`FileField`, an :class:`ImageField` also has ``height`` and ``width`` "
"attributes."
msgstr ""
"В дополнение к атрибутам поля :class:`FileField` :class:`ImageField` "
"содержит также ``height`` и ``width``."

# 10b8eef0943a4a728b3c189dea293653
#: ../../ref/models/fields.txt:954
msgid ""
"To facilitate querying on those attributes, :class:`ImageField` has two "
"extra optional arguments:"
msgstr ""
"Для определения этих аргументов :class:`ImageField` принимает дополнительные "
"аргументы:"

# 85ea5105c062407585681b79c585f52c
#: ../../ref/models/fields.txt:959
msgid ""
"Name of a model field which will be auto-populated with the height of the "
"image each time the model instance is saved."
msgstr ""
"Имя поля, которому автоматически будет присвоено значение высоты изображения "
"при каждом сохранении объекта."

# c661f625e1ac4d8c8fac23c59cac1992
#: ../../ref/models/fields.txt:964
msgid ""
"Name of a model field which will be auto-populated with the width of the "
"image each time the model instance is saved."
msgstr ""
"Имя поля, которому автоматически будет присвоено значение ширины изображения "
"при каждом сохранении объекта."

# 8f8a360c12304295a8be9d4c944007fb
#: ../../ref/models/fields.txt:967
msgid "Requires the `Pillow`_ library."
msgstr "Требуется библиотека `Pillow`_."

# 693103d12f804a60afad1589f7412835
#: ../../ref/models/fields.txt:971
msgid ""
":class:`ImageField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
"По-умолчанию, экземпляр :class:`ImageField` создается как колонка "
"``varchar`` в базе данных. Как и с другими полями вы можете изменить "
"максимальную длину используя аргумент :attr:`~CharField.max_length`."

# bfd201dcf2f849ea938d4b5ed07c459f
#: ../../ref/models/fields.txt:979
msgid "``IntegerField``"
msgstr "``IntegerField``"

# 8ff59a1ad1714952be0166a7b1267e7c
#: ../../ref/models/fields.txt:983
msgid ""
"An integer. Values from ``-2147483648`` to ``2147483647`` are safe in all "
"databases supported by Django. The default form widget for this field is a :"
"class:`~django.forms.NumberInput` when :attr:`~django.forms.Field.localize` "
"is ``False`` or :class:`~django.forms.TextInput` otherwise."
msgstr ""
"Число. Значение от ``-2147483648`` до ``2147483647`` для всех поддерживаемых "
"баз данных Django. Форма использует виджет :class:`~django.forms."
"NumberInput` при :attr:`~django.forms.Field.localize` равном ``False``, "
"иначе :class:`~django.forms.TextInput`."

# 10efef2ebb6146259b432f82eea2a6ce
#: ../../ref/models/fields.txt:989
msgid "``GenericIPAddressField``"
msgstr "``GenericIPAddressField``"

# 9e28b938238a4ccbabfb06fd1019df22
#: ../../ref/models/fields.txt:993
msgid ""
"An IPv4 or IPv6 address, in string format (e.g. ``192.0.2.30`` or "
"``2a02:42fe::4``). The default form widget for this field is a :class:"
"`~django.forms.TextInput`."
msgstr ""
"Адрес IPv4 или IPv6 в виде строки (например, ``192.0.2.30`` или "
"``2a02:42fe::4``). Форма использует виджет :class:`~django.forms.TextInput`."

# 8f11f506da0f4f1bacec1998c5c225a3
#: ../../ref/models/fields.txt:997
msgid ""
"The IPv6 address normalization follows :rfc:`4291#section-2.2` section 2.2, "
"including using the IPv4 format suggested in paragraph 3 of that section, "
"like ``::ffff:192.0.2.0``. For example, ``2001:0::0:01`` would be normalized "
"to ``2001::1``, and ``::ffff:0a0a:0a0a`` to ``::ffff:10.10.10.10``. All "
"characters are converted to lowercase."
msgstr ""
"Преобразование адреса IPv6 происходит в соответствии с :rfc:"
"`4291#section-2.2` раздел 2.2, включая рекомендации по форматированию IPv4 в "
"параграфа 3 этого раздела, таких как ``::ffff:192.0.2.0``. Например, "
"``2001:0::0:01`` будет преобразован ``2001::1``, а ``::ffff:0a0a:0a0a`` в "
"``::ffff:10.10.10.10``. Все символы будут преобразованы в нижний регистр."

# 0083f498c8b8437ebd28a6d107af6468
#: ../../ref/models/fields.txt:1005
msgid ""
"Limits valid inputs to the specified protocol. Accepted values are "
"``'both'`` (default), ``'IPv4'`` or ``'IPv6'``. Matching is case insensitive."
msgstr ""
"Определяет формат IP адреса. Принимает значение ``'both'`` (по умолчанию), "
"``'IPv4'`` или ``'IPv6'``. Значение не чувствительно регистру."

# 05daf697f56548e3a921c39c24c664a4
#: ../../ref/models/fields.txt:1011
msgid ""
"Unpacks IPv4 mapped addresses like ``::ffff:192.0.2.1``. If this option is "
"enabled that address would be unpacked to ``192.0.2.1``. Default is "
"disabled. Can only be used when ``protocol`` is set to ``'both'``."
msgstr ""
"Преобразует адрес IPv4. Если эта опция установлена, адрес ``::"
"ffff::192.0.2.1`` будет преобразован в ``192.0.2.1``. По-умолчанию "
"отключена. Может быть использовано, если ``protocol`` установлен в "
"``'both'``."

# e96a645dc4fa49238ea4026ef9ef740c
#: ../../ref/models/fields.txt:1016
msgid ""
"If you allow for blank values, you have to allow for null values since blank "
"values are stored as null."
msgstr ""
"Если вы разрешили пустые значение, необходимо также разрешить ``null`` т.к. "
"пустые значения сохраняются как ``null``."

# 6606f41ad49146eaa1940d1640714d49
#: ../../ref/models/fields.txt:1020
msgid "``NullBooleanField``"
msgstr "``NullBooleanField``"

# 7a370dcd7f804de19fa3cd2daf834398
#: ../../ref/models/fields.txt:1024
msgid ""
"Like a :class:`BooleanField`, but allows ``NULL`` as one of the options. Use "
"this instead of a :class:`BooleanField` with ``null=True``. The default form "
"widget for this field is a :class:`~django.forms.NullBooleanSelect`."
msgstr ""
"Как и :class:`BooleanField`, но принимает значение ``NULL``. Используете его "
"вместо :class:`BooleanField` с ``null=True``. Форма использует виджет :class:"
"`~django.forms.NullBooleanSelect`."

# 230cf89377a14151bd8eeedfc5299dac
#: ../../ref/models/fields.txt:1029
msgid "``PositiveIntegerField``"
msgstr "``PositiveIntegerField``"

# 4068d3aefae14d06afca8debfa591e7c
#: ../../ref/models/fields.txt:1033
msgid ""
"Like an :class:`IntegerField`, but must be either positive or zero (``0``). "
"Values from ``0`` to ``2147483647`` are safe in all databases supported by "
"Django. The value ``0`` is accepted for backward compatibility reasons."
msgstr ""
"Как и поле :class:`IntegerField`, но значение должно быть больше или равно "
"нулю (`0`). Можно использовать значение от ``0`` до ``2147483647``. Значение "
"`0` принимается для обратной совместимости."

# 8aeb8e6539d3496fb8386a1d98e107be
#: ../../ref/models/fields.txt:1038
msgid "``PositiveSmallIntegerField``"
msgstr "``PositiveSmallIntegerField``"

# 45c7cd2886f148ffa8bd561ab732e191
#: ../../ref/models/fields.txt:1042
msgid ""
"Like a :class:`PositiveIntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``0`` to ``32767`` are safe in all "
"databases supported by Django."
msgstr ""
"Как и поле :class:`PositiveIntegerField`, но принимает значения в "
"определенном диапазоне(зависит от типа базы данных). Для баз данных "
"поддерживаемых Django можно использовать значения от ``0`` до ``32767``."

# 528a021487b44adba07404ac592151b9
#: ../../ref/models/fields.txt:1047
msgid "``SlugField``"
msgstr "``SlugField``"

# 1614324341bc4c67b2bb5e4cde36f595
#: ../../ref/models/fields.txt:1051
msgid ""
":term:`Slug` is a newspaper term. A slug is a short label for something, "
"containing only letters, numbers, underscores or hyphens. They're generally "
"used in URLs."
msgstr ""
":term:`Slug` -- газетный термин. \"Slug\" -- это короткое название-метка, "
"которое содержит только буквы, числа, подчеркивание или дефис. В основном "
"используются в URL."

# db6c0ab23a6e4de5acb87c5682e734ec
#: ../../ref/models/fields.txt:1055
msgid ""
"Like a CharField, you can specify :attr:`~CharField.max_length` (read the "
"note about database portability and :attr:`~CharField.max_length` in that "
"section, too). If :attr:`~CharField.max_length` is not specified, Django "
"will use a default length of 50."
msgstr ""
"Как и для ``CharField``, можно указать :attr:`~CharField.max_length` "
"(упомянутые особенности работы с различными типами баз данных актуальны). "
"Если :attr:`~CharField.max_length` не указан, Django будет использовать "
"значение 50."

# 8c5fbaf0c4b742e39ceb1cf2887dfb18
#: ../../ref/models/fields.txt:1060
msgid "Implies setting :attr:`Field.db_index` to ``True``."
msgstr ""
"Устанавливает :attr:`Field.db_index` в ``True``, если аргумент явно не "
"указан."

# b38d4980701c47beaa8beabae7d8214a
#: ../../ref/models/fields.txt:1062
msgid ""
"It is often useful to automatically prepopulate a SlugField based on the "
"value of some other value.  You can do this automatically in the admin "
"using :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`."
msgstr ""
"Обычно значение SlugField создается на основе какого-то другого "
"значения(например, название статьи). Это может работать автоматически в "
"интерфейсе администрации благодаря параметру :attr:`~django.contrib.admin."
"ModelAdmin.prepopulated_fields`."

# 6b8cd9cf2523413cb14648f334c6a2b6
#: ../../ref/models/fields.txt:1068
msgid ""
"If ``True``, the field accepts Unicode letters in addition to ASCII letters. "
"Defaults to ``False``."
msgstr ""
"При ``True`` поле может принимать Unicode символы кроме ASCII. Значение по "
"умолчанию -- ``False``."

# c96a689127ac4b0aa63cccadb6f38ea2
#: ../../ref/models/fields.txt:1072
msgid "``SmallIntegerField``"
msgstr "``SmallIntegerField``"

# 8f4d2afa4d564e20bac96947ab99aa55
#: ../../ref/models/fields.txt:1076
msgid ""
"Like an :class:`IntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``-32768`` to ``32767`` are safe in "
"all databases supported by Django."
msgstr ""
"Как и поле :class:`IntegerField`, но принимает значения в определенном "
"диапазоне(зависит от типа базы данных). Для баз данных поддерживаемых Django "
"можно использовать значения от ``-32768`` до ``32767``."

# 7e9ffe6139cf4afb91b92e2de31373ab
#: ../../ref/models/fields.txt:1081
msgid "``TextField``"
msgstr "``TextField``"

# 1db7d2c5db7a48b5bebc5b6759ba332c
#: ../../ref/models/fields.txt:1085
msgid ""
"A large text field. The default form widget for this field is a :class:"
"`~django.forms.Textarea`."
msgstr ""
"Большое текстовое поле. Форма использует виджет :class:`~django.forms."
"Textarea`."

# 94fd7c014e1f44c58cc73673a280c072
#: ../../ref/models/fields.txt:1088
msgid ""
"If you specify a ``max_length`` attribute, it will be reflected in the :"
"class:`~django.forms.Textarea` widget of the auto-generated form field. "
"However it is not enforced at the model or database level. Use a :class:"
"`CharField` for that."
msgstr ""
"Если указать атрибут ``max_length``, это повлияет на поле, создаваемое "
"виджетом :class:`~django.forms.Textarea`. Но не учитывается на уровне модели "
"или базы данных. Для этого используйте :class:`CharField`."

# 4c7cf6a35a414a7780a52d9b3c2739ef
#: ../../ref/models/fields.txt:1094
msgid "``TimeField``"
msgstr "``TimeField``"

# ff4c3ad454724348a3a62310a8799add
#: ../../ref/models/fields.txt:1098
msgid ""
"A time, represented in Python by a ``datetime.time`` instance. Accepts the "
"same auto-population options as :class:`DateField`."
msgstr ""
"Время, представленное объектом ``datetime.time`` Python. Принимает те же "
"аргументы, что и :class:`DateField`."

# a7638b00dcb44a02b5863c4d4ef05846
#: ../../ref/models/fields.txt:1101
msgid ""
"The default form widget for this field is a :class:`~django.forms."
"TextInput`. The admin adds some JavaScript shortcuts."
msgstr ""
"Форма использует виджет :class:`~django.forms.TextInput`. Интерфейс "
"администратора также использует немного JavaScript. "

# 74494961615e41c9989f9e307c7d82af
#: ../../ref/models/fields.txt:1105
msgid "``URLField``"
msgstr "``URLField``"

# 2d93325aec6141b6a4743fda17f75170
#: ../../ref/models/fields.txt:1109
msgid "A :class:`CharField` for a URL."
msgstr "Поле :class:`CharField` для URL."

# c068c988bff24970967a42210d75a0d7
#: ../../ref/models/fields.txt:1113
msgid ""
"Like all :class:`CharField` subclasses, :class:`URLField` takes the "
"optional :attr:`~CharField.max_length` argument. If you don't specify :attr:"
"`~CharField.max_length`, a default of 200 is used."
msgstr ""
"Как подкласс :class:`CharField` :class:`URLField` принимает необязательный "
"аргумент :attr:`~CharField.max_length`. Если вы не укажите :attr:`~CharField."
"max_length`, будет использовано значение -- 200."

# 74494961615e41c9989f9e307c7d82af
#: ../../ref/models/fields.txt:1118
msgid "``UUIDField``"
msgstr "``UUIDField``"

#: ../../ref/models/fields.txt:1122
msgid ""
"A field for storing universally unique identifiers. Uses Python's :class:"
"`~python:uuid.UUID` class. When used on PostgreSQL, this stores in a "
"``uuid`` datatype, otherwise in a ``char(32)``."
msgstr ""
"Поля для сохранения UUID. Использует класс Python :class:`~python:uuid."
"UUID`. Для PostgreSQL используется тип ``uuid``, иначе ``char(32)``."

#: ../../ref/models/fields.txt:1126
msgid ""
"Universally unique identifiers are a good alternative to :class:`AutoField` "
"for :attr:`~Field.primary_key`. The database will not generate the UUID for "
"you, so it is recommended to use :attr:`~Field.default`::"
msgstr ""
"UUID является хорошей альтернативой :class:`AutoField` с :attr:`~Field."
"primary_key`. База данных не сгенерирует UUID за вас, по этому следует "
"использовать :attr:`~Field.default`::"

#: ../../ref/models/fields.txt:1137
msgid ""
"Note that a callable (with the parentheses omitted) is passed to "
"``default``, not an instance of ``UUID``."
msgstr ""
"Обратите внимание, указана функция (без скобок) в ``default``, а не объект "
"``UUID``."

# b2d5ca194bdb4413a0fbd07f0c7a8e7a
#: ../../ref/models/fields.txt:1141
msgid "Relationship fields"
msgstr "Поля отношений"

# d23c120ec8db4e33b3c52534445f0ed2
#: ../../ref/models/fields.txt:1148
msgid "Django also defines a set of fields that represent relations."
msgstr ""
"Django предоставляет набор полей для определения связей между моделями."

# ee73d6cc498c49ee95019db656bf6e07
#: ../../ref/models/fields.txt:1153
msgid "``ForeignKey``"
msgstr "``ForeignKey``"

# d0089dc5c247434dbf435d7eae829b45
#: ../../ref/models/fields.txt:1157
msgid ""
"A many-to-one relationship. Requires a positional argument: the class to "
"which the model is related."
msgstr ""
"Связь многое-к-одному. Принимает позиционный аргумент: класс связанной "
"модели."

# e8c653b65641489986a454054ebbfc2a
#: ../../ref/models/fields.txt:1162
msgid ""
"To create a recursive relationship -- an object that has a many-to-one "
"relationship with itself -- use ``models.ForeignKey('self', on_delete=models."
"CASCADE)``."
msgstr ""
"Для создания рекурсивной связи -- объект со связью многое-к-одному на себя "
"-- используйте ``models.ForeignKey('self', on_delete=models.CASCADE)``."

# 9748ca87459c4f1282fbdd6c2a122cbd
#: ../../ref/models/fields.txt:1168
msgid ""
"If you need to create a relationship on a model that has not yet been "
"defined, you can use the name of the model, rather than the model object "
"itself::"
msgstr ""
"Если вам необходимо добавить связь на модель, которая еще не определена, вы "
"можете использовать имя модели вместо класса::"

#: ../../ref/models/fields.txt:1184
msgid ""
"Relationships defined this way on :ref:`abstract models <abstract-base-"
"classes>` are resolved when the model is subclassed as a concrete model and "
"are not relative to the abstract model's ``app_label``:"
msgstr ""

# 92f857e28da04bc9b798694cbc8002cc
#: ../../ref/models/fields.txt:1213
msgid ""
"To refer to models defined in another application, you can explicitly "
"specify a model with the full application label. For example, if the "
"``Manufacturer`` model above is defined in another application called "
"``production``, you'd need to use::"
msgstr ""
"Для связи на модель из другого приложения используйте название модели и "
"приложения. Например, если модель ``Manufacturer`` находится в приложении "
"``production``, используйте::"

# 11f402d534ce46c893bec481886fcf74
#: ../../ref/models/fields.txt:1224
msgid ""
"This sort of reference can be useful when resolving circular import "
"dependencies between two applications."
msgstr ""
"Такой способ позволяет создать циклическую зависимость между моделями из "
"разных приложений."

# 7cff833dae4c44f099057320a9e12dc4
#: ../../ref/models/fields.txt:1227
msgid ""
"A database index is automatically created on the ``ForeignKey``. You can "
"disable this by setting :attr:`~Field.db_index` to ``False``.  You may want "
"to avoid the overhead of an index if you are creating a foreign key for "
"consistency rather than joins, or if you will be creating an alternative "
"index like a partial or multiple column index."
msgstr ""
"В базе данных автоматом создается индекс для ``ForeignKey``. Можно указать "
"для :attr:`~Field.db_index` ``False``, чтобы отключить такое поведение. Это "
"может пригодиться, если внешний ключ используется для согласованности "
"данных, а не объединения(join) в запросах, или вы хотите самостоятельно "
"создать альтернативный индекс или индекс на несколько колонок."

# 02d578ada9c4485b98e2f47c12adc0ac
# dcce012faebf4d0396e2b2a96dd8ec51
#: ../../ref/models/fields.txt:1234 ../../ref/models/fields.txt:1464
msgid "Database Representation"
msgstr "Представление в базе данных"

# b474d05aa81e4e9487e6271a03138ee2
#: ../../ref/models/fields.txt:1236
msgid ""
"Behind the scenes, Django appends ``\"_id\"`` to the field name to create "
"its database column name. In the above example, the database table for the "
"``Car`` model will have a ``manufacturer_id`` column. (You can change this "
"explicitly by specifying :attr:`~Field.db_column`) However, your code should "
"never have to deal with the database column name, unless you write custom "
"SQL. You'll always deal with the field names of your model object."
msgstr ""
"За кулисами, Django добавляет ``\"_id\"`` к названию поля для создания "
"названия колонки. В примере выше, таблица для модели ``Car`` будет содержать "
"колонку ``manufacturer_id``. (Такое поведение можно изменить, указав "
"аргумент :attr:`~Field.db_column`) Хотя, ваш код никогда не должен "
"использовать названий колонок, если только вы не используете чистый SQL. Вы "
"всегда будете использовать названия полей модели."

# 4182db376f8a4f9484e745cb148b4499
# 05c6b1fc246e43cb9664c3ec9be7e5fe
#: ../../ref/models/fields.txt:1246 ../../ref/models/fields.txt:1478
msgid "Arguments"
msgstr "Параметры"

# 5556ec4080254de79724c440589044ee
#: ../../ref/models/fields.txt:1248
msgid ""
":class:`ForeignKey` accepts other arguments that define the details of how "
"the relation works."
msgstr ""
":class:`ForeignKey` принимает дополнительные аргументы, которые определяют, "
"как должна работать связь."

# 9f3747827cfa4f0f9a5c92df3a660289
#: ../../ref/models/fields.txt:1253
msgid ""
"When an object referenced by a :class:`ForeignKey` is deleted, Django will "
"emulate the behavior of the SQL constraint specified by the :attr:"
"`on_delete` argument. For example, if you have a nullable :class:"
"`ForeignKey` and you want it to be set null when the referenced object is "
"deleted::"
msgstr ""
"Когда объект, на который ссылается :class:`ForeignKey`, удаляется, Django "
"эмулирует поведение SQL правил, указанных в аргументе :attr:`on_delete`. "
"Например, если ваше поле :class:`ForeignKey` может содержать ``NULL`` и вы "
"хотите, чтобы оно устанавливалось в ``NULL``  после удаления связанного "
"объекта::"

#: ../../ref/models/fields.txt:1268
msgid ""
":attr:`~ForeignKey.on_delete` will become a required argument in Django 2.0. "
"In older versions it defaults to ``CASCADE``."
msgstr ""
":attr:`~ForeignKey.on_delete` будет обязательным аргументом в Django 2.0. В "
"предыдущих версиях по умолчанию было ``CASCADE``."

# 3d652d7d0a674ee3a3e5644c4ccb622f
#: ../../ref/models/fields.txt:1271
msgid ""
"The possible values for :attr:`~ForeignKey.on_delete` are found in :mod:"
"`django.db.models`:"
msgstr ""
"Возможные значения для :attr:`~ForeignKey.on_delete` находятся в :mod:"
"`django.db.models`:"

#: ../../ref/models/fields.txt:1276
msgid ""
"Cascade deletes. Django emulates the behavior of the SQL constraint ON "
"DELETE CASCADE and also deletes the object containing the ForeignKey."
msgstr ""
"Каскадное удаление. Django эмулирует поведение SQL правила ON DELETE CASCADE "
"и так же удаляет объекты, связанные через ForeignKey."

# 9c414319e02044d7bb5d1c6b84f5330c
#: ../../ref/models/fields.txt:1281
msgid ""
"Prevent deletion of the referenced object by raising :exc:`~django.db.models."
"ProtectedError`, a subclass of :exc:`django.db.IntegrityError`."
msgstr ""
"Препятствует удалению связанного объекта вызывая исключение :exc:`django.db."
"models.ProtectedError`(подкласс :exc:`django.db.IntegrityError`)."

# a6428fdb07584ab190ee6415f0aa35ac
#: ../../ref/models/fields.txt:1287
msgid ""
"Set the :class:`ForeignKey` null; this is only possible if :attr:`~Field."
"null` is ``True``."
msgstr ""
"Устанавливает :class:`ForeignKey` в ``NULL``; возможно только если :attr:"
"`null` равен ``True``."

# 62a9d7a56451469480a62c4f0caff3d1
#: ../../ref/models/fields.txt:1292
msgid ""
"Set the :class:`ForeignKey` to its default value; a default for the :class:"
"`ForeignKey` must be set."
msgstr ""
"Устанавливает :class:`ForeignKey` в значение по умолчанию; значение по-"
"умолчанию должно быть указано для :class:`ForeignKey`."

# 2b16266adda24ffc835673f59757fa69
#: ../../ref/models/fields.txt:1297
msgid ""
"Set the :class:`ForeignKey` to the value passed to :func:`~django.db.models."
"SET()`, or if a callable is passed in, the result of calling it. In most "
"cases, passing a callable will be necessary to avoid executing queries at "
"the time your models.py is imported::"
msgstr ""
"Устанавливает :class:`ForeignKey` в значение указанное в :func:`~django.db."
"models.SET()`. Если указан выполняемый объект, результат его выполнения. "
"Вызываемый объект можно использовать, чтобы избежать запросов во время "
"импорта models.py::"

# ec245c0521ea4cd0b673d172b0019256
#: ../../ref/models/fields.txt:1318
msgid ""
"Take no action. If your database backend enforces referential integrity, "
"this will cause an :exc:`~django.db.IntegrityError` unless you manually add "
"an SQL ``ON DELETE`` constraint to the database field."
msgstr ""
"Ничего не делать. Если используемый тип базы данных следит за целостностью "
"связей, будет вызвано исключение :exc:`~django.db.IntegrityError`, за "
"исключением, когда вы самостоятельно добавите  SQL правило ``ON DELETE`` для "
"поля таблицы."

# 5de9f3bd2953460bb117f9b720ebef40
#: ../../ref/models/fields.txt:1324
msgid ""
"Sets a limit to the available choices for this field when this field is "
"rendered using a ``ModelForm`` or the admin (by default, all objects in the "
"queryset are available to choose). Either a dictionary, a :class:`~django.db."
"models.Q` object, or a callable returning a dictionary or :class:`~django.db."
"models.Q` object can be used."
msgstr ""
"Ограничивает доступные значения для поля при создании ``ModelForm`` или в "
"админке (по умолчанию можно выбрать любой объект связанной модели). Можно "
"передать словарь, объект :class:`~django.db.models.Q` или функцию, которая "
"возвращает словарь или объект :class:`~django.db.models.Q`."

# 06ce3525c21d4e99bc9022ae6fe72512
#: ../../ref/models/fields.txt:1338
msgid ""
"causes the corresponding field on the ``ModelForm`` to list only ``Users`` "
"that have ``is_staff=True``. This may be helpful in the Django admin."
msgstr ""
"указывает полю ``ModelForm`` показывать только объекты ``Users``, которые "
"соответствуют ``is_staff=True``. Может быть полезно в админке."

# 096065ade36040b99b0bf22ca5a63e4a
#: ../../ref/models/fields.txt:1341
msgid ""
"The callable form can be helpful, for instance, when used in conjunction "
"with the Python ``datetime`` module to limit selections by date range. For "
"example::"
msgstr ""
"Указание функции может быть полезно, если используется объект Python "
"``datetime`` для фильтрации. Например::"

# f2f109ca071141c79cd3d6e9527976b8
#: ../../ref/models/fields.txt:1350
msgid ""
"If ``limit_choices_to`` is or returns a :class:`Q object <django.db.models."
"Q>`, which is useful for :ref:`complex queries <complex-lookups-with-q>`, "
"then it will only have an effect on the choices available in the admin when "
"the field is not listed in :attr:`~django.contrib.admin.ModelAdmin."
"raw_id_fields` in the ``ModelAdmin`` for the model."
msgstr ""
"Вместо словаря можете использовать объект :class:`~django.db.models.Q` или "
"функцию, которая возвращает такой объект, для создания :ref:`сложных "
"запросов <complex-lookups-with-q>`. Однако, если ``limit_choices_to`` "
"объект :class:`~django.db.models.Q`, он будет использован в интерфейсе "
"администратора, только если поле не находится в ``raw_id_fields`` класса "
"``ModelAdmin`` для этой модели."

# 288e527fc2b14766b8971db47228bbc1
#: ../../ref/models/fields.txt:1359
msgid ""
"If a callable is used for ``limit_choices_to``, it will be invoked every "
"time a new form is instantiated. It may also be invoked when a model is "
"validated, for example by management commands or the admin. The admin "
"constructs querysets to validate its form inputs in various edge cases "
"multiple times, so there is a possibility your callable may be invoked "
"several times."
msgstr ""
"Если используется функция для ``limit_choices_to``, она будет вызываться при "
"каждом создании формы. Также она может быть вызвана при валидации модели, "
"например, командой или админкой. Админка может вызывать эту функцию "
"несколько раз при проверке данных."

# 55230a57e9df458e9ef33a0b029aa87c
#: ../../ref/models/fields.txt:1368
msgid ""
"The name to use for the relation from the related object back to this one. "
"It's also the default value for :attr:`related_query_name` (the name to use "
"for the reverse filter name from the target model). See the :ref:`related "
"objects documentation <backwards-related-objects>` for a full explanation "
"and example. Note that you must set this value when defining relations on :"
"ref:`abstract models <abstract-base-classes>`; and when you do so :ref:`some "
"special syntax <abstract-related-name>` is available."
msgstr ""
"Название, используемое для обратной связи от связанной модели. Также "
"значение по умолчанию для  :attr:`related_query_name` (название обратной "
"связи используемое при фильтрации результата запроса). Ищите подробности и "
"примеры в :ref:`разделе о связанных объектах <backwards-related-objects>`. "
"Заметим, что вы должны определить этот параметр для поля в :ref:`абстрактной "
"модели <abstract-base-classes>`; при этом можно использовать :ref:`некоторые "
"дополнительные возможности <abstract-related-name>`."

# 743fb6f6f76f46b68bad10893d0baf37
#: ../../ref/models/fields.txt:1376
msgid ""
"If you'd prefer Django not to create a backwards relation, set "
"``related_name`` to ``'+'`` or end it with ``'+'``. For example, this will "
"ensure that the ``User`` model won't have a backwards relation to this "
"model::"
msgstr ""
"Если вы не хотите, чтобы Django создавал обратную связь, установите "
"``related_name`` в ``'+'`` или добавьте в конце ``'+'``. Например, такой код "
"создаст связь, но не добавит обратную связь в модель ``User``::"

# b45314538bf14fab8aa2c35a8c2c0ce8
#: ../../ref/models/fields.txt:1389
#, fuzzy
msgid ""
"The name to use for the reverse filter name from the target model. It "
"defaults to the value of :attr:`related_name` or :attr:`~django.db.models."
"Options.default_related_name` if set, otherwise it defaults to the name of "
"the model::"
msgstr ""
"Название обратной связи используемое при фильтрации результата запроса. По "
"умолчанию используется :attr:`related_name`, или название модели::"

#: ../../ref/models/fields.txt:1407
msgid ""
"Like :attr:`related_name`, ``related_query_name`` supports app label and "
"class interpolation via :ref:`some special syntax <abstract-related-name>`."
msgstr ""

# 67aeaa8e376a4995b86f097e7174523c
#: ../../ref/models/fields.txt:1412
#, fuzzy
msgid ""
"The field on the related object that the relation is to. By default, Django "
"uses the primary key of the related object. If you reference a different "
"field, that field must have ``unique=True``."
msgstr ""
"Поле связанной модели, которое используется для создания связи между "
"таблицами. По-умолчанию, Django использует первичный ключ."

# 928eccd041e348f295455d75155e2670
#: ../../ref/models/fields.txt:1418
msgid ""
"Controls whether or not a constraint should be created in the database for "
"this foreign key. The default is ``True``, and that's almost certainly what "
"you want; setting this to ``False`` can be very bad for data integrity. That "
"said, here are some scenarios where you might want to do this:"
msgstr ""
"Указывает создавать ли \"constraint\" для внешнего ключа в базе данных. По "
"умолчанию ``True`` и в большинстве случает это то, что вам нужно. Указав "
"``False`` вы рискуете целостностью данных. Некоторые ситуации, когда вам "
"может быть это необходимо:"

# 996e794ca6784f45ba6b5e4f1317b9df
# e1ae187cad15480fb134703255593b14
#: ../../ref/models/fields.txt:1423 ../../ref/models/fields.txt:1628
msgid "You have legacy data that is not valid."
msgstr "Вам досталась в наследство нецелостная база данных"

# 5264c35d19344db8820a39cfee93c41b
# a48563cce92f4f3eaf77c72128073789
#: ../../ref/models/fields.txt:1424 ../../ref/models/fields.txt:1629
msgid "You're sharding your database."
msgstr "Вы используете шардинг базы данных."

# 9368d1c792354cb4801a5d55ddca6a57
#: ../../ref/models/fields.txt:1426
msgid ""
"If this is set to ``False``, accessing a related object that doesn't exist "
"will raise its ``DoesNotExist`` exception."
msgstr ""
"При ``False``, если связанный объект не существует, при обращении к нему "
"будет вызвано исключение ``DoesNotExist``."

# e8fd17562f7149f49f04cd8d5a50699f
#: ../../ref/models/fields.txt:1431
msgid ""
"Controls the migration framework's reaction if this :class:`ForeignKey` is "
"pointing at a swappable model. If it is ``True`` - the default - then if "
"the :class:`ForeignKey` is pointing at a model which matches the current "
"value of ``settings.AUTH_USER_MODEL`` (or another swappable model setting) "
"the relationship will be stored in the migration using a reference to the "
"setting, not to the model directly."
msgstr ""
"Управляет поведением миграций, если :class:`ForeignKey` ссылается на "
"подменяемую(swappable) модель. При ``True`` - значение по умолчанию - если :"
"class:`ForeignKey` ссылается на модель, указанную через ``settings."
"AUTH_USER_MODEL`` (или другую настройку, определяющую какую модель "
"использовать), связь в миграции будет использовать настройку, а не саму "
"модель."

# e2dd73d038de4266ae7898016d055ec3
# ab915931aa9e4517b948fa1287d8cdad
#: ../../ref/models/fields.txt:1438 ../../ref/models/fields.txt:1642
msgid ""
"You only want to override this to be ``False`` if you are sure your model "
"should always point towards the swapped-in model - for example, if it is a "
"profile model designed specifically for your custom user model."
msgstr ""
"Вам может понадобится значение ``False`` только, если связь должна указывать "
"на какую-то конкретную модель, игнорируя настройку - например, если это "
"модель профиля пользователя для какой-то конкретной модели пользователя и не "
"будет работать с любой моделью из настройки."

#: ../../ref/models/fields.txt:1442
msgid ""
"Setting it to ``False`` does not mean you can reference a swappable model "
"even if it is swapped out - ``False`` just means that the migrations made "
"with this ForeignKey will always reference the exact model you specify (so "
"it will fail hard if the user tries to run with a User model you don't "
"support, for example)."
msgstr ""
"Указав ``False``, вы не сможете ссылаться на подменяемую модель даже после "
"того, как её подменили. ``False`` означает, что миграция, содержащая этот "
"``ForeignKey``, будет указывать на конкретную модель, которую вы укажите (и "
"пользователь вашего приложения получит ошибку, если попытается выполнить с "
"моделью ``User``, которую вы не поддерживаете, например)."

# 60379d827a3a44268886dc9979d7af77
# 9c1e57b47ef94f7ab43feceb506dc997
#: ../../ref/models/fields.txt:1448 ../../ref/models/fields.txt:1646
msgid "If in doubt, leave it to its default of ``True``."
msgstr ""
"Если вы не уверены какое значение выбрать, используйте значение по умолчанию "
"``True``."

# ea27a02a3b6c43f4bbd64075e142ad5f
#: ../../ref/models/fields.txt:1451
msgid "``ManyToManyField``"
msgstr "``ManyToManyField``"

# c3ebc38f2b4f4ea6b5c424b4c1912bd3
#: ../../ref/models/fields.txt:1455
msgid ""
"A many-to-many relationship. Requires a positional argument: the class to "
"which the model is related, which works exactly the same as it does for :"
"class:`ForeignKey`, including :ref:`recursive <recursive-relationships>` "
"and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""
"Связь многие-ко-многим. Принимает позиционный аргумент: класс связанной "
"модели. Работает так же как и :class:`ForeignKey`, включая :ref:`рекурсивную "
"<recursive-relationships>` и :ref:`ленивую <lazy-relationships>` связь."

# 8a94266df21741b6837ccd7776766155
#: ../../ref/models/fields.txt:1460
msgid ""
"Related objects can be added, removed, or created with the field's :class:"
"`~django.db.models.fields.related.RelatedManager`."
msgstr ""
"Связанные объекты могут быть добавлены, удалены или созданы с помощью :class:"
"`~django.db.models.fields.related.RelatedManager`."

# a20b2447d01a493eb260a80cf11a1b00
#: ../../ref/models/fields.txt:1466
msgid ""
"Behind the scenes, Django creates an intermediary join table to represent "
"the many-to-many relationship. By default, this table name is generated "
"using the name of the many-to-many field and the name of the table for the "
"model that contains it. Since some databases don't support table names above "
"a certain length, these table names will be automatically truncated to 64 "
"characters and a uniqueness hash will be used. This means you might see "
"table names like ``author_books_9cdf4``; this is perfectly normal.  You can "
"manually provide the name of the join table using the :attr:"
"`~ManyToManyField.db_table` option."
msgstr ""
"Django самостоятельно создаст промежуточную таблицу для хранения связи "
"многое-ко-многим. По-умолчанию, название этой таблицы создается из названия "
"поля и связанной модели. Так как некоторые базы данных не поддерживают "
"длинные названия таблиц, оно будет обрезано до 64 символов и будет добавлен "
"уникальный хеш. Это означает что вы можете увидеть такие названия таблиц "
"``author_books_9cdf4``; это нормально. Вы можете указать название "
"промежуточной таблицы, используя параметр :attr:`~ManyToManyField.db_table`."

# 0e254819a98c42cb8b969ecc2d13d268
#: ../../ref/models/fields.txt:1480
msgid ""
":class:`ManyToManyField` accepts an extra set of arguments -- all optional "
"-- that control how the relationship functions."
msgstr ""
":class:`ManyToManyField` принимает дополнительные аргументы -- все не "
"обязательны -- которые определяют как должна работать связь."

# 331f6897a2a94821b03a0e671bc2fb0e
#: ../../ref/models/fields.txt:1485
msgid "Same as :attr:`ForeignKey.related_name`."
msgstr "Аналогично :attr:`ForeignKey.related_name`."

# 331f6897a2a94821b03a0e671bc2fb0e
#: ../../ref/models/fields.txt:1489
msgid "Same as :attr:`ForeignKey.related_query_name`."
msgstr "Аналогично :attr:`ForeignKey.related_query_name`."

# 28a9ed874c5544099722db8de0cd60b4
#: ../../ref/models/fields.txt:1493
msgid "Same as :attr:`ForeignKey.limit_choices_to`."
msgstr "Аналогично :attr:`ForeignKey.limit_choices_to`."

# 386c14006cfe42008e9238ace5584383
#: ../../ref/models/fields.txt:1495
msgid ""
"``limit_choices_to`` has no effect when used on a ``ManyToManyField`` with a "
"custom intermediate table specified using the :attr:`~ManyToManyField."
"through` parameter."
msgstr ""
"``limit_choices_to``не работает для ``ManyToManyField`` переопределенной "
"через :attr:`~ManyToManyField.through` промежуточной моделью."

# 5a21d4f19c8e4e88951c5900ddb81fa4
#: ../../ref/models/fields.txt:1501
msgid ""
"Only used in the definition of ManyToManyFields on self. Consider the "
"following model::"
msgstr "Используется только при рекурсивной связи. Например, есть модель::"

# f68ae1c4697d459c908fd5376ff44708
#: ../../ref/models/fields.txt:1509
msgid ""
"When Django processes this model, it identifies that it has a :class:"
"`ManyToManyField` on itself, and as a result, it doesn't add a "
"``person_set`` attribute to the ``Person`` class. Instead, the :class:"
"`ManyToManyField` is assumed to be symmetrical -- that is, if I am your "
"friend, then you are my friend."
msgstr ""
"Загружая эту модель Django определяет, что она содержит :class:"
"`ManyToManyField` указывающее на себя, и не добавляет атрибут ``person_set`` "
"классу модели ``Person``. Вместо этого подразумевается, что :class:"
"`ManyToManyField`симметрично  -- то есть, если я твой друг, то и ты мне друг."

# 668954eee40f4282b0b11888c00c6afa
#: ../../ref/models/fields.txt:1515
msgid ""
"If you do not want symmetry in many-to-many relationships with ``self``, "
"set :attr:`~ManyToManyField.symmetrical` to ``False``. This will force "
"Django to add the descriptor for the reverse relationship, allowing :class:"
"`ManyToManyField` relationships to be non-symmetrical."
msgstr ""
"Если вам не нужна симметричность для связи многое-ко-многим к ``self``, "
"установите :attr:`~ManyToManyField.symmetrical` в ``False``. Это заставит "
"Django добавить дескриптор для обратной связи, позволяя :class:"
"`ManyToManyField` быть не симметричным."

# 9dc8fd04bc744848912b63d9b3632b1a
#: ../../ref/models/fields.txt:1522
msgid ""
"Django will automatically generate a table to manage many-to-many "
"relationships. However, if you want to manually specify the intermediary "
"table, you can use the :attr:`~ManyToManyField.through` option to specify "
"the Django model that represents the intermediate table that you want to use."
msgstr ""
"Django автоматически создает промежуточную таблицу для хранения связи. "
"Однако, если вы хотите самостоятельно определить промежуточную таблицу, "
"используйте параметр :attr:`~ManyToManyField.through` указав модель Django, "
"которая будет хранить связь между моделями."

# 0845754cb225453d86c8838da74774fc
#: ../../ref/models/fields.txt:1528
msgid ""
"The most common use for this option is when you want to associate :ref:"
"`extra data with a many-to-many relationship <intermediary-manytomany>`."
msgstr ""
"Обычно используют для :ref:`хранения дополнительных данных <intermediary-"
"manytomany>`."

# c0446edf0893496497dbbe9d4ff6dbfa
#: ../../ref/models/fields.txt:1532
msgid ""
"If you don't specify an explicit ``through`` model, there is still an "
"implicit ``through`` model class you can use to directly access the table "
"created to hold the association. It has three fields to link the models."
msgstr ""
"Если вы не указали ``through`` модель, вы все равно может обратиться к "
"неявно промежуточной модели, которая была автоматически создана. Она "
"содержит три поля, связывающие модели."

#: ../../ref/models/fields.txt:1536
msgid ""
"If the source and target models differ, the following fields are generated:"
msgstr "Если связанные модели разные, создаются следующие поля:"

# c9014c14bbc34b37bc7e551859db8b90
#: ../../ref/models/fields.txt:1539 ../../ref/models/fields.txt:1548
msgid "``id``: the primary key of the relation."
msgstr "``id``: первичный ключ для связи."

# 20a5d32961454dbc80724a7b860d7715
#: ../../ref/models/fields.txt:1540
msgid ""
"``<containing_model>_id``: the ``id`` of the model that declares the "
"``ManyToManyField``."
msgstr ""
"``<containing_model>_id``: ``id`` модели, которая содержит поле "
"``ManyToManyField``."

# 566e26d2e88248aeafbfcdcca561c444
#: ../../ref/models/fields.txt:1542
msgid ""
"``<other_model>_id``: the ``id`` of the model that the ``ManyToManyField`` "
"points to."
msgstr ""
"``<other_model>_id``: ``id`` модели, на которую ссылается "
"``ManyToManyField``."

#: ../../ref/models/fields.txt:1545
msgid ""
"If the ``ManyToManyField`` points from and to the same model, the following "
"fields are generated:"
msgstr ""
"Если ``ManyToManyField`` ссылается на одну и ту же модель, будут созданы "
"поля:"

#: ../../ref/models/fields.txt:1549
msgid ""
"``from_<model>_id``: the ``id`` of the instance which points at the model (i."
"e. the source instance)."
msgstr "``from_<model>_id``: ``id`` объекта основной модели (исходный объект)."

#: ../../ref/models/fields.txt:1551
msgid ""
"``to_<model>_id``: the ``id`` of the instance to which the relationship "
"points (i.e. the target model instance)."
msgstr ""
"``to_<model>_id``: ``id`` объекта, на который указывает связь (целевой "
"объект)."

# e56086a031aa4f30acabdd5e12748dde
#: ../../ref/models/fields.txt:1554
msgid ""
"This class can be used to query associated records for a given model "
"instance like a normal model."
msgstr "Этот класс может использоваться для получения связей."

# 6399a749517a4d50924d78f2316c2861
#: ../../ref/models/fields.txt:1559
msgid ""
"Only used when a custom intermediary model is specified. Django will "
"normally determine which fields of the intermediary model to use in order to "
"establish a many-to-many relationship automatically. However, consider the "
"following models::"
msgstr ""
"Используется, если явно указана промежуточная модель для связи многое-ко-"
"многим. Обычно Django самостоятельно определяется какие поля использовать "
"для создания связи. Однако, возьмем такой пример::"

# 4864f82d09fb4e47a8beb49bb4beb9f1
#: ../../ref/models/fields.txt:1587
msgid ""
"``Membership`` has *two* foreign keys to ``Person`` (``person`` and "
"``inviter``), which makes the relationship ambiguous and Django can't know "
"which one to use. In this case, you must explicitly specify which foreign "
"keys Django should use using ``through_fields``, as in the example above."
msgstr ""
"``Membership`` содержит *два* внешних ключа на ``Person`` (``person`` и "
"``inviter``). В таком случае Django не знает какой ключ использовать для "
"создания связи. В таком случае необходимо явно указать Django, какой внешний "
"ключ правильный, используя параметр ``through_fields``, как в примере выше."

# 516c02e5bdcc4b30aa4577cdfead2566
#: ../../ref/models/fields.txt:1593
msgid ""
"``through_fields`` accepts a 2-tuple ``('field1', 'field2')``, where "
"``field1`` is the name of the foreign key to the model the :class:"
"`ManyToManyField` is defined on (``group`` in this case), and ``field2`` the "
"name of the foreign key to the target model (``person`` in this case)."
msgstr ""
"``through_fields`` принимает двух-элементный кортеж ``('field1', "
"'field2')``, где ``field1`` -- название внешнего ключа, который ссылается на "
"модель, которая содержит :class:`ManyToManyField` (в нашем примере "
"``group``), а ``field2`` -- внешний ключ, который ссылается на целевую "
"модель (в нашем примере ``person``)."

# 7d87e8ffb819413dbea78f629ef92ade
#: ../../ref/models/fields.txt:1599
msgid ""
"When you have more than one foreign key on an intermediary model to any (or "
"even both) of the models participating in a many-to-many relationship, you "
"*must* specify ``through_fields``. This also applies to :ref:`recursive "
"relationships <recursive-relationships>` when an intermediary model is used "
"and there are more than two foreign keys to the model, or you want to "
"explicitly specify which two Django should use."
msgstr ""
"Если промежуточная модель содержит несколько внешний ключей на одну из "
"моделей связи (или обе модели), вы *должны* указать ``through_fields``. Это "
"также относится и к :ref:`рекурсивной связи <recursive-relationships>`, если "
"используется своя промежуточная модель, в которой больше двух связей на "
"модель, или вы хотите явно указать Django, какие внешние ключи использовать."

# 1dfe32418a9645ff9b2694c95f5d31d7
#: ../../ref/models/fields.txt:1607
msgid ""
"Recursive relationships using an intermediary model are always defined as "
"non-symmetrical -- that is, with :attr:`symmetrical=False <ManyToManyField."
"symmetrical>` -- therefore, there is the concept of a \"source\" and a "
"\"target\". In that case ``'field1'`` will be treated as the \"source\" of "
"the relationship and ``'field2'`` as the \"target\"."
msgstr ""
"Рекурсивные связи, использующие промежуточную модель, всегда считаются "
"несимметричными -- то есть с :attr:`symmetrical=False <ManyToManyField."
"symmetrical>` -- поэтому существуют понятия \"источник\" и \"цель\" связи. В "
"этом случае ``'field1'`` будет \"источником\" связи, а ``'field2'`` -- "
"\"целью\"."

# 3fe1e19d86be4840a482c7d645842ccd
#: ../../ref/models/fields.txt:1615
msgid ""
"The name of the table to create for storing the many-to-many data. If this "
"is not provided, Django will assume a default name based upon the names of: "
"the table for the model defining the relationship and the name of the field "
"itself."
msgstr ""
"Имя промежуточной таблицы для хранения связей многое-ко-многим. Если не "
"указан, Django самостоятельно создаст название по умолчанию используя "
"название таблицы определяющей связь и название поля."

# 15380c58dcfc4cd0a83c537c1e1baa2e
#: ../../ref/models/fields.txt:1622
msgid ""
"Controls whether or not constraints should be created in the database for "
"the foreign keys in the intermediary table. The default is ``True``, and "
"that's almost certainly what you want; setting this to ``False`` can be very "
"bad for data integrity. That said, here are some scenarios where you might "
"want to do this:"
msgstr ""
"Указывает создавать ли \"constraint\" для внешних ключей в промежуточной "
"таблице в базе данных. По умолчанию ``True`` и в большинстве случает это то, "
"что вам нужно. Указав ``False`` вы рискуете целостностью данных. Некоторые "
"ситуации, когда вам может быть это необходимо:"

# cf201e35aa1a453fb839b91b5ee02b98
#: ../../ref/models/fields.txt:1631
msgid "It is an error to pass both ``db_constraint`` and ``through``."
msgstr "Нельзя указать ``db_constraint`` и ``through`` одновременно."

# 6e5bc9cc50a94abaac95232d42f329f9
#: ../../ref/models/fields.txt:1635
msgid ""
"Controls the migration framework's reaction if this :class:`ManyToManyField` "
"is pointing at a swappable model. If it is ``True`` - the default - then if "
"the :class:`ManyToManyField` is pointing at a model which matches the "
"current value of ``settings.AUTH_USER_MODEL`` (or another swappable model "
"setting) the relationship will be stored in the migration using a reference "
"to the setting, not to the model directly."
msgstr ""
"Управляет поведением миграций, если :class:`ManyToManyField` ссылается на "
"подменяемую(swappable) модель. При ``True`` - значение по умолчанию - если :"
"class:`ManyToManyField` ссылается на модель, указанную через ``settings."
"AUTH_USER_MODEL`` (или другую настройку, определяющую какую модель "
"использовать), связь в миграции будет использовать настройку, а не саму "
"модель."

#: ../../ref/models/fields.txt:1648
msgid ":class:`ManyToManyField` does not support :attr:`~Field.validators`."
msgstr ":class:`ManyToManyField` не поддерживает :attr:`~Field.validators`."

#: ../../ref/models/fields.txt:1650
msgid ""
":attr:`~Field.null` has no effect since there is no way to require a "
"relationship at the database level."
msgstr ""
":attr:`~Field.null` не влияет на работу поля т.к. нет способа сделать связь "
"обязательной на уровне базы данных."

# 13a32ac5c4184542b884d2bb36eb12b1
#: ../../ref/models/fields.txt:1654
msgid "``OneToOneField``"
msgstr "``OneToOneField``"

# 3908cd10d0684bb4b068b1d79e67c23c
#: ../../ref/models/fields.txt:1658
msgid ""
"A one-to-one relationship. Conceptually, this is similar to a :class:"
"`ForeignKey` with :attr:`unique=True <Field.unique>`, but the \"reverse\" "
"side of the relation will directly return a single object."
msgstr ""
"Связь один-к-одному. Работает так же, как и :class:`ForeignKey` с :attr:"
"`unique=True <Field.unique>`, но \"обратная\" связь возвращает один объект."

# a44a448d3b3c42b29b3e3ed60d91d96e
#: ../../ref/models/fields.txt:1662
msgid ""
"This is most useful as the primary key of a model which \"extends\" another "
"model in some way; :ref:`multi-table-inheritance` is implemented by adding "
"an implicit one-to-one relation from the child model to the parent model, "
"for example."
msgstr ""
"В основном применяется как первичный ключ модели, которая \"расширяет\" "
"другую модель. Например, :ref:`multi-table-inheritance` работает через "
"неявное добавление связи один-к-одному от дочерней модели к родительской."

# 3294d5281bf14f96887346600ffc2b6d
#: ../../ref/models/fields.txt:1667
msgid ""
"One positional argument is required: the class to which the model will be "
"related. This works exactly the same as it does for :class:`ForeignKey`, "
"including all the options regarding :ref:`recursive <recursive-"
"relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""
"Принимает обязательный позиционный аргумент: класс связанной модели. "
"Работает так же как и :class:`ForeignKey`, включая :ref:`рекурсивную "
"<recursive-relationships>` и :ref:`\"ленивую\" <lazy-relationships>` связь."

# 80ef7b3d423b41d78a8e4f9897931105
#: ../../ref/models/fields.txt:1672
msgid ""
"If you do not specify the :attr:`~ForeignKey.related_name` argument for the "
"``OneToOneField``, Django will use the lower-case name of the current model "
"as default value."
msgstr ""
"Если вы не указали :attr:`~ForeignKey.related_name` для ``OneToOneField``, "
"Django будет использовать название модели в нижнем регистре."

# 5c3dd71514264991bf975b874c5f3094
#: ../../ref/models/fields.txt:1676
msgid "With the following example::"
msgstr "В примере ниже::"

# d2d5884323ec4829a6e8f8b8ab2b5fbb
#: ../../ref/models/fields.txt:1692
msgid "your resulting ``User`` model will have the following attributes::"
msgstr "модель ``User`` будет содержать следующие атрибуты::"

# 3b5a1ae1e0f04917bcffc03baec87608
#: ../../ref/models/fields.txt:1700
msgid ""
"A ``DoesNotExist`` exception is raised when accessing the reverse "
"relationship if an entry in the related table doesn't exist. For example, if "
"a user doesn't have a supervisor designated by ``MySpecialUser``::"
msgstr ""
"При получении связанного объекта через обратную связь, если такой объект не "
"существует, будет вызвано исключение ``DoesNotExist``. Например, если "
"пользователь не имеет соответствующего экземпляра в ``MySpecialUser``::"

# d6506538d1bc4daf9348d818541abf56
#: ../../ref/models/fields.txt:1711
msgid ""
"Additionally, ``OneToOneField`` accepts all of the extra arguments accepted "
"by :class:`ForeignKey`, plus one extra argument:"
msgstr ""
"Также ``OneToOneField`` принимает все дополнительные параметры принимаемые :"
"class:`ForeignKey`, и еще один дополнительный:"

# 0c2d3028dd88429d93ad8996b26e000f
#: ../../ref/models/fields.txt:1716
msgid ""
"When ``True`` and used in a model which inherits from another :term:"
"`concrete model`, indicates that this field should be used as the link back "
"to the parent class, rather than the extra ``OneToOneField`` which would "
"normally be implicitly created by subclassing."
msgstr ""
"При ``True`` и связанной модели, которая наследуется от другой модели, "
"определяет, что должна сохраняться связь на родительскую модель, а не поле "
"``OneToOneField`` дочерней модели, которое используется для организации "
"наследования моделей."

# 4fff3f2411214b4fb151e95f0b771ab2
#: ../../ref/models/fields.txt:1722
msgid ""
"See :doc:`One-to-one relationships </topics/db/examples/one_to_one>` for "
"usage examples of ``OneToOneField``."
msgstr ""
"Смотрите примеров использования ``OneToOneField`` в :doc:`Связь один к "
"одному </topics/db/examples/one_to_one>`."

# 8c3574e0b9844bc2ab306e3fd9e3a480
#: ../../ref/models/fields.txt:1726
msgid "Field API reference"
msgstr "Справочник по полям модели"

# bece7ca989394330b68e8af18f9efec2
#: ../../ref/models/fields.txt:1730
#, fuzzy
msgid ""
"``Field`` is an abstract class that represents a database table column. "
"Django uses fields to create the database table (:meth:`db_type`), to map "
"Python types to database (:meth:`get_prep_value`) and vice-versa (:meth:"
"`from_db_value`)."
msgstr ""
"``Field`` -- абстрактный класс, отображающий колонку в таблице в базе "
"данных. Django используется поля для создания таблицы в базе данных (:meth:"
"`db_type`), для преобразования типов Python в типа в базе данных (:meth:"
"`get_prep_value`) и наоборот (:meth:`from_db_value`), и для применения :doc:"
"`/ref/models/lookups` (:meth:`get_prep_lookup`)."

# da8bd1dc21b84595987aa90a5adb72b1
#: ../../ref/models/fields.txt:1735
msgid ""
"A field is thus a fundamental piece in different Django APIs, notably, :"
"class:`models <django.db.models.Model>` and :class:`querysets <django.db."
"models.query.QuerySet>`."
msgstr ""
"Таким образом поле является фундаментальной частью различных API Django, в "
"частности, :class:`models <django.db.models.Model>` и :class:`querysets "
"<django.db.models.query.QuerySet>`."

# e9bff669d3fc4f4cbf248bb66332f5ac
#: ../../ref/models/fields.txt:1739
msgid ""
"In models, a field is instantiated as a class attribute and represents a "
"particular table column, see :doc:`/topics/db/models`. It has attributes "
"such as :attr:`null` and :attr:`unique`, and methods that Django uses to map "
"the field value to database-specific values."
msgstr ""
"В модели экземпляр поля добавляется как атрибут класса и представляет "
"определенное поле таблицы, смотрите :doc:`/topics/db/models`. Оно содержит "
"атрибуты, такие как :attr:`null` и :attr:`unique`, и методы, которые Django "
"используется для преобразования значения поля в значение в базе данных."

# c9f33685f4634767b9b5436f74cb46a2
#: ../../ref/models/fields.txt:1744
msgid ""
"A ``Field`` is a subclass of :class:`~django.db.models.lookups."
"RegisterLookupMixin` and thus both :class:`~django.db.models.Transform` and :"
"class:`~django.db.models.Lookup` can be registered on it to be used in "
"``QuerySet``\\s (e.g. ``field_name__exact=\"foo\"``). All :ref:`built-in "
"lookups <field-lookups>` are registered by default."
msgstr ""
"``Field`` -- дочерний класс :class:`~django.db.models.lookups."
"RegisterLookupMixin`, что позволяет регистрировать :class:`~django.db.models."
"Transform` и :class:`~django.db.models.Lookup`, чтобы использовать в "
"``QuerySet`` (например, ``field_name__exact=\"foo\"``). Все :ref:`встроенные "
"фильтры <field-lookups>` зарегистрированы по умолчанию."

# 38acf621ec30427da4492976ad0c3e91
#: ../../ref/models/fields.txt:1751
msgid ""
"All of Django's built-in fields, such as :class:`CharField`, are particular "
"implementations of ``Field``. If you need a custom field, you can either "
"subclass any of the built-in fields or write a ``Field`` from scratch. In "
"either case, see :doc:`/howto/custom-model-fields`."
msgstr ""
"Все встроенные поля Django, например :class:`CharField`, наследуются от "
"``Field``. Если вы хотите создать свое поле, можно унаследоваться от любого "
"встроенного поля, или от ``Field``. Подробности смотрите в :doc:`/howto/"
"custom-model-fields`."

# edddb3ddeddd4fc384b56d08d17dd567
#: ../../ref/models/fields.txt:1758
msgid ""
"A verbose description of the field, e.g. for the :mod:`django.contrib."
"admindocs` application."
msgstr ""
"Читабельное описание поля, например, для приложения :mod:`django.contrib."
"admindocs`."

# 78db34ea58d641c799f01275c7edbeff
#: ../../ref/models/fields.txt:1761
msgid "The description can be of the form::"
msgstr "Может использовать форматирование::"

# d13f6d08e03740f98886d72130a59e4b
#: ../../ref/models/fields.txt:1765
msgid "where the arguments are interpolated from the field's ``__dict__``."
msgstr "Аргументы будут подставляется из значений ``__dict__`` поля."

# 554f870703e54f48aa7a23777bfaee2d
#: ../../ref/models/fields.txt:1767
#, fuzzy
msgid ""
"To map a ``Field`` to a database-specific type, Django exposes several "
"methods:"
msgstr ""
"Для преобразования типа ``Field`` в тип базы данных Django используется два "
"метода:"

# 6b122acf5f614bbb8e05af9ae514cc62
#: ../../ref/models/fields.txt:1772
msgid ""
"Returns a string naming this field for backend specific purposes. By "
"default, it returns the class name."
msgstr ""
"Возвращает текстовое название типа поля для использования в бэкендах баз "
"данных. По умолчанию возвращает название класса."

# e9a7ca72408147728194fcf3f406dcfc
#: ../../ref/models/fields.txt:1775
msgid "See :ref:`emulating-built-in-field-types` for usage in custom fields."
msgstr ""
"Смотрите :ref:`emulating-built-in-field-types`, как использовать в "
"собственных полях модели."

# 0f52ad5f0ea3493a9d076d6b1374ad18
#: ../../ref/models/fields.txt:1779
msgid ""
"Returns the database column data type for the :class:`Field`, taking into "
"account the ``connection``."
msgstr ""
"Возвращает тип поля в базе данных :class:`Field`, учитывая ``connection``."

# 72f0d506966d4c55bd4b7293824b2845
#: ../../ref/models/fields.txt:1782 ../../ref/models/fields.txt:1792
msgid "See :ref:`custom-database-types` for usage in custom fields."
msgstr ""
"Смотрите :ref:`custom-database-types`, как использовать в собственных полях "
"модели."

# 0f52ad5f0ea3493a9d076d6b1374ad18
#: ../../ref/models/fields.txt:1788
#, fuzzy
msgid ""
"Returns the database column data type for fields such as ``ForeignKey`` and "
"``OneToOneField`` that point to the :class:`Field`, taking into account the "
"``connection``."
msgstr ""
"Возвращает тип поля в базе данных :class:`Field`, учитывая ``connection``."

# 48d0a83f2cc84ec78c716e49ef7762f2
#: ../../ref/models/fields.txt:1794
msgid ""
"There are three main situations where Django needs to interact with the "
"database backend and fields:"
msgstr ""
"Существует три основных ситуации, когда Django используется преобразование "
"типа поля:"

# 340463a7c8584aa2a7fcc45c9984faf7
#: ../../ref/models/fields.txt:1797
msgid "when it queries the database (Python value -> database backend value)"
msgstr ""
"при запросе как базе данных (значение Python -> значение бэкенда базы данных)"

# ef78b57a1d89416c85e2593e75a3990c
#: ../../ref/models/fields.txt:1798
msgid ""
"when it loads data from the database (database backend value -> Python value)"
msgstr ""
"при загрузке данных из базы данных (значение бэкенда базы данных -> значение "
"Python)"

# 09e390bb7fda483caf2175d0b20a9a92
#: ../../ref/models/fields.txt:1800
msgid "when it saves to the database (Python value -> database backend value)"
msgstr ""
"при сохранении в базу данных (значение Python -> значение бэкенда базы "
"данных)"

# b8abd28640fe4ec5873a92a220464e23
#: ../../ref/models/fields.txt:1802
msgid ""
"When querying, :meth:`get_db_prep_value` and :meth:`get_prep_value` are used:"
msgstr ""
"При запросе используются методы :meth:`get_db_prep_value` и :meth:"
"`get_prep_value`:"

# faab913a1aa44bcf9fe296ba33cc3e51
#: ../../ref/models/fields.txt:1806
msgid ""
"``value`` is the current value of the model's attribute, and the method "
"should return data in a format that has been prepared for use as a parameter "
"in a query."
msgstr ""
"``value`` -- значение атрибута поля модели. Метод должен вернуть значение, "
"которое можно использовать как параметр в запросе."

# af5859a7c8ce43fa918fa30afbb82386
#: ../../ref/models/fields.txt:1810
msgid "See :ref:`converting-python-objects-to-query-values` for usage."
msgstr "Смотрите :ref:`converting-python-objects-to-query-values`."

# 4cf77f3736a24165814c066b313a13ba
#: ../../ref/models/fields.txt:1814
msgid ""
"Converts ``value`` to a backend-specific value. By default it returns "
"``value`` if ``prepared=True`` and :meth:`~Field.get_prep_value` if is "
"``False``."
msgstr ""
"Преобразует ``value`` в значение для бэкенда базы данных. По умолчанию "
"возвращает ``value``, если ``prepared=True``, иначе -- результат :meth:"
"`~Field.get_prep_value`."

# 5637e777a97e4ac58c5c83bb48433f76
#: ../../ref/models/fields.txt:1818
msgid "See :ref:`converting-query-values-to-database-values` for usage."
msgstr "Смотрите :ref:`converting-query-values-to-database-values`."

# 146a096cf7f3444fb3d69e5290604335
#: ../../ref/models/fields.txt:1820
msgid "When loading data, :meth:`from_db_value` is used:"
msgstr "При загрузке данных используется :meth:`from_db_value`:"

# 850bb75ffd7746b1b2ab8746913db68a
#: ../../ref/models/fields.txt:1824
msgid ""
"Converts a value as returned by the database to a Python object. It is the "
"reverse of :meth:`get_prep_value`."
msgstr ""
"Преобразует значение из базы данных в объект Python. Метод обратный :meth:"
"`get_prep_value`."

#: ../../ref/models/fields.txt:1827
msgid ""
"This method is not used for most built-in fields as the database backend "
"already returns the correct Python type, or the backend itself does the "
"conversion."
msgstr ""
"Для большинства встроенных полей этот метод не используется т.к. бэкенд базы "
"данных возвращает уже правильный объект Python, или же бэкенд сам выполняет "
"необходимые преобразования."

# 720a48ea675e401f81c5ad703c57311a
#: ../../ref/models/fields.txt:1831 ../../ref/models/fields.txt:1871
msgid "See :ref:`converting-values-to-python-objects` for usage."
msgstr "Смотрите :ref:`converting-values-to-python-objects`."

#: ../../ref/models/fields.txt:1835
msgid ""
"For performance reasons, ``from_db_value`` is not implemented as a no-op on "
"fields which do not require it (all Django fields). Consequently you may not "
"call ``super`` in your definition."
msgstr ""
"Для повышения производительности поля, которые не используют "
"``from_db_value``, не содержат пустую реализацию этого метода (все поля "
"Django). По этому нет необходимости вызывать ``super`` в вашем методе."

# 812e69b2121342b9abb1b8e8453042f3
#: ../../ref/models/fields.txt:1839
msgid "When saving, :meth:`pre_save` and :meth:`get_db_prep_save` are used:"
msgstr ""
"При сохранении используются методы :meth:`pre_save` и :meth:"
"`get_db_prep_save`:"

# 3fab4a46f83144298fc70299381b3dc4
#: ../../ref/models/fields.txt:1843
msgid ""
"Same as the :meth:`get_db_prep_value`, but called when the field value must "
"be *saved* to the database. By default returns :meth:`get_db_prep_value`."
msgstr ""
"Аналогичен :meth:`get_db_prep_value`, но используется при *сохранении* "
"значения в базу данных. По умолчанию возвращает результат :meth:"
"`get_db_prep_value`."

# 4e30dcef04074080a59f5e4285ed93c2
#: ../../ref/models/fields.txt:1849
msgid ""
"Method called prior to :meth:`get_db_prep_save` to prepare the value before "
"being saved (e.g. for :attr:`DateField.auto_now`)."
msgstr ""
"Метод вызывается перед :meth:`get_db_prep_save`, чтобы подготовить значение "
"перед сохранением (например, при :attr:`DateField.auto_now`)."

# cef444cd4445404e8681f71f4a589ac5
#: ../../ref/models/fields.txt:1852
msgid ""
"``model_instance`` is the instance this field belongs to and ``add`` is "
"whether the instance is being saved to the database for the first time."
msgstr ""
"``model_instance`` -- объект модели, к которому принадлежит поле, ``add`` -- "
"указывает сохраняется ли объект первый раз в базу данных."

# 16a340ad21e74fb69b99ac016cdcfcc4
#: ../../ref/models/fields.txt:1856
msgid ""
"It should return the value of the appropriate attribute from "
"``model_instance`` for this field. The attribute name is in ``self.attname`` "
"(this is set up by :class:`~django.db.models.Field`)."
msgstr ""
"Должен вернуть значение соответствующего этому полю атрибута "
"``model_instance``. Название атрибута можно получить из ``self.attname`` "
"(устанавливается :class:`~django.db.models.Field`)."

# 22dcf534066c4b3180338673873a4927
#: ../../ref/models/fields.txt:1860
msgid "See :ref:`preprocessing-values-before-saving` for usage."
msgstr "Смотрите :ref:`preprocessing-values-before-saving`."

#: ../../ref/models/fields.txt:1862
msgid ""
"Fields often receive their values as a different type, either from "
"serialization or from forms."
msgstr "Поля часто принимает значения разных типов из сериализатора, или формы"

#: ../../ref/models/fields.txt:1867
msgid ""
"Converts the value into the correct Python object. It acts as the reverse "
"of :meth:`value_to_string`, and is also called in :meth:`~django.db.models."
"Model.clean`."
msgstr ""
"Преобразует значение в правильный объект Python. Выполняет действия "
"обратные :meth:`value_to_string`, и вызывается в :meth:`~django.db.models."
"Model.clean`."

# 4b4ed3d3c4c04f44b2d702c829ca11b3
#: ../../ref/models/fields.txt:1873
msgid ""
"Besides saving to the database, the field also needs to know how to "
"serialize its value:"
msgstr ""
"Кроме сохранения в базу данных, поле также должно знать как сериализовать "
"свое значение:"

# 1656197ea011492183bbc4969040db1d
#: ../../ref/models/fields.txt:1878
msgid "Converts ``obj`` to a string. Used to serialize the value of the field."
msgstr ""
"Преобразует ``obj`` в строку. Используется при сериализации значения поля."

# 0592d1c176b145eea071e422415593ce
#: ../../ref/models/fields.txt:1880
msgid "See :ref:`converting-model-field-to-serialization` for usage."
msgstr "Смотрите :ref:`converting-model-field-to-serialization`."

# 1e65f50222aa497b8a5b894f56765a56
#: ../../ref/models/fields.txt:1882
msgid ""
"When using :class:`model forms <django.forms.ModelForm>`, the ``Field`` "
"needs to know which form field it should be represented by:"
msgstr ""
"При использовании :class:`django.forms.ModelForm` ``Field`` должно указать, "
"какое поле формы необходимо использовать для его представления в форме:"

# ebb7457df0b646a98fa6c05394bc5050
# 5a49337e18f64618b252f334bbd41efb
# 99addf16a3d6431ea08c33328f5458c5
# 2bcfac1f138c460aa7c52435559f5693
#: ../../ref/models/fields.txt:1887
msgid ""
"Returns the default :class:`django.forms.Field` of this field for :class:"
"`~django.forms.ModelForm`."
msgstr ""
"Возвращает :class:`django.forms.Field` поля модели для :class:`~django.forms."
"ModelForm`."

# 6ae4c16348504e30b2a66824766c5020
#: ../../ref/models/fields.txt:1890
#, fuzzy
msgid ""
"By default, if both ``form_class`` and ``choices_form_class`` are ``None``, "
"it uses :class:`~django.forms.CharField`. If the field has :attr:`~django.db."
"models.Field.choices` and ``choices_form_class`` isn't specified, it uses :"
"class:`~django.forms.TypedChoiceField`."
msgstr ""
"По умолчанию, если ``form_class`` и ``choices_form_class`` равны ``None``, "
"возвращает :class:`~django.forms.CharField`. Если указан "
"``choices_form_class``, вернет :class:`~django.forms.TypedChoiceField`."

# 5ecdb4addc3e4cafbe6337ffd0edf59e
#: ../../ref/models/fields.txt:1895
msgid "See :ref:`specifying-form-field-for-model-field` for usage."
msgstr "Смотрите :ref:`specifying-form-field-for-model-field`."

# e43e74983b254f1ba8f13aa1a214ccd1
#: ../../ref/models/fields.txt:1899
msgid "Returns a 4-tuple with enough information to recreate the field:"
msgstr "Возвращает 4-х элементный кортеж с информацией, как воссоздать поле:"

# c691ffe8a30a42f4abb6cb78eaf4bc86
#: ../../ref/models/fields.txt:1901
msgid "The name of the field on the model."
msgstr "Название поля в модели."

# 341075539a654020a5062b11819fd1c4
#: ../../ref/models/fields.txt:1902
msgid ""
"The import path of the field (e.g. ``\"django.db.models.IntegerField\"``). "
"This should be the most portable version, so less specific may be better."
msgstr ""
"Путь для импорта класса поля (например, ``\"django.db.models.IntegerField"
"\"``). Должен возвращаться максимально переносимый между платформами и "
"версиями вариант."

# f2df786f57d547b39cf855f10e9c4a8a
#: ../../ref/models/fields.txt:1904
msgid "A list of positional arguments."
msgstr "Список позиционных аргументов."

# e2c4ffe049d04f0c8d26b5615e16ad7d
#: ../../ref/models/fields.txt:1905
msgid "A dict of keyword arguments."
msgstr "Словарь именованных аргументов."

# 5e59f6bbcd0947e88b382641c3d92bf3
#: ../../ref/models/fields.txt:1907
msgid ""
"This method must be added to fields prior to 1.7 to migrate its data using :"
"doc:`/topics/migrations`."
msgstr ""
"Этот метод должен быть добавлен полям, созданным до 1.7, для использования :"
"doc:`/topics/migrations`."

# 8c3574e0b9844bc2ab306e3fd9e3a480
#: ../../ref/models/fields.txt:1914
msgid "Field attribute reference"
msgstr "Атрибуты поля"

#: ../../ref/models/fields.txt:1916
msgid ""
"Every ``Field`` instance contains several attributes that allow "
"introspecting its behavior. Use these attributes instead of ``isinstance`` "
"checks when you need to write code that depends on a field's functionality. "
"These attributes can be used together with the :ref:`Model._meta API <model-"
"meta-field-api>` to narrow down a search for specific field types. Custom "
"model fields should implement these flags."
msgstr ""
"Каждый экземпляр ``Field`` содержит атрибуты, определяющие поведение поля. "
"Используйте эти атрибуты вместо проверки ``isinstance``, если вам необходимо "
"написать код, который зависит от поведения поля. Эти атрибуты можно "
"использовать совместно с :ref:`Model._meta API <model-meta-field-api>`, "
"чтобы проверять поля конкретного типа. Собственные поля модели должны "
"определять эти атрибуты."

# 68b6f9896d334c4f868ad663cdc47cb0
#: ../../ref/models/fields.txt:1924
msgid "Attributes for fields"
msgstr "Атрибуты поля"

#: ../../ref/models/fields.txt:1928
msgid ""
"Boolean flag that indicates if the field was automatically created, such as "
"the ``OneToOneField`` used by model inheritance."
msgstr ""
"Флаг, который указывает было ли поле создано автоматически, например "
"``OneToOneField`` при наследовании моделей."

#: ../../ref/models/fields.txt:1933
msgid ""
"Boolean flag that indicates if the field has a database column associated "
"with it."
msgstr ""
"Флаг, который указывает представлено ли поле колонкой в таблице в базе "
"данных."

#: ../../ref/models/fields.txt:1938
msgid ""
"Boolean flag that indicates if a field is used to back another non-hidden "
"field's functionality (e.g. the ``content_type`` and ``object_id`` fields "
"that make up a ``GenericForeignKey``). The ``hidden`` flag is used to "
"distinguish what constitutes the public subset of fields on the model from "
"all the fields on the model."
msgstr ""
"Флаг, который указывает, что поле скрыто и используется для работы другого "
"не скрытого поля (например, поля ``content_type`` и ``object_id`` "
"используются для работы ``GenericForeignKey``). Флаг ``hidden`` "
"используется, чтобы выделить публичные поля модели из всех полей."

#: ../../ref/models/fields.txt:1946
msgid ""
":meth:`Options.get_fields() <django.db.models.options.Options.get_fields()>` "
"excludes hidden fields by default. Pass in ``include_hidden=True`` to return "
"hidden fields in the results."
msgstr ""
":meth:`Options.get_fields() <django.db.models.options.Options.get_fields()>` "
"не возвращает скрытые поля. Передайте ``include_hidden=True``, чтобы "
"получить все поля."

#: ../../ref/models/fields.txt:1953
msgid ""
"Boolean flag that indicates if a field contains references to one or more "
"other models for its functionality (e.g. ``ForeignKey``, "
"``ManyToManyField``, ``OneToOneField``, etc.)."
msgstr ""
"Флаг, который указывает, ссылается ли поле на другие модели (например, "
"``ForeignKey``, ``ManyToManyField``, ``OneToOneField``, и т.д.)."

#: ../../ref/models/fields.txt:1959
msgid ""
"Returns the model on which the field is defined. If a field is defined on a "
"superclass of a model, ``model`` will refer to the superclass, not the class "
"of the instance."
msgstr ""
"Содержит модель, в которой это поле определено. Если поле определено в "
"родительском классе, ``model`` будет ссылаться на этот класс, а не класс "
"экземпляра модели."

#: ../../ref/models/fields.txt:1964
msgid "Attributes for fields with relations"
msgstr "Атрибуты связывающих полей"

#: ../../ref/models/fields.txt:1966
msgid ""
"These attributes are used to query for the cardinality and other details of "
"a relation. These attribute are present on all fields; however, they will "
"only have boolean values (rather than ``None``) if the field is a relation "
"type (:attr:`Field.is_relation=True <Field.is_relation>`)."
msgstr ""
"Атрибуты, определяющие связь поля. Эти атрибуты присутствуют во всех полях, "
"однако, только для связывающих полей(:attr:`Field.is_relation=True <Field."
"is_relation>`) они содержат булевы значения(а не ``None``)."

#: ../../ref/models/fields.txt:1973
msgid ""
"Boolean flag that is ``True`` if the field has a many-to-many relation; "
"``False`` otherwise. The only field included with Django where this is "
"``True`` is ``ManyToManyField``."
msgstr ""
"Флаг, который содержит ``True``, если поле содержит связь многие-ко-многим, "
"иначе ``False``. Единственное поле Django, которое содержит ``True`` -- это "
"``ManyToManyField``."

#: ../../ref/models/fields.txt:1979
msgid ""
"Boolean flag that is ``True`` if the field has a many-to-one relation, such "
"as a ``ForeignKey``; ``False`` otherwise."
msgstr ""
"Флаг, который содержит ``True``, если поле содержит связь многие-к-одному, "
"такие как ``ForeignKey``, иначе ``False``."

#: ../../ref/models/fields.txt:1984
msgid ""
"Boolean flag that is ``True`` if the field has a one-to-many relation, such "
"as a ``GenericRelation`` or the reverse of a ``ForeignKey``; ``False`` "
"otherwise."
msgstr ""
"Флаг, который содержит ``True``, если поле содержит связь один-ко-многим, "
"такие как ``GenericRelation`` или обратная связь ``ForeignKey``, иначе "
"``False``."

#: ../../ref/models/fields.txt:1990
msgid ""
"Boolean flag that is ``True`` if the field has a one-to-one relation, such "
"as a ``OneToOneField``; ``False`` otherwise."
msgstr ""
"Флаг, который содержит ``True``, если поле содержит связь один-к-одному, "
"такие как ``OneToOneField``, иначе ``False``."

#: ../../ref/models/fields.txt:1995
#, fuzzy
msgid ""
"Points to the model the field relates to. For example, ``Author`` in "
"``ForeignKey(Author, on_delete=models.CASCADE)``. The ``related_model`` for "
"a ``GenericForeignKey`` is always ``None``."
msgstr ""
"Указывает на модель, на которую ссылается поле. Например, ``Author`` в "
"``ForeignKey(Author, on_delete=models.CASCADE)``. Если поле содержит связь с "
"несколькими объектами (такие как ``GenericForeignKey`` или "
"``GenericRelation``) тогда ``related_model`` будет ``None``."

# dd9875fef7a546aaa79a5e289875f863
# 8e9d7627143842ae8fe8397053092d6d
#~ msgid "MySQL users"
#~ msgstr "Пользователям MySQL"

# 373efc2a709d4fa1b99b8f496b63d5bf
#~ msgid ""
#~ "If you are using this field with MySQLdb 1.2.2 and the ``utf8_bin`` "
#~ "collation (which is *not* the default), there are some issues to be aware "
#~ "of. Refer to the :ref:`MySQL database notes <mysql-collation>` for "
#~ "details."
#~ msgstr ""
#~ "Если вы используете это поле с MySQLdb 1.2.2 и ``utf8_bin`` \"collation"
#~ "\" (которое *не* является значением по умолчанию), могут быть некоторые "
#~ "проблемы. Смотрите :ref:`советы при работе с MySQL <mysql-collation>` для "
#~ "подробностей."

# b0cfac2022804d58a432f9c0e98ff372
#~ msgid ""
#~ "If you are using this field with MySQLdb 1.2.1p2 and the ``utf8_bin`` "
#~ "collation (which is *not* the default), there are some issues to be aware "
#~ "of. Refer to the :ref:`MySQL database notes <mysql-collation>` for "
#~ "details."
#~ msgstr ""
#~ "Если вы используете это поле с MySQLdb 1.2.1p2 и ``utf8_bin`` \"collation"
#~ "\" (которое *не* является значением по умолчанию), могут быть некоторые "
#~ "проблемы. Смотрите :ref:`советы при работе с MySQL <mysql-collation>` для "
#~ "подробностей."

#~ msgid ""
#~ "``on_delete`` can now be used as the second positional argument "
#~ "(previously it was typically only passed as a keyword argument). It will "
#~ "be a required argument in Django 2.0."
#~ msgstr ""
#~ "``on_delete`` может теперь использоваться как второй позиционный аргумент "
#~ "(ранее использовался только как именованный аргумент). Будет обязательным "
#~ "аргументом в Django 2.0."

#~ msgid ""
#~ "The default wasn't used for ``None`` primary key values in previous "
#~ "versions."
#~ msgstr ""
#~ "В предыдущих версиях значение по умолчанию не использовалось для "
#~ "первичного ключа, если указать ``None``."

#~ msgid ""
#~ "The default ``max_length`` was increased from 75 to 254 in order to be "
#~ "compliant with RFC3696/5321."
#~ msgstr ""
#~ "Значение ``max_length`` по умолчанию было увеличено с 75 до 254 для "
#~ "совместимости с RFC3696/5321."

# 00efa5f28acf40b390570cdf6e152350
#~ msgid ""
#~ "Behaves like the standard Python ``open()`` method and opens the file "
#~ "associated with this instance in the mode specified by ``mode``."
#~ msgstr ""
#~ "Работает так же как и родной метод Python ``open()`` -- открывает файл, "
#~ "связанный с объектом, в режиме определенном аргументом ``mode``."

# e2a2fd90f6db4ccca80089bedc2be53e
#~ msgid ""
#~ "When a lookup is used on a field, the value may need to be \"prepared\". "
#~ "Django exposes two methods for this:"
#~ msgstr ""
#~ "При использовании фильтрации по полю, может быть необходимо \"приготовить"
#~ "\" значение. Django используется для этого два метода:"

# ba597668c0b047c6aad63e9bed1d4483
#~ msgid ""
#~ "Prepares ``value`` to the database prior to be used in a lookup. The "
#~ "``lookup_type`` will be one of the valid Django filter lookups: ``\"exact"
#~ "\"``, ``\"iexact\"``, ``\"contains\"``, ``\"icontains\"``, ``\"gt\"``, ``"
#~ "\"gte\"``, ``\"lt\"``, ``\"lte\"``, ``\"in\"``, ``\"startswith\"``, ``"
#~ "\"istartswith\"``, ``\"endswith\"``, ``\"iendswith\"``, ``\"range\"``, ``"
#~ "\"year\"``, ``\"month\"``, ``\"day\"``, ``\"isnull\"``, ``\"search\"``, ``"
#~ "\"regex\"``, and ``\"iregex\"``."
#~ msgstr ""
#~ "Преобразует ``value`` для использования в фильтрации в соответствии с "
#~ "используемой базой данных. ``lookup_type`` может быть одним из фильтров "
#~ "Django: ``\"exact\"``, ``\"iexact\"``, ``\"contains\"``, ``\"icontains"
#~ "\"``, ``\"gt\"``, ``\"gte\"``, ``\"lt\"``, ``\"lte\"``, ``\"in\"``, ``"
#~ "\"startswith\"``, ``\"istartswith\"``, ``\"endswith\"``, ``\"iendswith"
#~ "\"``, ``\"range\"``, ``\"year\"``, ``\"month\"``, ``\"day\"``, ``\"isnull"
#~ "\"``, ``\"search\"``, ``\"regex\"`` и ``\"iregex\"``."

# 3a469dca0e4a470f929595eb1dc9575f
#~ msgid ""
#~ "If you are using :doc:`Custom lookups </ref/models/lookups>` the "
#~ "``lookup_type`` can be any ``lookup_name`` registered in the field."
#~ msgstr ""
#~ "Если вы используете :doc:`собственные фильтры </ref/models/lookups>`, "
#~ "``lookup_type`` может быть любым ``lookup_name``, зарегистрированным в "
#~ "поле."

# 50c5935bc2cd4d7495ade6c0b9b0e93c
#~ msgid "See :ref:`preparing-values-for-use-in-database-lookups` for usage."
#~ msgstr "Смотрите :ref:`preparing-values-for-use-in-database-lookups`."

# 4fe2e05f98fd454bbff68fb80e6741f0
#~ msgid "Similar to :meth:`get_db_prep_value`, but for performing a lookup."
#~ msgstr ""
#~ "Аналогичен :meth:`get_db_prep_value`, но используется при фильтрации."

# 7af904ebf45041e79ffb42e80235001f
#~ msgid ""
#~ "As with :meth:`get_db_prep_value`, the specific connection that will be "
#~ "used for the query is passed as ``connection``. In addition, ``prepared`` "
#~ "describes whether the value has already been prepared with :meth:"
#~ "`get_prep_lookup`."
#~ msgstr ""
#~ "Как и :meth:`get_db_prep_value`, используемое для запроса подключение "
#~ "передается в аргументе ``connection``. Дополнительно передается аргумент "
#~ "``prepared``, который указывает было ли значение преобразовано с помощью :"
#~ "meth:`get_prep_lookup`."

# e6bf60e4fa32443da614fd5f86355554
#~ msgid ""
#~ "If ``True``, :djadmin:`django-admin sqlindexes <sqlindexes>` will output "
#~ "a ``CREATE INDEX`` statement for this field."
#~ msgstr ""
#~ "При ``True``, :djadmin:`django-admin sqlindexes <sqlindexes>`  добавит "
#~ "``CREATE INDEX`` для этого поля."

# 7fd2cd6c4d804bcbb976f65ca4821579
#~ msgid "The ``unique_for_date`` error message key was added."
#~ msgstr "Было добавлено сообщение об ошибке ``unique_for_date``."

# 2017001d940541d89017b92f99c634d0
#~ msgid "``upload_to`` was required in older versions of Django."
#~ msgstr "``upload_to`` был обязателен в предыдущих версиях Django."

# 75c345765fc6430cb35099252d85fc21
#~ msgid ""
#~ "A local filesystem path that will be appended to your :setting:"
#~ "`MEDIA_ROOT` setting to determine the value of the :attr:`~django.db."
#~ "models.fields.files.FieldFile.url` attribute."
#~ msgstr ""
#~ "Путь в файловой системе относительно значения настройки :setting:"
#~ "`MEDIA_ROOT` для определения :attr:`~django.db.models.fields.files."
#~ "FieldFile.url`."

# c7e236a1ca364e4cb5bed0841e9a4938
#~ msgid "``IPAddressField``"
#~ msgstr "``IPAddressField``"

# 632de13858114b98a8cdfbc9531df185
#~ msgid ""
#~ "This field has been deprecated in favor of :class:`~django.db.models."
#~ "GenericIPAddressField`."
#~ msgstr ""
#~ "Это поле устарело. Используйте :class:`~django.db.models."
#~ "GenericIPAddressField`."

# 6f5c0727235843fdbd8d5b19c45c167c
#~ msgid ""
#~ "An IP address, in string format (e.g. \"192.0.2.30\"). The default form "
#~ "widget for this field is a :class:`~django.forms.TextInput`."
#~ msgstr ""
#~ "IP адрес в виде строки(например, \"192.0.2.30\"). Форма использует "
#~ "виджет  :class:`~django.forms.TextInput`."

# 721543d8cdae47b1b9905314f1968c1b
#~ msgid ""
#~ "It is not recommended to have a ``ForeignKey`` from an app without "
#~ "migrations to an app with migrations. See the :ref:`dependencies "
#~ "documentation <unmigrated-dependencies>` for more details."
#~ msgstr ""
#~ "Не рекомендуется использовать ``ForeignKey`` из приложения без миграций к "
#~ "приложению с миграциями. Смотрите :ref:`раздел о зависимостях "
#~ "миграций<unmigrated-dependencies>`."

# 730056eb30064b4c896626ea92f5912f
#~ msgid ""
#~ "Previous versions of Django do not allow passing a callable as a value "
#~ "for ``limit_choices_to``."
#~ msgstr ""
#~ "В предыдущих версиях Django нельзя было указывать функцию в "
#~ "``limit_choices_to``."

# 718ffd92a1324a128bc588f9eaab0847
#~ msgid "Cascade deletes; the default."
#~ msgstr "Каскадное удаление, значение по умолчанию."

#~ msgid ""
#~ "This flag was added for backwards compatibility as older versions of "
#~ "Django always allowed assigning unsaved model instances."
#~ msgstr ""
#~ "Этот параметр добавлен для обратной совместимости т.к. в предыдущих "
#~ "версиях Django можно было назначать не сохраненные объекты."

#~ msgid ""
#~ "Django prevents unsaved model instances from being assigned to a "
#~ "``ForeignKey`` field to prevent accidental data loss (unsaved foreign "
#~ "keys are silently ignored when saving a model instance)."
#~ msgstr ""
#~ "Django не позволяет назначать полю ``ForeignKey`` не сохраненные объекты, "
#~ "чтобы избежать потерю данных (такие объекты просто игнорируются при "
#~ "сохранении объекта модели)."

#~ msgid ""
#~ "If you require allowing the assignment of unsaved instances and aren't "
#~ "concerned about the data loss possibility (e.g. you never save the "
#~ "objects to the database), you can disable this check by creating a "
#~ "subclass of the field class and setting its "
#~ "``allow_unsaved_instance_assignment`` attribute to ``True``. For example::"
#~ msgstr ""
#~ "Если вам необходимо назначать не сохраненные объекты и вы не боитесь "
#~ "потенциальной потери данных (например, вы никогда не сохраняете объект в "
#~ "базу данных), вы можете отключить проверку, унаследовавшись от базового "
#~ "класса и указав ``True`` в ``allow_unsaved_instance_assignment``. "
#~ "Например::"

# 5a0903b2364646f58e0cc6c963dd958a
#~ msgid ""
#~ "It is not recommended to have a ``ManyToManyField`` from an app without "
#~ "migrations to an app with migrations. See the :ref:`dependencies "
#~ "documentation <unmigrated-dependencies>` for more details."
#~ msgstr ""
#~ "Не рекомендуется использовать ``ManyToManyField`` из приложения без "
#~ "миграций к приложению с миграциями. Смотрите :ref:`раздел о зависимостях "
#~ "в миграциях <unmigrated-dependencies>`."

#~ msgid ""
#~ "Works analogously to :attr:`ForeignKey.allow_unsaved_instance_assignment`."
#~ msgstr ""
#~ "Работает аналогично :attr:`ForeignKey.allow_unsaved_instance_assignment`."

# 484439867537456fadbef6d49b2ef960
#~ msgid "Incompliance to RFCs"
#~ msgstr "Несоответствие с RFC"

# 42783823cba74640825d684c9e31dec2
#~ msgid ""
#~ "The default 75 character ``max_length`` is not capable of storing all "
#~ "possible RFC3696/5321-compliant email addresses. In order to store all "
#~ "possible valid email addresses, a ``max_length`` of 254 is required. The "
#~ "default ``max_length`` of 75 exists for historical reasons. The default "
#~ "has not been changed in order to maintain backwards compatibility with "
#~ "existing uses of :class:`EmailField`."
#~ msgstr ""
#~ "Значение ``max_length`` в 75 символов не достаточно для хранения всех "
#~ "возможных значений в соответствии RFC3696/5321. Для хранения всех "
#~ "возможных вариантов необходимо значение ``max_length`` в 254. Значение в "
#~ "75 символов сложилось исторически и не изменяется для обратной "
#~ "совместимости."

# 6a0fdd0fd7f348c08671caf567415cf6
#~ msgid ""
#~ "The default implementation returns ``value``, which is the common case "
#~ "when the database backend already returns the correct Python type."
#~ msgstr ""
#~ "По умолчанию возвращает ``value``, что обычно подходит, если бэкенд уже "
#~ "возвращает правильный объект Python."

# 6010854b282b4f9bb639fb34bcb4632e
#~ msgid "Has one **required** argument:"
#~ msgstr "Принимает один **обязательный** параметр:"

# ce6c861277f94919b621092bfeaa6626
#~ msgid ""
#~ "A dictionary of lookup arguments and values (see :doc:`/topics/db/"
#~ "queries`) that limit the available admin or ModelForm choices for this "
#~ "object. Use this with functions from the Python ``datetime`` module to "
#~ "limit choices of objects by date. For example::"
#~ msgstr ""
#~ "Словарь параметров для фильтрации (смотрите :doc:`/topics/db/queries`), "
#~ "которые ограничивают множество связанных объектов, отображаемых в поле "
#~ "формы. Используйте функции модуля Python ``datetime`` чтобы ограничить "
#~ "множество по дате. Например::"

# 2a489537c2c04f0a84cb70789a8cc31d
#~ msgid ""
#~ "only allows the choice of related objects with a ``pub_date`` before the "
#~ "current date to be chosen."
#~ msgstr ""
#~ "позволяет выбирать связанные объекты с ``pub_date`` до текущей даты."

# 2c12b6fdc2e44856a0c012e835baa32d
#~ msgid ""
#~ "If you have more than one ``ManyToManyField`` pointing to the same model "
#~ "and want to suppress the backwards relations, set each ``related_name`` "
#~ "to a unique value ending with ``'+'``::"
#~ msgstr ""
#~ "Если у вас несколько ``ManyToManyField`` указывающих на одну модель и "
#~ "хотите избежать создания обратных связей, укажите в ``related_name`` "
#~ "уникальное значение с ``'+'`` в конце::"

# 95dc37dbce0148aaafc10847615efaf4
#~ msgid "This is enforced by model validation but not at the database level."
#~ msgstr ""
#~ "Эта проверка работает на уровне модели и никак не виляет на проверку в "
#~ "базе данных."

# 03206900d94d446fb1ae6f9df899804b
#~ msgid ""
#~ "The current value of the field will be displayed as a clickable link "
#~ "above the input widget."
#~ msgstr "Текущее значение будет отображаться как ссылка под полем формы."
