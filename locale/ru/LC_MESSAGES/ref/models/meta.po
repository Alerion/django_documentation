# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/models/meta.txt:3
msgid "Model ``_meta`` API"
msgstr ""

#: ../../ref/models/meta.txt:10
msgid ""
"The model ``_meta`` API is at the core of the Django ORM. It enables other "
"parts of the system such as lookups, queries, forms, and the admin to "
"understand the capabilities of each model. The API is accessible through the "
"``_meta`` attribute of each model class, which is an instance of an ``django."
"db.models.options.Options`` object."
msgstr ""

#: ../../ref/models/meta.txt:16
msgid "Methods that it provides can be used to:"
msgstr ""

#: ../../ref/models/meta.txt:18
msgid "Retrieve all field instances of a model"
msgstr ""

#: ../../ref/models/meta.txt:19
msgid "Retrieve a single field instance of a model by name"
msgstr ""

#: ../../ref/models/meta.txt:24
msgid "Field access API"
msgstr ""

#: ../../ref/models/meta.txt:27
msgid "Retrieving a single field instance of a model by name"
msgstr ""

#: ../../ref/models/meta.txt:31
msgid "Returns the field instance given a name of a field."
msgstr ""

#: ../../ref/models/meta.txt:33
msgid ""
"``field_name`` can be the name of a field on the model, a field on an "
"abstract or inherited model, or a field defined on another model that points "
"to the model. In the latter case, the ``field_name`` will be the "
"``related_name`` defined by the user or the name automatically generated by "
"Django itself."
msgstr ""

#: ../../ref/models/meta.txt:39
msgid ""
":attr:`Hidden fields <django.db.models.Field.hidden>` cannot be retrieved by "
"name."
msgstr ""

#: ../../ref/models/meta.txt:42
msgid ""
"If a field with the given name is not found a :class:`~django.core."
"exceptions.FieldDoesNotExist` exception will be raised."
msgstr ""

#: ../../ref/models/meta.txt:65
msgid "Retrieving all field instances of a model"
msgstr ""

#: ../../ref/models/meta.txt:69
msgid ""
"Returns a tuple of fields associated with a model. ``get_fields()`` accepts "
"two parameters that can be used to control which fields are returned:"
msgstr ""

#: ../../ref/models/meta.txt:77
msgid "include_parents"
msgstr ""

#: ../../ref/models/meta.txt:73
msgid ""
"``True`` by default. Recursively includes fields defined on parent classes. "
"If set to ``False``, ``get_fields()`` will only search for fields declared "
"directly on the current model. Fields from models that directly inherit from "
"abstract models or proxy classes are considered to be local, not on the "
"parent."
msgstr ""

#: ../../ref/models/meta.txt:84
msgid "include_hidden"
msgstr ""

#: ../../ref/models/meta.txt:80
msgid ""
"``False`` by default. If set to ``True``, ``get_fields()`` will include "
"fields that are used to back other field's functionality. This will also "
"include any fields that have a ``related_name`` (such as :class:`~django.db."
"models.ManyToManyField`, or :class:`~django.db.models.ForeignKey`) that "
"start with a \"+\"."
msgstr ""

#: ../../ref/models/meta.txt:127
msgid "Migrating from the old API"
msgstr ""

#: ../../ref/models/meta.txt:129
msgid ""
"As part of the formalization of the ``Model._meta`` API (from the :class:"
"`django.db.models.options.Options` class), a number of methods and "
"properties have been deprecated and will be removed in Django 1.10."
msgstr ""

#: ../../ref/models/meta.txt:133
msgid "These old APIs can be replicated by either:"
msgstr ""

#: ../../ref/models/meta.txt:135
msgid ""
"invoking :meth:`Options.get_field() <django.db.models.options.Options."
"get_field()>`, or;"
msgstr ""

#: ../../ref/models/meta.txt:138
msgid ""
"invoking :meth:`Options.get_fields() <django.db.models.options.Options."
"get_fields()>` to retrieve a list of all fields, and then filtering this "
"list using the :ref:`field attributes <model-field-attributes>` that "
"describe (or retrieve, in the case of ``_with_model`` variants) the "
"properties of the desired fields."
msgstr ""

#: ../../ref/models/meta.txt:144
msgid ""
"Although it's possible to make strictly equivalent replacements of the old "
"methods, that might not be the best approach. Taking the time to refactor "
"any field loops to make better use of the new API - and possibly include "
"fields that were previously excluded - will almost certainly result in "
"better code."
msgstr ""

#: ../../ref/models/meta.txt:149
msgid ""
"Assuming you have a model named ``MyModel``, the following substitutions can "
"be made to convert your code to the new API:"
msgstr ""

#: ../../ref/models/meta.txt:152
msgid "``MyModel._meta.get_field(name)`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:156
msgid "then check if:"
msgstr ""

#: ../../ref/models/meta.txt:158
msgid ""
"``f.auto_created == False``, because the new ``get_field()`` API will find "
"\"reverse\" relations, and:"
msgstr ""

#: ../../ref/models/meta.txt:161
msgid ""
"``f.is_relation and f.related_model is None``, because the new "
"``get_field()`` API will find :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey` relations."
msgstr ""

#: ../../ref/models/meta.txt:165
msgid ""
"``MyModel._meta.get_field_by_name(name)`` returns a tuple of these four "
"values with the following replacements:"
msgstr ""

#: ../../ref/models/meta.txt:168
msgid "``field`` can be found by ``MyModel._meta.get_field(name)``"
msgstr ""

#: ../../ref/models/meta.txt:170
msgid ""
"``model`` can be found through the :attr:`~django.db.models.Field.model` "
"attribute on the field."
msgstr ""

#: ../../ref/models/meta.txt:173
msgid ""
"``direct`` can be found by: ``not field.auto_created or field.concrete``"
msgstr ""

#: ../../ref/models/meta.txt:175
msgid ""
"The :attr:`~django.db.models.Field.auto_created` check excludes all \"forward"
"\" and \"reverse\" relations that are created by Django, but this also "
"includes ``AutoField`` and ``OneToOneField`` on proxy models. We avoid "
"filtering out these attributes using the :attr:`concrete <django.db.models."
"Field.concrete>` attribute."
msgstr ""

#: ../../ref/models/meta.txt:181
msgid ""
"``m2m`` can be found through the :attr:`~django.db.models.Field."
"many_to_many` attribute on the field."
msgstr ""

#: ../../ref/models/meta.txt:184
msgid "``MyModel._meta.get_fields_with_model()`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:194
msgid "``MyModel._meta.get_concrete_fields_with_model()`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:206
msgid "``MyModel._meta.get_m2m_with_model()`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:214
msgid "``MyModel._meta.get_all_related_objects()`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:222
msgid "``MyModel._meta.get_all_related_objects_with_model()`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:231
msgid "``MyModel._meta.get_all_related_many_to_many_objects()`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:238
msgid "``MyModel._meta.get_all_related_m2m_objects_with_model()`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:246
msgid "``MyModel._meta.get_all_field_names()`` becomes::"
msgstr ""

#: ../../ref/models/meta.txt:257
msgid ""
"This provides a 100% backwards compatible replacement, ensuring that both "
"field names and attribute names ``ForeignKey``\\s are included, but fields "
"associated with ``GenericForeignKey``\\s are not. A simpler version would "
"be::"
msgstr ""

#: ../../ref/models/meta.txt:263
msgid ""
"While this isn't 100% backwards compatible, it may be sufficient in many "
"situations."
msgstr ""
