# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/models/meta.txt:3
msgid "Model ``_meta`` API"
msgstr ""

#: ../../ref/models/meta.txt:10
msgid ""
"The model ``_meta`` API is at the core of the Django ORM. It enables other "
"parts of the system such as lookups, queries, forms, and the admin to "
"understand the capabilities of each model. The API is accessible through the "
"``_meta`` attribute of each model class, which is an instance of an ``django."
"db.models.options.Options`` object."
msgstr ""

#: ../../ref/models/meta.txt:16
msgid "Methods that it provides can be used to:"
msgstr ""

#: ../../ref/models/meta.txt:18
msgid "Retrieve all field instances of a model"
msgstr ""

#: ../../ref/models/meta.txt:19
msgid "Retrieve a single field instance of a model by name"
msgstr ""

#: ../../ref/models/meta.txt:24
msgid "Field access API"
msgstr ""

#: ../../ref/models/meta.txt:27
msgid "Retrieving a single field instance of a model by name"
msgstr ""

#: ../../ref/models/meta.txt:31
msgid "Returns the field instance given a name of a field."
msgstr ""

#: ../../ref/models/meta.txt:33
msgid ""
"``field_name`` can be the name of a field on the model, a field on an "
"abstract or inherited model, or a field defined on another model that points "
"to the model. In the latter case, the ``field_name`` will be (in order of "
"preference) the :attr:`~.ForeignKey.related_query_name` set by the user, "
"the :attr:`~.ForeignKey.related_name` set by the user, or the name "
"automatically generated by Django."
msgstr ""

#: ../../ref/models/meta.txt:40
msgid ""
":attr:`Hidden fields <django.db.models.Field.hidden>` cannot be retrieved by "
"name."
msgstr ""

#: ../../ref/models/meta.txt:43
msgid ""
"If a field with the given name is not found a :class:`~django.core."
"exceptions.FieldDoesNotExist` exception will be raised."
msgstr ""

#: ../../ref/models/meta.txt:66
msgid "Retrieving all field instances of a model"
msgstr ""

#: ../../ref/models/meta.txt:70
msgid ""
"Returns a tuple of fields associated with a model. ``get_fields()`` accepts "
"two parameters that can be used to control which fields are returned:"
msgstr ""

#: ../../ref/models/meta.txt:78
msgid "``include_parents``"
msgstr ""

#: ../../ref/models/meta.txt:74
msgid ""
"``True`` by default. Recursively includes fields defined on parent classes. "
"If set to ``False``, ``get_fields()`` will only search for fields declared "
"directly on the current model. Fields from models that directly inherit from "
"abstract models or proxy classes are considered to be local, not on the "
"parent."
msgstr ""

#: ../../ref/models/meta.txt:85
msgid "``include_hidden``"
msgstr ""

#: ../../ref/models/meta.txt:81
msgid ""
"``False`` by default. If set to ``True``, ``get_fields()`` will include "
"fields that are used to back other field's functionality. This will also "
"include any fields that have a ``related_name`` (such as :class:`~django.db."
"models.ManyToManyField`, or :class:`~django.db.models.ForeignKey`) that "
"start with a \"+\"."
msgstr ""
