# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2014-07-30 13:35+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 811719c96a524b19b85ece86cd8d1244
#: ../../ref/models/lookups.txt:3
msgid "Lookup API reference"
msgstr ""

# 084189f82cc74adca5dafdfe6fca28b8
#: ../../ref/models/lookups.txt:10
msgid ""
"This document has the API references of lookups, the Django API for building "
"the ``WHERE`` clause of a database query. To learn how to *use* lookups, "
"see :doc:`/topics/db/queries`; to learn how to *create* new lookups, see :"
"doc:`/howto/custom-lookups`."
msgstr ""

#: ../../ref/models/lookups.txt:15
msgid ""
"The lookup API has two components: a :class:`~lookups.RegisterLookupMixin` "
"class that registers lookups, and the :ref:`Query Expression API <query-"
"expression>`, a set of methods that a class has to implement to be "
"registrable as a lookup."
msgstr ""

# 751eae3eb0094b2798faec59e1ece012
#: ../../ref/models/lookups.txt:19
msgid ""
"Django has two base classes that follow the query expression API and from "
"where all Django builtin lookups are derived:"
msgstr ""

# 3827fb4df6fd469891fdf728bd21f804
#: ../../ref/models/lookups.txt:22
msgid ""
":class:`Lookup`: to lookup a field (e.g. the ``exact`` of "
"``field_name__exact``)"
msgstr ""

# 8a3b655675dc4f4a9a9eee9311bc917a
#: ../../ref/models/lookups.txt:23
msgid ":class:`Transform`: to transform a field"
msgstr ""

# 98b476e4aacf46dd9a71d35ca5db68a4
#: ../../ref/models/lookups.txt:25
msgid "A lookup expression consists of three parts:"
msgstr ""

# 8b1ce3b941a34e32b2b1db4721e69cfb
#: ../../ref/models/lookups.txt:27
msgid ""
"Fields part (e.g. ``Book.objects.filter(author__best_friends__first_name..."
"``);"
msgstr ""

# 676012f22e3e4f4caf3c5c59ddee585f
#: ../../ref/models/lookups.txt:28
msgid ""
"Transforms part (may be omitted) (e.g. ``__lower__first3chars__reversed``);"
msgstr ""

# e596e15c8179426a9734fd4e1aff4fac
#: ../../ref/models/lookups.txt:29
msgid ""
"A lookup (e.g. ``__icontains``) that, if omitted, defaults to ``__exact``."
msgstr ""

# c9e464ea2d4c4a99aacb2e6b6f303a79
#: ../../ref/models/lookups.txt:34
msgid "Registration API"
msgstr ""

# df0037161f6b48ebb27aa8631e12b3a6
#: ../../ref/models/lookups.txt:36
msgid ""
"Django uses :class:`~lookups.RegisterLookupMixin` to give a class the "
"interface to register lookups on itself. The two prominent examples are :"
"class:`~django.db.models.Field`, the base class of all model fields, and "
"``Aggregate``, the base class of all Django aggregates."
msgstr ""

# 278c733008d04feab979b43a01d8f199
#: ../../ref/models/lookups.txt:43
msgid "A mixin that implements the lookup API on a class."
msgstr ""

#: ../../ref/models/lookups.txt:47
msgid ""
"Registers a new lookup in the class. For example ``DateField."
"register_lookup(YearExact)`` will register ``YearExact`` lookup on "
"``DateField``. It overrides a lookup that already exists with the same name. "
"``lookup_name`` will be used for this lookup if provided, otherwise ``lookup."
"lookup_name`` will be used."
msgstr ""

# 5a048b8ffbef4f2fa8ad4f889d5ceac6
#: ../../ref/models/lookups.txt:55
msgid ""
"Returns the :class:`Lookup` named ``lookup_name`` registered in the class. "
"The default implementation looks recursively on all parent classes and "
"checks if any has a registered lookup named ``lookup_name``, returning the "
"first match."
msgstr ""

# 1173cf23ba5c4df6bff91ebf9089007c
#: ../../ref/models/lookups.txt:62
msgid ""
"Returns a :class:`Transform` named ``transform_name``. The default "
"implementation looks recursively on all parent classes to check if any has "
"the registered transform named ``transform_name``, returning the first match."
msgstr ""

#: ../../ref/models/lookups.txt:67
msgid ""
"For a class to be a lookup, it must follow the :ref:`Query Expression API "
"<query-expression>`. :class:`~Lookup` and :class:`~Transform` naturally "
"follow this API."
msgstr ""

# 4b534ad89765488d98de3771ed302340
#: ../../ref/models/lookups.txt:74
msgid "The Query Expression API"
msgstr ""

# 025a35932d0447a3a219bb09ea790b0f
#: ../../ref/models/lookups.txt:76
msgid ""
"The query expression API is a common set of methods that classes define to "
"be usable in query expressions to translate themselves into SQL expressions. "
"Direct field references, aggregates, and ``Transform`` are examples that "
"follow this API. A class is said to follow the query expression API when it "
"implements the following methods:"
msgstr ""

#: ../../ref/models/lookups.txt:84
msgid ""
"Responsible for producing the query string and parameters for the "
"expression. The ``compiler`` is an ``SQLCompiler`` object, which has a "
"``compile()`` method that can be used to compile other expressions. The "
"``connection`` is the connection used to execute the query."
msgstr ""

#: ../../ref/models/lookups.txt:89
msgid ""
"Calling ``expression.as_sql()`` is usually incorrect - instead ``compiler."
"compile(expression)`` should be used. The ``compiler.compile()`` method will "
"take care of calling vendor-specific methods of the expression."
msgstr ""

#: ../../ref/models/lookups.txt:93
msgid ""
"Custom keyword arguments may be defined on this method if it's likely that "
"``as_vendorname()`` methods or subclasses will need to supply data to "
"override the generation of the SQL string. See :meth:`Func.as_sql` for "
"example usage."
msgstr ""

#: ../../ref/models/lookups.txt:100
msgid ""
"Works like ``as_sql()`` method. When an expression is compiled by ``compiler."
"compile()``, Django will first try to call ``as_vendorname()``, where "
"``vendorname`` is the vendor name of the backend used for executing the "
"query. The ``vendorname`` is one of ``postgresql``, ``oracle``, ``sqlite``, "
"or ``mysql`` for Django's built-in backends."
msgstr ""

# 8a2177068e404518837a84d738637327
#: ../../ref/models/lookups.txt:108
msgid ""
"Must return the lookup named ``lookup_name``. For instance, by returning "
"``self.output_field.get_lookup(lookup_name)``."
msgstr ""

# cf4e964796c148f4b2569d93c3089f84
#: ../../ref/models/lookups.txt:113
msgid ""
"Must return the lookup named ``transform_name``. For instance, by returning "
"``self.output_field.get_transform(transform_name)``."
msgstr ""

# 1011aa68450f43cfa20e6228d22d7064
#: ../../ref/models/lookups.txt:118
msgid ""
"Defines the type of class returned by the ``get_lookup()`` method. It must "
"be a :class:`~django.db.models.Field` instance."
msgstr ""

#: ../../ref/models/lookups.txt:122
msgid "``Transform`` reference"
msgstr ""

# 780e9d3ac6634d43adc0ef8ef16ee6b6
#: ../../ref/models/lookups.txt:126
msgid ""
"A ``Transform`` is a generic class to implement field transformations. A "
"prominent example is ``__year`` that transforms a ``DateField`` into a "
"``IntegerField``."
msgstr ""

# 1bfac77d0292493b8f78b2a7ab63d803
#: ../../ref/models/lookups.txt:130
msgid ""
"The notation to use a ``Transform`` in an lookup expression is "
"``<expression>__<transformation>`` (e.g. ``date__year``)."
msgstr ""

#: ../../ref/models/lookups.txt:133
msgid ""
"This class follows the :ref:`Query Expression API <query-expression>`, which "
"implies that you can use ``<expression>__<transform1>__<transform2>``. It's "
"a specialized :ref:`Func() expression <func-expressions>` that only accepts "
"one argument.  It can also be used on the right hand side of a filter or "
"directly as an annotation."
msgstr ""

#: ../../ref/models/lookups.txt:141
msgid ""
"A boolean indicating whether this transformation should apply to both "
"``lhs`` and ``rhs``. Bilateral transformations will be applied to ``rhs`` in "
"the same order as they appear in the lookup expression. By default it is set "
"to ``False``. For example usage, see :doc:`/howto/custom-lookups`."
msgstr ""

#: ../../ref/models/lookups.txt:148
msgid ""
"The left-hand side - what is being transformed. It must follow the :ref:"
"`Query Expression API <query-expression>`."
msgstr ""

# cd98e1b475e34bc48856f0be8ca85a90
#: ../../ref/models/lookups.txt:153
msgid ""
"The name of the lookup, used for identifying it on parsing query "
"expressions. It cannot contain the string ``\"__\"``."
msgstr ""

# 49c996b127c94a3fab1e3eb33aae5384
#: ../../ref/models/lookups.txt:158
msgid ""
"Defines the class this transformation outputs. It must be a :class:`~django."
"db.models.Field` instance. By default is the same as its ``lhs."
"output_field``."
msgstr ""

#: ../../ref/models/lookups.txt:163
msgid "``Lookup`` reference"
msgstr ""

# 51e791ea5c0443548e941aa013c0e844
#: ../../ref/models/lookups.txt:167
msgid ""
"A ``Lookup`` is a generic class to implement lookups. A lookup is a query "
"expression with a left-hand side, :attr:`lhs`; a right-hand side, :attr:"
"`rhs`; and a ``lookup_name`` that is used to produce a boolean comparison "
"between ``lhs`` and ``rhs`` such as ``lhs in rhs`` or ``lhs > rhs``."
msgstr ""

# c5d20306785345688ccd38f1e74fe21c
#: ../../ref/models/lookups.txt:173
msgid ""
"The notation to use a lookup in an expression is "
"``<lhs>__<lookup_name>=<rhs>``."
msgstr ""

#: ../../ref/models/lookups.txt:176
msgid ""
"This class doesn't follow the :ref:`Query Expression API <query-expression>` "
"since it has ``=<rhs>`` on its construction: lookups are always the end of a "
"lookup expression."
msgstr ""

#: ../../ref/models/lookups.txt:182
msgid ""
"The left-hand side - what is being looked up. The object must follow the :"
"ref:`Query Expression API <query-expression>`."
msgstr ""

# 1f25150d27614472a72d6a1f7b0c7e66
#: ../../ref/models/lookups.txt:187
msgid ""
"The right-hand side - what ``lhs`` is being compared against. It can be a "
"plain value, or something that compiles into SQL, typically an ``F()`` "
"object or a ``QuerySet``."
msgstr ""

# aaf7697ed8ff484c8b8ee6d276fc997d
#: ../../ref/models/lookups.txt:193
msgid ""
"The name of this lookup, used to identify it on parsing query expressions. "
"It cannot contain the string ``\"__\"``."
msgstr ""

#: ../../ref/models/lookups.txt:198
msgid ""
"Returns a tuple ``(lhs_string, lhs_params)``, as returned by ``compiler."
"compile(lhs)``. This method can be overridden to tune how the ``lhs`` is "
"processed."
msgstr ""

#: ../../ref/models/lookups.txt:202
msgid ""
"``compiler`` is an ``SQLCompiler`` object, to be used like ``compiler."
"compile(lhs)`` for compiling ``lhs``. The ``connection`` can be used for "
"compiling vendor specific SQL. If ``lhs`` is not ``None``, use it as the "
"processed ``lhs`` instead of ``self.lhs``."
msgstr ""

# cc9869f701144d5dad70c6b80db4cf96
#: ../../ref/models/lookups.txt:209
msgid "Behaves the same way as :meth:`process_lhs`, for the right-hand side."
msgstr ""
