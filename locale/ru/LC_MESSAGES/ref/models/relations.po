# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2014, 2015, 2016, 2017.
# Dmitriy Nikitin <brain2dump@gmail.com>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-03 16:48+0300\n"
"PO-Revision-Date: 2018-08-08 14:27+0300\n"
"Last-Translator: Dmitriy Nikitin <brain2dump@gmail.com>\n"
"Language-Team: русский <>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.7\n"

# 862add7325e54a86935ef82f193766ea
#: ../../ref/models/relations.txt:3
msgid "Related objects reference"
msgstr "Работа со связанными объектами"

# e1c7f7dd1a804cd2bea2c5714ba65fed
#: ../../ref/models/relations.txt:9
msgid ""
"A \"related manager\" is a manager used in a one-to-many or many-to-many "
"related context. This happens in two cases:"
msgstr ""
"\"Менеджер связанных объектов\" -- это менеджер, который используется для "
"связей один-ко-многим и многие-ко-многим. Это происходит в двух случаях:"

# 0017aa2b89c843108824b52ae304ab43
#: ../../ref/models/relations.txt:12
msgid ""
"The \"other side\" of a :class:`~django.db.models.ForeignKey` relation. That "
"is::"
msgstr ""
"\"Обратная связь\" для :class:`~django.db.models.ForeignKey`. Например::"

# 18ff00b908124a598bf3481e5644625a
#: ../../ref/models/relations.txt:24
msgid ""
"In the above example, the methods below will be available on the manager "
"``reporter.article_set``."
msgstr ""
"В этом примере, методы описанные ниже будут доступны через менеджер "
"``reporter.article_set``."

# 503af94016724c07b472310a32593adc
#: ../../ref/models/relations.txt:27
msgid "Both sides of a :class:`~django.db.models.ManyToManyField` relation::"
msgstr ""
"Для обоих сторон связи через :class:`~django.db.models.ManyToManyField`::"

# d4395cf5f63f448596cbe1956345e751
#: ../../ref/models/relations.txt:36
msgid ""
"In this example, the methods below will be available both on ``topping."
"pizza_set`` and on ``pizza.toppings``."
msgstr ""
"В этом примере, методы описанные ниже будут доступны для менеджеров "
"``topping.pizza_set`` и ``pizza.toppings``."

# 8aa731d862384f3bbbf9579d82d38cc2
#: ../../ref/models/relations.txt:41
msgid "Adds the specified model objects to the related object set."
msgstr "Добавляет указанный объект модели к множеству связанных объектов."

# 57160862b5aa4db1b283293cd41686d5
#: ../../ref/models/relations.txt:43
msgid "Example::"
msgstr "Например::"

#: ../../ref/models/relations.txt:49
msgid ""
"In the example above, in the case of a :class:`~django.db.models.ForeignKey` "
"relationship, :meth:`QuerySet.update() <django.db.models.query.QuerySet."
"update>` is used to perform the update. This requires the objects to already "
"be saved."
msgstr ""
"В примере выше, при связи через :class:`~django.db.models.ForeignKey` "
"используется :meth:`QuerySet.update() <django.db.models.query.QuerySet."
"update>`. Для этого объекты должны быть сохранены."

#: ../../ref/models/relations.txt:55
msgid ""
"You can use the ``bulk=False`` argument to instead have the related manager "
"perform the update by calling ``e.save()``."
msgstr ""
"Вы можете указать аргумент ``bulk=False``, чтобы менеджер связанных объектов "
"использовал ``e.save()``."

# 86c70515afe24f8581fcb3b65da608d9
#: ../../ref/models/relations.txt:58
msgid ""
"Using ``add()`` with a many-to-many relationship, however, will not call any "
"``save()`` methods (the ``bulk`` argument doesn't exist), but rather create "
"the relationships using :meth:`QuerySet.bulk_create() <django.db.models."
"query.QuerySet.bulk_create>`. If you need to execute some custom logic when "
"a relationship is created, listen to the :data:`~django.db.models.signals."
"m2m_changed` signal, which will trigger ``pre_add`` and ``post_add`` actions."
msgstr ""
"Использование ``add()`` для связей многие-ко-многим не вызывает метод "
"``save()`` (аргумент ``bulk`` отсутствует), а создает связывающие объекты с "
"помощью :meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet."
"bulk_create>`. Если вам необходима дополнительная логика при обновлении "
"связей, обрабатывайте сигнал :data:`~django.db.models.signals.m2m_changed`, "
"который сработает при действиях ``pre_add`` и ``post_add``."

#: ../../ref/models/relations.txt:66
msgid ""
"Using ``add()`` on a relation that already exists won't duplicate the "
"relation, but it will still trigger signals."
msgstr ""
"Использование ``add()`` для уже уже существующих связей не будет вызывать их "
"дублирования, но сигнал все равно будет срабатывать."

# 6053c6088b0942b3ac4b66c23105e94b
#: ../../ref/models/relations.txt:71
msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object::"
msgstr ""
"Создает новый объект, сохраняет его и добавляет к связанным объектам. "
"Возвращает созданный объект::"

# 4bc23bbef79e4eb0a31c7a2fab77b24e
#: ../../ref/models/relations.txt:83
msgid "This is equivalent to (but much simpler than)::"
msgstr "Аналогично (но значительно проще)::"

# 7a9070ca828748e9a2f59180bb96b09a
#: ../../ref/models/relations.txt:94
msgid ""
"Note that there's no need to specify the keyword argument of the model that "
"defines the relationship. In the above example, we don't pass the parameter "
"``blog`` to ``create()``. Django figures out that the new ``Entry`` object's "
"``blog`` field should be set to ``b``."
msgstr ""
"Заметим, что не обязательно указывать аргумент для поля, которое определяет "
"связь. В примере выше, мы не передавали аргумент ``blog`` для ``create()``. "
"Django самостоятельно определит, что поле ``blog`` нового объекта ``Entry`` "
"должно содержать объект ``b``."

# 084732d522a34c5dbf1b986daf386a4e
#: ../../ref/models/relations.txt:101
msgid "Removes the specified model objects from the related object set::"
msgstr "Удаляет указанный объект из списка связанных объектов::"

# 0ce719d7aea5409e968995aab58d28c4
#: ../../ref/models/relations.txt:107
msgid ""
"Similar to :meth:`add()`, ``e.save()`` is called in the example above to "
"perform the update. Using ``remove()`` with a many-to-many relationship, "
"however, will delete the relationships using :meth:`QuerySet.delete()<django."
"db.models.query.QuerySet.delete>` which means no model ``save()`` methods "
"are called; listen to the :data:`~django.db.models.signals.m2m_changed` "
"signal if you wish to execute custom code when a relationship is deleted."
msgstr ""
"Как и :meth:`add()`, для обновления данных вызывается метод ``e.save()``. "
"При использовании ``remove()`` для связей многое-ко-многим связи удаляются с "
"помощью метода :meth:`QuerySet.delete()<django.db.models.query.QuerySet."
"delete>`, метод модели ``save()`` не вызывается. Если вам необходима "
"дополнительная логика при обновлении связей, обрабатывайте сигнал :data:"
"`~django.db.models.signals.m2m_changed`."

# fd2a15f9f77349f2bbf011184cf9f347
#: ../../ref/models/relations.txt:115
msgid ""
"For :class:`~django.db.models.ForeignKey` objects, this method only exists "
"if ``null=True``. If the related field can't be set to ``None`` (``NULL``), "
"then an object can't be removed from a relation without being added to "
"another. In the above example, removing ``e`` from ``b.entry_set()`` is "
"equivalent to doing ``e.blog = None``, and because the ``blog`` :class:"
"`~django.db.models.ForeignKey` doesn't have ``null=True``, this is invalid."
msgstr ""
"Метод существует только для :class:`~django.db.models.ForeignKey` с "
"``null=True``. Если внешний ключ не может быть установлен в ``None`` "
"(``NULL``), объект не может быть удален из связи без добавления нового "
"объекта. В примере выше, удаление ``e`` из ``b.entry_set()`` аналогично ``e."
"blog = None``, и так как :class:`~django.db.models.ForeignKey` в ``blog`` не "
"содержит ``null=True``, это невозможно."

# 5486fc7ccf9f4afeb876cc9e908c5df0
#: ../../ref/models/relations.txt:123
msgid ""
"For :class:`~django.db.models.ForeignKey` objects, this method accepts a "
"``bulk`` argument to control how to perform the operation. If ``True`` (the "
"default), ``QuerySet.update()`` is used. If ``bulk=False``, the ``save()`` "
"method of each individual model instance is called instead. This triggers "
"the :data:`~django.db.models.signals.pre_save` and :data:`~django.db.models."
"signals.post_save` signals and comes at the expense of performance."
msgstr ""
"Для объектов :class:`~django.db.models.ForeignKey` метод принимает аргумент "
"``bulk``, который определяет работу сохранения. Если указать ``True`` (по "
"умолчанию), будет использоваться ``QuerySet.update()``. При ``bulk=False`` "
"будет вызван метод ``save()`` для каждого объекта. Это вызывает сигналы :"
"data:`~django.db.models.signals.pre_save` и :data:`~django.db.models.signals."
"post_save`, что работает немного медленне."

#: ../../ref/models/relations.txt:132 ../../ref/models/relations.txt:149
#: ../../ref/models/relations.txt:168
msgid ""
"For many-to-many relationships, the ``bulk`` keyword argument doesn't exist."
msgstr "Для связей многие-ко-многим ключевой аргумент ``bulk`` отсутствует."

# 3d87d6cce5af49eb9f725e6ff16904d3
#: ../../ref/models/relations.txt:137
msgid "Removes all objects from the related object set::"
msgstr "Удаляет все объекты из списка связанных::"

# 15f3cf7e85814bb9b0130e689bd2e6ee
#: ../../ref/models/relations.txt:142
msgid ""
"Note this doesn't delete the related objects -- it just disassociates them."
msgstr ""
"Заметим, что связанные объекты не удаляются -- просто разрывается связь."

# 394718a224f5421e9cbf1dd47ba05f2e
#: ../../ref/models/relations.txt:145
msgid ""
"Just like ``remove()``, ``clear()`` is only available on :class:`~django.db."
"models.ForeignKey`\\s where ``null=True`` and it also accepts the ``bulk`` "
"keyword argument."
msgstr ""
"Так же как и ``remove()``, ``clear()`` доступен только для :class:`~django."
"db.models.ForeignKey` с ``null=True`` и принимает аргумент ``bulk``."

# 3d87d6cce5af49eb9f725e6ff16904d3
#: ../../ref/models/relations.txt:154
msgid "Replace the set of related objects::"
msgstr "Удаляет все объекты из списка связанных::"

#: ../../ref/models/relations.txt:159
msgid ""
"This method accepts a ``clear`` argument to control how to perform the "
"operation. If ``False`` (the default), the elements missing from the new set "
"are removed using ``remove()`` and only the new ones are added. If "
"``clear=True``, the ``clear()`` method is called instead and the whole set "
"is added at once."
msgstr ""
"Этот метод принимает аргумент ``clear``, чтобы управлять выполнение "
"операции. При ``False`` (по умолчанию), объекты, которые отсутствуют в новом "
"множестве, будут удалены с помощью команды ``remove()``, и только новые "
"объекты будут добавлены. При ``clear=True``, вызывается метод ``clear()`` и "
"все множество добавляет за раз."

#: ../../ref/models/relations.txt:165
msgid ""
"For :class:`~django.db.models.ForeignKey` objects, the ``bulk`` argument is "
"passed on to :meth:`add` and :meth:`remove`."
msgstr ""
"Для объектов класса :class:`~django.db.models.ForeignKey` аргумент ``bulk`` "
"передается в методах :meth:`add` и :meth:`remove`."

#: ../../ref/models/relations.txt:171
msgid ""
"Note that since ``set()`` is a compound operation, it is subject to race "
"conditions. For instance, new objects may be added to the database in "
"between the call to ``clear()`` and the call to ``add()``."
msgstr ""
"Обратите внимание, т.к. ``set()`` составная операция, она подвержена "
"состоянию гонки. Например, в базу данных могут быть добавлены новые объекты "
"между вызовами ``clear()`` и ``add()``."

# fd563485ae744e82af3d1f45e9f50649
#: ../../ref/models/relations.txt:177
msgid ""
"Note that ``add()``, ``create()``, ``remove()``, ``clear()``, and ``set()`` "
"all apply database changes immediately for all types of related fields. In "
"other words, there is no need to call ``save()`` on either end of the "
"relationship."
msgstr ""
"Обратите внимание, ``add()``, ``create()``, ``remove()`` и ``clear()`` сразу "
"сохраняют изменения для всех типов связей. Другими словами, нет "
"необходимости вызывать ``save()``."

# f3219a2b71514126a525f33435dc4bb8
#: ../../ref/models/relations.txt:182
msgid ""
"Also, if you are using :ref:`an intermediate model <intermediary-"
"manytomany>` for a many-to-many relationship, then the ``add()``, "
"``create()``, ``remove()``, and ``set()`` methods are disabled."
msgstr ""
"Также, если вы используете :ref:`промежуточную модель <intermediary-"
"manytomany>` для связи многое ко многим, методы ``add()``, ``create()``, "
"``remove()`` и ``set()`` могут быть не доступны."

#: ../../ref/models/relations.txt:187
msgid ""
"If you use :meth:`~django.db.models.query.QuerySet.prefetch_related`, the "
"``add()``, ``remove()``, ``clear()``, and ``set()`` methods clear the "
"prefetched cache."
msgstr ""
"Если вы используете :meth:`~django.db.models.query.QuerySet."
"prefetch_related`, методы ``add()``, ``remove()``, ``clear()`` и ``set()`` "
"очистят кэш."

#~ msgid "The ``bulk`` argument is passed on to :meth:`add`."
#~ msgstr "Аргумент ``bulk`` передается в :meth:`add`."

#~ msgid "The clearing of the prefetched cache described above was added."
#~ msgstr "Добавлено описание очистки кэша."

# 66ac372ef29f4d65a60c0cb8c01fac4c
#~ msgid "Direct Assignment"
#~ msgstr "Непосредственная смена значения"

# 918cae70e5cc4882935ce22b3e485ff9
#~ msgid ""
#~ "A related object set can be replaced in bulk with one operation by "
#~ "assigning a new iterable of objects to it::"
#~ msgstr ""
#~ "Список связанных объектов можно поменять одной операцией, назначив список "
#~ "объектов::"

# 1ae548beb8c140bda39f6d01f7e68280
#~ msgid ""
#~ "If the foreign key relationship has ``null=True``, then the related "
#~ "manager will first disassociate any existing objects in the related set "
#~ "before adding the contents of ``new_list``. Otherwise the objects in "
#~ "``new_list`` will be added to the existing related object set."
#~ msgstr ""
#~ "Если внешний ключ определен с ``null=True``, сначала будут удалены все "
#~ "связанные объекты перед добавлением объектов из ``new_list``. Иначе "
#~ "объекты из ``new_list`` будут добавлены к списку существующих объектов."

#~ msgid ""
#~ "The ``bulk`` parameter was added. In older versions, foreign key updates "
#~ "were always done using ``save()``. Use ``bulk=False`` if you require the "
#~ "old behavior."
#~ msgstr ""
#~ "Был добавлен аргумент ``bulk``. В предыдущих версих обновления внешнего "
#~ "ключа всегда выполнялось с помощью ``save()``. Используйте ``bulk=False`` "
#~ "для предыдущего поведения."

#~ msgid ""
#~ "In earlier versions, direct assignment used to perform ``clear()`` "
#~ "followed by ``add()``. It now performs a ``set()`` with the keyword "
#~ "argument ``clear=False``."
#~ msgstr ""
#~ "В предыдущих версиях при прямом присваивании вызывался метод ``clear()`` "
#~ "и затем ``add()``. Теперь используется метод ``set()`` с аргументом "
#~ "``clear=False``."

# db9a48e35e0b4a3d963eabee73afef81
#~ msgid "These related managers have some extra methods:"
#~ msgstr "Эти менеджер содержат несколько дополнительных методов:"
