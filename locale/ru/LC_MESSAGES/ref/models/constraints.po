# Russian translations for Django package
# Английские переводы для пакета Django.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2020-02-13 22:13+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/models/constraints.txt:3
msgid "Constraints reference"
msgstr ""

#: ../../ref/models/constraints.txt:11
msgid ""
"The classes defined in this module create database constraints. They are "
"added in the model :attr:`Meta.constraints <django.db.models.Options."
"constraints>` option."
msgstr ""

#: ../../ref/models/constraints.txt:15
msgid "Referencing built-in constraints"
msgstr ""

#: ../../ref/models/constraints.txt:17
msgid ""
"Constraints are defined in ``django.db.models.constraints``, but for "
"convenience they're imported into :mod:`django.db.models`. The standard "
"convention is to use ``from django.db import models`` and refer to the "
"constraints as ``models.<Foo>Constraint``."
msgstr ""

#: ../../ref/models/constraints.txt:22
msgid "Constraints in abstract base classes"
msgstr ""

#: ../../ref/models/constraints.txt:24
msgid ""
"You must always specify a unique name for the constraint. As such, you "
"cannot normally specify a constraint on an abstract base class, since the :"
"attr:`Meta.constraints <django.db.models.Options.constraints>` option is "
"inherited by subclasses, with exactly the same values for the attributes "
"(including ``name``) each time. To work around name collisions, part of the "
"name may contain ``'%(app_label)s'`` and ``'%(class)s'``, which are "
"replaced, respectively, by the lowercased app label and class name of the "
"concrete model. For example ``CheckConstraint(check=Q(age__gte=18), "
"name='%(app_label)s_%(class)s_is_adult')``."
msgstr ""

#: ../../ref/models/constraints.txt:34
msgid "Validation of Constraints"
msgstr ""

#: ../../ref/models/constraints.txt:36
msgid ""
"In general constraints are **not** checked during ``full_clean()``, and do "
"not raise ``ValidationError``\\s. Rather you'll get a database integrity "
"error on ``save()``. ``UniqueConstraint``\\s without a :attr:"
"`~UniqueConstraint.condition` (i.e. non-partial unique constraints) are "
"different in this regard, in that they leverage the existing "
"``validate_unique()`` logic, and thus enable two-stage validation. In "
"addition to ``IntegrityError`` on ``save()``, ``ValidationError`` is also "
"raised during model validation when the ``UniqueConstraint`` is violated."
msgstr ""

#: ../../ref/models/constraints.txt:46
msgid "``CheckConstraint``"
msgstr ""

#: ../../ref/models/constraints.txt:50
msgid "Creates a check constraint in the database."
msgstr ""

#: ../../ref/models/constraints.txt:53
msgid "``check``"
msgstr ""

#: ../../ref/models/constraints.txt:57
msgid ""
"A :class:`Q` object that specifies the check you want the constraint to "
"enforce."
msgstr ""

#: ../../ref/models/constraints.txt:60
msgid ""
"For example, ``CheckConstraint(check=Q(age__gte=18), name='age_gte_18')`` "
"ensures the age field is never less than 18."
msgstr ""

#: ../../ref/models/constraints.txt:64 ../../ref/models/constraints.txt:94
msgid "``name``"
msgstr ""

#: ../../ref/models/constraints.txt:68 ../../ref/models/constraints.txt:98
msgid "The name of the constraint."
msgstr ""

#: ../../ref/models/constraints.txt:72 ../../ref/models/constraints.txt:102
msgid "Interpolation of  ``'%(app_label)s'`` and ``'%(class)s'`` was added."
msgstr ""

#: ../../ref/models/constraints.txt:75
msgid "``UniqueConstraint``"
msgstr ""

#: ../../ref/models/constraints.txt:79
msgid "Creates a unique constraint in the database."
msgstr ""

#: ../../ref/models/constraints.txt:82
msgid "``fields``"
msgstr ""

#: ../../ref/models/constraints.txt:86
msgid ""
"A list of field names that specifies the unique set of columns you want the "
"constraint to enforce."
msgstr ""

#: ../../ref/models/constraints.txt:89
msgid ""
"For example, ``UniqueConstraint(fields=['room', 'date'], "
"name='unique_booking')`` ensures each room can only be booked once for each "
"date."
msgstr ""

#: ../../ref/models/constraints.txt:105
msgid "``condition``"
msgstr ""

#: ../../ref/models/constraints.txt:109
msgid ""
"A :class:`Q` object that specifies the condition you want the constraint to "
"enforce."
msgstr ""

#: ../../ref/models/constraints.txt:112
msgid "For example::"
msgstr ""

#: ../../ref/models/constraints.txt:116
msgid "ensures that each user only has one draft."
msgstr ""

#: ../../ref/models/constraints.txt:118
msgid ""
"These conditions have the same database restrictions as :attr:`Index."
"condition`."
msgstr ""
