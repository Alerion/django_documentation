# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/models/conditional-expressions.txt:3
msgid "Conditional Expressions"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:7
msgid ""
"Conditional expressions let you use :keyword:`if` ... :keyword:`elif` ... :"
"keyword:`else` logic within filters, annotations, aggregations, and updates. "
"A conditional expression evaluates a series of conditions for each row of a "
"table and returns the matching result expression. Conditional expressions "
"can also be combined and nested like other :doc:`expressions <expressions>`."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:14
msgid "The conditional expression classes"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:16
msgid "We'll be using the following model in the subsequent examples::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:38
msgid "``When``"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:42
msgid ""
"A ``When()`` object is used to encapsulate a condition and its result for "
"use in the conditional expression. Using a ``When()`` object is similar to "
"using the :meth:`~django.db.models.query.QuerySet.filter` method. The "
"condition can be specified using :ref:`field lookups <field-lookups>` or :"
"class:`~django.db.models.Q` objects. The result is provided using the "
"``then`` keyword."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:49
msgid "Some examples::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:64
msgid "Keep in mind that each of these values can be an expression."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:68
msgid ""
"Since the ``then`` keyword argument is reserved for the result of the "
"``When()``, there is a potential conflict if a :class:`~django.db.models."
"Model` has a field named ``then``. This can be resolved in two ways::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:77
msgid "``Case``"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:81
msgid ""
"A ``Case()`` expression is like the :keyword:`if` ... :keyword:`elif` ... :"
"keyword:`else` statement in ``Python``. Each ``condition`` in the provided "
"``When()`` objects is evaluated in order, until one evaluates to a truthful "
"value. The ``result`` expression from the matching ``When()`` object is "
"returned."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:87
msgid "A simple example::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:115
msgid ""
"``Case()`` accepts any number of ``When()`` objects as individual arguments. "
"Other options are provided using keyword arguments. If none of the "
"conditions evaluate to ``TRUE``, then the expression given with the "
"``default`` keyword argument is returned. If a ``default`` argument isn't "
"provided, ``None`` is used."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:121
msgid ""
"If we wanted to change our previous query to get the discount based on how "
"long the ``Client`` has been with us, we could do so using lookups::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:139
msgid ""
"Remember that the conditions are evaluated in order, so in the above example "
"we get the correct result even though the second condition matches both Jane "
"Doe and Jack Black. This works just like an :keyword:`if` ... :keyword:"
"`elif` ... :keyword:`else` statement in ``Python``."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:144
msgid ""
"``Case()`` also works in a ``filter()`` clause. For example, to find gold "
"clients that registered more than a month ago and platinum clients that "
"registered more than a year ago::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:159
msgid "Advanced queries"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:161
msgid ""
"Conditional expressions can be used in annotations, aggregations, lookups, "
"and updates. They can also be combined and nested with other expressions. "
"This allows you to make powerful conditional queries."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:166
msgid "Conditional update"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:168
msgid ""
"Let's say we want to change the ``account_type`` for our clients to match "
"their registration dates. We can do this using a conditional expression and "
"the :meth:`~django.db.models.query.QuerySet.update` method::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:188
msgid "Conditional aggregation"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:190
msgid ""
"What if we want to find out how many clients there are for each "
"``account_type``? We can nest conditional expression within :ref:`aggregate "
"functions <aggregation-functions>` to achieve this::"
msgstr ""
