# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-17 17:48+0300\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/models/database-functions.txt:3
msgid "Database Functions"
msgstr ""

#: ../../ref/models/database-functions.txt:8
msgid ""
"The classes documented below provide a way for users to use functions "
"provided by the underlying database as annotations, aggregations, or filters "
"in Django. Functions are also :doc:`expressions <expressions>`, so they can "
"be used and combined with other expressions like :ref:`aggregate functions "
"<aggregation-functions>`."
msgstr ""

#: ../../ref/models/database-functions.txt:14
#: ../../ref/models/database-functions.txt:157
msgid "We'll be using the following model in examples of each function::"
msgstr ""

#: ../../ref/models/database-functions.txt:22
msgid ""
"We don't usually recommend allowing ``null=True`` for ``CharField`` since "
"this allows the field to have two \"empty values\", but it's important for "
"the ``Coalesce`` example below."
msgstr ""

#: ../../ref/models/database-functions.txt:29
msgid "Comparison and conversion functions"
msgstr ""

#: ../../ref/models/database-functions.txt:32
msgid "``Cast``"
msgstr ""

#: ../../ref/models/database-functions.txt:36
msgid ""
"Forces the result type of ``expression`` to be the one from ``output_field``."
msgstr ""

#: ../../ref/models/database-functions.txt:38
#: ../../ref/models/database-functions.txt:97
#: ../../ref/models/database-functions.txt:233
#: ../../ref/models/database-functions.txt:405
#: ../../ref/models/database-functions.txt:474
#: ../../ref/models/database-functions.txt:599
#: ../../ref/models/database-functions.txt:701
#: ../../ref/models/database-functions.txt:724
#: ../../ref/models/database-functions.txt:753
#: ../../ref/models/database-functions.txt:772
#: ../../ref/models/database-functions.txt:804
#: ../../ref/models/database-functions.txt:824
msgid "Usage example::"
msgstr ""

#: ../../ref/models/database-functions.txt:48
msgid "``Coalesce``"
msgstr ""

#: ../../ref/models/database-functions.txt:52
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"first non-null value (note that an empty string is not considered a null "
"value). Each argument must be of a similar type, so mixing text and numbers "
"will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:57
msgid "Usage examples::"
msgstr ""

#: ../../ref/models/database-functions.txt:79
msgid ""
"A Python value passed to ``Coalesce`` on MySQL may be converted to an "
"incorrect type unless explicitly cast to the correct database type:"
msgstr ""

#: ../../ref/models/database-functions.txt:89
msgid "``Greatest``"
msgstr ""

#: ../../ref/models/database-functions.txt:93
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"greatest value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:114
msgid ""
"``annotated_comment.last_updated`` will be the most recent of ``blog."
"modified`` and ``comment.modified``."
msgstr ""

#: ../../ref/models/database-functions.txt:119
msgid ""
"The behavior of ``Greatest`` when one or more expression may be ``null`` "
"varies between databases:"
msgstr ""

#: ../../ref/models/database-functions.txt:122
msgid ""
"PostgreSQL: ``Greatest`` will return the largest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:124
msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Greatest`` will "
"return ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:127
msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible minimum value to provide as a default."
msgstr ""

#: ../../ref/models/database-functions.txt:131
msgid "``Least``"
msgstr ""

#: ../../ref/models/database-functions.txt:135
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"least value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:141
msgid ""
"The behavior of ``Least`` when one or more expression may be ``null`` varies "
"between databases:"
msgstr ""

#: ../../ref/models/database-functions.txt:144
msgid ""
"PostgreSQL: ``Least`` will return the smallest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:146
msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Least`` will "
"return ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:149
msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible maximum value to provide as a default."
msgstr ""

#: ../../ref/models/database-functions.txt:155
msgid "Date functions"
msgstr ""

#: ../../ref/models/database-functions.txt:168
msgid "``Extract``"
msgstr ""

#: ../../ref/models/database-functions.txt:172
msgid "Extracts a component of a date as a number."
msgstr ""

#: ../../ref/models/database-functions.txt:174
msgid ""
"Takes an ``expression`` representing a ``DateField``, ``DateTimeField``, "
"``TimeField``, or ``DurationField`` and a ``lookup_name``, and returns the "
"part of the date referenced by ``lookup_name`` as an ``IntegerField``. "
"Django usually uses the databases' extract function, so you may use any "
"``lookup_name`` that your database supports. A ``tzinfo`` subclass, usually "
"provided by ``pytz``, can be passed to extract a value in a specific "
"timezone."
msgstr ""

#: ../../ref/models/database-functions.txt:183
msgid "Support for ``DurationField`` was added."
msgstr ""

#: ../../ref/models/database-functions.txt:185
msgid ""
"Given the datetime ``2015-06-15 23:30:01.000321+00:00``, the built-in "
"``lookup_name``\\s return:"
msgstr ""

#: ../../ref/models/database-functions.txt:188
msgid "\"year\": 2015"
msgstr ""

#: ../../ref/models/database-functions.txt:189
msgid "\"quarter\": 2"
msgstr ""

#: ../../ref/models/database-functions.txt:190
msgid "\"month\": 6"
msgstr ""

#: ../../ref/models/database-functions.txt:191
msgid "\"day\": 15"
msgstr ""

#: ../../ref/models/database-functions.txt:192
msgid "\"week\": 25"
msgstr ""

#: ../../ref/models/database-functions.txt:193
msgid "\"week_day\": 2"
msgstr ""

#: ../../ref/models/database-functions.txt:194
msgid "\"hour\": 23"
msgstr ""

#: ../../ref/models/database-functions.txt:195
msgid "\"minute\": 30"
msgstr ""

#: ../../ref/models/database-functions.txt:196
msgid "\"second\": 1"
msgstr ""

#: ../../ref/models/database-functions.txt:198
msgid ""
"If a different timezone like ``Australia/Melbourne`` is active in Django, "
"then the datetime is converted to the timezone before the value is "
"extracted. The timezone offset for Melbourne in the example date above is "
"+10:00. The values returned when this timezone is active will be the same as "
"above except for:"
msgstr ""

#: ../../ref/models/database-functions.txt:203
msgid "\"day\": 16"
msgstr ""

#: ../../ref/models/database-functions.txt:204
msgid "\"week_day\": 3"
msgstr ""

#: ../../ref/models/database-functions.txt:205
msgid "\"hour\": 9"
msgstr ""

#: ../../ref/models/database-functions.txt:207
msgid "``week_day`` values"
msgstr ""

#: ../../ref/models/database-functions.txt:209
msgid ""
"The ``week_day`` ``lookup_type`` is calculated differently from most "
"databases and from Python's standard functions. This function will return "
"``1`` for Sunday, ``2`` for Monday, through ``7`` for Saturday."
msgstr ""

#: ../../ref/models/database-functions.txt:213
msgid "The equivalent calculation in Python is::"
msgstr ""

#: ../../ref/models/database-functions.txt:220
msgid "``week`` values"
msgstr ""

#: ../../ref/models/database-functions.txt:222
msgid ""
"The ``week`` ``lookup_type`` is calculated based on `ISO-8601 <https://en."
"wikipedia.org/wiki/ISO-8601>`_, i.e., a week starts on a Monday. The first "
"week of a year is the one that contains the year's first Thursday, i.e. the "
"first week has the majority (four or more) of its days in the year. The "
"value returned is in the range 1 to 52 or 53."
msgstr ""

#: ../../ref/models/database-functions.txt:229
msgid ""
"Each ``lookup_name`` above has a corresponding ``Extract`` subclass (listed "
"below) that should typically be used instead of the more verbose equivalent, "
"e.g. use ``ExtractYear(...)`` rather than ``Extract(..., "
"lookup_name='year')``."
msgstr ""

#: ../../ref/models/database-functions.txt:253
msgid "``DateField`` extracts"
msgstr ""

#: ../../ref/models/database-functions.txt:283
msgid ""
"These are logically equivalent to ``Extract('date_field', lookup_name)``. "
"Each class is also a ``Transform`` registered on ``DateField`` and "
"``DateTimeField`` as ``__(lookup_name)``, e.g. ``__year``."
msgstr ""

#: ../../ref/models/database-functions.txt:287
msgid ""
"Since ``DateField``\\s don't have a time component, only ``Extract`` "
"subclasses that deal with date-parts can be used with ``DateField``::"
msgstr ""

#: ../../ref/models/database-functions.txt:314
msgid "``DateTimeField`` extracts"
msgstr ""

#: ../../ref/models/database-functions.txt:316
msgid ""
"In addition to the following, all extracts for ``DateField`` listed above "
"may also be used on ``DateTimeField``\\s ."
msgstr ""

#: ../../ref/models/database-functions.txt:331
msgid ""
"These are logically equivalent to ``Extract('datetime_field', "
"lookup_name)``. Each class is also a ``Transform`` registered on "
"``DateTimeField`` as ``__(lookup_name)``, e.g. ``__minute``."
msgstr ""

#: ../../ref/models/database-functions.txt:335
msgid "``DateTimeField`` examples::"
msgstr ""

#: ../../ref/models/database-functions.txt:365
msgid ""
"When :setting:`USE_TZ` is ``True`` then datetimes are stored in the database "
"in UTC. If a different timezone is active in Django, the datetime is "
"converted to that timezone before the value is extracted. The example below "
"converts to the Melbourne timezone (UTC +10:00), which changes the day, "
"weekday, and hour values that are returned::"
msgstr ""

#: ../../ref/models/database-functions.txt:383
msgid ""
"Explicitly passing the timezone to the ``Extract`` function behaves in the "
"same way, and takes priority over an active timezone::"
msgstr ""

#: ../../ref/models/database-functions.txt:398
msgid "``Now``"
msgstr ""

#: ../../ref/models/database-functions.txt:402
msgid ""
"Returns the database server's current date and time when the query is "
"executed, typically using the SQL ``CURRENT_TIMESTAMP``."
msgstr ""

#: ../../ref/models/database-functions.txt:411
msgid "PostgreSQL considerations"
msgstr ""

#: ../../ref/models/database-functions.txt:413
msgid ""
"On PostgreSQL, the SQL ``CURRENT_TIMESTAMP`` returns the time that the "
"current transaction started. Therefore for cross-database compatibility, "
"``Now()`` uses ``STATEMENT_TIMESTAMP`` instead. If you need the transaction "
"timestamp, use :class:`django.contrib.postgres.functions.TransactionNow`."
msgstr ""

#: ../../ref/models/database-functions.txt:419
msgid "``Trunc``"
msgstr ""

#: ../../ref/models/database-functions.txt:423
msgid "Truncates a date up to a significant component."
msgstr ""

#: ../../ref/models/database-functions.txt:425
msgid ""
"When you only care if something happened in a particular year, hour, or day, "
"but not the exact second, then ``Trunc`` (and its subclasses) can be useful "
"to filter or aggregate your data. For example, you can use ``Trunc`` to "
"calculate the number of sales per day."
msgstr ""

#: ../../ref/models/database-functions.txt:430
msgid ""
"``Trunc`` takes a single ``expression``, representing a ``DateField``, "
"``TimeField``, or ``DateTimeField``, a ``kind`` representing a date or time "
"part, and an ``output_field`` that's either ``DateTimeField()``, "
"``TimeField()``, or ``DateField()``. It returns a datetime, date, or time "
"depending on ``output_field``, with fields up to ``kind`` set to their "
"minimum value. If ``output_field`` is omitted, it will default to the "
"``output_field`` of ``expression``. A ``tzinfo`` subclass, usually provided "
"by ``pytz``, can be passed to truncate a value in a specific timezone."
msgstr ""

#: ../../ref/models/database-functions.txt:439
msgid ""
"Given the datetime ``2015-06-15 14:30:50.000321+00:00``, the built-in "
"``kind``\\s return:"
msgstr ""

#: ../../ref/models/database-functions.txt:442
msgid "\"year\": 2015-01-01 00:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:443
msgid "\"quarter\": 2015-04-01 00:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:444
msgid "\"month\": 2015-06-01 00:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:445
msgid "\"day\": 2015-06-15 00:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:446
msgid "\"hour\": 2015-06-15 14:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:447
msgid "\"minute\": 2015-06-15 14:30:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:448
msgid "\"second\": 2015-06-15 14:30:50+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:450
msgid ""
"If a different timezone like ``Australia/Melbourne`` is active in Django, "
"then the datetime is converted to the new timezone before the value is "
"truncated. The timezone offset for Melbourne in the example date above is "
"+10:00. The values returned when this timezone is active will be:"
msgstr ""

#: ../../ref/models/database-functions.txt:455
msgid "\"year\": 2015-01-01 00:00:00+11:00"
msgstr ""

#: ../../ref/models/database-functions.txt:456
msgid "\"quarter\": 2015-04-01 00:00:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:457
msgid "\"month\": 2015-06-01 00:00:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:458
msgid "\"day\": 2015-06-16 00:00:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:459
msgid "\"hour\": 2015-06-16 00:00:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:460
msgid "\"minute\": 2015-06-16 00:30:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:461
msgid "\"second\": 2015-06-16 00:30:50+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:463
msgid ""
"The year has an offset of +11:00 because the result transitioned into "
"daylight saving time."
msgstr ""

#: ../../ref/models/database-functions.txt:466
msgid ""
"Each ``kind`` above has a corresponding ``Trunc`` subclass (listed below) "
"that should typically be used instead of the more verbose equivalent, e.g. "
"use ``TruncYear(...)`` rather than ``Trunc(..., kind='year')``."
msgstr ""

#: ../../ref/models/database-functions.txt:470
msgid ""
"The subclasses are all defined as transforms, but they aren't registered "
"with any fields, because the obvious lookup names are already reserved by "
"the ``Extract`` subclasses."
msgstr ""

#: ../../ref/models/database-functions.txt:500
msgid "``DateField`` truncation"
msgstr ""

#: ../../ref/models/database-functions.txt:516
msgid ""
"These are logically equivalent to ``Trunc('date_field', kind)``. They "
"truncate all parts of the date up to ``kind`` which allows grouping or "
"filtering dates with less precision. ``expression`` can have an "
"``output_field`` of either ``DateField`` or ``DateTimeField``."
msgstr ""

#: ../../ref/models/database-functions.txt:521
msgid ""
"Since ``DateField``\\s don't have a time component, only ``Trunc`` "
"subclasses that deal with date-parts can be used with ``DateField``::"
msgstr ""

#: ../../ref/models/database-functions.txt:556
msgid "``DateTimeField`` truncation"
msgstr ""

#: ../../ref/models/database-functions.txt:563
msgid ""
"``TruncDate`` casts ``expression`` to a date rather than using the built-in "
"SQL truncate function. It's also registered as a transform on  "
"``DateTimeField`` as ``__date``."
msgstr ""

#: ../../ref/models/database-functions.txt:574
msgid ""
"``TruncTime`` casts ``expression`` to a time rather than using the built-in "
"SQL truncate function. It's also registered as a transform on "
"``DateTimeField`` as ``__time``."
msgstr ""

#: ../../ref/models/database-functions.txt:594
msgid ""
"These are logically equivalent to ``Trunc('datetime_field', kind)``. They "
"truncate all parts of the date up to ``kind`` and allow grouping or "
"filtering datetimes with less precision. ``expression`` must have an "
"``output_field`` of ``DateTimeField``."
msgstr ""

#: ../../ref/models/database-functions.txt:626
msgid "``TimeField`` truncation"
msgstr ""

#: ../../ref/models/database-functions.txt:642
msgid ""
"These are logically equivalent to ``Trunc('time_field', kind)``. They "
"truncate all parts of the time up to ``kind`` which allows grouping or "
"filtering times with less precision. ``expression`` can have an "
"``output_field`` of either ``TimeField`` or ``DateTimeField``."
msgstr ""

#: ../../ref/models/database-functions.txt:647
msgid ""
"Since ``TimeField``\\s don't have a date component, only ``Trunc`` "
"subclasses that deal with time-parts can be used with ``TimeField``::"
msgstr ""

#: ../../ref/models/database-functions.txt:683
msgid "Text functions"
msgstr ""

#: ../../ref/models/database-functions.txt:686
msgid "``Concat``"
msgstr ""

#: ../../ref/models/database-functions.txt:690
msgid ""
"Accepts a list of at least two text fields or expressions and returns the "
"concatenated text. Each argument must be of a text or char type. If you want "
"to concatenate a ``TextField()`` with a ``CharField()``, then be sure to "
"tell Django that the ``output_field`` should be a ``TextField()``. "
"Specifying an ``output_field`` is also required when concatenating a "
"``Value`` as in the example below."
msgstr ""

#: ../../ref/models/database-functions.txt:697
msgid ""
"This function will never have a null result. On backends where a null "
"argument results in the entire expression being null, Django will ensure "
"that each null part is converted to an empty string first."
msgstr ""

#: ../../ref/models/database-functions.txt:717
msgid "``Length``"
msgstr ""

#: ../../ref/models/database-functions.txt:721
msgid ""
"Accepts a single text field or expression and returns the number of "
"characters the value has. If the expression is null, then the length will "
"also be null."
msgstr ""

#: ../../ref/models/database-functions.txt:735
msgid "It can also be registered as a transform. For example::"
msgstr ""

#: ../../ref/models/database-functions.txt:744
msgid "``Lower``"
msgstr ""

#: ../../ref/models/database-functions.txt:748
msgid ""
"Accepts a single text field or expression and returns the lowercase "
"representation."
msgstr ""

#: ../../ref/models/database-functions.txt:751
#: ../../ref/models/database-functions.txt:822
msgid ""
"It can also be registered as a transform as described in :class:`Length`."
msgstr ""

#: ../../ref/models/database-functions.txt:762
msgid "``StrIndex``"
msgstr ""

#: ../../ref/models/database-functions.txt:768
msgid ""
"Returns a positive integer corresponding to the 1-indexed position of the "
"first occurrence of ``substring`` inside ``string``, or 0 if ``substring`` "
"is not found."
msgstr ""

#: ../../ref/models/database-functions.txt:790
msgid ""
"In MySQL, a database table's :ref:`collation<mysql-collation>` determines "
"whether string comparisons (such as the ``expression`` and ``substring`` of "
"this function) are case-sensitive. Comparisons are case-insensitive by "
"default."
msgstr ""

#: ../../ref/models/database-functions.txt:796
msgid "``Substr``"
msgstr ""

#: ../../ref/models/database-functions.txt:800
msgid ""
"Returns a substring of length ``length`` from the field or expression "
"starting at position ``pos``. The position is 1-indexed, so the position "
"must be greater than 0. If ``length`` is ``None``, then the rest of the "
"string will be returned."
msgstr ""

#: ../../ref/models/database-functions.txt:815
msgid "``Upper``"
msgstr ""

#: ../../ref/models/database-functions.txt:819
msgid ""
"Accepts a single text field or expression and returns the uppercase "
"representation."
msgstr ""

#: ../../ref/models/database-functions.txt:835
msgid "Window functions"
msgstr ""

#: ../../ref/models/database-functions.txt:839
msgid ""
"There are a number of functions to use in a :class:`~django.db.models."
"expressions.Window` expression for computing the rank of elements or the :"
"class:`Ntile` of some rows."
msgstr ""

#: ../../ref/models/database-functions.txt:844
msgid "``CumeDist``"
msgstr ""

#: ../../ref/models/database-functions.txt:848
msgid ""
"Calculates the cumulative distribution of a value within a window or "
"partition. The cumulative distribution is defined as the number of rows "
"preceding or peered with the current row divided by the total number of rows "
"in the frame."
msgstr ""

#: ../../ref/models/database-functions.txt:853
msgid "``DenseRank``"
msgstr ""

#: ../../ref/models/database-functions.txt:857
msgid "Equivalent to :class:`Rank` but does not have gaps."
msgstr ""

#: ../../ref/models/database-functions.txt:860
msgid "``FirstValue``"
msgstr ""

#: ../../ref/models/database-functions.txt:864
msgid ""
"Returns the value evaluated at the row that's the first row of the window "
"frame, or ``None`` if no such value exists."
msgstr ""

#: ../../ref/models/database-functions.txt:868
msgid "``Lag``"
msgstr ""

#: ../../ref/models/database-functions.txt:872
msgid ""
"Calculates the value offset by ``offset``, and if no row exists there, "
"returns ``default``."
msgstr ""

#: ../../ref/models/database-functions.txt:875
#: ../../ref/models/database-functions.txt:894
msgid ""
"``default`` must have the same type as the ``expression``, however, this is "
"only validated by the database and not in Python."
msgstr ""

#: ../../ref/models/database-functions.txt:879
msgid "``LastValue``"
msgstr ""

#: ../../ref/models/database-functions.txt:883
msgid ""
"Comparable to :class:`FirstValue`, it calculates the last value in a given "
"frame clause."
msgstr ""

#: ../../ref/models/database-functions.txt:887
msgid "``Lead``"
msgstr ""

#: ../../ref/models/database-functions.txt:891
msgid ""
"Calculates the leading value in a given :ref:`frame <window-frames>`. Both "
"``offset`` and ``default`` are evaluated with respect to the current row."
msgstr ""

#: ../../ref/models/database-functions.txt:898
msgid "``NthValue``"
msgstr ""

#: ../../ref/models/database-functions.txt:902
msgid ""
"Computes the row relative to the offset ``nth`` (must be a positive value) "
"within the window. Returns ``None`` if no row exists."
msgstr ""

#: ../../ref/models/database-functions.txt:905
msgid ""
"Some databases may handle a nonexistent nth-value differently. For example, "
"Oracle returns an empty string rather than ``None`` for character-based "
"expressions. Django doesn't do any conversions in these cases."
msgstr ""

#: ../../ref/models/database-functions.txt:910
msgid "``Ntile``"
msgstr ""

#: ../../ref/models/database-functions.txt:914
msgid ""
"Calculates a partition for each of the rows in the frame clause, "
"distributing numbers as evenly as possible between 1 and ``num_buckets``. If "
"the rows don't divide evenly into a number of buckets, one or more buckets "
"will be represented more frequently."
msgstr ""

#: ../../ref/models/database-functions.txt:920
msgid "``PercentRank``"
msgstr ""

#: ../../ref/models/database-functions.txt:924
msgid ""
"Computes the percentile rank of the rows in the frame clause. This "
"computation is equivalent to evaluating::"
msgstr ""

#: ../../ref/models/database-functions.txt:929
msgid ""
"The following table explains the calculation for the percentile rank of a "
"row:"
msgstr ""

#: ../../ref/models/database-functions.txt:932
msgid "Row #"
msgstr ""

#: ../../ref/models/database-functions.txt:932
msgid "Value"
msgstr ""

#: ../../ref/models/database-functions.txt:932
msgid "Rank"
msgstr ""

#: ../../ref/models/database-functions.txt:932
msgid "Calculation"
msgstr ""

#: ../../ref/models/database-functions.txt:932
msgid "Percent Rank"
msgstr ""

#: ../../ref/models/database-functions.txt:934
msgid "1"
msgstr ""

#: ../../ref/models/database-functions.txt:934
msgid "15"
msgstr ""

#: ../../ref/models/database-functions.txt:934
msgid "(1-1)/(7-1)"
msgstr ""

#: ../../ref/models/database-functions.txt:934
msgid "0.0000"
msgstr ""

#: ../../ref/models/database-functions.txt:935
#: ../../ref/models/database-functions.txt:936
#: ../../ref/models/database-functions.txt:937
msgid "2"
msgstr ""

#: ../../ref/models/database-functions.txt:935
#: ../../ref/models/database-functions.txt:936
#: ../../ref/models/database-functions.txt:937
msgid "20"
msgstr ""

#: ../../ref/models/database-functions.txt:935
#: ../../ref/models/database-functions.txt:936
#: ../../ref/models/database-functions.txt:937
msgid "(2-1)/(7-1)"
msgstr ""

#: ../../ref/models/database-functions.txt:935
#: ../../ref/models/database-functions.txt:936
#: ../../ref/models/database-functions.txt:937
msgid "0.1666"
msgstr ""

#: ../../ref/models/database-functions.txt:936
msgid "3"
msgstr ""

#: ../../ref/models/database-functions.txt:937
msgid "4"
msgstr ""

#: ../../ref/models/database-functions.txt:938
#: ../../ref/models/database-functions.txt:939
msgid "5"
msgstr ""

#: ../../ref/models/database-functions.txt:938
#: ../../ref/models/database-functions.txt:939
msgid "30"
msgstr ""

#: ../../ref/models/database-functions.txt:938
#: ../../ref/models/database-functions.txt:939
msgid "(5-1)/(7-1)"
msgstr ""

#: ../../ref/models/database-functions.txt:938
#: ../../ref/models/database-functions.txt:939
msgid "0.6666"
msgstr ""

#: ../../ref/models/database-functions.txt:939
msgid "6"
msgstr ""

#: ../../ref/models/database-functions.txt:940
msgid "7"
msgstr ""

#: ../../ref/models/database-functions.txt:940
msgid "40"
msgstr ""

#: ../../ref/models/database-functions.txt:940
msgid "(7-1)/(7-1)"
msgstr ""

#: ../../ref/models/database-functions.txt:940
msgid "1.0000"
msgstr ""

#: ../../ref/models/database-functions.txt:944
msgid "``Rank``"
msgstr ""

#: ../../ref/models/database-functions.txt:948
msgid ""
"Comparable to ``RowNumber``, this function ranks rows in the window. The "
"computed rank contains gaps. Use :class:`DenseRank` to compute rank without "
"gaps."
msgstr ""

#: ../../ref/models/database-functions.txt:953
msgid "``RowNumber``"
msgstr ""

#: ../../ref/models/database-functions.txt:957
msgid ""
"Computes the row number according to the ordering of either the frame clause "
"or the ordering of the whole query if there is no partitioning of the :ref:"
"`window frame <window-frames>`."
msgstr ""
