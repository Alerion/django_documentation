# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/models/database-functions.txt:3
msgid "Database Functions"
msgstr ""

#: ../../ref/models/database-functions.txt:8
msgid ""
"The classes documented below provide a way for users to use functions "
"provided by the underlying database as annotations, aggregations, or filters "
"in Django. Functions are also :doc:`expressions <expressions>`, so they can "
"be used and combined with other expressions like :ref:`aggregate functions "
"<aggregation-functions>`."
msgstr ""

#: ../../ref/models/database-functions.txt:14
#: ../../ref/models/database-functions.txt:304
msgid "We'll be using the following model in examples of each function::"
msgstr ""

#: ../../ref/models/database-functions.txt:22
msgid ""
"We don't usually recommend allowing ``null=True`` for ``CharField`` since "
"this allows the field to have two \"empty values\", but it's important for "
"the ``Coalesce`` example below."
msgstr ""

#: ../../ref/models/database-functions.txt:27
msgid "``Cast``"
msgstr ""

#: ../../ref/models/database-functions.txt:33
msgid ""
"Forces the result type of ``expression`` to be the one from ``output_field``."
msgstr ""

#: ../../ref/models/database-functions.txt:35
#: ../../ref/models/database-functions.txt:100
#: ../../ref/models/database-functions.txt:123
#: ../../ref/models/database-functions.txt:188
#: ../../ref/models/database-functions.txt:221
#: ../../ref/models/database-functions.txt:243
#: ../../ref/models/database-functions.txt:265
#: ../../ref/models/database-functions.txt:285
#: ../../ref/models/database-functions.txt:363
#: ../../ref/models/database-functions.txt:562
#: ../../ref/models/database-functions.txt:670
msgid "Usage example::"
msgstr ""

#: ../../ref/models/database-functions.txt:45
msgid "``Coalesce``"
msgstr ""

#: ../../ref/models/database-functions.txt:49
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"first non-null value (note that an empty string is not considered a null "
"value). Each argument must be of a similar type, so mixing text and numbers "
"will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:54
msgid "Usage examples::"
msgstr ""

#: ../../ref/models/database-functions.txt:76
msgid ""
"A Python value passed to ``Coalesce`` on MySQL may be converted to an "
"incorrect type unless explicitly cast to the correct database type:"
msgstr ""

#: ../../ref/models/database-functions.txt:86
msgid "``Concat``"
msgstr ""

#: ../../ref/models/database-functions.txt:90
msgid ""
"Accepts a list of at least two text fields or expressions and returns the "
"concatenated text. Each argument must be of a text or char type. If you want "
"to concatenate a ``TextField()`` with a ``CharField()``, then be sure to "
"tell Django that the ``output_field`` should be a ``TextField()``. This is "
"also required when concatenating a ``Value`` as in the example below."
msgstr ""

#: ../../ref/models/database-functions.txt:96
msgid ""
"This function will never have a null result. On backends where a null "
"argument results in the entire expression being null, Django will ensure "
"that each null part is converted to an empty string first."
msgstr ""

#: ../../ref/models/database-functions.txt:113
msgid "``Greatest``"
msgstr ""

#: ../../ref/models/database-functions.txt:119
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"greatest value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:140
msgid ""
"``annotated_comment.last_updated`` will be the most recent of ``blog."
"modified`` and ``comment.modified``."
msgstr ""

#: ../../ref/models/database-functions.txt:145
msgid ""
"The behavior of ``Greatest`` when one or more expression may be ``null`` "
"varies between databases:"
msgstr ""

#: ../../ref/models/database-functions.txt:148
msgid ""
"PostgreSQL: ``Greatest`` will return the largest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:150
msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Greatest`` will "
"return ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:153
msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible minimum value to provide as a default."
msgstr ""

#: ../../ref/models/database-functions.txt:157
msgid "``Least``"
msgstr ""

#: ../../ref/models/database-functions.txt:163
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"least value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:169
msgid ""
"The behavior of ``Least`` when one or more expression may be ``null`` varies "
"between databases:"
msgstr ""

#: ../../ref/models/database-functions.txt:172
msgid ""
"PostgreSQL: ``Least`` will return the smallest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:174
msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Least`` will "
"return ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:177
msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible maximum value to provide as a default."
msgstr ""

#: ../../ref/models/database-functions.txt:181
msgid "``Length``"
msgstr ""

#: ../../ref/models/database-functions.txt:185
msgid ""
"Accepts a single text field or expression and returns the number of "
"characters the value has. If the expression is null, then the length will "
"also be null."
msgstr ""

#: ../../ref/models/database-functions.txt:199
msgid "It can also be registered as a transform. For example::"
msgstr ""

#: ../../ref/models/database-functions.txt:209
#: ../../ref/models/database-functions.txt:231
#: ../../ref/models/database-functions.txt:295
msgid "The ability to register the function as a transform was added."
msgstr ""

#: ../../ref/models/database-functions.txt:212
msgid "``Lower``"
msgstr ""

#: ../../ref/models/database-functions.txt:216
msgid ""
"Accepts a single text field or expression and returns the lowercase "
"representation."
msgstr ""

#: ../../ref/models/database-functions.txt:219
#: ../../ref/models/database-functions.txt:283
msgid ""
"It can also be registered as a transform as described in :class:`Length`."
msgstr ""

#: ../../ref/models/database-functions.txt:234
msgid "``Now``"
msgstr ""

#: ../../ref/models/database-functions.txt:240
msgid ""
"Returns the database server's current date and time when the query is "
"executed, typically using the SQL ``CURRENT_TIMESTAMP``."
msgstr ""

#: ../../ref/models/database-functions.txt:249
msgid "PostgreSQL considerations"
msgstr ""

#: ../../ref/models/database-functions.txt:251
msgid ""
"On PostgreSQL, the SQL ``CURRENT_TIMESTAMP`` returns the time that the "
"current transaction started. Therefore for cross-database compatibility, "
"``Now()`` uses ``STATEMENT_TIMESTAMP`` instead. If you need the transaction "
"timestamp, use :class:`django.contrib.postgres.functions.TransactionNow`."
msgstr ""

#: ../../ref/models/database-functions.txt:257
msgid "``Substr``"
msgstr ""

#: ../../ref/models/database-functions.txt:261
msgid ""
"Returns a substring of length ``length`` from the field or expression "
"starting at position ``pos``. The position is 1-indexed, so the position "
"must be greater than 0. If ``length`` is ``None``, then the rest of the "
"string will be returned."
msgstr ""

#: ../../ref/models/database-functions.txt:276
msgid "``Upper``"
msgstr ""

#: ../../ref/models/database-functions.txt:280
msgid ""
"Accepts a single text field or expression and returns the uppercase "
"representation."
msgstr ""

#: ../../ref/models/database-functions.txt:298
msgid "Date Functions"
msgstr ""

#: ../../ref/models/database-functions.txt:313
msgid "``Extract``"
msgstr ""

#: ../../ref/models/database-functions.txt:317
msgid "Extracts a component of a date as a number."
msgstr ""

#: ../../ref/models/database-functions.txt:319
msgid ""
"Takes an ``expression`` representing a ``DateField`` or ``DateTimeField`` "
"and a ``lookup_name``, and returns the part of the date referenced by "
"``lookup_name`` as an ``IntegerField``. Django usually uses the databases' "
"extract function, so you may use any ``lookup_name`` that your database "
"supports. A ``tzinfo`` subclass, usually provided by ``pytz``, can be passed "
"to extract a value in a specific timezone."
msgstr ""

#: ../../ref/models/database-functions.txt:326
msgid ""
"Given the datetime ``2015-06-15 23:30:01.000321+00:00``, the built-in "
"``lookup_name``\\s return:"
msgstr ""

#: ../../ref/models/database-functions.txt:329
msgid "\"year\": 2015"
msgstr ""

#: ../../ref/models/database-functions.txt:330
msgid "\"month\": 6"
msgstr ""

#: ../../ref/models/database-functions.txt:331
msgid "\"day\": 15"
msgstr ""

#: ../../ref/models/database-functions.txt:332
msgid "\"week_day\": 2"
msgstr ""

#: ../../ref/models/database-functions.txt:333
msgid "\"hour\": 23"
msgstr ""

#: ../../ref/models/database-functions.txt:334
msgid "\"minute\": 30"
msgstr ""

#: ../../ref/models/database-functions.txt:335
msgid "\"second\": 1"
msgstr ""

#: ../../ref/models/database-functions.txt:337
msgid ""
"If a different timezone like ``Australia/Melbourne`` is active in Django, "
"then the datetime is converted to the timezone before the value is "
"extracted. The timezone offset for Melbourne in the example date above is "
"+10:00. The values returned when this timezone is active will be the same as "
"above except for:"
msgstr ""

#: ../../ref/models/database-functions.txt:342
msgid "\"day\": 16"
msgstr ""

#: ../../ref/models/database-functions.txt:343
msgid "\"week_day\": 3"
msgstr ""

#: ../../ref/models/database-functions.txt:344
msgid "\"hour\": 9"
msgstr ""

#: ../../ref/models/database-functions.txt:346
msgid "``week_day`` values"
msgstr ""

#: ../../ref/models/database-functions.txt:348
msgid ""
"The ``week_day`` ``lookup_type`` is calculated differently from most "
"databases and from Python's standard functions. This function will return "
"``1`` for Sunday, ``2`` for Monday, through ``7`` for Saturday."
msgstr ""

#: ../../ref/models/database-functions.txt:352
msgid "The equivalent calculation in Python is::"
msgstr ""

#: ../../ref/models/database-functions.txt:359
msgid ""
"Each ``lookup_name`` above has a corresponding ``Extract`` subclass (listed "
"below) that should typically be used instead of the more verbose equivalent, "
"e.g. use ``ExtractYear(...)`` rather than ``Extract(..., "
"lookup_name='year')``."
msgstr ""

#: ../../ref/models/database-functions.txt:383
msgid "``DateField`` extracts"
msgstr ""

#: ../../ref/models/database-functions.txt:401
msgid ""
"These are logically equivalent to ``Extract('date_field', lookup_name)``. "
"Each class is also a ``Transform`` registered on ``DateField`` and "
"``DateTimeField`` as ``__(lookup_name)``, e.g. ``__year``."
msgstr ""

#: ../../ref/models/database-functions.txt:405
msgid ""
"Since ``DateField``\\s don't have a time component, only ``Extract`` "
"subclasses that deal with date-parts can be used with ``DateField``::"
msgstr ""

#: ../../ref/models/database-functions.txt:429
msgid "``DateTimeField`` extracts"
msgstr ""

#: ../../ref/models/database-functions.txt:431
msgid ""
"In addition to the following, all extracts for ``DateField`` listed above "
"may also be used on ``DateTimeField``\\s ."
msgstr ""

#: ../../ref/models/database-functions.txt:446
msgid ""
"These are logically equivalent to ``Extract('datetime_field', "
"lookup_name)``. Each class is also a ``Transform`` registered on "
"``DateTimeField`` as ``__(lookup_name)``, e.g. ``__minute``."
msgstr ""

#: ../../ref/models/database-functions.txt:450
msgid "``DateTimeField`` examples::"
msgstr ""

#: ../../ref/models/database-functions.txt:476
msgid ""
"When :setting:`USE_TZ` is ``True`` then datetimes are stored in the database "
"in UTC. If a different timezone is active in Django, the datetime is "
"converted to that timezone before the value is extracted. The example below "
"converts to the Melbourne timezone (UTC +10:00), which changes the day, "
"weekday, and hour values that are returned::"
msgstr ""

#: ../../ref/models/database-functions.txt:494
msgid ""
"Explicitly passing the timezone to the ``Extract`` function behaves in the "
"same way, and takes priority over an active timezone::"
msgstr ""

#: ../../ref/models/database-functions.txt:510
msgid "``Trunc``"
msgstr ""

#: ../../ref/models/database-functions.txt:514
msgid "Truncates a date up to a significant component."
msgstr ""

#: ../../ref/models/database-functions.txt:516
msgid ""
"When you only care if something happened in a particular year, hour, or day, "
"but not the exact second, then ``Trunc`` (and its subclasses) can be useful "
"to filter or aggregate your data. For example, you can use ``Trunc`` to "
"calculate the number of sales per day."
msgstr ""

#: ../../ref/models/database-functions.txt:521
msgid ""
"``Trunc`` takes a single ``expression``, representing a ``DateField`` or "
"``DateTimeField``, a ``kind`` representing a date part, and an "
"``output_field`` that's either ``DateTimeField()`` or ``DateField()``. It "
"returns a datetime or date, depending on ``output_field``, with fields up to "
"``kind`` set to their minimum value. If ``output_field`` is omitted, it will "
"default to the ``output_field`` of ``expression``. A ``tzinfo`` subclass, "
"usually provided by ``pytz``, can be passed to truncate a value in a "
"specific timezone."
msgstr ""

#: ../../ref/models/database-functions.txt:529
msgid ""
"Given the datetime ``2015-06-15 14:30:50.000321+00:00``, the built-in "
"``kind``\\s return:"
msgstr ""

#: ../../ref/models/database-functions.txt:532
msgid "\"year\": 2015-01-01 00:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:533
msgid "\"month\": 2015-06-01 00:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:534
msgid "\"day\": 2015-06-15 00:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:535
msgid "\"hour\": 2015-06-15 14:00:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:536
msgid "\"minute\": 2015-06-15 14:30:00+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:537
msgid "\"second\": 2015-06-15 14:30:50+00:00"
msgstr ""

#: ../../ref/models/database-functions.txt:539
msgid ""
"If a different timezone like ``Australia/Melbourne`` is active in Django, "
"then the datetime is converted to the new timezone before the value is "
"truncated. The timezone offset for Melbourne in the example date above is "
"+10:00. The values returned when this timezone is active will be:"
msgstr ""

#: ../../ref/models/database-functions.txt:544
msgid "\"year\": 2015-01-01 00:00:00+11:00"
msgstr ""

#: ../../ref/models/database-functions.txt:545
msgid "\"month\": 2015-06-01 00:00:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:546
msgid "\"day\": 2015-06-16 00:00:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:547
msgid "\"hour\": 2015-06-16 00:00:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:548
msgid "\"minute\": 2015-06-16 00:30:00+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:549
msgid "\"second\": 2015-06-16 00:30:50+10:00"
msgstr ""

#: ../../ref/models/database-functions.txt:551
msgid ""
"The year has an offset of +11:00 because the result transitioned into "
"daylight saving time."
msgstr ""

#: ../../ref/models/database-functions.txt:554
msgid ""
"Each ``kind`` above has a corresponding ``Trunc`` subclass (listed below) "
"that should typically be used instead of the more verbose equivalent, e.g. "
"use ``TruncYear(...)`` rather than ``Trunc(..., kind='year')``."
msgstr ""

#: ../../ref/models/database-functions.txt:558
msgid ""
"The subclasses are all defined as transforms, but they aren't registered "
"with any fields, because the obvious lookup names are already reserved by "
"the ``Extract`` subclasses."
msgstr ""

#: ../../ref/models/database-functions.txt:588
msgid "``DateField`` truncation"
msgstr ""

#: ../../ref/models/database-functions.txt:598
msgid ""
"These are logically equivalent to ``Trunc('date_field', kind)``. They "
"truncate all parts of the date up to ``kind`` which allows grouping or "
"filtering dates with less precision. ``expression`` can have an "
"``output_field`` of either ``DateField`` or ``DateTimeField``."
msgstr ""

#: ../../ref/models/database-functions.txt:603
msgid ""
"Since ``DateField``\\s don't have a time component, only ``Trunc`` "
"subclasses that deal with date-parts can be used with ``DateField``::"
msgstr ""

#: ../../ref/models/database-functions.txt:638
msgid "``DateTimeField`` truncation"
msgstr ""

#: ../../ref/models/database-functions.txt:645
msgid ""
"``TruncDate`` casts ``expression`` to a date rather than using the built-in "
"SQL truncate function. It's also registered as a transform on  "
"``DateTimeField`` as ``__date``."
msgstr ""

#: ../../ref/models/database-functions.txt:665
msgid ""
"These are logically equivalent to ``Trunc('datetime_field', kind)``. They "
"truncate all parts of the date up to ``kind`` and allow grouping or "
"filtering datetimes with less precision. ``expression`` must have an "
"``output_field`` of ``DateTimeField``."
msgstr ""
