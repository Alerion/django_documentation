# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 6991ee0c5e684488b83121a653265d2e
#: ../../ref/migration-operations.txt:3
msgid "Migration Operations"
msgstr ""

# 7d91ddbc5bae4cdf96653f5d20f95852
#: ../../ref/migration-operations.txt:7
msgid ""
"Migration files are composed of one or more ``Operation``\\s, objects that "
"declaratively record what the migration should do to your database."
msgstr ""

# 0cd1aed3607c402aa44f798e2c786121
#: ../../ref/migration-operations.txt:10
msgid ""
"Django also uses these ``Operation`` objects to work out what your models "
"looked like historically, and to calculate what changes you've made to your "
"models since the last migration so it can automatically write your "
"migrations; that's why they're declarative, as it means Django can easily "
"load them all into memory and run through them without touching the database "
"to work out what your project should look like."
msgstr ""

# 7d861b5ab7e84a0abf4f0632d31495f6
#: ../../ref/migration-operations.txt:17
msgid ""
"There are also more specialized ``Operation`` objects which are for things "
"like :ref:`data migrations <data-migrations>` and for advanced manual "
"database manipulation. You can also write your own ``Operation`` classes if "
"you want to encapsulate a custom change you commonly make."
msgstr ""

# 934970e5ecab43e49113fd12e44d7752
#: ../../ref/migration-operations.txt:22
msgid ""
"If you need an empty migration file to write your own ``Operation`` objects "
"into, just use ``python manage.py makemigrations --empty yourappname``, but "
"be aware that manually adding schema-altering operations can confuse the "
"migration autodetector and make resulting runs of :djadmin:`makemigrations` "
"output incorrect code."
msgstr ""

# 5b513dd5da4f4774bad13b8dfb9d049c
#: ../../ref/migration-operations.txt:28
msgid ""
"All of the core Django operations are available from the ``django.db."
"migrations.operations`` module."
msgstr ""

#: ../../ref/migration-operations.txt:31
msgid ""
"For introductory material, see the :doc:`migrations topic guide </topics/"
"migrations>`."
msgstr ""

# cbccb1e6c90a43eaa97119c7998704b0
#: ../../ref/migration-operations.txt:35
msgid "Schema Operations"
msgstr ""

#: ../../ref/migration-operations.txt:38
msgid "``CreateModel``"
msgstr ""

# 1ff95d28f96a4a22829899e8512e2e5a
#: ../../ref/migration-operations.txt:42
msgid ""
"Creates a new model in the project history and a corresponding table in the "
"database to match it."
msgstr ""

# 5fcd0b11ee994346a5b1d63b95e5256f
#: ../../ref/migration-operations.txt:45
msgid ""
"``name`` is the model name, as would be written in the ``models.py`` file."
msgstr ""

#: ../../ref/migration-operations.txt:47
msgid ""
"``fields`` is a list of 2-tuples of ``(field_name, field_instance)``. The "
"field instance should be an unbound field (so just ``models."
"CharField(...)``, rather than a field taken from another model)."
msgstr ""

# 2844ebb149024806982a23409109eca1
#: ../../ref/migration-operations.txt:51
msgid ""
"``options`` is an optional dictionary of values from the model's ``Meta`` "
"class."
msgstr ""

# 0ce11fa9f96e4fb58c2987c78ffaa19b
#: ../../ref/migration-operations.txt:53
msgid ""
"``bases`` is an optional list of other classes to have this model inherit "
"from; it can contain both class objects as well as strings in the format ``"
"\"appname.ModelName\"`` if you want to depend on another model (so you "
"inherit from the historical version). If it's not supplied, it defaults to "
"just inheriting from the standard ``models.Model``."
msgstr ""

#: ../../ref/migration-operations.txt:59
msgid ""
"``managers`` takes a list of 2-tuples of ``(manager_name, "
"manager_instance)``. The first manager in the list will be the default "
"manager for this model during migrations."
msgstr ""

#: ../../ref/migration-operations.txt:64
msgid "``DeleteModel``"
msgstr ""

# af38421d8a61461482e0a7f8ba63eb57
#: ../../ref/migration-operations.txt:68
msgid ""
"Deletes the model from the project history and its table from the database."
msgstr ""

#: ../../ref/migration-operations.txt:71
msgid "``RenameModel``"
msgstr ""

# e897a50c8ae544f2b98b7db0644243c4
#: ../../ref/migration-operations.txt:75
msgid "Renames the model from an old name to a new one."
msgstr ""

# 8860cb10ff1041fabf9192c64d0b675c
#: ../../ref/migration-operations.txt:77
msgid ""
"You may have to manually add this if you change the model's name and quite a "
"few of its fields at once; to the autodetector, this will look like you "
"deleted a model with the old name and added a new one with a different name, "
"and the migration it creates will lose any data in the old table."
msgstr ""

#: ../../ref/migration-operations.txt:84
msgid "``AlterModelTable``"
msgstr ""

# faefd6700ae24b1597a16c5d93bc6be7
#: ../../ref/migration-operations.txt:88
msgid ""
"Changes the model's table name (the :attr:`~django.db.models.Options."
"db_table` option on the ``Meta`` subclass)."
msgstr ""

#: ../../ref/migration-operations.txt:92
msgid "``AlterUniqueTogether``"
msgstr ""

# 06a701a8125f41e08021eb6c4432e611
#: ../../ref/migration-operations.txt:96
msgid ""
"Changes the model's set of unique constraints (the :attr:`~django.db.models."
"Options.unique_together` option on the ``Meta`` subclass)."
msgstr ""

#: ../../ref/migration-operations.txt:101
msgid "``AlterIndexTogether``"
msgstr ""

# aab07ea88ca3470a80f5e0a902cc4071
#: ../../ref/migration-operations.txt:105
msgid ""
"Changes the model's set of custom indexes (the :attr:`~django.db.models."
"Options.index_together` option on the ``Meta`` subclass)."
msgstr ""

#: ../../ref/migration-operations.txt:110
msgid "``AlterOrderWithRespectTo``"
msgstr ""

# f63db12e533347bca12be5b7d289d326
#: ../../ref/migration-operations.txt:114
msgid ""
"Makes or deletes the ``_order`` column needed for the :attr:`~django.db."
"models.Options.order_with_respect_to` option on the ``Meta`` subclass."
msgstr ""

#: ../../ref/migration-operations.txt:119
msgid "``AlterModelOptions``"
msgstr ""

# 3fb21c77a41a40cea8f3d454b35ca274
#: ../../ref/migration-operations.txt:123
msgid ""
"Stores changes to miscellaneous model options (settings on a model's "
"``Meta``) like ``permissions`` and ``verbose_name``. Does not affect the "
"database, but persists these changes for :class:`RunPython` instances to "
"use. ``options`` should be a dictionary mapping option names to values."
msgstr ""

#: ../../ref/migration-operations.txt:129
msgid "``AlterModelManagers``"
msgstr ""

#: ../../ref/migration-operations.txt:133
msgid "Alters the managers that are available during migrations."
msgstr ""

#: ../../ref/migration-operations.txt:136
msgid "``AddField``"
msgstr ""

# 59e10ee79d3443d58bf9f5f7f5394229
#: ../../ref/migration-operations.txt:140
msgid ""
"Adds a field to a model. ``model_name`` is the model's name, ``name`` is the "
"field's name, and ``field`` is an unbound Field instance (the thing you "
"would put in the field declaration in ``models.py`` - for example, ``models."
"IntegerField(null=True)``."
msgstr ""

#: ../../ref/migration-operations.txt:145
msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or "
"if it is temporary and just for this migration (``False``) - usually because "
"the migration is adding a non-nullable field to a table and needs a default "
"value to put into existing rows. It does not affect the behavior of setting "
"defaults in the database directly - Django never sets database defaults and "
"always applies them in the Django ORM code."
msgstr ""

#: ../../ref/migration-operations.txt:154
msgid "``RemoveField``"
msgstr ""

# 6e1321146416463f80f76aa1b8431692
#: ../../ref/migration-operations.txt:158
msgid "Removes a field from a model."
msgstr ""

#: ../../ref/migration-operations.txt:160
msgid ""
"Bear in mind that when reversed, this is actually adding a field to a model. "
"The operation is reversible (apart from any data loss, which of course is "
"irreversible) if the field is nullable or if it has a default value that can "
"be used to populate the recreated column. If the field is not nullable and "
"does not have a default value, the operation is irreversible."
msgstr ""

#: ../../ref/migration-operations.txt:167
msgid "``AlterField``"
msgstr ""

# 39ed1cb689d94d89a73a611152c7f611
#: ../../ref/migration-operations.txt:171
msgid ""
"Alters a field's definition, including changes to its type, :attr:`~django."
"db.models.Field.null`, :attr:`~django.db.models.Field.unique`, :attr:"
"`~django.db.models.Field.db_column` and other field attributes."
msgstr ""

#: ../../ref/migration-operations.txt:175
msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or "
"if it is temporary and just for this migration (``False``) - usually because "
"the migration is altering a nullable field to a non-nullable one and needs a "
"default value to put into existing rows. It does not affect the behavior of "
"setting defaults in the database directly - Django never sets database "
"defaults and always applies them in the Django ORM code."
msgstr ""

# 27d18f9b2812412889655fe3f7f624c7
#: ../../ref/migration-operations.txt:183
msgid ""
"Note that not all changes are possible on all databases - for example, you "
"cannot change a text-type field like ``models.TextField()`` into a number-"
"type field like ``models.IntegerField()`` on most databases."
msgstr ""

#: ../../ref/migration-operations.txt:188
msgid "``RenameField``"
msgstr ""

# 61e6f2fab96748e6b3fa918d4d7aa1fb
#: ../../ref/migration-operations.txt:192
msgid ""
"Changes a field's name (and, unless :attr:`~django.db.models.Field."
"db_column` is set, its column name)."
msgstr ""

#: ../../ref/migration-operations.txt:196
msgid "``AddIndex``"
msgstr ""

#: ../../ref/migration-operations.txt:202
msgid ""
"Creates an index in the database table for the model with ``model_name``. "
"``index`` is an instance of the :class:`~django.db.models.Index` class."
msgstr ""

#: ../../ref/migration-operations.txt:206
msgid "``RemoveIndex``"
msgstr ""

#: ../../ref/migration-operations.txt:212
msgid "Removes the index named ``name`` from the model with ``model_name``."
msgstr ""

# 76686ff69da34bf586de9e590d6db005
#: ../../ref/migration-operations.txt:215
msgid "Special Operations"
msgstr ""

#: ../../ref/migration-operations.txt:218
msgid "``RunSQL``"
msgstr ""

# 4b6138bb53ea4be7a20b64a39786a87f
#: ../../ref/migration-operations.txt:222
msgid ""
"Allows running of arbitrary SQL on the database - useful for more advanced "
"features of database backends that Django doesn't support directly, like "
"partial indexes."
msgstr ""

# 3193b80303134f118807168483c7606c
#: ../../ref/migration-operations.txt:226
msgid ""
"``sql``, and ``reverse_sql`` if provided, should be strings of SQL to run on "
"the database. On most database backends (all but PostgreSQL), Django will "
"split the SQL into individual statements prior to executing them. This "
"requires installing the sqlparse_ Python library."
msgstr ""

#: ../../ref/migration-operations.txt:231
msgid ""
"You can also pass a list of strings or 2-tuples. The latter is used for "
"passing queries and parameters in the same way as :ref:`cursor.execute() "
"<executing-custom-sql>`. These three operations are equivalent::"
msgstr ""

#: ../../ref/migration-operations.txt:239
msgid ""
"If you want to include literal percent signs in the query, you have to "
"double them if you are passing parameters."
msgstr ""

#: ../../ref/migration-operations.txt:242
msgid ""
"The ``reverse_sql`` queries are executed when the migration is unapplied, so "
"you can reverse the changes done in the forwards queries::"
msgstr ""

#: ../../ref/migration-operations.txt:250
msgid ""
"The ``state_operations`` argument is so you can supply operations that are "
"equivalent to the SQL in terms of project state; for example, if you are "
"manually creating a column, you should pass in a list containing an "
"``AddField`` operation here so that the autodetector still has an up-to-date "
"state of the model (otherwise, when you next run ``makemigrations``, it "
"won't see any operation that adds that field and so will try to run it "
"again). For example::"
msgstr ""

#: ../../ref/migration-operations.txt:268
msgid ""
"The optional ``hints`` argument will be passed as ``**hints`` to the :meth:"
"`allow_migrate` method of database routers to assist them in making routing "
"decisions. See :ref:`topics-db-multi-db-hints` for more details on database "
"hints."
msgstr ""

#: ../../ref/migration-operations.txt:273
#: ../../ref/migration-operations.txt:309
msgid ""
"The optional ``elidable`` argument determines whether or not the operation "
"will be removed (elided) when :ref:`squashing migrations <migration-"
"squashing>`."
msgstr ""

#: ../../ref/migration-operations.txt:278
msgid ""
"Pass the ``RunSQL.noop`` attribute to ``sql`` or ``reverse_sql`` when you "
"want the operation not to do anything in the given direction. This is "
"especially useful in making the operation reversible."
msgstr ""

#: ../../ref/migration-operations.txt:286
#: ../../ref/migration-operations.txt:405
msgid "The ``elidable`` argument was added."
msgstr ""

#: ../../ref/migration-operations.txt:289
msgid "``RunPython``"
msgstr ""

#: ../../ref/migration-operations.txt:293
msgid ""
"Runs custom Python code in a historical context. ``code`` (and "
"``reverse_code`` if supplied) should be callable objects that accept two "
"arguments; the first is an instance of ``django.apps.registry.Apps`` "
"containing historical models that match the operation's place in the project "
"history, and the second is an instance of :class:`SchemaEditor <django.db."
"backends.base.schema.BaseDatabaseSchemaEditor>`."
msgstr ""

#: ../../ref/migration-operations.txt:300
msgid ""
"The ``reverse_code`` argument is called when unapplying migrations. This "
"callable should undo what is done in the ``code`` callable so that the "
"migration is reversible."
msgstr ""

#: ../../ref/migration-operations.txt:304
msgid ""
"The optional ``hints`` argument will be passed as ``**hints`` to the :meth:"
"`allow_migrate` method of database routers to assist them in making a "
"routing decision. See :ref:`topics-db-multi-db-hints` for more details on "
"database hints."
msgstr ""

# 148ceff56f8c4faf89fc51d86ff162e8
#: ../../ref/migration-operations.txt:312
msgid ""
"You are advised to write the code as a separate function above the "
"``Migration`` class in the migration file, and just pass it to "
"``RunPython``. Here's an example of using ``RunPython`` to create some "
"initial objects on a ``Country`` model::"
msgstr ""

#: ../../ref/migration-operations.txt:348
msgid ""
"This is generally the operation you would use to create :ref:`data "
"migrations <data-migrations>`, run custom data updates and alterations, and "
"anything else you need access to an ORM and/or Python code for."
msgstr ""

#: ../../ref/migration-operations.txt:353
msgid ""
"If you're upgrading from South, this is basically the South pattern as an "
"operation - one or two methods for forwards and backwards, with an ORM and "
"schema operations available. Most of the time, you should be able to "
"translate the ``orm.Model`` or ``orm[\"appname\", \"Model\"]`` references "
"from South directly into ``apps.get_model(\"appname\", \"Model\")`` "
"references here and leave most of the rest of the code unchanged for data "
"migrations. However, ``apps`` will only have references to models in the "
"current app unless migrations in other apps are added to the migration's "
"dependencies."
msgstr ""

# d03d2004c0164f83a04c86696ab12dd1
#: ../../ref/migration-operations.txt:362
msgid ""
"Much like :class:`RunSQL`, ensure that if you change schema inside here "
"you're either doing it outside the scope of the Django model system (e.g. "
"triggers) or that you use :class:`SeparateDatabaseAndState` to add in "
"operations that will reflect your changes to the model state - otherwise, "
"the versioned ORM and the autodetector will stop working correctly."
msgstr ""

#: ../../ref/migration-operations.txt:368
msgid ""
"By default, ``RunPython`` will run its contents inside a transaction on "
"databases that do not support DDL transactions (for example, MySQL and "
"Oracle). This should be safe, but may cause a crash if you attempt to use "
"the ``schema_editor`` provided on these backends; in this case, pass "
"``atomic=False`` to the ``RunPython`` operation."
msgstr ""

#: ../../ref/migration-operations.txt:374
msgid ""
"On databases that do support DDL transactions (SQLite and PostgreSQL), "
"``RunPython`` operations do not have any transactions automatically added "
"besides the transactions created for each migration. Thus, on PostgreSQL, "
"for example, you should avoid combining schema changes and ``RunPython`` "
"operations in the same migration or you may hit errors like "
"``OperationalError: cannot ALTER TABLE \"mytable\" because it has pending "
"trigger events``."
msgstr ""

#: ../../ref/migration-operations.txt:381
msgid ""
"If you have a different database and aren't sure if it supports DDL "
"transactions, check the ``django.db.connection.features.can_rollback_ddl`` "
"attribute."
msgstr ""

#: ../../ref/migration-operations.txt:385
msgid ""
"If the ``RunPython`` operation is part of a :ref:`non-atomic migration <non-"
"atomic-migrations>`, the operation will only be executed in a transaction if "
"``atomic=True`` is passed to the ``RunPython`` operation."
msgstr ""

# fa6db5a3beaa4fc99498b1a1c59a064a
#: ../../ref/migration-operations.txt:391
msgid ""
"``RunPython`` does not magically alter the connection of the models for you; "
"any model methods you call will go to the default database unless you give "
"them the current database alias (available from ``schema_editor.connection."
"alias``, where ``schema_editor`` is the second argument to your function)."
msgstr ""

#: ../../ref/migration-operations.txt:399
msgid ""
"Pass the ``RunPython.noop`` method to ``code`` or ``reverse_code`` when you "
"want the operation not to do anything in the given direction. This is "
"especially useful in making the operation reversible."
msgstr ""

#: ../../ref/migration-operations.txt:409
msgid ""
"The ``atomic`` argument default was changed to ``None``, indicating that the "
"atomicity is controlled by the ``atomic`` attribute of the migration."
msgstr ""

#: ../../ref/migration-operations.txt:413
msgid "``SeparateDatabaseAndState``"
msgstr ""

# 8c2f77fd997f4f6499a56686b3a24bc3
#: ../../ref/migration-operations.txt:417
msgid ""
"A highly specialized operation that let you mix and match the database "
"(schema-changing) and state (autodetector-powering) aspects of operations."
msgstr ""

# 0cdd65d45b514d8aa043e119ae951dec
#: ../../ref/migration-operations.txt:420
msgid ""
"It accepts two list of operations, and when asked to apply state will use "
"the state list, and when asked to apply changes to the database will use the "
"database list. Do not use this operation unless you're very sure you know "
"what you're doing."
msgstr ""

# a18b6ea469ec4b1e8ebb9e4e898d3759
#: ../../ref/migration-operations.txt:427
msgid "Writing your own"
msgstr ""

# 0fb0c59a081643e693dd903ceed5107a
#: ../../ref/migration-operations.txt:429
msgid ""
"Operations have a relatively simple API, and they're designed so that you "
"can easily write your own to supplement the built-in Django ones. The basic "
"structure of an ``Operation`` looks like this::"
msgstr ""

#: ../../ref/migration-operations.txt:468
msgid ""
"You can take this template and work from it, though we suggest looking at "
"the built-in Django operations in ``django.db.migrations.operations`` - "
"they're easy to read and cover a lot of the example usage of semi-internal "
"aspects of the migration framework like ``ProjectState`` and the patterns "
"used to get historical models, as well as ``ModelState`` and the patterns "
"used to mutate historical models in ``state_forwards()``."
msgstr ""

# 92eaa639746e4bcaabd6b92ff26d7a58
#: ../../ref/migration-operations.txt:475
msgid "Some things to note:"
msgstr ""

#: ../../ref/migration-operations.txt:477
msgid ""
"You don't need to learn too much about ``ProjectState`` to just write simple "
"migrations; just know that it has an ``apps`` property that gives access to "
"an app registry (which you can then call ``get_model`` on)."
msgstr ""

# 31ae169dc4a948e099f178c7cbccad65
#: ../../ref/migration-operations.txt:481
msgid ""
"``database_forwards`` and ``database_backwards`` both get two states passed "
"to them; these just represent the difference the ``state_forwards`` method "
"would have applied, but are given to you for convenience and speed reasons."
msgstr ""

#: ../../ref/migration-operations.txt:485
msgid ""
"If you want to work with model classes or model instances from the "
"``from_state`` argument in ``database_forwards()`` or "
"``database_backwards()``, you must render model states using the "
"``clear_delayed_apps_cache()`` method to make related models available::"
msgstr ""

#: ../../ref/migration-operations.txt:498
msgid "This requirement and the ``clear_delayed_apps_cache()`` method is new."
msgstr ""

# e7c572a77ce1438d86f5f27e19b8b93c
#: ../../ref/migration-operations.txt:500
msgid ""
"``to_state`` in the database_backwards method is the *older* state; that is, "
"the one that will be the current state once the migration has finished "
"reversing."
msgstr ""

# 7cf4142c297b4a74b2e274cbc980deae
#: ../../ref/migration-operations.txt:503
msgid ""
"You might see implementations of ``references_model`` on the built-in "
"operations; this is part of the autodetection code and does not matter for "
"custom operations."
msgstr ""

#: ../../ref/migration-operations.txt:509
msgid ""
"For performance reasons, the :class:`~django.db.models.Field` instances in "
"``ModelState.fields`` are reused across migrations. You must never change "
"the attributes on these instances. If you need to mutate a field in "
"``state_forwards()``, you must remove the old instance from ``ModelState."
"fields`` and add a new instance in its place. The same is true for the :"
"class:`~django.db.models.Manager` instances in ``ModelState.managers``."
msgstr ""

# 970db007e87f4d19afb02bef7ac0bc98
#: ../../ref/migration-operations.txt:517
msgid ""
"As a simple example, let's make an operation that loads PostgreSQL "
"extensions (which contain some of PostgreSQL's more exciting features). It's "
"simple enough; there's no model state changes, and all it does is run one "
"command::"
msgstr ""
