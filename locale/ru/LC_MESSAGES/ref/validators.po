# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2016-03-22 14:43+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 396b324f127347e6a74e046f5441e898
#: ../../ref/validators.txt:3
msgid "Validators"
msgstr "Валидаторы"

# 9652dfde3978402ca4420fa7a1f16609
#: ../../ref/validators.txt:9
msgid "Writing validators"
msgstr "Создание валидаторов"

# 31c55954a27944779fd7738000c6bd9b
#: ../../ref/validators.txt:11
msgid ""
"A validator is a callable that takes a value and raises a :exc:`~django.core."
"exceptions.ValidationError` if it doesn't meet some criteria. Validators can "
"be useful for re-using validation logic between different types of fields."
msgstr ""
"Валидатор — это вызываемый объект (callable), который принимает значение и "
"вызывает исключение :exc:`~django.core.exceptions.ValidationError`, если "
"значение не соответствует неким критериям. Валидаторы могут быть полезны "
"когда надо использовать одинаковую логику проверки для разных типов полей."

# 07bbb42bb42043a583f8c1922e177773
#: ../../ref/validators.txt:16
msgid "For example, here's a validator that only allows even numbers::"
msgstr ""
"Например, здесь показан валидатор, который принимает только чётные числа::"

# b00d53d0fc714eb5a6f6c5f7c68a7e4d
#: ../../ref/validators.txt:28
msgid ""
"You can add this to a model field via the field's :attr:`~django.db.models."
"Field.validators` argument::"
msgstr ""
"Вы можете добавить его к полю модели с помощью аргумента :attr:`~django.db."
"models.Field.validators`::"

# c7f9a9f786c2499fa071e5e031b608d5
#: ../../ref/validators.txt:36
msgid ""
"Because values are converted to Python before validators are run, you can "
"even use the same validator with forms::"
msgstr ""
"Так как значения преобразуются в типы языка Python до запуска  валидатора, "
"вы можете использовать тот же валидатор и для форм::"

#: ../../ref/validators.txt:44
msgid ""
"You can also use a class with a ``__call__()`` method for more complex or "
"configurable validators. :class:`RegexValidator`, for example, uses this "
"technique. If a class-based validator is used in the :attr:`~django.db."
"models.Field.validators` model field option, you should make sure it is :ref:"
"`serializable by the migration framework <migration-serializing>` by adding :"
"ref:`deconstruct() <custom-deconstruct-method>` and ``__eq__()`` methods."
msgstr ""
"Вы можете использовать класс с методом ``__call__()`` для сложных или "
"настраиваемых валидаторов. :class:`RegexValidator`, например, использует эту "
"технику. Если валидатор-класс используется в параметре :attr:`~django.db."
"models.Field.validators` поля модели, он должен быть :ref:`сериализируемым "
"для работы миграций <migration-serializing>`. Для этого добавьте методы :ref:"
"`deconstruct() <custom-deconstruct-method>` и ``__eq__()``."

# 0568b1c959da4290b78ca49ae1279b27
#: ../../ref/validators.txt:53
msgid "How validators are run"
msgstr "Как валидаторы запускаются"

# 98f2e457bb5f442ea6c0cae5a7ccd9b7
#: ../../ref/validators.txt:55
msgid ""
"See the :doc:`form validation </ref/forms/validation>` for more information "
"on how validators are run in forms, and :ref:`Validating objects <validating-"
"objects>` for how they're run in models. Note that validators will not be "
"run automatically when you save a model, but if you are using a :class:"
"`~django.forms.ModelForm`, it will run your validators on any fields that "
"are included in your form. See the :doc:`ModelForm documentation </topics/"
"forms/modelforms>` for information on how model validation interacts with "
"forms."
msgstr ""
"Обратитесь к документации по :doc:`проверке форм </ref/forms/validation>` "
"для получения подробностей о работе валидаторов в формах и к документации "
"по :ref:`проверке объектов <validating-objects>`, чтобы узнать как "
"валидаторы запускаются для моделей. Следует отметить, что валидаторы не "
"запускаются автоматически в случае когда вы сохраняете модель. Но если вы "
"используете класс :class:`~django.forms.ModelForm`, то он запустит ваши "
"валидаторы для всех полей формы. Обратитесь к документации на :doc:"
"`модельные формы </topics/forms/modelforms>` для получения информации о том, "
"как валидаторы модели взаимодействуют с формами."

# 43272589022447c4bb398f8beedada64
#: ../../ref/validators.txt:65
msgid "Built-in validators"
msgstr "Встроенные валидаторы"

# b278309cc981487dbbc968ee991dd9cc
#: ../../ref/validators.txt:67
msgid ""
"The :mod:`django.core.validators` module contains a collection of callable "
"validators for use with model and form fields. They're used internally but "
"are available for use with your own fields, too. They can be used in "
"addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""
"Модуль :mod:`django.core.validators` содержит коллекцию валидаторов, которые "
"можно использовать как с моделями, так и с полями формы. Они используются "
"Django, но также доступны для применения в ваших полях. Их можно "
"использовать в дополнение к или вместо метода ``field.clean()``."

# c38511c6708d45e59a1320aee8a06b10
#: ../../ref/validators.txt:73
msgid "``RegexValidator``"
msgstr "``RegexValidator``"

# 7c1be7e60271425185736fdd15d084e5
#: ../../ref/validators.txt:77
msgid ""
"If not ``None``, overrides :attr:`regex`. Can be a regular expression string "
"or a pre-compiled regular expression."
msgstr ""
"Если не ``None``, переопределяет :attr:`regex`. Может быть строка с или уже "
"скомпилированный объект регулярного выражения."

# 6ffe2accd5eb454883bfa5be0ec24b07
#: ../../ref/validators.txt:79 ../../ref/validators.txt:124
msgid "If not ``None``, overrides :attr:`.message`."
msgstr "Если не ``None``, переопределяет :attr:`.message`."

# 4fe690ec192d4e9dbfd5cdbec1e738f1
#: ../../ref/validators.txt:80 ../../ref/validators.txt:125
msgid "If not ``None``, overrides :attr:`code`."
msgstr "Если не ``None``, переопределяет :attr:`code`."

# 60da709942b24d219c6ffafe437c16fb
#: ../../ref/validators.txt:81
msgid "If not ``None``, overrides :attr:`inverse_match`."
msgstr "Если не ``None``, переопределяет :attr:`inverse_match`."

# f4ac5279f8c54982bc3e2da1a5cd866f
#: ../../ref/validators.txt:82
msgid ""
"If not ``None``, overrides :attr:`flags`. In that case, :attr:`regex` must "
"be a regular expression string, or :exc:`TypeError` is raised."
msgstr ""
"Если не ``None``, переопределяет :attr:`flags`. В этом случае :attr:`regex` "
"должен быть строкой с регулярным выражением, иначе будет вызвано исключение :"
"exc:`TypeError`."

# 7111a95210b64201a718e403ac5569d1
#: ../../ref/validators.txt:88
#, fuzzy
msgid ""
"The regular expression pattern to search for within the provided ``value``, "
"or a pre-compiled regular expression. By default, raises a :exc:`~django."
"core.exceptions.ValidationError` with :attr:`message` and :attr:`code` if a "
"match is not found. That standard behavior can be reversed by setting :attr:"
"`inverse_match` to ``True``, in which case the :exc:`~django.core.exceptions."
"ValidationError` is raised when a match **is** found. By default, matches "
"any string (including an empty string)."
msgstr ""
"Шаблон регулярного выражения для поиска в предоставленном ``value`` или "
"заранее скомпилированное регулярное выражение. По умолчанию вызывает "
"исключение :exc:`~django.core.exceptions.ValidationError` с атрибутами :attr:"
"`message` и :attr:`code`, если было найдено совпадение. Если :attr:"
"`inverse_match` равно ``True``, исключение :exc:`~django.core.exceptions."
"ValidationError` будет вызвано, если совпадение **не** найдено. По умолчанию "
"совпадает с любыми строками, включая пустые строки."

# 9e63595558244fd0b9e3373a45c93727
#: ../../ref/validators.txt:99
msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""
"Сообщение об ошибке, используемое исключением :exc:`~django.core.exceptions."
"ValidationError`, если проверка не прошла. По умолчанию, ``\"Enter a valid "
"value\"``."

# ad6620c53005493eb76f949c90544c16
#: ../../ref/validators.txt:105 ../../ref/validators.txt:136
msgid ""
"The error code used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"invalid\"``."
msgstr ""
"Код ошибки, используемый исключением :exc:`~django.core.exceptions."
"ValidationError`, если проверка не прошла. По умолчанию ``\"invalid\"``."

# ffb1a03d57a04c0c8c540cdda9e3bdef
#: ../../ref/validators.txt:110
msgid "The match mode for :attr:`regex`. Defaults to ``False``."
msgstr "Режим совпадения для :attr:`regex`. По умолчанию ``False``."

# 1e9f998f668b49719befd1fa949356be
#: ../../ref/validators.txt:114
msgid ""
"The flags used when compiling the regular expression string :attr:`regex`. "
"If :attr:`regex` is a pre-compiled regular expression, and :attr:`flags` is "
"overridden, :exc:`TypeError` is raised. Defaults to ``0``."
msgstr ""
"Флаги, используемые при компиляции строки регулярного выражения :attr:"
"`regex`. Если :attr:`regex` уже скомпилированное выражение и :attr:`flags` "
"переопределен, будет вызвано исключение :exc:`TypeError`. По умолчанию `0`."

# 6c5e55e4443945098196edc5465256ce
#: ../../ref/validators.txt:120
msgid "``EmailValidator``"
msgstr "``EmailValidator``"

# 4fe690ec192d4e9dbfd5cdbec1e738f1
#: ../../ref/validators.txt:126
msgid "If not ``None``, overrides :attr:`whitelist`."
msgstr "Если не ``None``, переопределяет :attr:`whitelist`."

# 9e63595558244fd0b9e3373a45c93727
#: ../../ref/validators.txt:130
msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid email address\"``."
msgstr ""
"Сообщение об ошибке, используемое исключением :exc:`~django.core.exceptions."
"ValidationError`, если проверка не прошла. По умолчанию, ``\"Enter a valid "
"email address\"``."

#: ../../ref/validators.txt:141
msgid ""
"Whitelist of email domains to allow. By default, a regular expression (the "
"``domain_regex`` attribute) is used to validate whatever appears after the @ "
"sign. However, if that string appears in the whitelist, this validation is "
"bypassed. If not provided, the default whitelist is ``['localhost']``. Other "
"domains that don't contain a dot won't pass validation, so you'd need to "
"whitelist them as necessary."
msgstr ""
"Описывает белый список доменов электронной почты. По умолчанию, для проверки "
"написанного после знака @ используется регулярное выражение (атрибут "
"``domain_regex``). Однако, если данная строка указана в белом списке, то "
"такая валидация не выполняется. Если список не предоставлен, то белый список "
"содержит ``['localhost']``. Другие домены, что не содержат точку, не пройдут "
"проверку, таким образом вам потребуется вносить их в белый список по "
"необходимости."

# 88cf7a45f58a4e48a1af307d79030252
#: ../../ref/validators.txt:149
msgid "``URLValidator``"
msgstr "``URLValidator``"

# 4be9f53b463a431989de474dcf2cd790
#: ../../ref/validators.txt:153
msgid ""
"A :class:`RegexValidator` that ensures a value looks like a URL, and raises "
"an error code of ``'invalid'`` if it doesn't."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"выглядит как URL, иначе вызывает ошибку с кодом ``'invalid'``."

#: ../../ref/validators.txt:156
msgid ""
"Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 "
"addresses (:rfc:`2732`) and unicode domains are both supported."
msgstr ""
"Кольцевые адреса и зарезервированные пространства адресов IP. Поддерживаются "
"оба варианта: адрес IPv6 в виде текста (:rfc:`2732`) и имена доменов юникоде."

# 09754d4911864e30a13ceecb53a4479b
#: ../../ref/validators.txt:159
msgid ""
"In addition to the optional arguments of its parent :class:`RegexValidator` "
"class, ``URLValidator`` accepts an extra optional attribute:"
msgstr ""
"В дополнение к необязательным аргументам родительского класса :class:"
"`RegexValidator`, ``URLValidator`` принимает дополнительный необязательный "
"атрибут:"

# 4f4aed7e02034468a24a3f67dee877b2
#: ../../ref/validators.txt:164
msgid ""
"URL/URI scheme list to validate against. If not provided, the default list "
"is ``['http', 'https', 'ftp', 'ftps']``. As a reference, the IANA website "
"provides a full list of `valid URI schemes`_."
msgstr ""
"Список разрешенных для URL/URI протоколов. По умолчанию ``['http', 'https', "
"'ftp', 'ftps']``. Сайт IANA Web предоставляет полный список `валидных "
"протоколов URI <https://www.iana.org/assignments/uri-schemes/uri-schemes."
"xhtml>`_."

# 87c0782aed8540cca278c79779a94b6a
#: ../../ref/validators.txt:171
msgid "``validate_email``"
msgstr "``validate_email``"

#: ../../ref/validators.txt:175
msgid "An :class:`EmailValidator` instance without any customizations."
msgstr "Экземпляр :class:`EmailValidator` без каких-либо настроек."

# ba1248ee1fe74a85a429a98bf6b08fbe
#: ../../ref/validators.txt:178
msgid "``validate_slug``"
msgstr "``validate_slug``"

# 6e76b955f2be4b3abb67adebca1ff549
#: ../../ref/validators.txt:182
msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"letters, numbers, underscores or hyphens."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"содержит только буквы, числа, символы подчёркивания или тире."

# ba1248ee1fe74a85a429a98bf6b08fbe
#: ../../ref/validators.txt:186
msgid "``validate_unicode_slug``"
msgstr "``validate_unicode_slug``"

# 6e76b955f2be4b3abb67adebca1ff549
#: ../../ref/validators.txt:190
msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"Unicode letters, numbers, underscores, or hyphens."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"содержит только Unicode буквы, числа, символы подчёркивания или тире."

# 0c73389717534d6c8c9e15f3a74c3910
#: ../../ref/validators.txt:194
msgid "``validate_ipv4_address``"
msgstr "``validate_ipv4_address``"

# 4be9f53b463a431989de474dcf2cd790
#: ../../ref/validators.txt:198
msgid ""
"A :class:`RegexValidator` instance that ensures a value looks like an IPv4 "
"address."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"выглядит как IPv4 адрес."

# bcaec4fa91e246da8317aaed83448bd0
#: ../../ref/validators.txt:202
msgid "``validate_ipv6_address``"
msgstr "``validate_ipv6_address``"

# dd8ce18fb4c145de9ff3b88c49a0c209
#: ../../ref/validators.txt:206
msgid "Uses ``django.utils.ipv6`` to check the validity of an IPv6 address."
msgstr ""
"Использует :mod:`django.utils.ipv6` для проверки соответствия значения IPv6 "
"адресу."

# 1a86a0b1df914ec5b555327896b80978
#: ../../ref/validators.txt:209
msgid "``validate_ipv46_address``"
msgstr "``validate_ipv46_address``"

# c002872337e647d7a29fcb57c3acc35f
#: ../../ref/validators.txt:213
msgid ""
"Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure "
"a value is either a valid IPv4 or IPv6 address."
msgstr ""
"Использует оба валидатора (``validate_ipv4_address`` и "
"``validate_ipv6_address``) для проверки, что значение соответствует IPv4 или "
"IPv6 адресу."

# 077084b1195c41d2a32ea8a5ba6d254e
#: ../../ref/validators.txt:217
msgid "``validate_comma_separated_integer_list``"
msgstr "``validate_comma_separated_integer_list``"

# 9e6d6f9bf88547dca245b3db94e33e72
#: ../../ref/validators.txt:221
msgid ""
"A :class:`RegexValidator` instance that ensures a value is a comma-separated "
"list of integers."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"является списком целых чисел, разделённых запятыми."

# 6c5e55e4443945098196edc5465256ce
#: ../../ref/validators.txt:225
msgid "``int_list_validator``"
msgstr "``int_list_validator``"

# 9e6d6f9bf88547dca245b3db94e33e72
#: ../../ref/validators.txt:229
#, fuzzy
msgid ""
"Returns a :class:`RegexValidator` instance that ensures a string consists of "
"integers separated by ``sep``. It allows negative integers when "
"``allow_negative`` is ``True``."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"является списком целых чисел, разделённых ``sep``."

# 92c1fe5e788347a8b1191c28e2113730
#: ../../ref/validators.txt:235
#, fuzzy
msgid "The ``allow_negative`` parameter was added."
msgstr "Был добавлен параметр ``message``."

# 6c5e55e4443945098196edc5465256ce
#: ../../ref/validators.txt:238
msgid "``MaxValueValidator``"
msgstr "``MaxValueValidator``"

# 8d596226d0044aa291fd6ea151c088c4
#: ../../ref/validators.txt:242
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_value'`` if ``value`` is greater than ``max_value``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'max_value'``, если ``value`` больше, чем ``max_value``."

# 3db36e9e530f43bcb876abacba3744f4
#: ../../ref/validators.txt:246
msgid "``MinValueValidator``"
msgstr "``MinValueValidator``"

# 602f25f921734bff966bdc9b015d4758
#: ../../ref/validators.txt:250
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_value'`` if ``value`` is less than ``min_value``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'min_value'``, если ``value`` меньше, чем ``min_value``."

# 55cad9e4b23440c38894ae644441e4f7
#: ../../ref/validators.txt:254
msgid "``MaxLengthValidator``"
msgstr "``MaxLengthValidator``"

# f06de5e9c6834f9da017e73d2589d04b
#: ../../ref/validators.txt:258
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_length'`` if the length of ``value`` is greater than ``max_length``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'max_length'``, если длина ``value`` больше, чем ``max_length``."

# e2d31fdb086f490f8a2e13f0145ea8d3
#: ../../ref/validators.txt:262
msgid "``MinLengthValidator``"
msgstr "``MinLengthValidator``"

# 9c7d9fe3e14b4e28bd226ccbb707f043
#: ../../ref/validators.txt:266
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_length'`` if the length of ``value`` is less than ``min_length``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'min_length'``, если длина ``value`` меньше, чем ``min_length``."

# 6c5e55e4443945098196edc5465256ce
#: ../../ref/validators.txt:270
msgid "``DecimalValidator``"
msgstr "``DecimalValidator``"

# 602f25f921734bff966bdc9b015d4758
#: ../../ref/validators.txt:274
msgid ""
"Raises :exc:`~django.core.exceptions.ValidationError` with the following "
"codes:"
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` со "
"следующими кодами ошибок:"

#: ../../ref/validators.txt:277
msgid "``'max_digits'`` if the number of digits is larger than ``max_digits``."
msgstr "``'max_digits'``, если количество цифр больше ``max_digits``."

#: ../../ref/validators.txt:278
msgid ""
"``'max_decimal_places'`` if the number of decimals is larger than "
"``decimal_places``."
msgstr ""
"``'max_decimal_places'``, если количество знаков после запятой больше "
"``decimal_places``."

#: ../../ref/validators.txt:280
msgid ""
"``'max_whole_digits'`` if the number of whole digits is larger than the "
"difference between ``max_digits`` and ``decimal_places``."
msgstr ""
"``'max_whole_digits'``, если количество цифр в целой части больше, чем "
"разница между ``max_digits`` и ``decimal_places``."

# c38511c6708d45e59a1320aee8a06b10
#: ../../ref/validators.txt:284
#, fuzzy
msgid "``FileExtensionValidator``"
msgstr "``RegexValidator``"

# 602f25f921734bff966bdc9b015d4758
#: ../../ref/validators.txt:290
#, fuzzy
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'invalid_extension'`` if the ``value`` cannot be found in "
"``allowed_extensions``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'min_value'``, если ``value`` меньше, чем ``min_value``."

#: ../../ref/validators.txt:296
msgid ""
"Don't rely on validation of the file extension to determine a file's type. "
"Files can be renamed to have any extension no matter what data they contain."
msgstr ""

# 87c0782aed8540cca278c79779a94b6a
#: ../../ref/validators.txt:301
#, fuzzy
msgid "``validate_image_file_extension``"
msgstr "``validate_email``"

#: ../../ref/validators.txt:307
msgid ""
"Uses Pillow to ensure that the ``value`` is `a valid image extension "
"<https://pillow.readthedocs.org/en/latest/handbook/image-file-formats."
"html>`_."
msgstr ""

#~ msgid ""
#~ "Support for IPv6 addresses, unicode domains, and URLs containing "
#~ "authentication data was added."
#~ msgstr ""
#~ "Была добавлена поддержка адресов IPv6, юникодных доменов и URL, "
#~ "содержащих аутентификационные данные."

# 92c1fe5e788347a8b1191c28e2113730
#~ msgid "The optional ``schemes`` attribute was added."
#~ msgstr "Был добавлен не обязательный атрибут ``schemes``."

# 4be9f53b463a431989de474dcf2cd790
#~ msgid ""
#~ "An ``EmailValidator`` instance that ensures a value looks like an email "
#~ "address."
#~ msgstr ""
#~ "Экземпляр класса ``EmailValidator``, который проверяет, что значение "
#~ "содержит email."
