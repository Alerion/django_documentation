# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2016-03-22 11:47+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 9b024d1b1dbf42acb0724e7836d051ee
#: ../../ref/forms/api.txt:3
msgid "The Forms API"
msgstr "API форм"

# 0b35b6bcc1394a9bb5c18b36756f170e
#: ../../ref/forms/api.txt:7
msgid "About this document"
msgstr "Об этом документе"

# b80e31aedec64fdeaa4323be536dcbb4
#: ../../ref/forms/api.txt:9
msgid ""
"This document covers the gritty details of Django's forms API. You should "
"read the :doc:`introduction to working with forms </topics/forms/index>` "
"first."
msgstr ""
"Этот документ знакомит с деталями API форм Django. Сначала вы должны "
"прочитать :doc:`введение в использование форм </topics/forms/index>`."

# fd99005902cb4d6882bd056cf462c7b6
#: ../../ref/forms/api.txt:16
msgid "Bound and unbound forms"
msgstr "Заполненные и незаполненные формы"

# 7d616271526f4a64a7823113307ecbea
#: ../../ref/forms/api.txt:18
msgid ""
"A :class:`Form` instance is either **bound** to a set of data, or "
"**unbound**."
msgstr ""
"Экземпляр класса :class:`Form` может быть **заполнен** набором данных или "
"**не заполнен**."

# be0dade5cb3e405c80008a26240502ee
#: ../../ref/forms/api.txt:20
msgid ""
"If it's **bound** to a set of data, it's capable of validating that data and "
"rendering the form as HTML with the data displayed in the HTML."
msgstr ""
"Если он **заполнен**, то у него есть возможность валидации полученных данных "
"и генерации заполненной формы в виде HTML кода."

# 08a615f7c97c4e2eb474b68c433eb1af
#: ../../ref/forms/api.txt:23
msgid ""
"If it's **unbound**, it cannot do validation (because there's no data to "
"validate!), but it can still render the blank form as HTML."
msgstr ""
"Если он **не заполнен**, то выполнить валидацию невозможно (так как нет для "
"этого данных!), но есть возможность сгенерировать HTML код пустой формы."

# a4224b123d034d16ae143c82ee7bc231
#: ../../ref/forms/api.txt:28
msgid ""
"To create an unbound :class:`Form` instance, simply instantiate the class::"
msgstr ""
"Для создания незаполненного экземпляра :class:`Form`, просто создайте "
"объект::"

# de6ce79d2ed94f8f8551bdd8ac5a70b7
#: ../../ref/forms/api.txt:32
msgid ""
"To bind data to a form, pass the data as a dictionary as the first parameter "
"to your :class:`Form` class constructor::"
msgstr ""
"Для привязки данных к форме, передайте данные в виде словаря в качестве "
"первого параметра конструктора класса :class:`Form`::"

# f6c5001b9dcb47f88cd86c7ef8efc483
#: ../../ref/forms/api.txt:41
msgid ""
"In this dictionary, the keys are the field names, which correspond to the "
"attributes in your :class:`Form` class. The values are the data you're "
"trying to validate. These will usually be strings, but there's no "
"requirement that they be strings; the type of data you pass depends on the :"
"class:`Field`, as we'll see in a moment."
msgstr ""
"В этом словаре, ключами являются имена полей, которые соответствуют "
"атрибутам в вашем классе :class:`Form`. Значения словаря являются данными, "
"которые вам требуется проверить. Обычно значения представлены строками, но "
"это требование не является обязательным. Тип переданных данных зависит от "
"класса :class:`Field`, это мы сейчас рассмотрим."

# 5e79be7ef7314cd99b8ff036689b6120
#: ../../ref/forms/api.txt:49
msgid ""
"If you need to distinguish between bound and unbound form instances at "
"runtime, check the value of the form's :attr:`~Form.is_bound` attribute::"
msgstr ""
"Если вам требуется определять заполненность экземпляров форм во время работы "
"программы, обратитесь к значению атрибута формы :attr:`~Form.is_bound`::"

# 9330e28ba49b4ad7a42965e816027741
#: ../../ref/forms/api.txt:59
msgid ""
"Note that passing an empty dictionary creates a *bound* form with empty "
"data::"
msgstr ""
"Следует отметить, что передача форме пустого словаря создаёт *заполненную* "
"форму без данных::"

# ca8b6455c2d94f4297e3a2393392a2cd
#: ../../ref/forms/api.txt:65
msgid ""
"If you have a bound :class:`Form` instance and want to change the data "
"somehow, or if you want to bind an unbound :class:`Form` instance to some "
"data, create another :class:`Form` instance. There is no way to change data "
"in a :class:`Form` instance. Once a :class:`Form` instance has been created, "
"you should consider its data immutable, whether it has data or not."
msgstr ""
"Если есть заполненный экземпляр :class:`Form` и требуется как-то изменить "
"его данные или если требуется привязать данные к незаполненному экземпляру :"
"class:`Form`, то создаёте другой экземпляр :class:`Form`. Нет способа "
"изменить данные в экземпляре :class:`Form`. После создания экземпляра :class:"
"`Form`, его данные следует рассматривать как неизменные, независимо от его "
"заполненности."

# 35fc9b3fe1914c088aa766fadae95308
#: ../../ref/forms/api.txt:72
msgid "Using forms to validate data"
msgstr "Использование форм для проверки данных"

# 4ff7d511c6154e469cd3b402aa1fd2d9
#: ../../ref/forms/api.txt:76
msgid ""
"Implement a ``clean()`` method on your ``Form`` when you must add custom "
"validation for fields that are interdependent. See :ref:`validating-fields-"
"with-clean` for example usage."
msgstr ""
"Добавьте метод ``clean()`` в вашу форму ``Form``, если необходимо проверить "
"независимые поля вместе. Смотрите :ref:`validating-fields-with-clean`."

# bc30596886a44d268d3ee8b8215dd232
#: ../../ref/forms/api.txt:82
msgid ""
"The primary task of a :class:`Form` object is to validate data. With a "
"bound :class:`Form` instance, call the :meth:`~Form.is_valid` method to run "
"validation and return a boolean designating whether the data was valid::"
msgstr ""
"Главной задачей объекта :class:`Form` является проверка данных. У "
"заполненного экземпляра :class:`Form` вызовите метод :meth:`~Form.is_valid` "
"для выполнения проверки и получения её результата::"

# 7e088148706a46b79743dbac1c69f716
#: ../../ref/forms/api.txt:94
msgid ""
"Let's try with some invalid data. In this case, ``subject`` is blank (an "
"error, because all fields are required by default) and ``sender`` is not a "
"valid email address::"
msgstr ""
"Начнём с неправильных данных. В этом случае поле ``subject`` будет пустым "
"(ошибка, так как по умолчанию все поля должны быть заполнены), а поле "
"``sender`` содержит неправильный адрес электронной почты::"

# 693b11622e42449797a6742c253aad0f
#: ../../ref/forms/api.txt:108
msgid ""
"Access the :attr:`~Form.errors` attribute to get a dictionary of error "
"messages::"
msgstr ""
"Обратитесь к атрибуту :attr:`~Form.errors` для получения словаря с "
"сообщениями об ошибках::"

# 8f6cc0ab88c4443b8b41a3fc681d7329
#: ../../ref/forms/api.txt:114
msgid ""
"In this dictionary, the keys are the field names, and the values are lists "
"of Unicode strings representing the error messages. The error messages are "
"stored in lists because a field can have multiple error messages."
msgstr ""
"В этом словаре, ключами являются имена полей, а значениями -- списки "
"юникодных строк, представляющих сообщения об ошибках. Сообщения хранятся в "
"виде списков, так как поле может иметь множество таких сообщений."

# cab653911ca94deea738773256d401ea
#: ../../ref/forms/api.txt:118
msgid ""
"You can access :attr:`~Form.errors` without having to call :meth:`~Form."
"is_valid` first. The form's data will be validated the first time either you "
"call :meth:`~Form.is_valid` or access :attr:`~Form.errors`."
msgstr ""
"Обращаться к атрибуту :attr:`~Form.errors` можно без предварительного вызова "
"методе call :meth:`~Form.is_valid`. Данные формы будут проверены при вызове "
"метода :meth:`~Form.is_valid` или при обращении к :attr:`~Form.errors`."

# 62c73e38410a45adbe141852fb4ecd48
#: ../../ref/forms/api.txt:122
msgid ""
"The validation routines will only get called once, regardless of how many "
"times you access :attr:`~Form.errors` or call :meth:`~Form.is_valid`. This "
"means that if validation has side effects, those side effects will only be "
"triggered once."
msgstr ""
"Процедуры проверки выполняются один раз, независимо от количества обращений "
"к атрибуту :attr:`~Form.errors` или вызова метода :meth:`~Form.is_valid`. "
"Это означает, что если проверка данных имеет побочное влияние на состояние "
"формы, то оно проявится только один раз."

# f98792274e2c4425883857e87b8cae89
#: ../../ref/forms/api.txt:128
msgid ""
"Returns a ``dict`` that maps fields to their original ``ValidationError`` "
"instances."
msgstr ""
"Возвращает ``dict``, который содержит поля и объекты ``ValidationError``."

# 578e7eca91f84b7898e3928faba0eed2
#: ../../ref/forms/api.txt:135
msgid ""
"Use this method anytime you need to identify an error by its ``code``. This "
"enables things like rewriting the error's message or writing custom logic in "
"a view when a given error is present. It can also be used to serialize the "
"errors in a custom format (e.g. XML); for instance, :meth:`~Form.errors."
"as_json()` relies on ``as_data()``."
msgstr ""
"Используйте этот метод, если вам необходимо определить тип ошибки по её "
"``code``. Это позволяет переопределить сообщение об ошибке, или добавить "
"дополнительную логику обработки некоторых ошибок. Также позволяет "
"преобразовать ошибки в другой формат (например, XML). Например, :meth:`~Form."
"errors.as_json()` использует ``as_data()``."

# 6b577ebe8a804f8e86a653f41697582d
#: ../../ref/forms/api.txt:141
msgid ""
"The need for the ``as_data()`` method is due to backwards compatibility. "
"Previously ``ValidationError`` instances were lost as soon as their "
"**rendered** error messages were added to the ``Form.errors`` dictionary. "
"Ideally ``Form.errors`` would have stored ``ValidationError`` instances and "
"methods with an ``as_`` prefix could render them, but it had to be done the "
"other way around in order not to break code that expects rendered error "
"messages in ``Form.errors``."
msgstr ""
"Метод ``as_data()`` добавлен для обратной совместимости. В предыдущих "
"версиях объекты ``ValidationError`` терялись при получении сообщения с "
"ошибкой и добавления его в словарь ``Form.errors``. В идеале ``Form.errors`` "
"должен содержать объекты ``ValidationError`` и метод с префиксом ``as_`` "
"должен преобразовать их в текстовые сообщения, но нам пришлось пойти другим "
"путем, чтобы не сломать существующий код, который ожидает получить сообщения "
"с ошибками из ``Form.errors``."

# e4cfeef061414a918796413fa99c9002
#: ../../ref/forms/api.txt:151
msgid "Returns the errors serialized as JSON."
msgstr "Возвращает ошибки в JSON формате."

# 7813d06b7b754b50abcbe059cb60f5e2
#: ../../ref/forms/api.txt:157
msgid ""
"By default, ``as_json()`` does not escape its output. If you are using it "
"for something like AJAX requests to a form view where the client interprets "
"the response and inserts errors into the page, you'll want to be sure to "
"escape the results on the client-side to avoid the possibility of a cross-"
"site scripting attack. It's trivial to do so using a JavaScript library like "
"jQuery - simply use ``$(el).text(errorText)`` rather than ``.html()``."
msgstr ""
"По умолчанию, ``as_json()`` не экранирует результат. Если вы используете, "
"например, AJAX запросы для отправки формы, и показываете ошибки на странице, "
"вам следует экранировать результат на клиенте, чтобы избежать XSS атак. Это "
"просто сделать, используя JavaScript библиотеку, например, jQuery -- просто "
"используйте ``$(el).text(errorText)`` вместо ``.html()``."

# 655df7f1fc2e4a18987faa96d0546864
#: ../../ref/forms/api.txt:164
msgid ""
"If for some reason you don't want to use client-side escaping, you can also "
"set ``escape_html=True`` and error messages will be escaped so you can use "
"them directly in HTML."
msgstr ""
"Если вы не хотите использовать экранирование на стороне клиента, можете "
"передать аргумент ``escape_html=True`` и все ошибки будет экранированы, "
"теперь их можно вставлять непосредственно в HTML."

# 902e1e8bde3e4c63822c6e8b4762e513
#: ../../ref/forms/api.txt:170
msgid ""
"This method allows adding errors to specific fields from within the ``Form."
"clean()`` method, or from outside the form altogether; for instance from a "
"view."
msgstr ""
"Этот метод позволяет добавить ошибки конкретному полю в методе ``Form."
"clean()``, или вне формы. Например, из представления."

# 9ec71694928e4fcaadbabfeb3c161ed9
#: ../../ref/forms/api.txt:174
msgid ""
"The ``field`` argument is the name of the field to which the errors should "
"be added. If its value is ``None`` the error will be treated as a non-field "
"error as returned by :meth:`Form.non_field_errors() <django.forms.Form."
"non_field_errors>`."
msgstr ""
"Аргумент ``field`` указывает поле, для которого необходимо добавить ошибку. "
"Если равен ``None``, ошибка будет добавлена к общим ошибкам формы, которые "
"можно получить через метод :meth:`Form.non_field_errors() <django.forms.Form."
"non_field_errors>`."

# c5ed5bd68e2c418984f036c7e44b02c8
#: ../../ref/forms/api.txt:179
msgid ""
"The ``error`` argument can be a simple string, or preferably an instance of "
"``ValidationError``. See :ref:`raising-validation-error` for best practices "
"when defining form errors."
msgstr ""
"Аргумент ``error`` может быть просто строкой, но лучше передавать объект "
"``ValidationError``. Смотрите :ref:`raising-validation-error`."

# 2233bf6c83f348178331f94297a51bff
#: ../../ref/forms/api.txt:183
msgid ""
"Note that ``Form.add_error()`` automatically removes the relevant field from "
"``cleaned_data``."
msgstr ""
"Обратите внимание, ``Form.add_error()`` автоматически удалит поле из "
"``cleaned_data``."

#: ../../ref/forms/api.txt:188
msgid ""
"This method returns a boolean designating whether a field has an error with "
"a specific error ``code``. If ``code`` is ``None``, it will return ``True`` "
"if the field contains any errors at all."
msgstr ""
"Этот метод возвращает ``True``, если поле содержит ошибку с кодом ``code``. "
"Если ``code`` равен ``None``, вернет ``True``, если поле содержит любую "
"ошибку."

#: ../../ref/forms/api.txt:192
msgid ""
"To check for non-field errors use :data:`~django.core.exceptions."
"NON_FIELD_ERRORS` as the ``field`` parameter."
msgstr ""
"Чтобы проверить наличие ошибок, которые не относятся ни к одному из полей, "
"передайте :data:`~django.core.exceptions.NON_FIELD_ERRORS` в параметре "
"``field``."

# ce56d4fd4e334d9fa3209fc5ac8d12a4
#: ../../ref/forms/api.txt:197
msgid ""
"This method returns the list of errors from :attr:`Form.errors <django.forms."
"Form.errors>`  that aren't associated with a particular field. This includes "
"``ValidationError``\\s that are raised in :meth:`Form.clean() <django.forms."
"Form.clean>` and errors added using :meth:`Form.add_error(None, \"...\") "
"<django.forms.Form.add_error>`."
msgstr ""
"Этот метод возвращает список ошибок из :attr:`Form.errors <django.forms.Form."
"errors>`, которые не привязаны к конкретному полю. Сюда входят ошибки "
"``ValidationError``, вызванные в :meth:`Form.clean() <django.forms.Form."
"clean>`, и ошибки, добавленные через :meth:`Form.add_error(None, \"...\") "
"<django.forms.Form.add_error>`."

# 4208058aeffa40d8b998a2f76456e8b1
#: ../../ref/forms/api.txt:204
msgid "Behavior of unbound forms"
msgstr "Поведение незаполненных форм"

# 27477804acf747a48958a4eacc1f1690
#: ../../ref/forms/api.txt:206
msgid ""
"It's meaningless to validate a form with no data, but, for the record, "
"here's what happens with unbound forms::"
msgstr ""
"Бессмысленно проводить проверку незаполненной формы, но покажем, что "
"происходит с такой формой::"

# 0c81282d6fd3486f9d491b1ba86ecaf3
#: ../../ref/forms/api.txt:216
msgid "Dynamic initial values"
msgstr "Динамические начальные значения"

# a0e0a9796c954124a6d2ecd0f0043952
#: ../../ref/forms/api.txt:220
msgid ""
"Use :attr:`~Form.initial` to declare the initial value of form fields at "
"runtime. For example, you might want to fill in a ``username`` field with "
"the username of the current session."
msgstr ""
"Используйте атрибут :attr:`~Form.initial` для определения начальных значений "
"полей формы во время работы приложения. Например, вам может потребоваться "
"заполнить поле ``username`` именем текущего пользователя."

# b407069874d34982bd72b49fb322323c
#: ../../ref/forms/api.txt:224
msgid ""
"To accomplish this, use the :attr:`~Form.initial` argument to a :class:"
"`Form`. This argument, if given, should be a dictionary mapping field names "
"to initial values. Only include the fields for which you're specifying an "
"initial value; it's not necessary to include every field in your form. For "
"example::"
msgstr ""
"Для этого следует использовать аргумент :attr:`~Form.initial` конструктора "
"класса :class:`Form`. Этот аргумент, если он передан, должен содержать "
"словарь, связывающий имена полей с их значениями. Указывайте в словаре "
"только те поля, значения которых вы желаете определить. Например::"

# b1a8486e700746f588b3e9ddf3d24172
#: ../../ref/forms/api.txt:231
msgid ""
"These values are only displayed for unbound forms, and they're not used as "
"fallback values if a particular value isn't provided."
msgstr ""
"Эти значения только отображаются на незаполненных формах, они не будут "
"доступны пока форма не будет отправлена пользователем."

# 14d603d3177b48139ebf9d71b7e617e1
#: ../../ref/forms/api.txt:234
#, fuzzy
msgid ""
"If a :class:`~django.forms.Field` defines :attr:`~Field.initial` *and* you "
"include :attr:`~Form.initial` when instantiating the ``Form``, then the "
"latter ``initial`` will have precedence. In this example, ``initial`` is "
"provided both at the field level and at the form instance level, and the "
"latter gets precedence::"
msgstr ""
"Следует отметить, что если класс :class:`~django.forms.Field` определяет "
"атрибут :attr:`~Form.initial` *и* вы используете аргумент ``initial`` при "
"создании экземпляра ``Form``, то последний ``initial`` будет иметь "
"преимущество. В этом примере, ``initial`` указан на уровнях поля и "
"экземпляра формы, и последний будет иметь преимущество::"

#: ../../ref/forms/api.txt:255
msgid ""
"Use :meth:`~Form.get_initial_for_field()` to retrieve initial data for a "
"form field. It retrieves data from :attr:`Form.initial` and :attr:`Field."
"initial`, in that order, and evaluates any callable initial values."
msgstr ""

# 4cb8fcaf28fa4b24bc17b2c1996ce9bf
#: ../../ref/forms/api.txt:260
msgid "Checking which form data has changed"
msgstr "Проверяем какие данные формы были изменены"

# 31bac3ab3fcb42f991e4a134374fa64b
#: ../../ref/forms/api.txt:264
msgid ""
"Use the ``has_changed()`` method on your ``Form`` when you need to check if "
"the form data has been changed from the initial data."
msgstr ""
"Используйте метод ``has_changed()``, если необходимо проверить были ли "
"изначальные данные изменены."

# 091c277ec4cd4f159eeaed41e18d4264
#: ../../ref/forms/api.txt:275
msgid ""
"When the form is submitted, we reconstruct it and provide the original data "
"so that the comparison can be done:"
msgstr ""
"После отправки формы, мы создаем ее, предоставляя изначальные данные, и "
"теперь может проверить изменились ли они:"

# da9871da5de54074801bd42c33ce199d
#: ../../ref/forms/api.txt:281
msgid ""
"``has_changed()`` will be ``True`` if the data from ``request.POST`` differs "
"from what was provided in :attr:`~Form.initial` or ``False`` otherwise. The "
"result is computed by calling :meth:`Field.has_changed` for each field in "
"the form."
msgstr ""
"``has_changed()`` вернет ``True``, если данные из ``request.POST`` "
"отличаются от данных из :attr:`~Form.initial`, иначе вернет ``False``. "
"Результат вычисляется путем вызова :meth:`Field.has_changed` для каждого "
"поля формы."

#: ../../ref/forms/api.txt:288
msgid ""
"The ``changed_data`` attribute returns a list of the names of the fields "
"whose values in the form's bound data (usually ``request.POST``) differ from "
"what was provided in :attr:`~Form.initial`. It returns an empty list if no "
"data differs."
msgstr ""
"Атрибут ``changed_data`` возвращает список полей, чии значения из переданных "
"данных (обычно ``request.POST``) отличаются от значений из :attr:`~Form."
"initial`. Возвращает пустой список, если данные не поменялись."

# 136bfedb7b8f454493be23b19086ae1d
#: ../../ref/forms/api.txt:297
msgid "Accessing the fields from the form"
msgstr "Обращение к полям из формы"

# 0570725f57b844819f216cc49dfe75fe
#: ../../ref/forms/api.txt:301
msgid ""
"You can access the fields of :class:`Form` instance from its ``fields`` "
"attribute::"
msgstr ""
"Вы можете обращаться к полям объекта :class:`Form`, используя атрибут "
"``fields``::"

# 9e5a6cfed06148b0891f4b9407697867
#: ../../ref/forms/api.txt:312
msgid ""
"You can alter the field of :class:`Form` instance to change the way it is "
"presented in the form::"
msgstr "Вы можете изменить поле::"

# e4aa7e16a2ff4997b386a7a6214e400a
#: ../../ref/forms/api.txt:321
msgid ""
"Beware not to alter the ``base_fields`` attribute because this modification "
"will influence all subsequent ``ContactForm`` instances within the same "
"Python process::"
msgstr ""
"Будьте осторожны, не изменяйте атрибут ``base_fields`` т.к. эти изменения "
"повлияют на все экземпляры ``ContactForm`` в текущем процессе Python::"

# 6d34b25e3f5e4b58b1e70ac7fdefac69
#: ../../ref/forms/api.txt:331
msgid "Accessing \"clean\" data"
msgstr "Доступ к \"чистым\" данным"

# 672fa6b894c14f66ad2766c4fd1b28bb
#: ../../ref/forms/api.txt:335
msgid ""
"Each field in a :class:`Form` class is responsible not only for validating "
"data, but also for \"cleaning\" it -- normalizing it to a consistent format. "
"This is a nice feature, because it allows data for a particular field to be "
"input in a variety of ways, always resulting in consistent output."
msgstr ""
"Каждое поле в классе :class:`Form` отвечает не только за проверку, но и за "
"нормализацию данных. Это приятная особенность, так как она позволяет вводить "
"данные в определённые поля различными способами, всегда получая правильный "
"результат."

# 890715d0918046ab81ed225549315871
#: ../../ref/forms/api.txt:340
msgid ""
"For example, :class:`~django.forms.DateField` normalizes input into a Python "
"``datetime.date`` object. Regardless of whether you pass it a string in the "
"format ``'1994-07-15'``, a ``datetime.date`` object, or a number of other "
"formats, ``DateField`` will always normalize it to a ``datetime.date`` "
"object as long as it's valid."
msgstr ""
"Например, класс :class:`~django.forms.DateField` нормализует введённое "
"значение к объекту ``datetime.date``. Независимо от того, передали ли вы "
"строку в формате ``'1994-07-15'``, объект ``datetime.date`` или число в "
"других форматах, ``DateField`` всегда преобразует его в объект ``datetime."
"date``, если при этом не произойдёт ошибка."

# 3f566e8f2ebb41f8be9134e3768d102c
#: ../../ref/forms/api.txt:346
msgid ""
"Once you've created a :class:`~Form` instance with a set of data and "
"validated it, you can access the clean data via its ``cleaned_data`` "
"attribute::"
msgstr ""
"После создания экземпляра :class:`~Form`, привязки данных и их проверки, вы "
"можете обращаться к \"чистым\" данным через атрибут ``cleaned_data``::"

# c745bda1d8c64625ad0d22e208273366
#: ../../ref/forms/api.txt:359
msgid ""
"Note that any text-based field -- such as ``CharField`` or ``EmailField`` -- "
"always cleans the input into a Unicode string. We'll cover the encoding "
"implications later in this document."
msgstr ""
"Следует отметить, что любое текстовое поле, такое как ``CharField`` или "
"``EmailField``, всегда преобразует текст в юникодную строку. Мы рассмотрим "
"применения кодировок далее."

# dc22232a855a4f34803ffdd9539ed8fd
#: ../../ref/forms/api.txt:363
msgid ""
"If your data does *not* validate, the ``cleaned_data`` dictionary contains "
"only the valid fields::"
msgstr ""
"Если данные *не прошли* проверку, то атрибут ``cleaned_data`` будет "
"содержать только значения тех полей, что прошли проверку::"

# e500e7ed1656470c973ba41d6c6e3f58
#: ../../ref/forms/api.txt:376
msgid ""
"``cleaned_data`` will always *only* contain a key for fields defined in the "
"``Form``, even if you pass extra data when you define the ``Form``. In this "
"example, we pass a bunch of extra fields to the ``ContactForm`` constructor, "
"but ``cleaned_data`` contains only the form's fields::"
msgstr ""
"Атрибут ``cleaned_data`` всегда содержит *только* данные для полей, "
"определённых в классе ``Form``, даже если вы передали дополнительные данные "
"при определении ``Form``. В этом примере, мы передаём набор дополнительных "
"полей в конструктор ``ContactForm``, но ``cleaned_data`` содержит только "
"поля формы::"

# 533bcbae10ae469497155044ded9785e
#: ../../ref/forms/api.txt:394
msgid ""
"When the ``Form`` is valid, ``cleaned_data`` will include a key and value "
"for *all* its fields, even if the data didn't include a value for some "
"optional fields. In this example, the data dictionary doesn't include a "
"value for the ``nick_name`` field, but ``cleaned_data`` includes it, with an "
"empty value::"
msgstr ""
"Если ``Form`` прошла проверку, то ``cleaned_data`` будет содержать ключ и "
"значение для *всех* полей формы, даже если данные не включают в себя "
"значение для некоторых необязательных полей. В данном примере, словарь "
"данных не содержит значение для поля ``nick_name``, но ``cleaned_data`` "
"содержит пустое значение для него::"

# d5eef22300204f6e90d0fecf4e59ed8f
#: ../../ref/forms/api.txt:411
msgid ""
"In this above example, the ``cleaned_data`` value for ``nick_name`` is set "
"to an empty string, because ``nick_name`` is ``CharField``, and ``CharField``"
"\\s treat empty values as an empty string. Each field type knows what its "
"\"blank\" value is -- e.g., for ``DateField``, it's ``None`` instead of the "
"empty string. For full details on each field's behavior in this case, see "
"the \"Empty value\" note for each field in the \"Built-in ``Field`` classes"
"\" section below."
msgstr ""
"В приведённом выше примере, значением атрибута ``cleaned_data`` для поля "
"``nick_name`` является пустая строка, так как ``nick_name`` -- это "
"``CharField``, а ``CharField`` рассматривает пустые значения как пустые "
"строки. Каждый тип поля знает, что такое \"пустое\" значение, т.е. для "
"``DateField`` -- это ``None``, на не пустая строка. Для получения "
"подробностей о поведении каждого типа поля обращайте внимание на заметку "
"\"Пустое значение\" для каждого поля в разделе \"Встроенные поля\", которые "
"приведён далее."

# 0cad4c5453df47088e47f263f0d1d20e
#: ../../ref/forms/api.txt:418
msgid ""
"You can write code to perform validation for particular form fields (based "
"on their name) or for the form as a whole (considering combinations of "
"various fields). More information about this is in :doc:`/ref/forms/"
"validation`."
msgstr ""
"Вы можете написать код для выполнения проверки определённых полей формы "
"(используя их имена) или для проверки всей формы (рассматривая её как "
"комбинацию полей). Подробная информация изложена в :doc:`/ref/forms/"
"validation`."

# 48af74b4cd614558a66ffcf29eb53776
#: ../../ref/forms/api.txt:425
msgid "Outputting forms as HTML"
msgstr "Выдача формы в виде HTML"

# 4ed23cfd3117484d9f8df9d9eda26a5a
#: ../../ref/forms/api.txt:427
msgid ""
"The second task of a ``Form`` object is to render itself as HTML. To do so, "
"simply ``print`` it::"
msgstr ""
"Второй задачей объекта ``Form`` является представление себя в виде HTML "
"кода. Для этого объект надо просто \"распечатать\"::"

# cdab81b91b0a48d99e82651eab4940b9
#: ../../ref/forms/api.txt:437
#, fuzzy
msgid ""
"If the form is bound to data, the HTML output will include that data "
"appropriately. For example, if a field is represented by an ``<input type="
"\"text\">``, the data will be in the ``value`` attribute. If a field is "
"represented by an ``<input type=\"checkbox\">``, then that HTML will include "
"``checked`` if appropriate::"
msgstr ""
"Если форма заполнена данными, то полученный HTML код будет включать себя эти "
"данные. Например, если поле представлено тегом ``<input type=\"text\">``, то "
"его данные будут подставлены в атрибут ``value``. Если поле представлено "
"тегом ``<input type=\"checkbox\">``, то HTML код будет содержать ``checked="
"\"checked\"``::"

#: ../../ref/forms/api.txt:456
msgid ""
"The ``checked`` attribute was changed to use HTML5 boolean syntax rather "
"than ``checked=\"checked\"``."
msgstr ""

# a234643592f0409393cd008712eb52b0
#: ../../ref/forms/api.txt:459
msgid ""
"This default output is a two-column HTML table, with a ``<tr>`` for each "
"field. Notice the following:"
msgstr ""
"По умолчанию в HTML форма представляется в виде таблицы, т.е. каждое поле "
"обёрнуто в ``<tr>``. Обратите внимание на:"

# b2c084fbdf2c4044b79c0e177540b6a5
#: ../../ref/forms/api.txt:462
msgid ""
"For flexibility, the output does *not* include the ``<table>`` and ``</"
"table>`` tags, nor does it include the ``<form>`` and ``</form>`` tags or an "
"``<input type=\"submit\">`` tag. It's your job to do that."
msgstr ""
"Для гибкости, выводимый код *не включает в себя* ни теги ``<table>`` и ``</"
"table>``, ни теги ``<form>`` and ``</form>``, ни тег ``<input type=\"submit"
"\">``. Не забывайте их добавлять."

# 9cec1933373f406b919e4fcb9705f55e
#: ../../ref/forms/api.txt:466
msgid ""
"Each field type has a default HTML representation. ``CharField`` is "
"represented by an ``<input type=\"text\">`` and ``EmailField`` by an "
"``<input type=\"email\">``. ``BooleanField`` is represented by an ``<input "
"type=\"checkbox\">``. Note these are merely sensible defaults; you can "
"specify which HTML to use for a given field by using widgets, which we'll "
"explain shortly."
msgstr ""
"Каждый тип поля имеет стандартное HTML представление. Тип "
"``CharField``представлен как ``<input type=\"text\">``, а ``EmailField`` как "
"``<input type=\"email\">``. Тип ``BooleanField`` представлен  ``<input type="
"\"checkbox\">``. Следует отметить, что эти представления достаточно гибкие, "
"так как вы можете влиять на них, указав для поля виджет. Далее мы покажем "
"как это делается."

# 599bbd49673c413b8ddb18d5b9988ebb
#: ../../ref/forms/api.txt:473
msgid ""
"The HTML ``name`` for each tag is taken directly from its attribute name in "
"the ``ContactForm`` class."
msgstr ""
"Атрибут ``name`` каждого тега совпадает напрямую с именем атрибута в классе "
"``ContactForm``."

# 16807210069f4c8a8edba554a0e7f1fc
#: ../../ref/forms/api.txt:476
msgid ""
"The text label for each field -- e.g. ``'Subject:'``, ``'Message:'`` and "
"``'Cc myself:'`` is generated from the field name by converting all "
"underscores to spaces and upper-casing the first letter. Again, note these "
"are merely sensible defaults; you can also specify labels manually."
msgstr ""
"Текстовая метка каждого поля, т.е. ``'Subject:'``, ``'Message:'`` и ``'Cc "
"myself:'``, генерируется из имени поля, конвертируя символы подчёркивания в "
"пробелы и переводя первый символ в верхний регистр. Также, вы можете явно "
"назначить текстовую метку для поля."

# 15b6e77cb3524fe59bf5af8688e23fd7
#: ../../ref/forms/api.txt:481
msgid ""
"Each text label is surrounded in an HTML ``<label>`` tag, which points to "
"the appropriate form field via its ``id``. Its ``id``, in turn, is generated "
"by prepending ``'id_'`` to the field name. The ``id`` attributes and "
"``<label>`` tags are included in the output by default, to follow best "
"practices, but you can change that behavior."
msgstr ""
"Каждая текстовая метка выводится с помощью тега ``<label>``, который "
"указывает на соответствующее поле формы с помощью атрибута ``id``. Атрибут "
"``id`` генерируется путём добавления префикса ``'id_'`` к имени поля. "
"Атрибуты ``id`` и теги ``<label>`` включаются в HTML представление формы по "
"умолчанию, но можете изменить такое поведение формы."

#: ../../ref/forms/api.txt:487
msgid ""
"The output uses HTML5 syntax, targeting ``<!DOCTYPE html>``. For example, it "
"uses boolean attributes such as ``checked`` rather than the XHTML style of "
"``checked='checked'``."
msgstr ""

# 7ceae7856dc74cd280bf44d96623be8b
#: ../../ref/forms/api.txt:491
msgid ""
"Although ``<table>`` output is the default output style when you ``print`` a "
"form, other output styles are available. Each style is available as a method "
"on a form object, and each rendering method returns a Unicode object."
msgstr ""
"Несмотря на то, что по умолчанию форма выводится в табличном виде, "
"существует ряд других представлений. Каждое представление доступно через "
"метод объекта формы, возвращая объект ``Unicode``."

# d9701f053a174b76bed794f26446cde3
#: ../../ref/forms/api.txt:496
msgid "``as_p()``"
msgstr "``as_p()``"

# c630f65949184ebeb4ab63159c02cd6e
#: ../../ref/forms/api.txt:500
msgid ""
"``as_p()`` renders the form as a series of ``<p>`` tags, with each ``<p>`` "
"containing one field::"
msgstr ""
"Метод ``as_p()`` представляет форму в виде последовательности тегов  "
"``<p>``, по одному на каждое поле::"

# ea8e2f09e85f4e5c9f1235c8f1fb15b6
#: ../../ref/forms/api.txt:513
msgid "``as_ul()``"
msgstr "``as_ul()``"

# fa1fe65fd1f54d3a918a311825a1e2b1
#: ../../ref/forms/api.txt:517
msgid ""
"``as_ul()`` renders the form as a series of ``<li>`` tags, with each "
"``<li>`` containing one field. It does *not* include the ``<ul>`` or ``</"
"ul>``, so that you can specify any HTML attributes on the ``<ul>`` for "
"flexibility::"
msgstr ""
"Метод ``as_ul()`` представляет форму в виде последовательности тегов "
"``<li>``, по одному на каждое поле. Представление *не включает в себя* теги "
"``<ul>`` или ``</ul>``, таким образом вы можете указать любой атрибут для "
"тега ``<ul>``::"

# ed47171e80ec4a3c9b65ad4358f55a01
#: ../../ref/forms/api.txt:532
msgid "``as_table()``"
msgstr "``as_table()``"

# 7233b07df84441c7bcc1eeb921249cef
#: ../../ref/forms/api.txt:536
msgid ""
"Finally, ``as_table()`` outputs the form as an HTML ``<table>``. This is "
"exactly the same as ``print``. In fact, when you ``print`` a form object, it "
"calls its ``as_table()`` method behind the scenes::"
msgstr ""
"Наконец, метод ``as_table()`` выводит форму в виде таблицы. Этот метод "
"используется по умолчанию::"

# d1f22e5dbf324aec80a9f1487689d543
#: ../../ref/forms/api.txt:552
msgid "Styling required or erroneous form rows"
msgstr "Стилизация обязательных полей или полей с ошибкой"

# 053e9eb1515d4120b6e8d4218df40284
#: ../../ref/forms/api.txt:557
msgid ""
"It's pretty common to style form rows and fields that are required or have "
"errors. For example, you might want to present required form rows in bold "
"and highlight errors in red."
msgstr ""
"Стилизация полей формы, обязательных для заполнения или имеющих ошибку, "
"является общей практикой. Например, вы можете выделять обязательные поля "
"жирным шрифтом, а поля с ошибкой выводить на красном."

# 9c78596fc8114ac2bee05bda1bf47437
#: ../../ref/forms/api.txt:561
msgid ""
"The :class:`Form` class has a couple of hooks you can use to add ``class`` "
"attributes to required rows or to rows with errors: simply set the :attr:"
"`Form.error_css_class` and/or :attr:`Form.required_css_class` attributes::"
msgstr ""
"Класс :class:`Form` имеет ряд возможностей, которые вы можете использовать "
"для добавления атрибутов ``class`` к обязательным полям и полям с ошибками: "
"просто определите атрибут :attr:`Form.error_css_class` и/или :attr:`Form."
"required_css_class` attributes::"

# f81225acc6e140e2af26e3b9e59c09dd
#: ../../ref/forms/api.txt:574
msgid ""
"Once you've done that, rows will be given ``\"error\"`` and/or ``\"required"
"\"`` classes, as needed. The HTML will look something like::"
msgstr ""
"После этого к полям будут добавлены классы ``\"error\"`` и/или ``\"required"
"\"``. В результате HTML код будет выглядеть таким образом::"

# d1433d4f88034e21bf03e0c4ca36df0d
#: ../../ref/forms/api.txt:591
msgid "Configuring form elements' HTML ``id`` attributes and ``<label>`` tags"
msgstr "Настройка тегов ``<label>`` и атрибута ``id``"

# 5a42f236059241ef9a40871be630afed
#: ../../ref/forms/api.txt:595
msgid "By default, the form rendering methods include:"
msgstr "По умолчанию методы для рендеринга форма включают:"

# bf52fa8bd3f54b4b8058eb3d4ff27e24
#: ../../ref/forms/api.txt:597
msgid "HTML ``id`` attributes on the form elements."
msgstr "HTML атрибуты ``id`` элементов формы."

# 5dd8d384015b4747a3f01031d2e6ef35
#: ../../ref/forms/api.txt:599
msgid ""
"The corresponding ``<label>`` tags around the labels. An HTML ``<label>`` "
"tag designates which label text is associated with which form element. This "
"small enhancement makes forms more usable and more accessible to assistive "
"devices. It's always a good idea to use ``<label>`` tags."
msgstr ""
"Тег ``<label>`` определяет, с каким элементом формы связана текущая "
"текстовая метка. Это небольшое уточнение делает форму более открытой для "
"устройств. Советуем использовать теги ``<label>``."

# 22be033540ab4d82a67a561652618cce
#: ../../ref/forms/api.txt:604
msgid ""
"The ``id`` attribute values are generated by prepending ``id_`` to the form "
"field names.  This behavior is configurable, though, if you want to change "
"the ``id`` convention or remove HTML ``id`` attributes and ``<label>`` tags "
"entirely."
msgstr ""
"Атрибуты ``id`` создаются с помощью добавления префикса ``id_`` к именам "
"полей формы. Это поведение является изменяемым, таким образом вы можете "
"изменить его или вообще удалить эти атрибуты и тег ``<label>`` из формы."

# ce67d93e132146a1bdc8466cf22c841d
#: ../../ref/forms/api.txt:609
msgid ""
"Use the ``auto_id`` argument to the ``Form`` constructor to control the "
"``id`` and label behavior. This argument must be ``True``, ``False`` or a "
"string."
msgstr ""
"Используйте аргумент ``auto_id`` конструктора ``Form`` для управления "
"поведением меток и их идентификаторов. Этот аргумент может принимать "
"значения ``True``, ``False`` или строку."

# e61362d69fc2443887fd5c235627cd07
#: ../../ref/forms/api.txt:612
msgid ""
"If ``auto_id`` is ``False``, then the form output will not include "
"``<label>`` tags nor ``id`` attributes::"
msgstr ""
"Если ``auto_id`` равен ``False``, тогда форма не содержит ни тегов "
"``<label>``, ни атрибутов ``id``::"

# afd5cb2148e347528bd0ebee778327d4
#: ../../ref/forms/api.txt:632
msgid ""
"If ``auto_id`` is set to ``True``, then the form output *will* include "
"``<label>`` tags and will simply use the field name as its ``id`` for each "
"form field::"
msgstr ""
"Если ``auto_id`` равен ``True``, тогда форма *содержит* теги ``<label>`` и "
"использует имена полей в качестве значений атрибутов тегов, название поля "
"будет использоваться как ``id``::"

# 7cc21479afb140668b3ea328a170b21b
#: ../../ref/forms/api.txt:653
msgid ""
"If ``auto_id`` is set to a string containing the format character ``'%s'``, "
"then the form output will include ``<label>`` tags, and will generate ``id`` "
"attributes based on the format string. For example, for a format string "
"``'field_%s'``, a field named ``subject`` will get the ``id`` value "
"``'field_subject'``. Continuing our example::"
msgstr ""
"Если ``auto_id`` является строкой, которая содержит символ форматирования "
"``'%s'``, тогда форма будет содержать теги ``<label>`` и будет генерировать "
"``id`` атрибуты, используя эту строку. Например, для строки ``'field_%s'``, "
"поле с именем ``subject`` для атрибута ``id`` получит значение "
"``'field_subject'``. Вернёмся к нашему примеру::"

# ab31baad54b245efaee280baa67a3d88
#: ../../ref/forms/api.txt:676
msgid ""
"If ``auto_id`` is set to any other true value -- such as a string that "
"doesn't include ``%s`` -- then the library will act as if ``auto_id`` is "
"``True``."
msgstr ""
"Если ``auto_id`` равно любому другому значимому значению (например, строка, "
"которая не содержит символа форматирования), тогда библиотека будет "
"рассматривать это значение как ``True``."

# e19fc6c0ca7747478061b28ec47cda10
#: ../../ref/forms/api.txt:679
msgid "By default, ``auto_id`` is set to the string ``'id_%s'``."
msgstr "По умолчанию, ``auto_id`` имеет значение ``'id_%s'``."

# 55f4ae434de843969915cf2029d0651a
#: ../../ref/forms/api.txt:683
msgid ""
"A translatable string (defaults to a colon (``:``) in English) that will be "
"appended after any label name when a form is rendered."
msgstr ""
"Строка(по умолчанию двоеточие (``:``)), которая будет добавлена к названию "
"метки поля. Строка локализирована и можно перевести на разные языки."

# 217177bfd7464e58a139fbdd6ea94387
#: ../../ref/forms/api.txt:686
msgid ""
"It's possible to customize that character, or omit it entirely, using the "
"``label_suffix`` parameter::"
msgstr ""
"Есть возможность заменить это двоеточие на другой символ или вообще убрать "
"его. Для этого надо воспользоваться параметром ``label_suffix``::"

# 5d44008ae7fe4c55984554080c527e07
#: ../../ref/forms/api.txt:702
msgid ""
"Note that the label suffix is added only if the last character of the label "
"isn't a punctuation character (in English, those are ``.``, ``!``, ``?`` or "
"``:``)."
msgstr ""
"Следует отметить, что суффикс добавляется к метке только в том случае, когда "
"последний символ метки не является пунктуационным, т.е. не принадлежит "
"списку (``.``, ``!``, ``?`` or ``:``)."

#: ../../ref/forms/api.txt:706
msgid ""
"Fields can also define their own :attr:`~django.forms.Field.label_suffix`. "
"This will take precedence over :attr:`Form.label_suffix <django.forms.Form."
"label_suffix>`. The suffix can also be overridden at runtime using the "
"``label_suffix`` parameter to :meth:`~django.forms.BoundField.label_tag`."
msgstr ""
"Поля могут также могут указывать свои :attr:`~django.forms.Field."
"label_suffix`. У этого значение приоритет выше, чем у :attr:`Form."
"label_suffix <django.forms.Form.label_suffix>`. Этот суффикс может быть "
"переопределен во время выполнения через параметр ``label_suffix`` атрибута :"
"meth:`~django.forms.BoundField.label_tag`."

#: ../../ref/forms/api.txt:716
msgid ""
"When set to ``True`` (the default), required form fields will have the "
"``required`` HTML attribute."
msgstr ""

#: ../../ref/forms/api.txt:719
msgid ""
":doc:`Formsets </topics/forms/formsets>` instantiate forms with "
"``use_required_attribute=False`` to avoid incorrect browser validation when "
"adding and deleting forms from a formset."
msgstr ""

#: ../../ref/forms/api.txt:724
msgid "Configuring the rendering of a form's widgets"
msgstr ""

#: ../../ref/forms/api.txt:730
msgid ""
"Specifies the :doc:`renderer <renderers>` to use for the form. Defaults to "
"``None`` which means to use the default renderer specified by the :setting:"
"`FORM_RENDERER` setting."
msgstr ""

#: ../../ref/forms/api.txt:734
msgid ""
"You can set this as a class attribute when declaring your form or use the "
"``renderer`` argument to ``Form.__init__()``. For example::"
msgstr ""

#: ../../ref/forms/api.txt:742
msgid "or::"
msgstr ""

# 5dd165a536e14f89946c2d4f9fdcb4ee
#: ../../ref/forms/api.txt:747
msgid "Notes on field ordering"
msgstr "Порядок полей"

# ea6edb43ae2f44e9b664f2dfcba42111
#: ../../ref/forms/api.txt:749
msgid ""
"In the ``as_p()``, ``as_ul()`` and ``as_table()`` shortcuts, the fields are "
"displayed in the order in which you define them in your form class. For "
"example, in the ``ContactForm`` example, the fields are defined in the order "
"``subject``, ``message``, ``sender``, ``cc_myself``. To reorder the HTML "
"output, just change the order in which those fields are listed in the class."
msgstr ""
"При использовании методов ``as_p()``, ``as_ul()`` и ``as_table()`` поля "
"отображаются в порядке их определения в классе формы. Например, в нашей "
"форме ``ContactForm`` поля определены в порядке ``subject``, ``message``, "
"``sender``, ``cc_myself``. Для изменения их порядка на форме, просто "
"поменяйте их местами в классе."

#: ../../ref/forms/api.txt:755
msgid "There are several other ways to customize the order:"
msgstr "Есть и другие способы переопределить порядок полей в форме:"

#: ../../ref/forms/api.txt:759
msgid ""
"By default ``Form.field_order=None``, which retains the order in which you "
"define the fields in your form class. If ``field_order`` is a list of field "
"names, the fields are ordered as specified by the list and remaining fields "
"are appended according to the default order. Unknown field names in the list "
"are ignored. This makes it possible to disable a field in a subclass by "
"setting it to ``None`` without having to redefine ordering."
msgstr ""
"По умолчанию ``Form.field_order=None``, при этом поля формы будут в порядке "
"их определения. Если ``field_order`` содержит список названий полей формы, "
"поля будут выведены в указанном порядке, а оставшиеся -- в порядке по "
"умолчанию. Неизвестные названия полей будут проигнорированы. Это позволяете "
"удалить поле в классе-наследнике, установив его в ``None``, и при это вам не "
"нужно переопределять ``field_order``."

#: ../../ref/forms/api.txt:766
msgid ""
"You can also use the ``Form.field_order`` argument to a :class:`Form` to "
"override the field order. If a :class:`~django.forms.Form` defines :attr:"
"`~Form.field_order` *and* you include ``field_order`` when instantiating the "
"``Form``, then the latter ``field_order`` will have precedence."
msgstr ""
"Также можно передать аргумент ``Form.field_order`` в :class:`Form`, чтобы "
"переопределить порядок полей. Если :class:`~django.forms.Form` содержит :"
"attr:`~Form.field_order` *и* и передать аргумент ``field_order`` при "
"создании ``Form``, будет использоваться последний ``field_order``."

#: ../../ref/forms/api.txt:773
msgid ""
"You may rearrange the fields any time using ``order_fields()`` with a list "
"of field names as in :attr:`~django.forms.Form.field_order`."
msgstr ""
"Вы можете изменить порядок полей, используя метод ``order_fields()`` и "
"передав в него список полей, как и для :attr:`~django.forms.Form."
"field_order`."

# 95d38c9a65874fc6ae6c4f74b9858dd9
#: ../../ref/forms/api.txt:777
msgid "How errors are displayed"
msgstr "Отображение ошибок"

# 4e6b97ac9e424fa091198207e2f71e39
#: ../../ref/forms/api.txt:779
msgid ""
"If you render a bound ``Form`` object, the act of rendering will "
"automatically run the form's validation if it hasn't already happened, and "
"the HTML output will include the validation errors as a ``<ul class="
"\"errorlist\">`` near the field. The particular positioning of the error "
"messages depends on the output method you're using::"
msgstr ""
"При отображении заполненного объекта ``Form``, процесс генерации HTML кода "
"автоматически выполняет проверку данных формы, если она ещё не была "
"произведена. Если проверка выявила ошибки, то HTML код формы будет включать "
"в себя список ошибок в виде списка ``<ul class=\"errorlist\">`` у "
"соответствующего поля. Точная позиция списка сообщений с ошибками проверки "
"зависит от метода, который вы используете::"

# 9d00b339491d412f88063bea8fe1479c
#: ../../ref/forms/api.txt:811
msgid "Customizing the error list format"
msgstr "Настройка формата списка ошибок"

# 827ea633dae8413d903221f568455c4f
#: ../../ref/forms/api.txt:813
msgid ""
"By default, forms use ``django.forms.utils.ErrorList`` to format validation "
"errors. If you'd like to use an alternate class for displaying errors, you "
"can pass that in at construction time (replace ``__str__`` by "
"``__unicode__`` on Python 2)::"
msgstr ""
"По умолчанию, формы используют ``django.forms.utils.ErrorList`` для "
"форматирования списка с ошибками . Если вам требуется использовать другой "
"класс для отображения ошибок, вы можете передать его во время создания "
"объекта формы (замените ``__str__`` на ``__unicode__`` для Python 2)::"

# 084f5b0c4bbf46f98c4e6e440ed57868
#: ../../ref/forms/api.txt:835
msgid "More granular output"
msgstr "Точное управление выводом"

# 11d64c7c3e8a4db5a28e78a05019edb4
#: ../../ref/forms/api.txt:837
msgid ""
"The ``as_p()``, ``as_ul()``, and ``as_table()`` methods are simply shortcuts "
"-- they're not the only way a form object can be displayed."
msgstr ""
"Методы ``as_p()``, ``as_ul()`` и ``as_table()`` являются упрошенными "
"методами отображения формы. Это не единственные способы отображения формы."

# 6f805632f3ff44ed868ec9ff52d216b5
#: ../../ref/forms/api.txt:842
msgid ""
"Used to display HTML or access attributes for a single field of a :class:"
"`Form` instance."
msgstr ""
"Используется для отображения HTML или для доступа к атрибутам отдельного "
"поля экземпляра :class:`Form`."

# 05a6107507624dc89062ac6bde6d74c9
#: ../../ref/forms/api.txt:845
msgid ""
"The ``__str__()`` (``__unicode__`` on Python 2) method of this object "
"displays the HTML for this field."
msgstr ""
"Метод ``__str__()`` (``__unicode__`` в Python 2) этого объекта возвращают "
"HTML для данного поля."

# 8432d23b01e04a4786680ddbbdf7bf69
#: ../../ref/forms/api.txt:848
msgid ""
"To retrieve a single ``BoundField``, use dictionary lookup syntax on your "
"form using the field's name as the key::"
msgstr ""
"Для получение одного ``BoundField`` используйте синтаксис поиска в словаре, "
"применяя имя поля в качестве ключа::"

# 9236e432dc6e4111bcd60c7e9dc7cdf3
#: ../../ref/forms/api.txt:855
msgid "To retrieve all ``BoundField`` objects, iterate the form::"
msgstr "Для получения всех объектов ``BoundField``, пройдите циклом по форме::"

# a090a4e99b53456eb3b4c3c61fc41c57
#: ../../ref/forms/api.txt:864
msgid ""
"The field-specific output honors the form object's ``auto_id`` setting::"
msgstr "Вывод указанного поля соответствует настройке ``auto_id``::"

#: ../../ref/forms/api.txt:874
msgid "Attributes of ``BoundField``"
msgstr "Атрибуты ``BoundField``"

#: ../../ref/forms/api.txt:878
msgid ""
"The HTML ID attribute for this ``BoundField``. Returns an empty string if :"
"attr:`Form.auto_id` is ``False``."
msgstr ""

#: ../../ref/forms/api.txt:883
msgid ""
"This property returns the data for this :class:`~django.forms.BoundField` "
"extracted by the widget's :meth:`~django.forms.Widget.value_from_datadict` "
"method, or ``None`` if it wasn't given::"
msgstr ""
"Это свойство возвращает данные для текущего :class:`~django.forms."
"BoundField`, полученные из метода :meth:`~django.forms.Widget."
"value_from_datadict` виджета, или ``None``, если данные отсутствуют::"

# ef4a7196061340cba6ce398b1b5fde5a
#: ../../ref/forms/api.txt:896
msgid ""
"A :ref:`list-like object <ref-forms-error-list-format>` that is displayed as "
"an HTML ``<ul class=\"errorlist\">`` when printed::"
msgstr ""
":ref:`Объект со свойствами списка <ref-forms-error-list-format>`, который "
"при отображении представляется в виде ``<ul class=\"errorlist\">``::"

#: ../../ref/forms/api.txt:916
msgid ""
"The form :class:`~django.forms.Field` instance from the form class that "
"this :class:`~django.forms.BoundField` wraps."
msgstr ""
"Экземпляр :class:`~django.forms.Field` из класса формы, который оборачивает "
"текущий :class:`~django.forms.BoundField`."

#: ../../ref/forms/api.txt:921
msgid ""
"The :class:`~django.forms.Form` instance this :class:`~django.forms."
"BoundField` is bound to."
msgstr ""
"Экземпляр :class:`~django.forms.Form`, к которому привязан текущий :class:"
"`~django.forms.BoundField`."

#: ../../ref/forms/api.txt:926
msgid "The :attr:`~django.forms.Field.help_text` of the field."
msgstr ":attr:`~django.forms.Field.help_text` поля."

#: ../../ref/forms/api.txt:930
msgid ""
"The name that will be used in the widget's HTML ``name`` attribute. It takes "
"the form :attr:`~django.forms.Form.prefix` into account."
msgstr ""
"Название, которое будет использоваться в HTML атрибуте ``name`` виджета. "
"Учитывает :attr:`~django.forms.Form.prefix` формы."

# 98d969faa3514b26b252cac688ac9301
#: ../../ref/forms/api.txt:935
msgid ""
"Use this property to render the ID of this field. For example, if you are "
"manually constructing a ``<label>`` in your template (despite the fact that :"
"meth:`~BoundField.label_tag` will do this for you):"
msgstr ""
"Этот атрибут рендерит ID поля. Например, вы можете использовать его, если вы "
"самостоятельно создаете ``<label>`` для поля (несмотря на то, что :meth:"
"`~BoundField.label_tag` делает это для вас):"

# eaf86d6aad4a4ad0b3b788e088850f76
#: ../../ref/forms/api.txt:943
msgid ""
"By default, this will be the field's name prefixed by ``id_`` "
"(\"``id_my_field``\" for the example above). You may modify the ID by "
"setting :attr:`~django.forms.Widget.attrs` on the field's widget. For "
"example, declaring a field like this::"
msgstr ""
"По умолчанию, он равен названию поля с префиксом ``id_`` (\"``id_my_field``"
"\" для примера выше). Вы можете изменить ID, передав его в параметре :attr:"
"`~django.forms.Widget.attrs` виджета. Например, определив поле следующим "
"образом::"

# 463c8e66c81b4edd865a966b3ba98714
#: ../../ref/forms/api.txt:950
msgid "and using the template above, would render something like:"
msgstr "и используя пример выше, получите следующий результат:"

#: ../../ref/forms/api.txt:958
msgid ""
"Returns ``True`` if this :class:`~django.forms.BoundField`'s widget is "
"hidden."
msgstr ""
"Возвращает ``True``, если виджет :class:`~django.forms.BoundField`' скрыт."

#: ../../ref/forms/api.txt:963
msgid ""
"The :attr:`~django.forms.Field.label` of the field. This is used in :meth:"
"`~BoundField.label_tag`."
msgstr ""
":attr:`~django.forms.Field.label` поля. Используется в :meth:`~BoundField."
"label_tag`."

# 136bfedb7b8f454493be23b19086ae1d
#: ../../ref/forms/api.txt:968
msgid "The name of this field in the form::"
msgstr "Название текущего поля в форме::"

#: ../../ref/forms/api.txt:977
msgid "Methods of ``BoundField``"
msgstr "Методы ``BoundField``"

#: ../../ref/forms/api.txt:981
msgid ""
"Returns a string of HTML for representing this as an ``<input type=\"hidden"
"\">``."
msgstr ""
"Возвращает HTML строку, которая представляет текущее поля как ``<input type="
"\"hidden\">``."

#: ../../ref/forms/api.txt:983
msgid "``**kwargs`` are passed to :meth:`~django.forms.BoundField.as_widget`."
msgstr "``**kwargs`` передается в :meth:`~django.forms.BoundField.as_widget`."

#: ../../ref/forms/api.txt:985
msgid ""
"This method is primarily used internally. You should use a widget instead."
msgstr ""
"Этот метод в основном используется внутренним кодом. Вам следует "
"использовать виджет вместо него."

#: ../../ref/forms/api.txt:989
msgid ""
"Renders the field by rendering the passed widget, adding any HTML attributes "
"passed as ``attrs``.  If no widget is specified, then the field's default "
"widget will be used."
msgstr ""
"Рендерит поле, используя переданный виджет, добавляете HTML атрибуты из "
"``attrs``. Если виджет не указан, будет использоваться виджет по умолчанию "
"поля."

#: ../../ref/forms/api.txt:993
msgid ""
"``only_initial`` is used by Django internals and should not be set "
"explicitly."
msgstr "``only_initial`` используется Django и не должен указываться явно."

# 45929f84c27341b5bb6b62e8d9c14cba
#: ../../ref/forms/api.txt:998
msgid ""
"When you use Django's rendering shortcuts, CSS classes are used to indicate "
"required form fields or fields that contain errors. If you're manually "
"rendering a form, you can access these CSS classes using the ``css_classes`` "
"method::"
msgstr ""
"Когда вы применяете общие методы для отображения формы, для выделения "
"обязательных полей формы или полей, которые содержат ошибки, используются "
"CSS классы. Если вы вручную выводите форму, вы можете получить доступ к этим "
"классам через метод ``css_classes``::"

# 2c39d90cad344c9dbbe181e125fb8d7a
#: ../../ref/forms/api.txt:1007
msgid ""
"If you want to provide some additional classes in addition to the error and "
"required classes that may be required, you can provide those classes as an "
"argument::"
msgstr ""
"Если потребуется предоставить дополнительные классы для ошибок и "
"обязательных полей, вы можете указать эти классы в качестве аргумента::"

# 4efe1c30931b42aca5d307429426c823
#: ../../ref/forms/api.txt:1017
msgid ""
"To separately render the label tag of a form field, you can call its "
"``label_tag()`` method::"
msgstr ""
"Чтобы отдельно отрендерить label поля, вызовите метод ``label_tag()``::"

# 50a3db25a8064cc5b64d17b5badfc0c0
#: ../../ref/forms/api.txt:1024
msgid ""
"You can provide the ``contents`` parameter which will replace the auto-"
"generated label tag. An ``attrs`` dictionary may contain additional "
"attributes for the ``<label>`` tag."
msgstr ""
"Вы можете передать параметр ``contents``, который заменит автоматически "
"генерируемый тег ``<label>``. Необязательный параметр ``attrs``, который "
"является словарем, может передавать дополнительные атрибуты для тега "
"``<label>``."

# 3d1c53e62e944cc2b8a139a8b6ca6194
#: ../../ref/forms/api.txt:1028
msgid ""
"The HTML that's generated includes the form's :attr:`~django.forms.Form."
"label_suffix` (a colon, by default) or, if set, the current field's :attr:"
"`~django.forms.Field.label_suffix`. The optional ``label_suffix`` parameter "
"allows you to override any previously set suffix. For example, you can use "
"an empty string to hide the label on selected fields. If you need to do this "
"in a template, you could write a custom filter to allow passing parameters "
"to ``label_tag``."
msgstr ""
"Сгенерированный HTML содержит :attr:`~django.forms.Form.label_suffix` формы "
"(двоеточие по умолчанию), или :attr:`~django.forms.Field.label_suffix` поля, "
"если этот атрибут установлен. Необязательный аргумент ``label_suffix`` "
"позволяет переопределить установленный ранее суффикс. Например, можно "
"использовать пустую строку, чтобы скрыть метку поля. Если это необходимо "
"сделать в шаблоне, создайте собственный фильтр, который позволяет передавать "
"значение в ``label_tag``."

# d434191be80b4da0a5d645b02de4082e
#: ../../ref/forms/api.txt:1038
msgid ""
"Use this method to render the raw value of this field as it would be "
"rendered by a ``Widget``::"
msgstr ""
"Используйте этот метод для выдачи \"сырого\" значения данного поля, как "
"будто бы оно было отображено через ``Widget``::"

#: ../../ref/forms/api.txt:1050
msgid "Customizing ``BoundField``"
msgstr "Настройка ``BoundField``"

#: ../../ref/forms/api.txt:1052
msgid ""
"If you need to access some additional information about a form field in a "
"template and using a subclass of :class:`~django.forms.Field` isn't "
"sufficient, consider also customizing :class:`~django.forms.BoundField`."
msgstr ""
"Если вам необходима дополнительная информация про поле формы в шаблоне, и "
"наследоваться от :class:`~django.forms.Field` не достаточно, вы можете "
"переопределить :class:`~django.forms.BoundField`."

#: ../../ref/forms/api.txt:1056
msgid "A custom form field can override ``get_bound_field()``:"
msgstr ""
"В собственном поле формы можно переопределить метод ``get_bound_field()``:"

#: ../../ref/forms/api.txt:1060
msgid ""
"Takes an instance of :class:`~django.forms.Form` and the name of the field. "
"The return value will be used when accessing the field in a template. Most "
"likely it will be an instance of a subclass of :class:`~django.forms."
"BoundField`."
msgstr ""
"Принимает экземпляр :class:`~django.forms.Form` и название поля. "
"Возвращаемое значение будет использоваться при доступе к полю в шаблоне. "
"Обычно это экземпляр :class:`~django.forms.BoundField`."

#: ../../ref/forms/api.txt:1065
msgid ""
"If you have a ``GPSCoordinatesField``, for example, and want to be able to "
"access additional information about the coordinates in a template, this "
"could be implemented as follows::"
msgstr ""
"Например у вас есть поле ``GPSCoordinatesField``, и вы хотите получать "
"дополнительную информацию про координаты в шаблоне, это можно сделать "
"следующим образом::"

#: ../../ref/forms/api.txt:1086
msgid ""
"Now you can access the country in a template with ``{{ form.coordinates."
"country }}``."
msgstr ""
"Теперь вы можете получить страну в шаблоне через ``{{ form.coordinates."
"country }}``."

# 940d4068a9c54ee09a2189d497a6972e
#: ../../ref/forms/api.txt:1092
msgid "Binding uploaded files to a form"
msgstr "Привязка загруженных файлов к форме"

# ac12629eaaf94d699a975c1cae1becb2
#: ../../ref/forms/api.txt:1094
msgid ""
"Dealing with forms that have ``FileField`` and ``ImageField`` fields is a "
"little more complicated than a normal form."
msgstr ""
"Работа с формами, которые содержат поля ``FileField`` и ``ImageField`` "
"немного отличается от работы с обычными формами."

# 8ef7d7b48865421680b7e7a967b87b18
#: ../../ref/forms/api.txt:1097
msgid ""
"Firstly, in order to upload files, you'll need to make sure that your "
"``<form>`` element correctly defines the ``enctype`` as ``\"multipart/form-"
"data\"``::"
msgstr ""
"Сначала, для того, чтобы загружать файлы, вам потребуется назначить форме "
"атрибут ``enctype``::"

# d55e769375574105b58f3ec3a0f850e4
#: ../../ref/forms/api.txt:1103
msgid ""
"Secondly, when you use the form, you need to bind the file data. File data "
"is handled separately to normal form data, so when your form contains a "
"``FileField`` and ``ImageField``, you will need to specify a second argument "
"when you bind your form. So if we extend our ContactForm to include an "
"``ImageField`` called ``mugshot``, we need to bind the file data containing "
"the mugshot image::"
msgstr ""
"Затем, при использовании формы следует привязывать данные к форме. Файлы "
"обрабатываются отдельно от данных формы. Таким образом, если ваша форма "
"содержит поля ``FileField`` и ``ImageField``, потребуется указать второй "
"аргумент у конструктора. Если мы добавим в нашу ``ContactForm`` поле "
"``ImageField`` с именем ``mugshot``, придётся сделать следующее::"

# 02efa6ca406745a998cc753bd20347d8
#: ../../ref/forms/api.txt:1119
msgid ""
"In practice, you will usually specify ``request.FILES`` as the source of "
"file data (just like you use ``request.POST`` as the source of form data)::"
msgstr ""
"На практике вы будете просто указывать ``request.FILES`` в качестве "
"источника данных файлов аналогично тому, как вы указываете ``request.POST`` "
"в качестве источника данных формы::"

# fbcc6ed5a1fd421e83dd326707d4a168
#: ../../ref/forms/api.txt:1126
msgid ""
"Constructing an unbound form is the same as always -- just omit both form "
"data *and* file data::"
msgstr ""
"Создание незаполненной формы аналогично обычной форме -- просто не "
"указывайте *никаких* данных для неё::"

# 8447519582e54aeebe99e90b441cf265
#: ../../ref/forms/api.txt:1133
msgid "Testing for multipart forms"
msgstr "Определение таких форм"

# aa88b67eaad44eab8963d0529737e87f
#: ../../ref/forms/api.txt:1137
msgid ""
"If you're writing reusable views or templates, you may not know ahead of "
"time whether your form is a multipart form or not. The ``is_multipart()`` "
"method tells you whether the form requires multipart encoding for "
"submission::"
msgstr ""
"Если вы пишете представления и шаблоны в расчёте на их неоднократное "
"использование в будущем, вы не можете знать, будет ли ваша форма обычной или "
"будет работать с файлами. В этом случае вам поможет метод "
"``is_multipart()``, который точно ответит на этот вопрос::"

# 95ff906665d04d2d81b6aefe795fc0d6
#: ../../ref/forms/api.txt:1145
msgid "Here's an example of how you might use this in a template::"
msgstr "Покажем пример использования этого метода в шаблоне::"

# 675c09ebeb6446b2aa9e0fed93f5a1ae
#: ../../ref/forms/api.txt:1156
msgid "Subclassing forms"
msgstr "Наследование форм"

# 09725b38562c462a82bc82c51846bb6a
#: ../../ref/forms/api.txt:1158
msgid ""
"If you have multiple ``Form`` classes that share fields, you can use "
"subclassing to remove redundancy."
msgstr ""
"Если у вас есть несколько классов ``Form`` с одинаковыми полями, вы можете "
"воспользоваться наследованием форм, чтобы убрать дублирование кода."

# bbbb40ab93714ef18cf3a5766709acae
#: ../../ref/forms/api.txt:1161
msgid ""
"When you subclass a custom ``Form`` class, the resulting subclass will "
"include all fields of the parent class(es), followed by the fields you "
"define in the subclass."
msgstr ""
"При наследовании определённого класса ``Form``, результирующий класс будет "
"обладать всеми полями родительского класса (-ов), включая поля, которые "
"определены в нём самом."

# 3a31b64ccd0e453992a5385ab977d5da
#: ../../ref/forms/api.txt:1165
msgid ""
"In this example, ``ContactFormWithPriority`` contains all the fields from "
"``ContactForm``, plus an additional field, ``priority``. The ``ContactForm`` "
"fields are ordered first::"
msgstr ""
"В этом примере, ``ContactFormWithPriority`` содержит все поля из "
"``ContactForm``, и собственное поле, ``priority``. Поля ``ContactForm`` "
"выводятся первыми::"

# ada416fd3d3445dcb02c316fb16a7025
#: ../../ref/forms/api.txt:1179
msgid ""
"It's possible to subclass multiple forms, treating forms as mixins. In this "
"example, ``BeatleForm`` subclasses both ``PersonForm`` and "
"``InstrumentForm`` (in that order), and its field list includes the fields "
"from the parent classes::"
msgstr ""
"Также можно наследовать несколько форм, рассматривая формы как \"смесь"
"\"(mixin). В этом примере форма ``BeatleForm`` наследует формы "
"``PersonForm`` и ``InstrumentForm`` (именно в этом порядке) и её список "
"полей включает в себя поля из родительских классов::"

# 811785e6ff424e8dbd139e993831f9b4
#: ../../ref/forms/api.txt:1199
msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name of the field to ``None`` on the subclass. For "
"example::"
msgstr ""
"Добавлена возможность декларативно удалить ``Field``, унаследованное от "
"родительского класса, указав ``None``. Например::"

# fe37bfc2bf584db6ae48529dc2541d81
#: ../../ref/forms/api.txt:1217
msgid "Prefixes for forms"
msgstr "Префиксы для форм"

# f34fc70c319d453595c991f6ab6ba31c
#: ../../ref/forms/api.txt:1221
msgid ""
"You can put several Django forms inside one ``<form>`` tag. To give each "
"``Form`` its own namespace, use the ``prefix`` keyword argument::"
msgstr ""
"Вы можете размещать несколько форм в одном теге ``<form>``. Для размещения "
"каждой формы в собственном пространстве имён следует использовать "
"именованный аргумент ``prefix``::"

#: ../../ref/forms/api.txt:1233
msgid "The prefix can also be specified on the form class::"
msgstr "Префикс также можно указать в классе формы::"

#~ msgid "The ability to specify ``prefix`` on the form class was added."
#~ msgstr "Была добавлена возможность определить ``prefix`` в классе формы."

#~ msgid ""
#~ "The ``required_css_class`` will also be added to the ``<label>`` tag as "
#~ "seen above."
#~ msgstr ""
#~ "``required_css_class`` будет также добавлен к тегу ``<label>``, как это "
#~ "показано выше."

#~ msgid "The label includes :attr:`~Form.required_css_class` if applicable."
#~ msgstr ""
#~ "Метка поля содержит :attr:`~Form.required_css_class`, если поле "
#~ "обязательно."

# 2861c5dbb02f41ec8405ba1b9bae4932
#~ msgid "``django.forms.util`` was renamed to ``django.forms.utils``."
#~ msgstr "``django.forms.util`` был переименован в ``django.forms.utils``."

# 5caa028c5e434d34861c502dc0e56c8a
#~ msgid ""
#~ "For a field's list of errors, access the field's ``errors`` attribute."
#~ msgstr ""
#~ "Для получения списка ошибок в полях формы следует использовать атрибут "
#~ "``errors``."

# f3c9053dd6034ef3a2434b2e1f407164
#~ msgid "The default ``label_suffix`` is translatable."
#~ msgstr "Значение ``label_suffix`` по умолчанию теперь переводимое."

# 0221c497e702402a8a7ad0661fdd1c45
#~ msgid ""
#~ "You can also customize the ``label_suffix`` on a per-field basis using "
#~ "the ``label_suffix`` parameter to :meth:`~django.forms.BoundField."
#~ "label_tag`."
#~ msgstr ""
#~ "Можно указать ``label_suffix`` для конкретного поля, используя параметр "
#~ "``label_suffix`` :meth:`~django.forms.BoundField.label_tag`."

# 6f8ec376d2d3456c80cb85a0c2d12d1f
#~ msgid ""
#~ "The label now includes the form's :attr:`~django.forms.Form.label_suffix` "
#~ "(a colon, by default)."
#~ msgstr ""
#~ "Метка поля теперь использует атрибут :attr:`~django.forms.Form."
#~ "label_suffix` поля (по умолчанию -- двоеточие)."

# 160184f3483b471ab1e476f9deacc3a8
#~ msgid ""
#~ "Until Django 1.5, the ``cleaned_data`` attribute wasn't defined at all "
#~ "when the ``Form`` didn't validate."
#~ msgstr ""
#~ "До Django 1.5 атрибут ``cleaned_data`` вообще не определялся, если форма "
#~ "не проходила проверку."
