# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-03 16:48+0300\n"
"PO-Revision-Date: 2017-04-05 11:28+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/forms/renderers.txt:3
msgid "The form rendering API"
msgstr ""

#: ../../ref/forms/renderers.txt:8
msgid ""
"Django's form widgets are rendered using Django's :doc:`template engines "
"system </topics/templates>`."
msgstr ""

#: ../../ref/forms/renderers.txt:11
msgid "The form rendering process can be customized at several levels:"
msgstr ""

#: ../../ref/forms/renderers.txt:13
msgid "Widgets can specify custom template names."
msgstr ""

#: ../../ref/forms/renderers.txt:14
msgid "Forms and widgets can specify custom renderer classes."
msgstr ""

#: ../../ref/forms/renderers.txt:15
msgid ""
"A widget's template can be overridden by a project. (Reusable applications "
"typically shouldn't override built-in templates because they might conflict "
"with a project's custom templates.)"
msgstr ""

#: ../../ref/forms/renderers.txt:22
msgid "The low-level render API"
msgstr ""

#: ../../ref/forms/renderers.txt:24
msgid ""
"The rendering of form templates is controlled by a customizable renderer "
"class. A custom renderer can be specified by updating the :setting:"
"`FORM_RENDERER` setting. It defaults to ``'``:class:`django.forms.renderers."
"DjangoTemplates`\\ ``'``."
msgstr ""

#: ../../ref/forms/renderers.txt:29
msgid ""
"You can also provide a custom renderer by setting the :attr:`.Form."
"default_renderer` attribute or by using the ``renderer`` argument of :meth:`."
"Widget.render`."
msgstr ""

#: ../../ref/forms/renderers.txt:33
msgid ""
"Use one of the :ref:`built-in template form renderers <built-in-template-"
"form-renderers>` or implement your own. Custom renderers must implement a "
"``render(template_name, context, request=None)`` method. It should return a "
"rendered templates (as a string) or raise :exc:`~django.template."
"TemplateDoesNotExist`."
msgstr ""

#: ../../ref/forms/renderers.txt:42
msgid "Built-in-template form renderers"
msgstr ""

#: ../../ref/forms/renderers.txt:45
msgid "``DjangoTemplates``"
msgstr ""

#: ../../ref/forms/renderers.txt:49
msgid ""
"This renderer uses a standalone :class:`~django.template.backends.django."
"DjangoTemplates` engine (unconnected to what you might have configured in "
"the :setting:`TEMPLATES` setting). It loads templates first from the built-"
"in form templates directory in ``django/forms/templates`` and then from the "
"installed apps' templates directories using the :class:`app_directories "
"<django.template.loaders.app_directories.Loader>` loader."
msgstr ""

#: ../../ref/forms/renderers.txt:57
msgid ""
"If you want to render templates with customizations from your :setting:"
"`TEMPLATES` setting, such as context processors for example, use the :class:"
"`TemplatesSetting` renderer."
msgstr ""

#: ../../ref/forms/renderers.txt:62
msgid "``Jinja2``"
msgstr ""

#: ../../ref/forms/renderers.txt:66
msgid ""
"This renderer is the same as the :class:`DjangoTemplates` renderer except "
"that it uses a :class:`~django.template.backends.jinja2.Jinja2` backend. "
"Templates for the built-in widgets are located in ``django/forms/jinja2`` "
"and installed apps can provide templates in a ``jinja2`` directory."
msgstr ""

#: ../../ref/forms/renderers.txt:71
msgid ""
"To use this backend, all the widgets in your project and its third-party "
"apps must have Jinja2 templates. Unless you provide your own Jinja2 "
"templates for widgets that don't have any, you can't use this renderer. For "
"example, :mod:`django.contrib.admin` doesn't include Jinja2 templates for "
"its widgets due to their usage of Django template tags."
msgstr ""

#: ../../ref/forms/renderers.txt:78
msgid "``TemplatesSetting``"
msgstr ""

#: ../../ref/forms/renderers.txt:82
msgid ""
"This renderer gives you complete control of how widget templates are "
"sourced. It uses :func:`~django.template.loader.get_template` to find widget "
"templates based on what's configured in the :setting:`TEMPLATES` setting."
msgstr ""

#: ../../ref/forms/renderers.txt:86
msgid ""
"Using this renderer along with the built-in widget templates requires either:"
msgstr ""

#: ../../ref/forms/renderers.txt:88
msgid ""
"``'django.forms'`` in :setting:`INSTALLED_APPS` and at least one engine "
"with :setting:`APP_DIRS=True <TEMPLATES-APP_DIRS>`."
msgstr ""

#: ../../ref/forms/renderers.txt:91
msgid ""
"Adding the built-in widgets templates directory in :setting:`DIRS <TEMPLATES-"
"DIRS>` of one of your template engines. To generate that path::"
msgstr ""

#: ../../ref/forms/renderers.txt:97
msgid ""
"Using this renderer requires you to make sure the form templates your "
"project needs can be located."
msgstr ""

#: ../../ref/forms/renderers.txt:101
msgid "Context available in widget templates"
msgstr ""

#: ../../ref/forms/renderers.txt:103
msgid ""
"Widget templates receive a context from :meth:`.Widget.get_context`. By "
"default, widgets receive a single value in the context, ``widget``. This is "
"a dictionary that contains values like:"
msgstr ""

#: ../../ref/forms/renderers.txt:107
msgid "``name``"
msgstr ""

#: ../../ref/forms/renderers.txt:108
msgid "``value``"
msgstr ""

#: ../../ref/forms/renderers.txt:109
msgid "``attrs``"
msgstr ""

#: ../../ref/forms/renderers.txt:110
msgid "``is_hidden``"
msgstr ""

#: ../../ref/forms/renderers.txt:111
msgid "``template_name``"
msgstr ""

#: ../../ref/forms/renderers.txt:113
msgid ""
"Some widgets add further information to the context. For instance, all "
"widgets that subclass ``Input`` defines ``widget['type']`` and :class:`."
"MultiWidget` defines ``widget['subwidgets']`` for looping purposes."
msgstr ""

#: ../../ref/forms/renderers.txt:118
msgid "Overriding built-in widget templates"
msgstr ""

#: ../../ref/forms/renderers.txt:120
msgid ""
"Each widget has a ``template_name`` attribute with a value such as ``input."
"html``. Built-in widget templates are stored in the ``django/forms/widgets`` "
"path. You can provide a custom template for ``input.html`` by defining "
"``django/forms/widgets/input.html``, for example. See :ref:`built-in "
"widgets` for the name of each widget's template."
msgstr ""

#: ../../ref/forms/renderers.txt:126
msgid ""
"If you use the :class:`TemplatesSetting` renderer, overriding widget "
"templates works the same as overriding any other template in your project. "
"You can't override built-in widget templates using the other built-in "
"renderers."
msgstr ""
