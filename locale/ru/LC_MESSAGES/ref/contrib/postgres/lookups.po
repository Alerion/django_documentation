# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2015, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2017-11-22 12:45+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

#: ../../ref/contrib/postgres/lookups.txt:3
msgid "PostgreSQL specific lookups"
msgstr "Запросы, специфичные для PostgreSQL"

#: ../../ref/contrib/postgres/lookups.txt:6
msgid "Trigram similarity"
msgstr "Сходство триграмм"

#: ../../ref/contrib/postgres/lookups.txt:10
msgid ""
"The ``trigram_similar`` lookup allows you to perform trigram lookups, "
"measuring the number of trigrams (three consecutive characters) shared, "
"using a dedicated PostgreSQL extension. A trigram lookup is given an "
"expression and returns results that have a similarity measurement greater "
"than the current similarity threshold."
msgstr ""
"Запрос ``trigram_similar`` позволяет искать триграммы, измеряя количество "
"общих триграмм (три последовательных символа), используя расширение для "
"PostgreSQL. Принимает выражение и возвращает результаты, у которых порог "
"сходства выше определенного порога."

#: ../../ref/contrib/postgres/lookups.txt:16
#, fuzzy
msgid ""
"To use it, add ``'django.contrib.postgres'`` in your :setting:"
"`INSTALLED_APPS` and activate the `pg_trgm extension <https://www.postgresql."
"org/docs/current/pgtrgm.html>`_ on PostgreSQL. You can install the extension "
"using the :class:`~django.contrib.postgres.operations.TrigramExtension` "
"migration operation."
msgstr ""
"Чтобы использовать, добавьте ``'django.contrib.postgres'`` в :setting:"
"`INSTALLED_APPS` и активируйте `расширение pg_trgm <https://www.postgresql."
"org/docs/current/static/pgtrgm.html>`_ в PostgreSQL. Вы можете установить "
"расширение, используя операцию миграции :class:`~django.contrib.postgres."
"operations.TrigramExtension`."

#: ../../ref/contrib/postgres/lookups.txt:23
msgid ""
"The ``trigram_similar`` lookup can be used on :class:`~django.db.models."
"CharField` and :class:`~django.db.models.TextField`::"
msgstr ""
"Запрос ``trigram_similar`` может быть использован на :class:`~django.db."
"models.CharField` и на :class:`~django.db.models.TextField`::"

#: ../../ref/contrib/postgres/lookups.txt:30
msgid "``Unaccent``"
msgstr "``Unaccent``"

#: ../../ref/contrib/postgres/lookups.txt:34
msgid ""
"The ``unaccent`` lookup allows you to perform accent-insensitive lookups "
"using a dedicated PostgreSQL extension."
msgstr ""
"Запрос ``unaccent`` позволяет вам выполнять поиск, игнорирующий акцентные "
"знаки, с помощью специального расширения PostgreSQL."

#: ../../ref/contrib/postgres/lookups.txt:37
msgid ""
"This lookup is implemented using :class:`~django.db.models.Transform`, so it "
"can be chained with other lookup functions. To use it, you need to add "
"``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS` and activate "
"the `unaccent extension on PostgreSQL`_. The :class:`~django.contrib."
"postgres.operations.UnaccentExtension` migration operation is available if "
"you want to perform this activation using migrations)."
msgstr ""
"Данный запрос реализован с помощью :class:`~django.db.models.Transform`, "
"таким образом он может быть подключен к другим функциям запроса. Для того, "
"чтобы воспользоваться этим запросом, вам потребуется добавить ``'django."
"contrib.postgres'`` в параметр конфигурации :setting:`INSTALLED_APPS` и "
"активировать расширений `unaccent в PostgreSQL`_ Существует миграция :class:"
"`~django.contrib.postgres.operations.UnaccentExtension`, которая позволяет "
"выполнить активацию запроса с помощью механизма миграций."

#: ../../ref/contrib/postgres/lookups.txt:46
msgid ""
"The ``unaccent`` lookup can be used on :class:`~django.db.models.CharField` "
"and :class:`~django.db.models.TextField`::"
msgstr ""
"Запрос ``unaccent`` может быть использован на :class:`~django.db.models."
"CharField` и на :class:`~django.db.models.TextField`::"

#: ../../ref/contrib/postgres/lookups.txt:57
msgid ""
"``unaccent`` lookups should perform fine in most use cases. However, queries "
"using this filter will generally perform full table scans, which can be slow "
"on large tables. In those cases, using dedicated full text indexing tools "
"might be appropriate."
msgstr ""
"Запросы ``unaccent`` должны хорошо работать в большинстве случаев. Однако, "
"использующие этот фильтр запросы обычно будут выполнять полное сканирование "
"таблицы, что не так быстро происходит на больших таблицах. В таких случаях "
"целесообразно применять соответствующие инструменты для полнотекстового "
"поиска."
