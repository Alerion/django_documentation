# Russian translations for Django package
# Английские переводы для пакета Django.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2020-02-13 22:13+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/contrib/postgres/constraints.txt:3
msgid "PostgreSQL specific database constraints"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:8
msgid ""
"PostgreSQL supports additional data integrity constraints available from the "
"``django.contrib.postgres.constraints`` module. They are added in the model :"
"attr:`Meta.constraints <django.db.models.Options.constraints>` option."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:13
msgid "``ExclusionConstraint``"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:19
msgid ""
"Creates an exclusion constraint in the database. Internally, PostgreSQL "
"implements exclusion constraints using indexes. The default index type is "
"`GiST <https://www.postgresql.org/docs/current/gist.html>`_. To use them, "
"you need to activate the `btree_gist extension <https://www.postgresql.org/"
"docs/current/btree-gist.html>`_ on PostgreSQL. You can install it using the :"
"class:`~django.contrib.postgres.operations.BtreeGistExtension` migration "
"operation."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:28
msgid ""
"If you attempt to insert a new row that conflicts with an existing row, an :"
"exc:`~django.db.IntegrityError` is raised. Similarly, when update conflicts "
"with an existing row."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:33
msgid "``name``"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:37
msgid "The name of the constraint."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:40
msgid "``expressions``"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:44
msgid ""
"An iterable of 2-tuples. The first element is an expression or string. The "
"second element is a SQL operator represented as a string. To avoid typos, "
"you may use :class:`~django.contrib.postgres.fields.RangeOperators` which "
"maps the operators with strings. For example::"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:54
msgid "Restrictions on operators."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:56
msgid "Only commutative operators can be used in exclusion constraints."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:59
msgid "``index_type``"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:63
msgid ""
"The index type of the constraint. Accepted values are ``GIST`` or "
"``SPGIST``. Matching is case insensitive. If not provided, the default index "
"type is ``GIST``."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:68
msgid "``condition``"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:72
msgid ""
"A :class:`~django.db.models.Q` object that specifies the condition to "
"restrict a constraint to a subset of rows. For example, "
"``condition=Q(cancelled=False)``."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:76
msgid ""
"These conditions have the same database restrictions as :attr:`django.db."
"models.Index.condition`."
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:80
msgid "Examples"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:82
msgid ""
"The following example restricts overlapping reservations in the same room, "
"not taking canceled reservations into account::"
msgstr ""

#: ../../ref/contrib/postgres/constraints.txt:111
msgid ""
"In case your model defines a range using two fields, instead of the native "
"PostgreSQL range types, you should write an expression that uses the "
"equivalent function (e.g. ``TsTzRange()``), and use the delimiters for the "
"field. Most often, the delimiters will be ``'[)'``, meaning that the lower "
"bound is inclusive and the upper bound is exclusive. You may use the :class:"
"`~django.contrib.postgres.fields.RangeBoundary` that provides an expression "
"mapping for the `range boundaries <https://www.postgresql.org/docs/ current/"
"rangetypes.html#RANGETYPES-INCLUSIVITY>`_. For example::"
msgstr ""
