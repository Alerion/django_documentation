# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/contrib/postgres/fields.txt:3
msgid "PostgreSQL specific model fields"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:5
msgid ""
"All of these fields are available from the ``django.contrib.postgres."
"fields`` module."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:11
msgid "Indexing these fields"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:13
msgid ""
":class:`~django.db.models.Index` and :attr:`.Field.db_index` both create a B-"
"tree index, which isn't particularly helpful when querying complex data "
"types. Indexes such as :class:`~django.contrib.postgres.indexes.GinIndex` "
"and :class:`~django.contrib.postgres.indexes.GistIndex` are better suited, "
"though the index choice is dependent on the queries that you're using. "
"Generally, GiST may be a good choice for the :ref:`range fields <range-"
"fields>` and :class:`HStoreField`, and GIN may be helpful for :class:"
"`ArrayField` and :class:`JSONField`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:23
msgid "``ArrayField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:27
msgid ""
"A field for storing lists of data. Most field types can be used, you simply "
"pass another field instance as the :attr:`base_field <ArrayField."
"base_field>`. You may also specify a :attr:`size <ArrayField.size>`. "
"``ArrayField`` can be nested to store multi-dimensional arrays."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:33
msgid ""
"If you give the field a :attr:`~django.db.models.Field.default`, ensure it's "
"a callable such as ``list`` (for an empty default) or a callable that "
"returns a list (such as a function). Incorrectly using ``default=[]`` "
"creates a mutable default that is shared between all instances of "
"``ArrayField``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:41
msgid "This is a required argument."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:43
msgid ""
"Specifies the underlying data type and behavior for the array. It should be "
"an instance of a subclass of :class:`~django.db.models.Field`. For example, "
"it could be an :class:`~django.db.models.IntegerField` or a :class:`~django."
"db.models.CharField`. Most field types are permitted, with the exception of "
"those handling relational data (:class:`~django.db.models.ForeignKey`, :"
"class:`~django.db.models.OneToOneField` and :class:`~django.db.models."
"ManyToManyField`)."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:53
msgid ""
"It is possible to nest array fields - you can specify an instance of "
"``ArrayField`` as the ``base_field``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:68
msgid ""
"Transformation of values between the database and the model, validation of "
"data and configuration, and serialization are all delegated to the "
"underlying base field."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:74
msgid "This is an optional argument."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:76
msgid ""
"If passed, the array will have a maximum size as specified. This will be "
"passed to the database, although PostgreSQL at present does not enforce the "
"restriction."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:82
msgid ""
"When nesting ``ArrayField``, whether you use the `size` parameter or not, "
"PostgreSQL requires that the arrays are rectangular::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:103
msgid ""
"If irregular shapes are required, then the underlying field should be made "
"nullable and the values padded with ``None``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:107
msgid "Querying ``ArrayField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:109
msgid ""
"There are a number of custom lookups and transforms for :class:`ArrayField`. "
"We will use the following example model::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:125
#: ../../ref/contrib/postgres/fields.txt:363
#: ../../ref/contrib/postgres/fields.txt:721
msgid "``contains``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:127
msgid ""
"The :lookup:`contains` lookup is overridden on :class:`ArrayField`. The "
"returned objects will be those where the values passed are a subset of the "
"data. It uses the SQL operator ``@>``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:147
#: ../../ref/contrib/postgres/fields.txt:383
#: ../../ref/contrib/postgres/fields.txt:729
msgid "``contained_by``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:149
msgid ""
"This is the inverse of the :lookup:`contains <arrayfield.contains>` lookup - "
"the objects returned will be those where the data is a subset of the values "
"passed. It uses the SQL operator ``<@``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:166
#: ../../ref/contrib/postgres/fields.txt:750
msgid "``overlap``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:168
msgid ""
"Returns objects where the data shares any results with the values passed. "
"Uses the SQL operator ``&&``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:184
msgid "``len``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:186
msgid ""
"Returns the length of the array. The lookups available afterwards are those "
"available for :class:`~django.db.models.IntegerField`. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:198
msgid "Index transforms"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:200
msgid ""
"Index transforms index into the array. Any non-negative integer can be used. "
"There are no errors if it exceeds the :attr:`size <ArrayField.size>` of the "
"array. The lookups available after the transform are those from the :attr:"
"`base_field <ArrayField.base_field>`. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:219
msgid ""
"PostgreSQL uses 1-based indexing for array fields when writing raw SQL. "
"However these indexes and those used in :lookup:`slices <arrayfield.slice>` "
"use 0-based indexing to be consistent with Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:226
msgid "Slice transforms"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:228
msgid ""
"Slice transforms take a slice of the array. Any two non-negative integers "
"can be used, separated by a single underscore. The lookups available after "
"the transform do not change. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:244
msgid ""
"PostgreSQL uses 1-based indexing for array fields when writing raw SQL. "
"However these slices and those used in :lookup:`indexes <arrayfield.index>` "
"use 0-based indexing to be consistent with Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:248
msgid "Multidimensional arrays with indexes and slices"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:250
msgid ""
"PostgreSQL has some rather esoteric behavior when using indexes and slices "
"on multidimensional arrays. It will always work to use indexes to reach down "
"to the final underlying data, but most other slices behave strangely at the "
"database level and cannot be supported in a logical, consistent fashion by "
"Django."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:257
msgid "``CIText`` fields"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:263
msgid ""
"A mixin to create case-insensitive text fields backed by the citext_ type. "
"Read about `the performance considerations`_ prior to using it."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:266
msgid ""
"To use ``citext``, use the :class:`.CITextExtension` operation to :ref:"
"`setup the citext extension <create-postgresql-extensions>` in PostgreSQL "
"before the first ``CreateModel`` migration operation."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:270
msgid "Several fields that use the mixin are provided:"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:276
msgid ""
"These fields subclass :class:`~django.db.models.CharField`, :class:`~django."
"db.models.EmailField`, and :class:`~django.db.models.TextField`, "
"respectively."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:280
msgid ""
"``max_length`` won't be enforced in the database since ``citext`` behaves "
"similar to PostgreSQL's ``text`` type."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:287
msgid "``HStoreField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:291
msgid ""
"A field for storing key-value pairs. The Python data type used is a "
"``dict``. Keys must be strings, and values may be either strings or nulls "
"(``None`` in Python)."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:295
msgid "To use this field, you'll need to:"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:297
msgid "Add ``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:298
msgid ""
":ref:`Setup the hstore extension <create-postgresql-extensions>` in "
"PostgreSQL."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:301
msgid ""
"You'll see an error like ``can't adapt type 'dict'`` if you skip the first "
"step, or ``type \"hstore\" does not exist`` if you skip the second."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:306
msgid ""
"Added the ability to store nulls. Previously, they were cast to strings."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:310
msgid ""
"On occasions it may be useful to require or restrict the keys which are "
"valid for a given field. This can be done using the :class:`~django.contrib."
"postgres.validators.KeysValidator`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:315
msgid "Querying ``HStoreField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:317
msgid ""
"In addition to the ability to query by key, there are a number of custom "
"lookups available for ``HStoreField``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:320
#: ../../ref/contrib/postgres/fields.txt:528
msgid "We will use the following example model::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:335
msgid "Key lookups"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:337
msgid ""
"To query based on a given key, you simply use that key as the lookup name::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:345
msgid "You can chain other lookups after key lookups::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:350
msgid ""
"If the key you wish to query by clashes with the name of another lookup, you "
"need to use the :lookup:`hstorefield.contains` lookup instead."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:355
msgid ""
"Since any string could be a key in a hstore value, any lookup other than "
"those listed below will be interpreted as a key lookup. No errors are "
"raised. Be extra careful for typing mistakes, and always check your queries "
"work as you intend."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:365
msgid ""
"The :lookup:`contains` lookup is overridden on :class:`~django.contrib."
"postgres.fields.HStoreField`. The returned objects are those where the given "
"``dict`` of key-value pairs are all contained in the field. It uses the SQL "
"operator ``@>``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:385
msgid ""
"This is the inverse of the :lookup:`contains <hstorefield.contains>` lookup "
"- the objects returned will be those where the key-value pairs on the object "
"are a subset of those in the value passed. It uses the SQL operator ``<@``. "
"For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:403
msgid "``has_key``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:405
msgid ""
"Returns objects where the given key is in the data. Uses the SQL operator ``?"
"``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:417
msgid "``has_any_keys``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:419
msgid ""
"Returns objects where any of the given keys are in the data. Uses the SQL "
"operator ``?|``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:432
msgid "``has_keys``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:434
msgid ""
"Returns objects where all of the given keys are in the data. Uses the SQL "
"operator ``?&``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:446
msgid "``keys``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:448
msgid ""
"Returns objects where the array of keys is the given value. Note that the "
"order is not guaranteed to be reliable, so this transform is mainly useful "
"for using in conjunction with lookups on :class:`~django.contrib.postgres."
"fields.ArrayField`. Uses the SQL function ``akeys()``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:463
msgid "``values``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:465
msgid ""
"Returns objects where the array of values is the given value. Note that the "
"order is not guaranteed to be reliable, so this transform is mainly useful "
"for using in conjunction with lookups on :class:`~django.contrib.postgres."
"fields.ArrayField`. Uses the SQL function ``avalues()``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:478
msgid "``JSONField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:482
msgid ""
"A field for storing JSON encoded data. In Python the data is represented in "
"its Python native format: dictionaries, lists, strings, numbers, booleans "
"and ``None``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:490
msgid ""
"An optional JSON-encoding class to serialize data types not supported by the "
"standard JSON serializer (``datetime``, ``uuid``, etc.). For example, you "
"can use the :class:`~django.core.serializers.json.DjangoJSONEncoder` class "
"or any other :py:class:`json.JSONEncoder` subclass."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:496
msgid ""
"When the value is retrieved from the database, it will be in the format "
"chosen by the custom encoder (most often a string), so you'll need to take "
"extra steps to convert the value back to the initial data type (:meth:`Model."
"from_db() <django.db.models.Model.from_db>` and :meth:`Field.from_db_value() "
"<django.db.models.Field.from_db_value>` are two possible hooks for that "
"purpose). Your deserialization may need to account for the fact that you "
"can't be certain of the input type. For example, you run the risk of "
"returning a ``datetime`` that was actually a string that just happened to be "
"in the same format chosen for ``datetime``\\s."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:507
msgid ""
"If you give the field a :attr:`~django.db.models.Field.default`, ensure it's "
"a callable such as ``dict`` (for an empty default) or a callable that "
"returns a dict (such as a function). Incorrectly using ``default={}`` "
"creates a mutable default that is shared between all instances of "
"``JSONField``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:515
msgid ""
"PostgreSQL has two native JSON based data types: ``json`` and ``jsonb``. The "
"main difference between them is how they are stored and how they can be "
"queried. PostgreSQL's ``json`` field is stored as the original string "
"representation of the JSON and must be decoded on the fly when queried based "
"on keys. The ``jsonb`` field is stored based on the actual structure of the "
"JSON which allows indexing. The trade-off is a small additional cost on "
"writing to the ``jsonb`` field. ``JSONField`` uses ``jsonb``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:523
msgid "**As a result, this field requires PostgreSQL ≥ 9.4**."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:526
msgid "Querying ``JSONField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:543
msgid "Key, index, and path lookups"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:545
msgid ""
"To query based on a given dictionary key, simply use that key as the lookup "
"name::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:562
msgid "Multiple keys can be chained together to form a path lookup::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:567
msgid ""
"If the key is an integer, it will be interpreted as an index lookup in an "
"array::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:573
msgid ""
"If the key you wish to query by clashes with the name of another lookup, use "
"the :lookup:`jsonfield.contains` lookup instead."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:576
msgid ""
"If only one key or index is used, the SQL operator ``->`` is used. If "
"multiple operators are used then the ``#>`` operator is used."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:581
msgid ""
"Since any string could be a key in a JSON object, any lookup other than "
"those listed below will be interpreted as a key lookup. No errors are "
"raised. Be extra careful for typing mistakes, and always check your queries "
"work as you intend."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:587
msgid "Containment and key operations"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:595
msgid ""
":class:`~django.contrib.postgres.fields.JSONField` shares lookups relating "
"to containment and keys with :class:`~django.contrib.postgres.fields."
"HStoreField`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:598
msgid ""
":lookup:`contains <hstorefield.contains>` (accepts any JSON rather than just "
"a dictionary of strings)"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:600
msgid ""
":lookup:`contained_by <hstorefield.contained_by>` (accepts any JSON rather "
"than just a dictionary of strings)"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:602
msgid ":lookup:`has_key <hstorefield.has_key>`"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:603
msgid ":lookup:`has_any_keys <hstorefield.has_any_keys>`"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:604
msgid ":lookup:`has_keys <hstorefield.has_keys>`"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:609
msgid "Range Fields"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:611
msgid ""
"There are five range field types, corresponding to the built-in range types "
"in PostgreSQL. These fields are used to store a range of values; for example "
"the start and end timestamps of an event, or the range of ages an activity "
"is suitable for."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:616
msgid ""
"All of the range fields translate to :ref:`psycopg2 Range objects <psycopg2:"
"adapt-range>` in python, but also accept tuples as input if no bounds "
"information is necessary. The default is lower bound included, upper bound "
"excluded; that is, ``[)``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:622
msgid "``IntegerRangeField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:626
msgid ""
"Stores a range of integers. Based on an :class:`~django.db.models."
"IntegerField`. Represented by an ``int4range`` in the database and a :class:"
"`~psycopg2:psycopg2.extras.NumericRange` in Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:631
#: ../../ref/contrib/postgres/fields.txt:645
#: ../../ref/contrib/postgres/fields.txt:677
msgid ""
"Regardless of the bounds specified when saving the data, PostgreSQL always "
"returns a range in a canonical form that includes the lower bound and "
"excludes the upper bound; that is ``[)``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:636
msgid "``BigIntegerRangeField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:640
msgid ""
"Stores a range of large integers. Based on a :class:`~django.db.models."
"BigIntegerField`. Represented by an ``int8range`` in the database and a :"
"class:`~psycopg2:psycopg2.extras.NumericRange` in Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:650
msgid "``FloatRangeField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:654
msgid ""
"Stores a range of floating point values. Based on a :class:`~django.db."
"models.FloatField`. Represented by a ``numrange`` in the database and a :"
"class:`~psycopg2:psycopg2.extras.NumericRange` in Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:659
msgid "``DateTimeRangeField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:663
msgid ""
"Stores a range of timestamps. Based on a :class:`~django.db.models."
"DateTimeField`. Represented by a ``tstzrange`` in the database and a :class:"
"`~psycopg2:psycopg2.extras.DateTimeTZRange` in Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:669
msgid "``DateRangeField``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:673
msgid ""
"Stores a range of dates. Based on a :class:`~django.db.models.DateField`. "
"Represented by a ``daterange`` in the database and a :class:`~psycopg2:"
"psycopg2.extras.DateRange` in Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:682
msgid "Querying Range Fields"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:684
msgid ""
"There are a number of custom lookups and transforms for range fields. They "
"are available on all the above fields, but we will use the following example "
"model::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:699
msgid "We will also use the following example objects::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:707
msgid "and ``NumericRange``:"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:712
msgid "Containment functions"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:714
msgid ""
"As with other PostgreSQL fields, there are three standard containment "
"operators: ``contains``, ``contained_by`` and ``overlap``, using the SQL "
"operators ``@>``, ``<@``, and ``&&`` respectively."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:734
msgid ""
"The ``contained_by`` lookup is also available on the non-range field types: :"
"class:`~django.db.models.IntegerField`, :class:`~django.db.models."
"BigIntegerField`, :class:`~django.db.models.FloatField`, :class:`~django.db."
"models.DateField`, and :class:`~django.db.models.DateTimeField`. For "
"example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:756
msgid "Comparison functions"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:758
msgid ""
"Range fields support the standard lookups: :lookup:`lt`, :lookup:`gt`, :"
"lookup:`lte` and :lookup:`gte`. These are not particularly helpful - they "
"compare the lower bounds first and then the upper bounds only if necessary. "
"This is also the strategy used to order by a range field. It is better to "
"use the specific range comparison operators."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:767
msgid "``fully_lt``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:769
msgid ""
"The returned ranges are strictly less than the passed range. In other words, "
"all the points in the returned range are less than all those in the passed "
"range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:779
msgid "``fully_gt``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:781
msgid ""
"The returned ranges are strictly greater than the passed range. In other "
"words, the all the points in the returned range are greater than all those "
"in the passed range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:791
msgid "``not_lt``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:793
msgid ""
"The returned ranges do not contain any points less than the passed range, "
"that is the lower bound of the returned range is at least the lower bound of "
"the passed range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:803
msgid "``not_gt``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:805
msgid ""
"The returned ranges do not contain any points greater than the passed range, "
"that is the upper bound of the returned range is at most the upper bound of "
"the passed range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:815
msgid "``adjacent_to``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:817
msgid "The returned ranges share a bound with the passed range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:823
msgid "Querying using the bounds"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:825
msgid ""
"There are three transforms available for use in queries. You can extract the "
"lower or upper bound, or query based on emptiness."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:831
msgid "``startswith``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:833
msgid ""
"Returned objects have the given lower bound. Can be chained to valid lookups "
"for the base field."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:842
msgid "``endswith``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:844
msgid ""
"Returned objects have the given upper bound. Can be chained to valid lookups "
"for the base field."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:853
msgid "``isempty``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:855
msgid ""
"Returned objects are empty ranges. Can be chained to valid lookups for a :"
"class:`~django.db.models.BooleanField`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:862
msgid "Defining your own range types"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:864
msgid ""
"PostgreSQL allows the definition of custom range types. Django's model and "
"form field implementations use base classes below, and psycopg2 provides a :"
"func:`~psycopg2:psycopg2.extras.register_range` to allow use of custom range "
"types."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:871
msgid "Base class for model range fields."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:875
msgid "The model field class to use."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:879
#: ../../ref/contrib/postgres/fields.txt:896
msgid "The psycopg2 range type to use."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:883
msgid ""
"The form field class to use. Should be a subclass of :class:`django.contrib."
"postgres.forms.BaseRangeField`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:888
msgid "Base class for form range fields."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:892
msgid "The form field to use."
msgstr ""
