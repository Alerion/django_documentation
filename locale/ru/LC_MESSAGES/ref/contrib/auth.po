# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 5ece0c9d368647b388a337b8c29ccce1
#: ../../ref/contrib/auth.txt:3
msgid "``django.contrib.auth``"
msgstr ""

# 52227055fa2a41ec8ed7a6259b5ecb31
#: ../../ref/contrib/auth.txt:5
msgid ""
"This document provides API reference material for the components of Django's "
"authentication system. For more details on the usage of these components or "
"how to customize authentication and authorization see the :doc:"
"`authentication topic guide </topics/auth/index>`."
msgstr ""

#: ../../ref/contrib/auth.txt:13
msgid "``User`` model"
msgstr ""

# 9d24d49db24849079a8a087da8235565
# 292a31748a4c4e90a94edbaa61fd3d39
# f2bde1928b704fdcb89b1ae8a1ea7ccb
#: ../../ref/contrib/auth.txt:16 ../../ref/contrib/auth.txt:361
#: ../../ref/contrib/auth.txt:393
msgid "Fields"
msgstr ""

# 510da60c87ff4dd2a2957ca9eb5367dc
#: ../../ref/contrib/auth.txt:20
msgid ""
":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""

#: ../../ref/contrib/auth.txt:25
msgid ""
"Required. 150 characters or fewer. Usernames may contain alphanumeric, "
"``_``, ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../ref/contrib/auth.txt:28
msgid ""
"The ``max_length`` should be sufficient for many use cases. If you need a "
"longer length, please use a :ref:`custom user model <specifying-custom-user-"
"model>`. If you use MySQL with the ``utf8mb4`` encoding (recommended for "
"proper Unicode support), specify at most ``max_length=191`` because MySQL "
"can only create unique indexes with 191 characters in that case by default."
msgstr ""

#: ../../ref/contrib/auth.txt:35
msgid "Usernames and Unicode"
msgstr ""

#: ../../ref/contrib/auth.txt:37
msgid ""
"Django originally accepted only ASCII letters in usernames. Although it "
"wasn't a deliberate choice, Unicode characters have always been accepted "
"when using Python 3. Django 1.10 officially added Unicode support in "
"usernames, keeping the ASCII-only behavior on Python 2, with the option to "
"customize the behavior using :attr:`.User.username_validator`."
msgstr ""

#: ../../ref/contrib/auth.txt:46
msgid "The ``max_length`` increased from 30 to 150 characters."
msgstr ""

#: ../../ref/contrib/auth.txt:50 ../../ref/contrib/auth.txt:55
msgid ""
"Optional (:attr:`blank=True <django.db.models.Field.blank>`). 30 characters "
"or fewer."
msgstr ""

#: ../../ref/contrib/auth.txt:60
msgid ""
"Optional (:attr:`blank=True <django.db.models.Field.blank>`). Email address."
msgstr ""

# 233f30bb90f6416a8f2fbacc3eea8aa9
#: ../../ref/contrib/auth.txt:65
msgid ""
"Required. A hash of, and metadata about, the password. (Django doesn't store "
"the raw password.) Raw passwords can be arbitrarily long and can contain any "
"character. See the :doc:`password documentation </topics/auth/passwords>`."
msgstr ""

# 461eeccdd74948ccabd1993e556ef7ca
#: ../../ref/contrib/auth.txt:72
msgid "Many-to-many relationship to :class:`~django.contrib.auth.models.Group`"
msgstr ""

# 04ffd0a286574bd88352e7b2a130951e
#: ../../ref/contrib/auth.txt:76
msgid ""
"Many-to-many relationship to :class:`~django.contrib.auth.models.Permission`"
msgstr ""

# b9c7cdbc067e4475a3e15a877e69cc7a
#: ../../ref/contrib/auth.txt:80
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""

# 8f316535b0b34482a50b7e76b8f586a6
#: ../../ref/contrib/auth.txt:84
msgid ""
"Boolean. Designates whether this user account should be considered active. "
"We recommend that you set this flag to ``False`` instead of deleting "
"accounts; that way, if your applications have any foreign keys to users, the "
"foreign keys won't break."
msgstr ""

#: ../../ref/contrib/auth.txt:89
msgid ""
"This doesn't necessarily control whether or not the user can log in. "
"Authentication backends aren't required to check for the ``is_active`` flag "
"but the default backend (:class:`~django.contrib.auth.backends."
"ModelBackend`) and the :class:`~django.contrib.auth.backends."
"RemoteUserBackend` do. You can use :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend` or :class:`~django.contrib.auth.backends."
"AllowAllUsersRemoteUserBackend` if you want to allow inactive users to "
"login. In this case, you'll also want to customize the :class:`~django."
"contrib.auth.forms.AuthenticationForm` used by the :class:`~django.contrib."
"auth.views.LoginView` as it rejects inactive users. Be aware that the "
"permission-checking methods such as :meth:`~django.contrib.auth.models.User."
"has_perm` and the authentication in the Django admin all return ``False`` "
"for inactive users."
msgstr ""

#: ../../ref/contrib/auth.txt:107
msgid ""
"In older versions, :class:`~django.contrib.auth.backends.ModelBackend` and :"
"class:`~django.contrib.auth.backends.RemoteUserBackend` allowed inactive "
"users to authenticate."
msgstr ""

# 13bf6a9eba8c46cea59e982e532394ec
#: ../../ref/contrib/auth.txt:114
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""

#: ../../ref/contrib/auth.txt:119
msgid "A datetime of the user's last login."
msgstr ""

# 28f71e725f4849daac45d66fea32637a
#: ../../ref/contrib/auth.txt:123
msgid ""
"A datetime designating when the account was created. Is set to the current "
"date/time by default when the account is created."
msgstr ""

#: ../../ref/contrib/auth.txt:127
msgid "Attributes"
msgstr ""

#: ../../ref/contrib/auth.txt:133
msgid ""
"Read-only attribute which is always ``True`` (as opposed to ``AnonymousUser."
"is_authenticated`` which is always ``False``). This is a way to tell if the "
"user has been authenticated. This does not imply any permissions and doesn't "
"check if the user is active or has a valid session. Even though normally you "
"will check this attribute on ``request.user`` to find out whether it has "
"been populated by the :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` (representing the currently logged-in user), you "
"should know this attribute is ``True`` for any :class:`~models.User` "
"instance."
msgstr ""

#: ../../ref/contrib/auth.txt:145 ../../ref/contrib/auth.txt:158
msgid ""
"In older versions, this was a method. Backwards-compatibility support for "
"using it as a method will be removed in Django 2.0."
msgstr ""

#: ../../ref/contrib/auth.txt:150
msgid ""
"Read-only attribute which is always ``False``. This is a way of "
"differentiating :class:`~models.User` and :class:`~models.AnonymousUser` "
"objects. Generally, you should prefer using :attr:`~django.contrib.auth."
"models.User.is_authenticated` to this attribute."
msgstr ""

#: ../../ref/contrib/auth.txt:165
msgid ""
"Points to a validator instance used to validate usernames. Defaults to :"
"class:`validators.UnicodeUsernameValidator` on Python 3 and :class:"
"`validators.ASCIIUsernameValidator` on Python 2."
msgstr ""

#: ../../ref/contrib/auth.txt:169
msgid ""
"To change the default username validator, you can subclass the ``User`` "
"model and set this attribute to a different validator instance. For example, "
"to use ASCII usernames on Python 3::"
msgstr ""

# 6768335e760a4fd5a52e9eb477e0774e
# 4e60d119e0004de4bd1e1875bea3205b
#: ../../ref/contrib/auth.txt:183 ../../ref/contrib/auth.txt:382
msgid "Methods"
msgstr ""

#: ../../ref/contrib/auth.txt:189
msgid ""
"Returns the username for the user. Since the ``User`` model can be swapped "
"out, you should use this method instead of referencing the username "
"attribute directly."
msgstr ""

# e0d7fa7e6c9c457fa24e938816c02a16
#: ../../ref/contrib/auth.txt:195
msgid ""
"Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :"
"attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""

# f916b9b4cf674e6f85c60127828711c0
#: ../../ref/contrib/auth.txt:201
msgid "Returns the :attr:`~django.contrib.auth.models.User.first_name`."
msgstr ""

# d06ca4ba986947d4b1c78ac001073afa
#: ../../ref/contrib/auth.txt:205
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` "
"object."
msgstr ""

# f39a23a0826c46a1aaf3f20b824ca908
#: ../../ref/contrib/auth.txt:209
msgid ""
"When the ``raw_password`` is ``None``, the password will be set to an "
"unusable password, as if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` were used."
msgstr ""

# 0c7248270c7b40889c6b4b46a85e54f7
#: ../../ref/contrib/auth.txt:216
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

# e820a9bf2af740939b6e0bc2dc7fc0e8
#: ../../ref/contrib/auth.txt:222
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models.User."
"check_password()` for this user will never return ``True``. Doesn't save "
"the :class:`~django.contrib.auth.models.User` object."
msgstr ""

# 0ec4dac0ff31410b9c6b690d2e46c941
#: ../../ref/contrib/auth.txt:228
msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""

# 563135e78b9643eca650a9069e599c9a
#: ../../ref/contrib/auth.txt:233
msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` has been called for this user."
msgstr ""

# 43a877d73f4a4efbb1a724780540aef6
#: ../../ref/contrib/auth.txt:239
msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr ""

# 43755b1401e74783947ea937dd700bf4
#: ../../ref/contrib/auth.txt:242
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""

# ca972a1d07fc45188dc8e58878d65270
#: ../../ref/contrib/auth.txt:247
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""

# fe566b8541d146a4b983db16bbdf1323
#: ../../ref/contrib/auth.txt:250
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""

# 5272f551cacb496fb122dcf15755fdae
#: ../../ref/contrib/auth.txt:255
msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"``. (see documentation on :"
"ref:`permissions <topic-authorization>`). If the user is inactive, this "
"method will always return ``False``."
msgstr ""

# 1a79d1915a4c4360a8cc9dad81b579c5
#: ../../ref/contrib/auth.txt:260
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""

# f120a848e23d428e8c835e5ee36908fb
#: ../../ref/contrib/auth.txt:265
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``."
msgstr ""

# 57367628b4e4476ba2dcf40a200536aa
#: ../../ref/contrib/auth.txt:270
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""

# 4a1f34ecd582490aa404a56fb8de5118
#: ../../ref/contrib/auth.txt:275
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:281
msgid ""
"Sends an email to the user. If ``from_email`` is ``None``, Django uses the :"
"setting:`DEFAULT_FROM_EMAIL`. Any ``**kwargs`` are passed to the underlying :"
"meth:`~django.core.mail.send_mail()` call."
msgstr ""

# 0f6193af36fe42c19d2cb1ba3b2d89da
#: ../../ref/contrib/auth.txt:286
msgid "Manager methods"
msgstr ""

# cfce8bd57e3f41e28a7b84d5c44df9a2
#: ../../ref/contrib/auth.txt:290
msgid ""
"The :class:`~django.contrib.auth.models.User` model has a custom manager "
"that has the following helper methods (in addition to the methods provided "
"by :class:`~django.contrib.auth.models.BaseUserManager`):"
msgstr ""

# 2f049a5540744f39872c1bafd97de3c4
#: ../../ref/contrib/auth.txt:296
msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""

# aec3d3c82e6244ee805a2b93c114527f
#: ../../ref/contrib/auth.txt:298
msgid ""
"The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django."
"contrib.auth.models.User.password` are set as given. The domain portion of :"
"attr:`~django.contrib.auth.models.User.email` is automatically converted to "
"lowercase, and the returned :class:`~django.contrib.auth.models.User` object "
"will have :attr:`~django.contrib.auth.models.User.is_active` set to ``True``."
msgstr ""

# 9ec1c956a5ed435295987af5859927f4
#: ../../ref/contrib/auth.txt:305
msgid ""
"If no password is provided, :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` will be called."
msgstr ""

#: ../../ref/contrib/auth.txt:309
msgid ""
"The ``extra_fields`` keyword arguments are passed through to the :class:"
"`~django.contrib.auth.models.User`’s ``__init__`` method to allow setting "
"arbitrary fields on a :ref:`custom user model <auth-custom-user>`."
msgstr ""

# 5880119f075941519e1b6d1a75754517
#: ../../ref/contrib/auth.txt:314
msgid ""
"See :ref:`Creating users <topics-auth-creating-users>` for example usage."
msgstr ""

# 70799761e1254792afb04410e2b0c6cb
#: ../../ref/contrib/auth.txt:318
msgid ""
"Same as :meth:`create_user`, but sets :attr:`~models.User.is_staff` and :"
"attr:`~models.User.is_superuser` to ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:322
msgid "``AnonymousUser`` object"
msgstr ""

# 5190c769d4a14a579b1b4f7a20c1e9f7
#: ../../ref/contrib/auth.txt:326
msgid ""
":class:`django.contrib.auth.models.AnonymousUser` is a class that implements "
"the :class:`django.contrib.auth.models.User` interface, with these "
"differences:"
msgstr ""

# a10b040c0bbd4496897f73e144e04e91
#: ../../ref/contrib/auth.txt:330
msgid ":ref:`id <automatic-primary-key-fields>` is always ``None``."
msgstr ""

#: ../../ref/contrib/auth.txt:331
msgid ""
":attr:`~django.contrib.auth.models.User.username` is always the empty string."
msgstr ""

#: ../../ref/contrib/auth.txt:333
msgid ""
":meth:`~django.contrib.auth.models.User.get_username()` always returns the "
"empty string."
msgstr ""

#: ../../ref/contrib/auth.txt:335
msgid ""
":attr:`~django.contrib.auth.models.User.is_anonymous` is ``True`` instead of "
"``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:337
msgid ""
":attr:`~django.contrib.auth.models.User.is_authenticated` is ``False`` "
"instead of ``True``."
msgstr ""

# 10d30b7e8816423785248b671bdace6e
#: ../../ref/contrib/auth.txt:339
msgid ""
":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib."
"auth.models.User.is_superuser` are always ``False``."
msgstr ""

# 7357e9121ed9458eaba047233d84730d
#: ../../ref/contrib/auth.txt:342
msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""

# ad7fa8ccdc0b4ea9aef06a3f2e80f98b
#: ../../ref/contrib/auth.txt:343
msgid ""
":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib."
"auth.models.User.user_permissions` are always empty."
msgstr ""

# 6057be905627468580e532c16ec6e379
#: ../../ref/contrib/auth.txt:346
msgid ""
":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django."
"contrib.auth.models.User.check_password()`, :meth:`~django.db.models.Model."
"save` and :meth:`~django.db.models.Model.delete()` raise :exc:"
"`NotImplementedError`."
msgstr ""

# aabd345e9afd4828baeeb92d30b952b9
#: ../../ref/contrib/auth.txt:351
msgid ""
"In practice, you probably won't need to use :class:`~django.contrib.auth."
"models.AnonymousUser` objects on your own, but they're used by Web requests, "
"as explained in the next section."
msgstr ""

#: ../../ref/contrib/auth.txt:356
msgid "``Permission`` model"
msgstr ""

# d958e33551c1473f9471e7ebf34f7f57
#: ../../ref/contrib/auth.txt:363
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the following "
"fields:"
msgstr ""

#: ../../ref/contrib/auth.txt:370
msgid "Required. 255 characters or fewer. Example: ``'Can vote'``."
msgstr ""

# f9c535e4b62542f1b3c6ef22d6e5ad10
#: ../../ref/contrib/auth.txt:374
msgid ""
"Required. A reference to the ``django_content_type`` database table, which "
"contains a record for each installed model."
msgstr ""

# 4bfc42ade07a41589a5f4e29593f7a72
#: ../../ref/contrib/auth.txt:379
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

# 8c54c2409fb049478aa3f620bbd00bc1
#: ../../ref/contrib/auth.txt:384
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the standard "
"data-access methods like any other :doc:`Django model </ref/models/"
"instances>`."
msgstr ""

#: ../../ref/contrib/auth.txt:388
msgid "``Group`` model"
msgstr ""

# 5dd707e90ad2412cb95bc67f0ef5778d
#: ../../ref/contrib/auth.txt:395
msgid ""
":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""

# 43118e9947304c5a9592492fba31c476
#: ../../ref/contrib/auth.txt:401
msgid ""
"Required. 80 characters or fewer. Any characters are permitted. Example: "
"``'Awesome Users'``."
msgstr ""

# 2fdaed7063d44a008ec3b930b9115469
#: ../../ref/contrib/auth.txt:406
msgid "Many-to-many field to :class:`~django.contrib.auth.models.Permission`::"
msgstr ""

#: ../../ref/contrib/auth.txt:414
msgid "Validators"
msgstr ""

#: ../../ref/contrib/auth.txt:420
msgid ""
"A field validator allowing only ASCII letters, in addition to ``@``, ``.``, "
"``+``, ``-``, and ``_``. The default validator for ``User.username`` on "
"Python 2."
msgstr ""

#: ../../ref/contrib/auth.txt:428
msgid ""
"A field validator allowing Unicode letters, in addition to ``@``, ``.``, ``"
"+``, ``-``, and ``_``. The default validator for ``User.username`` on Python "
"3."
msgstr ""

# 40ea1d6c0ff642d9a1548bd945352c1b
#: ../../ref/contrib/auth.txt:435
msgid "Login and logout signals"
msgstr ""

# 3dc4c4053b54417e8d8e2befe475105f
#: ../../ref/contrib/auth.txt:439
msgid ""
"The auth framework uses the following :doc:`signals </topics/signals>` that "
"can be used for notification when a user logs in or out."
msgstr ""

# b1f0947a56ff402cb137cb56d205d00c
#: ../../ref/contrib/auth.txt:444
msgid "Sent when a user logs in successfully."
msgstr ""

# c9253dd8c92748bc9ce1751664175e2d
#: ../../ref/contrib/auth.txt:446
msgid "Arguments sent with this signal:"
msgstr ""

#: ../../ref/contrib/auth.txt:449 ../../ref/contrib/auth.txt:463
#: ../../ref/contrib/auth.txt:477
msgid "sender"
msgstr ""

# 1c539e0ff3cf483095ac820b9cea9ca0
#: ../../ref/contrib/auth.txt:449
msgid "The class of the user that just logged in."
msgstr ""

#: ../../ref/contrib/auth.txt:452 ../../ref/contrib/auth.txt:466
#: ../../ref/contrib/auth.txt:487
msgid "request"
msgstr ""

# dbf32231578942bb8a21d6e118470a0b
# c1a39b2c480243eab2fc1ceb222ae5bc
#: ../../ref/contrib/auth.txt:452 ../../ref/contrib/auth.txt:466
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../ref/contrib/auth.txt:454 ../../ref/contrib/auth.txt:469
msgid "user"
msgstr ""

# 4dc451f24b0841df954e40120a714d8f
#: ../../ref/contrib/auth.txt:455
msgid "The user instance that just logged in."
msgstr ""

# f4b4dff357d148229be3dd4d305378d9
#: ../../ref/contrib/auth.txt:459
msgid "Sent when the logout method is called."
msgstr ""

# 3dc4b8e07b20476094555ad56dab4cb6
#: ../../ref/contrib/auth.txt:462
msgid ""
"As above: the class of the user that just logged out or ``None`` if the user "
"was not authenticated."
msgstr ""

# 0c67000c1b79490eb2ca9152e7a124d7
#: ../../ref/contrib/auth.txt:469
msgid ""
"The user instance that just logged out or ``None`` if the user was not "
"authenticated."
msgstr ""

# 04ab9f40fe344e6b8e6a7e90080f6fae
#: ../../ref/contrib/auth.txt:474
msgid "Sent when the user failed to login successfully"
msgstr ""

# 3b632ccc4da3486e839e3de88bd91f32
#: ../../ref/contrib/auth.txt:477
msgid "The name of the module used for authentication."
msgstr ""

#: ../../ref/contrib/auth.txt:483
msgid "credentials"
msgstr ""

# fbf6cbd5df8d4224975e5c8f76fe1c34
#: ../../ref/contrib/auth.txt:480
msgid ""
"A dictionary of keyword arguments containing the user credentials that were "
"passed to :func:`~django.contrib.auth.authenticate()` or your own custom "
"authentication backend. Credentials matching a set of 'sensitive' patterns, "
"(including password) will not be sent in the clear as part of the signal."
msgstr ""

#: ../../ref/contrib/auth.txt:486
msgid ""
"The :class:`~django.http.HttpRequest` object, if one was provided to :func:"
"`~django.contrib.auth.authenticate`."
msgstr ""

#: ../../ref/contrib/auth.txt:491 ../../ref/contrib/auth.txt:548
msgid "The ``request`` argument was added."
msgstr ""

# 1d22982f44c74e5eb189a988a1e33103
#: ../../ref/contrib/auth.txt:496
msgid "Authentication backends"
msgstr ""

# 796a6c1b4a814f93bbb8ec384a1fa8ff
#: ../../ref/contrib/auth.txt:501
msgid ""
"This section details the authentication backends that come with Django. For "
"information on how to use them and how to write your own authentication "
"backends, see the :ref:`Other authentication sources section <authentication-"
"backends>` of the :doc:`User authentication guide </topics/auth/index>`."
msgstr ""

# 4ecbd452416a4151b4495fd975985484
#: ../../ref/contrib/auth.txt:509
msgid "Available authentication backends"
msgstr ""

# 824e905e5d0d4c8b9672fc954247e256
#: ../../ref/contrib/auth.txt:511
msgid ""
"The following backends are available in :mod:`django.contrib.auth.backends`:"
msgstr ""

# 798ca46f6f0a4655aa5648cd06f4c06e
#: ../../ref/contrib/auth.txt:515
msgid ""
"This is the default authentication backend used by Django.  It authenticates "
"using credentials consisting of a user identifier and password.  For "
"Django's default user model, the user identifier is the username, for custom "
"user models it is the field specified by USERNAME_FIELD (see :doc:"
"`Customizing Users and authentication </topics/auth/customizing>`)."
msgstr ""

# ec7549f098c94479ad6a8d2a98f04cc2
#: ../../ref/contrib/auth.txt:522
msgid ""
"It also handles the default permissions model as defined for :class:`~django."
"contrib.auth.models.User` and :class:`~django.contrib.auth.models."
"PermissionsMixin`."
msgstr ""

#: ../../ref/contrib/auth.txt:526
msgid ""
":meth:`has_perm`, :meth:`get_all_permissions`, :meth:`get_user_permissions`, "
"and :meth:`get_group_permissions` allow an object to be passed as a "
"parameter for object-specific permissions, but this backend does not "
"implement them other than returning an empty set of permissions if ``obj is "
"not None``."
msgstr ""

#: ../../ref/contrib/auth.txt:534
msgid ""
"Tries to authenticate ``username`` with ``password`` by calling :meth:`User."
"check_password <django.contrib.auth.models.User.check_password>`. If no "
"``username`` is provided, it tries to fetch a username from ``kwargs`` using "
"the key :attr:`CustomUser.USERNAME_FIELD <django.contrib.auth.models."
"CustomUser.USERNAME_FIELD>`. Returns an authenticated user or ``None``."
msgstr ""

#: ../../ref/contrib/auth.txt:542 ../../ref/contrib/auth.txt:634
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` and may be ``None`` if "
"it wasn't provided to :func:`~django.contrib.auth.authenticate` (which "
"passes it on to the backend)."
msgstr ""

#: ../../ref/contrib/auth.txt:552
msgid ""
"Returns the set of permission strings the ``user_obj`` has from their own "
"user permissions. Returns an empty set if :attr:`~django.contrib.auth.models."
"AbstractBaseUser.is_anonymous` or :attr:`~django.contrib.auth.models."
"CustomUser.is_active` is ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:559
msgid ""
"Returns the set of permission strings the ``user_obj`` has from the "
"permissions of the groups they belong. Returns an empty set if :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or :attr:"
"`~django.contrib.auth.models.CustomUser.is_active`  is ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:566
msgid ""
"Returns the set of permission strings the ``user_obj`` has, including both "
"user permissions and group permissions. Returns an empty set if :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or :attr:"
"`~django.contrib.auth.models.CustomUser.is_active` is ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:573
msgid ""
"Uses :meth:`get_all_permissions` to check if ``user_obj`` has the permission "
"string ``perm``. Returns ``False`` if the user is not :attr:`~django.contrib."
"auth.models.CustomUser.is_active`."
msgstr ""

#: ../../ref/contrib/auth.txt:579
msgid ""
"Returns whether the ``user_obj`` has any permissions on the app "
"``app_label``."
msgstr ""

#: ../../ref/contrib/auth.txt:586
msgid ""
"Returns whether the user is allowed to authenticate. To match the behavior "
"of :class:`~django.contrib.auth.forms.AuthenticationForm` which :meth:"
"`prohibits inactive users from logging in <django.contrib.auth.forms."
"AuthenticationForm.confirm_login_allowed>`, this method returns ``False`` "
"for users with :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>`. Custom user models that don't have an :attr:`~django.contrib."
"auth.models.CustomUser.is_active` field are allowed."
msgstr ""

#: ../../ref/contrib/auth.txt:599
msgid ""
"Same as :class:`ModelBackend` except that it doesn't reject inactive users "
"because :meth:`~ModelBackend.user_can_authenticate` always returns ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:602
msgid ""
"When using this backend, you'll likely want to customize the :class:`~django."
"contrib.auth.forms.AuthenticationForm` used by the :class:`~django.contrib."
"auth.views.LoginView` by overriding the :meth:`~django.contrib.auth.forms."
"AuthenticationForm.confirm_login_allowed` method as it rejects inactive "
"users."
msgstr ""

# 4e9ef4707c04434a9e006e486bb94b5e
#: ../../ref/contrib/auth.txt:610
msgid ""
"Use this backend to take advantage of external-to-Django-handled "
"authentication.  It authenticates using usernames passed in :attr:`request."
"META['REMOTE_USER'] <django.http.HttpRequest.META>`.  See the :doc:"
"`Authenticating against REMOTE_USER </howto/auth-remote-user>` documentation."
msgstr ""

# d2120aa0c6f54e6a93975d313c02a2b0
#: ../../ref/contrib/auth.txt:616
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from this class and override these attributes or methods:"
msgstr ""

#: ../../ref/contrib/auth.txt:621
msgid ""
"``True`` or ``False``. Determines whether or not a user object is created if "
"not already in the database  Defaults to ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:626
msgid ""
"The username passed as ``remote_user`` is considered trusted. This method "
"simply returns the user object with the given username, creating a new user "
"object if :attr:`~RemoteUserBackend.create_unknown_user` is ``True``."
msgstr ""

# 3e9586223d774aa492ecca3041beb81d
#: ../../ref/contrib/auth.txt:630
msgid ""
"Returns ``None`` if :attr:`~RemoteUserBackend.create_unknown_user` is "
"``False`` and a ``User`` object with the given username is not found in the "
"database."
msgstr ""

#: ../../ref/contrib/auth.txt:640
msgid ""
"Performs any cleaning on the ``username`` (e.g. stripping LDAP DN "
"information) prior to using it to get or create a user object. Returns the "
"cleaned username."
msgstr ""

# 5aba94dfd19e4bee9ebeb16b1ae01de6
#: ../../ref/contrib/auth.txt:646
msgid ""
"Configures a newly created user.  This method is called immediately after a "
"new user is created, and can be used to perform custom setup actions, such "
"as setting the user's groups based on attributes in an LDAP directory. "
"Returns the user object."
msgstr ""

#: ../../ref/contrib/auth.txt:655
msgid ""
"Returns whether the user is allowed to authenticate. This method returns "
"``False`` for users with :attr:`is_active=False <django.contrib.auth.models."
"User.is_active>`. Custom user models that don't have an :attr:`~django."
"contrib.auth.models.CustomUser.is_active` field are allowed."
msgstr ""

#: ../../ref/contrib/auth.txt:665
msgid ""
"Same as :class:`RemoteUserBackend` except that it doesn't reject inactive "
"users because :attr:`~RemoteUserBackend.user_can_authenticate` always "
"returns ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:670
msgid "Utility functions"
msgstr ""

#: ../../ref/contrib/auth.txt:676
msgid ""
"Returns the user model instance associated with the given ``request``’s "
"session."
msgstr ""

#: ../../ref/contrib/auth.txt:679
msgid ""
"It checks if the authentication backend stored in the session is present in :"
"setting:`AUTHENTICATION_BACKENDS`. If so, it uses the backend's "
"``get_user()`` method to retrieve the user model instance and then verifies "
"the session by calling the user model's :meth:`~django.contrib.auth.models."
"AbstractBaseUser.get_session_auth_hash` method."
msgstr ""

#: ../../ref/contrib/auth.txt:686
msgid ""
"Returns an instance of :class:`~django.contrib.auth.models.AnonymousUser` if "
"the authentication backend stored in the session is no longer in :setting:"
"`AUTHENTICATION_BACKENDS`, if a user isn't returned by the backend's "
"``get_user()`` method, or if the session auth hash doesn't validate."
msgstr ""
