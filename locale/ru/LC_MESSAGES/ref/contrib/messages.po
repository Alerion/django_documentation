# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# b027b6bbfcb543b098a4a094bc51851c
#: ../../ref/contrib/messages.txt:3
msgid "The messages framework"
msgstr ""

# 41916fe8cb224fc1a7020430ef54353d
#: ../../ref/contrib/messages.txt:8
msgid ""
"Quite commonly in web applications, you need to display a one-time "
"notification message (also known as \"flash message\") to the user after "
"processing a form or some other types of user input."
msgstr ""

# 5ffa5de30fd2497fb40e117dc7e8460b
#: ../../ref/contrib/messages.txt:12
msgid ""
"For this, Django provides full support for cookie- and session-based "
"messaging, for both anonymous and authenticated users. The messages "
"framework allows you to temporarily store messages in one request and "
"retrieve them for display in a subsequent request (usually the next one). "
"Every message is tagged with a specific ``level`` that determines its "
"priority (e.g., ``info``, ``warning``, or ``error``)."
msgstr ""

# ebd90c800d584ff0922213ce19931aac
#: ../../ref/contrib/messages.txt:20
msgid "Enabling messages"
msgstr ""

# 16c3b1c0817143068d5fafafbec81448
#: ../../ref/contrib/messages.txt:22
msgid ""
"Messages are implemented through a :doc:`middleware </ref/middleware>` class "
"and corresponding :doc:`context processor </ref/templates/api>`."
msgstr ""

#: ../../ref/contrib/messages.txt:25
msgid ""
"The default ``settings.py`` created by ``django-admin startproject`` already "
"contains all the settings required to enable message functionality:"
msgstr ""

# fbe94d7b3b374034a87875c395887df3
#: ../../ref/contrib/messages.txt:28
msgid "``'django.contrib.messages'`` is in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/messages.txt:30
msgid ""
":setting:`MIDDLEWARE` contains ``'django.contrib.sessions.middleware."
"SessionMiddleware'`` and ``'django.contrib.messages.middleware."
"MessageMiddleware'``."
msgstr ""

#: ../../ref/contrib/messages.txt:34
msgid ""
"The default :ref:`storage backend <message-storage-backends>` relies on :doc:"
"`sessions </topics/http/sessions>`. That's why ``SessionMiddleware`` must be "
"enabled and appear before ``MessageMiddleware`` in :setting:`MIDDLEWARE`."
msgstr ""

#: ../../ref/contrib/messages.txt:39
msgid ""
"The ``'context_processors'`` option of the ``DjangoTemplates`` backend "
"defined in your :setting:`TEMPLATES` setting contains ``'django.contrib."
"messages.context_processors.messages'``."
msgstr ""

#: ../../ref/contrib/messages.txt:43
msgid ""
"If you don't want to use messages, you can remove ``'django.contrib."
"messages'`` from your :setting:`INSTALLED_APPS`, the ``MessageMiddleware`` "
"line from :setting:`MIDDLEWARE`, and the ``messages`` context processor "
"from :setting:`TEMPLATES`."
msgstr ""

# 7dd285d2b3d24c71be9b7aec1ffa64ec
#: ../../ref/contrib/messages.txt:49
msgid "Configuring the message engine"
msgstr ""

# e159d7263e3c4bcabd65613961962a34
#: ../../ref/contrib/messages.txt:54
msgid "Storage backends"
msgstr ""

# 1a7b95fb37274e04abee9f8821e9a3b6
#: ../../ref/contrib/messages.txt:56
msgid ""
"The messages framework can use different backends to store temporary "
"messages."
msgstr ""

# 80708a743eec48e9acd15971b31d7410
#: ../../ref/contrib/messages.txt:58
msgid ""
"Django provides three built-in storage classes in :mod:`django.contrib."
"messages`:"
msgstr ""

# 8b16b8475de04e1299471dc753b0438d
#: ../../ref/contrib/messages.txt:63
msgid ""
"This class stores all messages inside of the request's session. Therefore it "
"requires Django's ``contrib.sessions`` application."
msgstr ""

# a1bc3c59dc4342bdaa157f87bac96401
#: ../../ref/contrib/messages.txt:68
msgid ""
"This class stores the message data in a cookie (signed with a secret hash to "
"prevent manipulation) to persist notifications across requests. Old messages "
"are dropped if the cookie data size would exceed 2048 bytes."
msgstr ""

# 86d2e721d01342f181622cd163ccf1a7
#: ../../ref/contrib/messages.txt:74
msgid ""
"This class first uses ``CookieStorage``, and falls back to using "
"``SessionStorage`` for the messages that could not fit in a single cookie. "
"It also requires Django's ``contrib.sessions`` application."
msgstr ""

# 30aee32426694fb68422cdbb4d4b88fc
#: ../../ref/contrib/messages.txt:78
msgid ""
"This behavior avoids writing to the session whenever possible. It should "
"provide the best performance in the general case."
msgstr ""

# 0108a8cf95d34a9c93498d56f05f9e07
#: ../../ref/contrib/messages.txt:81
msgid ""
":class:`~django.contrib.messages.storage.fallback.FallbackStorage` is the "
"default storage class. If it isn't suitable to your needs, you can select "
"another storage class by setting :setting:`MESSAGE_STORAGE` to its full "
"import path, for example::"
msgstr ""

# 0e4eaf1a8ed84533b049e3da24e32267
#: ../../ref/contrib/messages.txt:90
msgid ""
"To write your own storage class, subclass the ``BaseStorage`` class in "
"``django.contrib.messages.storage.base`` and implement the ``_get`` and "
"``_store`` methods."
msgstr ""

# bf8181d0449e4b78b3e545207c9e8774
#: ../../ref/contrib/messages.txt:97
msgid "Message levels"
msgstr ""

# 93ed02f18b7747d29bc78f9c6152b552
#: ../../ref/contrib/messages.txt:99
msgid ""
"The messages framework is based on a configurable level architecture similar "
"to that of the Python logging module. Message levels allow you to group "
"messages by type so they can be filtered or displayed differently in views "
"and templates."
msgstr ""

# 845d093aa0ed4db0b119284780a144b0
#: ../../ref/contrib/messages.txt:104
msgid ""
"The built-in levels, which can be imported from ``django.contrib.messages`` "
"directly, are:"
msgstr ""

# f48f870829d049e18fd8c4cde14efc9d
#: ../../ref/contrib/messages.txt:108
msgid "Constant"
msgstr ""

# 9589eebb573c4d6d99465bb5bec7b68c
#: ../../ref/contrib/messages.txt:108
msgid "Purpose"
msgstr ""

# 64b92ddf72564dcc8d6f9038f2959a08
# a07ec214d54a4cc791e841a42e9517fc
# 2d473e45b23045dcb127bd2aca5e2869
#: ../../ref/contrib/messages.txt:110 ../../ref/contrib/messages.txt:137
#: ../../ref/contrib/messages.txt:274
msgid "``DEBUG``"
msgstr ""

# 94c89af7f34a4676960ba958940c92a8
#: ../../ref/contrib/messages.txt:110
msgid ""
"Development-related messages that will be ignored (or removed) in a "
"production deployment"
msgstr ""

# 609caf6e1dfd42878c2a50f22ac9b243
# 351fe1b505504adab8cbf0dc27f0e23a
# 43df58ed2d3443ecba2ffe3c8eba570f
#: ../../ref/contrib/messages.txt:111 ../../ref/contrib/messages.txt:138
#: ../../ref/contrib/messages.txt:275
msgid "``INFO``"
msgstr ""

# 059b0d6037574c3daa8068f9e00f8fde
#: ../../ref/contrib/messages.txt:111
msgid "Informational messages for the user"
msgstr ""

# d411173e1d8041b58a87f6e0b3e20e37
# 42056c75546d4bb0aeb79c2572016994
# 1b69223044344700b6387b5542ae26a5
#: ../../ref/contrib/messages.txt:112 ../../ref/contrib/messages.txt:139
#: ../../ref/contrib/messages.txt:276
msgid "``SUCCESS``"
msgstr ""

# 2e5a10d375ba48c89c19c7d4379675d6
#: ../../ref/contrib/messages.txt:112
msgid ""
"An action was successful, e.g. \"Your profile was updated successfully\""
msgstr ""

# 5d37b942604e469db174a2d8eb217d87
# d1e80f88ed7d4efb806035f9cff22208
# a76ce2e508f74ba4a6e0c7a64cd71bae
#: ../../ref/contrib/messages.txt:113 ../../ref/contrib/messages.txt:140
#: ../../ref/contrib/messages.txt:277
msgid "``WARNING``"
msgstr ""

# 39a033fac3aa4aeea81320a9485e1358
#: ../../ref/contrib/messages.txt:113
msgid "A failure did not occur but may be imminent"
msgstr ""

# 382b00a4249948bc9eda34dd7daebc54
# a8520f6830e344e680d1305dfdeb0b95
# 1d8593203277447b95c43c2e55ffeac2
#: ../../ref/contrib/messages.txt:114 ../../ref/contrib/messages.txt:141
#: ../../ref/contrib/messages.txt:278
msgid "``ERROR``"
msgstr ""

# edfe23cf236d42d0a72dcbe7cf992f86
#: ../../ref/contrib/messages.txt:114
msgid "An action was **not** successful or some other failure occurred"
msgstr ""

# 2ab7a4bcc4784bb88bae3a6beed7c903
#: ../../ref/contrib/messages.txt:117
msgid ""
"The :setting:`MESSAGE_LEVEL` setting can be used to change the minimum "
"recorded level (or it can be `changed per request`_). Attempts to add "
"messages of a level less than this will be ignored."
msgstr ""

# 31f372b370b54579b6cc85feb91d5182
#: ../../ref/contrib/messages.txt:124
msgid "Message tags"
msgstr ""

# 55cdd0108d4d4754a0dac670201d16ae
#: ../../ref/contrib/messages.txt:126
msgid ""
"Message tags are a string representation of the message level plus any extra "
"tags that were added directly in the view (see `Adding extra message tags`_ "
"below for more details). Tags are stored in a string and are separated by "
"spaces. Typically, message tags are used as CSS classes to customize message "
"style based on message type. By default, each level has a single tag that's "
"a lowercase version of its own constant:"
msgstr ""

# 6b692b3fbbb54bf781e9b39cf2954b80
# 2590caa70177415f86b93158c2ac3729
#: ../../ref/contrib/messages.txt:135 ../../ref/contrib/messages.txt:272
msgid "Level Constant"
msgstr ""

# 1f1121bb521b4cf098bc20fd6d58ccf7
#: ../../ref/contrib/messages.txt:135
msgid "Tag"
msgstr ""

# 604ed4a0f0b04640a156e66059f0b94a
#: ../../ref/contrib/messages.txt:137
msgid "``debug``"
msgstr ""

# 0a22a72a4942450f8faac1f7df49da3f
#: ../../ref/contrib/messages.txt:138
msgid "``info``"
msgstr ""

# 45fad1dd4cb44a0696a17bb058a625d4
#: ../../ref/contrib/messages.txt:139
msgid "``success``"
msgstr ""

# 7658475dc8424183a004fddc0a47a69f
#: ../../ref/contrib/messages.txt:140
msgid "``warning``"
msgstr ""

# e7c390e8df7242e4a27f52c94328a4bd
#: ../../ref/contrib/messages.txt:141
msgid "``error``"
msgstr ""

# 59b07ae3cf8d44dc9fe871fc9db3b0a0
#: ../../ref/contrib/messages.txt:144
msgid ""
"To change the default tags for a message level (either built-in or custom), "
"set the :setting:`MESSAGE_TAGS` setting to a dictionary containing the "
"levels you wish to change. As this extends the default tags, you only need "
"to provide tags for the levels you wish to override::"
msgstr ""

# d33a2f6a92a64338afa94100a6767ba5
#: ../../ref/contrib/messages.txt:156
msgid "Using messages in views and templates"
msgstr ""

# ac065beb8efc4fbdb8048b8083b152ad
#: ../../ref/contrib/messages.txt:161
msgid "Adding a message"
msgstr ""

# cf170a1101da495c9fc5b7aab3054fe8
#: ../../ref/contrib/messages.txt:163
msgid "To add a message, call::"
msgstr ""

# e9f5279501224aa2b66f960b1faf5e7e
#: ../../ref/contrib/messages.txt:168
msgid ""
"Some shortcut methods provide a standard way to add messages with commonly "
"used tags (which are usually represented as HTML classes for the message)::"
msgstr ""

# acc8960bcb46482cb96684c8b0f12d7e
#: ../../ref/contrib/messages.txt:180
msgid "Displaying messages"
msgstr ""

# 9a04bd13b283408eb6eb770197ca7b25
#: ../../ref/contrib/messages.txt:183
msgid "**In your template**, use something like::"
msgstr ""

# 0982fadde30b40129e804c137469e8c5
#: ../../ref/contrib/messages.txt:193
msgid ""
"If you're using the context processor, your template should be rendered with "
"a ``RequestContext``. Otherwise, ensure ``messages`` is available to the "
"template context."
msgstr ""

#: ../../ref/contrib/messages.txt:197
msgid ""
"Even if you know there is only one message, you should still iterate over "
"the ``messages`` sequence, because otherwise the message storage will not be "
"cleared for the next request."
msgstr ""

# b835e14512894b25bbe53af7dd4f7e91
#: ../../ref/contrib/messages.txt:201
msgid ""
"The context processor also provides a ``DEFAULT_MESSAGE_LEVELS`` variable "
"which is a mapping of the message level names to their numeric value::"
msgstr ""

# 05fa5453483b4596855b937c43e1ffc2
#: ../../ref/contrib/messages.txt:215
msgid ""
"**Outside of templates**, you can use :func:`~django.contrib.messages."
"get_messages`::"
msgstr ""

# 717ee083969446899f1cbc7e6a5bbb3f
#: ../../ref/contrib/messages.txt:224
msgid ""
"For instance, you can fetch all the messages to return them in a :ref:"
"`JSONResponseMixin <jsonresponsemixin-example>` instead of a :class:`~django."
"views.generic.base.TemplateResponseMixin`."
msgstr ""

# b358ca146bd445d5b9ace223e4e22d8c
#: ../../ref/contrib/messages.txt:228
msgid ""
":func:`~django.contrib.messages.get_messages` will return an instance of the "
"configured storage backend."
msgstr ""

# 6bcd3dc4f1bd4623abe7614fe2f3b3ad
#: ../../ref/contrib/messages.txt:233
msgid "The ``Message`` class"
msgstr ""

#: ../../ref/contrib/messages.txt:237
msgid ""
"When you loop over the list of messages in a template, what you get are "
"instances of the ``Message`` class. They have only a few attributes:"
msgstr ""

# 5cb582943f3d416990b9c0b631962821
#: ../../ref/contrib/messages.txt:240
msgid "``message``: The actual text of the message."
msgstr ""

# 2c64a836ec34492ca19a973e15c8b17a
#: ../../ref/contrib/messages.txt:242
msgid ""
"``level``: An integer describing the type of the message (see the `message "
"levels`_ section above)."
msgstr ""

# 8ba857e981a1462ab9f0f5b0cb39df1f
#: ../../ref/contrib/messages.txt:245
msgid ""
"``tags``: A string combining all the message's tags (``extra_tags`` and "
"``level_tag``) separated by spaces."
msgstr ""

# 92b3b0590141422bba85194f7f004524
#: ../../ref/contrib/messages.txt:248
msgid ""
"``extra_tags``: A string containing custom tags for this message, separated "
"by spaces. It's empty by default."
msgstr ""

# ee5e9b9277f44ec38873962507016d96
#: ../../ref/contrib/messages.txt:251
msgid ""
"``level_tag``: The string representation of the level. By default, it's the "
"lowercase version of the name of the associated constant, but this can be "
"changed if you need by using the :setting:`MESSAGE_TAGS` setting."
msgstr ""

# 1b55cc1e032e4330984769c2b5429831
#: ../../ref/contrib/messages.txt:256
msgid "Creating custom message levels"
msgstr ""

# e7aa5cca467e43beb237921379cec0ab
#: ../../ref/contrib/messages.txt:258
msgid ""
"Messages levels are nothing more than integers, so you can define your own "
"level constants and use them to create more customized user feedback, e.g.::"
msgstr ""

# af3b485ae5ae4c97aa4eba68585f8f56
#: ../../ref/contrib/messages.txt:266
msgid ""
"When creating custom message levels you should be careful to avoid "
"overloading existing levels. The values for the built-in levels are:"
msgstr ""

# e94ee51d814b472b950b5ba558dc85db
#: ../../ref/contrib/messages.txt:272
msgid "Value"
msgstr ""

# 910eca8a26c0455383dde90ed100338a
#: ../../ref/contrib/messages.txt:274
msgid "10"
msgstr ""

# ed259f1e274243cfad562b5d62a40d03
#: ../../ref/contrib/messages.txt:275
msgid "20"
msgstr ""

# 7711dc2ef26c4ae8bc65618f05f7da02
#: ../../ref/contrib/messages.txt:276
msgid "25"
msgstr ""

# 717ecfafe05e4881becad6c325df7060
#: ../../ref/contrib/messages.txt:277
msgid "30"
msgstr ""

# 30a87cfb364e4793ae258f1e29da3e8b
#: ../../ref/contrib/messages.txt:278
msgid "40"
msgstr ""

# c22f89c13d96481eacea5e9f1450e91b
#: ../../ref/contrib/messages.txt:281
msgid ""
"If you need to identify the custom levels in your HTML or CSS, you need to "
"provide a mapping via the :setting:`MESSAGE_TAGS` setting."
msgstr ""

# a38d040cca714b4bacfa7f6310a7c2e7
#: ../../ref/contrib/messages.txt:285
msgid ""
"If you are creating a reusable application, it is recommended to use only "
"the built-in `message levels`_ and not rely on any custom levels."
msgstr ""

# 70e5e51a50af439b9b02358b72bb7d20
#: ../../ref/contrib/messages.txt:289
msgid "Changing the minimum recorded level per-request"
msgstr ""

# 6f5fe71214064bec8ad8b764f50aa881
#: ../../ref/contrib/messages.txt:291
msgid ""
"The minimum recorded level can be set per request via the ``set_level`` "
"method::"
msgstr ""

# b9baebc6f75f4b609c8e044ed87fedcc
#: ../../ref/contrib/messages.txt:308
msgid ""
"Similarly, the current effective level can be retrieved with ``get_level``::"
msgstr ""

# bcb0d7005f5c48a8986ea4b149f96b32
#: ../../ref/contrib/messages.txt:313
msgid ""
"For more information on how the minimum recorded level functions, see "
"`Message levels`_ above."
msgstr ""

# fed013cc39834e2db0eaf6eeb359426d
#: ../../ref/contrib/messages.txt:317
msgid "Adding extra message tags"
msgstr ""

# 8d7dc3ae06394bc7ab13a2f5df3896ff
#: ../../ref/contrib/messages.txt:319
msgid ""
"For more direct control over message tags, you can optionally provide a "
"string containing extra tags to any of the add methods::"
msgstr ""

# 36f03aa9784c4a29b09ff89738c14c3c
#: ../../ref/contrib/messages.txt:325
msgid ""
"Extra tags are added before the default tag for that level and are space "
"separated."
msgstr ""

# 7301c8b830244691a544d92a2fe0cb34
#: ../../ref/contrib/messages.txt:329
msgid "Failing silently when the message framework is disabled"
msgstr ""

# 71bd3293c0c7468c82566f994584ed66
#: ../../ref/contrib/messages.txt:331
msgid ""
"If you're writing a reusable app (or other piece of code) and want to "
"include messaging functionality, but don't want to require your users to "
"enable it if they don't want to, you may pass an additional keyword argument "
"``fail_silently=True`` to any of the ``add_message`` family of methods. For "
"example::"
msgstr ""

# 104f4b14587143fd8f15b2816cf197c4
#: ../../ref/contrib/messages.txt:344
msgid ""
"Setting ``fail_silently=True`` only hides the ``MessageFailure`` that would "
"otherwise occur when the messages framework disabled and one attempts to use "
"one of the ``add_message`` family of methods. It does not hide failures that "
"may occur for other reasons."
msgstr ""

#: ../../ref/contrib/messages.txt:350
msgid "Adding messages in class-based views"
msgstr ""

# d0590527656a43c8a082d98dfb3ceb9e
#: ../../ref/contrib/messages.txt:354
msgid ""
"Adds a success message attribute to :class:`~django.views.generic.edit."
"FormView` based classes"
msgstr ""

# f643dd9ca98c4a9181b1314e84422a08
#: ../../ref/contrib/messages.txt:359
msgid ""
"``cleaned_data`` is the cleaned data from the form which is used for string "
"formatting"
msgstr ""

# 448885304d684da485f1f9d8d036eea8
#: ../../ref/contrib/messages.txt:362
msgid "**Example views.py**::"
msgstr ""

# 2d345b8be2a540a2909a974e12eef80d
#: ../../ref/contrib/messages.txt:373
msgid ""
"The cleaned data from the ``form`` is available for string interpolation "
"using the ``%(field_name)s`` syntax. For ModelForms, if you need access to "
"fields from the saved ``object`` override the :meth:`~django.contrib."
"messages.views.SuccessMessageMixin.get_success_message` method."
msgstr ""

# 869f496256384c2f8379d7ca72ee5888
#: ../../ref/contrib/messages.txt:379
msgid "**Example views.py for ModelForms**::"
msgstr ""

# a737a010a9914dc483082e312a09d020
#: ../../ref/contrib/messages.txt:397
msgid "Expiration of messages"
msgstr ""

# d041db2eaba34e578475c13eb3faa10d
#: ../../ref/contrib/messages.txt:399
msgid ""
"The messages are marked to be cleared when the storage instance is iterated "
"(and cleared when the response is processed)."
msgstr ""

# 90af31ae22554fc4a6976aa19e4ef567
#: ../../ref/contrib/messages.txt:402
msgid ""
"To avoid the messages being cleared, you can set the messages storage to "
"``False`` after iterating::"
msgstr ""

# 06dd19e638064dca8e7ada9a868cdba5
#: ../../ref/contrib/messages.txt:411
msgid "Behavior of parallel requests"
msgstr ""

# 407e8200f58d4953b5306498e948e907
#: ../../ref/contrib/messages.txt:413
msgid ""
"Due to the way cookies (and hence sessions) work, **the behavior of any "
"backends that make use of cookies or sessions is undefined when the same "
"client makes multiple requests that set or get messages in parallel**. For "
"example, if a client initiates a request that creates a message in one "
"window (or tab) and then another that fetches any uniterated messages in "
"another window, before the first window redirects, the message may appear in "
"the second window instead of the first window where it may be expected."
msgstr ""

# eb129ba3a0f24281a70c8b7d741ea0ec
#: ../../ref/contrib/messages.txt:421
msgid ""
"In short, when multiple simultaneous requests from the same client are "
"involved, messages are not guaranteed to be delivered to the same window "
"that created them nor, in some cases, at all. Note that this is typically "
"not a problem in most applications and will become a non-issue in HTML5, "
"where each window/tab will have its own browsing context."
msgstr ""

# f8f11254783540b695fa1698e08935db
#: ../../ref/contrib/messages.txt:428
msgid "Settings"
msgstr ""

# 651f7dfae62e418ab090c951905330b9
#: ../../ref/contrib/messages.txt:430
msgid ""
"A few :ref:`settings<settings-messages>` give you control over message "
"behavior:"
msgstr ""

# fa1e443e7320406fb7aa219566bced59
#: ../../ref/contrib/messages.txt:433
msgid ":setting:`MESSAGE_LEVEL`"
msgstr ""

# d8dd7c70edb94f16aad9131fdc185820
#: ../../ref/contrib/messages.txt:434
msgid ":setting:`MESSAGE_STORAGE`"
msgstr ""

# 8067b9a7d92740afa4bf8d4c797d7ea4
#: ../../ref/contrib/messages.txt:435
msgid ":setting:`MESSAGE_TAGS`"
msgstr ""

# ce57540853b24d39a11da30f25db87ae
#: ../../ref/contrib/messages.txt:437
msgid ""
"For backends that use cookies, the settings for the cookie are taken from "
"the session cookie settings:"
msgstr ""

# e77d263849844042af3a49bf0bff1f0e
#: ../../ref/contrib/messages.txt:440
msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ""

# 78a176a12ecb4a3ea09d532f106f2db8
#: ../../ref/contrib/messages.txt:441
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

# d4cf802114ed419cbc6c989aa7efe64a
#: ../../ref/contrib/messages.txt:442
msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ""
