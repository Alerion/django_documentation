# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# cdfc24d3b4684f0fbc9f9d086d45866d
#: ../../ref/contrib/gis/tutorial.txt:3
msgid "GeoDjango Tutorial"
msgstr ""

# 4fd1e5824ccf47b7899fedebe8c76b54
#: ../../ref/contrib/gis/tutorial.txt:6
msgid "Introduction"
msgstr ""

# 8fdb9c8741e748bea0c3e815ffb35667
#: ../../ref/contrib/gis/tutorial.txt:8
msgid ""
"GeoDjango is an included contrib module for Django that turns it into a "
"world-class geographic Web framework.  GeoDjango strives to make it as "
"simple as possible to create geographic Web applications, like location-"
"based services. Its features include:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:13
msgid "Django model fields for `OGC`_ geometries and raster data."
msgstr ""

# 724bdbc0822747da983bc98737fd62c0
#: ../../ref/contrib/gis/tutorial.txt:14
msgid "Extensions to Django's ORM for querying and manipulating spatial data."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:15
msgid ""
"Loosely-coupled, high-level Python interfaces for GIS geometry and raster "
"operations and data manipulation in different formats."
msgstr ""

# 1d25a164277742d6a0bf986eff18c003
#: ../../ref/contrib/gis/tutorial.txt:17
msgid "Editing geometry fields from the admin."
msgstr ""

# ab3bd74d193441d39bed02d525cbd142
#: ../../ref/contrib/gis/tutorial.txt:19
msgid ""
"This tutorial assumes familiarity with Django; thus, if you're brand new to "
"Django, please read through the :doc:`regular tutorial </intro/tutorial01>` "
"to familiarize yourself with Django first."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:25
msgid ""
"GeoDjango has additional requirements beyond what Django requires -- please "
"consult the :doc:`installation documentation <install/index>` for more "
"details."
msgstr ""

# 3517af3252b44eb5bd0159f805270e9e
#: ../../ref/contrib/gis/tutorial.txt:29
msgid ""
"This tutorial will guide you through the creation of a geographic web "
"application for viewing the `world borders`_. [#]_ Some of the code used in "
"this tutorial is taken from and/or inspired by the `GeoDjango basic apps`_ "
"project. [#]_"
msgstr ""

# 3b93b4606a0742fbab2a9894084f087e
#: ../../ref/contrib/gis/tutorial.txt:36
msgid ""
"Proceed through the tutorial sections sequentially for step-by-step "
"instructions."
msgstr ""

# 0f8dc7fdb1934c3f8fae829ac0df14b9
#: ../../ref/contrib/gis/tutorial.txt:44
msgid "Setting Up"
msgstr ""

# aa2b61463f4143f9933a37adbb3c22c6
#: ../../ref/contrib/gis/tutorial.txt:47
msgid "Create a Spatial Database"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:49
msgid ""
"Typically no special setup is required, so you can create a database as you "
"would for any other project. We provide some tips for selected databases:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:52
msgid ":doc:`install/postgis`"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:53
msgid ":doc:`install/spatialite`"
msgstr ""

# 1480f85325f84343a7a598122743f5e7
#: ../../ref/contrib/gis/tutorial.txt:56
msgid "Create a New Project"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:58
msgid ""
"Use the standard ``django-admin`` script to create a project called "
"``geodjango``:"
msgstr ""

# 4753f182e48e426883dc1fe2b70ae2c2
#: ../../ref/contrib/gis/tutorial.txt:65
msgid ""
"This will initialize a new project. Now, create a ``world`` Django "
"application within the ``geodjango`` project:"
msgstr ""

# 2b3919f1ca6f45b7b28f1bf537030edd
#: ../../ref/contrib/gis/tutorial.txt:74
msgid "Configure ``settings.py``"
msgstr ""

# 44dfac6b72ac4ee7bf114573a0074303
#: ../../ref/contrib/gis/tutorial.txt:76
msgid ""
"The ``geodjango`` project settings are stored in the ``geodjango/settings."
"py`` file. Edit the database connection settings to match your setup::"
msgstr ""

# e7d343528f44477eae483868652da8ca
#: ../../ref/contrib/gis/tutorial.txt:87
msgid ""
"In addition, modify the :setting:`INSTALLED_APPS` setting to include :mod:"
"`django.contrib.admin`, :mod:`django.contrib.gis`, and ``world`` (your newly "
"created application)::"
msgstr ""

# 00dd57b924f34f26af228a9ec545d209
#: ../../ref/contrib/gis/tutorial.txt:103
msgid "Geographic Data"
msgstr ""

# 6f0baf127f67443390440cef42a8c438
#: ../../ref/contrib/gis/tutorial.txt:108
msgid "World Borders"
msgstr ""

# fc937cfb0ad841c4b3e2e38e81f07752
#: ../../ref/contrib/gis/tutorial.txt:110
msgid ""
"The world borders data is available in this `zip file`__.  Create a ``data`` "
"directory in the ``world`` application, download the world borders data, and "
"unzip. On GNU/Linux platforms, use the following commands:"
msgstr ""

# 1adcf4bafc1f41fe9a933519ad21d434
#: ../../ref/contrib/gis/tutorial.txt:122
msgid ""
"The world borders ZIP file contains a set of data files collectively known "
"as an `ESRI Shapefile`__, one of the most popular geospatial data formats.  "
"When unzipped, the world borders dataset includes files with the following "
"extensions:"
msgstr ""

# d9516942fe7640a9b2d018a20eb7f83d
#: ../../ref/contrib/gis/tutorial.txt:127
msgid "``.shp``: Holds the vector data for the world borders geometries."
msgstr ""

# 71f534ee1e174b429b31e2af8d8f2f59
#: ../../ref/contrib/gis/tutorial.txt:128
msgid "``.shx``: Spatial index file for geometries stored in the ``.shp``."
msgstr ""

# 5b18a97864174807ba02d6219d108401
#: ../../ref/contrib/gis/tutorial.txt:129
msgid ""
"``.dbf``: Database file for holding non-geometric attribute data (e.g., "
"integer and character fields)."
msgstr ""

# dc127ea2874f41fab1dd572ab1d5be04
#: ../../ref/contrib/gis/tutorial.txt:131
msgid ""
"``.prj``: Contains the spatial reference information for the geographic data "
"stored in the shapefile."
msgstr ""

# 2acb6d2af8e8490ca1468d81282c2c27
#: ../../ref/contrib/gis/tutorial.txt:138
msgid "Use ``ogrinfo`` to examine spatial data"
msgstr ""

# c1f577fedbb648388331b7459014f85e
#: ../../ref/contrib/gis/tutorial.txt:140
msgid ""
"The GDAL ``ogrinfo`` utility allows examining the metadata of shapefiles or "
"other vector data sources:"
msgstr ""

# 3e3197e7372f43e892e90fa532f8ea06
#: ../../ref/contrib/gis/tutorial.txt:150
msgid ""
"``ogrinfo`` tells us that the shapefile has one layer, and that this layer "
"contains polygon data.  To find out more, we'll specify the layer name and "
"use the ``-so`` option to get only the important summary information:"
msgstr ""

# ecb94c7f0ffb44aaa24c94e27eb28738
#: ../../ref/contrib/gis/tutorial.txt:182
msgid ""
"This detailed summary information tells us the number of features in the "
"layer (246), the geographic bounds of the data, the spatial reference system "
"(\"SRS WKT\"), as well as type information for each attribute field. For "
"example, ``FIPS: String (2.0)`` indicates that the ``FIPS`` character field "
"has a maximum length of 2.  Similarly, ``LON: Real (8.3)`` is a floating-"
"point field that holds a maximum of 8 digits up to three decimal places."
msgstr ""

# 258b99c3b52548c7810332436856c4f4
#: ../../ref/contrib/gis/tutorial.txt:190
msgid "Geographic Models"
msgstr ""

# 7fb1ee502a304935b5cfe487ec5eef86
#: ../../ref/contrib/gis/tutorial.txt:193
msgid "Defining a Geographic Model"
msgstr ""

# 3626cfada96d49389eb9b1f937320fbd
#: ../../ref/contrib/gis/tutorial.txt:195
msgid ""
"Now that you've examined your dataset using ``ogrinfo``, create a GeoDjango "
"model to represent this data::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:222
msgid ""
"Note that the ``models`` module is imported from ``django.contrib.gis.db``."
msgstr ""

# e3b84b9cb0644f0585308763f0a1e5b0
#: ../../ref/contrib/gis/tutorial.txt:224
msgid ""
"The default spatial reference system for geometry fields is WGS84 (meaning "
"the `SRID`__ is 4326) -- in other words, the field coordinates are in "
"longitude, latitude pairs in units of degrees.  To use a different "
"coordinate system, set the SRID of the geometry field with the ``srid`` "
"argument. Use an integer representing the coordinate system's EPSG code."
msgstr ""

# 64aadc0003a949e080c9d7cfd3d98980
#: ../../ref/contrib/gis/tutorial.txt:233
msgid "Run ``migrate``"
msgstr ""

# 1b8a2997e08c44b1b76a427bb70b6418
#: ../../ref/contrib/gis/tutorial.txt:235
msgid ""
"After defining your model, you need to sync it with the database. First, "
"create a database migration:"
msgstr ""

# 5c84d232faa54b5e82b78473152fdc59
#: ../../ref/contrib/gis/tutorial.txt:245
msgid ""
"Let's look at the SQL that will generate the table for the ``WorldBorder`` "
"model:"
msgstr ""

# 5e776cb80496407e86ebd079b26581c4
#: ../../ref/contrib/gis/tutorial.txt:252
msgid "This command should produce the following output:"
msgstr ""

# c1486f225a2c4e89a019cb0747ef525d
#: ../../ref/contrib/gis/tutorial.txt:279
msgid ""
"If this looks correct, run :djadmin:`migrate` to create this table in the "
"database:"
msgstr ""

# b6a5c408524e49b993b5d9d58fdc41e6
#: ../../ref/contrib/gis/tutorial.txt:292
msgid "Importing Spatial Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:294
msgid ""
"This section will show you how to import the world borders shapefile into "
"the database via GeoDjango models using the :doc:`layermapping`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:297
msgid ""
"There are many different ways to import data into a spatial database -- "
"besides the tools included within GeoDjango, you may also use the following:"
msgstr ""

# 3bd66ad12ec2449b944509b3abe72aaa
#: ../../ref/contrib/gis/tutorial.txt:300
msgid ""
"`ogr2ogr`_: A command-line utility included with GDAL that can import many "
"vector data formats into PostGIS, MySQL, and Oracle databases."
msgstr ""

# 6b7005b38b094c039c3ab5d9a4f5c553
#: ../../ref/contrib/gis/tutorial.txt:302
msgid ""
"`shp2pgsql`_: This utility included with PostGIS imports ESRI shapefiles "
"into PostGIS."
msgstr ""

# 6462861dd71a40dba25073f27bbaa776
#: ../../ref/contrib/gis/tutorial.txt:311
msgid "GDAL Interface"
msgstr ""

# 45fc71872ffc4b8fa51e7c6a6c7cf17b
#: ../../ref/contrib/gis/tutorial.txt:313
msgid ""
"Earlier, you used ``ogrinfo`` to examine the contents of the world borders "
"shapefile.  GeoDjango also includes a Pythonic interface to GDAL's powerful "
"OGR library that can work with all the vector data sources that OGR supports."
msgstr ""

# 12e1e66c63fb409ca2e53043672955ca
#: ../../ref/contrib/gis/tutorial.txt:317
msgid "First, invoke the Django shell:"
msgstr ""

# c4013accb1194ae3a06169713b0e1b2a
#: ../../ref/contrib/gis/tutorial.txt:323
msgid ""
"If you downloaded the :ref:`worldborders` data earlier in the tutorial, then "
"you can determine its path using Python's built-in ``os`` module::"
msgstr ""

# 6f43d4a23ad8475e9d421d4433f52ee1
#: ../../ref/contrib/gis/tutorial.txt:332
msgid ""
"Now, open the world borders shapefile using GeoDjango's :class:`~django."
"contrib.gis.gdal.DataSource` interface::"
msgstr ""

# a7b923493baa46d591038ab58d33cd08
#: ../../ref/contrib/gis/tutorial.txt:340
msgid ""
"Data source objects can have different layers of geospatial features; "
"however, shapefiles are only allowed to have one layer::"
msgstr ""

# 795575462fe4472c82ebd547c24abf0d
#: ../../ref/contrib/gis/tutorial.txt:349
msgid ""
"You can see the layer's geometry type and how many features it contains::"
msgstr ""

# 1b8cf7bda9014d708f671b9a4483af3e
#: ../../ref/contrib/gis/tutorial.txt:358
msgid ""
"Unfortunately, the shapefile data format does not allow for greater "
"specificity with regards to geometry types.  This shapefile, like many "
"others, actually includes ``MultiPolygon`` geometries, not Polygons. It's "
"important to use a more general field type in models: a GeoDjango "
"``MultiPolygonField`` will accept a ``Polygon`` geometry, but a "
"``PolygonField`` will not accept a ``MultiPolygon`` type geometry.  This is "
"why the ``WorldBorder`` model defined above uses a ``MultiPolygonField``."
msgstr ""

# 27ee9e32f8e14f8da23f7a0a07d347eb
#: ../../ref/contrib/gis/tutorial.txt:366
msgid ""
"The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial "
"reference system associated with it.  If it does, the ``srs`` attribute will "
"return a :class:`~django.contrib.gis.gdal.SpatialReference` object::"
msgstr ""

# 7083c34180b64846bf4a3e400cd134a1
#: ../../ref/contrib/gis/tutorial.txt:380
msgid ""
"This shapefile is in the popular WGS84 spatial reference system -- in other "
"words, the data uses longitude, latitude pairs in units of degrees."
msgstr ""

# dc322956e26249db84568de1bb71ca12
#: ../../ref/contrib/gis/tutorial.txt:384
msgid ""
"In addition, shapefiles also support attribute fields that may contain "
"additional data.  Here are the fields on the World Borders layer:"
msgstr ""

# 119f59a928284dfeab5982105e138883
#: ../../ref/contrib/gis/tutorial.txt:390
msgid ""
"The following code will let you examine the OGR types (e.g. integer or "
"string) associated with each of the fields:"
msgstr ""

# 6f4c96a340744538a424ed247c87c35e
#: ../../ref/contrib/gis/tutorial.txt:396
msgid ""
"You can iterate over each feature in the layer and extract information from "
"both the feature's geometry (accessed via the ``geom`` attribute) as well as "
"the feature's attribute fields (whose **values** are accessed via ``get()`` "
"method)::"
msgstr ""

# 685f1fc8b21243c68a563bea33162d1a
#: ../../ref/contrib/gis/tutorial.txt:409
msgid ":class:`~django.contrib.gis.gdal.Layer` objects may be sliced::"
msgstr ""

# 2ba40c0559a34611a6ae41061a8ca813
#: ../../ref/contrib/gis/tutorial.txt:414
msgid "And individual features may be retrieved by their feature ID::"
msgstr ""

# df82d6382e84444aa3133776013634a1
#: ../../ref/contrib/gis/tutorial.txt:420
msgid "Boundary geometries may be exported as WKT and GeoJSON::"
msgstr ""

# 5f12153343a642309c887a54c9dcd9e5
#: ../../ref/contrib/gis/tutorial.txt:430
msgid "``LayerMapping``"
msgstr ""

# f83f6a1dff014bf986f1dab8f575b1d1
#: ../../ref/contrib/gis/tutorial.txt:432
msgid ""
"To import the data, use a LayerMapping in a Python script. Create a file "
"called ``load.py`` inside the ``world`` application, with the following "
"code::"
msgstr ""

# 785fbd7114b34161903067ce4e893654
#: ../../ref/contrib/gis/tutorial.txt:466
msgid "A few notes about what's going on:"
msgstr ""

# e58a9399857540cfa891385a2b6fac11
#: ../../ref/contrib/gis/tutorial.txt:468
msgid ""
"Each key in the ``world_mapping`` dictionary corresponds to a field in the "
"``WorldBorder`` model.  The value is the name of the shapefile field that "
"data will be loaded from."
msgstr ""

# 06e668c192a64d82b25012f715d5649f
#: ../../ref/contrib/gis/tutorial.txt:471
msgid ""
"The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the geometry "
"type GeoDjango will import the field as.  Even simple polygons in the "
"shapefile will automatically be converted into collections prior to "
"insertion into the database."
msgstr ""

# 00dd1b22fac14e71b16caa1f778c1b35
#: ../../ref/contrib/gis/tutorial.txt:475
msgid ""
"The path to the shapefile is not absolute -- in other words, if you move the "
"``world`` application (with ``data`` subdirectory) to a different location, "
"the script will still work."
msgstr ""

# 51e7ca58c22247d5abceb7cb6600adf9
#: ../../ref/contrib/gis/tutorial.txt:478
msgid ""
"The ``transform`` keyword is set to ``False`` because the data in the "
"shapefile does not need to be converted -- it's already in WGS84 (SRID=4326)."
msgstr ""

# 6428358b0a844b8f8ed59db4f81679cd
#: ../../ref/contrib/gis/tutorial.txt:480
msgid ""
"The ``encoding`` keyword is set to the character encoding of the string "
"values in the shapefile. This ensures that string values are read and saved "
"correctly from their original encoding system."
msgstr ""

# 1f6ea2c1ec544c4ebda192e5863cb4e4
#: ../../ref/contrib/gis/tutorial.txt:484
msgid ""
"Afterwards, invoke the Django shell from the ``geodjango`` project directory:"
msgstr ""

# 26052b0b1e8d44a186c4fec6adf3f9f3
#: ../../ref/contrib/gis/tutorial.txt:490
msgid ""
"Next, import the ``load`` module, call the ``run`` routine, and watch "
"``LayerMapping`` do the work::"
msgstr ""

# 901b200edce24ebc9ad138f66e2ce81b
#: ../../ref/contrib/gis/tutorial.txt:499
msgid "Try ``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:500
msgid ""
"Now that you've seen how to define geographic models and import data with "
"the :doc:`layermapping`, it's possible to further automate this process with "
"use of the :djadmin:`ogrinspect` management command.  The :djadmin:"
"`ogrinspect` command  introspects a GDAL-supported vector data source (e.g., "
"a shapefile) and generates a model definition and ``LayerMapping`` "
"dictionary automatically."
msgstr ""

# bf22e0f4989e41c6ab98572918269e00
#: ../../ref/contrib/gis/tutorial.txt:506
msgid "The general usage of the command goes as follows:"
msgstr ""

# f2e768cc1bf54197aedf7825a940de0c
#: ../../ref/contrib/gis/tutorial.txt:512
msgid ""
"``data_source`` is the path to the GDAL-supported data source and "
"``model_name`` is the name to use for the model.  Command-line options may "
"be used to further define how the model is generated."
msgstr ""

# 4aa38dd751404a69a56563e967ff48d5
#: ../../ref/contrib/gis/tutorial.txt:516
msgid ""
"For example, the following command nearly reproduces the ``WorldBorder`` "
"model and mapping dictionary created above, automatically:"
msgstr ""

# b089cdbcaecc4fccbf728bf565346422
#: ../../ref/contrib/gis/tutorial.txt:524
msgid "A few notes about the command-line options given above:"
msgstr ""

# e8951595fe6746f4bf7bd4726368e357
#: ../../ref/contrib/gis/tutorial.txt:526
msgid "The ``--srid=4326`` option sets the SRID for the geographic field."
msgstr ""

# cbe7cef042564c2abeed4b507f947cb6
#: ../../ref/contrib/gis/tutorial.txt:527
msgid ""
"The ``--mapping`` option tells ``ogrinspect`` to also generate a mapping "
"dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

# 90efb204077b4e46b4e2400098bb1da3
#: ../../ref/contrib/gis/tutorial.txt:530
msgid ""
"The ``--multi`` option is specified so that the geographic field is a :class:"
"`~django.contrib.gis.db.models.MultiPolygonField` instead of just a :class:"
"`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

# 2b3e3fc2803340b6b597860247c6dd03
#: ../../ref/contrib/gis/tutorial.txt:534
msgid ""
"The command produces the following output, which may be copied directly into "
"the ``models.py`` of a GeoDjango application::"
msgstr ""

# c1b59e2705474679b6c75f58a503574e
#: ../../ref/contrib/gis/tutorial.txt:571
msgid "Spatial Queries"
msgstr ""

# af1a7ed502134dfc982089cc4a9cb207
#: ../../ref/contrib/gis/tutorial.txt:574
msgid "Spatial Lookups"
msgstr ""

# 52c4296f316a475d97bbe71ca7181c23
#: ../../ref/contrib/gis/tutorial.txt:575
msgid ""
"GeoDjango adds spatial lookups to the Django ORM.  For example, you can find "
"the country in the ``WorldBorder`` table that contains a particular point.  "
"First, fire up the management shell:"
msgstr ""

# e5256be1d626494a980bcb1e72b27270
#: ../../ref/contrib/gis/tutorial.txt:583
msgid "Now, define a point of interest [#]_::"
msgstr ""

# 53fc637f891c42209ddf87fae5ead760
#: ../../ref/contrib/gis/tutorial.txt:587
msgid ""
"The ``pnt_wkt`` string represents the point at -95.3385 degrees longitude, "
"29.7245 degrees latitude.  The geometry is in a format known as Well Known "
"Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). [#]_  "
"Import the ``WorldBorder`` model, and perform a ``contains`` lookup using "
"the ``pnt_wkt`` as the parameter::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:597
msgid ""
"Here, you retrieved a ``QuerySet`` with only one model: the border of the "
"United States (exactly what you would expect)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:600
msgid ""
"Similarly, you may also use a :doc:`GEOS geometry object <geos>`. Here, you "
"can combine the ``intersects`` spatial lookup with the ``get`` method to "
"retrieve only the ``WorldBorder`` instance for San Marino instead of a "
"queryset::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:610
msgid ""
"The ``contains`` and ``intersects`` lookups are just a subset of the "
"available queries -- the :doc:`db-api` documentation has more."
msgstr ""

# 5b7526dc9e3744d793b19d8953c666a7
#: ../../ref/contrib/gis/tutorial.txt:614
msgid "Automatic Spatial Transformations"
msgstr ""

# 2813f09c704d40f0b1f3381a391e575e
#: ../../ref/contrib/gis/tutorial.txt:615
msgid ""
"When doing spatial queries, GeoDjango automatically transforms geometries if "
"they're in a different coordinate system.  In the following example, "
"coordinates will be expressed in `EPSG SRID 32140`__, a coordinate system "
"specific to south Texas **only** and in units of **meters**, not degrees::"
msgstr ""

# 190e17e8f8ec4923b00463aa558ce58d
#: ../../ref/contrib/gis/tutorial.txt:624
msgid ""
"Note that ``pnt`` may also be constructed with EWKT, an \"extended\" form of "
"WKT that includes the SRID::"
msgstr ""

# fa4a00202be0452cb652aeeddaff29ca
#: ../../ref/contrib/gis/tutorial.txt:629
msgid ""
"GeoDjango's ORM will automatically wrap geometry values in transformation "
"SQL, allowing the developer to work at a higher level of abstraction::"
msgstr ""

# c7abb8e1277a4130956744ae51cbe7fe
#: ../../ref/contrib/gis/tutorial.txt:646
msgid "Raw queries"
msgstr ""

# 239899afb1984f0b8f8e96d641d951fa
#: ../../ref/contrib/gis/tutorial.txt:648
msgid ""
"When using :doc:`raw queries </topics/db/sql>`, you should generally wrap "
"your geometry fields with the ``asText()`` SQL function (or ``ST_AsText`` "
"for PostGIS) so that the field value will be recognized by GEOS::"
msgstr ""

# b7436a84be2149af99680bfd4122a6a7
#: ../../ref/contrib/gis/tutorial.txt:654
msgid ""
"This is not absolutely required by PostGIS, but generally you should only "
"use raw queries when you know exactly what you are doing."
msgstr ""

# 0e6a3fca8e2e40338b1cf4ab62237ba5
#: ../../ref/contrib/gis/tutorial.txt:658
msgid "Lazy Geometries"
msgstr ""

# 17bde1e5fb034a2d97568c987ec46145
#: ../../ref/contrib/gis/tutorial.txt:659
msgid ""
"GeoDjango loads geometries in a standardized textual representation.  When "
"the geometry field is first accessed, GeoDjango creates a `GEOS geometry "
"object <ref-geos>`, exposing powerful functionality, such as serialization "
"properties for popular geospatial formats::"
msgstr ""

# cbda856035a544aeb5f8f0337db2c449
#: ../../ref/contrib/gis/tutorial.txt:674
msgid ""
"This includes access to all of the advanced geometric operations provided by "
"the GEOS library::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:684
msgid "Geographic annotations"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:686
msgid ""
"GeoDjango also offers a set of geographic annotations to compute distances "
"and several other operations (intersection, difference, etc.). See the :doc:"
"`functions` documentation."
msgstr ""

# b995121fc4004533b9989ed2939a13cf
#: ../../ref/contrib/gis/tutorial.txt:692
msgid "Putting your data on the map"
msgstr ""

# 3d008998c2584de488bc743167385bbb
#: ../../ref/contrib/gis/tutorial.txt:695
msgid "Geographic Admin"
msgstr ""

# 4a6bd5f85e254f7eaed060daf24fcc44
#: ../../ref/contrib/gis/tutorial.txt:697
msgid ""
"GeoDjango extends :doc:`Django's admin application </ref/contrib/admin/"
"index>` with support for editing geometry fields."
msgstr ""

# 5dacd129694a4a4ea2ca34e1a68334fa
#: ../../ref/contrib/gis/tutorial.txt:701
msgid "Basics"
msgstr ""

# 220a0e20542a43f484e1c87cc56181d9
#: ../../ref/contrib/gis/tutorial.txt:703
msgid ""
"GeoDjango also supplements the Django admin by allowing users to create and "
"modify geometries on a JavaScript slippy map (powered by `OpenLayers`_)."
msgstr ""

# 0b339de954e2447cbf8b7fcb8883de1e
#: ../../ref/contrib/gis/tutorial.txt:706
msgid ""
"Let's dive right in.  Create a file called ``admin.py`` inside the ``world`` "
"application with the following code::"
msgstr ""

# 6526afa513fb49888a87ce88e708f127
#: ../../ref/contrib/gis/tutorial.txt:714
msgid ""
"Next, edit your ``urls.py`` in the ``geodjango`` application folder as "
"follows::"
msgstr ""

# 30689fcafeb44e14836120e3530ca16d
#: ../../ref/contrib/gis/tutorial.txt:723
msgid "Create an admin user:"
msgstr ""

# 729a0f13dc3e4fbfb87882dd56a15c23
#: ../../ref/contrib/gis/tutorial.txt:729
msgid "Next, start up the Django development server:"
msgstr ""

# 9f2d2aa3963d468b8bb4c2c78c76a78c
#: ../../ref/contrib/gis/tutorial.txt:735
msgid ""
"Finally, browse to ``http://localhost:8000/admin/``, and log in with the "
"user you just created. Browse to any of the ``WorldBorder`` entries -- the "
"borders may be edited by clicking on a polygon and dragging the vertexes to "
"the desired position."
msgstr ""

# cba0ba3f078a4b598f7a5c90a86892f1
#: ../../ref/contrib/gis/tutorial.txt:748
msgid "``OSMGeoAdmin``"
msgstr ""

# e35dabe9e6e043e6ad8e8a92655a511c
#: ../../ref/contrib/gis/tutorial.txt:750
msgid ""
"With the :class:`~django.contrib.gis.admin.OSMGeoAdmin`, GeoDjango uses a "
"`Open Street Map`_ layer in the admin. This provides more context (including "
"street and thoroughfare details) than available with the :class:`~django."
"contrib.gis.admin.GeoModelAdmin` (which uses the `Vector Map Level 0`_ WMS "
"dataset hosted at `OSGeo`_)."
msgstr ""

# c0e023a040a14a90873e9328b8db701f
#: ../../ref/contrib/gis/tutorial.txt:756
msgid "First, there are some important requirements:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:758
msgid ""
":class:`~django.contrib.gis.admin.OSMGeoAdmin` requires that :doc:`GDAL "
"<gdal>` is installed."
msgstr ""

# b6fcff60773e48548278a13c8cff8cb2
#: ../../ref/contrib/gis/tutorial.txt:761
msgid ""
"The PROJ.4 datum shifting files must be installed (see the :ref:`PROJ.4 "
"installation instructions <proj4>` for more details)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:764
msgid ""
"If you meet this requirement, then just substitute the ``OSMGeoAdmin`` "
"option class in your ``admin.py`` file::"
msgstr ""

# a8de42e21fec436893e8c37229ea8395
#: ../../ref/contrib/gis/tutorial.txt:770
msgid "Footnotes"
msgstr ""

# c9a948e98e1f4f0f87d7bf8d2399e0fd
#: ../../ref/contrib/gis/tutorial.txt:771
msgid ""
"Special thanks to Bjørn Sandvik of `thematicmapping.org <http://"
"thematicmapping.org>`_ for providing and maintaining this dataset."
msgstr ""

# 4b69b429330846799e3e6630dbc9ac2a
#: ../../ref/contrib/gis/tutorial.txt:774
msgid ""
"GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and "
"Christopher Schmidt."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:776
msgid ""
"This point is the `University of Houston Law Center <https://www.law.uh.edu/"
">`_."
msgstr ""

# 02796a94146d40688049b1156b2a2ada
#: ../../ref/contrib/gis/tutorial.txt:778
msgid ""
"Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For "
"SQL <http://www.opengeospatial.org/standards/sfs>`_."
msgstr ""
