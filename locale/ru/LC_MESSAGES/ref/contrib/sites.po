# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# Viktor Tyshchenko <tyvik8@gmail.com>, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2017-11-16 14:18+0200\n"
"Last-Translator: Viktor Tyshchenko <tyvik8@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 0c0612d66dfa45dd98ff9f185af77cbe
#: ../../ref/contrib/sites.txt:3
msgid "The \"sites\" framework"
msgstr "Фреймворк для сайтов"

# 55deab3a094a4a9fb7bc4be666c6a937
#: ../../ref/contrib/sites.txt:9
msgid ""
"Django comes with an optional \"sites\" framework. It's a hook for "
"associating objects and functionality to particular websites, and it's a "
"holding place for the domain names and \"verbose\" names of your Django-"
"powered sites."
msgstr ""
"Django поставляется с опциональным фреймворком для поддержки нескольких "
"сайтов. Это позволяет держать некоторые объекты и функциональность в одном "
"месте в то же время разделяя по сайтам, используя разные доменные имена и "
"названия Django-сайтов."

# 085dc434e09a4392889436a8becf0127
#: ../../ref/contrib/sites.txt:13
msgid ""
"Use it if your single Django installation powers more than one site and you "
"need to differentiate between those sites in some way."
msgstr ""
"Если в рамках одной установки Django требуется разрабатывать более чем один "
"сайт с отличающейся функциональностью, то как раз для этого случая и был "
"разработан фреймворк для сайтов."

# e26506797e3a495da37ea3c55e593bce
#: ../../ref/contrib/sites.txt:16
msgid "The sites framework is mainly based on a simple model:"
msgstr "Поддержка сайтов базируется в основном на простой модели:"

#: ../../ref/contrib/sites.txt:20
msgid ""
"A model for storing the ``domain`` and ``name`` attributes of a website."
msgstr "Модель для хранения атрибутов ``domain`` и ``name`` сайта."

# cd846d47b6b34bdb8d715114d6e0f488
#: ../../ref/contrib/sites.txt:24
msgid ""
"The fully qualified domain name associated with the website. For example, "
"``www.example.com``."
msgstr ""
"Доменное имя, ассоциированное с данным сайтом. Например ``www.example.com``."

# dd2cd2d001204b5da24092efcc43dfa9
#: ../../ref/contrib/sites.txt:29
msgid "A human-readable \"verbose\" name for the website."
msgstr "Название сайта."

#: ../../ref/contrib/sites.txt:31
msgid ""
"The :setting:`SITE_ID` setting specifies the database ID of the :class:"
"`~django.contrib.sites.models.Site` object associated with that particular "
"settings file. If the setting is omitted, the :func:`~django.contrib.sites."
"shortcuts.get_current_site` function will try to get the current site by "
"comparing the :attr:`~django.contrib.sites.models.Site.domain` with the host "
"name from the :meth:`request.get_host() <django.http.HttpRequest.get_host>` "
"method."
msgstr ""
"Настройка :setting:`SITE_ID` указывает ID объекта :class:`~django.contrib."
"sites.models.Site` в базе данных, который связан с текущими настройками и "
"установленным проектом. Если эта настройка не указана, функция :func:"
"`~django.contrib.sites.shortcuts.get_current_site` попытается получить "
"текущий сайт, сравнивая :attr:`~django.contrib.sites.models.Site.domain` с "
"именем хоста, которое возвращает метод :meth:`request.get_host() <django."
"http.HttpRequest.get_host>`."

# c996bea52406404a978e5d9b1a58a634
#: ../../ref/contrib/sites.txt:39
msgid ""
"How you use this is up to you, but Django uses it in a couple of ways "
"automatically via simple conventions."
msgstr ""
"Как использовать данную модель решать вам, но Django предоставляет несколько "
"способов взаимодействия через соглашения."

# 4e1b7db1e77249abbe8aa69fcc9c7af1
#: ../../ref/contrib/sites.txt:43
msgid "Example usage"
msgstr "Пример использования"

# b168e72d4cd243f3a3e6132056997a8d
#: ../../ref/contrib/sites.txt:45
msgid "Why would you use sites? It's best explained through examples."
msgstr "Для наглядности продемонстрируем сей механизм на нескольких примерах."

# 3c5491d672f34816ab3012e133597e33
#: ../../ref/contrib/sites.txt:48
msgid "Associating content with multiple sites"
msgstr "Связь контента с несколькими сайтами"

# 4fc5742b85ce4cf9a177367c44ecf655
#: ../../ref/contrib/sites.txt:50
msgid ""
"The Django-powered sites LJWorld.com_ and Lawrence.com_ are operated by the "
"same news organization -- the Lawrence Journal-World newspaper in Lawrence, "
"Kansas. LJWorld.com focuses on news, while Lawrence.com focuses on local "
"entertainment. But sometimes editors want to publish an article on *both* "
"sites."
msgstr ""
"Сайты газеты Lawrence Journal-World LJWorld.com_ и Lawrence.com_ написаны на "
"Django. LJWorld.com ориентирован на освещение глобальных событий, в то время "
"как Lawrence.com фокусируется на местных. Время от времени возникает "
"необходимость публиковать статьи на *обе* площадки."

# d01541d5b4a4454195bc39628eec1cdb
#: ../../ref/contrib/sites.txt:56
msgid ""
"The naive way of solving the problem would be to require site producers to "
"publish the same story twice: once for LJWorld.com and again for Lawrence."
"com. But that's inefficient for site producers, and it's redundant to store "
"multiple copies of the same story in the database."
msgstr ""
"Решение в лоб - заставлять контент-менеджеров публиковать статьи дважды: и в "
"LJWorld.com, и в Lawrence.com. Это неудобно не только для людей, но и для "
"железа - придётся хранить в БД 2 одинаковых записи."

# 36932193774a4be6831904a60c195110
#: ../../ref/contrib/sites.txt:61
msgid ""
"The better solution is simple: Both sites use the same article database, and "
"an article is associated with one or more sites. In Django model "
"terminology, that's represented by a :class:`~django.db.models."
"ManyToManyField` in the ``Article`` model::"
msgstr ""
"Если чуть-чуть подумать то можно реализовать более гибкое и в то же время "
"простое решение: оба сайта используют одну и ту же базу статей, каждая из "
"кторых связана с одним или более сайтом. В Django это реализуется через :"
"class:`~django.db.models.ManyToManyField` в модели ``Article``::"

# c13822faf3e047959594ee45eafccc2f
#: ../../ref/contrib/sites.txt:74
msgid "This accomplishes several things quite nicely:"
msgstr "Это решение достаточно красиво:"

# 0ae62f9a5f1a4ebe95d5c8c0f8fe237e
#: ../../ref/contrib/sites.txt:76
msgid ""
"It lets the site producers edit all content -- on both sites -- in a single "
"interface (the Django admin)."
msgstr ""
"Позволяет редактировать контент двух сайтов в одном интерфейсе (админке "
"Django)."

# 1d409704b50d429a9f93130e0bc780f0
#: ../../ref/contrib/sites.txt:79
msgid ""
"It means the same story doesn't have to be published twice in the database; "
"it only has a single record in the database."
msgstr "Позволяет избежать избыточности в плане хранения записей в БД."

# 5770f27dcf0b4578bbb3316d6c873908
#: ../../ref/contrib/sites.txt:82
msgid ""
"It lets the site developers use the same Django view code for both sites. "
"The view code that displays a given story just checks to make sure the "
"requested story is on the current site. It looks something like this::"
msgstr ""
"Позволяет разработчикам сайтов использовать один и тот же код для двух "
"сайтов. Код представления лишь проверяет надо ли выводить данную статью на "
"текущем сайте. Например, как-нибудь так:"

# a332766c1f7d41989e734cd7395ebe74
#: ../../ref/contrib/sites.txt:99
msgid "Associating content with a single site"
msgstr "Связь контента с одним сайтом"

# 29db2f054ed74bd69b4591ff7d042cea
#: ../../ref/contrib/sites.txt:101
msgid ""
"Similarly, you can associate a model to the :class:`~django.contrib.sites."
"models.Site` model in a many-to-one relationship, using :class:`~django.db."
"models.ForeignKey`."
msgstr ""
"Кроме того вы можете связать свои модели с :class:`~django.contrib.sites."
"models.Site` через отношение один-ко-многим, используя :class:`~django.db."
"models.ForeignKey`."

# fe7382ec336e4e959eb38ae5a5a0d3dd
#: ../../ref/contrib/sites.txt:106
msgid ""
"For example, if an article is only allowed on a single site, you'd use a "
"model like this::"
msgstr ""
"Например, если статья должна быть доступна только на одном сайте, то вы "
"можете использовать следующую модель::"

# db89c0d667c4406bbff3a8a19e89d0a1
#: ../../ref/contrib/sites.txt:117
msgid "This has the same benefits as described in the last section."
msgstr "Она имеет преимущества, описанные выше."

# b3b0c4e402fd41bf88f19abd95b99efd
#: ../../ref/contrib/sites.txt:122
msgid "Hooking into the current site from views"
msgstr "Получение значения текущего сайта в представлении"

# 3172488a05964883b22c75865dac6d0d
#: ../../ref/contrib/sites.txt:124
msgid ""
"You can use the sites framework in your Django views to do particular things "
"based on the site in which the view is being called. For example::"
msgstr ""
"Вы можете использовать фреймворк для построения сайтов в представлениях для "
"выполнения конкретных вещей, необходимых лишь для текущего, например::"

# e7b014b7bf41468c9789e782fec5a217
#: ../../ref/contrib/sites.txt:138
msgid ""
"Of course, it's ugly to hard-code the site IDs like that. This sort of hard-"
"coding is best for hackish fixes that you need done quickly. The cleaner way "
"of accomplishing the same thing is to check the current site's domain::"
msgstr ""
"Конечно, это ужачный пример завязки на ID сайта который подходит только для "
"мелких исправлений, которые надо выполнить быстро. Гораздо лучше проверять "
"доменное имя::"

# 67fdcc6b5d904057b88090f386609ccf
#: ../../ref/contrib/sites.txt:154
msgid ""
"This has also the advantage of checking if the sites framework is installed, "
"and return a :class:`~django.contrib.sites.requests.RequestSite` instance if "
"it is not."
msgstr ""
"Преимущество в том, что даже если описываемая функциональность Django и не "
"задействована, всё равно вернётся экземпляр :class:`RequestSite`."

# 980d603b8a5f4de9b3cc1c244b29e0bf
#: ../../ref/contrib/sites.txt:158
msgid ""
"If you don't have access to the request object, you can use the "
"``get_current()`` method of the :class:`~django.contrib.sites.models.Site` "
"model's manager. You should then ensure that your settings file does contain "
"the :setting:`SITE_ID` setting. This example is equivalent to the previous "
"one::"
msgstr ""
"Если у вас нет доступа к объекту запроса, можно получить текущий сайт через "
"метод ``get_current()`` класса :class:`~django.contrib.sites.models.Site`. В "
"этом случае надо быть уверенным, что задана константа :setting:`SITE_ID`. "
"Этот пример эквивалентен предыдущему::"

# 4c3f29785c9f4564b03adb9130435122
#: ../../ref/contrib/sites.txt:175
msgid "Getting the current domain for display"
msgstr "Получение текущего домена для отображения"

# 74218506b1d54dd384d2b6841608f5fb
#: ../../ref/contrib/sites.txt:177
msgid ""
"LJWorld.com and Lawrence.com both have email alert functionality, which lets "
"readers sign up to get notifications when news happens. It's pretty basic: A "
"reader signs up on a Web form and immediately gets an email saying, \"Thanks "
"for your subscription.\""
msgstr ""
"LJWorld.com и Lawrence.com имеют функциональность по рассылке уведомлений, "
"которая позволяет читателям получать уведомления. Самый простой пример: "
"читатель заполняет форму, и ему тут же приходит письмо \"Спасибо, что "
"подписались.\""

# d339645d70894c7e90068441ee6d02ce
#: ../../ref/contrib/sites.txt:182
msgid ""
"It'd be inefficient and redundant to implement this sign up processing code "
"twice, so the sites use the same code behind the scenes. But the \"thank you "
"for signing up\" notice needs to be different for each site. By using :class:"
"`~django.contrib.sites.models.Site` objects, we can abstract the \"thank you"
"\" notice to use the values of the current site's :attr:`~django.contrib."
"sites.models.Site.name` and :attr:`~django.contrib.sites.models.Site.domain`."
msgstr ""
"Было бы избыточным реализовывать этот механизм дважды, так что в реальности "
"выполняется один и тот же код. Однако, сообщение должно быть разным для "
"сайтов. Используя объект :class:`~django.contrib.sites.models.Site` мы можем "
"подставить соответствующие :attr:`~django.contrib.sites.models.Site.name` и :"
"attr:`~django.contrib.sites.models.Site.domain`."

# 1c3414014da64556a43132d70d49ec94
#: ../../ref/contrib/sites.txt:190
msgid "Here's an example of what the form-handling view looks like::"
msgstr "Покажем это на примере::"

# d0e1f6683a9e413984999a379e5b185b
#: ../../ref/contrib/sites.txt:211
msgid ""
"On Lawrence.com, this email has the subject line \"Thanks for subscribing to "
"lawrence.com alerts.\" On LJWorld.com, the email has the subject \"Thanks "
"for subscribing to LJWorld.com alerts.\" Same goes for the email's message "
"body."
msgstr ""
"Для Lawrence.com письмо будет содержать строку \"Thanks for subscribing to "
"lawrence.com alerts.\", для LJWorld.com - \"Thanks for subscribing to "
"LJWorld.com alerts.\"."

# f3176b6b449d4082a7f38bba2478639c
#: ../../ref/contrib/sites.txt:215
msgid ""
"Note that an even more flexible (but more heavyweight) way of doing this "
"would be to use Django's template system. Assuming Lawrence.com and LJWorld."
"com have different template directories (:setting:`DIRS <TEMPLATES-DIRS>`), "
"you could simply farm out to the template system like so::"
msgstr ""
"Заметим, что более гибкой (но и более тяжёлой) была бы реализация через "
"шаблонизатор Django. Предполагая, что Lawrence.com и LJWorld.com имеют "
"разные пути к шаблонам (:setting:`DIRS <TEMPLATES-DIRS>`), вышло бы что-то "
"типа::"

# 5a93f0cb013148dda6d0973deeeea07c
#: ../../ref/contrib/sites.txt:233
msgid ""
"In this case, you'd have to create :file:`subject.txt` and :file:`message."
"txt` template files for both the LJWorld.com and Lawrence.com template "
"directories. That gives you more flexibility, but it's also more complex."
msgstr ""
"В этом случае нужно было бы создавать шаблоны :file:`subject.txt` и :file:"
"`message.txt` для каждого сайта. Такое решение более гибкое, но и более "
"сложное."

# 3754f0d4c34247dba57d84d455e48d8e
#: ../../ref/contrib/sites.txt:237
msgid ""
"It's a good idea to exploit the :class:`~django.contrib.sites.models.Site` "
"objects as much as possible, to remove unneeded complexity and redundancy."
msgstr ""
"Хорошей идеей будет использовать :class:`~django.contrib.sites.models.Site` "
"везде, где только можно, для удаления дублирования и упрощения кода."

# 317f154e88d44ce1b32f9e0e8b5da0dc
#: ../../ref/contrib/sites.txt:241
msgid "Getting the current domain for full URLs"
msgstr "Получение текущего домена для полного URL"

# d5f055b5963d49c0921f07df47f755a3
#: ../../ref/contrib/sites.txt:243
msgid ""
"Django's ``get_absolute_url()`` convention is nice for getting your objects' "
"URL without the domain name, but in some cases you might want to display the "
"full URL -- with ``http://`` and the domain and everything -- for an object. "
"To do this, you can use the sites framework. A simple example::"
msgstr ""
"Функция ``get_absolute_url()`` полезна для получения URL без протокола и "
"имени домена. Если же нужен полный URL, то его можно сгенерировать следующим "
"образом::"

# d4aef3c02cd746ee9b72c9024d2381dd
#: ../../ref/contrib/sites.txt:260
msgid "Enabling the sites framework"
msgstr "Включение поддержки фреймворка для сайтов"

# b4648a1ee4be419d9c9b26972f10179a
#: ../../ref/contrib/sites.txt:262
msgid "To enable the sites framework, follow these steps:"
msgstr ""
"Для того, чтобы воспользоваться описанными выше возможностями, необходимо:"

# 1615c8ed686141ac91bc9018852fcec4
#: ../../ref/contrib/sites.txt:264
msgid ""
"Add ``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting."
msgstr "Добавить ``'django.contrib.sites'`` в :setting:`INSTALLED_APPS`."

# 5058c5ba2171477ea6a6e3db563dbbfd
#: ../../ref/contrib/sites.txt:267
msgid "Define a :setting:`SITE_ID` setting::"
msgstr "Задать :setting:`SITE_ID`::"

# b01da6bae13748f0bf0dba6456dd75f9
#: ../../ref/contrib/sites.txt:271
msgid "Run :djadmin:`migrate`."
msgstr "Запустить :djadmin:`migrate`."

# 36fa4a1858f84fc5a1d94373ef241b78
#: ../../ref/contrib/sites.txt:273
msgid ""
"``django.contrib.sites`` registers a :data:`~django.db.models.signals."
"post_migrate` signal handler which creates a default site named ``example."
"com`` with the domain ``example.com``. This site will also be created after "
"Django creates the test database. To set the correct name and domain for "
"your project, you can use a :ref:`data migration <data-migrations>`."
msgstr ""
"``django.contrib.sites`` регистрирует обработчик сигнала :data:`~django.db."
"models.signals.post_migrate`, который создаёт новый сайт с именем ``example."
"com`` и доменом ``example.com``. Эта запись также будет создана после "
"инициализации тестовой БД. Для установки правильного имени и домена для "
"проекта можно воспользоваться :ref:`data migration <data-migrations>`."

# 5b500bf9ae774c43a2555a0bad2d5381
#: ../../ref/contrib/sites.txt:280
msgid ""
"In order to serve different sites in production, you'd create a separate "
"settings file with each ``SITE_ID`` (perhaps importing from a common "
"settings file to avoid duplicating shared settings) and then specify the "
"appropriate :envvar:`DJANGO_SETTINGS_MODULE` for each site."
msgstr ""
"Чтобы использовать поддержку сайтов на боевом сервере необходимо для каждого "
"``SITE_ID`` создать свой файл настроек (возможно, с импортом общих, чтобы "
"избежать дублирования) и затем указать соответствующий :envvar:"
"`DJANGO_SETTINGS_MODULE`."

# 56ba9480beaf4449b9ef8b88b6f32cb9
#: ../../ref/contrib/sites.txt:286
msgid "Caching the current ``Site`` object"
msgstr "Кеширование текущего объекта ``Site``"

# b3213c310b7e40bfb65199f81c21b60d
#: ../../ref/contrib/sites.txt:288
msgid ""
"As the current site is stored in the database, each call to ``Site.objects."
"get_current()`` could result in a database query. But Django is a little "
"cleverer than that: on the first request, the current site is cached, and "
"any subsequent call returns the cached data instead of hitting the database."
msgstr ""
"Так как текущий сайт хранится в базе данных, то каждый вызов ``Site.objects."
"get_current()`` приведёт к выполнению SQL запроса. Разработчики Django "
"позаботились об оптимизации: после первого запроса значение кешируется и в "
"дальнейшем возвращается именно оно без обращения к БД."

# d0ec45dd091b4389a8a135dd81c2e5f6
#: ../../ref/contrib/sites.txt:293
msgid ""
"If for any reason you want to force a database query, you can tell Django to "
"clear the cache using ``Site.objects.clear_cache()``::"
msgstr ""
"Если же вам нужно всё-таки выполнять запрос каждый раз, можно очистить кеш "
"путём вызова ``Site.objects.clear_cache()``::"

# d088a683522445bdb9114ed42840d057
#: ../../ref/contrib/sites.txt:309
msgid "The ``CurrentSiteManager``"
msgstr "``CurrentSiteManager``"

# 35bac8fc352e4fedbde56f662c3b854c
#: ../../ref/contrib/sites.txt:313
msgid ""
"If :class:`~django.contrib.sites.models.Site` plays a key role in your "
"application, consider using the helpful :class:`~django.contrib.sites."
"managers.CurrentSiteManager` in your model(s). It's a model :doc:`manager </"
"topics/db/managers>` that automatically filters its queries to include only "
"objects associated with the current :class:`~django.contrib.sites.models."
"Site`."
msgstr ""
"Если вы используете :class:`~django.contrib.sites.models.Site` в качестве "
"внешнего ключа в какой-либо модели, то вам пригодится класс :class:`~django."
"contrib.sites.managers.CurrentSiteManager`. Это модель :doc:`manager </"
"topics/db/managers>`, которая автоматически фильтрует запросы на "
"принадлежность к текущему :class:`~django.contrib.sites.models.Site`."

# 5058c5ba2171477ea6a6e3db563dbbfd
#: ../../ref/contrib/sites.txt:320
msgid "Mandatory :setting:`SITE_ID`"
msgstr "Обязательная настройка :setting:`SITE_ID`"

#: ../../ref/contrib/sites.txt:322
msgid ""
"The ``CurrentSiteManager`` is only usable when the :setting:`SITE_ID` "
"setting is defined in your settings."
msgstr ""
"``CurrentSiteManager`` можно использовать, только если указана настройка :"
"setting:`SITE_ID`."

# ad492f5378224f1bbd71785f539240c9
#: ../../ref/contrib/sites.txt:325
msgid ""
"Use :class:`~django.contrib.sites.managers.CurrentSiteManager` by adding it "
"to your model explicitly. For example::"
msgstr ""
"Используйте :class:`~django.contrib.sites.managers.CurrentSiteManager` для "
"добавления этой функциональности непосредственно в модель::"

# 8fcf70d0aaa740d08cc1791e65b944d5
#: ../../ref/contrib/sites.txt:340
msgid ""
"With this model, ``Photo.objects.all()`` will return all ``Photo`` objects "
"in the database, but ``Photo.on_site.all()`` will return only the ``Photo`` "
"objects associated with the current site, according to the :setting:"
"`SITE_ID` setting."
msgstr ""
"Таким образом, ``Photo.objects.all()`` вернёт все объекты ``Photo``, а "
"``Photo.on_site.all()`` только те, которые доступны на данном сайте "
"согласно :setting:`SITE_ID`."

# 9f80b91a04c64c04bb8172f9021bff02
#: ../../ref/contrib/sites.txt:344
msgid "Put another way, these two statements are equivalent::"
msgstr "Другими словами эти 2 выражения эквивалентны::"

# 64d9f83bc7ab4b078d4776361d6e1ad5
#: ../../ref/contrib/sites.txt:349
msgid ""
"How did :class:`~django.contrib.sites.managers.CurrentSiteManager` know "
"which field of ``Photo`` was the :class:`~django.contrib.sites.models.Site`? "
"By default, :class:`~django.contrib.sites.managers.CurrentSiteManager` looks "
"for a either a :class:`~django.db.models.ForeignKey` called ``site`` or a :"
"class:`~django.db.models.ManyToManyField` called ``sites`` to filter on. If "
"you use a field named something other than ``site`` or ``sites`` to identify "
"which :class:`~django.contrib.sites.models.Site` objects your object is "
"related to, then you need to explicitly pass the custom field name as a "
"parameter to :class:`~django.contrib.sites.managers.CurrentSiteManager` on "
"your model. The following model, which has a field called ``publish_on``, "
"demonstrates this::"
msgstr ""
"Каким образом :class:`~django.contrib.sites.managers.CurrentSiteManager` "
"узнаёт какое поле относится к :class:`~django.contrib.sites.models.Site`? По "
"умолчанию, :class:`~django.contrib.sites.managers.CurrentSiteManager` "
"смотрит на наличие :class:`~django.db.models.ForeignKey` с именем ``site`` "
"или :class:`~django.db.models.ManyToManyField` с именем ``sites``. Если вы "
"используете другое название поля, то ищется ссылка на :class:`~django."
"contrib.sites.models.Site`. В этом случае имя поля необходимо передать в :"
"class:`~django.contrib.sites.managers.CurrentSiteManager`. В нашем случае "
"поле названо ``publish_on``::"

# 11f49134f92f4b13bd695d59e3cb396f
#: ../../ref/contrib/sites.txt:377
msgid ""
"If you attempt to use :class:`~django.contrib.sites.managers."
"CurrentSiteManager` and pass a field name that doesn't exist, Django will "
"raise a ``ValueError``."
msgstr ""
"Если вы передадите в :class:`~django.contrib.sites.managers."
"CurrentSiteManager` несуществующее имя, то возникнет исключение "
"``ValueError``."

# 50d14bcbf68845b480f1f2880ebe659e
#: ../../ref/contrib/sites.txt:380
msgid ""
"Finally, note that you'll probably want to keep a normal (non-site-specific) "
"``Manager`` on your model, even if you use :class:`~django.contrib.sites."
"managers.CurrentSiteManager`. As explained in the :doc:`manager "
"documentation </topics/db/managers>`, if you define a manager manually, then "
"Django won't create the automatic ``objects = models.Manager()`` manager for "
"you. Also note that certain parts of Django -- namely, the Django admin site "
"and generic views -- use whichever manager is defined *first* in the model, "
"so if you want your admin site to have access to all objects (not just site-"
"specific ones), put ``objects = models.Manager()`` in your model, before you "
"define :class:`~django.contrib.sites.managers.CurrentSiteManager`."
msgstr ""
"Напомним, что модель может содержать обычный (не специфичный для сайта) "
"``Manager`` вместе с :class:`~django.contrib.sites.managers."
"CurrentSiteManager`. Это описано в :doc:`manager documentation </topics/db/"
"managers>`. Если вы зададите менеджер вручную, то Django не будет создавать "
"автоматически ``objects = models.Manager()``. Помимо всего прочего не "
"забывайте, что некоторые части Django (например, админка и обобщённые "
"представления) используют тот менеджер, который задан *первым*, так что если "
"вы хотите иметь доступ ко всем объектам (а не только специфичным для сайта), "
"определите в модели ``objects = models.Manager()`` перед :class:`~django."
"contrib.sites.managers.CurrentSiteManager`."

# e6ab9fdb1e43478b99549a1c2dcd7b10
#: ../../ref/contrib/sites.txt:395
msgid "Site middleware"
msgstr "Middleware для сайтов"

# b8e6093fb6974e289ec6bd1ac9e6213a
#: ../../ref/contrib/sites.txt:397
msgid "If you often use this pattern::"
msgstr "Если вы часто используете подобный шаблон::"

# f2466bf4bbf24d66af64467c19167049
#: ../../ref/contrib/sites.txt:405
msgid ""
"there is simple way to avoid repetitions. Add :class:`django.contrib.sites."
"middleware.CurrentSiteMiddleware` to :setting:`MIDDLEWARE`. The middleware "
"sets the ``site`` attribute on every request object, so you can use "
"``request.site`` to get the current site."
msgstr ""
"то есть простой способ избежать дублирования кода. Добавьте :class:`django."
"contrib.sites.middleware.CurrentSiteMiddleware` в :setting:`MIDDLEWARE`. "
"Таким образом для каждого объекта запроса добавится атрибут ``site`` "
"(``request.site``), который указывает на текущий сайт."

# 448b2eded383406f8f4d810c34dd5b24
#: ../../ref/contrib/sites.txt:411
msgid "How Django uses the sites framework"
msgstr "Как Django работает с сайтами"

# 33bac26368394c63bad04f8f99623c31
#: ../../ref/contrib/sites.txt:413
msgid ""
"Although it's not required that you use the sites framework, it's strongly "
"encouraged, because Django takes advantage of it in a few places. Even if "
"your Django installation is powering only a single site, you should take the "
"two seconds to create the site object with your ``domain`` and ``name``, and "
"point to its ID in your :setting:`SITE_ID` setting."
msgstr ""
"Хотя задавать сайты вовсе не обязательно, в то же время всё-таки "
"рекомендуется, т.к. Django использует эту информацию в нескольких местах. "
"Даже если вы создаёте единственный сайт, потратьте пару секунд, чтобы задать "
"``domain`` и ``name`` в базе данных и константу :setting:`SITE_ID` в "
"настройках."

# 5c526c51a40245e991023617821af28a
#: ../../ref/contrib/sites.txt:419
msgid "Here's how Django uses the sites framework:"
msgstr "Где внутри Django используются сайты:"

# e84fb8c363084a53b143157b741a6e6a
#: ../../ref/contrib/sites.txt:421
msgid ""
"In the :mod:`redirects framework <django.contrib.redirects>`, each redirect "
"object is associated with a particular site. When Django searches for a "
"redirect, it takes into account the current site."
msgstr ""
"В модуле :mod:`redirects framework <django.contrib.redirects>` каждый объект "
"перенаправления привязан к конкретному сайту. Django ищет его, учитывая "
"текущий сайт."

# 899fba552ee541bd8ce541c497c36c20
#: ../../ref/contrib/sites.txt:425
msgid ""
"In the :mod:`flatpages framework <django.contrib.flatpages>`, each flatpage "
"is associated with a particular site. When a flatpage is created, you "
"specify its :class:`~django.contrib.sites.models.Site`, and the :class:"
"`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` checks the "
"current site in retrieving flatpages to display."
msgstr ""
"В модуле :mod:`flatpages framework <django.contrib.flatpages>` каждая "
"статичная страница привязана к определённому сайту. При обращении к ней "
"создаётся :class:`~django.contrib.sites.models.Site`, который проверятеся на "
"соответствие запрашиваемому сайту в :class:`~django.contrib.flatpages."
"middleware.FlatpageFallbackMiddleware`."

# ba70d6e3549448d9a82874210b17e092
#: ../../ref/contrib/sites.txt:431
msgid ""
"In the :mod:`syndication framework <django.contrib.syndication>`, the "
"templates for ``title`` and ``description`` automatically have access to a "
"variable ``{{ site }}``, which is the :class:`~django.contrib.sites.models."
"Site` object representing the current site. Also, the hook for providing "
"item URLs will use the ``domain`` from the current :class:`~django.contrib."
"sites.models.Site` object if you don't specify a fully-qualified domain."
msgstr ""
"В модуле :mod:`syndication framework <django.contrib.syndication>` шаблон "
"для ``title`` и ``description`` автоматически получает доступ к переменной "
"``{{ site }}`` типа :class:`~django.contrib.sites.models.Site`. Также "
"поддержка URL использует ``domain`` из текущего объекта :class:`~django."
"contrib.sites.models.Site`, если не указан полный путь."

# 07d7b7e8d4274fdf82a5a791bf0155ba
#: ../../ref/contrib/sites.txt:439
msgid ""
"In the :mod:`authentication framework <django.contrib.auth>`, :class:`django."
"contrib.auth.views.LoginView` passes the current :class:`~django.contrib."
"sites.models.Site` name to the template as ``{{ site_name }}``."
msgstr ""
"В модуле :mod:`authentication framework <django.contrib.auth>` функция :func:"
"`django.contrib.auth.views.LoginView` передаёт имя текущего :class:`~django."
"contrib.sites.models.Site` в переменную шаблона ``{{ site_name }}``."

# f23ce0fd9fff46f89b857bce209a04bb
#: ../../ref/contrib/sites.txt:444
msgid ""
"The shortcut view (``django.contrib.contenttypes.views.shortcut``) uses the "
"domain of the current :class:`~django.contrib.sites.models.Site` object when "
"calculating an object's URL."
msgstr ""
"Популярные представления (``django.contrib.contenttypes.views.shortcut``) "
"используют домен текущего объекта :class:`~django.contrib.sites.models.Site` "
"для создания URL."

# 3a5d3f6899594a3fb39ea02127d62ffa
#: ../../ref/contrib/sites.txt:449
msgid ""
"In the admin framework, the \"view on site\" link uses the current :class:"
"`~django.contrib.sites.models.Site` to work out the domain for the site that "
"it will redirect to."
msgstr ""
"В админке ссылка \"view on site\" использует текущий :class:`~django.contrib."
"sites.models.Site` для генерации полного URL для перехода."

# 16aa8f12a96846debf883cf940b8448c
#: ../../ref/contrib/sites.txt:454
msgid "``RequestSite`` objects"
msgstr "Объект ``RequestSite``"

# dceb1d0a588f4927a0e90085b33daf91
#: ../../ref/contrib/sites.txt:458
msgid ""
"Some :doc:`django.contrib </ref/contrib/index>` applications take advantage "
"of the sites framework but are architected in a way that doesn't *require* "
"the sites framework to be installed in your database. (Some people don't "
"want to, or just aren't *able* to install the extra database table that the "
"sites framework requires.) For those cases, the framework provides a :class:"
"`django.contrib.sites.requests.RequestSite` class, which can be used as a "
"fallback when the database-backed sites framework is not available."
msgstr ""
"Некоторые приложения из :doc:`django.contrib </ref/contrib/index>` могут "
"воспользоваться информацией о сайтах, но спроектированы с учётом того, что "
"её может и не быть. (Некоторые люди не хотят или не могут установить "
"дополнительную таблицу.) В этом случае создаётся заглушка :class:`~django."
"contrib.sites.models.RequestSite`."

# 2353c59e1e86465eaaed2ad033483e80
#: ../../ref/contrib/sites.txt:468
msgid ""
"A class that shares the primary interface of :class:`~django.contrib.sites."
"models.Site` (i.e., it has ``domain`` and ``name`` attributes) but gets its "
"data from a Django :class:`~django.http.HttpRequest` object rather than from "
"a database."
msgstr ""
"Класс предоставляет такой же интерфейс как и :class:`~django.contrib.sites."
"models.Site` (включая атрибуты ``domain`` и ``name``), но берёт их из "
"объекта :class:`~django.http.HttpRequest`, а не из базы данных."

# 87078f042f85465986f2ac99990a6dde
#: ../../ref/contrib/sites.txt:475
msgid ""
"Sets the ``name`` and ``domain`` attributes to the value of :meth:`~django."
"http.HttpRequest.get_host`."
msgstr ""
"Задаёт ``name`` и ``domain`` для метода :meth:`~django.http.HttpRequest."
"get_host`."

# 4eabb13f42c245b3be1839dfa6b7f8c6
#: ../../ref/contrib/sites.txt:478
msgid ""
"A :class:`~django.contrib.sites.requests.RequestSite` object has a similar "
"interface to a normal :class:`~django.contrib.sites.models.Site` object, "
"except its :meth:`~django.contrib.sites.requests.RequestSite.__init__()` "
"method takes an :class:`~django.http.HttpRequest` object. It's able to "
"deduce the ``domain`` and ``name`` by looking at the request's domain. It "
"has ``save()`` and ``delete()`` methods to match the interface of :class:"
"`~django.contrib.sites.models.Site`, but the methods raise :exc:"
"`NotImplementedError`."
msgstr ""
"Объект :class:`~django.contrib.sites.models.RequestSite` имеет схожий с :"
"class:`~django.contrib.sites.models.Site` интерфейс за исключением метода :"
"meth:`~django.contrib.sites.models.RequestSite.__init__()`, который "
"принимает :class:`~django.http.HttpRequest`. Это позволяет вычислить "
"``domain`` и ``name`` на основании домена из запроса. Он имеет также методы "
"``save()`` и ``delete()``, вызов которых приведёт к исключению "
"``NotImplementedError``."

# 8e6224374bb04852921fc7f71b24bf17
#: ../../ref/contrib/sites.txt:488
msgid "``get_current_site`` shortcut"
msgstr "сокращение ``get_current_site``"

# c979340d162f4fab8146d6f2c06035f3
#: ../../ref/contrib/sites.txt:490
msgid ""
"Finally, to avoid repetitive fallback code, the framework provides a :func:"
"`django.contrib.sites.shortcuts.get_current_site` function."
msgstr ""
"Для обеспечения обратной совместимости Django предоставляет функцию `django."
"contrib.sites.shortcuts.get_current_site`."

# 214f64e143cf452fa229df5cfbbf372a
#: ../../ref/contrib/sites.txt:495
msgid ""
"A function that checks if ``django.contrib.sites`` is installed and returns "
"either the current :class:`~django.contrib.sites.models.Site` object or a :"
"class:`~django.contrib.sites.requests.RequestSite` object based on the "
"request. It looks up the current site based on :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` if the :setting:`SITE_ID` setting is not "
"defined."
msgstr ""
"Эта функция проверяет, что ``django.contrib.sites`` установлен и возвращает "
"текущий объект :class:`~django.contrib.sites.models.Site` или :class:"
"`~django.contrib.sites.requests.RequestSite`, который основан на запросе. "
"При определении текущего сайта используется :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>`, если настройка :setting:`SITE_ID` не "
"определена."

#: ../../ref/contrib/sites.txt:502
msgid ""
"Both a domain and a port may be returned by :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` when the Host header has a port "
"explicitly specified, e.g. ``example.com:80``. In such cases, if the lookup "
"fails because the host does not match a record in the database, the port is "
"stripped and the lookup is retried with the domain part only. This does not "
"apply to :class:`~django.contrib.sites.requests.RequestSite` which will "
"always use the unmodified host."
msgstr ""
"Метод :meth:`request.get_host() <django.http.HttpRequest.get_host>` может "
"вернуть домен и порт, если заголовок ``Host`` содержит явно указанный порт, "
"например ``example.com:80``. В этих случаях, если не найден ни один сайт в "
"базе данных, порт будет обрезан и выполнится поиск только по домену. Это не "
"относится к :class:`~django.contrib.sites.requests.RequestSite`, который "
"всегда использует неизменное значение хоста."

#~ msgid ""
#~ "The ``domain`` field was set to be :attr:`~django.db.models.Field.unique`."
#~ msgstr ""
#~ "Поле ``domain`` теперь содержит :attr:`~django.db.models.Field.unique`."

#~ msgid "Retrying the lookup with the port stripped was added."
#~ msgstr "Был добавлен функционал поиска сайта после обрезания порта."

#~ msgid ""
#~ "Looking up the current site based on ``request.get_host()`` was added."
#~ msgstr ""
#~ "Была добавлена возможность определить текущий сайт по ``request."
#~ "get_host()``."

# 271a653db9a941bcb78fbdf115444add
#~ msgid ""
#~ "This class used to be defined in ``django.contrib.sites.models``. The old "
#~ "import location will work until Django 1.9."
#~ msgstr ""
#~ "Этот класс определён в ``django.contrib.sites.models``. Старый путь для "
#~ "импорта будет работать до Django 1.9."

# d11434e265604a6ba266a7476b57ddc7
#~ msgid ""
#~ "This function used to be defined in ``django.contrib.sites.models``. The "
#~ "old import location will work until Django 1.9."
#~ msgstr ""
#~ "Эта функция определена в ``django.contrib.sites.models``. Старый путь для "
#~ "импорта будет работать до Django 1.9."

#~ msgid ""
#~ "This function will now lookup the current site based on :meth:`request."
#~ "get_host() <django.http.HttpRequest.get_host>` if the :setting:`SITE_ID` "
#~ "setting is not defined."
#~ msgstr ""
#~ "Эта функция теперь пытается определить текущий сайт по значению :meth:"
#~ "`request.get_host() <django.http.HttpRequest.get_host>`, если настройка :"
#~ "setting:`SITE_ID` не указана."

# 879a3377e7b1473b857b57bbdd4bd258
#~ msgid ""
#~ "A model for storing the ``domain`` and ``name`` attributes of a Web site. "
#~ "The :setting:`SITE_ID` setting specifies the database ID of the :class:"
#~ "`~django.contrib.sites.models.Site` object (accessible using the "
#~ "automatically added ``id`` attribute) associated with that particular "
#~ "settings file."
#~ msgstr ""
#~ "Модель для хранения атрибутов сайта ``domain`` и ``name``. Настройка :"
#~ "setting:`SITE_ID` задаёт ID класса :class:`~django.contrib.sites.models."
#~ "Site` (атрибут ``id`` добавляется автоматически), который ассоциирован с "
#~ "данным файлом настроек."

# 2ce5a9b9a186426ea81e75e354c39cd3
#~ msgid "In previous versions, the sites framework was enabled by default."
#~ msgstr "В предыдущих версиях Django он был включён по умолчанию."

# 9f1b5a46dc234345b35edb1503a65668
#~ msgid ""
#~ "In the comments framework, each comment is associated with a particular "
#~ "site. When a comment is posted, its :class:`~django.contrib.sites.models."
#~ "Site` is set to the current site, and when comments are listed via the "
#~ "appropriate template tag, only the comments for the current site are "
#~ "displayed."
#~ msgstr ""
#~ "В плане комментирования каждый комментарий привязан к сайту. Когда он "
#~ "сохраняется, устанавливается ссылка на текущий :class:`~django.contrib."
#~ "sites.models.Site`, а в дальнейшем показываются комментарии только для "
#~ "текущего сайта."
