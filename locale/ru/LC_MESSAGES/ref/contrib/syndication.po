# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 48749f77f3d040ad84afdbb6aec12247
#: ../../ref/contrib/syndication.txt:3
msgid "The syndication feed framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:9
msgid ""
"Django comes with a high-level syndication-feed-generating framework for "
"creating RSS_ and Atom_ feeds."
msgstr ""

# 4a1deaba5181460dac568849afd54edd
#: ../../ref/contrib/syndication.txt:12
msgid ""
"To create any syndication feed, all you have to do is write a short Python "
"class. You can create as many feeds as you want."
msgstr ""

# 5e5216a020394e93a8a7817105c50e48
#: ../../ref/contrib/syndication.txt:15
msgid ""
"Django also comes with a lower-level feed-generating API. Use this if you "
"want to generate feeds outside of a Web context, or in some other lower-"
"level way."
msgstr ""

# f1b8e7a70a0b4d819a0bd4b217bd25cc
#: ../../ref/contrib/syndication.txt:23
msgid "The high-level framework"
msgstr ""

# 0b00c71c908e4afc9e7c1902466226c0
#: ../../ref/contrib/syndication.txt:26
msgid "Overview"
msgstr ""

# 524ecbffe9bd481d92b9e2272ef62a17
#: ../../ref/contrib/syndication.txt:28
msgid ""
"The high-level feed-generating framework is supplied by the :class:`~django."
"contrib.syndication.views.Feed` class. To create a feed, write a :class:"
"`~django.contrib.syndication.views.Feed` class and point to an instance of "
"it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:35
msgid "``Feed`` classes"
msgstr ""

# 8941bd7896e5499cb2196c95827a2633
#: ../../ref/contrib/syndication.txt:37
msgid ""
"A :class:`~django.contrib.syndication.views.Feed` class is a Python class "
"that represents a syndication feed. A feed can be simple (e.g., a \"site news"
"\" feed, or a basic feed displaying the latest entries of a blog) or more "
"complex (e.g., a feed displaying all the blog entries in a particular "
"category, where the category is variable)."
msgstr ""

# 58d08185b80345d99d8319f97a03af79
#: ../../ref/contrib/syndication.txt:43
msgid ""
"Feed classes subclass :class:`django.contrib.syndication.views.Feed`. They "
"can live anywhere in your codebase."
msgstr ""

# 4de1d65715b048d19266f9b8302ab165
#: ../../ref/contrib/syndication.txt:46
msgid ""
"Instances of :class:`~django.contrib.syndication.views.Feed` classes are "
"views which can be used in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

# 250ee88b1bdc47f9a7f3a8ca72d2ce6e
#: ../../ref/contrib/syndication.txt:50
msgid "A simple example"
msgstr ""

# d79d70125c1348fc8f5942a0b018d1d8
#: ../../ref/contrib/syndication.txt:52
msgid ""
"This simple example, taken from a hypothetical police beat news site "
"describes a feed of the latest five news items::"
msgstr ""

# 4ca39ed549f74b929b1d17d58e7141ed
#: ../../ref/contrib/syndication.txt:77
msgid ""
"To connect a URL to this feed, put an instance of the Feed object in your :"
"doc:`URLconf </topics/http/urls>`. For example::"
msgstr ""

# bd46e73852d94b5ab9c7d8e7c75d5fee
#: ../../ref/contrib/syndication.txt:89
msgid "Note:"
msgstr ""

# c0d499040cf74c25a31a89410366abd5
#: ../../ref/contrib/syndication.txt:91
msgid ""
"The Feed class subclasses :class:`django.contrib.syndication.views.Feed`."
msgstr ""

# 53dfb382b7db4313b628063be236cd77
#: ../../ref/contrib/syndication.txt:93
msgid ""
"``title``, ``link`` and ``description`` correspond to the standard RSS "
"``<title>``, ``<link>`` and ``<description>`` elements, respectively."
msgstr ""

#: ../../ref/contrib/syndication.txt:97
msgid ""
"``items()`` is, a method that returns a list of objects that should be "
"included in the feed as ``<item>`` elements. Although this example returns "
"``NewsItem`` objects using Django's :doc:`object-relational mapper </ref/"
"models/querysets>`, ``items()`` doesn't have to return model instances. "
"Although you get a few bits of functionality \"for free\" by using Django "
"models, ``items()`` can return any type of object you want."
msgstr ""

# 58129e06b11544aaa25c63230a0c1b56
#: ../../ref/contrib/syndication.txt:104
msgid ""
"If you're creating an Atom feed, rather than an RSS feed, set the "
"``subtitle`` attribute instead of the ``description`` attribute. See "
"`Publishing Atom and RSS feeds in tandem`_, later, for an example."
msgstr ""

# 7e4bf3dc8468465ebbc1c220d56d109c
#: ../../ref/contrib/syndication.txt:108
msgid ""
"One thing is left to do. In an RSS feed, each ``<item>`` has a ``<title>``, "
"``<link>`` and ``<description>``. We need to tell the framework what data to "
"put into those elements."
msgstr ""

#: ../../ref/contrib/syndication.txt:112
msgid ""
"For the contents of ``<title>`` and ``<description>``, Django tries calling "
"the methods ``item_title()`` and ``item_description()`` on the :class:"
"`~django.contrib.syndication.views.Feed` class. They are passed a single "
"parameter, ``item``, which is the object itself. These are optional; by "
"default, the string representation of the object is used for both."
msgstr ""

#: ../../ref/contrib/syndication.txt:119
msgid ""
"If you want to do any special formatting for either the title or "
"description, :doc:`Django templates </ref/templates/language>` can be used "
"instead. Their paths can be specified with the ``title_template`` and "
"``description_template`` attributes on the :class:`~django.contrib."
"syndication.views.Feed` class. The templates are rendered for each item and "
"are passed two template context variables:"
msgstr ""

# 98ae7ddd128c4e0c9c342a1d1047308f
#: ../../ref/contrib/syndication.txt:126
msgid ""
"``{{ obj }}`` -- The current object (one of whichever objects you returned "
"in ``items()``)."
msgstr ""

# b0f1e346a705452eb8c6502b4b1a408a
#: ../../ref/contrib/syndication.txt:129
msgid ""
"``{{ site }}`` -- A :class:`django.contrib.sites.models.Site` object "
"representing the current site. This is useful for ``{{ site.domain }}`` or "
"``{{ site.name }}``. If you do *not* have the Django sites framework "
"installed, this will be set to a :class:`~django.contrib.sites.requests."
"RequestSite` object. See the :ref:`RequestSite section of the sites "
"framework documentation <requestsite-objects>` for more."
msgstr ""

# 243085ab54534ceba854b8d064d479c4
#: ../../ref/contrib/syndication.txt:137
msgid "See `a complex example`_ below that uses a description template."
msgstr ""

# 4ae746f55d6c47eeb84064afa0c7c933
#: ../../ref/contrib/syndication.txt:141
msgid ""
"There is also a way to pass additional information to title and description "
"templates, if you need to supply more than the two variables mentioned "
"before. You can provide your implementation of ``get_context_data`` method "
"in your ``Feed`` subclass. For example::"
msgstr ""

# afc308bf87264ec1bc55143a5f6985d3
#: ../../ref/contrib/syndication.txt:161
msgid "And the template:"
msgstr ""

# fe5865bdf9f144eeaed54acdc60d2ad0
#: ../../ref/contrib/syndication.txt:167
msgid ""
"This method will be called once per each item in the list returned by "
"``items()`` with the following keyword arguments:"
msgstr ""

# 00e4f8d0a3a44c65b3f6fa23b019f75c
#: ../../ref/contrib/syndication.txt:170
msgid ""
"``item``: the current item. For backward compatibility reasons, the name of "
"this context variable is ``{{ obj }}``."
msgstr ""

# 010c85e84e0645b29c543fe46f988049
#: ../../ref/contrib/syndication.txt:173
msgid ""
"``obj``: the object returned by ``get_object()``. By default this is not "
"exposed to the templates to avoid confusion with ``{{ obj }}`` (see above), "
"but you can use it in your implementation of ``get_context_data()``."
msgstr ""

# 5a950e679e6c4866bd30cf9b0e2952d8
#: ../../ref/contrib/syndication.txt:177
msgid "``site``: current site as described above."
msgstr ""

# 7c647ee4159b4585bc5b3c5e78fb0877
#: ../../ref/contrib/syndication.txt:179
msgid "``request``: current request."
msgstr ""

# f21070280d7b422895a2a124c6f314d5
#: ../../ref/contrib/syndication.txt:181
msgid ""
"The behavior of ``get_context_data()`` mimics that of :ref:`generic views "
"<adding-extra-context>` - you're supposed to call ``super()`` to retrieve "
"context data from parent class, add your data and return the modified "
"dictionary."
msgstr ""

# ed76d664f9b44a339fe66fb49dbe1fd0
#: ../../ref/contrib/syndication.txt:186
msgid ""
"To specify the contents of ``<link>``, you have two options. For each item "
"in ``items()``, Django first tries calling the ``item_link()`` method on "
"the :class:`~django.contrib.syndication.views.Feed` class. In a similar way "
"to the title and description, it is passed it a single parameter, ``item``. "
"If that method doesn't exist, Django tries executing a "
"``get_absolute_url()`` method on that object. Both ``get_absolute_url()`` "
"and ``item_link()`` should return the item's URL as a normal Python string. "
"As with ``get_absolute_url()``, the result of ``item_link()`` will be "
"included directly in the URL, so you are responsible for doing all necessary "
"URL quoting and conversion to ASCII inside the method itself."
msgstr ""

# c43dde97166c4f44af5ace24cfc32ddf
#: ../../ref/contrib/syndication.txt:200
msgid "A complex example"
msgstr ""

# 095036e294a04dba8cf4cd45441d720b
#: ../../ref/contrib/syndication.txt:202
msgid "The framework also supports more complex feeds, via arguments."
msgstr ""

# 0bf511ce046e441ea23f2277dbaeed83
#: ../../ref/contrib/syndication.txt:204
msgid ""
"For example, a website could offer an RSS feed of recent crimes for every "
"police beat in a city. It'd be silly to create a separate :class:`~django."
"contrib.syndication.views.Feed` class for each police beat; that would "
"violate the :ref:`DRY principle <dry>` and would couple data to programming "
"logic. Instead, the syndication framework lets you access the arguments "
"passed from your :doc:`URLconf </topics/http/urls>` so feeds can output "
"items based on information in the feed's URL."
msgstr ""

# 5e44c186782341eb8efba2e74cb42099
#: ../../ref/contrib/syndication.txt:212
msgid "The police beat feeds could be accessible via URLs like this:"
msgstr ""

# 57416efaecfd424dbb0d239e9b192908
#: ../../ref/contrib/syndication.txt:214
msgid ":file:`/beats/613/rss/` -- Returns recent crimes for beat 613."
msgstr ""

# ca42922af8c6431995facc87e51f6de6
#: ../../ref/contrib/syndication.txt:215
msgid ":file:`/beats/1424/rss/` -- Returns recent crimes for beat 1424."
msgstr ""

# 50f52fee35384bf6b4cfdb3c3d4ffaf9
#: ../../ref/contrib/syndication.txt:217
msgid ""
"These can be matched with a :doc:`URLconf </topics/http/urls>` line such as::"
msgstr ""

# 48c84791e9aa4690b6e889e6221c5806
#: ../../ref/contrib/syndication.txt:221
msgid ""
"Like a view, the arguments in the URL are passed to the ``get_object()`` "
"method along with the request object."
msgstr ""

# 8f009c9f594a4f249b3628fb45c64a95
#: ../../ref/contrib/syndication.txt:224
msgid "Here's the code for these beat-specific feeds::"
msgstr ""

#: ../../ref/contrib/syndication.txt:246
msgid ""
"To generate the feed's ``<title>``, ``<link>`` and ``<description>``, Django "
"uses the ``title()``, ``link()`` and ``description()`` methods. In the "
"previous example, they were string class attributes, but this example "
"illustrates that they can be either strings *or* methods. For each of "
"``title``, ``link`` and ``description``, Django follows this algorithm:"
msgstr ""

# 8b2ce0a301d540d296bc8ff19de42ef5
#: ../../ref/contrib/syndication.txt:253
msgid ""
"First, it tries to call a method, passing the ``obj`` argument, where "
"``obj`` is the object returned by ``get_object()``."
msgstr ""

# edfa5d175bad46a785f243b932de2891
#: ../../ref/contrib/syndication.txt:256
msgid "Failing that, it tries to call a method with no arguments."
msgstr ""

# 521a6f658042418bac181708ac8a9f3b
#: ../../ref/contrib/syndication.txt:258
msgid "Failing that, it uses the class attribute."
msgstr ""

# 099269bd7d2c47fda21c74c26c00b52f
#: ../../ref/contrib/syndication.txt:260
msgid ""
"Also note that ``items()`` also follows the same algorithm -- first, it "
"tries ``items(obj)``, then ``items()``, then finally an ``items`` class "
"attribute (which should be a list)."
msgstr ""

#: ../../ref/contrib/syndication.txt:264
msgid ""
"We are using a template for the item descriptions. It can be as minimal as "
"this:"
msgstr ""

# c93e6bc646fc459ea6727cd8a484d653
#: ../../ref/contrib/syndication.txt:271
msgid "However, you are free to add formatting as desired."
msgstr ""

# 46dbba2b4aae4191bfc0f18615fa39ea
#: ../../ref/contrib/syndication.txt:273
msgid ""
"The ``ExampleFeed`` class below gives full documentation on methods and "
"attributes of :class:`~django.contrib.syndication.views.Feed` classes."
msgstr ""

# 0b0468318022445cbbce955eaf632a39
#: ../../ref/contrib/syndication.txt:277
msgid "Specifying the type of feed"
msgstr ""

# 7400ac1ea18f4451b131aea816f0f01c
#: ../../ref/contrib/syndication.txt:279
msgid "By default, feeds produced in this framework use RSS 2.0."
msgstr ""

# ebfb86b0010a41e6bf7460d555799132
#: ../../ref/contrib/syndication.txt:281
msgid ""
"To change that, add a ``feed_type`` attribute to your :class:`~django."
"contrib.syndication.views.Feed` class, like so::"
msgstr ""

# 0c1e81cb7a9e48dd8887dbb375ffab13
#: ../../ref/contrib/syndication.txt:289
msgid "Note that you set ``feed_type`` to a class object, not an instance."
msgstr ""

# acc825bcb8bc4f82b0e872d25a9dae4b
#: ../../ref/contrib/syndication.txt:291
msgid "Currently available feed types are:"
msgstr ""

# afeceb06e9634b6f88ec19944b547035
#: ../../ref/contrib/syndication.txt:293
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed` (RSS 2.01. Default.)"
msgstr ""

# c119551321874bcbb0a260e8a68d8efa
#: ../../ref/contrib/syndication.txt:294
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed` (RSS 0.91.)"
msgstr ""

# eeb42da8ed94458ab3ffa22a7406678f
#: ../../ref/contrib/syndication.txt:295
msgid ":class:`django.utils.feedgenerator.Atom1Feed` (Atom 1.0.)"
msgstr ""

# 5b75671c1b584106baaedf53309e73c3
#: ../../ref/contrib/syndication.txt:298
msgid "Enclosures"
msgstr ""

#: ../../ref/contrib/syndication.txt:300
msgid ""
"To specify enclosures, such as those used in creating podcast feeds, use the "
"``item_enclosures`` hook or, alternatively and if you only have a single "
"enclosure per item, the ``item_enclosure_url``, ``item_enclosure_length``, "
"and ``item_enclosure_mime_type`` hooks. See the ``ExampleFeed`` class below "
"for usage examples."
msgstr ""

# 6e7f51fbe76a47c0babff6a04850b2d5
#: ../../ref/contrib/syndication.txt:307
msgid "Language"
msgstr ""

#: ../../ref/contrib/syndication.txt:309
msgid ""
"Feeds created by the syndication framework automatically include the "
"appropriate ``<language>`` tag (RSS 2.0) or ``xml:lang`` attribute (Atom). "
"By default, this is :func:`django.utils.translation.get_language()`. You can "
"change it by setting the ``language`` class attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:316
msgid ""
"The ``language`` class attribute was added. In older versions, the behavior "
"is the same as ``language = settings.LANGUAGE_CODE``."
msgstr ""

# 67e9c6020d4747cf8e95d11d4407cd67
#: ../../ref/contrib/syndication.txt:320
msgid "URLs"
msgstr ""

#: ../../ref/contrib/syndication.txt:322
msgid ""
"The ``link`` method/attribute can return either an absolute path (e.g. :file:"
"`\"/blog/\"`) or a URL with the fully-qualified domain and protocol (e.g. ``"
"\"https://www.example.com/blog/\"``). If ``link`` doesn't return the domain, "
"the syndication framework will insert the domain of the current site, "
"according to your :setting:`SITE_ID setting <SITE_ID>`."
msgstr ""

# 51862f05d7a747418c0817447b8821a5
#: ../../ref/contrib/syndication.txt:328
msgid ""
"Atom feeds require a ``<link rel=\"self\">`` that defines the feed's current "
"location. The syndication framework populates this automatically, using the "
"domain of the current site according to the :setting:`SITE_ID` setting."
msgstr ""

# aea43e32384647b39b985837f751e48d
#: ../../ref/contrib/syndication.txt:333
msgid "Publishing Atom and RSS feeds in tandem"
msgstr ""

#: ../../ref/contrib/syndication.txt:335
msgid ""
"Some developers like to make available both Atom *and* RSS versions of their "
"feeds. To do that, you can create a subclass of your :class:`~django.contrib."
"syndication.views.Feed` class and set the ``feed_type`` to something "
"different. Then update your URLconf to add the extra versions."
msgstr ""

# 28658e766e6240749c4c70591ff2c50c
#: ../../ref/contrib/syndication.txt:340
msgid "Here's a full example::"
msgstr ""

# 999420c928594a36bf417d18f0ea7f89
#: ../../ref/contrib/syndication.txt:359
msgid ""
"In this example, the RSS feed uses a ``description`` while the Atom feed "
"uses a ``subtitle``. That's because Atom feeds don't provide for a feed-"
"level \"description,\" but they *do* provide for a \"subtitle.\""
msgstr ""

# c5d8f6944c824e0a88cc2b9103a02bfa
#: ../../ref/contrib/syndication.txt:363
msgid ""
"If you provide a ``description`` in your :class:`~django.contrib.syndication."
"views.Feed` class, Django will *not* automatically put that into the "
"``subtitle`` element, because a subtitle and description are not necessarily "
"the same thing. Instead, you should define a ``subtitle`` attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:369
msgid ""
"In the above example, we set the Atom feed's ``subtitle`` to the RSS feed's "
"``description``, because it's quite short already."
msgstr ""

# 328f6052bc264c24a0f7ac2824a6707e
#: ../../ref/contrib/syndication.txt:372
msgid "And the accompanying URLconf::"
msgstr ""

#: ../../ref/contrib/syndication.txt:385
msgid "``Feed`` class reference"
msgstr ""

# 8fefb1d980564119b94b76daee1e61fe
#: ../../ref/contrib/syndication.txt:389
msgid ""
"This example illustrates all possible attributes and methods for a :class:"
"`~django.contrib.syndication.views.Feed` class::"
msgstr ""

# 00f207167f6b44399e3f95eb80cf01bc
#: ../../ref/contrib/syndication.txt:900
msgid "The low-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:902
msgid ""
"Behind the scenes, the high-level RSS framework uses a lower-level framework "
"for generating feeds' XML. This framework lives in a single module: :source:"
"`django/utils/feedgenerator.py`."
msgstr ""

# 29452551c26a460a828a91f16b113309
#: ../../ref/contrib/syndication.txt:906
msgid ""
"You use this framework on your own, for lower-level feed generation. You can "
"also create custom feed generator subclasses for use with the ``feed_type`` "
"``Feed`` option."
msgstr ""

# 8e97c5b013294b63afbe2046f056f21e
#: ../../ref/contrib/syndication.txt:913
msgid "``SyndicationFeed`` classes"
msgstr ""

# 3fcfb2baa70e470e935af1115aed6f63
#: ../../ref/contrib/syndication.txt:915
msgid "The :mod:`~django.utils.feedgenerator` module contains a base class:"
msgstr ""

# 41dbd515c2094eacac37c170a39651a0
#: ../../ref/contrib/syndication.txt:917
msgid ":class:`django.utils.feedgenerator.SyndicationFeed`"
msgstr ""

# 3c9558652bf344dd80b94ef22818309c
#: ../../ref/contrib/syndication.txt:919
msgid "and several subclasses:"
msgstr ""

# 776a00841aaa4522bc62318303d91f13
#: ../../ref/contrib/syndication.txt:921
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed`"
msgstr ""

# 5a3311aaee5542c398f5f4ac37d45ca7
#: ../../ref/contrib/syndication.txt:922
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed`"
msgstr ""

# 30c468faba03410c9436ef3de80fdbdd
#: ../../ref/contrib/syndication.txt:923
msgid ":class:`django.utils.feedgenerator.Atom1Feed`"
msgstr ""

# 838b4a717f9549479c0ad8f2044fef3c
#: ../../ref/contrib/syndication.txt:925
msgid ""
"Each of these three classes knows how to render a certain type of feed as "
"XML. They share this interface:"
msgstr ""

#: ../../ref/contrib/syndication.txt:956
msgid ":meth:`.SyndicationFeed.__init__`"
msgstr ""

# d8cf7f5496694d85b3c26f314561bf66
#: ../../ref/contrib/syndication.txt:929
msgid ""
"Initialize the feed with the given dictionary of metadata, which applies to "
"the entire feed. Required keyword arguments are:"
msgstr ""

# f7b4b531f1fc4ff6b57281aaea3d2ab5
# 298cce1bdc0145689aaff052dc34094b
#: ../../ref/contrib/syndication.txt:932 ../../ref/contrib/syndication.txt:963
msgid "``title``"
msgstr ""

# ffe22b0937034b789694d25e6a64832f
# 5d4b194836774fa0bee147032b3b3021
#: ../../ref/contrib/syndication.txt:933 ../../ref/contrib/syndication.txt:964
msgid "``link``"
msgstr ""

# 766d91b31477478fa6da30590c26beac
# 2697c40751e943d89ab87337a702dd42
#: ../../ref/contrib/syndication.txt:934 ../../ref/contrib/syndication.txt:965
msgid "``description``"
msgstr ""

# 80a9966abdd54520b294f7058dc729ae
#: ../../ref/contrib/syndication.txt:936
msgid "There's also a bunch of other optional keywords:"
msgstr ""

# 8351d3e79f3d417ab6306baadf00d7de
#: ../../ref/contrib/syndication.txt:938
msgid "``language``"
msgstr ""

# b86c40fb74b343e88b43876986be9975
# fa5a2e7c58c14261bdf9554503968f5d
#: ../../ref/contrib/syndication.txt:939 ../../ref/contrib/syndication.txt:969
msgid "``author_email``"
msgstr ""

# 56223192a9364e24be4b11eddd171c97
# beecbc7fcef2468c90570fb19bf11fe3
#: ../../ref/contrib/syndication.txt:940 ../../ref/contrib/syndication.txt:970
msgid "``author_name``"
msgstr ""

# e917f4241945498f8a38c129407f0ba0
# f11aaa80300245d3bc0c024d49a40421
#: ../../ref/contrib/syndication.txt:941 ../../ref/contrib/syndication.txt:971
msgid "``author_link``"
msgstr ""

# 858bf921e2974e31959d0e6e7d9cc98e
#: ../../ref/contrib/syndication.txt:942
msgid "``subtitle``"
msgstr ""

# ebca2d2c3b9747f798a8b920ddf068fe
# 1f4605096ff24774bc9b394e4aec9d08
#: ../../ref/contrib/syndication.txt:943 ../../ref/contrib/syndication.txt:976
msgid "``categories``"
msgstr ""

# 68b77a0b065a4e8db6a3d2839e6696a4
#: ../../ref/contrib/syndication.txt:944
msgid "``feed_url``"
msgstr ""

# 6cf5f36f7d2143ebb07af58998304179
#: ../../ref/contrib/syndication.txt:945
msgid "``feed_copyright``"
msgstr ""

# 66d38ad17c7f4e9f83b40551f030a376
#: ../../ref/contrib/syndication.txt:946
msgid "``feed_guid``"
msgstr ""

# 72a73bc7af5d476b981f4fbffebc99aa
# 4ce0781c7b5d4bda969372c765bdc8dd
#: ../../ref/contrib/syndication.txt:947 ../../ref/contrib/syndication.txt:978
msgid "``ttl``"
msgstr ""

# 2ce2939d51d64de3aa0b70d6670c5a1d
#: ../../ref/contrib/syndication.txt:949
msgid ""
"Any extra keyword arguments you pass to ``__init__`` will be stored in "
"``self.feed`` for use with `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:952
msgid ""
"All parameters should be strings, except ``categories``, which should be a "
"sequence of strings. Beware that some control characters are `not allowed "
"<https://www.w3.org/International/questions/qa-controls>`_ in XML documents. "
"If your content has some of them, you might encounter a :exc:`ValueError` "
"when producing the feed."
msgstr ""

#: ../../ref/contrib/syndication.txt:989
msgid ":meth:`.SyndicationFeed.add_item`"
msgstr ""

# 9e780f25f7034d59b290e2754cf8b795
#: ../../ref/contrib/syndication.txt:959
msgid "Add an item to the feed with the given parameters."
msgstr ""

# 39b6b1c0d40846e282e23709514b9357
#: ../../ref/contrib/syndication.txt:961
msgid "Required keyword arguments are:"
msgstr ""

# b50070780a2a4050a9cbf8af62e0e58d
#: ../../ref/contrib/syndication.txt:967
msgid "Optional keyword arguments are:"
msgstr ""

# b0d00de7986f433b8c8b4fe0561bbc0e
#: ../../ref/contrib/syndication.txt:972
msgid "``pubdate``"
msgstr ""

# 273553ed30f84e7499663f71916fafc8
#: ../../ref/contrib/syndication.txt:973
msgid "``comments``"
msgstr ""

# c12a8151a7d64988948fb53c00de0317
#: ../../ref/contrib/syndication.txt:974
msgid "``unique_id``"
msgstr ""

#: ../../ref/contrib/syndication.txt:975
msgid "``enclosures``"
msgstr ""

# b4cdacc9bd4b48528c24f5c3f88a0ea6
#: ../../ref/contrib/syndication.txt:977
msgid "``item_copyright``"
msgstr ""

# 6ff0c887ab6f4d7180b284c757b22051
#: ../../ref/contrib/syndication.txt:979
msgid "``updateddate``"
msgstr ""

# ca388edee3964bc3a965c6e8d8300584
#: ../../ref/contrib/syndication.txt:981
msgid "Extra keyword arguments will be stored for `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:983
msgid "All parameters, if given, should be strings, except:"
msgstr ""

# 62b07f18f2024010acf4372262f239da
#: ../../ref/contrib/syndication.txt:985
msgid "``pubdate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""

# 05527deb2d1441e0b76b185aa216204f
#: ../../ref/contrib/syndication.txt:986
msgid "``updateddate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""

#: ../../ref/contrib/syndication.txt:987
msgid ""
"``enclosures`` should be a list of :class:`django.utils.feedgenerator."
"Enclosure` instances."
msgstr ""

#: ../../ref/contrib/syndication.txt:989
msgid "``categories`` should be a sequence of strings."
msgstr ""

#: ../../ref/contrib/syndication.txt:992
msgid ":meth:`.SyndicationFeed.write`"
msgstr ""

# fa84cc197ed9496c9706254417e9be85
#: ../../ref/contrib/syndication.txt:992
msgid ""
"Outputs the feed in the given encoding to outfile, which is a file-like "
"object."
msgstr ""

#: ../../ref/contrib/syndication.txt:995
msgid ":meth:`.SyndicationFeed.writeString`"
msgstr ""

# 46fb865c3a954937b6f862d0873a0f91
#: ../../ref/contrib/syndication.txt:995
msgid "Returns the feed as a string in the given encoding."
msgstr ""

# 548ffdee55714799adaa51e1db64923d
#: ../../ref/contrib/syndication.txt:997
msgid ""
"For example, to create an Atom 1.0 feed and print it to standard output::"
msgstr ""

# 8477b9715d71435bbc3510eee631e330
#: ../../ref/contrib/syndication.txt:1021
msgid "Custom feed generators"
msgstr ""

# 97e582986a5e49d69bfc60e93185d361
#: ../../ref/contrib/syndication.txt:1023
msgid ""
"If you need to produce a custom feed format, you've got a couple of options."
msgstr ""

# 118295e7947342ddb37b700d32934cac
#: ../../ref/contrib/syndication.txt:1025
msgid ""
"If the feed format is totally custom, you'll want to subclass "
"``SyndicationFeed`` and completely replace the ``write()`` and "
"``writeString()`` methods."
msgstr ""

# 31b24b9786194157976248691697c918
#: ../../ref/contrib/syndication.txt:1029
msgid ""
"However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS_, "
"Apple's `iTunes podcast format`_, etc.), you've got a better choice. These "
"types of feeds typically add extra elements and/or attributes to the "
"underlying format, and there are a set of methods that ``SyndicationFeed`` "
"calls to get these extra attributes. Thus, you can subclass the appropriate "
"feed generator class (``Atom1Feed`` or ``Rss201rev2Feed``) and extend these "
"callbacks. They are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:1041
msgid "``SyndicationFeed.root_attributes(self)``"
msgstr ""

# 08c1a20eca1c4498b2140e80fdb746d1
#: ../../ref/contrib/syndication.txt:1040
msgid ""
"Return a ``dict`` of attributes to add to the root feed element (``feed``/"
"``channel``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:1047
msgid "``SyndicationFeed.add_root_elements(self, handler)``"
msgstr ""

# d4f62ca7fc294d09b72ed55708a6edb0
#: ../../ref/contrib/syndication.txt:1044
msgid ""
"Callback to add elements inside the root feed element (``feed``/"
"``channel``). ``handler`` is an :class:`~xml.sax.saxutils.XMLGenerator` from "
"Python's built-in SAX library; you'll call methods on it to add to the XML "
"document in process."
msgstr ""

#: ../../ref/contrib/syndication.txt:1052
msgid "``SyndicationFeed.item_attributes(self, item)``"
msgstr ""

# d8319ebd376f4eeeb9bca346dd3745b5
#: ../../ref/contrib/syndication.txt:1050
msgid ""
"Return a ``dict`` of attributes to add to each item (``item``/``entry``) "
"element. The argument, ``item``, is a dictionary of all the data passed to "
"``SyndicationFeed.add_item()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:1056
msgid "``SyndicationFeed.add_item_elements(self, handler, item)``"
msgstr ""

# 4238ac904c3d478abafc9f58bf0d0df9
#: ../../ref/contrib/syndication.txt:1055
msgid ""
"Callback to add elements to each item (``item``/``entry``) element. "
"``handler`` and ``item`` are as above."
msgstr ""

# 08470d31eec34b8cb331145cd4bf72a6
#: ../../ref/contrib/syndication.txt:1060
msgid ""
"If you override any of these methods, be sure to call the superclass methods "
"since they add the required elements for each feed format."
msgstr ""

# 5f8392b1efe342f18f6103e1df05efeb
#: ../../ref/contrib/syndication.txt:1063
msgid ""
"For example, you might start implementing an iTunes RSS feed generator like "
"so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:1075
msgid ""
"There's a lot more work to be done for a complete custom feed class, but the "
"above example should demonstrate the basic idea."
msgstr ""
