# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-03 16:48+0300\n"
"PO-Revision-Date: 2015-03-25 16:12+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# daaa92296bf04e069b5afca69b908174
#: ../../ref/contrib/admin/actions.txt:3
msgid "Admin actions"
msgstr "Действия администратора"

# 644d377f471341b78155f74a92bfc6dc
#: ../../ref/contrib/admin/actions.txt:7
msgid ""
"The basic workflow of Django's admin is, in a nutshell, \"select an object, "
"then change it.\" This works well for a majority of use cases. However, if "
"you need to make the same change to many objects at once, this workflow can "
"be quite tedious."
msgstr ""
"Повседневный алгоритм работы с административным интерфейсом Django выглядит "
"как \"выделить объект, затем изменить его.\" Он подходит для большинства "
"случаев. Тем не менее, когда потребуется выполнить одно и то же действие над "
"множеством объектов, то такое поведение интерфейса начинает напрягать."

# 1aa9278ea2e84ae49f3d26d105deca2a
#: ../../ref/contrib/admin/actions.txt:12
msgid ""
"In these cases, Django's admin lets you write and register \"actions\" -- "
"simple functions that get called with a list of objects selected on the "
"change list page."
msgstr ""
"В таких случаях административный интерфейс Django позволяет вам создать и "
"зарегистрировать \"действия\" -- простые функции, которые вызываются для "
"выполнения неких действий над списком объектов, выделенных на странице "
"интерфейса."

# b3a8b5b230624e49bbb7d6e6cd7b7aa8
#: ../../ref/contrib/admin/actions.txt:16
msgid ""
"If you look at any change list in the admin, you'll see this feature in "
"action; Django ships with a \"delete selected objects\" action available to "
"all models. For example, here's the user module from Django's built-in :mod:"
"`django.contrib.auth` app:"
msgstr ""
"Если вы взгляните на любой список изменений на интерфейсе администратора, вы "
"увидите эту возможность в действии. Django поставляется с действием "
"\"удалить выделенные объекты\", которое доступно для всех моделей. Например, "
"рассмотрим пользовательский модуль из встроенного в Django приложения :mod:"
"`django.contrib.auth`:"

# b32589e851354fa68ea9e07ecc1e5e06
#: ../../ref/contrib/admin/actions.txt:25
msgid ""
"The \"delete selected objects\" action uses :meth:`QuerySet.delete() <django."
"db.models.query.QuerySet.delete>` for efficiency reasons, which has an "
"important caveat: your model's ``delete()`` method will not be called."
msgstr ""
"Действие \"удалить выделенные объекты\" использует метод :meth:`QuerySet."
"delete() <django.db.models.query.QuerySet.delete>` по соображениям "
"эффективности, который имеет важный недостаток: метод ``delete()`` вашей "
"модели не будет вызван."

# 0082bbf0bbbd4b2f9e2b5f8b9c27a1ab
#: ../../ref/contrib/admin/actions.txt:30
#, fuzzy
msgid ""
"If you wish to override this behavior, you can override :meth:`.ModelAdmin."
"delete_queryset` or write a custom action which does deletion in your "
"preferred manner -- for example, by calling ``Model.delete()`` for each of "
"the selected items."
msgstr ""
"Если вам потребуется изменить такое поведение, то просто напишите "
"собственное действие, которое выполняет удаление в необходимой вам манере, "
"например, вызывая ``Model.delete()`` для каждого выделенного элемента."

# 643a65fb5f2040edb9c05d6e2fa32cca
#: ../../ref/contrib/admin/actions.txt:35
msgid ""
"For more background on bulk deletion, see the documentation on :ref:`object "
"deletion <topics-db-queries-delete>`."
msgstr ""
"Подробности по пакетному удалению смотрите в документации по :ref:`удалению "
"объектов <topics-db-queries-delete>`."

# 4a8b1c0a801d42afa6b373b3d97e87c0
#: ../../ref/contrib/admin/actions.txt:38
msgid "Read on to find out how to add your own actions to this list."
msgstr ""
"Читайте дальше о том, как создавать собственные действия для списка объектов."

# 5872f03dd97d4de89f5def5a2b029859
#: ../../ref/contrib/admin/actions.txt:41
msgid "Writing actions"
msgstr "Создание действий"

# d20b07643fce4daab0153ca2f2bd3b83
#: ../../ref/contrib/admin/actions.txt:43
msgid "The easiest way to explain actions is by example, so let's dive in."
msgstr ""
"Простейшим способом понять работу действий является их изучение на примерах. "
"Значит, пришло время изучить их внимательнее."

# 0ad5314d206543e3ab11752032ff1267
#: ../../ref/contrib/admin/actions.txt:45
msgid ""
"A common use case for admin actions is the bulk updating of a model. Imagine "
"a simple news application with an ``Article`` model::"
msgstr ""
"Общим способом использования действий в интерфейсе администратора является "
"пакетное изменение модели. Представим простое приложение для работы с "
"новостями, которое обладает моделью ``Article``::"

# a1c2b0695d244987983e628ea79f49bb
#: ../../ref/contrib/admin/actions.txt:64
msgid ""
"A common task we might perform with a model like this is to update an "
"article's status from \"draft\" to \"published\". We could easily do this in "
"the admin one article at a time, but if we wanted to bulk-publish a group of "
"articles, it'd be tedious. So, let's write an action that lets us change an "
"article's status to \"published.\""
msgstr ""
"Стандартной задачей, которую мы возможно будем выполнять с подобной моделью, "
"будет изменение состояний статьи с \"черновик\" на \"опубликовано\". Мы "
"легко сможем выполнить это действие в интерфейсе администратора для одной "
"статьи за раз, но если потребуется выполнить массовую публикацию группы "
"статей, то вы столкнётесь с нудной работой. Таким образом, следует написать "
"действие, которое позволит нам изменять состояние статьи на \"опубликовано.\""

# 28de01ce9b73448b9d5f1f614367d757
#: ../../ref/contrib/admin/actions.txt:71
msgid "Writing action functions"
msgstr "Создание функций для действий"

# 170da40a1c7347d6b39f9f0f11e65894
#: ../../ref/contrib/admin/actions.txt:73
msgid ""
"First, we'll need to write a function that gets called when the action is "
"triggered from the admin. Action functions are just regular functions that "
"take three arguments:"
msgstr ""
"Сначала нам потребуется написать функцию, которая вызывается при выполнении "
"действия в интерфейсе администратора. Функции действий - это обычные "
"функции, которые принимают три аргумента:"

# d84fc4a40710485f9e4ed3b38933389a
#: ../../ref/contrib/admin/actions.txt:77
msgid "The current :class:`ModelAdmin`"
msgstr "Экземпляр класса :class:`ModelAdmin`,"

# 4bff68e754bf458fb553542e77f1b847
#: ../../ref/contrib/admin/actions.txt:78
msgid "An :class:`~django.http.HttpRequest` representing the current request,"
msgstr ""
"Экземпляр класса :class:`~django.http.HttpRequest`, представляющий текущий "
"запрос,"

# 5853af904cf040dfbb908100131f25ec
#: ../../ref/contrib/admin/actions.txt:79
msgid ""
"A :class:`~django.db.models.query.QuerySet` containing the set of objects "
"selected by the user."
msgstr ""
"Экземпляр класса :class:`~django.db.models.query.QuerySet`, содержащий набор "
"объектов, которые выделил пользователь."

# fee58adca6034ced922a2297134bbd13
#: ../../ref/contrib/admin/actions.txt:82
msgid ""
"Our publish-these-articles function won't need the :class:`ModelAdmin` or "
"the request object, but we will use the queryset::"
msgstr ""
"Наша функция \"опубликовать-эти-статьи\" не нуждается в экземпляре :class:"
"`ModelAdmin` или в объекте реквеста, но использует выборку::"

# 64fee58134c04fe8a02a3f37f89d0281
#: ../../ref/contrib/admin/actions.txt:90
msgid ""
"For the best performance, we're using the queryset's :ref:`update method "
"<topics-db-queries-update>`. Other types of actions might need to deal with "
"each object individually; in these cases we'd just iterate over the "
"queryset::"
msgstr ""
"В целях улучшения производительности, мы используем метод выборки :ref:"
"`update method <topics-db-queries-update>`. Другие типы действий могут "
"обрабатывать каждый объект индивидуально. В таких случаях мы просто "
"выполняем итерацию по выборке::"

# 14139fe696f5486ba2201aac6accf587
#: ../../ref/contrib/admin/actions.txt:98
msgid ""
"That's actually all there is to writing an action! However, we'll take one "
"more optional-but-useful step and give the action a \"nice\" title in the "
"admin. By default, this action would appear in the action list as \"Make "
"published\" -- the function name, with underscores replaced by spaces. "
"That's fine, but we can provide a better, more human-friendly name by giving "
"the ``make_published`` function a ``short_description`` attribute::"
msgstr ""
"В общем-то мы рассмотрели всё, что требуется для создания действия\" Однако, "
"мы сделаем ещё один необязательный, но полезный шаг и обеспечим действие "
"\"красивым\" заголовком, который будет отображаться в интерфейсе "
"администратора. По умолчанию, это действие будет отображено в списке "
"действий как \"Make published\", т.е. по имени функции, где символы "
"подчёркивания будут заменены пробелами. Неплохо, но мы можем сделать лучше, "
"по человечески, предоставив функции ``make_published`` атрибут "
"``short_description``::"

# ade7f522fc2d4a789461f09b715e2017
#: ../../ref/contrib/admin/actions.txt:111
msgid ""
"This might look familiar; the admin's ``list_display`` option uses the same "
"technique to provide human-readable descriptions for callback functions "
"registered there, too."
msgstr ""
"Вы уже встречались с этим. Опция ``list_display`` интерфейса администратора "
"использует подобный подход для предоставления читаемых описаний для функций-"
"обработчиков."

# 6f2c02e5114749f1b6f38aab355bcdd4
#: ../../ref/contrib/admin/actions.txt:116
msgid "Adding actions to the :class:`ModelAdmin`"
msgstr "Добавление действий в класс :class:`ModelAdmin`"

# 60e3d9a89d6e47329d12dcea273e25ab
#: ../../ref/contrib/admin/actions.txt:118
msgid ""
"Next, we'll need to inform our :class:`ModelAdmin` of the action. This works "
"just like any other configuration option. So, the complete ``admin.py`` with "
"the action and its registration would look like::"
msgstr ""
"Затем мы должны проинформировать наш класс :class:`ModelAdmin` о новом "
"действии. Это действие аналогично применению любой другой опции "
"конфигурации. Таким образом, полный пример ``admin.py`` с определением "
"действия и его регистрации будет выглядеть так::"

# bfef643db8f44cf1990353f5aa9dc5e0
#: ../../ref/contrib/admin/actions.txt:136
msgid ""
"That code will give us an admin change list that looks something like this:"
msgstr ""
"Этот код предоставит нам список моделей в интерфейсе администратора, который "
"выгладит примерно так:"

# b3f20651d7a342338acbc749d9209404
#: ../../ref/contrib/admin/actions.txt:140
msgid ""
"That's really all there is to it! If you're itching to write your own "
"actions, you now know enough to get started. The rest of this document just "
"covers more advanced techniques."
msgstr ""
"Вот и всё! Если вам хочется поскорее создать свои действия, приступайте, у "
"вас есть необходимые знания. Остальная часть документа просто описывает "
"более продвинутые вещи."

# 3cafb2a6545e48c88fcd7ac60a6d04e4
#: ../../ref/contrib/admin/actions.txt:145
msgid "Handling errors in actions"
msgstr "Обработка ошибок в действиях"

# 088d9c3b44ab4252867b81df75e1e2a4
#: ../../ref/contrib/admin/actions.txt:147
msgid ""
"If there are foreseeable error conditions that may occur while running your "
"action, you should gracefully inform the user of the problem. This means "
"handling exceptions and using :meth:`django.contrib.admin.ModelAdmin."
"message_user` to display a user friendly description of the problem in the "
"response."
msgstr ""
"При наличии предполагаемых условий возникновения ошибки, которая может "
"возникнуть во время работы вашего действия, вы должны аккуратно "
"проинформировать пользователя о проблеме. Это подразумевает обработку "
"исключений и использование метода :meth:`django.contrib.admin.ModelAdmin."
"message_user` для отображения описания проблемы в отклике."

# 032cac3c40524e1ab5b20e47e2a1594f
#: ../../ref/contrib/admin/actions.txt:154
msgid "Advanced action techniques"
msgstr "Продвинутые методики работы с действиями"

# 83ee3f873d714418bb19bb50d55ade68
#: ../../ref/contrib/admin/actions.txt:156
msgid ""
"There's a couple of extra options and possibilities you can exploit for more "
"advanced options."
msgstr ""
"Существует ряд дополнительных опций и возможностей, которые вы можете "
"использовать в своём коде."

# 2523371bd0fb43abb58185c91a183c41
#: ../../ref/contrib/admin/actions.txt:160
msgid "Actions as :class:`ModelAdmin` methods"
msgstr "Действия как методы :class:`ModelAdmin`"

# 7a43946694f54eae90b4267fb42f4b47
#: ../../ref/contrib/admin/actions.txt:162
msgid ""
"The example above shows the ``make_published`` action defined as a simple "
"function. That's perfectly fine, but it's not perfect from a code design "
"point of view: since the action is tightly coupled to the ``Article`` "
"object, it makes sense to hook the action to the ``ArticleAdmin`` object "
"itself."
msgstr ""
"Вышеприведённый пример показывает действие ``make_published``, определённое "
"в виде обычной функции. Это нормальный подход, но к нему есть претензии с "
"точки зрения дизайна кода: так как действия связано с объектом ``Article``, "
"то правильнее будет внедрить это действие в сам объект ``ArticleAdmin``."

# b4641a5318c647c6a41a8d4907e7e28e
#: ../../ref/contrib/admin/actions.txt:167
msgid "That's easy enough to do::"
msgstr "Это достаточно просто сделать::"

# 7056275770b54d79b1d4b91c686d322c
#: ../../ref/contrib/admin/actions.txt:178
msgid ""
"Notice first that we've moved ``make_published`` into a method and renamed "
"the ``modeladmin`` parameter to ``self``, and second that we've now put the "
"string ``'make_published'`` in ``actions`` instead of a direct function "
"reference. This tells the :class:`ModelAdmin` to look up the action as a "
"method."
msgstr ""
"Следует отметить, что сначала мы переместили ``make_published`` в метод и "
"переименовали параметр ``modeladmin`` в ``self``, а затем поместили строку "
"``make_published`` в атрибут ``actions`` вместо прямой ссылки на функцию. "
"Всё это указывает классу :class:`ModelAdmin` искать действие среди своих "
"методов."

# 94dbe8e8960f422da429596535eb9020
#: ../../ref/contrib/admin/actions.txt:183
msgid ""
"Defining actions as methods gives the action more straightforward, idiomatic "
"access to the :class:`ModelAdmin` itself, allowing the action to call any of "
"the methods provided by the admin."
msgstr ""
"Определение действий в виде методов предоставляет действиям более "
"прямолинейный, идеоматический доступ к самому объекту :class:`ModelAdmin`, "
"позволяя вызывать любой метод, предоставляемый интерфейсом администратора."

# 0c1e700935d6463c8f718d5cd428a6ca
#: ../../ref/contrib/admin/actions.txt:189
msgid ""
"For example, we can use ``self`` to flash a message to the user informing "
"her that the action was successful::"
msgstr ""
"Например, мы можем использовать ``self`` для вывода сообщения для "
"пользователя в целях его информирования об успешном завершении действия::"

# 55042357467e45258daba033942f726d
#: ../../ref/contrib/admin/actions.txt:203
msgid ""
"This make the action match what the admin itself does after successfully "
"performing an action:"
msgstr ""
"Это обеспечивает действие функционалом, аналогичным встроенным возможностям "
"интерфейса администратора:"

# 1d5a0267fffe4dcb9f6078a16ca5dbb3
#: ../../ref/contrib/admin/actions.txt:209
msgid "Actions that provide intermediate pages"
msgstr "Действия, у которых есть промежуточные страницы"

# 154c9e5e590b49d49e23e486bab2974f
#: ../../ref/contrib/admin/actions.txt:211
msgid ""
"By default, after an action is performed the user is simply redirected back "
"to the original change list page. However, some actions, especially more "
"complex ones, will need to return intermediate pages. For example, the built-"
"in delete action asks for confirmation before deleting the selected objects."
msgstr ""
"По умолчанию, после выполнения действия пользователя просто перебрасывают "
"обратно на страницу со списком объектов. Однако, некоторые действия, обычно "
"наиболее сложные из них, могут отображать промежуточные страницы. Например, "
"встроенное действие по удалению запрашивает подтверждение перед выполнением "
"удаления выделенных объектов."

# 1bb0efa973384a15b7774f7eb4f1b435
#: ../../ref/contrib/admin/actions.txt:217
msgid ""
"To provide an intermediary page, simply return an :class:`~django.http."
"HttpResponse` (or subclass) from your action. For example, you might write a "
"simple export function that uses Django's :doc:`serialization functions </"
"topics/serialization>` to dump some selected objects as JSON::"
msgstr ""
"Чтобы предоставить такую промежуточную страницу следует просто вернуть "
"объект класса :class:`~django.http.HttpResponse` (или его потомка) в вашем "
"действии. Например, вы можете создать простую функцию экспорта, которая "
"использует :doc:`функции сериализации </topics/serialization>` для дампа "
"указанных объектов в виде JSON::"

# c6b2d08a82bc49f19cf71499bc7108a5
#: ../../ref/contrib/admin/actions.txt:231
msgid ""
"Generally, something like the above isn't considered a great idea. Most of "
"the time, the best practice will be to return an :class:`~django.http."
"HttpResponseRedirect` and redirect the user to a view you've written, "
"passing the list of selected objects in the GET query string. This allows "
"you to provide complex interaction logic on the intermediary pages. For "
"example, if you wanted to provide a more complete export function, you'd "
"want to let the user choose a format, and possibly a list of fields to "
"include in the export. The best thing to do would be to write a small action "
"that simply redirects to your custom export view::"
msgstr ""
"В общем случае, показанное выше не рассматривается в качестве хорошей идеи. "
"В большинстве случаев лучшим вариантом будет вернуть объект класса :class:"
"`~django.http.HttpResponseRedirect` для перенаправления пользователя на "
"представление, которое вы напишете, передав список выбранных объектов в GET "
"параметрах. Это позволит вам реализовать логику сложного взаимодействия на "
"промежуточных страницах. Например, если вам потребуется реализовать более "
"сложную функцию экспорта, вам понадобится позволить пользователю выбирать "
"формат, и возможно список полей, которые следует включать в экспорт. "
"Наилучшим вариантом будет создание небольшого действия, которое просто "
"перенаправляет пользователя на ваше представление, в котором реализован "
"экспорт::"

# 593cbaa7fcf7458bbf83560cfa95a1e1
#: ../../ref/contrib/admin/actions.txt:250
msgid ""
"As you can see, the action is the simple part; all the complex logic would "
"belong in your export view. This would need to deal with objects of any "
"type, hence the business with the ``ContentType``."
msgstr ""
"Как вы можете видеть, код самого действия очень прост. Вся сложная логика "
"будет располагаться в вашем представлении экспорта. Здесь потребуется "
"работать с объектами любого типа, следовательно тут надо работать через "
"``ContentType``."

# 285f66c33d7247f8be0b8d838210ff79
#: ../../ref/contrib/admin/actions.txt:254
msgid "Writing this view is left as an exercise to the reader."
msgstr ""
"Написание самого представления оставлено читателю в качестве домашнего "
"задания."

# bbcdbdba285749588020cc2674e885d6
#: ../../ref/contrib/admin/actions.txt:259
msgid "Making actions available site-wide"
msgstr "Делаем действия видимыми всему сайту"

# f289a481588f4a538b5f498bc74a336b
#: ../../ref/contrib/admin/actions.txt:263
msgid ""
"Some actions are best if they're made available to *any* object in the admin "
"site -- the export action defined above would be a good candidate. You can "
"make an action globally available using :meth:`AdminSite.add_action()`. For "
"example::"
msgstr ""
"Некоторые действия настолько хороши, что их следует сделать доступными для "
"*любого* объекта в интерфейсе администратора. Действие экспорта, "
"определённое выше, будет хорошим кандидатом для этого. Вы можете сделать "
"действие видимым глобально, воспользуйтесь методом :meth:`AdminSite."
"add_action()`. Например::"

# 9fb33252714b4f59ba7e9ee43c8d6385
#: ../../ref/contrib/admin/actions.txt:272
msgid ""
"This makes the ``export_selected_objects`` action globally available as an "
"action named \"export_selected_objects\". You can explicitly give the action "
"a name -- good if you later want to programmatically :ref:`remove the action "
"<disabling-admin-actions>` -- by passing a second argument to :meth:"
"`AdminSite.add_action()`::"
msgstr ""
"Действие ``export_selected_objects`` станет доступным глобально под именем "
"\"export_selected_objects\". Вы можете явно дать имя этому действию, "
"например, вам потребуется затем программно :ref:`удалить действие <disabling-"
"admin-actions>`, передав второй аргумент в метод :meth:`AdminSite."
"add_action()`::"

# fa70ea5276634e6a92aa13b491de3317
#: ../../ref/contrib/admin/actions.txt:283
msgid "Disabling actions"
msgstr "Отключение действий"

# 99e498d84eb34b0da1e4d34e98ee383e
#: ../../ref/contrib/admin/actions.txt:285
msgid ""
"Sometimes you need to disable certain actions -- especially those :ref:"
"`registered site-wide <adminsite-actions>` -- for particular objects. "
"There's a few ways you can disable actions:"
msgstr ""
"Иногда требуется отключать определённые действия, особенно :ref:"
"`зарегистрированные глобально <adminsite-actions>`, для определённых "
"объектов. Существует несколько способов для этого:"

# 722baab607cb48678ef4197e8084b06a
#: ../../ref/contrib/admin/actions.txt:290
msgid "Disabling a site-wide action"
msgstr "Отключение глобального действия"

# fb9a23190e2744d48c2b256f70dfc714
#: ../../ref/contrib/admin/actions.txt:294
msgid ""
"If you need to disable a :ref:`site-wide action <adminsite-actions>` you can "
"call :meth:`AdminSite.disable_action()`."
msgstr ""
"Если требуется отключить :ref:`глобальное действие <adminsite-actions>`, вы "
"можете вызвать метод :meth:`AdminSite.disable_action()`."

# a353486eb7c44f7f8096d84288880eca
#: ../../ref/contrib/admin/actions.txt:297
msgid ""
"For example, you can use this method to remove the built-in \"delete "
"selected objects\" action::"
msgstr ""
"Например, вы можете использовать данный метод для удаления встроенного "
"действия \"delete selected objects\"::"

# 37284c9f538f441aaf8efa85498c958a
#: ../../ref/contrib/admin/actions.txt:302
msgid ""
"Once you've done the above, that action will no longer be available site-"
"wide."
msgstr "После этого действие больше не будет доступно глобально."

# 37de5e86c9e5466b86d15c9161594226
#: ../../ref/contrib/admin/actions.txt:305
msgid ""
"If, however, you need to re-enable a globally-disabled action for one "
"particular model, simply list it explicitly in your ``ModelAdmin.actions`` "
"list::"
msgstr ""
"Тем не менее, если вам потребуется вернуть глобально отключенное действия "
"для одной конкретной модели, просто укажите это действия явно в списке "
"``ModelAdmin.actions``::"

# 9f9b0d3a0fb145ff8b83d47dcb8f49c8
#: ../../ref/contrib/admin/actions.txt:324
msgid "Disabling all actions for a particular :class:`ModelAdmin`"
msgstr ""
"Отключение всех действия для определённого экземпляра :class:`ModelAdmin`"

# ae50836c1eb14bed9dacaf42c6e162d2
#: ../../ref/contrib/admin/actions.txt:326
msgid ""
"If you want *no* bulk actions available for a given :class:`ModelAdmin`, "
"simply set :attr:`ModelAdmin.actions` to ``None``::"
msgstr ""
"Если вам требуется *запретить* пакетные действия для определённого "
"экземпляра :class:`ModelAdmin`, просто установите атрибут :attr:`ModelAdmin."
"actions` в ``None``::"

# 5800a016931e4ae8a8af6c5178440b59
#: ../../ref/contrib/admin/actions.txt:332
msgid ""
"This tells the :class:`ModelAdmin` to not display or allow any actions, "
"including any :ref:`site-wide actions <adminsite-actions>`."
msgstr ""
"Это укажет экземпляру :class:`ModelAdmin` не показывать и не позволять "
"выполнения никаких действий, включая :ref:`зарегистрированные глобально "
"<adminsite-actions>`."

# 16cffbec62ec441fbf73066761aa8108
#: ../../ref/contrib/admin/actions.txt:336
msgid "Conditionally enabling or disabling actions"
msgstr "Условное включение и отключение действий"

# eccd355bb41c434f8ed88201bc5cce18
#: ../../ref/contrib/admin/actions.txt:340
msgid ""
"Finally, you can conditionally enable or disable actions on a per-request "
"(and hence per-user basis) by overriding :meth:`ModelAdmin.get_actions`."
msgstr ""
"Наконец, вы можете включать или отключать действия по некоему условию на "
"уровне запроса (и, следовательно, на уровне каждого пользователя), просто "
"переопределив метод :meth:`ModelAdmin.get_actions`."

# 966c75f46575485d9f8b88d3197aeaee
#: ../../ref/contrib/admin/actions.txt:343
msgid ""
"This returns a dictionary of actions allowed. The keys are action names, and "
"the values are ``(function, name, short_description)`` tuples."
msgstr ""
"Он возвращает словарь разрешённых действий. Ключами являются имена действий, "
"а значениями являются кортежи вида ``(function, name, short_description)``."

# af1bdf7b731c415a96bd20906e342483
#: ../../ref/contrib/admin/actions.txt:346
msgid ""
"Most of the time you'll use this method to conditionally remove actions from "
"the list gathered by the superclass. For example, if I only wanted users "
"whose names begin with 'J' to be able to delete objects in bulk, I could do "
"the following::"
msgstr ""
"Чаще всего вы будете использовать данный метод для условного удаления "
"действия из списка, полученного в родительском классе. Например, если мне "
"надо разрешить пакетное удаление объектов только для пользователей с "
"именами, начинающимися с буквы 'J', то я сделаю так::"

#: ../../ref/contrib/admin/actions.txt:364
msgid "Setting permissions for actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:368
msgid ""
"Actions may limit their availability to users with specific permissions by "
"setting an ``allowed_permissions`` attribute on the action function::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:375
msgid ""
"The ``make_published()`` action will only be available to users that pass "
"the :meth:`.ModelAdmin.has_change_permission` check."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:378
msgid ""
"If ``allowed_permissions`` has more than one permission, the action will be "
"available as long as the user passes at least one of the checks."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:381
msgid ""
"Available values for ``allowed_permissions`` and the corresponding method "
"checks are:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:384
msgid "``'add'``: :meth:`.ModelAdmin.has_add_permission`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:385
msgid "``'change'``: :meth:`.ModelAdmin.has_change_permission`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:386
msgid "``'delete'``: :meth:`.ModelAdmin.has_delete_permission`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:387
msgid "``'view'``: :meth:`.ModelAdmin.has_view_permission`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:389
msgid ""
"You can specify any other value as long as you implement a corresponding "
"``has_<value>_permission(self, request)`` method on the ``ModelAdmin``."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:392
msgid "For example::"
msgstr ""
