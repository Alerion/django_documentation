# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-17 17:48+0300\n"
"PO-Revision-Date: 2016-03-21 15:38+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 469dd0d23dc44542b824fde64abe46fd
#: ../../ref/contrib/admin/index.txt:3
msgid "The Django admin site"
msgstr "Интерфейс администратора Django"

# fc70c1e5bd084a38ae98f5f615b9d303
#: ../../ref/contrib/admin/index.txt:8
#, fuzzy
msgid ""
"One of the most powerful parts of Django is the automatic admin interface. "
"It reads metadata from your models to provide a quick, model-centric "
"interface where trusted users can manage content on your site. The admin's "
"recommended use is limited to an organization's internal management tool. "
"It's not intended for building your entire front end around."
msgstr ""
"Одна из сильных сторон Django -- это автоматический интерфейс "
"администратора. Он использует мета-данные модели чтобы предоставить "
"многофункциональный, готовый к использованию интерфейс для работы с "
"содержимым сайта. В этом разделе мы расскажем как установить, использовать и "
"настроить интерфейс администратора Django."

#: ../../ref/contrib/admin/index.txt:14
msgid ""
"The admin has many hooks for customization, but beware of trying to use "
"those hooks exclusively. If you need to provide a more process-centric "
"interface that abstracts away the implementation details of database tables "
"and fields, then it's probably time to write your own views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:19
msgid ""
"In this document we discuss how to activate, use, and customize Django's "
"admin interface."
msgstr ""

# d1c5bd27a4ab43d4af1b13dd44719e13
#: ../../ref/contrib/admin/index.txt:23
msgid "Overview"
msgstr "Обзор"

# f08312ca76e04b0bb25011f842d130cd
#: ../../ref/contrib/admin/index.txt:25
msgid ""
"The admin is enabled in the default project template used by :djadmin:"
"`startproject`."
msgstr ""
"Интерфейс администратора по умолчанию включен, если вы создавали проект "
"командой :djadmin:`startproject`."

# 7953005e4f4b4911a4e0bf3f0cf15bad
#: ../../ref/contrib/admin/index.txt:28
msgid "For reference, here are the requirements:"
msgstr "Если необходимо самостоятельно его включить, вот требования:"

# 025cb9f54e604d7a85a3865a96533f3b
#: ../../ref/contrib/admin/index.txt:30
msgid ""
"Add ``'django.contrib.admin'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"Добавьте ``'django.contrib.admin'`` в настройку :setting:`INSTALLED_APPS`."

# 74042cd25843454baf1a5665a657d694
#: ../../ref/contrib/admin/index.txt:32
msgid ""
"The admin has four dependencies - :mod:`django.contrib.auth`, :mod:`django."
"contrib.contenttypes`, :mod:`django.contrib.messages` and :mod:`django."
"contrib.sessions`.  If these applications are not in your :setting:"
"`INSTALLED_APPS` list, add them."
msgstr ""
"Интерфейс администратора имеет четыре зависимости - :mod:`django.contrib."
"auth`, :mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages` "
"and :mod:`django.contrib.sessions`.  Если эти приложения не входят в список :"
"setting:`INSTALLED_APPS`, добавьте их."

# 5cfcc9b06d3e430e8eba24883eebc386
#: ../../ref/contrib/admin/index.txt:38
#, fuzzy
msgid ""
"Add ``django.contrib.auth.context_processors.auth`` and ``django.contrib."
"messages.context_processors.messages`` to the ``'context_processors'`` "
"option of the ``DjangoTemplates`` backend defined in your :setting:"
"`TEMPLATES` as well as :class:`django.contrib.auth.middleware."
"AuthenticationMiddleware` and :class:`django.contrib.messages.middleware."
"MessageMiddleware` to :setting:`MIDDLEWARE`. These are all active by "
"default, so you only need to do this if you've manually tweaked the settings."
msgstr ""
"Добавьте ``django.contrib.auth.context_processors.auth`` и ``django.contrib."
"messages.context_processors.messages`` в опцию ``'context_processors'`` "
"бэкенда `DjangoTemplates`` из настройки :setting:`TEMPLATES`, и :class:"
"`django.contrib.auth.middleware.AuthenticationMiddleware` с :class:`~django."
"contrib.messages.middleware.MessageMiddleware` в :setting:"
"`MIDDLEWARE_CLASSES`. (Эти параметры включены по умолчанию, вам необходимо "
"добавить их, только если вы изменяли эти настройки.)"

# 940f37b8014242c9ae0a0904ab7589de
#: ../../ref/contrib/admin/index.txt:47
msgid ""
"Determine which of your application's models should be editable in the admin "
"interface."
msgstr ""
"Определите, какие модели будут редактироваться через интерфейс "
"администратора."

# 30eeaa24cdd54d7f87825e4bc8b89949
#: ../../ref/contrib/admin/index.txt:50
msgid ""
"For each of those models, optionally create a ``ModelAdmin`` class that "
"encapsulates the customized admin functionality and options for that "
"particular model."
msgstr ""
"Для каждой модели вы можете создать класс ``ModelAdmin``, который "
"инкапсулирует настройки интерфейса администратора для конкретной модели."

# 79dd3ada1dd74ce0a353d685d9bcac58
#: ../../ref/contrib/admin/index.txt:54
msgid ""
"Instantiate an ``AdminSite`` and tell it about each of your models and "
"``ModelAdmin`` classes."
msgstr ""
"Создайте экземпляр ``AdminSite`` и добавьте в него ваши модели с "
"соответствующими классами ``ModelAdmin``."

# 53ebc68f9e6a402ba68fc3d856264b9e
#: ../../ref/contrib/admin/index.txt:57
msgid "Hook the ``AdminSite`` instance into your URLconf."
msgstr "Добавьте ``AdminSite`` в URLconf."

# 25b21157e70042beb7aebd823c8dc1d3
#: ../../ref/contrib/admin/index.txt:59
#, fuzzy
msgid ""
"After you've taken these steps, you'll be able to use your Django admin site "
"by visiting the URL you hooked it into (``/admin/``, by default). If you "
"need to create a user to login with, you can use the :djadmin:"
"`createsuperuser` command."
msgstr ""
"После всего это вы можете использовать интерфейс администратора Django "
"посетив соответствующий URL (``/admin/`` по умолчанию)."

# 8c62ae6628534d02bdf83eeb8600e994
#: ../../ref/contrib/admin/index.txt:65
msgid "Other topics"
msgstr "Другие разделы"

# 38e3d8c238d5475283b866cf47261b22
#: ../../ref/contrib/admin/index.txt:76
msgid ""
"For information about serving the static files (images, JavaScript, and CSS) "
"associated with the admin in production, see :ref:`serving-files`."
msgstr ""
"Информацию о настройке статических файлов (изображений, JavaScript и CSS) "
"для интерфейса администратора на \"боевом\" сервере можно найти в разделе :"
"ref:`serving-files`."

# dd19e647766342e2855a3582b630b557
#: ../../ref/contrib/admin/index.txt:79
msgid "Having problems?  Try :doc:`/faq/admin`."
msgstr "Вопросы?  Обратитесь к :doc:`/faq/admin`."

# 2c0c7755d7c14b64922c51aab3811457
#: ../../ref/contrib/admin/index.txt:82
msgid "``ModelAdmin`` objects"
msgstr "Объект ``ModelAdmin``"

# a7009ba8dd834d83aa82724750f73afd
#: ../../ref/contrib/admin/index.txt:86
msgid ""
"The ``ModelAdmin`` class is the representation of a model in the admin "
"interface. Usually, these are stored in a file named ``admin.py`` in your "
"application. Let's take a look at a very simple example of the "
"``ModelAdmin``::"
msgstr ""
"Класс ``ModelAdmin`` -- это отображение модели в интерфейсе администратора. "
"Его код добавляют обычно в файл ``admin.py`` вашего приложения. Давайте "
"рассмотрим простой пример ``ModelAdmin``::"

# 2c0c7755d7c14b64922c51aab3811457
#: ../../ref/contrib/admin/index.txt:98
msgid "Do you need a ``ModelAdmin`` object at all?"
msgstr "Нужен ли вообще вам объект ``ModelAdmin``?"

# c0b96fa59972490bae730e8f7518ee7e
#: ../../ref/contrib/admin/index.txt:100
msgid ""
"In the preceding example, the ``ModelAdmin`` class doesn't define any custom "
"values (yet). As a result, the default admin interface will be provided. If "
"you are happy with the default admin interface, you don't need to define a "
"``ModelAdmin`` object at all -- you can register the model class without "
"providing a ``ModelAdmin`` description. The preceding example could be "
"simplified to::"
msgstr ""
"В этом примере, класс ``ModelAdmin`` не определяет никаких настроек (пока).В "
"результате мы получим интерфейс предоставляемый по умолчанию. Если он вас "
"устраивает, вы можете не определять ``ModelAdmin`` совсем и зарегистрировать "
"модель без ``ModelAdmin``. Пример выше может выглядеть таким образом::"

# 79f617cbc99e47b1887c25c0f8cfa369
#: ../../ref/contrib/admin/index.txt:113
#, fuzzy
msgid "The ``register`` decorator"
msgstr "Декоратор для регистрации"

# e3b1df71dc7d4b99a0b2df13d214e1a9
#: ../../ref/contrib/admin/index.txt:117
msgid "There is also a decorator for registering your ``ModelAdmin`` classes::"
msgstr ""
"Существует также декоратор для регистрации ваших классов ``ModelAdmin``::"

# bf86e62cd6114762a0c923fa7c8d8c28
#: ../../ref/contrib/admin/index.txt:126
#, fuzzy
msgid ""
"It's given one or more model classes to register with the ``ModelAdmin``. If "
"you're using a custom :class:`AdminSite`, pass it using the ``site`` keyword "
"argument::"
msgstr ""
"Можно указать несколько классов модели для регистрации с ``ModelAdmin``. "
"Также принимается необязательный аргумент ``site``, если вы не используете "
"стандартный ``AdminSite``::"

#: ../../ref/contrib/admin/index.txt:138
#, fuzzy
msgid ""
"You can't use this decorator if you have to reference your model admin class "
"in its ``__init__()`` method, e.g. ``super(PersonAdmin, self)."
"__init__(*args, **kwargs)``. You can use ``super().__init__(*args, "
"**kwargs)``."
msgstr ""
"Вы не можете использовать этот декоратор, если вы обращаетесь к названию "
"класса в методе ``__init__()``, например ``super(PersonAdmin, self)."
"__init__(*args, **kwargs)``. Если вы используете Python 3 и не заботитесь о "
"поддержке Python 2, вы можете использовать ``super().__init__(*args, "
"**kwargs)`` . Иначе вам следует использовать ``admin.site.register()`` "
"вместо декоратора."

# 20eb18cb16ff4d9caff4605d7a6102d5
#: ../../ref/contrib/admin/index.txt:144
msgid "Discovery of admin files"
msgstr "Изучаем файлы админки"

# c456ee54ef16492c893ea5e0972c6c24
#: ../../ref/contrib/admin/index.txt:146
msgid ""
"When you put ``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` "
"setting, Django automatically looks for an ``admin`` module in each "
"application and imports it."
msgstr ""
"При добавлении ``'django.contrib.admin'`` в :setting:`INSTALLED_APPS` "
"setting, Django автоматически ищет модуль ``admin`` в каждом приложении и "
"импортирует его."

# 6cdcb84fbf394940ab777d70207f72de
#: ../../ref/contrib/admin/index.txt:152
msgid ""
"This is the default :class:`~django.apps.AppConfig` class for the admin. It "
"calls :func:`~django.contrib.admin.autodiscover()` when Django starts."
msgstr ""
"Стандартный класс :class:`~django.apps.AppConfig` для админки. Вызывает :"
"func:`~django.contrib.admin.autodiscover()` при запуске Django."

# 29affffa54f04186bacec876b7fb9cb6
#: ../../ref/contrib/admin/index.txt:157
msgid ""
"This class works like :class:`~django.contrib.admin.apps.AdminConfig`, "
"except it doesn't call :func:`~django.contrib.admin.autodiscover()`."
msgstr ""
"Аналогичен :class:`~django.contrib.admin.apps.AdminConfig`, но не вызывает :"
"func:`~django.contrib.admin.autodiscover()`."

# d6c7d63274a94b49b6cb7990f5fde73d
#: ../../ref/contrib/admin/index.txt:162
msgid ""
"This function attempts to import an ``admin`` module in each installed "
"application. Such modules are expected to register models with the admin."
msgstr ""
"Эта функция пытается импортировать модуль ``admin`` каждого установленного "
"приложения. Предполагается, что в этом модуле выполняется регистрация "
"моделей в админке."

#: ../../ref/contrib/admin/index.txt:165
msgid ""
"Typically you won't need to call this function directly as :class:`~django."
"contrib.admin.apps.AdminConfig` calls it when Django starts."
msgstr ""
"Обычно вам не нужно вызывать эту функцию самостоятельно, :class:`~django."
"contrib.admin.apps.AdminConfig` вызывает её при запуске Django."

# d20bf7bbe91b45bdb860cbaef1138185
#: ../../ref/contrib/admin/index.txt:168
msgid ""
"If you are using a custom ``AdminSite``, it is common to import all of the "
"``ModelAdmin`` subclasses into your code and register them to the custom "
"``AdminSite``. In that case, in order to disable auto-discovery, you should "
"put ``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of ``'django."
"contrib.admin'`` in your :setting:`INSTALLED_APPS` setting."
msgstr ""
"Если вы используете собственный ``AdminSite``, вам необходимо импортировать "
"все подклассы ``ModelAdmin`` и зарегистрировать их в вашем ``AdminSite``. В "
"этом случае, чтобы отключить их добавление в стандартную админку, "
"используйте ``'django.contrib.admin.apps.SimpleAdminConfig'`` вместо "
"``'django.contrib.admin'`` в :setting:`INSTALLED_APPS`."

# 04d532f573ad48fb83cb3e2320f1cc19
#: ../../ref/contrib/admin/index.txt:175
msgid "``ModelAdmin`` options"
msgstr "Настройки ``ModelAdmin``"

# ce37a3143d8c4777b48e1288cdd0bfb9
#: ../../ref/contrib/admin/index.txt:177
msgid ""
"The ``ModelAdmin`` is very flexible. It has several options for dealing with "
"customizing the interface. All options are defined on the ``ModelAdmin`` "
"subclass::"
msgstr ""
"``ModelAdmin`` очень гибкий. Он содержит ряд параметров для настройки "
"интерфейса администратора. Все настройки определяются в подклассе "
"``ModelAdmin``::"

# d77e9f5bd11c48fea977c723a255e5de
#: ../../ref/contrib/admin/index.txt:188
msgid ""
"A list of actions to make available on the change list page. See :doc:`/ref/"
"contrib/admin/actions` for details."
msgstr ""
"Список действий, которые будут включены на странице списка объектов. "
"Подробности смотрите в разделе :doc:`/ref/contrib/admin/actions`."

# 2cf9345b15c14098969597ebf1ee9534
#: ../../ref/contrib/admin/index.txt:194
msgid ""
"Controls where on the page the actions bar appears. By default, the admin "
"changelist displays actions at the top of the page (``actions_on_top = True; "
"actions_on_bottom = False``)."
msgstr ""
"Определяет где на странице будет расположены панели с действиями. По "
"умолчанию эта панель расположена сверху (``actions_on_top = True; "
"actions_on_bottom = False``)."

# 6bc6135c50f84addabd1d8cfb4fc1f56
#: ../../ref/contrib/admin/index.txt:200
msgid ""
"Controls whether a selection counter is displayed next to the action "
"dropdown. By default, the admin changelist will display it "
"(``actions_selection_counter = True``)."
msgstr ""
"Указывает отображать ли счетчик выбранных объектов после списка действий. По "
"умолчанию он отображается (``actions_selection_counter = True``)."

# 52e6934c14564f99bd6913315444bcb3
#: ../../ref/contrib/admin/index.txt:206
msgid ""
"Set ``date_hierarchy`` to the name of a ``DateField`` or ``DateTimeField`` "
"in your model, and the change list page will include a date-based drilldown "
"navigation by that field."
msgstr ""
"Укажите в ``date_hierarchy`` название ``DateField`` или ``DateTimeField`` "
"поля вашей модели, и страница списка объектов будет содержать навигацию по "
"датам из этого поля."

# d5220d676bf843d2b88ba594780327ab
# 318b244d88e44fd1ab19841a691ebac7
# f2744e6edf9c4f3c9b9a8e191dfb73ab
# df28920470914f8b9d19be23bbdc97b9
#: ../../ref/contrib/admin/index.txt:210 ../../ref/contrib/admin/index.txt:374
#: ../../ref/contrib/admin/index.txt:399 ../../ref/contrib/admin/index.txt:541
msgid "Example::"
msgstr "Например::"

# bcfd8bc23c17485b8a1a87456146db5b
#: ../../ref/contrib/admin/index.txt:214
#, fuzzy
msgid ""
"You can also specify a field on a related model using the ``__`` lookup, for "
"example::"
msgstr ""
"Поле в ``list_filter`` может указывать и на связанный объект используя "
"``__``, например::"

# a527fd16338b46139fb8347091ddf5d2
#: ../../ref/contrib/admin/index.txt:219
msgid ""
"This will intelligently populate itself based on available data, e.g. if all "
"the dates are in one month, it'll show the day-level drill-down only."
msgstr ""
"Навигация учитывает значения поля, например, если все значения будут датами "
"из одного месяца, будут отображаться только дни этого месяца."

#: ../../ref/contrib/admin/index.txt:225
msgid "The ability to reference fields on related models was added."
msgstr ""

# 5b2eb1ef0042499396869423e305e011
#: ../../ref/contrib/admin/index.txt:229
msgid ""
"``date_hierarchy`` uses :meth:`QuerySet.datetimes() <django.db.models.query."
"QuerySet.datetimes>` internally. Please refer to its documentation for some "
"caveats when time zone support is enabled (:setting:`USE_TZ = True "
"<USE_TZ>`)."
msgstr ""
"``date_hierarchy`` использует внутри :meth:`QuerySet.datetimes() <django.db."
"models.query.QuerySet.datetimes>`. Обратитесь к описанию, чтобы узнать "
"некоторые нюансы при использовании часовых поясов (:setting:`USE_TZ = True "
"<USE_TZ>`)."

#: ../../ref/contrib/admin/index.txt:236
msgid ""
"This attribute overrides the default display value for record's fields that "
"are empty (``None``, empty string, etc.). The default value is ``-`` (a "
"dash). For example::"
msgstr ""
"Этот атрибут переопределяет отображение пустого значения записи (``None``, "
"пустая строка и т.д.). По умолчанию ``-`` (дефис). Например::"

#: ../../ref/contrib/admin/index.txt:245
msgid ""
"You can also override ``empty_value_display`` for all admin pages with :attr:"
"`AdminSite.empty_value_display`, or for specific fields like this::"
msgstr ""
"Вы также можете переопределить ``empty_value_display`` для всех страниц, "
"указав :attr:`AdminSite.empty_value_display`, или для одного поля::"

# fbc9ee051a6449fba81074dd2245588a
#: ../../ref/contrib/admin/index.txt:260
msgid ""
"This attribute, if given, should be a list of field names to exclude from "
"the form."
msgstr ""
"Этот атрибут должен содержать список полей, которые не будут включены в "
"форму редактирования."

# e691faaee86b4255966e54041fabc51f
#: ../../ref/contrib/admin/index.txt:263
msgid "For example, let's consider the following model::"
msgstr "Например, у нас есть следующая модель::"

# 8c4ffe5ce41a4432bbacab03d613410b
#: ../../ref/contrib/admin/index.txt:272
msgid ""
"If you want a form for the ``Author`` model that includes only the ``name`` "
"and ``title`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""
"Если вам необходима форма для модели ``Author``, которая содержит только "
"поля ``name`` и ``title``, вы можете определить параметр ``fields`` или "
"``exclude`` следующим образом::"

# aa4a995142ee4af2867a5e718381f38c
#: ../../ref/contrib/admin/index.txt:284
msgid ""
"Since the Author model only has three fields, ``name``, ``title``, and "
"``birth_date``, the forms resulting from the above declarations will contain "
"exactly the same fields."
msgstr ""
"Так как модель содержит только три поля, ``name``, ``title`` и "
"``birth_date``, полученные формы будут содержать одинаковые поля."

# 92b5c9ec542844119381a826fa6ef0e1
#: ../../ref/contrib/admin/index.txt:290
msgid ""
"Use the ``fields`` option to make simple layout changes in the forms on the "
"\"add\" and \"change\" pages such as showing only a subset of available "
"fields, modifying their order, or grouping them into rows. For example, you "
"could define a simpler version of the admin form for the :class:`django."
"contrib.flatpages.models.FlatPage` model as follows::"
msgstr ""
"Если вам необходимо внести небольшие изменения форму на странице "
"редактирования и добавления, например, изменить список отображаемых полей, "
"их порядок или сгруппировать их, вы можете использовать настройку "
"``fields``. Например, необходимо изменить форму модели из приложения "
"``django.contrib.flatpages.models.FlatPage``::"

# 49583aef2ff44789abcb92891f01f1c1
#: ../../ref/contrib/admin/index.txt:299
msgid ""
"In the above example, only the fields ``url``, ``title`` and ``content`` "
"will be displayed, sequentially, in the form. ``fields`` can contain values "
"defined in :attr:`ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""
"В примере выше будут отображаться только поля ``url``, ``title`` и "
"``content``. ``fields`` может содержать поля указанные в :attr:`ModelAdmin."
"readonly_fields`, они не будут доступны для редактирования."

#: ../../ref/contrib/admin/index.txt:304
msgid ""
"For more complex layout needs, see the :attr:`~ModelAdmin.fieldsets` option."
msgstr "Для более сложных настроек используйте :attr:`~ModelAdmin.fieldsets`."

# cd9db669100a46589bd98f07a7c1d719
#: ../../ref/contrib/admin/index.txt:306
msgid ""
"The ``fields`` option, unlike :attr:`~ModelAdmin.list_display`, may only "
"contain names of fields on the model or the form specified by :attr:"
"`~ModelAdmin.form`. It may contain callables only if they are listed in :"
"attr:`~ModelAdmin.readonly_fields`."
msgstr ""
"Параметр ``fields``, в отличии от :attr:`~ModelAdmin.list_display`, может "
"содержать только названия полей модели или полей определенных в :attr:"
"`~ModelAdmin.form`. Можно указать названия функций, если они указаны в :attr:"
"`~ModelAdmin.readonly_fields`."

# d0e8eeacb8794f7cb9e41b5f8ec8efb4
#: ../../ref/contrib/admin/index.txt:311
msgid ""
"To display multiple fields on the same line, wrap those fields in their own "
"tuple. In this example, the ``url`` and ``title`` fields will display on the "
"same line and the ``content`` field will be displayed below them on its own "
"line::"
msgstr ""
"Чтобы поля отображались в одной строке, укажите их в кортеже вместе. В этом "
"примере, поля ``url`` и ``title`` будут отображаться в одном ряду, поле "
"``content`` будет расположено ниже::"

# ea435870eaac4e008cf5f980def9d702
# b5a3a80f0dd64e6c9e3007d83c701f56
# d5fc4634a9204e5fb00432dda9fcea66
# 2e0b54448de34fe2b9d8e64e14dd31ab
# f7036ad815fb4bf493ebb89f3b735221
#: ../../ref/contrib/admin/index.txt:319 ../../ref/contrib/admin/index.txt:451
#: ../../ref/contrib/admin/index.txt:465 ../../ref/contrib/admin/index.txt:1761
#: ../../ref/contrib/admin/index.txt:1790
msgid "Note"
msgstr "Примечание"

# fa3123238cd9410a934ad00d215678f0
#: ../../ref/contrib/admin/index.txt:321
msgid ""
"This ``fields`` option should not be confused with the ``fields`` dictionary "
"key that is within the :attr:`~ModelAdmin.fieldsets` option, as described in "
"the next section."
msgstr ""
"Настройку ``fields`` не следует путать с ключом словаря ``fields`` в "
"настройке :attr:`~ModelAdmin.fieldsets`, описанной ниже."

# 78caa1d6587b4cf0ae70c61ba5ac2071
#: ../../ref/contrib/admin/index.txt:325
msgid ""
"If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present, "
"Django will default to displaying each field that isn't an ``AutoField`` and "
"has ``editable=True``, in a single fieldset, in the same order as the fields "
"are defined in the model."
msgstr ""
"Если не определен ни атрибут ``fields``, ни :attr:`~ModelAdmin.fieldsets`, "
"Django покажет все поля с ``editable=True`` кроме ``AutoField``, в одном "
"наборе полей в порядке, в котором они указанные в модели."

# 559ed617d51f47eea731acdeef39705e
#: ../../ref/contrib/admin/index.txt:332
msgid ""
"Set ``fieldsets`` to control the layout of admin \"add\" and \"change\" "
"pages."
msgstr "Позволяет изменить макет страниц добавления и редактирования объекта."

# ef3e0e0d3966437292ded775aa6eaa33
#: ../../ref/contrib/admin/index.txt:334
msgid ""
"``fieldsets`` is a list of two-tuples, in which each two-tuple represents a "
"``<fieldset>`` on the admin form page. (A ``<fieldset>`` is a \"section\" of "
"the form.)"
msgstr ""
"``fieldsets`` -- это список двух-элементных кортежей, каждый представляет "
"``<fieldset>`` в форме редактирования объекта. (``<fieldset>`` -- группа "
"полей в форме.)"

# 7c66fedc32b64caebdf3eb90fbd7cb23
#: ../../ref/contrib/admin/index.txt:338
msgid ""
"The two-tuples are in the format ``(name, field_options)``, where ``name`` "
"is a string representing the title of the fieldset and ``field_options`` is "
"a dictionary of information about the fieldset, including a list of fields "
"to be displayed in it."
msgstr ""
"Кортеж должен быть в формате ``(name, options полей)``, где ``name`` это "
"название группы полей, а ``field_options`` -- словарь с информацией о группе "
"полей, включая список полей для отображения."

# efd333c7082641b2af5d3f1fabfcdc1d
#: ../../ref/contrib/admin/index.txt:343
msgid ""
"A full example, taken from the :class:`django.contrib.flatpages.models."
"FlatPage` model::"
msgstr ""
"Полный пример для модели :class:`django.contrib.flatpages.models.FlatPage`::"

# 9500f7b639f64f5381181a8189a2fbf3
#: ../../ref/contrib/admin/index.txt:359
msgid "This results in an admin page that looks like:"
msgstr "Этот пример будет выглядеть следующим образом:"

# 77fd12ae0c284c18accec3cc3417e62a
#: ../../ref/contrib/admin/index.txt:363
msgid ""
"If neither ``fieldsets`` nor :attr:`~ModelAdmin.fields` options are present, "
"Django will default to displaying each field that isn't an ``AutoField`` and "
"has ``editable=True``, in a single fieldset, in the same order as the fields "
"are defined in the model."
msgstr ""
"Если не определен ни атрибут ``fields``, ни :attr:`~ModelAdmin.fieldsets`, "
"Django покажет все поля с ``editable=True`` кроме ``AutoField``, в одном "
"наборе полей в порядке, в котором они указанные в модели."

# c41afbd17a5b4847a3689f27be27511f
#: ../../ref/contrib/admin/index.txt:368
msgid "The ``field_options`` dictionary can have the following keys:"
msgstr "Словарь ``field_options`` может содержать следующие ключи:"

# 03b86047bb6848528f700df6e91d6a5e
#: ../../ref/contrib/admin/index.txt:394
#, fuzzy
msgid "``fields``"
msgstr "``fields``"

# 8d5f428475244f019736ca8d22b284ac
#: ../../ref/contrib/admin/index.txt:371
msgid ""
"A tuple of field names to display in this fieldset. This key is required."
msgstr "Кортеж с названиями полей. Этот ключ обязателен."

# bcad527bba3e4e5bb5700a9ee4851ee8
#: ../../ref/contrib/admin/index.txt:380
msgid ""
"As with the :attr:`~ModelAdmin.fields` option, to display multiple fields on "
"the same line, wrap those fields in their own tuple. In this example, the "
"``first_name`` and ``last_name`` fields will display on the same line::"
msgstr ""
"Как и в атрибуте :attr:`~ModelAdmin.fields`, чтобы отобразить поля в одной "
"строке, добавьте их в один кортеж. В этом примере, поля ``first_name`` и "
"``last_name`` будут показаны в одной строке::"

# b4658952998248959cd13480b4658851
#: ../../ref/contrib/admin/index.txt:389
msgid ""
"``fields`` can contain values defined in :attr:`~ModelAdmin.readonly_fields` "
"to be displayed as read-only."
msgstr ""
"``fields`` может содержать значения из :attr:`ModelAdmin.readonly_fields`, "
"чтобы отображать поля без возможности их редактирования."

# 9c5ca71ae70a47bdba8aeca0f448a873
#: ../../ref/contrib/admin/index.txt:392
msgid ""
"If you add the name of a callable to ``fields``, the same rule applies as "
"with the :attr:`~ModelAdmin.fields` option: the callable must be listed in :"
"attr:`~ModelAdmin.readonly_fields`."
msgstr ""
"Добавление функции в ``fields`` аналогично добавлению в параметр :attr:"
"`~ModelAdmin.fields` - функция должна быть указанна в :attr:`~ModelAdmin."
"readonly_fields`."

# 7969e74f92e648f58a1d1fedea495a7a
#: ../../ref/contrib/admin/index.txt:409
#, fuzzy
msgid "``classes``"
msgstr "``classes``"

# 9955661adae745558aba9cfa2744c160
#: ../../ref/contrib/admin/index.txt:397
msgid "A list or tuple containing extra CSS classes to apply to the fieldset."
msgstr "Список содержащий CSS классы, которые будут добавлены в группу полей."

# 2a06d528ae704c6d83fb015cffc3c60f
#: ../../ref/contrib/admin/index.txt:405
msgid ""
"Two useful classes defined by the default admin site stylesheet are "
"``collapse`` and ``wide``. Fieldsets with the ``collapse`` style will be "
"initially collapsed in the admin and replaced with a small \"click to expand"
"\" link. Fieldsets with the ``wide`` style will be given extra horizontal "
"space."
msgstr ""
"Django предоставляет два класса для использования: ``collapse`` и ``wide``. "
"Группа полей с классом ``collapse`` будет показа в свернутом виде с кнопкой "
"\"развернуть\". Группа полей с классом ``wide`` будет шире по горизонтали."

# 3a0b3d8c223b439080eb8b9a1ef49a5c
#: ../../ref/contrib/admin/index.txt:420
#, fuzzy
msgid "``description``"
msgstr "``description``"

# b4e46c6702924386bf7b1f50d63079f8
#: ../../ref/contrib/admin/index.txt:412
msgid ""
"A string of optional extra text to be displayed at the top of each fieldset, "
"under the heading of the fieldset. This string is not rendered for :class:"
"`~django.contrib.admin.TabularInline` due to its layout."
msgstr ""
"Необязательный текст, который будет отображаться под названием группы полей. "
"Этот текст не отображается для :class:`~django.contrib.admin.TabularInline`."

# eb4e894a4f7d4848a0c262c8d054d180
#: ../../ref/contrib/admin/index.txt:417
msgid ""
"Note that this value is *not* HTML-escaped when it's displayed in the admin "
"interface. This lets you include HTML if you so desire. Alternatively you "
"can use plain text and ``django.utils.html.escape()`` to escape any HTML "
"special characters."
msgstr ""
"Заметим, что этот текст *не* будет экранирован. Это позволяет добавить вам "
"HTML на страницу. Вы можете использовать обычный текст экранировав его "
"функцией ``django.utils.html.escape()``."

# ea9078fca58d459bb51f0c64ff926335
#: ../../ref/contrib/admin/index.txt:425
msgid ""
"By default, a :class:`~django.db.models.ManyToManyField` is displayed in the "
"admin site with a ``<select multiple>``. However, multiple-select boxes can "
"be difficult to use when selecting many items. Adding a :class:`~django.db."
"models.ManyToManyField` to this list will instead use a nifty unobtrusive "
"JavaScript \"filter\" interface that allows searching within the options. "
"The unselected and selected options appear in two boxes side by side. See :"
"attr:`~ModelAdmin.filter_vertical` to use a vertical interface."
msgstr ""
"По умолчанию, поле :class:`~django.db.models.ManyToManyField` отображается "
"как ``<select multiple>``. Однако, это поле тяжело использовать при большом "
"количестве объектов. Добавив :class:`~django.db.models.ManyToManyField` в "
"этот атрибут, будет использоваться \"виджет\" с JavaScript фильтром для "
"поиска. Смотрите описание :attr:`~ModelAdmin.filter_vertical` про "
"использование вертикального \"виджета\"."

# 28809e524fd54b849bd1fe30483d3237
#: ../../ref/contrib/admin/index.txt:436
msgid ""
"Same as :attr:`~ModelAdmin.filter_horizontal`, but uses a vertical display "
"of the filter interface with the box of unselected options appearing above "
"the box of selected options."
msgstr ""
"Аналогичен :attr:`~ModelAdmin.filter_horizontal`, но использует вертикальный "
"\"виджет\"."

# 218fd556e1d94d71bac4b17dc97318f4
#: ../../ref/contrib/admin/index.txt:442
msgid ""
"By default a ``ModelForm`` is dynamically created for your model. It is used "
"to create the form presented on both the add/change pages. You can easily "
"provide your own ``ModelForm`` to override any default form behavior on the "
"add/change pages. Alternatively, you can customize the default form rather "
"than specifying an entirely new one by using the :meth:`ModelAdmin.get_form` "
"method."
msgstr ""
"По умолчанию ``ModelForm`` создается динамически для модели. Этот атрибут "
"используется для определения формы на страницах добавления и редактирования. "
"Вы можете указать собственный подкласс ``ModelForm`` для переопределения "
"этих страниц. Вы можете модифицировать форму, а не создавать с нуля свою, "
"переопределив метод :meth:`ModelAdmin.get_form`."

# 7262249cc4774bd09f5be891a755a8dd
#: ../../ref/contrib/admin/index.txt:449
msgid "For an example see the section :ref:`admin-custom-validation`."
msgstr "Пример смотрите в разделе :ref:`admin-custom-validation`."

# 51ca310658ee43bba3ea4e7326d35bab
#: ../../ref/contrib/admin/index.txt:453
msgid ""
"If you define the ``Meta.model`` attribute on a :class:`~django.forms."
"ModelForm`, you must also define the ``Meta.fields`` attribute (or the "
"``Meta.exclude`` attribute). However, since the admin has its own way of "
"defining fields, the ``Meta.fields`` attribute will be ignored."
msgstr ""
"Если вы указали атрибут ``Meta.model`` для :class:`~django.forms.ModelForm`, "
"необходимо также указать ``Meta.fields`` (или ``Meta.exclude``). Однако, "
"если поля указаны при определении настроек интерфейса администратора, "
"атрибут ``Meta.fields`` будет проигнорирован."

# bc7859c2976c45cfb56d5b1567b98ae0
#: ../../ref/contrib/admin/index.txt:459
msgid ""
"If the ``ModelForm`` is only going to be used for the admin, the easiest "
"solution is to omit the ``Meta.model`` attribute, since ``ModelAdmin`` will "
"provide the correct model to use. Alternatively, you can set ``fields = []`` "
"in the ``Meta`` class to satisfy the validation on the ``ModelForm``."
msgstr ""
"Если ``ModelForm`` используется только для интерфейса администратора, проще "
"всего не указывать атрибут ``Meta.model``, т.к. ``ModelAdmin`` укажет "
"правильную модель. Вы можете указать ``fields = []`` в ``Meta`` чтобы "
"``ModelForm`` была правильной."

# c6bf049c43ea4e8898940229a0785cb8
#: ../../ref/contrib/admin/index.txt:467
msgid ""
"If your ``ModelForm`` and ``ModelAdmin`` both define an ``exclude`` option "
"then ``ModelAdmin`` takes precedence::"
msgstr ""
"Если и ``ModelForm`` и ``ModelAdmin`` определяют опцию ``exclude``,  "
"``ModelAdmin`` будет иметь больший приоритет::"

# c6d8aa02a7b849a6996ea85605a102b0
#: ../../ref/contrib/admin/index.txt:484
msgid ""
"In the above example, the \"age\" field will be excluded but the \"name\" "
"field will be included in the generated form."
msgstr ""
"В этом примере, поле \"age\" не будет добавлено в форму в отличии от поля "
"\"name\"."

# 391f86f38c7d425ab95de50524df3c86
#: ../../ref/contrib/admin/index.txt:489
msgid ""
"This provides a quick-and-dirty way to override some of the :class:`~django."
"forms.Field` options for use in the admin. ``formfield_overrides`` is a "
"dictionary mapping a field class to a dict of arguments to pass to the field "
"at construction time."
msgstr ""
"Позволяет быстро изменить настройки отображения различных типов :class:"
"`~django.forms.Field` в интерфейсе администратора. ``formfield_overrides`` "
"-- словарь указывающий параметры для классов полей, которые будут "
"передаваться в конструкторы указанных полей."

# 66ad040fdfc941c285c4b0661d93a9fb
#: ../../ref/contrib/admin/index.txt:494
msgid ""
"Since that's a bit abstract, let's look at a concrete example. The most "
"common use of ``formfield_overrides`` is to add a custom widget for a "
"certain type of field. So, imagine we've written a ``RichTextEditorWidget`` "
"that we'd like to use for large text fields instead of the default "
"``<textarea>``. Here's how we'd do that::"
msgstr ""
"Все это звучит немного абстрактно, так что давайте рассмотрим пример. Самое "
"распространенное применение  ``formfield_overrides`` это переопределить "
"\"виджет\" поля формы. Предположим у нас есть ``RichTextEditorWidget``, "
"который использует расширенное поля редактирования вместо ``<textarea>``. "
"Вот как мы может использовать его::"

# 63e89bd143ae4530ab319151e4b9cab9
#: ../../ref/contrib/admin/index.txt:512
msgid ""
"Note that the key in the dictionary is the actual field class, *not* a "
"string. The value is another dictionary; these arguments will be passed to "
"the form field's ``__init__()`` method. See :doc:`/ref/forms/api` for "
"details."
msgstr ""
"Заметим что ключ словаря класс поля, а *не* строка. Значение это словарь с "
"аргументами. Это аргументы будут переданы в ``__init__()``. Подробности "
"смотрите в разделе :doc:`/ref/forms/api`."

# 9b31e0ff6d614928a274f061c8274d85
#: ../../ref/contrib/admin/index.txt:519
#, fuzzy
msgid ""
"If you want to use a custom widget with a relation field (i.e. :class:"
"`~django.db.models.ForeignKey` or :class:`~django.db.models."
"ManyToManyField`), make sure you haven't included that field's name in "
"``raw_id_fields``, ``radio_fields``, or ``autocomplete_fields``."
msgstr ""
"Если вы хотите использовать собственный \"виджет\" для полей внешних ключей "
"(например, :class:`~django.db.models.ForeignKey` или :class:`~django.db."
"models.ManyToManyField`), убедитесь что поле не добавлено в  "
"``raw_id_fields`` или ``radio_fields``."

# 556b4f1e5d5d40a4a38cfd6413f8baa6
#: ../../ref/contrib/admin/index.txt:525
#, fuzzy
msgid ""
"``formfield_overrides`` won't let you change the widget on relation fields "
"that have ``raw_id_fields``, ``radio_fields``, or ``autocomplete_fields`` "
"set. That's because ``raw_id_fields``, ``radio_fields``, and "
"``autocomplete_fields`` imply custom widgets of their own."
msgstr ""
"``formfield_overrides`` не позволяет переопределить \"виджет\" для полей из "
"``raw_id_fields`` или ``radio_fields``, потому что ``raw_id_fields`` и "
"``radio_fields`` переопределяют виджет."

# 89cae539b19f44b5a8bbaec5287a55fe
#: ../../ref/contrib/admin/index.txt:533
msgid ""
"See :class:`InlineModelAdmin` objects below as well as :meth:`ModelAdmin."
"get_formsets_with_inlines`."
msgstr ""
"Смотрите описание ниже :class:`InlineModelAdmin`, а также :meth:`ModelAdmin."
"get_formsets_with_inlines`."

# 3be56666954e44d5bccd01eb79c0270a
#: ../../ref/contrib/admin/index.txt:538
msgid ""
"Set ``list_display`` to control which fields are displayed on the change "
"list page of the admin."
msgstr ""
"``list_display`` указывает какие поля отображать на странице списка объектов."

# 232115e256c046e080eab08772da2f19
#: ../../ref/contrib/admin/index.txt:545
#, fuzzy
msgid ""
"If you don't set ``list_display``, the admin site will display a single "
"column that displays the ``__str__()`` representation of each object."
msgstr ""
"Если ``list_display`` не указан, Django отобразить только результат "
"``__str__()``(``__unicode__()`` для Python 2) объекта."

# 0929f05c35284a50a7790f61c236aee4
#: ../../ref/contrib/admin/index.txt:548
msgid "You have four possible values that can be used in ``list_display``:"
msgstr "Вы можете указать четыре варианта значений в ``list_display``:"

# 9d82b68a9f0e47759c375e518f929f5c
#: ../../ref/contrib/admin/index.txt:550
msgid "A field of the model. For example::"
msgstr "Поле модели. Например::"

# 91cfba545f2241abb65349d9c3eb0a6e
#: ../../ref/contrib/admin/index.txt:555
msgid ""
"A callable that accepts one parameter for the model instance. For example::"
msgstr "Функция, которая принимает один аргумент - объект модели. Например::"

# ef8ef2a452e24add8533a515abc303d4
#: ../../ref/contrib/admin/index.txt:565
msgid ""
"A string representing an attribute on the ``ModelAdmin``. This behaves same "
"as the callable. For example::"
msgstr ""
"Название атрибута ``ModelAdmin``. Работает так же, как и функция. Например::"

# acb5997c894e4de0909c335183860a73
#: ../../ref/contrib/admin/index.txt:575
msgid ""
"A string representing an attribute on the model. This behaves almost the "
"same as the callable, but ``self`` in this context is the model instance. "
"Here's a full model example::"
msgstr ""
"Название атрибута модели. Работает так же, как и функция, но ``self`` в этом "
"контексте объект модели. Например::"

# 6e00fde306144b0388829d0dbd128c0f
#: ../../ref/contrib/admin/index.txt:593
msgid "A few special cases to note about ``list_display``:"
msgstr "Несколько особенностей ``list_display``:"

# e0e89baecd5e483580e1d2a3723ed4d0
#: ../../ref/contrib/admin/index.txt:595
#, fuzzy
msgid ""
"If the field is a ``ForeignKey``, Django will display the ``__str__()`` of "
"the related object."
msgstr ""
"Если указано поле ``ForeignKey``, Django покажет результат ``__str__()`` "
"(``__unicode__()`` для Python 2) связанного объекта."

# e123a7cd75f9431f8b7d93fdf94ee9c5
#: ../../ref/contrib/admin/index.txt:598
msgid ""
"``ManyToManyField`` fields aren't supported, because that would entail "
"executing a separate SQL statement for each row in the table. If you want to "
"do this nonetheless, give your model a custom method, and add that method's "
"name to ``list_display``. (See below for more on custom methods in "
"``list_display``.)"
msgstr ""
"``ManyToManyField`` не поддерживается, так как это влечет к созданию SQL "
"запроса для каждого объекта. Если вам необходимо сделать это в любом случае, "
"создайте метод модели и используйте его в ``list_display``. (Смотрите ниже "
"подробности про использование методов в ``list_display``.)"

# d5e24591e0184b428e6623392932f12e
#: ../../ref/contrib/admin/index.txt:604
msgid ""
"If the field is a ``BooleanField`` or ``NullBooleanField``, Django will "
"display a pretty \"on\" or \"off\" icon instead of ``True`` or ``False``."
msgstr ""
"Если поле ``BooleanField`` или ``NullBooleanField``, Django покажет красивую "
"\"on\" или \"off\" иконку вместо ``True`` или ``False``."

# 88a69833effb47d49eb8dd08c0a5e3cb
#: ../../ref/contrib/admin/index.txt:608
msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable, "
"Django will HTML-escape the output by default. To escape user input and "
"allow your own unescaped tags, use :func:`~django.utils.html.format_html`."
msgstr ""
"Если используется метод модели, ``ModelAdmin`` или функция, Django по "
"умолчанию экранирует результат. Если вам нужно экранировать данные, вводимые "
"пользователем, и не экранировать собственные теги, используйте :func:"
"`~django.utils.html.format_html`."

# 5315e21f98574a8d913d6954a48b163f
# 546a271edc95488a8cbe1cae00cd61c5
#: ../../ref/contrib/admin/index.txt:613 ../../ref/contrib/admin/index.txt:667
msgid "Here's a full example model::"
msgstr "Пример::"

#: ../../ref/contrib/admin/index.txt:635
msgid ""
"As some examples have already demonstrated, when using a callable, a model "
"method, or a ``ModelAdmin`` method, you can customize the column's title by "
"adding a ``short_description`` attribute to the callable."
msgstr ""

#: ../../ref/contrib/admin/index.txt:639
msgid ""
"If the value of a field is ``None``, an empty string, or an iterable without "
"elements, Django will display ``-`` (a dash). You can override this with :"
"attr:`AdminSite.empty_value_display`::"
msgstr ""
"Если значение поля ``None``, пустая строка, или пустой итератор, Django "
"покажет ``-`` (дефис). Вы можете переопределить это значение с помощью "
"параметра :attr:`AdminSite.empty_value_display`::"

#: ../../ref/contrib/admin/index.txt:647
#, fuzzy
msgid "You can also use :attr:`ModelAdmin.empty_value_display`::"
msgstr "Вы можете также использовать :attr:`AdminSite.empty_value_display`::"

#: ../../ref/contrib/admin/index.txt:652
msgid "Or on a field level::"
msgstr "Или для поля::"

# d661f24b7f2541cf9aece4a581100b3e
#: ../../ref/contrib/admin/index.txt:662
msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable "
"that returns True or False Django will display a pretty \"on\" or \"off\" "
"icon if you give the method a ``boolean`` attribute whose value is ``True``."
msgstr ""
"Если используется метод модели, ``ModelAdmin`` или функция, которая "
"возвращает True или False, Django покажет \"on\" или \"off\" иконки, если вы "
"добавите атрибут ``boolean`` методу или функции со значением ``True``."

# 1e259732b18e415fac5fc0eb2f11ed3b
#: ../../ref/contrib/admin/index.txt:683
#, fuzzy
msgid ""
"The ``__str__()`` method is just as valid in ``list_display`` as any other "
"model method, so it's perfectly OK to do this::"
msgstr ""
"Метод ``__str__()`` (``__unicode__()`` в Python 2) можно использовать в "
"``list_display`` как и любой другой метод модели::"

# 0c9cd12c11854d099e2b26c410c15d23
#: ../../ref/contrib/admin/index.txt:688
msgid ""
"Usually, elements of ``list_display`` that aren't actual database fields "
"can't be used in sorting (because Django does all the sorting at the "
"database level)."
msgstr ""
"Обычно элементы ``list_display``, которые не являются полями модели, не могу "
"быть использованы при сортировке (так как Django выполняет сортировку на "
"уровне базы данных)."

# e0e47599fdd242b5ab0c8ee2fe7fb27b
#: ../../ref/contrib/admin/index.txt:692
msgid ""
"However, if an element of ``list_display`` represents a certain database "
"field, you can indicate this fact by setting the ``admin_order_field`` "
"attribute of the item."
msgstr ""
"Однако, если элемент ``list_display`` представляет определенное поле в базе "
"данных, вы можете указать это добавив атрибут ``admin_order_field`` к "
"элементу."

# 62ca7f73d77f437a98976cffb9f1b3a0
#: ../../ref/contrib/admin/index.txt:696 ../../ref/contrib/admin/index.txt:748
msgid "For example::"
msgstr "Например::"

# 30120993458b42f593b19845aed80e31
#: ../../ref/contrib/admin/index.txt:718
msgid ""
"The above will tell Django to order by the ``first_name`` field when trying "
"to sort by ``colored_first_name`` in the admin."
msgstr ""
"В этом примере Django будет использовать поле ``first_name`` при сортировке "
"по ``colored_first_name``."

# aad7becc86a746b6b1bab219e73671d4
#: ../../ref/contrib/admin/index.txt:721
msgid ""
"To indicate descending order with ``admin_order_field`` you can use a hyphen "
"prefix on the field name. Using the above example, this would look like::"
msgstr ""
"Для обратной сортировки в ``admin_model_field`` можно использовать префикс "
"``-``. Например::"

#: ../../ref/contrib/admin/index.txt:727
msgid ""
"``admin_order_field`` supports query lookups to sort by values on related "
"models. This example includes an \"author first name\" column in the list "
"display and allows sorting it by first name::"
msgstr ""
"``admin_order_field`` позволяет добавить сортировку по значению из связанных "
"моделей. Этот пример содержит колонку \"имя автора\" и позволяет выполнить "
"сортировку по ней::"

# ae6c0458fc8e48a288573501b1b50c43
#: ../../ref/contrib/admin/index.txt:743
msgid ""
"Elements of ``list_display`` can also be properties. Please note however, "
"that due to the way properties work in Python, setting ``short_description`` "
"on a property is only possible when using the ``property()`` function and "
"**not** with the ``@property`` decorator."
msgstr ""
"В ``list_display`` можно указать свойства. Однако, учитывая как свойства "
"работают в Python, параметр ``short_description`` свойства можно указать "
"используя функцию ``property()``, а **не** декоратор ``@property``."

# 4cfc4988304a4cc79e38520eebbf70f9
#: ../../ref/contrib/admin/index.txt:764
msgid ""
"The field names in ``list_display`` will also appear as CSS classes in the "
"HTML output, in the form of ``column-<field_name>`` on each ``<th>`` "
"element. This can be used to set column widths in a CSS file for example."
msgstr ""
"Названия полей из ``list_display`` будут использованы в CSS классах, форма "
"будет содержать класс ``column-<field_name>`` для каждого элемента ``<th>``. "
"Так можно определить ширину полей через CSS стили."

# ab4d68f8d2d04bfe9f727d6de5b500a3
#: ../../ref/contrib/admin/index.txt:768
msgid ""
"Django will try to interpret every element of ``list_display`` in this order:"
msgstr ""
"Django попытается интерпретировать каждый элемент ``list_display`` в "
"следующем порядке:"

# 9d82b68a9f0e47759c375e518f929f5c
#: ../../ref/contrib/admin/index.txt:771
msgid "A field of the model."
msgstr "Поле модели."

# 402c18df4f054391b7eee1041d33f81b
#: ../../ref/contrib/admin/index.txt:772
msgid "A callable."
msgstr "Метод или любой другой вызываемый объект."

# 98914b66409f4b93bc51bffc787fcae8
#: ../../ref/contrib/admin/index.txt:773
msgid "A string representing a ``ModelAdmin`` attribute."
msgstr "Строка, представляющая атрибут ``ModelAdmin``."

# 19a367aa1b56415ca95001f8f46251df
#: ../../ref/contrib/admin/index.txt:774
msgid "A string representing a model attribute."
msgstr "Строка, представляющая атрибут модели."

# 0412a7985d59424c95e0fe8175a55460
#: ../../ref/contrib/admin/index.txt:776
msgid ""
"For example if you have ``first_name`` as a model field and as a "
"``ModelAdmin`` attribute, the model field will be used."
msgstr ""
"Например, если существует поле модели ``first_name`` и атрибут "
"``ModelAdmin``, будет использоваться поле модели."

# 82f63b9678be42138a9acba5a4e75d2e
#: ../../ref/contrib/admin/index.txt:782
msgid ""
"Use ``list_display_links`` to control if and which fields in :attr:"
"`list_display` should be linked to the \"change\" page for an object."
msgstr ""
"Используйте ``list_display_links``, чтобы указать какие поля в :attr:"
"`list_display` будут ссылками на страницу редактирования объекта."

# b224518110a649af8811bb3204bac993
#: ../../ref/contrib/admin/index.txt:785
msgid ""
"By default, the change list page will link the first column -- the first "
"field specified in ``list_display`` -- to the change page for each item. But "
"``list_display_links`` lets you change this:"
msgstr ""
"По умолчанию, на страницу редактирования объекта будет вести ссылка в первой "
"колонке -- первое поле в ``list_display``. Но ``list_display_links`` "
"позволяет изменить это поведение:"

# 3fefbe4a11b4423db09ed2a6adc2f837
#: ../../ref/contrib/admin/index.txt:789
msgid "Set it to ``None`` to get no links at all."
msgstr "Можно указать ``None``, чтобы убрать ссылки."

# 3f6ffe3fc6104c0a9a5883fe585a9b2b
#: ../../ref/contrib/admin/index.txt:790
msgid ""
"Set it to a list or tuple of fields (in the same format as ``list_display``) "
"whose columns you want converted to links."
msgstr ""
"Укажите список или кортеж полей (так же как и в ``list_display``) чьи "
"колонки должны быть ссылками на страницу редактирования."

# 3c824fc136b543a8b58b7c73705b5781
#: ../../ref/contrib/admin/index.txt:793
msgid ""
"You can specify one or many fields. As long as the fields appear in "
"``list_display``, Django doesn't care how many (or how few) fields are "
"linked. The only requirement is that if you want to use "
"``list_display_links`` in this fashion, you must define ``list_display``."
msgstr ""
"Вы можете указывать одно или несколько полей. Пока указанные поля входят в "
"``list_display``, Django безразлично сколько их. Единственное требование: "
"для использования ``list_display_links`` вы должны указать ``list_display``."

# ff011992f61e4eac90f09584a549442c
#: ../../ref/contrib/admin/index.txt:798
msgid ""
"In this example, the ``first_name`` and ``last_name`` fields will be linked "
"on the change list page::"
msgstr ""
"В этом примере поля ``first_name`` и ``last_name`` будут отображаться как "
"ссылки на страницу редактирования объекта::"

# 313e527c1bb0417a8a5b5f4549864217
#: ../../ref/contrib/admin/index.txt:805
msgid "In this example, the change list page grid will have no links::"
msgstr "В этом примере список объектов будет без ссылок::"

# e139ec3809ff49aea8605564ea9477e1
#: ../../ref/contrib/admin/index.txt:815
msgid ""
"Set ``list_editable`` to a list of field names on the model which will allow "
"editing on the change list page. That is, fields listed in ``list_editable`` "
"will be displayed as form widgets on the change list page, allowing users to "
"edit and save multiple rows at once."
msgstr ""
"Укажите в ``list_editable`` список полей, которые можно будет редактировать "
"на странице списка объектов. То есть, поля из ``list_editable`` будут "
"отображаться как поля формы позволяя пользователям изменять значения и "
"сохранять изменения для всех строк сразу."

# 7f349f5a6d774a7d96e4468d21722191
#: ../../ref/contrib/admin/index.txt:822
msgid ""
"``list_editable`` interacts with a couple of other options in particular "
"ways; you should note the following rules:"
msgstr ""
"``list_editable`` взаимодействует с другими настройками следующим образом:"

# 783f4214fb7e41eaaa7db0268e98c426
#: ../../ref/contrib/admin/index.txt:825
msgid ""
"Any field in ``list_editable`` must also be in ``list_display``. You can't "
"edit a field that's not displayed!"
msgstr ""
"Поле из ``list_editable`` должно входить в ``list_display``. Вы не можете "
"редактировать поле, которое не отображается!"

# fee1e5cd05bc4df4a75abd836628b468
#: ../../ref/contrib/admin/index.txt:828
msgid ""
"The same field can't be listed in both ``list_editable`` and "
"``list_display_links`` -- a field can't be both a form and a link."
msgstr ""
"Поле не может быть в ``list_editable`` и ``list_display_links`` вместе -- "
"поле не может быть ссылкой и полем формы."

# 3a6b53061ad445e8a680df7d0bfc4c08
#: ../../ref/contrib/admin/index.txt:832
msgid "You'll get a validation error if either of these rules are broken."
msgstr "Вы получите ошибку проверки если нарушите эти правила."

# ce2e78d8f148479eb6c7392247188aa6
#: ../../ref/contrib/admin/index.txt:836
msgid ""
"Set ``list_filter`` to activate filters in the right sidebar of the change "
"list page of the admin, as illustrated in the following screenshot:"
msgstr ""
"Укажите ``list_filter``, чтобы определить фильтры данных в правой панели "
"страницы списка объектов, как показано на изображении:"

# 3fb3c13827754ee7aee795f5524de903
#: ../../ref/contrib/admin/index.txt:841
msgid ""
"``list_filter`` should be a list or tuple of elements, where each element "
"should be of one of the following types:"
msgstr ""
"``list_filter`` - это список элементов, которые могу быть одного из "
"следующих типов:"

# c2c5834885f447718fcb44c399915a01
#: ../../ref/contrib/admin/index.txt:844
msgid ""
"a field name, where the specified field should be either a ``BooleanField``, "
"``CharField``, ``DateField``, ``DateTimeField``, ``IntegerField``, "
"``ForeignKey`` or ``ManyToManyField``, for example::"
msgstr ""
"название поля следующего типа: ``BooleanField``, ``CharField``, "
"``DateField``, ``DateTimeField``, ``IntegerField``, ``ForeignKey`` или "
"``ManyToManyField``. Например::"

# bcfd8bc23c17485b8a1a87456146db5b
#: ../../ref/contrib/admin/index.txt:851
msgid ""
"Field names in ``list_filter`` can also span relations using the ``__`` "
"lookup, for example::"
msgstr ""
"Поле в ``list_filter`` может указывать и на связанный объект используя "
"``__``, например::"

# 227963a5af384e9cb9d2948bbfb6cf35
#: ../../ref/contrib/admin/index.txt:857
msgid ""
"a class inheriting from ``django.contrib.admin.SimpleListFilter``, which you "
"need to provide the ``title`` and ``parameter_name`` attributes to and "
"override the ``lookups`` and ``queryset`` methods, e.g.::"
msgstr ""
"подкласс ``django.contrib.admin.SimpleListFilter``, в котором необходимо "
"определить атрибуты ``title`` и ``parameter_name`` и переопределить методы "
"``lookups`` и ``queryset``, например::"

# 005c3267db5544c6a15e3e171df7693f
#: ../../ref/contrib/admin/index.txt:908
msgid ""
"As a convenience, the ``HttpRequest`` object is passed to the ``lookups`` "
"and ``queryset`` methods, for example::"
msgstr ""
"Для удобства объект ``HttpRequest`` передается в методы ``lookups`` и "
"``queryset``, например::"

# 8ee7a72d926f4151bba0ab76e278c134
#: ../../ref/contrib/admin/index.txt:921
msgid ""
"Also as a convenience, the ``ModelAdmin`` object is passed to the "
"``lookups`` method, for example if you want to base the lookups on the "
"available data::"
msgstr ""
"Также объект ``ModelAdmin`` передается в метод ``lookups``. Например, вы "
"можете использовать существующие данные при создании фильтра::"

# 2171bf8ada7e453e8eb50b89df3cad48
#: ../../ref/contrib/admin/index.txt:940
msgid ""
"a tuple, where the first element is a field name and the second element is a "
"class inheriting from ``django.contrib.admin.FieldListFilter``, for example::"
msgstr ""
"кортеж, где первый элемент название поля, а второй - подкласс ``django."
"contrib.admin.FieldListFilter``, например::"

#: ../../ref/contrib/admin/index.txt:949
#, fuzzy
msgid ""
"You can limit the choices of a related model to the objects involved in that "
"relation using ``RelatedOnlyFieldListFilter``::"
msgstr ""
"Теперь вы можете ограничить фильтр значениями, которые встречаются в связи, "
"используя ``RelatedOnlyFieldListFilter``::"

#: ../../ref/contrib/admin/index.txt:957
msgid ""
"Assuming ``author`` is a ``ForeignKey`` to a ``User`` model, this will limit "
"the ``list_filter`` choices to the users who have written a book instead of "
"listing all users."
msgstr ""
"Предположим ``author`` это ``ForeignKey`` к модели ``User``, это ограничит "
"выбор в ``list_filter`` пользователями, которые написали книгу, вместо всех "
"пользователей."

# 67c3565a834f4e2794f98d4a11de130f
#: ../../ref/contrib/admin/index.txt:963
msgid ""
"The ``FieldListFilter`` API is considered internal and might be changed."
msgstr "API ``FieldListFilter`` считается внутренним и может быть изменено."

#: ../../ref/contrib/admin/index.txt:966
msgid ""
"List filter's typically appear only if the filter has more than one choice. "
"A filter's ``has_output()`` method controls whether or not it appears."
msgstr ""

# 1e256cc6ee454ea1b41a6de3dd6e867c
#: ../../ref/contrib/admin/index.txt:969
msgid ""
"It is possible to specify a custom template for rendering a list filter::"
msgstr "Вы можете указать собственный шаблон для отображения фильтра::"

# 4da1ea6823c84f938cbd8a7106a89094
#: ../../ref/contrib/admin/index.txt:974
#, fuzzy
msgid ""
"See the default template provided by Django (``admin/filter.html``) for a "
"concrete example."
msgstr ""
"Конкретный пример можно найти в шаблоне приложения интерфейса "
"администратора, который использует Django (``admin/filter.html``)."

# 9ff9ac3f3b3b4980be5168b9c2e44e6e
#: ../../ref/contrib/admin/index.txt:979
msgid ""
"Set ``list_max_show_all`` to control how many items can appear on a \"Show "
"all\" admin change list page. The admin will display a \"Show all\" link on "
"the change list only if the total result count is less than or equal to this "
"setting. By default, this is set to ``200``."
msgstr ""
"Используйте ``list_max_show_all``, чтобы указать количество объектов на "
"странице списка объектов при выборе \"Показать все\". Интерфейс "
"администратора покажет ссылку \"Показать все\" только если общее количество "
"объектов меньше или равно этому значению. По умолчанию равно ``200``."

# 9f8ebdd8d5c547f8b33727043567a4ac
#: ../../ref/contrib/admin/index.txt:986
msgid ""
"Set ``list_per_page`` to control how many items appear on each paginated "
"admin change list page. By default, this is set to ``100``."
msgstr ""
"Используйте ``list_per_page``, чтобы определить количество объектов на одной "
"странице при отображении списка объектов. По умолчанию равно ``100``."

# 51feaf568bc84515b4fcc579c8676393
#: ../../ref/contrib/admin/index.txt:991
msgid ""
"Set ``list_select_related`` to tell Django to use :meth:`~django.db.models."
"query.QuerySet.select_related` in retrieving the list of objects on the "
"admin change list page. This can save you a bunch of database queries."
msgstr ""
"Используйте ``list_select_related``, чтобы указать Django использовать :meth:"
"`~django.db.models.query.QuerySet.select_related` при выборе объектов для "
"страницы отображения объектов. Это может сократить количество запросов на "
"этой странице."

# 4eb5bb6829514d7ba4e9b3d42733e51b
#: ../../ref/contrib/admin/index.txt:996
msgid ""
"The value should be either a boolean, a list or a tuple. Default is "
"``False``."
msgstr ""
"Значение должно быть булево, список или кортеж. По умолчанию равно ``False``."

# 688dc583bea1463182ffa952a4dcc9ef
#: ../../ref/contrib/admin/index.txt:999
msgid ""
"When value is ``True``, ``select_related()`` will always be called. When "
"value is set to ``False``, Django will look at ``list_display`` and call "
"``select_related()`` if any ``ForeignKey`` is present."
msgstr ""
"При ``True``, ``select_related()`` всегда будет использоваться. При "
"``False``, Django найдет в ``list_display`` все ``ForeignKey`` и будет "
"использовать их с ``select_related()``."

# 20956c17b6b04a83aa1283c968155855
#: ../../ref/contrib/admin/index.txt:1003
msgid ""
"If you need more fine-grained control, use a tuple (or list) as value for "
"``list_select_related``. Empty tuple will prevent Django from calling "
"``select_related`` at all. Any other tuple will be passed directly to "
"``select_related`` as parameters. For example::"
msgstr ""
"Если вам нужен больший контроль, используйте список или кортеж для "
"``list_select_related``. Пустой кортеж укажет не использовать "
"``select_related``. Не пустой кортеж будет передан как параметр для "
"``select_related``. Например::"

# f5a840e477ee47328679833697e1b55f
#: ../../ref/contrib/admin/index.txt:1011
msgid "will call ``select_related('author', 'category')``."
msgstr "вызовет ``select_related('author', 'category')``."

# f30c949592e44519b7a89143e54b5c4f
#: ../../ref/contrib/admin/index.txt:1013
msgid ""
"If you need to specify a dynamic value based on the request, you can "
"implement a :meth:`~ModelAdmin.get_list_select_related` method."
msgstr ""
"Если вам необходимы динамические значения, которые зависят от текущего "
"запроса, вы можете определить метод :meth:`~ModelAdmin."
"get_list_select_related`."

# 5d19de131acc40eca1392c2c68de4f9c
#: ../../ref/contrib/admin/index.txt:1018
msgid ""
"Set ``ordering`` to specify how lists of objects should be ordered in the "
"Django admin views. This should be a list or tuple in the same format as a "
"model's :attr:`~django.db.models.Options.ordering` parameter."
msgstr ""
"``ordering`` позволяет определить сортировку на странице списка объектов. "
"Это должен быть список или кортеж в формате аналогичном параметру :attr:"
"`~django.db.models.Options.ordering`."

# 6718dc2bc53449909a33b0589c5d68ed
#: ../../ref/contrib/admin/index.txt:1022
msgid ""
"If this isn't provided, the Django admin will use the model's default "
"ordering."
msgstr ""
"Если атрибут не указана, Django будет использовать сортировку по умолчанию "
"модели."

# f30c949592e44519b7a89143e54b5c4f
#: ../../ref/contrib/admin/index.txt:1025
msgid ""
"If you need to specify a dynamic order (for example depending on user or "
"language) you can implement a :meth:`~ModelAdmin.get_ordering` method."
msgstr ""
"Если вам необходима динамическая сортировка (например, в зависимости от "
"пользователя или текущего языка) вы можете определить метод :meth:"
"`~ModelAdmin.get_ordering`."

# 11fdfb11298f4a4d9da4ef551cafac00
#: ../../ref/contrib/admin/index.txt:1030
msgid ""
"The paginator class to be used for pagination. By default, :class:`django."
"core.paginator.Paginator` is used. If the custom paginator class doesn't "
"have the same constructor interface as :class:`django.core.paginator."
"Paginator`, you will also need to provide an implementation for :meth:"
"`ModelAdmin.get_paginator`."
msgstr ""
"Класс, используемый для создания постраничного отображения. По умолчанию "
"используется :class:`django.core.paginator.Paginator`. Если конструктор "
"вашего класса принимает параметры отличные от :class:`django.core.paginator."
"Paginator`, вам необходимо также переопределить метод :meth:`ModelAdmin."
"get_paginator`."

# ac1851c9ed884393b11c174b83a31f72
#: ../../ref/contrib/admin/index.txt:1038
msgid ""
"Set ``prepopulated_fields`` to a dictionary mapping field names to the "
"fields it should prepopulate from::"
msgstr ""
"``prepopulated_fields`` позволяет определить поля, которые получают значение "
"основываясь на значениях других полей::"

# f365a4b966e94bb6902f21f7b3a90cbd
#: ../../ref/contrib/admin/index.txt:1044
msgid ""
"When set, the given fields will use a bit of JavaScript to populate from the "
"fields assigned. The main use for this functionality is to automatically "
"generate the value for ``SlugField`` fields from one or more other fields. "
"The generated value is produced by concatenating the values of the source "
"fields, and then by transforming that result into a valid slug (e.g. "
"substituting dashes for spaces)."
msgstr ""
"Указанные поля будут использовать код JavaScript для заполнения поля "
"значением на основе значений полей-источников. Основное применение - это "
"генерировать значение для полей ``SlugField`` из значений другого поля или "
"полей. Процесс генерирования состоит в объединении значений полей-источников "
"и преобразованию результата в правильный \"slug\" (например, заменой "
"пробелов на дефисы)."

#: ../../ref/contrib/admin/index.txt:1051
msgid ""
"Fields are prepopulated on add forms but not on change forms. It's usually "
"undesired that slugs change after an object is created (which would cause an "
"object's URL to change if the slug is used in it)."
msgstr ""

# b870ff79451343cdb0d24d0958f442d8
#: ../../ref/contrib/admin/index.txt:1055
#, fuzzy
msgid ""
"``prepopulated_fields`` doesn't accept ``DateTimeField``, ``ForeignKey``, "
"``OneToOneField``, and ``ManyToManyField`` fields."
msgstr ""
"``prepopulated_fields`` не принимает поля ``DateTimeField``, ``ForeignKey`` "
"или ``ManyToManyField``."

# a253df6b9a1c4fb2a5b263f4820900e5
#: ../../ref/contrib/admin/index.txt:1060
msgid ""
"The admin now preserves filters on the list view after creating, editing or "
"deleting an object. You can restore the previous behavior of clearing "
"filters by setting this attribute to ``False``."
msgstr ""
"Интерфейс администратора сохраняет состояние фильтров после создания, "
"редактирования и удаления объектов. Чтобы отключить это поведение, "
"используйте ``False``."

# 71d8333206084f21925a03679f1613ca
#: ../../ref/contrib/admin/index.txt:1066
msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields "
"that are ``ForeignKey`` or have ``choices`` set. If a field is present in "
"``radio_fields``, Django will use a radio-button interface instead. Assuming "
"``group`` is a ``ForeignKey`` on the ``Person`` model::"
msgstr ""
"По умолчанию Django использует <select> для полей ``ForeignKey`` или тех, "
"которые содержат ``choices``. Ели поле указанно в ``radio_fields``, Django "
"будет использовать радио кнопки. Предположим что ``group`` поле "
"``ForeignKey`` в модели ``Person``::"

# 420f00867b68457b8b805312931f2d21
#: ../../ref/contrib/admin/index.txt:1074
msgid ""
"You have the choice of using ``HORIZONTAL`` or ``VERTICAL`` from the "
"``django.contrib.admin`` module."
msgstr ""
"Вы можете использовать ``HORIZONTAL`` или ``VERTICAL`` из модуля ``django."
"contrib.admin``."

# 29fde17f54874e3e9428d9104c977d92
#: ../../ref/contrib/admin/index.txt:1077
msgid ""
"Don't include a field in ``radio_fields`` unless it's a ``ForeignKey`` or "
"has ``choices`` set."
msgstr ""
"Не добавляйте в ``radio_fields`` поля, которые не являются ``ForeignKey`` "
"или не содержат ``choices``."

#: ../../ref/contrib/admin/index.txt:1084
msgid ""
"``autocomplete_fields`` is a list of ``ForeignKey`` and/or "
"``ManyToManyField`` fields you would like to change to `Select2 <https://"
"select2.org/>`_ autocomplete inputs."
msgstr ""

# e3d7ead25dfc400a9cc2b1a97fad67f7
# dc490269f5784354b693b7fd9ba33647
#: ../../ref/contrib/admin/index.txt:1088
#, fuzzy
msgid ""
"By default, the admin uses a select-box interface (``<select>``) for those "
"fields. Sometimes you don't want to incur the overhead of selecting all the "
"related instances to display in the dropdown."
msgstr ""
"По умолчанию Django использует <select> для полей ``ForeignKey``. Если "
"связанных объектов очень много, создание <select> может быть очень затратным "
"процессом."

#: ../../ref/contrib/admin/index.txt:1092
msgid ""
"The Select2 input looks similar to the default input but comes with a search "
"feature that loads the options asynchronously. This is faster and more user-"
"friendly if the related model has many instances."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1096
msgid ""
"You must define :attr:`~ModelAdmin.search_fields` on the related object's "
"``ModelAdmin`` because the autocomplete search uses it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1099
msgid ""
"Ordering and pagination of the results are controlled by the related "
"``ModelAdmin``'s :meth:`~ModelAdmin.get_ordering` and :meth:`~ModelAdmin."
"get_paginator` methods."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1103
msgid ""
"In the following example, ``ChoiceAdmin`` has an autocomplete field for the "
"``ForeignKey`` to the ``Question``. The results are filtered by the "
"``question_text`` field and ordered by the ``date_created`` field::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1114
msgid "Performance considerations for large datasets"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1116
msgid ""
"Ordering using :attr:`ModelAdmin.ordering` may cause performance problems as "
"sorting on a large queryset will be slow."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1119
msgid ""
"Also, if your search fields include fields that aren't indexed by the "
"database, you might encounter poor performance on extremely large tables."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1123
msgid ""
"For those cases, it's a good idea to write your own :func:`ModelAdmin."
"get_search_results` implementation using a full-text indexed search."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1127
msgid ""
"You may also want to change the ``Paginator`` on very large tables as the "
"default paginator always performs a ``count()`` query. For example, you "
"could override the default implementation of the ``Paginator.count`` "
"property."
msgstr ""

# e3d7ead25dfc400a9cc2b1a97fad67f7
# dc490269f5784354b693b7fd9ba33647
#: ../../ref/contrib/admin/index.txt:1134
#: ../../ref/contrib/admin/index.txt:2231
msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields "
"that are ``ForeignKey``. Sometimes you don't want to incur the overhead of "
"having to select all the related instances to display in the drop-down."
msgstr ""
"По умолчанию Django использует <select> для полей ``ForeignKey``. Если "
"связанных объектов очень много, создание <select> может быть очень затратным "
"процессом."

# 12a55fe0620843c691995c080079b021
#: ../../ref/contrib/admin/index.txt:1139
#: ../../ref/contrib/admin/index.txt:2236
msgid ""
"``raw_id_fields`` is a list of fields you would like to change into an "
"``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""
"``raw_id_fields`` содержит список полей, которые будут использовать поле "
"``Input`` для ``ForeignKey`` или ``ManyToManyField``::"

# 2690264c51914c129095c72129a5cf4d
#: ../../ref/contrib/admin/index.txt:1146
msgid ""
"The ``raw_id_fields`` ``Input`` widget should contain a primary key if the "
"field is a ``ForeignKey`` or a comma separated list of values if the field "
"is a ``ManyToManyField``.  The ``raw_id_fields`` widget shows a magnifying "
"glass button next to the field which allows users to search for and select a "
"value:"
msgstr ""
"Виджет поля для ``raw_id_fields`` будет содержать значение первичного ключа "
"для ``ForeignKey`` или список ключей для ``ManyToManyField``.  Возле поля "
"есть кнопка поиска и выбора связанных объектов:"

# 05c4e6d9f168447d952107941e9ffa0b
#: ../../ref/contrib/admin/index.txt:1156
msgid ""
"By default the admin shows all fields as editable. Any fields in this option "
"(which should be a ``list`` or ``tuple``) will display its data as-is and "
"non-editable; they are also excluded from the :class:`~django.forms."
"ModelForm` used for creating and editing. Note that when specifying :attr:"
"`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` the read-only fields "
"must be present to be shown (they are ignored otherwise)."
msgstr ""
"По умолчанию интерфейс администратора отображает все поля как редактируемые. "
"Поля указанные в этой настройке (которая является ``list`` или ``tuple``) "
"будут отображаться значение без возможности редактировать, они также будут "
"исключены из :class:`~django.forms.ModelForm` используемой для создания и "
"редактирования объектов. Однако, если вы определяете аргумент :attr:"
"`ModelAdmin.fields` или :attr:`ModelAdmin.fieldsets` поля для чтения должны "
"быть в них указаны (иначе они будут проигнорированы)."

# 316d511e874b45c391296a3a755ae1e1
#: ../../ref/contrib/admin/index.txt:1164
msgid ""
"If ``readonly_fields`` is used without defining explicit ordering through :"
"attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be added "
"last after all editable fields."
msgstr ""
"Если ``readonly_fields`` используется без определения порядка полей через "
"атрибуты :attr:`ModelAdmin.fields` или :attr:`ModelAdmin.fieldsets`, поля из "
"этой настройки будут отображаться после редактируемых полей."

# 1ebb7fce2e7a4ac3905cc1f1762622ae
#: ../../ref/contrib/admin/index.txt:1168
msgid ""
"A read-only field can not only display data from a model's field, it can "
"also display the output of a model's method or a method of the "
"``ModelAdmin`` class itself. This is very similar to the way :attr:"
"`ModelAdmin.list_display` behaves. This provides an easy way to use the "
"admin interface to provide feedback on the status of the objects being "
"edited, for example::"
msgstr ""
"Read-only поле может показывать данные не только поля модели, но и метода, а "
"также метода определенного в подклассе ``ModelAdmin``. Работает как :attr:"
"`ModelAdmin.list_display`. Это позволяет отображать различную информацию о "
"редактируемом объекте, например::"

# 2869b96c111848dab3426d62e705a09a
#: ../../ref/contrib/admin/index.txt:1197
#, fuzzy
msgid ""
"Set ``save_as`` to enable a \"save as new\" feature on admin change forms."
msgstr ""
"Укажите ``save_as``, чтобы включить возможность \"сохранять как\" на "
"странице редактирования объекта."

# fc4be01514f049c8b00497ecfa5ddedd
#: ../../ref/contrib/admin/index.txt:1199
#, fuzzy
msgid ""
"Normally, objects have three save options: \"Save\", \"Save and continue "
"editing\", and \"Save and add another\". If ``save_as`` is ``True``, \"Save "
"and add another\" will be replaced by a \"Save as new\" button that creates "
"a new object (with a new ID) rather than updating the existing object."
msgstr ""
"По умолчанию страница содержит три кнопки: \"Сохранить\", \"Сохранить и "
"продолжить редактирование\" и \"Сохранить и добавить новый\". Если "
"``save_as`` равен ``True``, \"Сохранить и добавить новый\" будет заменена "
"кнопкой \"Сохранить как\"."

# 6042eee3a5e7499181b4ca22cf70ccce
#: ../../ref/contrib/admin/index.txt:1204
msgid "By default, ``save_as`` is set to ``False``."
msgstr "По умолчанию ``save_as`` равен ``False``."

#: ../../ref/contrib/admin/index.txt:1208
msgid ""
"When :attr:`save_as=True <save_as>`, the default redirect after saving the "
"new object is to the change view for that object. If you set "
"``save_as_continue=False``, the redirect will be to the changelist view."
msgstr ""

# 6042eee3a5e7499181b4ca22cf70ccce
#: ../../ref/contrib/admin/index.txt:1212
#, fuzzy
msgid "By default, ``save_as_continue`` is set to ``True``."
msgstr "По умолчанию ``save_as`` равен ``False``."

# 6db438e0b67b4022a5be400f7dcabb0a
#: ../../ref/contrib/admin/index.txt:1216
msgid ""
"Set ``save_on_top`` to add save buttons across the top of your admin change "
"forms."
msgstr ""
"Укажите ``save_on_top``, чтобы добавить кнопки сохранения в верхней части "
"страницы редактирования объекта."

# 47ef3911cf454551afb563e1fabcac63
#: ../../ref/contrib/admin/index.txt:1219
msgid ""
"Normally, the save buttons appear only at the bottom of the forms. If you "
"set ``save_on_top``, the buttons will appear both on the top and the bottom."
msgstr ""
"По умолчанию кнопки сохранения отображаются под формой. Если указать "
"``save_on_top``, кнопки будут отображаться и сверху и снизу."

# 76ccee221d8d482aa915047c7c04e644
#: ../../ref/contrib/admin/index.txt:1223
msgid "By default, ``save_on_top`` is set to ``False``."
msgstr "По умолчанию ``save_on_top`` равен ``False``."

# 06dea4abdbe34c1a9fc1fc0e01d4382c
#: ../../ref/contrib/admin/index.txt:1227
msgid ""
"Set ``search_fields`` to enable a search box on the admin change list page. "
"This should be set to a list of field names that will be searched whenever "
"somebody submits a search query in that text box."
msgstr ""
"``search_fields`` позволяет добавить поиск на страницу списка объектов. Этот "
"атрибут должен содержать список полей, которые будут использоваться при "
"поиске."

# d040d49bab784a7fa68d42c63bce2a8f
#: ../../ref/contrib/admin/index.txt:1231
msgid ""
"These fields should be some kind of text field, such as ``CharField`` or "
"``TextField``. You can also perform a related lookup on a ``ForeignKey`` or "
"``ManyToManyField`` with the lookup API \"follow\" notation::"
msgstr ""
"Эти поля должны быть текстовыми, таким как ``CharField`` или ``TextField``. "
"Вы можете указать поля из связанных объектов используя ``__``::"

# 8c834b31921f4019b155235bb0f6fd5d
#: ../../ref/contrib/admin/index.txt:1237
msgid ""
"For example, if you have a blog entry with an author, the following "
"definition would enable searching blog entries by the email address of the "
"author::"
msgstr ""
"Например, у нас есть модель записи в блоге с полем автора. Следующая "
"настройка позволит искать записи по email адресу автора::"

# 542809d6d2b84173a23c585daf833902
#: ../../ref/contrib/admin/index.txt:1243
msgid ""
"When somebody does a search in the admin search box, Django splits the "
"search query into words and returns all objects that contain each of the "
"words, case insensitive, where each word must be in at least one of "
"``search_fields``. For example, if ``search_fields`` is set to "
"``['first_name', 'last_name']`` and a user searches for ``john lennon``, "
"Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""
"При поиске Django разбивает поисковый запрос на слова и возвращает объекты, "
"которые содержат эти слова в одном из указанных в ``search_fields`` полей. "
"Поиск регистронезависимый. Например, если ``search_fields`` равен "
"``['first_name', 'last_name']`` и пользователь выполняет поиск по ``john "
"lennon``, Django создаст такое SQL условие ``WHERE``::"

# f85233335e1140d0839cfb24c8bff579
#: ../../ref/contrib/admin/index.txt:1253
msgid ""
"For faster and/or more restrictive searches, prefix the field name with an "
"operator:"
msgstr ""
"Для определения более конкретных условий поиска используйте следующие "
"префиксы:"

# 9a2fac72fcfe4e3c84bcf54d251062ca
#: ../../ref/contrib/admin/index.txt:1270
msgid "``^``"
msgstr "``^``"

# 3ddc446099a64708a35d40705e2a491e
#: ../../ref/contrib/admin/index.txt:1257
msgid ""
"Use the '^' operator to match starting at the beginning of the field. For "
"example, if ``search_fields`` is set to ``['^first_name', '^last_name']`` "
"and a user searches for ``john lennon``, Django will do the equivalent of "
"this SQL ``WHERE`` clause::"
msgstr ""
"Оператор '^' указывает на начало строки. Например, если ``search_fields`` "
"установить в ``['^first_name', '^last_name']`` и пользователь ищет ``john "
"lennon``, Django создаст следующее SQL условие ``WHERE``::"

# 89188e0642eb48dc9cdac834d0109d63
#: ../../ref/contrib/admin/index.txt:1266
msgid ""
"This query is more efficient than the normal ``'%john%'`` query, because the "
"database only needs to check the beginning of a column's data, rather than "
"seeking through the entire column's data. Plus, if the column has an index "
"on it, some databases may be able to use the index for this query, even "
"though it's a ``LIKE`` query."
msgstr ""
"Этот запрос более эффективный чем ``'%john%'``, так как база данных будет "
"проверять только начало значения поля. К тому же, если поле содержит индекс, "
"некоторые базы данных могут использовать его при поиске, даже для поиска "
"через ``LIKE``."

# 71857c86dd314bdc9d8e63e42a32ea29
#: ../../ref/contrib/admin/index.txt:1284
msgid "``=``"
msgstr "``=``"

# efec6bde461e45508706a79a86ab764a
#: ../../ref/contrib/admin/index.txt:1273
msgid ""
"Use the '=' operator for case-insensitive exact matching. For example, if "
"``search_fields`` is set to ``['=first_name', '=last_name']`` and a user "
"searches for ``john lennon``, Django will do the equivalent of this SQL "
"``WHERE`` clause::"
msgstr ""
"Оператор '=' указывает полное совпадение, регистронезависимое. Например, "
"если ``search_fields`` равно ``['=first_name', '=last_name']`` и "
"пользователь ищет ``john lennon``, Django создаст следующее SQL условие "
"``WHERE``::"

# 6cade857d4994410a19b64d345214eb2
#: ../../ref/contrib/admin/index.txt:1282
msgid ""
"Note that the query input is split by spaces, so, following this example, "
"it's currently not possible to search for all records in which "
"``first_name`` is exactly ``'john winston'`` (containing a space)."
msgstr ""
"Поисковый запрос разбивается по пробелам, поэтому, исходя из примера выше, "
"нельзя найти записи с полем ``first_name`` равным ``'john "
"winston'``(содержащим пробел)."

# b49d1758b5f44b0f96aec6b3fe7fe8b4
#: ../../ref/contrib/admin/index.txt:1289
msgid "``@``"
msgstr "``@``"

# ea83e4f3a42d4056bfa5fff1258e7b5d
#: ../../ref/contrib/admin/index.txt:1287
msgid ""
"Using the '@' operator to perform a full text match. This is like the "
"default search method but uses an index. Currently this is only available "
"for MySQL."
msgstr ""
"Оператор '@' выполняет полнотекстовый поиск. Работает как и обычный поиск, "
"но использует индекс. На данный момент это работает только в MySQL."

# 44eadf644f634f829abb46341a4573bf
#: ../../ref/contrib/admin/index.txt:1291
msgid ""
"If you need to customize search you can use :meth:`ModelAdmin."
"get_search_results` to provide additional or alternate search behavior."
msgstr ""
"Вы можете переопределить метод :meth:`ModelAdmin.get_search_results`, чтобы "
"указать дополнительные параметры при поиске, или переопределить механизм "
"поиска."

#: ../../ref/contrib/admin/index.txt:1297
msgid ""
"Set ``show_full_result_count`` to control whether the full count of objects "
"should be displayed on a filtered admin page (e.g. ``99 results (103 "
"total)``). If this option is set to ``False``, a text like ``99 results "
"(Show all)`` is displayed instead."
msgstr ""
"``show_full_result_count`` указывает показывать ли количество всех объектов "
"при фильтрации (например ``99 results (103 total)``). Если опция равна "
"``False``, будет показан подобный текст: ``99 results (Show all)``."

#: ../../ref/contrib/admin/index.txt:1302
msgid ""
"The default of ``show_full_result_count=True`` generates a query to perform "
"a full count on the table which can be expensive if the table contains a "
"large number of rows."
msgstr ""
"По умолчанию ``show_full_result_count=True`` выполняет запрос, чтобы "
"получить количество всех объектов, что может работать очень медленно для "
"таблиц с большим количеством данных."

# 82b0bba6dd0b4bdfafabb01e72110141
#: ../../ref/contrib/admin/index.txt:1308
msgid ""
"Set ``view_on_site`` to control whether or not to display the \"View on site"
"\" link. This link should bring you to a URL where you can display the saved "
"object."
msgstr ""
"``view_on_site`` определять показывать ли ссылку \"Посмотреть на сайте\". "
"Эта ссылка должна вести на страницу сохраненного объекта."

# fcc7ee75d33640f6858dbb887929a4e3
#: ../../ref/contrib/admin/index.txt:1311
msgid ""
"This value can be either a boolean flag or a callable. If ``True`` (the "
"default), the object's :meth:`~django.db.models.Model.get_absolute_url` "
"method will be used to generate the url."
msgstr ""
"Можно указать булево или функцию. При ``True`` (по умолчанию) будет "
"использоваться метод :meth:`~django.db.models.Model.get_absolute_url` "
"объекта для получения ссылки."

# d181d1ac1fe9439fa42a86a0d909f28e
#: ../../ref/contrib/admin/index.txt:1315
msgid ""
"If your model has a :meth:`~django.db.models.Model.get_absolute_url` method "
"but you don't want the \"View on site\" button to appear, you only need to "
"set ``view_on_site`` to ``False``::"
msgstr ""
"Если модель содержит метод :meth:`~django.db.models.Model.get_absolute_url`, "
"но вы не хотите показывать кнопку \"Посмотреть на сайте\", укажите ``False`` "
"в ``view_on_site``::"

# 91cfba545f2241abb65349d9c3eb0a6e
#: ../../ref/contrib/admin/index.txt:1324
msgid ""
"In case it is a callable, it accepts the model instance as a parameter. For "
"example::"
msgstr ""
"Можно указать функцию, которая принимает один аргумент - объект модели. "
"Например::"

# 51ba9c8cd4f64348bbced470447b9006
#: ../../ref/contrib/admin/index.txt:1336
msgid "Custom template options"
msgstr "Настройки шаблонов"

# c12dec27993642da998b5e9e628fd661
#: ../../ref/contrib/admin/index.txt:1338
msgid ""
"The :ref:`admin-overriding-templates` section describes how to override or "
"extend the default admin templates.  Use the following options to override "
"the default templates used by the :class:`ModelAdmin` views:"
msgstr ""
"Раздел :ref:`admin-overriding-templates` описывает как переопределить или "
"расширить шаблоны интерфейса администратора. Используйте следующие "
"настройки, чтобы переопределить шаблоны, которые используются "
"представлениями :class:`ModelAdmin`:"

# b175857c7bc1431884a4c5a1588e2bc5
#: ../../ref/contrib/admin/index.txt:1344
msgid "Path to a custom template, used by :meth:`add_view`."
msgstr "Путь к шаблону, который используется :meth:`add_view`."

# 1f808b101c514eceaa2576b3d4777886
#: ../../ref/contrib/admin/index.txt:1348
msgid "Path to a custom template, used by :meth:`change_view`."
msgstr "Путь к шаблону, который используется :meth:`change_view`."

# 84064ef4bbbf464d894f5d1de308e2b0
#: ../../ref/contrib/admin/index.txt:1352
msgid "Path to a custom template, used by :meth:`changelist_view`."
msgstr "Путь к шаблону, который используется :meth:`changelist_view`."

# c1cb2d319304433c912d0b63c62aa68a
#: ../../ref/contrib/admin/index.txt:1356
msgid ""
"Path to a custom template, used by :meth:`delete_view` for displaying a "
"confirmation page when deleting one or more objects."
msgstr ""
"Путь к шаблону, который используется :meth:`delete_view` для отображения "
"страницы подтверждения удаления одного или нескольких объектов."

# d0b9dda2d3374f07b056adf56d7a311d
#: ../../ref/contrib/admin/index.txt:1361
msgid ""
"Path to a custom template, used by the ``delete_selected`` action method for "
"displaying a confirmation page when deleting one or more objects. See the :"
"doc:`actions documentation</ref/contrib/admin/actions>`."
msgstr ""
"Путь к шаблону, который используется ``delete_selected`` для отображения "
"страницы подтверждения удаления одного или нескольких объектов. Подробности "
"смотрите в разделе о :doc:`действиях в интерфейсе администратора </ref/"
"contrib/admin/actions>`."

# a01b755d270442488f1c1ae7f8f65510
#: ../../ref/contrib/admin/index.txt:1367
msgid "Path to a custom template, used by :meth:`history_view`."
msgstr "Путь к шаблону, который используется :meth:`history_view`."

# 1f808b101c514eceaa2576b3d4777886
#: ../../ref/contrib/admin/index.txt:1373
#, fuzzy
msgid ""
"Path to a custom template, used by :meth:`response_add`, :meth:"
"`response_change`, and :meth:`response_delete`."
msgstr "Путь к шаблону, который используется :meth:`change_view`."

# 5c51404f4e064efa86ad97e9fa446ca1
#: ../../ref/contrib/admin/index.txt:1379
msgid "``ModelAdmin`` methods"
msgstr "Методы ``ModelAdmin``"

# e687c6dac0b740da8d98170eb85d7f39
#: ../../ref/contrib/admin/index.txt:1383
#, fuzzy
msgid ""
"When overriding :meth:`ModelAdmin.save_model` and :meth:`ModelAdmin."
"delete_model`, your code must save/delete the object. They aren't meant for "
"veto purposes, rather they allow you to perform extra operations."
msgstr ""
"Методы :meth:`ModelAdmin.save_model` и :meth:`ModelAdmin.delete_model` "
"должны сохранять/удалять объект. Их задача выполнять дополнительные "
"операции, а не разрешать/запрещать операции удаления/сохранения."

# 124640a2d1914f549ebd677fdaa6b357
#: ../../ref/contrib/admin/index.txt:1390
#, fuzzy
msgid ""
"The ``save_model`` method is given the ``HttpRequest``, a model instance, a "
"``ModelForm`` instance, and a boolean value based on whether it is adding or "
"changing the object. Overriding this method allows doing pre- or post-save "
"operations. Call ``super().save_model()`` to save the object using :meth:`."
"Model.save`."
msgstr ""
"Метод ``save_model`` принимает объект ``HttpRequest``, экземпляр модели, "
"экземпляр ``ModelForm`` и булево значение указывающее создан объект или "
"изменяется. В этом методе вы может выполнить дополнительные операции до или "
"после сохранения."

# 64a9bf81894d40a389b7d16ba267be7b
#: ../../ref/contrib/admin/index.txt:1396
msgid "For example to attach ``request.user`` to the object prior to saving::"
msgstr ""
"Например, добавление ``request.user`` к объекту перед сохранением объекта::"

# a4cdf8556b3d4e77960cb9ec3e1d81ad
#: ../../ref/contrib/admin/index.txt:1407
#, fuzzy
msgid ""
"The ``delete_model`` method is given the ``HttpRequest`` and a model "
"instance. Overriding this method allows doing pre- or post-delete "
"operations. Call ``super().delete_model()`` to delete the object using :meth:"
"`.Model.delete`."
msgstr ""
"Метод ``delete_model`` принимает объект ``HttpRequest`` и экземпляр модели, "
"который удаляется. В этом методе вы может выполнить дополнительные операции "
"до или после удаления."

# 8ec73ef4f8464ffe900fc18a2b2d4568
#: ../../ref/contrib/admin/index.txt:1414
msgid ""
"The ``save_formset`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance and a boolean value based on whether it is adding or "
"changing the parent object."
msgstr ""
"Метод ``save_formset`` принимает объект ``HttpRequest``, ``ModelForm`` "
"родительского объекта, \"formset\" связанных объектов и булево значение "
"указывающее создан родительский объект или изменяется."

# d6aa94bfcd8249bf89d363eace0059bc
#: ../../ref/contrib/admin/index.txt:1418
msgid ""
"For example, to attach ``request.user`` to each changed formset model "
"instance::"
msgstr ""
"Например, добавление ``request.user`` к каждому объекту, измененному в "
"наборе форм::"

#: ../../ref/contrib/admin/index.txt:1431
msgid "See also :ref:`saving-objects-in-the-formset`."
msgstr "Смотрите также :ref:`saving-objects-in-the-formset`."

# 4c553079f4614a8a96d44bac98a5ed56
#: ../../ref/contrib/admin/index.txt:1435
msgid ""
"The ``get_ordering`` method takes a ``request`` as parameter and is expected "
"to return a ``list`` or ``tuple`` for ordering similar to the :attr:"
"`ordering` attribute. For example::"
msgstr ""
"Метод ``get_ordering`` принимает объект ``request`` и должен вернуть "
"``list`` или ``tuple`` с параметрами сортировки аналогично атрибуту :attr:"
"`ordering`. Например::"

# 2e4f6b17a6624d6a9230e426150edf5e
#: ../../ref/contrib/admin/index.txt:1449
msgid ""
"The ``get_search_results`` method modifies the list of objects displayed "
"into those that match the provided search term. It accepts the request, a "
"queryset that applies the current filters, and the user-provided search "
"term. It returns a tuple containing a queryset modified to implement the "
"search, and a boolean indicating if the results may contain duplicates."
msgstr ""
"Метод ``get_search_results`` фильтрует список объектов в соответствии с "
"параметрами поиска. Он принимает запрос, ``queryset`` объектов, и параметры "
"поиска указанные пользователем. Возвращает кортеж содержащий полученный "
"``queryset`` и булево указывающее может ли результат содержать одинаковые "
"значения."

# d3d0a4ece262446ab655f2e266d4eb41
#: ../../ref/contrib/admin/index.txt:1455
msgid ""
"The default implementation searches the fields named in :attr:`ModelAdmin."
"search_fields`."
msgstr ""
"По умолчанию выполняется поиск по полям из :attr:`ModelAdmin.search_fields`."

# dac115b372e447ee891b9b983d309338
#: ../../ref/contrib/admin/index.txt:1457
msgid ""
"This method may be overridden with your own custom search method. For "
"example, you might wish to search by an integer field, or use an external "
"tool such as Solr or Haystack. You must establish if the queryset changes "
"implemented by your search method may introduce duplicates into the results, "
"and return ``True`` in the second element of the return value."
msgstr ""
"Вы можете переопределить это метод поменяв механизм поиска. Например, вы "
"можете искать по численным полям, или использовать поисковый движок, такой "
"как Solr или Haystack. Вы должны определять наличие дубликатов в результате "
"поиска и возвращать ``True`` вторым элементом результата."

# 746124775e7c44a6bd573a4597fb94d0
#: ../../ref/contrib/admin/index.txt:1463
#, fuzzy
msgid "For example, to search by ``name`` and ``age``, you could use::"
msgstr "Например, для поиска по численным полям можно сделать::"

#: ../../ref/contrib/admin/index.txt:1479
msgid ""
"This implementation is more efficient than ``search_fields = ('name', "
"'=age')`` which results in a string comparison for the numeric field, for "
"example ``... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4')`` on "
"PostgreSQL."
msgstr ""

# 5854f1be047f4856abb5c98b856cfc87
#: ../../ref/contrib/admin/index.txt:1486
msgid ""
"The ``save_related`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance, the list of inline formsets and a boolean value "
"based on whether the parent is being added or changed. Here you can do any "
"pre- or post-save operations for objects related to the parent. Note that at "
"this point the parent object and its form have already been saved."
msgstr ""
"Метод ``save_related`` принимает объект ``HttpRequest``, родительскую форму "
"``ModelForm``, список \"inline formsets\" и булево значение указывающее "
"создан родительский объект или изменяется. Вы можете выполнить "
"дополнительные операции перед и после сохранения объектов. Заметим, что к "
"этому моменту родительский объект и его формы уже будут сохранены."

# be2c263db18d42af819a0ecb307e3266
#: ../../ref/contrib/admin/index.txt:1496
#, fuzzy
msgid ""
"The ``get_autocomplete_fields()`` method is given the ``HttpRequest`` and is "
"expected to return a ``list`` or ``tuple`` of field names that will be "
"displayed with an autocomplete widget as described above in the :attr:"
"`ModelAdmin.autocomplete_fields` section."
msgstr ""
"Метод ``get_list_display`` принимает объект ``HttpRequest`` и редактируемый "
"объект ``obj`` (или ``None`` для формы создания нового объекта) и должен "
"вернуть ``list`` или ``tuple`` содержащий список полей, которые будут "
"отображаться на странице списка объектов как описано в разделе  :attr:"
"`ModelAdmin.list_display`."

# b5d8a06fcae745e38ff222bab92d819c
#: ../../ref/contrib/admin/index.txt:1503
msgid ""
"The ``get_readonly_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of field names that will be displayed as read-only, "
"as described above in the :attr:`ModelAdmin.readonly_fields` section."
msgstr ""
"Метод ``get_readonly_fields`` принимает объект ``HttpRequest`` и "
"редактируемый объект ``obj`` (или ``None`` для формы создания нового "
"объекта) и должен вернуть ``list`` или ``tuple`` содержащий список полей, "
"которые будут отображаться только для чтения как описано в разделе :attr:"
"`ModelAdmin.readonly_fields`."

# f3a9902281de4aab83566a1acf5666f8
#: ../../ref/contrib/admin/index.txt:1510
msgid ""
"The ``get_prepopulated_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``dictionary``, as described above in the :attr:`ModelAdmin."
"prepopulated_fields` section."
msgstr ""
"Метод ``get_prepopulated_fields`` принимает объект ``HttpRequest`` и "
"редактируемый объект ``obj`` (или ``None`` для формы создания нового "
"объекта) и должен вернуть словарь полей аналогичный :attr:`ModelAdmin."
"prepopulated_fields`."

# be2c263db18d42af819a0ecb307e3266
#: ../../ref/contrib/admin/index.txt:1517
msgid ""
"The ``get_list_display`` method is given the ``HttpRequest`` and is expected "
"to return a ``list`` or ``tuple`` of field names that will be displayed on "
"the changelist view as described above in the :attr:`ModelAdmin."
"list_display` section."
msgstr ""
"Метод ``get_list_display`` принимает объект ``HttpRequest`` и редактируемый "
"объект ``obj`` (или ``None`` для формы создания нового объекта) и должен "
"вернуть ``list`` или ``tuple`` содержащий список полей, которые будут "
"отображаться на странице списка объектов как описано в разделе  :attr:"
"`ModelAdmin.list_display`."

# b48df1b25e62452cb72826262aea856f
#: ../../ref/contrib/admin/index.txt:1524
msgid ""
"The ``get_list_display_links`` method is given the ``HttpRequest`` and the "
"``list`` or ``tuple`` returned by :meth:`ModelAdmin.get_list_display`. It is "
"expected to return either ``None`` or a ``list`` or ``tuple`` of field names "
"on the changelist that will be linked to the change view, as described in "
"the :attr:`ModelAdmin.list_display_links` section."
msgstr ""
"Метод ``get_list_display_links`` принимает объект ``HttpRequest`` и ``list`` "
"или ``tuple`` указанный в :meth:`ModelAdmin.get_list_display`. Должен "
"вернуть ``None``, ``list`` или ``tuple`` содержащий список полей, который "
"будут ссылками на странице списка объектов к странице редактирования. "
"Смотрите описание :attr:`ModelAdmin.list_display_links`."

# f3a9902281de4aab83566a1acf5666f8
#: ../../ref/contrib/admin/index.txt:1534
#, fuzzy
msgid ""
"The ``get_exclude`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return a list "
"of fields, as described in :attr:`ModelAdmin.exclude`."
msgstr ""
"Метод ``get_fields`` принимает объект ``HttpRequest`` и редактируемый объект "
"``obj`` (или ``None`` для формы создания нового объекта) и должен вернуть "
"список полей аналогичный :attr:`ModelAdmin.fields`."

# f3a9902281de4aab83566a1acf5666f8
#: ../../ref/contrib/admin/index.txt:1540
msgid ""
"The ``get_fields`` method is given the ``HttpRequest`` and the ``obj`` being "
"edited (or ``None`` on an add form) and is expected to return a list of "
"fields, as described above in the :attr:`ModelAdmin.fields` section."
msgstr ""
"Метод ``get_fields`` принимает объект ``HttpRequest`` и редактируемый объект "
"``obj`` (или ``None`` для формы создания нового объекта) и должен вернуть "
"список полей аналогичный :attr:`ModelAdmin.fields`."

# b5d8a06fcae745e38ff222bab92d819c
#: ../../ref/contrib/admin/index.txt:1546
msgid ""
"The ``get_fieldsets`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return a list "
"of two-tuples, in which each two-tuple represents a ``<fieldset>`` on the "
"admin form page, as described above in the :attr:`ModelAdmin.fieldsets` "
"section."
msgstr ""
"Метод ``get_fieldsets`` принимает объект ``HttpRequest`` и редактируемый "
"объект ``obj`` (или ``None`` для формы создания нового объекта) и должен "
"вернуть список двухэлементных кортежей, которые определяют ``<fieldset>`` "
"формы, как было описано выше в разделе про :attr:`ModelAdmin.fieldsets`."

# be2c263db18d42af819a0ecb307e3266
#: ../../ref/contrib/admin/index.txt:1553
msgid ""
"The ``get_list_filter`` method is given the ``HttpRequest`` and is expected "
"to return the same kind of sequence type as for the :attr:`~ModelAdmin."
"list_filter` attribute."
msgstr ""
"Метод ``get_list_filter`` принимает ``HttpRequest`` должен вернуть значение "
"формата, соответствующего параметру :attr:`~ModelAdmin.list_filter`."

# be2c263db18d42af819a0ecb307e3266
#: ../../ref/contrib/admin/index.txt:1559
msgid ""
"The ``get_list_select_related`` method is given the ``HttpRequest`` and "
"should return a boolean or list as :attr:`ModelAdmin.list_select_related` "
"does."
msgstr ""
"Метод ``get_list_select_related`` принимает ``HttpRequest`` должен вернуть "
"значение формата, соответствующего параметру :attr:`~ModelAdmin.list_filter`."

# be2c263db18d42af819a0ecb307e3266
#: ../../ref/contrib/admin/index.txt:1565
msgid ""
"The ``get_search_fields`` method is given the ``HttpRequest`` and is "
"expected to return the same kind of sequence type as for the :attr:"
"`~ModelAdmin.search_fields` attribute."
msgstr ""
"Метод ``get_search_fields`` принимает ``HttpRequest`` должен вернуть "
"значение формата, соответствующего параметру :attr:`~ModelAdmin."
"search_fields`."

# b5d8a06fcae745e38ff222bab92d819c
#: ../../ref/contrib/admin/index.txt:1571
msgid ""
"The ``get_inline_instances`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of :class:`~django.contrib.admin.InlineModelAdmin` "
"objects, as described below in the :class:`~django.contrib.admin."
"InlineModelAdmin` section. For example, the following would return inlines "
"without the default filtering based on add, change, and delete permissions::"
msgstr ""
"Метод ``get_inline_instances`` принимает объект ``HttpRequest`` и "
"редактируемый объект ``obj`` (или ``None`` для формы создания нового "
"объекта) и должен вернуть ``list`` или ``tuple`` содержащий объекты  :class:"
"`~django.contrib.admin.InlineModelAdmin`, как описано в разделе о :class:"
"`~django.contrib.admin.InlineModelAdmin`. Например, следующий метод вернет "
"все \"inlines\" без проверки прав на добавление, изменение или удаление "
"связанных объектов."

#: ../../ref/contrib/admin/index.txt:1584
msgid ""
"If you override this method, make sure that the returned inlines are "
"instances of the classes defined in :attr:`inlines` or you might encounter a "
"\"Bad Request\" error when adding related objects."
msgstr ""
"Если вы переопределяете этот метод, убедитесь, что возвращаемы объекты "
"являются экземплярами одного из классов из :attr:`inlines`, иначе можете "
"получить ошибку \"Bad Request\" при добавлении связанного объекта."

# 87da9793240246c0b8b32a349b8d4090
#: ../../ref/contrib/admin/index.txt:1590
msgid ""
"The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for "
"that ModelAdmin in the same way as a URLconf.  Therefore you can extend them "
"as documented in :doc:`/topics/http/urls`::"
msgstr ""
"Метод ``get_urls`` класса ``ModelAdmin`` возвращает URL-ы, которые "
"используются для ModelAdmin в URLconf.  Вы можете дополнить их как описано "
"в :doc:`/topics/http/urls`::"

#: ../../ref/contrib/admin/index.txt:1616
msgid ""
"If you want to use the admin layout, extend from ``admin/base_site.html``:"
msgstr ""
"Вы можете использовать базовый шаблон админки ``admin/base_site.html``:"

# a08587469995450eb7d221556efc0223
#: ../../ref/contrib/admin/index.txt:1627
msgid ""
"Notice that the custom patterns are included *before* the regular admin "
"URLs: the admin URL patterns are very permissive and will match nearly "
"anything, so you'll usually want to prepend your custom URLs to the built-in "
"ones."
msgstr ""
"Заметим, что собственные URL-шаблоны включаются *перед* URL-шаблонами "
"интерфейса администратора, которые удовлетворяют почти всем URL-ам. Поэтому "
"желательно добавлять собственные URL-шаблоны перед встроенными."

# 211320b9659f439d912949158e53ed3b
#: ../../ref/contrib/admin/index.txt:1632
msgid ""
"In this example, ``my_view`` will be accessed at ``/admin/myapp/mymodel/"
"my_view/`` (assuming the admin URLs are included at ``/admin/``.)"
msgstr ""
"В этом примере, представление ``my_view`` будет доступно по ссылке ``/admin/"
"myapp/mymodel/my_view/`` (предполагается что вы добавили URL-ы интерфейса "
"администратора к ``/admin/``.)"

# 4a04265c870c4c61a3f0e8107daf172a
#: ../../ref/contrib/admin/index.txt:1636
msgid ""
"However, the ``self.my_view`` function registered above suffers from two "
"problems:"
msgstr "Однако, есть несколько проблем, связанных с функцией ``self.my_view``:"

# 6afa8a9d55a44985a81cae72c70bfd49
#: ../../ref/contrib/admin/index.txt:1639
msgid ""
"It will *not* perform any permission checks, so it will be accessible to the "
"general public."
msgstr ""
"*Не* выполняются никакие проверки прав, каждый может выполнить запрос к "
"этому представлению."

# 2113ba84535b49d5ab00ef527920dce6
#: ../../ref/contrib/admin/index.txt:1641
msgid ""
"It will *not* provide any header details to prevent caching. This means if "
"the page retrieves data from the database, and caching middleware is active, "
"the page could show outdated information."
msgstr ""
"*Не* отправляются заголовки управляющие кэшированием. Это означает, если "
"включен кэширующий функциональный слой, данные из базы данных на странице "
"могут быть неверными."

# 6e0b147ad78940319fd9a87a779b0582
#: ../../ref/contrib/admin/index.txt:1645
msgid ""
"Since this is usually not what you want, Django provides a convenience "
"wrapper to check permissions and mark the view as non-cacheable. This "
"wrapper is ``AdminSite.admin_view()`` (i.e. ``self.admin_site.admin_view`` "
"inside a ``ModelAdmin`` instance); use it like so::"
msgstr ""
"Обычно это не то, что вам нужно, Django предоставляет функцию-обертку для "
"проверки прав и отключения кэширования. Эта функция -- :meth:`AdminSite."
"admin_view` (или ``self.admin_site.admin_view`` в методе ``ModelAdmin``). "
"Используйте ее следующим образом::"

# 99ce0686e3e941709566570920083e15
#: ../../ref/contrib/admin/index.txt:1658
msgid "Notice the wrapped view in the fifth line above::"
msgstr "Обратите внимание на следующую строку::"

# 6f90737477c2461392bd8ecb2927a49d
#: ../../ref/contrib/admin/index.txt:1662
msgid ""
"This wrapping will protect ``self.my_view`` from unauthorized access and "
"will apply the :func:`django.views.decorators.cache.never_cache` decorator "
"to make sure it is not cached if the cache middleware is active."
msgstr ""
"Функция-обертка защищает ``self.my_view`` от несанкционированного доступа и "
"применяет декоратор ``django.views.decorators.cache.never_cache`` для "
"предотвращения кэширования, если промежуточный слой кэширования активирован."

# cca32ff60612460ab764628496a5cd69
#: ../../ref/contrib/admin/index.txt:1666
msgid ""
"If the page is cacheable, but you still want the permission check to be "
"performed, you can pass a ``cacheable=True`` argument to ``AdminSite."
"admin_view()``::"
msgstr ""
"Если страницу необходимо кэшировать, но необходимо проверять авторизацию, вы "
"можете использовать аргумент ``cacheable=True`` для ``AdminSite."
"admin_view``::"

#: ../../ref/contrib/admin/index.txt:1672
msgid ""
"``ModelAdmin`` views have ``model_admin`` attributes. Other ``AdminSite`` "
"views have ``admin_site`` attributes."
msgstr ""
"Представления ``ModelAdmin`` содержат атрибуты ``model_admin``. Другие "
"представления ``AdminSite`` содержат атрибут ``admin_site``."

# 772b71c35c4f413b834260bcb345e730
#: ../../ref/contrib/admin/index.txt:1677
msgid ""
"Returns a :class:`~django.forms.ModelForm` class for use in the admin add "
"and change views, see :meth:`add_view` and :meth:`change_view`."
msgstr ""
"Возвращает класс :class:`~django.forms.ModelForm` используемый при "
"добавлении и редактировании объектов, смотрите описание :meth:`add_view` и :"
"meth:`change_view`."

#: ../../ref/contrib/admin/index.txt:1680
msgid ""
"The base implementation uses :func:`~django.forms.models.modelform_factory` "
"to subclass :attr:`~form`, modified by attributes such as :attr:`~fields` "
"and :attr:`~exclude`. So, for example, if you wanted to offer additional "
"fields to superusers, you could swap in a different base form like so::"
msgstr ""
"Базовая реализация использует :func:`~django.forms.models.modelform_factory` "
"для  создания :attr:`~form` с измененными параметрами :attr:`~fields` и :"
"attr:`~exclude`. Поэтому, если вы, например, захотите добавить поля форме "
"для суперпользователя, вы можете изменить базовый класс формы::"

#: ../../ref/contrib/admin/index.txt:1691
msgid ""
"You may also simply return a custom :class:`~django.forms.ModelForm` class "
"directly."
msgstr ""
"Вы также можете вернуть собственный класс :class:`~django.forms.ModelForm`."

# b7aa587a7bec413eb30aa44ad9792547
#: ../../ref/contrib/admin/index.txt:1696
msgid ""
"Yields (``FormSet``, :class:`InlineModelAdmin`) pairs for use in admin add "
"and change views."
msgstr ""
"Выполняет yield по парам (``FormSet``, :class:`InlineModelAdmin`), чтобы "
"вернуть набор форм для страницы создания и изменения."

# 225a9dbd8f204db99d05957880b229ba
#: ../../ref/contrib/admin/index.txt:1699
msgid ""
"For example if you wanted to display a particular inline only in the change "
"view, you could override ``get_formsets_with_inlines`` as follows::"
msgstr ""
"Например, если некоторый \"inline\" необходимо отображать только при "
"редактировании, можно переопределить метод ``get_formsets_with_inlines``::"

# e6cbe1fbbcb542f3a7bd0dc2c25ac629
#: ../../ref/contrib/admin/index.txt:1714
msgid ""
"The ``formfield_for_foreignkey`` method on a ``ModelAdmin`` allows you to "
"override the default formfield for a foreign keys field. For example, to "
"return a subset of objects for this foreign key field based on the user::"
msgstr ""
"Метод ``formfield_for_foreignkey`` позволяет вам переопределить поле для "
"внешнего ключа. Например, изменить выбор объектов в зависимости от "
"пользователя::"

# 61e3de570bd8472c9053d09821582c5e
#: ../../ref/contrib/admin/index.txt:1724
msgid ""
"This uses the ``HttpRequest`` instance to filter the ``Car`` foreign key "
"field to only display the cars owned by the ``User`` instance."
msgstr ""
"Объект ``HttpRequest`` используется, чтобы отфильтровать для выбора объекты "
"модели ``Car`` по текущему пользователю."

# f8b6487a15f64d53b4595dd096b9c0c1
#: ../../ref/contrib/admin/index.txt:1729
msgid ""
"Like the ``formfield_for_foreignkey`` method, the "
"``formfield_for_manytomany`` method can be overridden to change the default "
"formfield for a many to many field. For example, if an owner can own "
"multiple cars and cars can belong to multiple owners -- a many to many "
"relationship -- you could filter the ``Car`` foreign key field to only "
"display the cars owned by the ``User``::"
msgstr ""
"Как и метод ``formfield_for_foreignkey``, ``formfield_for_manytomany`` "
"позволяет переопределить поле формы для связей многое-ко-многим. Например, "
"если пользователь может владеть несколькими машинами и машина может "
"принадлежать нескольким пользователям, вы можете отфильтровать модель "
"``Car``, чтобы отображать машины только текущего пользователя::"

# 8866de84b8c14409bd1d61e102cd2b9a
#: ../../ref/contrib/admin/index.txt:1744
msgid ""
"Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany`` "
"methods, the ``formfield_for_choice_field`` method can be overridden to "
"change the default formfield for a field that has declared choices. For "
"example, if the choices available to a superuser should be different than "
"those available to regular staff, you could proceed as follows::"
msgstr ""
"Как и методы ``formfield_for_foreignkey`` и ``formfield_for_manytomany``, "
"``formfield_for_choice_field`` позволяет переопределить поле формы для поля "
"модели, которое содержит ``choices``. Например, если главному администратору "
"необходимо отображать варианты значений отличные от вариантов ответов для "
"остальных пользователей::"

# a6b092971542498e88fa93c8598c566c
#: ../../ref/contrib/admin/index.txt:1763
msgid ""
"Any ``choices`` attribute set on the formfield will be limited to the form "
"field only. If the corresponding field on the model has choices set, the "
"choices provided to the form must be a valid subset of those choices, "
"otherwise the form submission will fail with a :exc:`~django.core.exceptions."
"ValidationError` when the model itself is validated before saving."
msgstr ""
"Атрибут ``choices``, указанный в поле форме, влияет только на проверку поля "
"формы. Если соответствующее поле модели содержит ``choices``, ``choices`` в "
"поле формы должен быть его подмножеством, иначе вы получите :exc:`~django."
"core.exceptions.ValidationError` при проверке модели."

# f2997151d2a3405aabe17058729b6d6c
#: ../../ref/contrib/admin/index.txt:1772
msgid ""
"Returns the ``Changelist`` class to be used for listing. By default, "
"``django.contrib.admin.views.main.ChangeList`` is used. By inheriting this "
"class you can change the behavior of the listing."
msgstr ""
"Возвращает класс ``Changelist``, который используется для отображения списка "
"объекта. По умолчанию, используется ``django.contrib.admin.views.main."
"ChangeList``. Унаследовав этот класс вы можете переопределить поведение этой "
"страницы."

# 491d779ad4da4adebd50fd9e3da31f9c
#: ../../ref/contrib/admin/index.txt:1778
msgid ""
"Returns a :class:`~django.forms.ModelForm` class for use in the ``Formset`` "
"on the changelist page. To use a custom form, for example::"
msgstr ""
"Возвращает подкласс :class:`~django.forms.ModelForm` для ``Formset``, "
"который будет использоваться на странице списка объектов. Например::"

# 7d385d60b56843e79cdb17215167cedb
#: ../../ref/contrib/admin/index.txt:1792
msgid ""
"If you define the ``Meta.model`` attribute on a :class:`~django.forms."
"ModelForm`, you must also define the ``Meta.fields`` attribute (or the "
"``Meta.exclude`` attribute). However, ``ModelAdmin`` ignores this value, "
"overriding it with the :attr:`ModelAdmin.list_editable` attribute. The "
"easiest solution is to omit the ``Meta.model`` attribute, since "
"``ModelAdmin`` will provide the correct model to use."
msgstr "``Meta.model``"

# fa29fc41a5154556829dba3e6990bda1
#: ../../ref/contrib/admin/index.txt:1802
msgid ""
"Returns a :ref:`ModelFormSet <model-formsets>` class for use on the "
"changelist page if :attr:`~ModelAdmin.list_editable` is used. To use a "
"custom formset, for example::"
msgstr ""
"Возвращает :ref:`ModelFormSet <model-formsets>`, который будет "
"использоваться на странице списка объектов, если включен :attr:`~ModelAdmin."
"list_editable`. Например::"

#: ../../ref/contrib/admin/index.txt:1818
msgid ""
"The objects in the changelist page can be filtered with lookups from the "
"URL's query string. This is how :attr:`list_filter` works, for example. The "
"lookups are similar to what's used in :meth:`.QuerySet.filter` (e.g. "
"``user__email=user@example.com``). Since the lookups in the query string can "
"be manipulated by the user, they must be sanitized to prevent unauthorized "
"data exposure."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1825
msgid ""
"The ``lookup_allowed()`` method is given a lookup path from the query string "
"(e.g. ``'user__email'``) and the corresponding value (e.g. ``'user@example."
"com'``), and returns a boolean indicating whether filtering the changelist's "
"``QuerySet`` using the parameters is permitted. If ``lookup_allowed()`` "
"returns ``False``, ``DisallowedModelAdminLookup`` (subclass of :exc:`~django."
"core.exceptions.SuspiciousOperation`) is raised."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1832
msgid ""
"By default, ``lookup_allowed()`` allows access to a model's local fields, "
"field paths used in :attr:`~ModelAdmin.list_filter` (but not paths from :"
"meth:`~ModelAdmin.get_list_filter`), and lookups required for :attr:`~django."
"db.models.ForeignKey.limit_choices_to` to function correctly in :attr:"
"`~django.contrib.admin.ModelAdmin.raw_id_fields`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1838
msgid ""
"Override this method to customize the lookups permitted for your :class:"
"`~django.contrib.admin.ModelAdmin` subclass."
msgstr ""

# ffd7e91a65044e8290eff881b22dee15
#: ../../ref/contrib/admin/index.txt:1843
msgid ""
"Should return ``True`` if adding an object is permitted, ``False`` otherwise."
msgstr ""
"Должен возвращать ``True``, если пользователю позволено добавлять новый "
"объект, иначе ``False``."

# b6ce197c95aa4384b5bfc590ca13fc65
#: ../../ref/contrib/admin/index.txt:1848
#, fuzzy
msgid ""
"Should return ``True`` if editing ``obj`` is permitted, ``False`` otherwise. "
"If ``obj`` is ``None``, should return ``True`` or ``False`` to indicate "
"whether editing of objects of this type is permitted in general (e.g., "
"``False`` will be interpreted as meaning that the current user is not "
"permitted to edit any object of this type)."
msgstr ""
"Должен возвращать ``True``, если пользователю позволено изменять объект, "
"иначе ``False``. Если ``obj`` равен  ``None``, должен вернуть ``True`` или "
"``False``, указывая может ли пользователь изменить какой-либо объект данного "
"типа."

# 8933bffb328e444f9b02122049dab84b
#: ../../ref/contrib/admin/index.txt:1856
#, fuzzy
msgid ""
"Should return ``True`` if deleting ``obj`` is permitted, ``False`` "
"otherwise. If ``obj`` is ``None``, should return ``True`` or ``False`` to "
"indicate whether deleting objects of this type is permitted in general (e."
"g., ``False`` will be interpreted as meaning that the current user is not "
"permitted to delete any object of this type)."
msgstr ""
"Должен вернуть ``True``, если пользователю позволено удалять объект, иначе "
"``False``. Если ``obj`` равен  ``None``, должен вернуть ``True`` или "
"``False``, указывая может ли пользователь удалить какой-либо объект данного "
"типа."

#: ../../ref/contrib/admin/index.txt:1864
msgid ""
"Should return ``True`` if displaying the module on the admin index page and "
"accessing the module's index page is permitted, ``False`` otherwise. Uses :"
"meth:`User.has_module_perms() <django.contrib.auth.models.User."
"has_module_perms>` by default. Overriding it does not restrict access to the "
"add, change or delete views, :meth:`~ModelAdmin.has_add_permission`, :meth:"
"`~ModelAdmin.has_change_permission`, and :meth:`~ModelAdmin."
"has_delete_permission` should be used for that."
msgstr ""
"Должен возвращать ``True``, если модуль можно показывать на главной странице "
"и у пользователя есть доступ к главной странице модуля, иначе ``False``. По "
"умолчанию использует :meth:`User.has_module_perms() <django.contrib.auth."
"models.User.has_module_perms>`. Не ограничивает доступ к представлениям "
"добавления, изменения и удаления, для этого используются методы :meth:"
"`~ModelAdmin.has_add_permission`, :meth:`~ModelAdmin.has_change_permission` "
"и :meth:`~ModelAdmin.has_delete_permission`."

# 92b83983cc9b4753b0ee015c40454e68
#: ../../ref/contrib/admin/index.txt:1875
msgid ""
"The ``get_queryset`` method on a ``ModelAdmin`` returns a :class:`~django.db."
"models.query.QuerySet` of all model instances that can be edited by the "
"admin site. One use case for overriding this method is to show objects owned "
"by the logged-in user::"
msgstr ""
"Метод ``get_queryset`` возвращает :class:`~django.db.models.query.QuerySet` "
"всех объектов модели, которые можно редактировать в интерфейсе "
"администратора. Этот метод можно использовать для отображения объектов "
"принадлежащих текущему пользователю::"

# 4298161b81b34778871105014434d376
#: ../../ref/contrib/admin/index.txt:1889
msgid ""
"Sends a message to the user using the :mod:`django.contrib.messages` "
"backend.  See the :ref:`custom ModelAdmin example <custom-admin-action>`."
msgstr ""
"Отправляет сообщение пользователю используя :mod:`django.contrib.messages`. "
"Смотрите :ref:`пример переопределения ModelAdmin <custom-admin-action>`."

# 3ebd301d9c3046128912f59e13ea8c92
#: ../../ref/contrib/admin/index.txt:1892
msgid ""
"Keyword arguments allow you to change the message level, add extra CSS tags, "
"or fail silently if the ``contrib.messages`` framework is not installed. "
"These keyword arguments match those for :func:`django.contrib.messages."
"add_message`, see that function's documentation for more details. One "
"difference is that the level may be passed as a string label in addition to "
"integer/constant."
msgstr ""
"Аргументы позволят изменить тип сообщения, добавить дополнительные CSS теги, "
"или указать игнорировать ошибку, если ``contrib.messages`` не установлен. "
"Эти аргументы совпадают с аргументами :func:`django.contrib.messages."
"add_message`. Единственное отличие - тип сообщения можно указать строкой, а "
"не только числом или константой."

# 91da9cd03b164f02a8197cc6dc6f194c
#: ../../ref/contrib/admin/index.txt:1901
msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator`."
msgstr ""
"Возвращает объект для постраничного отображения. По умолчанию возвращает "
"объект :attr:`paginator`."

# a1afa61ea8e44bfba4e799dfa0855711
#: ../../ref/contrib/admin/index.txt:1906
msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:`add_view` "
"stage."
msgstr "Указывает :class:`~django.http.HttpResponse` для :meth:`add_view`."

# 05d58ec35c5048ebb9749fe70081afdb
#: ../../ref/contrib/admin/index.txt:1909
msgid ""
"``response_add`` is called after the admin form is submitted and just after "
"the object and all the related instances have been created and saved. You "
"can override it to change the default behavior after the object has been "
"created."
msgstr ""
"``response_add`` вызывается поле отправки формы и после сохранения объекта и "
"всех связанных объектов. Вы можете переопределить этот метод, чтобы изменить "
"работу админки после создания объекта."

# 15fd0e13a49c4e22a6be39f7744f221f
#: ../../ref/contrib/admin/index.txt:1916
msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:"
"`change_view` stage."
msgstr "Создает :class:`~django.http.HttpResponse` для :meth:`change_view`."

# 3807d01eb28c4bdd9e41d1521ed8be96
#: ../../ref/contrib/admin/index.txt:1919
msgid ""
"``response_change`` is called after the admin form is submitted and just "
"after the object and all the related instances have been saved. You can "
"override it to change the default behavior after the object has been changed."
msgstr ""
"``response_change`` вызывается после отправки формы, сохранения объекта и "
"всех связанных объектов. Вы можете переопределить это метод, чтобы добавить "
"дополнительную логику, выполняемую после изменения объекта."

# 8b44dfe3ec4346949487ed1bd8e86c5f
#: ../../ref/contrib/admin/index.txt:1926
msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:"
"`delete_view` stage."
msgstr "Создает :class:`~django.http.HttpResponse` для :meth:`delete_view`."

# c8e8167011e84f5fb1c1c83f50979174
#: ../../ref/contrib/admin/index.txt:1929
msgid ""
"``response_delete`` is called after the object has been deleted. You can "
"override it to change the default behavior after the object has been deleted."
msgstr ""
"``response_delete`` вызывается после удаления объекта. Вы можете "
"переопределить это метод, чтобы добавить дополнительную логику, выполняемую "
"после удаления объекта."

# 70ae32e6b4da41568535c20b199801d1
#: ../../ref/contrib/admin/index.txt:1933
msgid "``obj_display`` is a string with the name of the deleted object."
msgstr "``obj_display`` - строка с названием удаленного объекта."

#: ../../ref/contrib/admin/index.txt:1936
msgid ""
"``obj_id`` is the serialized identifier used to retrieve the object to be "
"deleted."
msgstr ""
"``obj_id`` -- сериализированный идентификатор, который использовался для "
"получения удаленного объекта."

# 986b902ec1224d2fa64f8e82e646bd4a
#: ../../ref/contrib/admin/index.txt:1941
msgid ""
"A hook for the initial data on admin change forms. By default, fields are "
"given initial values from ``GET`` parameters. For instance, ``?"
"name=initial_value`` will set the ``name`` field's initial value to be "
"``initial_value``."
msgstr ""
"Позволяет добавить начальные данные для формы изменения объекта. По "
"умолчанию используются параметры из ``GET``. Например, ``?"
"name=initial_value`` для поля ``name`` установит начальное значение в "
"``initial_value``."

# e6f4f22dee404a378a2b9850c562674b
#: ../../ref/contrib/admin/index.txt:1946
msgid ""
"This method should return a dictionary in the form ``{'fieldname': "
"'fieldval'}``::"
msgstr "Этот метод должен вернуть словарь вида ``{'fieldname': 'fieldval'}``::"

# 791f35b9299f482483b23a41e27a42a3
#: ../../ref/contrib/admin/index.txt:1953
msgid "Other methods"
msgstr "Остальные методы"

# 532a7727ef89432685858b9822038f36
#: ../../ref/contrib/admin/index.txt:1957
msgid "Django view for the model instance addition page. See note below."
msgstr ""
"Представление Django для страницы добавления объекта модели. Смотрите "
"описание ниже."

# 6253b6bb8ea749babe1febb29ec063f8
#: ../../ref/contrib/admin/index.txt:1961
#, fuzzy
msgid "Django view for the model instance editing page. See note below."
msgstr ""
"Представление Django для страницы редактирования объекта модели. Смотрите "
"описание ниже."

# 1c813bf8b27e4845b443aeff813ece90
#: ../../ref/contrib/admin/index.txt:1965
msgid ""
"Django view for the model instances change list/actions page. See note below."
msgstr ""
"Представление Django для страницы отображения всех объектов модели. Смотрите "
"описание ниже."

# 138559bffa834401a4e79f7d10dd1fe8
#: ../../ref/contrib/admin/index.txt:1970
msgid ""
"Django view for the model instance(s) deletion confirmation page. See note "
"below."
msgstr ""
"Представление Django для страницы подтверждения удаления объектов. Смотрите "
"описание ниже."

# 37764e4540a2400c87d84654216dc797
#: ../../ref/contrib/admin/index.txt:1975
msgid ""
"Django view for the page that shows the modification history for a given "
"model instance."
msgstr "Представление Django для страницы истории изменений объекта модели."

# 4bb69882c4704608b4c3e37ad83efe20
#: ../../ref/contrib/admin/index.txt:1978
msgid ""
"Unlike the hook-type ``ModelAdmin`` methods detailed in the previous "
"section, these five methods are in reality designed to be invoked as Django "
"views from the admin application URL dispatching handler to render the pages "
"that deal with model instances CRUD operations. As a result, completely "
"overriding these methods will significantly change the behavior of the admin "
"application."
msgstr ""
"В отличии от методов ``ModelAdmin`` описанных выше, которые позволяют "
"изменять поведение интерфейса администратора, эти пять методов используются "
"как представления Django для выполнения CRUD-операций над объектами модели. "
"В результате, полностью переопределив эти методы можно радикально изменить "
"интерфейс администратора."

# 3f8830dc13464970bf7cb02e882f0c0f
#: ../../ref/contrib/admin/index.txt:1984
msgid ""
"One common reason for overriding these methods is to augment the context "
"data that is provided to the template that renders the view. In the "
"following example, the change view is overridden so that the rendered "
"template is provided some extra mapping data that would not otherwise be "
"available::"
msgstr ""
"Одна из причин переопределить эти методы -- добавить данные в контекст "
"шаблона. В этом примере представление для изменения объекта добавляет "
"дополнительные данные в контекст, чтобы отобразить их в шаблоне::"

# f7b3ff8d257849dbaa8a18925df2bc81
#: ../../ref/contrib/admin/index.txt:2005
msgid ""
"These views return :class:`~django.template.response.TemplateResponse` "
"instances which allow you to easily customize the response data before "
"rendering. For more details, see the :doc:`TemplateResponse documentation </"
"ref/template-response>`."
msgstr ""
"Эти представления  возвращают объект :class:`~django.template.response."
"TemplateResponse`, что позволяет легко изменить данные ответа перед "
"выполнением шаблона. Подробности смотрите в :doc:`разделе о TemplateResponse "
"</ref/template-response>`."

# 4b9d1747c7c348288e4888e9f0649878
#: ../../ref/contrib/admin/index.txt:2013
msgid "``ModelAdmin`` asset definitions"
msgstr "Добавление статических файлов в ``ModelAdmin``"

# 80bd635b471343cd8825813ce05fa139
#: ../../ref/contrib/admin/index.txt:2015
msgid ""
"There are times where you would like add a bit of CSS and/or JavaScript to "
"the add/change views. This can be accomplished by using a ``Media`` inner "
"class on your ``ModelAdmin``::"
msgstr ""
"В некоторых ситуациях вам может понадобиться добавить CSS и/или JavaScript "
"файлы в представления добавления или изменения объектов. Вы можете выполнить "
"это добавив класс ``Media`` в ``ModelAdmin``::"

# 44e9c1e1e28e459494100be859342779
#: ../../ref/contrib/admin/index.txt:2026
msgid ""
"The :doc:`staticfiles app </ref/contrib/staticfiles>` prepends :setting:"
"`STATIC_URL` (or :setting:`MEDIA_URL` if :setting:`STATIC_URL` is ``None``) "
"to any asset paths. The same rules apply as :ref:`regular asset definitions "
"on forms <form-asset-paths>`."
msgstr ""
":doc:`Приложение staticfiles </ref/contrib/staticfiles>` добавляет :setting:"
"`STATIC_URL` (или :setting:`MEDIA_URL` если :setting:`STATIC_URL` равно "
"``None``) к указанным путям. Это же правильно применяется и к :ref:"
"`определению статических файлов для форм <form-asset-paths>`."

# ce0cb18c05a14a3dbe4c88f5bb19d9e3
#: ../../ref/contrib/admin/index.txt:2034
msgid "jQuery"
msgstr "jQuery"

# 04368270aa9b45d7910324e80d15d1d7
#: ../../ref/contrib/admin/index.txt:2036
msgid "Django admin JavaScript makes use of the `jQuery`_ library."
msgstr "Javascript интерфейса администратора использует библиотеку `jQuery`_."

# 31970ec8c4354d0e87a268e8cff39890
#: ../../ref/contrib/admin/index.txt:2038
#, fuzzy
msgid ""
"To avoid conflicts with user-supplied scripts or libraries, Django's jQuery "
"(version 2.2.3) is namespaced as ``django.jQuery``. If you want to use "
"jQuery in your own admin JavaScript without including a second copy, you can "
"use the ``django.jQuery`` object on changelist and add/edit views."
msgstr ""
"Чтобы избежать конфликтов с библиотеками пользователя, jQuery в "
"Django(версия 2.1.3) использует пространство имен ``django.jQuery``. Если вы "
"хотите использовать jQuery в собственных JavaScript файлах без добавления "
"еще одной копии, вы можете использовать объект ``django.jQuery`` на "
"страницах списка объектов и добавления/редактирования."

# 9a8d721798504f7db5921538c5a1dd96
#: ../../ref/contrib/admin/index.txt:2043
msgid ""
"The :class:`ModelAdmin` class requires jQuery by default, so there is no "
"need to add jQuery to your ``ModelAdmin``’s list of media resources unless "
"you have a specific need. For example, if you require the jQuery library to "
"be in the global namespace (for example when using third-party jQuery "
"plugins) or if you need a newer version of jQuery, you will have to include "
"your own copy."
msgstr ""
"Класс :class:`ModelAdmin` использует jQuery по умолчанию, так что вам не "
"нужно добавлять jQuery в список media-файлов  ``ModelAdmin``. Если вам "
"необходима библиотека jQuery в глобальном пространстве имен, например при "
"использовании плагинов jQuery, или более новая версия jQuery, вам необходимо "
"добавить собственную копию jQuery."

# 35b4739edbfa4ae2860c8f90c4a283a7
#: ../../ref/contrib/admin/index.txt:2049
msgid ""
"Django provides both uncompressed and 'minified' versions of jQuery, as "
"``jquery.js`` and ``jquery.min.js`` respectively."
msgstr ""
"Django содержит сжатую и 'minified' версию jQuery, как ``jquery.js`` и "
"``jquery.min.js`` соответственно."

# 1c9891336599483897ceabd72de4da7b
#: ../../ref/contrib/admin/index.txt:2052
msgid ""
":class:`ModelAdmin` and :class:`InlineModelAdmin` have a ``media`` property "
"that returns a list of ``Media`` objects which store paths to the JavaScript "
"files for the forms and/or formsets. If :setting:`DEBUG` is ``True`` it will "
"return the uncompressed versions of the various JavaScript files, including "
"``jquery.js``; if not, it will return the 'minified' versions."
msgstr ""
":class:`ModelAdmin` и :class:`InlineModelAdmin` содержат свойство ``media``, "
"которое возвращает список объектов ``Media``, которые содержат путь к "
"JavaScript файлам для форм и наборов форм. Если :setting:`DEBUG` равна "
"``True``, будет использована несжатая версия ``jquery.js``, иначе сжатая "
"версия."

# 9e170dead42b430999aaac62654099bb
#: ../../ref/contrib/admin/index.txt:2063
msgid "Adding custom validation to the admin"
msgstr "Дополнительная проверка данных в интерфейсе администратора"

# c731747343b24c90bd7bd1462c0dcb07
#: ../../ref/contrib/admin/index.txt:2065
msgid ""
"Adding custom validation of data in the admin is quite easy. The automatic "
"admin interface reuses :mod:`django.forms`, and the ``ModelAdmin`` class "
"gives you the ability define your own form::"
msgstr ""
"Добавить дополнительную проверку данных в интерфейсе администратора очень "
"легко. Интерфейс администратора использует :mod:`django.forms`, и класс "
"``ModelAdmin`` позволяет указать вашу собственную форму::"

# c8ac751b97bb4f519a32dbd48164798c
#: ../../ref/contrib/admin/index.txt:2072
msgid ""
"``MyArticleAdminForm`` can be defined anywhere as long as you import where "
"needed. Now within your form you can add your own custom validation for any "
"field::"
msgstr ""
"Вы можете определить форму ``MyArticleAdminForm`` где угодно, просто "
"импортируйте ее. В собственной форме вы можете добавить дополнительную "
"проверку данных для любого поля::"

# 95422a339ffe43e78714c1a80a08af25
#: ../../ref/contrib/admin/index.txt:2081
msgid ""
"It is important you use a ``ModelForm`` here otherwise things can break. See "
"the :doc:`forms </ref/forms/index>` documentation on :doc:`custom validation "
"</ref/forms/validation>` and, more specifically, the :ref:`model form "
"validation notes <overriding-modelform-clean-method>` for more information."
msgstr ""
"Важно использовать ``ModelForm``, чтобы избежать проблем и ошибок. "
"Подробности смотрите в документации о :doc:`формах </ref/forms/index>` "
"раздел про :doc:`проверку полей </ref/forms/validation>` и, особенно, раздел "
"о :ref:`переопределении метода clean() в ModelForm <overriding-modelform-"
"clean-method>`."

# 368a964fc8214107bfda18e7e5f429e5
#: ../../ref/contrib/admin/index.txt:2090
msgid "``InlineModelAdmin`` objects"
msgstr "Объект ``InlineModelAdmin``"

# 33b6469f8f5d4817a10efecf18af07b3
#: ../../ref/contrib/admin/index.txt:2096
msgid ""
"The admin interface has the ability to edit models on the same page as a "
"parent model. These are called inlines. Suppose you have these two models::"
msgstr ""
"Интерфейс администратора позволяет редактировать связанные объекты на одной "
"странице с родительским объектом. Это называется \"inlines\". Например, у "
"нас есть две модели::"

# 52d6af64213643a39dffcc67d6c2217b
#: ../../ref/contrib/admin/index.txt:2108
msgid ""
"You can edit the books authored by an author on the author page. You add "
"inlines to a model by specifying them in a ``ModelAdmin.inlines``::"
msgstr ""
"Вы можете редактировать книги автора на странице редактирования автора. Вы "
"добавляете \"inlines\" к модели добавив их в ``ModelAdmin.inlines``::"

# 91532da68190474aabc61dce97ecbcd6
#: ../../ref/contrib/admin/index.txt:2121
msgid "Django provides two subclasses of ``InlineModelAdmin`` and they are:"
msgstr "Django предоставляет два подкласса ``InlineModelAdmin``:"

# 5832dfe50a65459f8282cee2dc207cb5
#: ../../ref/contrib/admin/index.txt:2123
msgid ":class:`~django.contrib.admin.TabularInline`"
msgstr ":class:`~django.contrib.admin.TabularInline`"

# f7458d00b90e4cbba93ad016951f734c
#: ../../ref/contrib/admin/index.txt:2124
msgid ":class:`~django.contrib.admin.StackedInline`"
msgstr ":class:`~django.contrib.admin.StackedInline`"

# 42b69db8a6d549998f065006b7ff7506
#: ../../ref/contrib/admin/index.txt:2126
msgid ""
"The difference between these two is merely the template used to render them."
msgstr "Разница между ними только в используемом шаблоне."

# a0bc592ef4b443a392be47b51d165f5e
#: ../../ref/contrib/admin/index.txt:2130
msgid "``InlineModelAdmin`` options"
msgstr "Параметры ``InlineModelAdmin``"

# af522dfd85554595aac3b7143aa61083
#: ../../ref/contrib/admin/index.txt:2132
msgid ""
"``InlineModelAdmin`` shares many of the same features as ``ModelAdmin``, and "
"adds some of its own (the shared features are actually defined in the "
"``BaseModelAdmin`` superclass). The shared features are:"
msgstr ""
"``InlineModelAdmin`` содержит некоторые возможности ``ModelAdmin`` и "
"собственные. Общие методы и атрибуты определены в классе ``BaseModelAdmin``, "
"вот они:"

# fbfea9e991c045af9253cd4139560e1d
#: ../../ref/contrib/admin/index.txt:2136
msgid ":attr:`~InlineModelAdmin.form`"
msgstr ":attr:`~InlineModelAdmin.form`"

# 4b2420d1015542b0a0a9bb2b642dab28
#: ../../ref/contrib/admin/index.txt:2137
msgid ":attr:`~ModelAdmin.fieldsets`"
msgstr ":attr:`~ModelAdmin.fieldsets`"

# e254780c22cf4eed8241da3d1ba7273d
#: ../../ref/contrib/admin/index.txt:2138
msgid ":attr:`~ModelAdmin.fields`"
msgstr ":attr:`~ModelAdmin.fields`"

# 4891a659ed1a4f3eb1787ddfdf0f61a1
#: ../../ref/contrib/admin/index.txt:2139
msgid ":attr:`~ModelAdmin.formfield_overrides`"
msgstr ":attr:`~ModelAdmin.formfield_overrides`"

# 4b3f8c4935164563b61b7c8d07051642
#: ../../ref/contrib/admin/index.txt:2140
msgid ":attr:`~ModelAdmin.exclude`"
msgstr ":attr:`~ModelAdmin.exclude`"

# fd7d21f046234895b00e96aa3d078b66
#: ../../ref/contrib/admin/index.txt:2141
msgid ":attr:`~ModelAdmin.filter_horizontal`"
msgstr ":attr:`~ModelAdmin.filter_horizontal`"

# a20d5064ce1242a4930b4c5cf3e2b7bd
#: ../../ref/contrib/admin/index.txt:2142
msgid ":attr:`~ModelAdmin.filter_vertical`"
msgstr ":attr:`~ModelAdmin.filter_vertical`"

# bb832b47ee034a47bdfec260b2586631
#: ../../ref/contrib/admin/index.txt:2143
msgid ":attr:`~ModelAdmin.ordering`"
msgstr ":attr:`~ModelAdmin.ordering`"

# 8cee604aaa5c4a31a7e9802c815a8faf
#: ../../ref/contrib/admin/index.txt:2144
msgid ":attr:`~ModelAdmin.prepopulated_fields`"
msgstr ":attr:`~ModelAdmin.prepopulated_fields`"

# 11a113764c36494e8ffb3f5dda16468c
#: ../../ref/contrib/admin/index.txt:2145
msgid ":meth:`~ModelAdmin.get_queryset`"
msgstr ":meth:`~ModelAdmin.get_queryset`"

# 3c0d1285fc3c421e8fe621810bcd91d8
#: ../../ref/contrib/admin/index.txt:2146
msgid ":attr:`~ModelAdmin.radio_fields`"
msgstr ":attr:`~ModelAdmin.radio_fields`"

# f8e583e4befb4ace9b9b06a4f6b594b0
#: ../../ref/contrib/admin/index.txt:2147
msgid ":attr:`~ModelAdmin.readonly_fields`"
msgstr ":attr:`~ModelAdmin.readonly_fields`"

# 19693478292b4c0b9958c2e83e6c9052
#: ../../ref/contrib/admin/index.txt:2148
msgid ":attr:`~InlineModelAdmin.raw_id_fields`"
msgstr ":attr:`~InlineModelAdmin.raw_id_fields`"

# 0c07af438628482eb83bb0afb6c0fa8a
#: ../../ref/contrib/admin/index.txt:2149
msgid ":meth:`~ModelAdmin.formfield_for_choice_field`"
msgstr ":meth:`~ModelAdmin.formfield_for_choice_field`"

# 0c07af438628482eb83bb0afb6c0fa8a
#: ../../ref/contrib/admin/index.txt:2150
msgid ":meth:`~ModelAdmin.formfield_for_foreignkey`"
msgstr ":meth:`~ModelAdmin.formfield_for_foreignkey`"

# c4b9cac3b7d14548bcbe1fbe81668bd0
#: ../../ref/contrib/admin/index.txt:2151
msgid ":meth:`~ModelAdmin.formfield_for_manytomany`"
msgstr ":meth:`~ModelAdmin.formfield_for_manytomany`"

# c3a484a1e3dd4fee880048c8fb13f2e1
#: ../../ref/contrib/admin/index.txt:2152
msgid ":meth:`~ModelAdmin.has_add_permission`"
msgstr ":meth:`~ModelAdmin.has_add_permission`"

# 2af67f9dbf3e473daa38bf0255401962
#: ../../ref/contrib/admin/index.txt:2153
msgid ":meth:`~ModelAdmin.has_change_permission`"
msgstr ":meth:`~ModelAdmin.has_change_permission`"

# 92422a80357540b08bdd0dd229cc17de
#: ../../ref/contrib/admin/index.txt:2154
msgid ":meth:`~ModelAdmin.has_delete_permission`"
msgstr ":meth:`~ModelAdmin.has_delete_permission`"

# 92422a80357540b08bdd0dd229cc17de
#: ../../ref/contrib/admin/index.txt:2155
msgid ":meth:`~ModelAdmin.has_module_permission`"
msgstr ":meth:`~ModelAdmin.has_module_permission`"

# 18835f3705414ec6bf2f242bb28f4662
#: ../../ref/contrib/admin/index.txt:2157
msgid "The ``InlineModelAdmin`` class adds:"
msgstr "Параметры класса ``InlineModelAdmin``:"

# 4499feccd1f04139a33243157e3f7d23
#: ../../ref/contrib/admin/index.txt:2161
msgid "The model which the inline is using. This is required."
msgstr "Модель используемая в \"inline\". Обязательный параметр."

# 61fb4474a93741bb868aec4fb1de655c
#: ../../ref/contrib/admin/index.txt:2165
msgid ""
"The name of the foreign key on the model. In most cases this will be dealt "
"with automatically, but ``fk_name`` must be specified explicitly if there "
"are more than one foreign key to the same parent model."
msgstr ""
"Название внешнего ключа модели. В большинстве случаев он определяется "
"автоматически, но вы должны указать ``fk_name``, если модель содержит "
"несколько внешних ключей к родительской модели."

# fc7328439c0a499bacbf4c3672156c33
#: ../../ref/contrib/admin/index.txt:2171
msgid ""
"This defaults to :class:`~django.forms.models.BaseInlineFormSet`. Using your "
"own formset can give you many possibilities of customization. Inlines are "
"built around :ref:`model formsets <model-formsets>`."
msgstr ""
"По умолчанию -- :class:`~django.forms.models.BaseInlineFormSet`. "
"Использование собственного класса предоставляет большие возможности для "
"переопределения поведения по умолчанию. Смотрите раздел о :ref:`наборах "
"модельных форм <model-formsets>`."

# 458b2abcc79d491fa8e442284f642ed9
#: ../../ref/contrib/admin/index.txt:2177
msgid ""
"The value for ``form`` defaults to ``ModelForm``. This is what is passed "
"through to :func:`~django.forms.models.inlineformset_factory` when creating "
"the formset for this inline."
msgstr ""
"Значение ``form`` по умолчанию -- ``ModelForm``. Это значение передается в :"
"func:`~django.forms.models.inlineformset_factory` при создании набора форм."

# 55dc2c1f633146ce9bfef867bf664678
#: ../../ref/contrib/admin/index.txt:2182
msgid ""
"When writing custom validation for ``InlineModelAdmin`` forms, be cautious "
"of writing validation that relies on features of the parent model. If the "
"parent model fails to validate, it may be left in an inconsistent state as "
"described in the warning in :ref:`validation-on-modelform`."
msgstr ""
"При добавлении собственной валидации в форму ``InlineModelAdmin``, "
"учитывайте состояние родительской модели. Если родительская форма не пройдет "
"валидацию, она может содержать не консистентные данные. Смотрите "
"предупреждение в :ref:`validation-on-modelform`."

#: ../../ref/contrib/admin/index.txt:2189
msgid ""
"A list or tuple containing extra CSS classes to apply to the fieldset that "
"is rendered for the inlines. Defaults to ``None``. As with classes "
"configured in :attr:`~ModelAdmin.fieldsets`, inlines with a ``collapse`` "
"class will be initially collapsed and their header will have a small \"show"
"\" link."
msgstr ""

# 1802c14c66554f4b854eed8e92dcbe94
#: ../../ref/contrib/admin/index.txt:2197
msgid ""
"This controls the number of extra forms the formset will display in addition "
"to the initial forms. See the :doc:`formsets documentation </topics/forms/"
"formsets>` for more information."
msgstr ""
"Указывает количество пустых форм для добавления объектов в наборе форм. "
"Подробности смотрите в :doc:`разделе о наборе форм </topics/forms/formsets>`."

# c81327308cc246039ab64b6abe9a9578
#: ../../ref/contrib/admin/index.txt:2202
msgid ""
"For users with JavaScript-enabled browsers, an \"Add another\" link is "
"provided to enable any number of additional inlines to be added in addition "
"to those provided as a result of the ``extra`` argument."
msgstr ""
"Если JavaScript включен в браузере, ссылка \"Add another\" позволит добавить "
"новую пустую форму в дополнение к формам указанным параметром ``extra``."

# 91f15dadb44a4a4d8e214295fa7dcdd1
#: ../../ref/contrib/admin/index.txt:2206
msgid ""
"The dynamic link will not appear if the number of currently displayed forms "
"exceeds ``max_num``, or if the user does not have JavaScript enabled."
msgstr ""
"Ссылка не появится если количество отображаемых форм превышает значение в "
"параметре ``max_num``, или если у пользователя отключен JavaScript."

# 3946cb4f19ac40e4927a05fdab7d8c07
#: ../../ref/contrib/admin/index.txt:2209
msgid ""
":meth:`InlineModelAdmin.get_extra` also allows you to customize the number "
"of extra forms."
msgstr ""
":meth:`InlineModelAdmin.get_extra` позволяет указать количество "
"дополнительных форм."

# b3006ebbb68e41ee8801beb0bfcc7890
#: ../../ref/contrib/admin/index.txt:2214
msgid ""
"This controls the maximum number of forms to show in the inline. This "
"doesn't directly correlate to the number of objects, but can if the value is "
"small enough. See :ref:`model-formsets-max-num` for more information."
msgstr ""
"Указывает максимальное количество форм. Этот параметр не определяет "
"количество связанных объектов. Подробности смотрите в разделе :ref:`model-"
"formsets-max-num`."

# 54c1fd6227664268bcb044ae70aded2e
#: ../../ref/contrib/admin/index.txt:2218
msgid ""
":meth:`InlineModelAdmin.get_max_num` also allows you to customize the "
"maximum number of extra forms."
msgstr ""
":meth:`InlineModelAdmin.get_max_num` позволяет указать максимальное "
"количество дополнительных форм."

# b3006ebbb68e41ee8801beb0bfcc7890
#: ../../ref/contrib/admin/index.txt:2223
msgid ""
"This controls the minimum number of forms to show in the inline. See :func:"
"`~django.forms.models.modelformset_factory` for more information."
msgstr ""
"Указывает минимальное количество отображаемых форм. Смотрите :func:`~django."
"forms.models.modelformset_factory`."

# 54c1fd6227664268bcb044ae70aded2e
#: ../../ref/contrib/admin/index.txt:2226
msgid ""
":meth:`InlineModelAdmin.get_min_num` also allows you to customize the "
"minimum number of displayed forms."
msgstr ""
":meth:`InlineModelAdmin.get_min_num` позволяет указать минимальное "
"количество отображаемых форм."

# 8f8e197e9ce44780ab8c4feab9c0eb17
#: ../../ref/contrib/admin/index.txt:2246
msgid "The template used to render the inline on the page."
msgstr "Шаблон для отображения."

# c08331d413cf481eb5a651ea299a1a03
#: ../../ref/contrib/admin/index.txt:2250
msgid ""
"An override to the ``verbose_name`` found in the model's inner ``Meta`` "
"class."
msgstr ""
"Позволяет переопределить значение ``verbose_name`` класса ``Meta`` модели."

# 50eb8222d809476ba8364e39f42ef9e6
#: ../../ref/contrib/admin/index.txt:2255
msgid ""
"An override to the ``verbose_name_plural`` found in the model's inner "
"``Meta`` class."
msgstr ""
"Позволяет переопределить значение ``verbose_name_plural`` класса ``Meta`` "
"модели."

# 83fdf32aa1ff4f7d9b2e895332aad801
#: ../../ref/contrib/admin/index.txt:2260
msgid ""
"Specifies whether or not inline objects can be deleted in the inline. "
"Defaults to ``True``."
msgstr ""
"Определяет можно ли удалять связанные объекты. По умолчанию равно ``True``."

# 83fdf32aa1ff4f7d9b2e895332aad801
#: ../../ref/contrib/admin/index.txt:2265
msgid ""
"Specifies whether or not inline objects that can be changed in the admin "
"have a link to the change form. Defaults to ``False``."
msgstr ""
"Определяет показывать ли ссылку на форму изменения для связанных объектов, "
"которые можно изменять. По умолчанию равно ``False``."

# 1d7f2c0129ca43968b8f84b84c52afe3
#: ../../ref/contrib/admin/index.txt:2270
msgid ""
"Returns a :class:`~django.forms.models.BaseInlineFormSet` class for use in "
"admin add/change views. See the example for :class:`ModelAdmin."
"get_formsets_with_inlines`."
msgstr ""
"Возвращает :class:`~django.forms.models.BaseInlineFormSet`, который будет "
"использоваться на странице создания/редактирования. Смотрите :class:"
"`ModelAdmin.get_formsets_with_inlines`."

# 6172bb3e05984369a03cb0d4560ddb91
#: ../../ref/contrib/admin/index.txt:2276
msgid ""
"Returns the number of extra inline forms to use. By default, returns the :"
"attr:`InlineModelAdmin.extra` attribute."
msgstr ""
"Возвращает количество форм. По умолчанию возвращает значение атрибута :attr:"
"`InlineModelAdmin.extra`."

# e51174bace4f44f7b87493032959b8c6
#: ../../ref/contrib/admin/index.txt:2279
msgid ""
"Override this method to programmatically determine the number of extra "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)::"
msgstr ""
"Вы можете переопределить метод и добавить логику для определения количества "
"форм. Например, учитывать данные объекта модели(передается как именованный "
"аргумент ``obj``)::"

# 4d7b91a72bbe402fa90ff2fc655f4def
#: ../../ref/contrib/admin/index.txt:2294
msgid ""
"Returns the maximum number of extra inline forms to use. By default, returns "
"the :attr:`InlineModelAdmin.max_num` attribute."
msgstr ""
"Возвращает максимальное количество дополнительных форм. По умолчанию "
"возвращает значение атрибута :attr:`InlineModelAdmin.max_num`."

# 5bf7a6ebed5846e8a5813dcacc9771bc
#: ../../ref/contrib/admin/index.txt:2297
msgid ""
"Override this method to programmatically determine the maximum number of "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)::"
msgstr ""
"Вы можете переопределить метод и добавить логику для определения "
"максимального количества форм. Например, учитывать данные объекта "
"модели(передается как именованный аргумент ``obj``)::"

# 4d7b91a72bbe402fa90ff2fc655f4def
#: ../../ref/contrib/admin/index.txt:2312
msgid ""
"Returns the minimum number of inline forms to use. By default, returns the :"
"attr:`InlineModelAdmin.min_num` attribute."
msgstr ""
"Возвращает минимальное количество дополнительных форм. По умолчанию "
"возвращает значение атрибута :attr:`InlineModelAdmin.min_num`."

# 5bf7a6ebed5846e8a5813dcacc9771bc
#: ../../ref/contrib/admin/index.txt:2315
msgid ""
"Override this method to programmatically determine the minimum number of "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)."
msgstr ""
"Вы можете переопределить метод и добавить логику для определения "
"минимального количества форм. Например, учитывать данные объекта "
"модели(передается как именованный аргумент ``obj``)."

# 00842b663c53452ab0401a21e32afe0c
#: ../../ref/contrib/admin/index.txt:2320
msgid ""
"Working with a model with two or more foreign keys to the same parent model"
msgstr "Работа с моделью с несколькими внешними ключами к одной модели"

# 47aa6e08dd324484a68befd652e4169c
#: ../../ref/contrib/admin/index.txt:2322
msgid ""
"It is sometimes possible to have more than one foreign key to the same "
"model. Take this model for instance::"
msgstr ""
"Модель может содержать несколько внешних ключей к одной модели, например::"

# b927bc00d82c47828d8a325dc39858b3
#: ../../ref/contrib/admin/index.txt:2331
msgid ""
"If you wanted to display an inline on the ``Person`` admin add/change pages "
"you need to explicitly define the foreign key since it is unable to do so "
"automatically::"
msgstr ""
"Если вы хотите использовать \"inline\" для этой модели на странице "
"редактирования/добавления объектов ``Person``, вам необходимо указать какой "
"внешний ключ использовать::"

# 33a84d0e7b724e529d405d39291b71c0
#: ../../ref/contrib/admin/index.txt:2348
msgid "Working with many-to-many models"
msgstr "Работа со связями многие-ко-многим"

# 7b9e31c8cf504f0f89cd2c8d8a0dd189
#: ../../ref/contrib/admin/index.txt:2350
msgid ""
"By default, admin widgets for many-to-many relations will be displayed on "
"whichever model contains the actual reference to the :class:`~django.db."
"models.ManyToManyField`. Depending on your ``ModelAdmin`` definition, each "
"many-to-many field in your model will be represented by a standard HTML "
"``<select multiple>``, a horizontal or vertical filter, or a "
"``raw_id_admin`` widget. However, it is also possible to replace these "
"widgets with inlines."
msgstr ""
"По умолчанию, для полей :class:`~django.db.models.ManyToManyField` "
"используется виджет определенный интерфейсом администратора. В зависимости "
"от параметров ``ModelAdmin``может использоваться стандартное HTML поле "
"``<select multiple>``, горизонтальный или вертикальный фильтр, или виджет "
"``raw_id_admin``. Однако вместо этого можно использовать \"inline\"."

# 09236f74df8d4f61917824a562311f49
#: ../../ref/contrib/admin/index.txt:2358
msgid "Suppose we have the following models::"
msgstr "Предположим у нас есть следующие модели::"

# d05344ce9ed2497fa8816901d60bfa39
#: ../../ref/contrib/admin/index.txt:2369
msgid ""
"If you want to display many-to-many relations using an inline, you can do so "
"by defining an ``InlineModelAdmin`` object for the relationship::"
msgstr ""
"Необходимо определить объект ``InlineModelAdmin`` для связи многое-ко-"
"многим::"

# f9b3ebd4cd344a2fb9a0dab630859bcb
#: ../../ref/contrib/admin/index.txt:2388
msgid "There are two features worth noting in this example."
msgstr "Есть две вещи в этом примере, которые следует отметить."

# 91571059057b4f9c9cd7710ae404ca77
#: ../../ref/contrib/admin/index.txt:2390
msgid ""
"Firstly - the ``MembershipInline`` class references ``Group.members."
"through``. The ``through`` attribute is a reference to the model that "
"manages the many-to-many relation. This model is automatically created by "
"Django when you define a many-to-many field."
msgstr ""
"Первая - класс ``MembershipInline`` ссылается на ``Group.members.through``. "
"Атрибут ``through`` указывает на модель управляющую связью многое-ко-многим. "
"Эта модель автоматически создается Django при определении связи."

# 41ca34c2f2684adfaec4cd1d1166144f
#: ../../ref/contrib/admin/index.txt:2395
msgid ""
"Secondly, the ``GroupAdmin`` must manually exclude the ``members`` field. "
"Django displays an admin widget for a many-to-many field on the model that "
"defines the relation (in this case, ``Group``). If you want to use an inline "
"model to represent the many-to-many relationship, you must tell Django's "
"admin to *not* display this widget - otherwise you will end up with two "
"widgets on your admin page for managing the relation."
msgstr ""
"Вторая -- класс ``GroupAdmin`` должен явно исключить поле ``members``. "
"Django отображает поле для связи многое-ко-многим (в нашем случае с моделью "
"``Group``). Если вы хотите использовать \"inline\", необходимо указать "
"Django, что поле *не* нужно отображать - иначе мы получим два виджета для "
"редактирования связи."

#: ../../ref/contrib/admin/index.txt:2402
msgid ""
"Note that when using this technique the :data:`~django.db.models.signals."
"m2m_changed` signals aren't triggered. This is because as far as the admin "
"is concerned, ``through`` is just a model with two foreign key fields rather "
"than a many-to-many relation."
msgstr ""
"Обратите внимание, при использовании такого подхода сигнал :data:`~django.db."
"models.signals.m2m_changed` не вызывается. Это вызвано тем, что для админки "
"``through`` просто модель с двумя внешними ключами, а не связь много-ко-"
"многим."

# af448172a1df46d0aa164ae921b1c5e1
#: ../../ref/contrib/admin/index.txt:2407
msgid ""
"In all other respects, the ``InlineModelAdmin`` is exactly the same as any "
"other. You can customize the appearance using any of the normal "
"``ModelAdmin`` properties."
msgstr ""
"Во всем остальном ``InlineModelAdmin`` работает так же, как и всегда. Вы "
"можете управлять отображением используя параметры ``ModelAdmin``."

# e4df5177a6ed4893a1ae6b36344907e3
#: ../../ref/contrib/admin/index.txt:2412
msgid "Working with many-to-many intermediary models"
msgstr "Работа с промежуточной моделью связи многое-ко-многим"

# 1907c34e02f64806af0d8f639c80ad96
#: ../../ref/contrib/admin/index.txt:2414
msgid ""
"When you specify an intermediary model using the ``through`` argument to a :"
"class:`~django.db.models.ManyToManyField`, the admin will not display a "
"widget by default. This is because each instance of that intermediary model "
"requires more information than could be displayed in a single widget, and "
"the layout required for multiple widgets will vary depending on the "
"intermediate model."
msgstr ""
"Если указать аргумент ``through`` для поля :class:`~django.db.models."
"ManyToManyField`, интерфейс администратора не отобразит поле для "
"редактирования. Это связано с тем, что промежуточная модель требует больше "
"данных, чем позволяет ввести стандартное поле."

# 0b8dee900aa3473fb054f213ce56ddac
#: ../../ref/contrib/admin/index.txt:2421
msgid ""
"However, we still want to be able to edit that information inline. "
"Fortunately, this is easy to do with inline admin models. Suppose we have "
"the following models::"
msgstr ""
"Однако, нам необходимо редактировать информацию промежуточной модели. К "
"счастью это можно сделать используя \"inline\" в интерфейсе администратора. "
"Предположим у нас есть следующие модели::"

# 3a4a6042ac5840b1bb8b0f4a4a26717b
#: ../../ref/contrib/admin/index.txt:2440
msgid ""
"The first step in displaying this intermediate model in the admin is to "
"define an inline class for the ``Membership`` model::"
msgstr ""
"Для начала определим отображение модели ``Membership`` в интерфейсе "
"администратора::"

# 9d5df188968441b08aaea7ae7a176481
#: ../../ref/contrib/admin/index.txt:2447
msgid ""
"This simple example uses the default ``InlineModelAdmin`` values for the "
"``Membership`` model, and limits the extra add forms to one. This could be "
"customized using any of the options available to ``InlineModelAdmin`` "
"classes."
msgstr ""
"В этом простом примере используются стандартные значения параметров "
"``InlineModelAdmin``, кроме количества дополнительных форм. Вы можете "
"изменить любые параметры класса ``InlineModelAdmin``."

# f8545df2ff174039ad40029cf079e360
#: ../../ref/contrib/admin/index.txt:2451
msgid "Now create admin views for the ``Person`` and ``Group`` models::"
msgstr "Теперь определим отображение моделей ``Person`` и ``Group``::"

# d8f183e7a2f740c0b3512fa6e3f2ba54
#: ../../ref/contrib/admin/index.txt:2459
msgid ""
"Finally, register your ``Person`` and ``Group`` models with the admin site::"
msgstr ""
"Теперь зарегистрируем модели ``Person`` и ``Group`` в интерфейсе "
"администратора::"

# 6a452f74f6ac40ae9398a8c267900504
#: ../../ref/contrib/admin/index.txt:2464
msgid ""
"Now your admin site is set up to edit ``Membership`` objects inline from "
"either the ``Person`` or the ``Group`` detail pages."
msgstr ""
"Теперь вы можете редактировать объекты ``Membership`` на странице объектов "
"``Person`` и ``Group``."

# 0ece22580d164193844468bb39ef6dda
#: ../../ref/contrib/admin/index.txt:2470
msgid "Using generic relations as an inline"
msgstr ""
"Использование связей с несколькими моделями в интерфейсе администратора"

# 39994070127b477eadc6a7ed8ff8fcbe
#: ../../ref/contrib/admin/index.txt:2472
msgid ""
"It is possible to use an inline with generically related objects. Let's say "
"you have the following models::"
msgstr ""
"Вы можете использовать \"inline\" для связей с несколькими моделями(generic "
"relations). Предположим, у вас есть следующие модели::"

# 5a05459b866f4ce3891808ec70a1aafd
#: ../../ref/contrib/admin/index.txt:2487
msgid ""
"If you want to allow editing and creating an ``Image`` instance on the "
"``Product``, add/change views you can use :class:`~django.contrib."
"contenttypes.admin.GenericTabularInline` or :class:`~django.contrib."
"contenttypes.admin.GenericStackedInline` (both subclasses of :class:`~django."
"contrib.contenttypes.admin.GenericInlineModelAdmin`) provided by :mod:"
"`~django.contrib.contenttypes.admin`. They implement tabular and stacked "
"visual layouts for the forms representing the inline objects, respectively, "
"just like their non-generic counterparts. They behave just like any other "
"inline. In your ``admin.py`` for this example app::"
msgstr ""
"Если вы хотите редактировать и добавлять объекты ``Image`` на странице "
"добавления/редактирования объектов ``Product``, вы можете использовать :"
"class:`~django.contrib.contenttypes.admin.GenericTabularInline` или :class:"
"`~django.contrib.contenttypes.admin.GenericStackedInline` (подклассы :class:"
"`~django.contrib.contenttypes.admin.GenericInlineModelAdmin`) из модуля :mod:"
"`~django.contrib.contenttypes.admin`. Они отображают группы форм для "
"добавления и редактирования связанных объектов, как и аналогичные классы из "
"приложения интерфейса администратора.  Пример ``admin.py`` для наших "
"моделей::"

# 920d69d9f33045bfbca20618f7c42405
#: ../../ref/contrib/admin/index.txt:2512
msgid ""
"See the :doc:`contenttypes documentation </ref/contrib/contenttypes>` for "
"more specific information."
msgstr ""
"Подробности смотрите в :doc:`разделе о contenttypes </ref/contrib/"
"contenttypes>`."

# 6d7af367a9b644ab9ea8a7b6c3434d9a
#: ../../ref/contrib/admin/index.txt:2518
msgid "Overriding admin templates"
msgstr "Переопределение шаблонов в интерфейсе администратора"

# fb7d3f7ed66941d7a399faaeeb1a12c3
#: ../../ref/contrib/admin/index.txt:2520
msgid ""
"It is relatively easy to override many of the templates which the admin "
"module uses to generate the various pages of an admin site. You can even "
"override a few of these templates for a specific app, or a specific model."
msgstr ""
"Переопределить шаблоны, которые использует интерфейс администратора, очень "
"легко. Вы можете переопределить шаблон для конкретного приложения или модели."

# 88c2748e1cff4a239dcb3233d58244e4
#: ../../ref/contrib/admin/index.txt:2525
msgid "Set up your projects admin template directories"
msgstr "Настройка каталогов в шаблонами"

# 6942ea34f69a41ff8614573419dfa27d
#: ../../ref/contrib/admin/index.txt:2527
msgid ""
"The admin template files are located in the ``contrib/admin/templates/"
"admin`` directory."
msgstr ""
"Шаблоны интерфейса администратора находятся в каталоге ``contrib/admin/"
"templates/admin``."

# 478ac2419580405497344e43f90c9332
#: ../../ref/contrib/admin/index.txt:2530
msgid ""
"In order to override one or more of them, first create an ``admin`` "
"directory in your project's ``templates`` directory. This can be any of the "
"directories you specified in the :setting:`DIRS <TEMPLATES-DIRS>` option of "
"the ``DjangoTemplates`` backend in the :setting:`TEMPLATES` setting. If you "
"have customized the ``'loaders'`` option, be sure ``'django.template.loaders."
"filesystem.Loader'`` appears before ``'django.template.loaders."
"app_directories.Loader'`` so that your custom templates will be found by the "
"template loading system before those that are included with :mod:`django."
"contrib.admin`."
msgstr ""
"Чтобы переопределить шаблоны, для начала создайте каталог ``admin`` в "
"каталоге ``templates`` проекта. Это может быть любой каталог, указанный в "
"опции :setting:`DIRS <TEMPLATES-DIRS>` бэкенда `DjangoTemplates`` в "
"настройке :setting:`TEMPLATES`. Если вы изменили опцию ``'loaders'``, "
"убедитесь, что ``'django.template.loaders.filesystem.Loader'`` стоит перед "
"``'django.template.loaders.app_directories.Loader'``. Таким образом ваши "
"шаблоны будет найдены до того, как Django найдет шаблоны из :mod:`django."
"contrib.admin`."

# a48c95c6dc0d4fe38ff8ffdab1693711
#: ../../ref/contrib/admin/index.txt:2540
msgid ""
"Within this ``admin`` directory, create sub-directories named after your "
"app. Within these app subdirectories create sub-directories named after your "
"models. Note, that the admin app will lowercase the model name when looking "
"for the directory, so make sure you name the directory in all lowercase if "
"you are going to run your app on a case-sensitive filesystem."
msgstr ""
"В каталоге ``admin`` создайте подкаталоги с названием приложений. В этих "
"подкаталогах создайте подкаталоги для моделей. Заметим, что интерфейс "
"администратора преобразует название модели в нижний регистр, так что "
"убедитесь что название каталогов в нижнем регистре, если вы использует "
"файловую систему учитывающую регистр названий каталог."

# f3b35b4cd9794260afe64627757af581
#: ../../ref/contrib/admin/index.txt:2546
msgid ""
"To override an admin template for a specific app, copy and edit the template "
"from the ``django/contrib/admin/templates/admin`` directory, and save it to "
"one of the directories you just created."
msgstr ""
"Чтобы переопределить шаблон для определенного приложения,  скопируйте и "
"отредактируйте необходимый шаблон из каталога ``django/contrib/admin/"
"templates/admin`` и сохраните его в созданном подкаталоге."

# 6279dec4d5384a949d05d9d407911c02
#: ../../ref/contrib/admin/index.txt:2550
msgid ""
"For example, if we wanted to add a tool to the change list view for all the "
"models in an app named ``my_app``, we would copy ``contrib/admin/templates/"
"admin/change_list.html`` to the ``templates/admin/my_app/`` directory of our "
"project, and make any necessary changes."
msgstr ""
"Например, если необходимо изменить шаблон для представления списка объектов "
"для всех моделей в приложении ``my_app``, скопируйте ``contrib/admin/"
"templates/admin/change_list.html`` в каталог ``templates/admin/my_app/`` "
"проекта и выполните необходимые изменения."

# e15042412feb4e51a9942bfb9dd35373
#: ../../ref/contrib/admin/index.txt:2556
msgid ""
"If we wanted to add a tool to the change list view for only a specific model "
"named 'Page', we would copy that same file to the ``templates/admin/my_app/"
"page`` directory of our project."
msgstr ""
"Если необходимо изменить шаблон только для модели 'Page', скопируйте тот же "
"файл в каталог ``templates/admin/my_app/page`` проекта."

# d398f852a315499f911930659106c75a
#: ../../ref/contrib/admin/index.txt:2561
msgid "Overriding vs. replacing an admin template"
msgstr "Переопределение или замена шаблона в интерфейсе администратора"

# 631c4b454b0247d4b1df1b98ad09772a
#: ../../ref/contrib/admin/index.txt:2563
msgid ""
"Because of the modular design of the admin templates, it is usually neither "
"necessary nor advisable to replace an entire template. It is almost always "
"better to override only the section of the template which you need to change."
msgstr ""
"Учитывая модульную структуру шаблонов в интерфейсе администратора, как "
"правило нет необходимости заменять весь шаблон. Целесообразней "
"переопределить только необходимый блок шаблона."

# 2bb2402ef89b4463a9977243d1a344b5
#: ../../ref/contrib/admin/index.txt:2567
msgid ""
"To continue the example above, we want to add a new link next to the "
"``History`` tool for the ``Page`` model. After looking at ``change_form."
"html`` we determine that we only need to override the ``object-tools-items`` "
"block. Therefore here is our new ``change_form.html`` :"
msgstr ""
"Продолжим пример выше. Например, необходимо добавить ссылку после ссылки "
"``History`` для модели ``Page``. Изучив ``change_form.html`` можно увидеть, "
"что нам необходимо переопределить только блок ``object-tools-items``. Вот "
"наш новый шаблон ``change_form.html`` :"

# b5aea2837da44488bb7311eaa985ef8d
#: ../../ref/contrib/admin/index.txt:2590
msgid ""
"And that's it! If we placed this file in the ``templates/admin/my_app`` "
"directory, our link would appear on the change form for all models within "
"my_app."
msgstr ""
"Вот и все! Добавим шаблон в каталог ``templates/admin/my_app`` и ссылка "
"появится на странице редактирования объекта для всех моделей приложения "
"my_app."

# de3f28ce1dbd43889511584bb761c629
#: ../../ref/contrib/admin/index.txt:2595
msgid "Templates which may be overridden per app or model"
msgstr "Шаблоны, которые можно переопределить для приложения или модели"

# eae7ba0fdea44f849352171fbde485c3
#: ../../ref/contrib/admin/index.txt:2597
msgid ""
"Not every template in ``contrib/admin/templates/admin`` may be overridden "
"per app or per model. The following can:"
msgstr ""
"Не каждый шаблон в ``contrib/admin/templates/admin`` можно переопределить "
"для приложения или модели. Вот список переопределяемых шаблонов:"

# 298b598ab1b24c01be5074831980d410
#: ../../ref/contrib/admin/index.txt:2600
msgid "``app_index.html``"
msgstr "``app_index.html``"

# e9b49dc449234c788c5adfd4fca881db
#: ../../ref/contrib/admin/index.txt:2601
msgid "``change_form.html``"
msgstr "``change_form.html``"

# 471b3afb578b4ed0a879046eb573caf1
#: ../../ref/contrib/admin/index.txt:2602
msgid "``change_list.html``"
msgstr "``change_list.html``"

# 2163ef04c8b5474fa1d3dd345685d285
#: ../../ref/contrib/admin/index.txt:2603
msgid "``delete_confirmation.html``"
msgstr "``delete_confirmation.html``"

# 8a18a4d3c8d64424b9437060266fd41a
#: ../../ref/contrib/admin/index.txt:2604
msgid "``object_history.html``"
msgstr "``object_history.html``"

# 298b598ab1b24c01be5074831980d410
#: ../../ref/contrib/admin/index.txt:2605
#, fuzzy
msgid "``popup_response.html``"
msgstr "``app_index.html``"

#: ../../ref/contrib/admin/index.txt:2609
#, fuzzy
msgid "The ability to override the ``popup_response.html`` template was added."
msgstr "Была добавлен возможность настраивать ``empty_value_display``."

# b901fa8168c74116a1eaa54c024521c6
#: ../../ref/contrib/admin/index.txt:2611
msgid ""
"For those templates that cannot be overridden in this way, you may still "
"override them for your entire project. Just place the new version in your "
"``templates/admin`` directory. This is particularly useful to create custom "
"404 and 500 pages."
msgstr ""
"Остальные шаблоны вы можете все еще переопределить для всего проекта. Просто "
"добавьте новую версию шаблона в каталог ``templates/admin``. Это особенно "
"полезно для переопределения страниц для 404 и 500 ошибки."

# 0800f50ff3db40ab8be4c921bf6981e3
#: ../../ref/contrib/admin/index.txt:2618
msgid ""
"Some of the admin templates, such as ``change_list_results.html`` are used "
"to render custom inclusion tags. These may be overridden, but in such cases "
"you are probably better off creating your own version of the tag in question "
"and giving it a different name. That way you can use it selectively."
msgstr ""
"Некоторые шаблоны, такие как ``change_list_request.html`` используются для "
"отображения включаемых тегов(inclusion tags). Вы можете переопределить их, "
"но лучше создать собственную версию тега, которая будет использовать новый "
"шаблон. В этом случае вы сможете использовать оба шаблона."

# 8c85b1724a924081986df28239ef0b20
#: ../../ref/contrib/admin/index.txt:2625
msgid "Root and login templates"
msgstr "Главный шаблон и шаблон страницы входа"

# b0e661da51a147d28807f1ebfdded87a
#: ../../ref/contrib/admin/index.txt:2627
msgid ""
"If you wish to change the index, login or logout templates, you are better "
"off creating your own ``AdminSite`` instance (see below), and changing the :"
"attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` or :attr:"
"`AdminSite.logout_template` properties."
msgstr ""
"Чтобы переопределить шаблоны главной страницы и страниц входа/выхода, лучше "
"создать собственный экземпляр ``AdminSite`` (смотрите ниже), и изменить "
"свойства :attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` "
"и :attr:`AdminSite.logout_template`."

# e90eccbb9c98451f9a378bb2ff598d1a
#: ../../ref/contrib/admin/index.txt:2633
msgid "``AdminSite`` objects"
msgstr "Объект ``AdminSite``"

# 68889b75e99649eb9a1352f240ca9152
#: ../../ref/contrib/admin/index.txt:2637
msgid ""
"A Django administrative site is represented by an instance of ``django."
"contrib.admin.sites.AdminSite``; by default, an instance of this class is "
"created as ``django.contrib.admin.site`` and you can register your models "
"and ``ModelAdmin`` instances with it."
msgstr ""
"Интерфейс администратора Django представлен экземпляром ``django.contrib."
"admin.sites.AdminSite``. По умолчанию, экземпляр этого класса находится в "
"``django.contrib.admin.site`` и вы можете зарегистрировать модели с "
"подклассами ``ModelAdmin`` в нем."

# 112de096487b4ec99d71ac5ad93cfd1a
#: ../../ref/contrib/admin/index.txt:2642
msgid ""
"When constructing an instance of an ``AdminSite``, you can provide a unique "
"instance name using the ``name`` argument to the constructor. This instance "
"name is used to identify the instance, especially when :ref:`reversing admin "
"URLs <admin-reverse-urls>`. If no instance name is provided, a default "
"instance name of ``admin`` will be used. See :ref:`customizing-adminsite` "
"for an example of customizing the :class:`AdminSite` class."
msgstr ""
"При создании экземпляра ``AdminSite``, вы можете указать уникальное название "
"экземпляра приложения передав аргумент ``name`` в конструктор. Это название "
"используется для идентификации экземпляра что важно при :ref:`поиске URL-ов "
"интерфейса администратора <admin-reverse-urls>`. Если этот аргумент не "
"указан, будет использовано значение по умолчанию ``admin``. Смотрите раздел :"
"ref:`customizing-adminsite` о том, как настраивать класс :class:`AdminSite`."

# 2453b2911ee047378c3b5f54b369b1b4
#: ../../ref/contrib/admin/index.txt:2651
msgid "``AdminSite`` attributes"
msgstr "Атрибуты ``AdminSite``"

# f57840ba07d9451e9906977c818f237c
#: ../../ref/contrib/admin/index.txt:2653
msgid ""
"Templates can override or extend base admin templates as described in :ref:"
"`admin-overriding-templates`."
msgstr ""
"Можно переопределить или заменить основные шаблоны в интерфейсе "
"администратора как это описано в разделе :ref:`admin-overriding-templates`."

# 59b71ba5d08e4b2f825c535aef099827
#: ../../ref/contrib/admin/index.txt:2658
msgid ""
"The text to put at the top of each admin page, as an ``<h1>`` (a string). By "
"default, this is \"Django administration\"."
msgstr ""
"Текст, который отображается в заголовке каждой страницы, в ``<h1>``. По "
"умолчанию \"Django administration\"."

# aca91156279e46b79acac967b5fc12d7
#: ../../ref/contrib/admin/index.txt:2663
msgid ""
"The text to put at the end of each admin page's ``<title>`` (a string). By "
"default, this is \"Django site admin\"."
msgstr ""
"Текст, который добавляется в ``<title>`` каждой страницы. По умолчанию "
"\"Django site admin\"."

#: ../../ref/contrib/admin/index.txt:2668
msgid ""
"The URL for the \"View site\" link at the top of each admin page. By "
"default, ``site_url`` is ``/``. Set it to ``None`` to remove the link."
msgstr ""
"URL для ссылки \"View site\" на верху каждой страницы админки. По умолчанию "
"``site_url`` равен ``/``. Чтобы убрать эту ссылку, укажите ``None``."

#: ../../ref/contrib/admin/index.txt:2671
msgid ""
"For sites running on a subpath, the :meth:`each_context` method checks if "
"the current request has ``request.META['SCRIPT_NAME']`` set and uses that "
"value if ``site_url`` isn't set to something other than ``/``."
msgstr ""

# 4995c616be564faea4202257b09d8784
#: ../../ref/contrib/admin/index.txt:2677
msgid ""
"The text to put at the top of the admin index page (a string). By default, "
"this is \"Site administration\"."
msgstr ""
"Текст, который отображается в верху главной странице админки. По умолчанию "
"\"Site administration\"."

# 23765b58bc024d02a994d52db7474471
#: ../../ref/contrib/admin/index.txt:2682
msgid ""
"Path to a custom template that will be used by the admin site main index "
"view."
msgstr "Шаблон, который будет использоваться для главной страницы."

# 23765b58bc024d02a994d52db7474471
#: ../../ref/contrib/admin/index.txt:2687
msgid ""
"Path to a custom template that will be used by the admin site app index view."
msgstr "Шаблон, который будет использоваться для главной страницей приложения."

#: ../../ref/contrib/admin/index.txt:2691
msgid ""
"The string to use for displaying empty values in the admin site's change "
"list. Defaults to a dash. The value can also be overridden on a per "
"``ModelAdmin`` basis and on a custom field within a ``ModelAdmin`` by "
"setting an ``empty_value_display`` attribute on the field. See :attr:"
"`ModelAdmin.empty_value_display` for examples."
msgstr ""
"Строка, которая используется при отображении пустых значений на странице "
"списка объектов. По умолчанию равна ``\"-\"``. Значение можно переопределить "
"для ``ModelAdmin`` и для каждого поля ``ModelAdmin``, указав атрибут "
"``empty_value_display`` для поля. Примеры смотрите в :attr:`ModelAdmin."
"empty_value_display`."

# e9c23e0592d74926a249dba50d399cd0
#: ../../ref/contrib/admin/index.txt:2699
msgid ""
"Path to a custom template that will be used by the admin site login view."
msgstr "Шаблон, который будет использоваться для страницы входа."

# a91f50c2c53d405dbd85cd85e7c9de7b
#: ../../ref/contrib/admin/index.txt:2703
msgid ""
"Subclass of :class:`~django.contrib.auth.forms.AuthenticationForm` that will "
"be used by the admin site login view."
msgstr ""
"Подкласс :class:`~django.contrib.auth.forms.AuthenticationForm` который "
"будет использовать для представления авторизации в интерфейсе администратора."

# af0b80612ae747c0a3b387da3c4787bb
#: ../../ref/contrib/admin/index.txt:2708
msgid ""
"Path to a custom template that will be used by the admin site logout view."
msgstr "Шаблон, который будет использоваться для страницы выхода."

# 733847b54e9342008b33a489f8a8a672
#: ../../ref/contrib/admin/index.txt:2712
msgid ""
"Path to a custom template that will be used by the admin site password "
"change view."
msgstr "Шаблон, который будет использоваться для страницы смены пароля."

# 920d551146ef4d29b5b2f5b2448a06ea
#: ../../ref/contrib/admin/index.txt:2717
msgid ""
"Path to a custom template that will be used by the admin site password "
"change done view."
msgstr ""
"Шаблон, который будет использоваться для страницы завершения смены пароля."

# e90eccbb9c98451f9a378bb2ff598d1a
#: ../../ref/contrib/admin/index.txt:2721
msgid "``AdminSite`` methods"
msgstr "Методы ``AdminSite``"

#: ../../ref/contrib/admin/index.txt:2725
msgid ""
"Returns a dictionary of variables to put in the template context for every "
"page in the admin site."
msgstr ""
"Возвращает словарь переменных, которые будут добавлены в контекст шаблона "
"для каждой странице этой админки."

#: ../../ref/contrib/admin/index.txt:2728
msgid "Includes the following variables and values by default:"
msgstr "По умолчанию содержит следующие переменны:"

#: ../../ref/contrib/admin/index.txt:2730
msgid "``site_header``: :attr:`AdminSite.site_header`"
msgstr "``site_header``: :attr:`AdminSite.site_header`"

#: ../../ref/contrib/admin/index.txt:2731
msgid "``site_title``: :attr:`AdminSite.site_title`"
msgstr "``site_title``: :attr:`AdminSite.site_title`"

#: ../../ref/contrib/admin/index.txt:2732
msgid "``site_url``: :attr:`AdminSite.site_url`"
msgstr "``site_url``: :attr:`AdminSite.site_url`"

# c3a484a1e3dd4fee880048c8fb13f2e1
#: ../../ref/contrib/admin/index.txt:2733
msgid "``has_permission``: :meth:`AdminSite.has_permission`"
msgstr "``has_permission``: :meth:`AdminSite.has_permission`"

#: ../../ref/contrib/admin/index.txt:2734
msgid ""
"``available_apps``: a list of applications from the :doc:`application "
"registry </ref/applications/>` available for the current user. Each entry in "
"the list is a dict representing an application with the following keys:"
msgstr ""
"``available_apps``: список приложений из :doc:`регистра приложений </ref/"
"applications/>`, которые доступны для текущего пользователя. Каждый элемент "
"списка содержит словарь, который представляет приложение, со следующими "
"ключами:"

#: ../../ref/contrib/admin/index.txt:2738
msgid "``app_label``: the application label"
msgstr "``app_label``: название приложения"

#: ../../ref/contrib/admin/index.txt:2739
msgid "``app_url``: the URL of the application index in the admin"
msgstr "``app_url``: URL главное страницы приложения в админке"

#: ../../ref/contrib/admin/index.txt:2740
msgid ""
"``has_module_perms``: a boolean indicating if displaying and accessing of "
"the module's index page is permitted for the current user"
msgstr ""
"``has_module_perms``: булево, которые указывает есть ли у пользователя права "
"к главной странице приложения в админке"

#: ../../ref/contrib/admin/index.txt:2742
msgid "``models``: a list of the models available in the application"
msgstr "``models``: список моделей прилоджения"

# c41afbd17a5b4847a3689f27be27511f
#: ../../ref/contrib/admin/index.txt:2744
msgid "Each model is a dict with the following keys:"
msgstr "Каждая модель представлена словарем со следующими ключами:"

#: ../../ref/contrib/admin/index.txt:2746
msgid "``object_name``: class name of the model"
msgstr "``object_name``: название класса модели"

#: ../../ref/contrib/admin/index.txt:2747
msgid "``name``: plural name of the model"
msgstr "``name``: множественное название модели"

#: ../../ref/contrib/admin/index.txt:2748
msgid ""
"``perms``: a ``dict`` tracking ``add``, ``change``, and ``delete`` "
"permissions"
msgstr ""
"``perms``: ``dict`` со значениями прав ``add``, ``change`` и ``delete``"

#: ../../ref/contrib/admin/index.txt:2749
msgid "``admin_url``: admin changelist URL for the model"
msgstr "``admin_url``: URL к странице списка объектов модели в админке"

#: ../../ref/contrib/admin/index.txt:2750
msgid "``add_url``: admin URL to add a new model instance"
msgstr "``add_url``: URL к странице добавления объекта модели в админке"

#: ../../ref/contrib/admin/index.txt:2754
msgid ""
"Returns ``True`` if the user for the given ``HttpRequest`` has permission to "
"view at least one page in the admin site. Defaults to requiring both :attr:"
"`User.is_active <django.contrib.auth.models.User.is_active>` and :attr:`User."
"is_staff <django.contrib.auth.models.User.is_staff>` to be ``True``."
msgstr ""
"Возвращает ``True``, если пользователь из переданного ``HttpRequest`` имеет "
"доступ хотя бы к одной странице админки. По умолчанию проверяется равны ли :"
"attr:`User.is_active <django.contrib.auth.models.User.is_active>` и :attr:"
"`User.is_staff <django.contrib.auth.models.User.is_staff>` ``True``."

#: ../../ref/contrib/admin/index.txt:2762
msgid ""
"Registers the given model class (or iterable of classes) with the given "
"``admin_class``. ``admin_class`` defaults to :class:`~django.contrib.admin."
"ModelAdmin` (the default admin options). If keyword arguments are given -- e."
"g. ``list_display`` -- they'll be applied as options to the admin class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2768
msgid ""
"Raises :class:`~django.core.exceptions.ImproperlyConfigured` if a model is "
"abstract. and ``django.contrib.admin.sites.AlreadyRegistered`` if a model is "
"already registered."
msgstr ""

# 4ddaf3feb80f4602bfb7d1632deccb1c
#: ../../ref/contrib/admin/index.txt:2773
msgid "Hooking ``AdminSite`` instances into your URLconf"
msgstr "Добавление экземпляра ``AdminSite`` в URLconf"

# cb0fbe38bae54ab982ec40ee852c4ad8
#: ../../ref/contrib/admin/index.txt:2775
#, fuzzy
msgid ""
"The last step in setting up the Django admin is to hook your ``AdminSite`` "
"instance into your URLconf. Do this by pointing a given URL at the "
"``AdminSite.urls`` method. It is not necessary to use :func:`~django.urls."
"include()`."
msgstr ""
"Последний шаг это добавить ваш экземпляр ``AdminSite`` в URLconf. Выполните "
"это добавив в URLconf метод ``AdminSite.urls``. :func:`~django.conf.urls."
"include()` использовать не обязательно."

# 6ed86d20b7934ea99b852140d28fcb6b
#: ../../ref/contrib/admin/index.txt:2780
msgid ""
"In this example, we register the default ``AdminSite`` instance ``django."
"contrib.admin.site`` at the URL ``/admin/`` ::"
msgstr ""
"В этом примере мы добавляем экземпляр по умолчанию ``AdminSite``, который "
"находится в  ``django.contrib.admin.site``, для URL ``/admin/`` ::"

#: ../../ref/contrib/admin/index.txt:2794
msgid "Customizing the :class:`AdminSite` class"
msgstr "Настройка класса :class:`AdminSite`"

# 7ec99d9cb2ca468e9913181500f1b718
#: ../../ref/contrib/admin/index.txt:2796
msgid ""
"If you'd like to set up your own admin site with custom behavior, you're "
"free to subclass ``AdminSite`` and override or add anything you like. Then, "
"simply create an instance of your ``AdminSite`` subclass (the same way you'd "
"instantiate any other Python class) and register your models and "
"``ModelAdmin`` subclasses with it instead of with the default site. Finally, "
"update :file:`myproject/urls.py` to reference your :class:`AdminSite` "
"subclass."
msgstr ""
"Если вам необходимо изменить поведение интерфейса администратора, вы можете "
"создать подкласс ``AdminSite`` и переопределить все что вам нужно. Затем "
"создайте экземпляр вашего подкласса ``AdminSite`` (как и любого другого "
"класса Python), и зарегистрируйте в нем ваши модели вместе с подклассами "
"``ModelAdmin``. Затем добавьте ваш подкласс :class:`AdminSite` в :file:"
"`myproject/urls.py`."

# e31bb8d3af614a97b1385722648af5b8
#: ../../ref/contrib/admin/index.txt:2828
msgid ""
"Note that you may not want autodiscovery of ``admin`` modules when using "
"your own ``AdminSite`` instance since you will likely be importing all the "
"per-app ``admin`` modules in your ``myproject.admin`` module. This means you "
"need to put ``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of "
"``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` setting."
msgstr ""
"Обратите внимание, при использовании своего экземпляра ``AdminSite``, "
"возможно, вы не захотите отключить автоматический поиск модулей ``admin`` и "
"регистрацию их в стандартной админке. Для этого укажите ``'django.contrib."
"admin.apps.SimpleAdminConfig'`` вместо ``'django.contrib.admin'`` в "
"настройке :setting:`INSTALLED_APPS`. Скорее всего в этом случае вы будете "
"импортировать модули ``admin`` в вашем модуле ``myproject.admin``."

# 5102be3ce9f643fa95086f33260002b5
#: ../../ref/contrib/admin/index.txt:2837
msgid "Multiple admin sites in the same URLconf"
msgstr "Несколько интерфейсов администратора в одном URLconf"

# 53fd1d51b4ce4ee9adceee103ef1331c
#: ../../ref/contrib/admin/index.txt:2839
msgid ""
"It's easy to create multiple instances of the admin site on the same Django-"
"powered website. Just create multiple instances of ``AdminSite`` and root "
"each one at a different URL."
msgstr ""
"Django позволяет легко создать несколько интерфейсов администратора для "
"одного сайта. Просто создайте несколько экземпляров ``AdminSite`` и добавьте "
"его к различным URL-ам."

# 0bd22c00b8814a218ab51c793cbf1793
#: ../../ref/contrib/admin/index.txt:2843
msgid ""
"In this example, the URLs ``/basic-admin/`` and ``/advanced-admin/`` feature "
"separate versions of the admin site -- using the ``AdminSite`` instances "
"``myproject.admin.basic_site`` and ``myproject.admin.advanced_site``, "
"respectively::"
msgstr ""
"В этом примере, URL-ы ``/basic-admin/`` и ``/advanced-admin/`` ведут к "
"различным экземплярам ``AdminSite`` -- ``myproject.admin.basic_site`` и "
"``myproject.admin.advanced_site`` соответственно::"

# b723c3ac7bdf4503a5c8bb3f0fb93a01
#: ../../ref/contrib/admin/index.txt:2857
msgid ""
"``AdminSite`` instances take a single argument to their constructor, their "
"name, which can be anything you like. This argument becomes the prefix to "
"the URL names for the purposes of :ref:`reversing them<admin-reverse-urls>`. "
"This is only necessary if you are using more than one ``AdminSite``."
msgstr ""
"Конструктор ``AdminSite`` принимает единственный аргумент -- название "
"экземпляра, которое может быть любым. Это значение будет использоваться как "
"префикс для названий URL при их :ref:`поиске<admin-reverse-urls>`. Это "
"необходимо если вы используете несколько экземпляров ``AdminSite``."

# f8e0fc2d082f40a7858e9ab14492c4e3
#: ../../ref/contrib/admin/index.txt:2863
msgid "Adding views to admin sites"
msgstr "Добавление представлений в интерфейс администратора"

# ed79d0d127b949e8aaf7e95762385ef6
#: ../../ref/contrib/admin/index.txt:2865
msgid ""
"Just like :class:`ModelAdmin`, :class:`AdminSite` provides a :meth:`~django."
"contrib.admin.ModelAdmin.get_urls()` method that can be overridden to define "
"additional views for the site. To add a new view to your admin site, extend "
"the base :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method to "
"include a pattern for your new view."
msgstr ""
"Как и :class:`ModelAdmin` :class:`AdminSite` содержит метод :meth:`~django."
"contrib.admin.ModelAdmin.get_urls()`, который можно переопределить и "
"добавить собственные представления в интерфейс администратора. "
"Переопределите метод :meth:`~django.contrib.admin.ModelAdmin.get_urls()` и "
"добавьте URL-шаблоны с вашими представлениями."

# 8398f4c114b9407c863d845c56f82d57
#: ../../ref/contrib/admin/index.txt:2874
msgid ""
"Any view you render that uses the admin templates, or extends the base admin "
"template, should set ``request.current_app`` before rendering the template. "
"It should be set to either ``self.name`` if your view is on an ``AdminSite`` "
"or ``self.admin_site.name`` if your view is on a ``ModelAdmin``."
msgstr ""
"Каждое представление, которое использует шаблоны интерфейса администратора "
"или унаследованные шаблоны, должно указать ``request.current_app`` перед "
"рендерингом шаблона. Он должен быть равен ``self.name``, если представление "
"определенно в ``AdminSite``, или ``self.admin_site.name``, если определено в "
"``ModelAdmin``."

# 4ddc68a6b09248daaded0e55eace8ad4
#: ../../ref/contrib/admin/index.txt:2883
#, fuzzy
msgid "Adding a password reset feature"
msgstr "Добавление возможности сброса пароля"

# e919a7c33d15488d887ef3b81cc23a01
#: ../../ref/contrib/admin/index.txt:2885
#, fuzzy
msgid ""
"You can add a password reset feature to the admin site by adding a few lines "
"to your URLconf. Specifically, add these four patterns::"
msgstr ""
"Вы можете определить возможность сбросить пароль добавив несколько строк в "
"URLconf. А точнее добавьте эти четыре URL-шаблона::"

# 42e1cd642a2b4f1a8e49a1c1e7bedf78
#: ../../ref/contrib/admin/index.txt:2911
msgid ""
"(This assumes you've added the admin at ``admin/`` and requires that you put "
"the URLs starting with ``^admin/`` before the line that includes the admin "
"app itself)."
msgstr ""
"(Предполагается что вы уже добавили приложения интерфейса администратора к "
"``admin/`` и что оно указано после всех URL-шаблонов начинающихся с ``^admin/"
"`` )."

# 8eb367eaf9ea4192a91717919df6039a
#: ../../ref/contrib/admin/index.txt:2915
msgid ""
"The presence of the ``admin_password_reset`` named URL will cause a "
"\"forgotten your password?\" link to appear on the default admin log-in page "
"under the password box."
msgstr ""
"Наличие URL-шаблона с названием ``admin_password_reset`` приведет к "
"появлению ссылки \"забыли ваш пароль?\" на странице входа в интерфейсе "
"администратора."

# e90eccbb9c98451f9a378bb2ff598d1a
#: ../../ref/contrib/admin/index.txt:2920
msgid "``LogEntry`` objects"
msgstr "Объекты ``LogEntry``"

#: ../../ref/contrib/admin/index.txt:2924
msgid ""
"The ``LogEntry`` class tracks additions, changes, and deletions of objects "
"done through the admin interface."
msgstr ""
"Класс ``LogEntry`` следит за добавлением, изменение и удалением объектов, "
"которые выполняются через админку."

# 2453b2911ee047378c3b5f54b369b1b4
#: ../../ref/contrib/admin/index.txt:2930
msgid "``LogEntry`` attributes"
msgstr "Атрибуты ``LogEntry``"

#: ../../ref/contrib/admin/index.txt:2934
msgid "The date and time of the action."
msgstr "Дата и время действия."

#: ../../ref/contrib/admin/index.txt:2938
msgid ""
"The user (an :setting:`AUTH_USER_MODEL` instance) who performed the action."
msgstr ""
"Пользователь (объект :setting:`AUTH_USER_MODEL`), который выполнил действие."

#: ../../ref/contrib/admin/index.txt:2943
msgid ""
"The :class:`~django.contrib.contenttypes.models.ContentType` of the modified "
"object."
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` измененного объекта."

#: ../../ref/contrib/admin/index.txt:2948
msgid "The textual representation of the modified object's primary key."
msgstr "Текстовое представление первичного ключа измененного объекта."

#: ../../ref/contrib/admin/index.txt:2952
msgid "The object`s ``repr()`` after the modification."
msgstr "Результат ``repr()`` над объектом после изменения."

#: ../../ref/contrib/admin/index.txt:2956
msgid "The type of action logged: ``ADDITION``, ``CHANGE``, ``DELETION``."
msgstr "Тип действия: ``ADDITION``, ``CHANGE``, ``DELETION``."

#: ../../ref/contrib/admin/index.txt:2958
msgid "For example, to get a list of all additions done through the admin::"
msgstr "Например, чтобы получить все добавления через админку::"

#: ../../ref/contrib/admin/index.txt:2966
msgid ""
"The detailed description of the modification. In the case of an edit, for "
"example, the message contains a list of the edited fields. The Django admin "
"site formats this content as a JSON structure, so that :meth:"
"`get_change_message` can recompose a message translated in the current user "
"language. Custom code might set this as a plain string though. You are "
"advised to use the :meth:`get_change_message` method to retrieve this value "
"instead of accessing it directly."
msgstr ""

# e90eccbb9c98451f9a378bb2ff598d1a
#: ../../ref/contrib/admin/index.txt:2975
msgid "``LogEntry`` methods"
msgstr "Методы ``LogEntry``"

#: ../../ref/contrib/admin/index.txt:2979
msgid "A shortcut that returns the referenced object."
msgstr "Возвращает связанный объект."

#: ../../ref/contrib/admin/index.txt:2983
msgid ""
"Formats and translates :attr:`change_message` into the current user "
"language. Messages created before Django 1.10 will always be displayed in "
"the language in which they were logged."
msgstr ""

# 992abc52a7c84b83b41f2974bb713315
#: ../../ref/contrib/admin/index.txt:2992
msgid "Reversing admin URLs"
msgstr "Поиск URL-ов интерфейса администратора"

# 6e74ca96e5bc4590a18cd9d943c69605
#: ../../ref/contrib/admin/index.txt:2994
msgid ""
"When an :class:`AdminSite` is deployed, the views provided by that site are "
"accessible using Django's :ref:`URL reversing system <naming-url-patterns>`."
msgstr ""
"После установки :class:`AdminSite` можно указывать ссылки к представлениям "
"интерфейса администратора используя :ref:`систему поиска URL-ов <naming-url-"
"patterns>`."

# 33ab7fa924e0455e9c2379a922574e8f
#: ../../ref/contrib/admin/index.txt:2997
msgid "The :class:`AdminSite` provides the following named URL patterns:"
msgstr ":class:`AdminSite` предоставляет следующие именованные URL-шаблоны:"

# 3ced1cc8c3244b32915e399346afe5f1
# 812707e2c846421b9579d72e539e9200
#: ../../ref/contrib/admin/index.txt:3000
#: ../../ref/contrib/admin/index.txt:3015
#: ../../ref/contrib/admin/index.txt:3027
msgid "Page"
msgstr "Страница"

# e273dfdccd624e78a24037e43cc1aabf
# 579782199c6f4f25a1d656800dda8621
#: ../../ref/contrib/admin/index.txt:3000
#: ../../ref/contrib/admin/index.txt:3015
#: ../../ref/contrib/admin/index.txt:3027
msgid "URL name"
msgstr "Название URL-а"

# 4871257cd8d04f98857aaa950b4f540e
# f6a7b22d8bcf42cc9ce90c67f71553d0
#: ../../ref/contrib/admin/index.txt:3000
#: ../../ref/contrib/admin/index.txt:3015
#: ../../ref/contrib/admin/index.txt:3027
msgid "Parameters"
msgstr "Параметры"

# c3136cee13bd4fe9bc43ebfb8b5d8c5a
#: ../../ref/contrib/admin/index.txt:3002
msgid "Index"
msgstr "Главная"

# fc7d00fbb1d04fa3a4b906680f6a87ac
#: ../../ref/contrib/admin/index.txt:3002
msgid "``index``"
msgstr "``index``"

#: ../../ref/contrib/admin/index.txt:3003
msgid "Login"
msgstr ""

# 04a6673c96364f2193151d69c527ee55
#: ../../ref/contrib/admin/index.txt:3003
#, fuzzy
msgid "``login``"
msgstr "``logout``"

# 691ae7c9c9c344fbb96a990145e61a0f
#: ../../ref/contrib/admin/index.txt:3004
msgid "Logout"
msgstr "Выхода"

# 04a6673c96364f2193151d69c527ee55
#: ../../ref/contrib/admin/index.txt:3004
msgid "``logout``"
msgstr "``logout``"

# 012a5976a543450abd363e67a70c021c
#: ../../ref/contrib/admin/index.txt:3005
#: ../../ref/contrib/admin/index.txt:3029
msgid "Password change"
msgstr "Смена пароля"

# 7c053428f2b948148d0d157d3cb1e7a5
#: ../../ref/contrib/admin/index.txt:3005
msgid "``password_change``"
msgstr "``password_change``"

# 4049107105b94546bc4d5c2b57e2a85d
#: ../../ref/contrib/admin/index.txt:3006
msgid "Password change done"
msgstr "Завершения смены пароля"

# 22bae5794d8c47d39b9b841368c5c0ca
#: ../../ref/contrib/admin/index.txt:3006
msgid "``password_change_done``"
msgstr "``password_change_done``"

# 7a6cedda712b4056a865cfd5699b2187
#: ../../ref/contrib/admin/index.txt:3007
msgid "i18n JavaScript"
msgstr "i18n JavaScript"

# d95136ee607b47d8a8fe99a165fcd1f1
#: ../../ref/contrib/admin/index.txt:3007
msgid "``jsi18n``"
msgstr "``jsi18n``"

# 4599eabb28a54ab98d7d755887985046
#: ../../ref/contrib/admin/index.txt:3008
msgid "Application index page"
msgstr "Главная страница приложения"

# c15c338c38f245b5a76c6c71581b6f5b
#: ../../ref/contrib/admin/index.txt:3008
msgid "``app_list``"
msgstr "``app_list``"

# 31c05c88f9fc420c83a8877dda132a85
#: ../../ref/contrib/admin/index.txt:3008
msgid "``app_label``"
msgstr "``app_label``"

# 6cb9512ba47a44d3bf2a64d294741100
#: ../../ref/contrib/admin/index.txt:3009
msgid "Redirect to object's page"
msgstr "Редирект на страницу объекта"

# 093e19c8bcc84d9fb0aed77deff953c6
#: ../../ref/contrib/admin/index.txt:3009
msgid "``view_on_site``"
msgstr "``view_on_site``"

# 8513246f6aff41459e250e1ee7b9331f
#: ../../ref/contrib/admin/index.txt:3009
msgid "``content_type_id``, ``object_id``"
msgstr "``content_type_id``, ``object_id``"

# 1e3a5db3d6a64388ac7a8e2167fd9672
#: ../../ref/contrib/admin/index.txt:3012
msgid ""
"Each :class:`ModelAdmin` instance provides an additional set of named URLs:"
msgstr ""
"Каждый экземпляр :class:`ModelAdmin` предоставляет дополнительные "
"именованные URL-шаблоны:"

# 90129ced45eb42018dcab715b040df99
#: ../../ref/contrib/admin/index.txt:3017
msgid "Changelist"
msgstr "Список объектов"

# fc366ed8ea254a599c81443388e2692a
#: ../../ref/contrib/admin/index.txt:3017
msgid "``{{ app_label }}_{{ model_name }}_changelist``"
msgstr "``{{ app_label }}_{{ model_name }}_changelist``"

# 2479430b9f7f426ea0f4f9e4216d6195
#: ../../ref/contrib/admin/index.txt:3018
msgid "Add"
msgstr "Добавления объекта"

# a7465f9b456549f3bf5e2d3451c0b477
#: ../../ref/contrib/admin/index.txt:3018
msgid "``{{ app_label }}_{{ model_name }}_add``"
msgstr "``{{ app_label }}_{{ model_name }}_add``"

# 2462c0dc0c244cb08b796a0fc08ad153
#: ../../ref/contrib/admin/index.txt:3019
msgid "History"
msgstr "Истории"

# fba1deaab92149cbae8aab88e3990a6f
#: ../../ref/contrib/admin/index.txt:3019
msgid "``{{ app_label }}_{{ model_name }}_history``"
msgstr "``{{ app_label }}_{{ model_name }}_history``"

# d17822be6c044b838899e439ea154340
# 47ad3898d85048e9a3b2e7dfdcbf874f
# 7fa2c47d946e470abf52746ab37e8188
#: ../../ref/contrib/admin/index.txt:3019
#: ../../ref/contrib/admin/index.txt:3020
#: ../../ref/contrib/admin/index.txt:3021
msgid "``object_id``"
msgstr "``object_id``"

# 9c0c3e0cccc246c08b558844200ca714
#: ../../ref/contrib/admin/index.txt:3020
msgid "Delete"
msgstr "Удаления объекта"

# a1ddcdddfb8542bf928f4220f4544685
#: ../../ref/contrib/admin/index.txt:3020
msgid "``{{ app_label }}_{{ model_name }}_delete``"
msgstr "``{{ app_label }}_{{ model_name }}_delete``"

# be885226616b44419149f704bae1b055
#: ../../ref/contrib/admin/index.txt:3021
msgid "Change"
msgstr "Изменения объекта"

# e599e1ae4bfd4c21a6ebebaa015533fb
#: ../../ref/contrib/admin/index.txt:3021
msgid "``{{ app_label }}_{{ model_name }}_change``"
msgstr "``{{ app_label }}_{{ model_name }}_change``"

# 33ab7fa924e0455e9c2379a922574e8f
#: ../../ref/contrib/admin/index.txt:3024
msgid "The ``UserAdmin`` provides a named URL:"
msgstr "``UserAdmin`` предоставляет следующие именованные URL-шаблоны:"

# 7c053428f2b948148d0d157d3cb1e7a5
#: ../../ref/contrib/admin/index.txt:3029
msgid "``auth_user_password_change``"
msgstr "``auth_user_password_change``"

# d17822be6c044b838899e439ea154340
# 47ad3898d85048e9a3b2e7dfdcbf874f
# 7fa2c47d946e470abf52746ab37e8188
#: ../../ref/contrib/admin/index.txt:3029
msgid "``user_id``"
msgstr "``user_id``"

# c70c5138baf4471f894454ec971f380b
#: ../../ref/contrib/admin/index.txt:3032
msgid ""
"These named URLs are registered with the application namespace ``admin``, "
"and with an instance namespace corresponding to the name of the Site "
"instance."
msgstr ""
"Эти именованные URL-шаблоны зарегистрированы с названием экземпляра "
"приложения ``admin`` и названием экземпляра приложения, указанным при "
"создании ``AdminSite``."

# 0b07c656824a40aa879514bf47133ba8
#: ../../ref/contrib/admin/index.txt:3035
msgid ""
"So - if you wanted to get a reference to the Change view for a particular "
"``Choice`` object (from the polls application) in the default admin, you "
"would call::"
msgstr ""
"Например, нам необходимо получить ссылку на страницу изменения объекта "
"модели ``Choice`` (из приложения ``polls``) в стандартном интерфейсе "
"администратора. Для этого необходимо выполнить следующий код::"

# 6ee0fe5f82ad4504b3c64d218b3649f1
#: ../../ref/contrib/admin/index.txt:3043
msgid ""
"This will find the first registered instance of the admin application "
"(whatever the instance name), and resolve to the view for changing ``poll."
"Choice`` instances in that instance."
msgstr ""
"Этот код найдет первый зарегистрированный экземпляр приложения ``admin`` (не "
"зависимо от определенного названия экземпляра) и найдет ссылку на "
"представление для редактирования объекта ``poll.Choice``."

# a3695edcae5b465ba8235ed96a15f361
#: ../../ref/contrib/admin/index.txt:3047
msgid ""
"If you want to find a URL in a specific admin instance, provide the name of "
"that instance as a ``current_app`` hint to the reverse call. For example, if "
"you specifically wanted the admin view from the admin instance named "
"``custom``, you would need to call::"
msgstr ""
"Если необходимо найти URL в определенном экземпляре приложения, укажите "
"значение ``current_app``. Например, если необходимо получить ссылку на "
"представление в экземпляре приложения с названием ``custom``, выполните "
"следующий код::"

# e350c512e849410c8a367848b751cb84
#: ../../ref/contrib/admin/index.txt:3054
msgid ""
"For more details, see the documentation on :ref:`reversing namespaced URLs "
"<topics-http-reversing-url-namespaces>`."
msgstr ""
"Подробности смотрите в разделе о :ref:`пространстве имен в конфигурации URL-"
"ов <topics-http-reversing-url-namespaces>`."

# 47bd960d1df745feb3e88d4c9e0209bc
#: ../../ref/contrib/admin/index.txt:3057
msgid ""
"To allow easier reversing of the admin urls in templates, Django provides an "
"``admin_urlname`` filter which takes an action as argument:"
msgstr ""
"Для более удобного поиска URL-ов в шаблонах, Django предоставляет фильтр "
"``admin_urlname``, который принимает название действия в качестве аргумента:"

# 34488de17f8a4be18fb8cef50e643239
#: ../../ref/contrib/admin/index.txt:3066
msgid ""
"The action in the examples above match the last part of the URL names for :"
"class:`ModelAdmin` instances described above. The ``opts`` variable can be "
"any object which has an ``app_label`` and ``model_name`` attributes and is "
"usually supplied by the admin views for the current model."
msgstr ""
"Название действия совпадает с последней частью названия URL-шаблона в :class:"
"`ModelAdmin`, которые описаны выше. Значение ``opts`` может быть любым "
"объектом содержащим ``app_label`` и ``model_name``, эта переменная обычно "
"указывается представлением в интерфейсе администратора для текущей модели."

#: ../../ref/contrib/admin/index.txt:3074
msgid "The ``staff_member_required`` decorator"
msgstr "Декоратор ``staff_member_required``"

#: ../../ref/contrib/admin/index.txt:3078
msgid ""
"This decorator is used on the admin views that require authorization. A view "
"decorated with this function will having the following behavior:"
msgstr ""
"Декоратор используется для представлений админки, чтобы проверять "
"авторизацию. Представления с этим декоратором будут работать следующим "
"образом:"

#: ../../ref/contrib/admin/index.txt:3081
msgid ""
"If the user is logged in, is a staff member (``User.is_staff=True``), and is "
"active (``User.is_active=True``), execute the view normally."
msgstr ""
"Если пользователь авторизирован, и он администратор (``User."
"is_staff=True``), и активен (``User.is_active=True``), выполнить "
"представление."

#: ../../ref/contrib/admin/index.txt:3084
msgid ""
"Otherwise, the request will be redirected to the URL specified by the "
"``login_url`` parameter, with the originally requested path in a query "
"string variable specified by ``redirect_field_name``. For example: ``/admin/"
"login/?next=/admin/polls/question/3/``."
msgstr ""
"Иначе запросе будет перенаправлен на URL, указанный в параметре "
"``login_url``, который по умолчанию равен значению аргумента с названием из "
"``redirect_field_name``. Например: ``/admin/login/?next=/admin/polls/"
"question/3/``."

# d5220d676bf843d2b88ba594780327ab
# 318b244d88e44fd1ab19841a691ebac7
# f2744e6edf9c4f3c9b9a8e191dfb73ab
# df28920470914f8b9d19be23bbdc97b9
#: ../../ref/contrib/admin/index.txt:3089
msgid "Example usage::"
msgstr "Пример использования::"

#~ msgid ""
#~ "In older versions, you could add an ``allow_tags`` attribute to the "
#~ "method to prevent auto-escaping. This attribute is deprecated as it's "
#~ "safer to use :func:`~django.utils.html.format_html`, :func:`~django.utils."
#~ "html.format_html_join`, or :func:`~django.utils.safestring.mark_safe` "
#~ "instead."
#~ msgstr ""
#~ "В предыдущих версиях вы могли добавить атрибут ``allow_tags`` методу, "
#~ "чтобы избежать экранирования. Этот атрибут устарел, безопаснее "
#~ "использовать :func:`~django.utils.html.format_html`, :func:`~django.utils."
#~ "html.format_html_join`, или :func:`~django.utils.safestring.mark_safe`."

# 9a0239767288486d9b1cd343a5b32270
#, fuzzy
#~ msgid "The embedded jQuery was upgraded from 2.1.4 to 2.2.3."
#~ msgstr "Встроенный jQuery был обновлен с 1.9.1 до 1.11.2."

#, fuzzy
#~ msgid ""
#~ "The embedded jQuery was upgraded from 1.11.2 to 2.1.4. This drops support "
#~ "for Internet Explorer 8 and below. You can restore support by :ref:"
#~ "`including your own version of jQuery 1.X <admin-browser-support-19>`."
#~ msgstr ""
#~ "Встроенный jQuery был обновлен с 1.11.2 до 2.1.4. Internet Explorer 8 и "
#~ "ниже больше не поддерживаются. Вы можете вернуть поддержку :ref:`добавив "
#~ "собственную версию jQuery 1.X <admin-browser-support-19>`."

# 9c9779b7ea094b29b2e508be97ed21bc
#~ msgid "The ``available_apps`` variable was added."
#~ msgstr "Был добавлен параметр ``available_apps``."

#~ msgid ""
#~ "In previous versions, you would pass ``admin.site.urls`` to :func:"
#~ "`~django.conf.urls.include()`."
#~ msgstr ""
#~ "В предыдущих версиях ``admin.site.urls`` передавался в :func:`~django."
#~ "conf.urls.include()`."

# 7c91574328a34c8ca6077b3e2a376ec6
#~ msgid ""
#~ "\"Save as\" means the object will be saved as a new object (with a new "
#~ "ID), rather than the old object."
#~ msgstr "\"Сохранить как\" сохранит объект как новый (с новым ID)."

# 9c9779b7ea094b29b2e508be97ed21bc
#~ msgid "The ``obj_id`` parameter was added."
#~ msgstr "Был добавлен параметр ``obj_id``."

#~ msgid ""
#~ "The ``request`` argument and the ``has_permission`` variable were added."
#~ msgstr "Были добавлены аргументы ``request`` и ``has_permission``."

# 8398f4c114b9407c863d845c56f82d57
#~ msgid ""
#~ "In previous versions of Django, you had to provide the ``current_app`` "
#~ "argument to :class:`~django.template.RequestContext` or :class:`~django."
#~ "template.Context` when rendering the template."
#~ msgstr ""
#~ "В предыдущих версиях Django необходимо было передавать аргумент "
#~ "``current_app`` в :class:`~django.template.RequestContext` или :class:"
#~ "`~django.template.Context` при рендеринге шаблона."

#~ msgid ""
#~ "The detailed description of the modification. In the case of an edit, for "
#~ "example, the message contains a list of the edited fields."
#~ msgstr ""
#~ "Подробное описание изменения. В случае редактирования, например, "
#~ "сообщение содержит список отредактированных объектов."

# 028fb33e1da24ca49f7fe4dad009c272
#~ msgid ""
#~ "Previous versions of Django recommended calling this function directly in "
#~ "the URLconf. As of Django 1.7 this isn't needed anymore. :class:`~django."
#~ "contrib.admin.apps.AdminConfig` takes care of running the auto-discovery "
#~ "automatically."
#~ msgstr ""
#~ "В предыдущих версиях Django рекомендовалось явно вызывать эту функцию в "
#~ "URLconf. С Django 1.7 больше нет в этом необходимости. :class:`~django."
#~ "contrib.admin.apps.AdminConfig` сам позаботится об этом."

# c7f9fac731f9419f847b3aea5ed885db
#~ msgid ""
#~ "In previous versions, the admin needed to be instructed to look for "
#~ "``admin.py`` files with :func:`~django.contrib.admin.autodiscover()`. As "
#~ "of Django 1.7, auto-discovery is enabled by default and must be "
#~ "explicitly disabled when it's undesirable."
#~ msgstr ""
#~ "В предыдущих версиях поиск ``admin.py`` файлов запускался явно с помощью :"
#~ "func:`~django.contrib.admin.autodiscover()`. В Django 1.7 все выполняется "
#~ "автоматически."

# ffe56e8772b543c2883fc99257aa2d01
#~ msgid "``None`` was added as a valid ``list_display_links`` value."
#~ msgstr "Можно указать ``None`` в ``list_display_links``."

# c7effcefb96b416cad6e83af27e4bbd8
#~ msgid ""
#~ "``None`` was added as a valid ``get_list_display_links()`` return value."
#~ msgstr "Можно вернуть ``None`` из ``get_list_display_links()``."

# e5ef44250a2a43a1bd131ce4e6ffeb60
#~ msgid "Use :meth:`get_formsets_with_inlines()` instead."
#~ msgstr "Используйте :meth:`get_formsets_with_inlines()` вместо него."

# b7aa587a7bec413eb30aa44ad9792547
#~ msgid ""
#~ "Yields  :class:`InlineModelAdmin`\\s for use in admin add and change "
#~ "views."
#~ msgstr ""
#~ "Выполняет yield по :class:`InlineModelAdmin`, чтобы вернуть набор форм "
#~ "для страницы создания и изменения."

# 225a9dbd8f204db99d05957880b229ba
#~ msgid ""
#~ "For example if you wanted to display a particular inline only in the "
#~ "change view, you could override ``get_formsets`` as follows::"
#~ msgstr ""
#~ "Например, если некоторый inline необходимо отображать только при "
#~ "редактировании, можно переопределить метод ``get_formsets``::"

# b03f8dfa1cfa4031b00bab51e6740644
#~ msgid ""
#~ "``raw_id_fields`` is a list of fields you would like to change into a "
#~ "``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
#~ msgstr ""
#~ "``raw_id_fields`` -- список полей которые должны использовать ``Input`` "
#~ "виджет для полей ``ForeignKey`` или ``ManyToManyField``::"

# 8fe179e521384f34b104b151ef1dcd9a
#~ msgid "In previous versions, the admin wasn't enabled by default."
#~ msgstr ""
#~ "В предыдущих версиях интерфейс администратора не был включен по умолчанию."

# 239a0c2ab5cc41f987925a66b760d594
#~ msgid ""
#~ "If you wanted to hide a field from non-superusers, for example, you could "
#~ "override ``get_form`` as follows::"
#~ msgstr ""
#~ "Если вы хотите скрыть некоторые поля для не суперпользователей, можно "
#~ "переопределить метод ``get_form``::"

# 92e030a4d4ff48659d5ff9aad04d7077
#~ msgid "The ``get_queryset`` method was previously named ``queryset``."
#~ msgstr "Метод ``get_queryset`` раньше назывался ``queryset``."

# df8aa686f1ed44fd930677460ef18289
#~ msgid ""
#~ "In this example, we register the ``AdminSite`` instance ``myproject.admin."
#~ "admin_site`` at the URL ``/myadmin/`` ::"
#~ msgstr ""
#~ "В этом примере мы добавляем собственный экземпляр ``AdminSite``, который "
#~ "находится в  ``myproject.admin.admin_site`` для URL ``/myadmin/`` ::"

# e791f85f96ba4e74935766c7c99f691b
#~ msgid ""
#~ "The pattern for :func:`~django.contrib.auth.views.password_reset_confirm` "
#~ "changed as the ``uid`` is now base 64 encoded."
#~ msgstr ""
#~ "Изменился URL-шаблон для :func:`~django.contrib.auth.views."
#~ "password_reset_confirm` т.к. ``uid`` теперь закодирован в base64."

# f44048143ac94a9c984c94f04839ec22
#~ msgid ""
#~ "In order to override one or more of them, first create an ``admin`` "
#~ "directory in your project's ``templates`` directory. This can be any of "
#~ "the directories you specified in :setting:`TEMPLATE_DIRS`."
#~ msgstr ""
#~ "Чтобы переопределить их, создайте каталог ``admin`` в каталоге "
#~ "``templates`` вашего проекта. Это может быть любой другой каталог "
#~ "указанный в настройке :setting:`TEMPLATE_DIRS`."

# 38029ee9669f470fbc01c77899908dd5
#~ msgid ""
#~ "Above we used ``admin.autodiscover()`` to automatically load the :setting:"
#~ "`INSTALLED_APPS` admin.py modules."
#~ msgstr ""
#~ "Перед этим мы используем ``admin.autodiscover()`` для загрузки модулей "
#~ "admin.py для приложений в :setting:`INSTALLED_APPS`."

# c2525d9e3e4747449ddafa8beea62ef8
#~ msgid "There are seven steps in activating the Django admin site:"
#~ msgstr "Установка интерфейса администратора состоит из семи шагов:"

# 960761936520499ca5a79fcf74972669
#~ msgid ""
#~ "Note that Django will use :meth:`~django.db.models.query.QuerySet."
#~ "select_related`, regardless of this setting if one of the "
#~ "``list_display`` fields is a ``ForeignKey``."
#~ msgstr ""
#~ "Заметим, Django будет использовать :meth:`~django.db.models.query."
#~ "QuerySet.select_related` не зависимо от этой настройки, если хотя бы одно "
#~ "поле в ``list_display`` является ``ForeignKey``."

# 02bdcc8d6c5e4508a7067e267866aac9
#~ msgid ""
#~ "Django honors all elements in the list/tuple; before 1.4, only the first "
#~ "was respected."
#~ msgstr ""
#~ "Django учитывает все элементы в списке/кортеже, до 1.4 использовался "
#~ "только первый."
