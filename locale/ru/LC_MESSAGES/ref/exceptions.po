# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013, 2014, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2015-12-10 00:34+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 487dc73cd24a4edfac3051eeb4575dc3
#: ../../ref/exceptions.txt:3
msgid "Django Exceptions"
msgstr "Исключения Django"

# 8c2d62ae377746f1948698bb72c37481
#: ../../ref/exceptions.txt:5
msgid ""
"Django raises some of its own exceptions as well as standard Python "
"exceptions."
msgstr ""
"Django вызывает несколько собственных исключений на ряду со стандартными "
"исключениями Python."

# 487dc73cd24a4edfac3051eeb4575dc3
#: ../../ref/exceptions.txt:8
msgid "Django Core Exceptions"
msgstr "Основные исключения Django"

# d0b0c09969674a5bbdaf2d6781edd735
#: ../../ref/exceptions.txt:13
msgid ""
"Django core exception classes are defined in ``django.core.exceptions``."
msgstr "Основные исключения Django определены в :mod:`django.core.exceptions`."

# 64f2412ef18d4ef492ab738b0f60cc6f
#: ../../ref/exceptions.txt:16
msgid "``ObjectDoesNotExist``"
msgstr "``ObjectDoesNotExist``"

# a1a3199715ed4f20bc13fb57134f7a2f
#: ../../ref/exceptions.txt:20
msgid ""
"The base class for :exc:`~django.db.models.Model.DoesNotExist` exceptions; a "
"``try/except`` for ``ObjectDoesNotExist`` will catch :exc:`~django.db.models."
"Model.DoesNotExist` exceptions for all models."
msgstr ""
"Основной класс :exc:`~django.db.models.Model.DoesNotExist`. ``try/except`` "
"для ``ObjectDoesNotExist`` словит исключения :exc:`~django.db.models.Model."
"DoesNotExist` для всех моделей."

# 079c1b35722945c2886433ce711bd3e9
#: ../../ref/exceptions.txt:24
msgid ""
"See :meth:`~django.db.models.query.QuerySet.get()` for further information "
"on :exc:`ObjectDoesNotExist` and :exc:`~django.db.models.Model.DoesNotExist`."
msgstr ""
"Смотрите :meth:`~django.db.models.query.QuerySet.get()` для подробной "
"информации об исключениях :exc:`ObjectDoesNotExist` и :exc:`~django.db."
"models.Model.DoesNotExist`."

# 64f2412ef18d4ef492ab738b0f60cc6f
#: ../../ref/exceptions.txt:28
msgid "``FieldDoesNotExist``"
msgstr "``FieldDoesNotExist``"

# 6bd47993f8ff437fad5401a87fff7a25
#: ../../ref/exceptions.txt:32
msgid ""
"The ``FieldDoesNotExist`` exception is raised by a model's ``_meta."
"get_field()`` method when the requested field does not exist on the model or "
"on the model's parents."
msgstr ""
"Исключение ``FieldDoesNotExist`` вызывается методом ``_meta.get_field()`` "
"модели, если запрошенное поле не найдено в модели или в предках модели."

# 6cf2194073b1492085e79737a92410d2
#: ../../ref/exceptions.txt:37
msgid "``MultipleObjectsReturned``"
msgstr "``MultipleObjectsReturned``"

# 1d5216a0096b47e0948aadc060b773ba
#: ../../ref/exceptions.txt:41
msgid ""
"The :exc:`MultipleObjectsReturned` exception is raised by a query if only "
"one object is expected, but multiple objects are returned. A base version of "
"this exception is provided in :mod:`django.core.exceptions`; each model "
"class contains a subclassed version that can be used to identify the "
"specific object type that has returned multiple objects."
msgstr ""
"Исключение :exc:`MultipleObjectsReturned` вызывается запросом при получении "
"нескольких объектов в случае, когда ожидался один объект. Базовая версия "
"этого исключения предоставляется модулем :mod:`django.core.exceptions`; "
"каждый класс модели содержит версию подкласса, которая может использоваться "
"для идентификации особого объектного типа, который возвратил коллекцию "
"объектов."

# 270e5c2824ff459bac3b08366ae0bbc8
#: ../../ref/exceptions.txt:47
msgid ""
"See :meth:`~django.db.models.query.QuerySet.get()` for further information."
msgstr ""
"См. :meth:`~django.db.models.query.QuerySet.get()` для подробной информации."

# a95feca949344849854e2db28d06267e
#: ../../ref/exceptions.txt:50
msgid "``SuspiciousOperation``"
msgstr "``SuspiciousOperation``"

# 450315d03c5d4684bda266c0766de1a6
#: ../../ref/exceptions.txt:54
msgid ""
"The :exc:`SuspiciousOperation` exception is raised when a user has performed "
"an operation that should be considered suspicious from a security "
"perspective, such as tampering with a session cookie. Subclasses of "
"``SuspiciousOperation`` include:"
msgstr ""
"Исключение :exc:`SuspiciousOperation` вызывается когда пользователь выполнил "
"операцию, которая должна быть рассмотрена как подозрительная с точки зрения "
"безопасности, например, при подмене куки сессии. Подклассы "
"``SuspiciousOperation``:"

# c8cc5ddfd2a246b8bb8efb0fadc377d2
#: ../../ref/exceptions.txt:59
msgid "``DisallowedHost``"
msgstr "``DisallowedHost``"

# 4f929b5c7ce042e4afe399fe91f88add
#: ../../ref/exceptions.txt:60
msgid "``DisallowedModelAdminLookup``"
msgstr "``DisallowedModelAdminLookup``"

# 4f929b5c7ce042e4afe399fe91f88add
#: ../../ref/exceptions.txt:61
msgid "``DisallowedModelAdminToField``"
msgstr "``DisallowedModelAdminToField``"

# c845f1f2fd384a14afdd6131311a1740
#: ../../ref/exceptions.txt:62
msgid "``DisallowedRedirect``"
msgstr "``DisallowedRedirect``"

# 39bc7e22b942457cab544113b9f3b37a
#: ../../ref/exceptions.txt:63
msgid "``InvalidSessionKey``"
msgstr "``InvalidSessionKey``"

#: ../../ref/exceptions.txt:64
msgid "``RequestDataTooBig``"
msgstr ""

# a95feca949344849854e2db28d06267e
#: ../../ref/exceptions.txt:65
msgid "``SuspiciousFileOperation``"
msgstr "``SuspiciousFileOperation``"

# a95feca949344849854e2db28d06267e
#: ../../ref/exceptions.txt:66
msgid "``SuspiciousMultipartForm``"
msgstr "``SuspiciousMultipartForm``"

# a95feca949344849854e2db28d06267e
#: ../../ref/exceptions.txt:67
msgid "``SuspiciousSession``"
msgstr "``SuspiciousSession``"

#: ../../ref/exceptions.txt:68
msgid "``TooManyFieldsSent``"
msgstr ""

# 95f28c1ab907433495c752e0dcd4be96
#: ../../ref/exceptions.txt:70
msgid ""
"If a ``SuspiciousOperation`` exception reaches the WSGI handler level it is "
"logged at the ``Error`` level and results in a :class:`~django.http."
"HttpResponseBadRequest`. See the :doc:`logging documentation </topics/"
"logging/>` for more information."
msgstr ""
"Исключение ``SuspiciousOperation`` на уровне WSGI обработчика будет "
"логгировано как ошибка и будет возвращен :class:`~django.http."
"HttpResponseBadRequest`. Подробности смотрите в :doc:`разделе о логгировании "
"</topics/logging/>`."

# 10ee2bd4c715415c972c5741c5bf0550
#: ../../ref/exceptions.txt:76
msgid "``PermissionDenied``"
msgstr "``PermissionDenied``"

# 4005f1ff11ee4754bc4c64ba2988e58a
#: ../../ref/exceptions.txt:80
msgid ""
"The :exc:`PermissionDenied` exception is raised when a user does not have "
"permission to perform the action requested."
msgstr ""
"Исключение :exc:`PermissionDenied` вызывается если пользователь не имеет "
"права на выполнение запрошенного действия."

# 64f2412ef18d4ef492ab738b0f60cc6f
#: ../../ref/exceptions.txt:84
msgid "``ViewDoesNotExist``"
msgstr "``ViewDoesNotExist``"

# 6bd47993f8ff437fad5401a87fff7a25
#: ../../ref/exceptions.txt:88
#, fuzzy
msgid ""
"The :exc:`ViewDoesNotExist` exception is raised by :mod:`django.urls` when a "
"requested view does not exist."
msgstr ""
"Исключение :exc:`ViewDoesNotExist` вызывается модулем :mod:`django.core."
"urlresolvers`, если запрошенное представление на найдено."

# 5e78d367cb23465fb9658d23fa773c52
#: ../../ref/exceptions.txt:92
msgid "``MiddlewareNotUsed``"
msgstr "``MiddlewareNotUsed``"

# 239330226cf346da807f58cd23ee4a4e
#: ../../ref/exceptions.txt:96
msgid ""
"The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not "
"used in the server configuration."
msgstr ""
"Исключение :exc:`MiddlewareNotUsed` вызывается, если мидлвар не используется "
"в конфигурации сервера."

# 0fc584ac67084b6689c692ef8eea3fb4
#: ../../ref/exceptions.txt:100
msgid "``ImproperlyConfigured``"
msgstr "``ImproperlyConfigured``"

# baa9910fc34a4628b6fec750c26baee9
#: ../../ref/exceptions.txt:104
msgid ""
"The :exc:`ImproperlyConfigured` exception is raised when Django is somehow "
"improperly configured -- for example, if a value in ``settings.py`` is "
"incorrect or unparseable."
msgstr ""
"Исключение :exc:`ImproperlyConfigured` вызывается, если Django неправильно "
"сконфигурировано. Например, если значение в  ``settings.py`` неправильное."

# e8e204993d7e43f399ffe8eec38d74e8
#: ../../ref/exceptions.txt:109
msgid "``FieldError``"
msgstr "``FieldError``"

# e183750a05d54ff4993b71ed32d390ad
#: ../../ref/exceptions.txt:113
msgid ""
"The :exc:`FieldError` exception is raised when there is a problem with a "
"model field. This can happen for several reasons:"
msgstr ""
"Исключение :exc:`FieldError` вызывается, если существует проблема с полем "
"модели. Такое может произойти по следующим причинам:"

# a65849654456404f9739c5105f10349c
#: ../../ref/exceptions.txt:116
msgid ""
"A field in a model clashes with a field of the same name from an abstract "
"base class"
msgstr ""
"Поле в модели конфликтует с полем абстрактного класса, которое имеет такое "
"же имя."

# 079da16c76a748ae9ac9d258f641ec55
#: ../../ref/exceptions.txt:118
msgid "An infinite loop is caused by ordering"
msgstr "Бесконечный цикл, вызванный сортировкой."

# 210ef05a6d064a35a1ea38d13402d342
#: ../../ref/exceptions.txt:119
msgid "A keyword cannot be parsed from the filter parameters"
msgstr "Аргумент не может быть получен из параметров фильтра."

# 53a334e284474f06abaad3d741037984
#: ../../ref/exceptions.txt:120
msgid "A field cannot be determined from a keyword in the query parameters"
msgstr "Поле не может быть определено из аргумента в параметрах запроса."

# 5bbe8bcdd71048e69302b098b6a4be2c
#: ../../ref/exceptions.txt:122
msgid "A join is not permitted on the specified field"
msgstr "Объединение не разрешено для указанного поля."

# 8609793b1e8a4f03a8613aa2c002f136
#: ../../ref/exceptions.txt:123
msgid "A field name is invalid"
msgstr "Имя поля неверное."

# 9c8be2796f0541e0bd92a0531d8b387c
#: ../../ref/exceptions.txt:124
msgid "A query contains invalid order_by arguments"
msgstr "Запрос состоит из неверного порядка аргументов."

# ca791bcef96b48b79f6b5b227e4291f5
#: ../../ref/exceptions.txt:127
msgid "``ValidationError``"
msgstr "``ValidationError``"

# 7e737c7fcad147068935fc8389c79aeb
#: ../../ref/exceptions.txt:131
msgid ""
"The :exc:`ValidationError` exception is raised when data fails form or model "
"field validation. For more information about validation, see :doc:`Form and "
"Field Validation </ref/forms/validation>`, :ref:`Model Field Validation "
"<validating-objects>` and the :doc:`Validator Reference </ref/validators>`."
msgstr ""
"Исключение :exc:`ValidationError` вызывается, если происходит ошибка "
"проверки данных от формы или модели. Для подробностей о проверке данных, "
"см. :doc:`Проверка форм и полей </ref/forms/validation>`, :ref:`Проверка "
"поля модели <validating-objects>` и the :doc:`Справочник проверки </ref/"
"validators>`."

# d56f8238f6c44fddaaff293150a60fb7
#: ../../ref/exceptions.txt:138
msgid "``NON_FIELD_ERRORS``"
msgstr "``NON_FIELD_ERRORS``"

# 890c4a5fa7184b268c8a38ed6cb4996f
#: ../../ref/exceptions.txt:142
msgid ""
"``ValidationError``\\s that don't belong to a particular field in a form or "
"model are classified as ``NON_FIELD_ERRORS``. This constant is used as a key "
"in dictionaries that otherwise map fields to their respective list of errors."
msgstr ""
"``ValidationError``, которые не относятся ни к одному из полей формы или "
"модели, классифицируются как ``NON_FIELD_ERRORS``. Эта константа определяет "
"ключ в словаре ошибок."

# 52ad61de9b9044319e8a94763956c5de
#: ../../ref/exceptions.txt:150
msgid "URL Resolver exceptions"
msgstr "Ошибки определения URL"

# 95b83188d46344f4b6ad71c064f5c339
#: ../../ref/exceptions.txt:152
#, fuzzy
msgid "URL Resolver exceptions are defined in ``django.urls``."
msgstr "Ошибки определения URL определены в ``django.core.urlresolvers``."

#: ../../ref/exceptions.txt:156
msgid ""
"In older versions, these exceptions are located in ``django.core."
"urlresolvers``. Importing from the old location will continue to work until "
"Django 2.0."
msgstr ""

# 3ecbee8843424de49e32b639b0e6b771
#: ../../ref/exceptions.txt:161
msgid "``Resolver404``"
msgstr "``Resolver404``"

# c42b0cf86f354f06a8987f560b79493f
#: ../../ref/exceptions.txt:165
#, fuzzy
msgid ""
"The :exc:`Resolver404` exception is raised by :func:`~django.urls.resolve()` "
"if the path passed to ``resolve()`` doesn't map to a view. It's a subclass "
"of :class:`django.http.Http404`."
msgstr ""
"Исключение :exc:`Resolver404` вызывается в :func:`django.core.urlresolvers."
"resolve()`, если путь переданный в ``resolve()`` не соответствует ни одному "
"представлению. Подкласс :class:`django.http.Http404`."

# e93d26d11b844b32afd595f53e3a4c69
#: ../../ref/exceptions.txt:170
msgid "``NoReverseMatch``"
msgstr "``NoReverseMatch``"

# 52987c524c8643c09462dd4af58adce7
#: ../../ref/exceptions.txt:174
#, fuzzy
msgid ""
"The :exc:`NoReverseMatch` exception is raised by :mod:`django.urls` when a "
"matching URL in your URLconf cannot be identified based on the parameters "
"supplied."
msgstr ""
"Исключение :exc:`NoReverseMatch` вызывается модулем :mod:`django.core."
"urlresolvers`, если не получилось найти соответствующий URL по переданным "
"параметрам."

# beb6c161b861478d83ba81b636512e6d
#: ../../ref/exceptions.txt:181
msgid "Database Exceptions"
msgstr "Исключения базы данных"

# 4f1bd4c0236347e698dd0810586d7d38
#: ../../ref/exceptions.txt:183
msgid "Database exceptions may be imported from ``django.db``."
msgstr "Ошибки базы данных определены в ``django.db``."

# 0368c221f9cc4ffa9008ba3d067d5957
#: ../../ref/exceptions.txt:185
msgid ""
"Django wraps the standard database exceptions so that your Django code has a "
"guaranteed common implementation of these classes."
msgstr ""
"Django оборачивает стандартные исключения базы данных таким образом, что код "
"Django гарантирует стандартную реализацию этих классов."

# 9d29b10cac25474682e97a2e3f0ca6f1
#: ../../ref/exceptions.txt:198
msgid ""
"The Django wrappers for database exceptions behave exactly the same as the "
"underlying database exceptions. See :pep:`249`, the Python Database API "
"Specification v2.0, for further information."
msgstr ""
"Обёртка Django для исключений базы данных ведёт себя аналогично обёртываемым "
"исключениям. См. :pep:`249`, вторую версию Python Database API "
"Specification, для подробностей."

# 0289647e770d45c4b018dcd8c8b53e83
#: ../../ref/exceptions.txt:202
#, fuzzy
msgid ""
"As per :pep:`3134`, a ``__cause__`` attribute is set with the original "
"(underlying) database exception, allowing access to any additional "
"information provided. (Note that this attribute is available under both "
"Python 2 and Python 3, although :pep:`3134` normally only applies to Python "
"3. To avoid unexpected differences with Python 3, Django will also ensure "
"that the exception made available via ``__cause__`` has a usable "
"``__traceback__`` attribute.)"
msgstr ""
"В соответствии с :pep:`3134`, атрибут ``__cause__`` содержит изначальное "
"исключение базы данных, предоставляя доступ к дополнительной информации. "
"(Этот атрибут доступен для Python 2 и Python 3, хотя :pep:`3134` создавался "
"для Python 3.)"

#: ../../ref/exceptions.txt:212
msgid "The ``__traceback__`` attribute described above was added."
msgstr ""

# 600f5ee11b1f442aa679c36b9da1a9cd
#: ../../ref/exceptions.txt:216
msgid ""
"Raised to prevent deletion of referenced objects when using :attr:`django.db."
"models.PROTECT`. :exc:`models.ProtectedError` is a subclass of :exc:"
"`IntegrityError`."
msgstr ""
"Выбрасывается для предотвращения удаления связанных объектов при "
"использовании :attr:`django.db.models.PROTECT`. :exc:`models."
"ProtectedError`является дочерним классом :exc:`IntegrityError`."

# 62a15275b1974f6aae883fe0fa338577
#: ../../ref/exceptions.txt:223
msgid "Http Exceptions"
msgstr "Исключения Http"

# db3ac02621e14bb9a55b738f71e511c4
#: ../../ref/exceptions.txt:225
msgid "Http exceptions may be imported from ``django.http``."
msgstr "Ошибки HTTP определенны в ``django.http``."

#: ../../ref/exceptions.txt:228
msgid "``UnreadablePostError``"
msgstr "``UnreadablePostError``"

# e92cf6cb35484da4b7a32b0c65b369f3
#: ../../ref/exceptions.txt:232
msgid ":exc:`UnreadablePostError` is raised when a user cancels an upload."
msgstr ""
"Исключение :exc:`UnreadablePostError` выбрасывается когда пользователь "
"прерывает закачку файла."

# a69b4479ad3043318acbf840cc2910db
#: ../../ref/exceptions.txt:235
msgid "Transaction Exceptions"
msgstr "Исключения транзакций"

# 272c44649f964d79b9a697241ca8bede
#: ../../ref/exceptions.txt:239
msgid "Transaction exceptions are defined in ``django.db.transaction``."
msgstr "Ошибки транзакции определены в ``django.db.transaction``."

#: ../../ref/exceptions.txt:242
msgid "``TransactionManagementError``"
msgstr "``TransactionManagementError``"

# e92cf6cb35484da4b7a32b0c65b369f3
#: ../../ref/exceptions.txt:246
msgid ""
":exc:`TransactionManagementError` is raised for any and all problems related "
"to database transactions."
msgstr ""
"Исключение :exc:`TransactionManagementError` вызывается для всех проблем с "
"транзакциями в базе данных."

# 487dc73cd24a4edfac3051eeb4575dc3
#: ../../ref/exceptions.txt:252
msgid "Testing Framework Exceptions"
msgstr "Исключения, используемые в тестах"

# db3ac02621e14bb9a55b738f71e511c4
#: ../../ref/exceptions.txt:254
msgid "Exceptions provided by the ``django.test`` package."
msgstr "Ошибки HTTP определенны в ``django.test``."

#: ../../ref/exceptions.txt:257
msgid "``RedirectCycleError``"
msgstr "``RedirectCycleError``"

#: ../../ref/exceptions.txt:261
msgid ""
":exc:`~client.RedirectCycleError` is raised when the test client detects a "
"loop or an overly long chain of redirects."
msgstr ""
"Исключение :exc:`~client.RedirectCycleError` вызывается, если тестовый "
"клиент определил циклическое перенаправление или очень длинную цепочку "
"перенаправлений."

# 62a15275b1974f6aae883fe0fa338577
#: ../../ref/exceptions.txt:265
msgid "Python Exceptions"
msgstr "Исключения Python"

# b3e2333f5d5b41b1a35afce7f03eada5
#: ../../ref/exceptions.txt:267
msgid ""
"Django raises built-in Python exceptions when appropriate as well. See the "
"Python documentation for further information on the :ref:`bltin-exceptions`."
msgstr ""
"Django вызывает встроенные исключения Python когда это требуется. Обратитесь "
"к документации Python для получения более подробной информации :ref:`bltin-"
"exceptions`."

#~ msgid ""
#~ "This exception was previously defined only in ``django.db.models.fields`` "
#~ "and wasn't part of the public API."
#~ msgstr ""
#~ "Ранее это исключение было определено в ``django.db.models.fields`` и не "
#~ "было частью публичного API."

# ad67d11ef3f64c25aab2a94c4fa00093
#~ msgid "``ObjectDoesNotExist`` and ``DoesNotExist``"
#~ msgstr "``ObjectDoesNotExist`` и ``DoesNotExist``"

# 8ee883aa021f44d0b69811b83cbc2144
#~ msgid ""
#~ "The ``DoesNotExist`` exception is raised when an object is not found for "
#~ "the given parameters of a query. Django provides a ``DoesNotExist`` "
#~ "exception as an attribute of each model class to identify the class of "
#~ "object that could not be found and to allow you to catch a particular "
#~ "model class with ``try/except``."
#~ msgstr ""
#~ "``DoesNotExist`` вызывается, если объект при запросе не был найден. "
#~ "Django добавляет ``DoesNotExist`` как атрибут модели, при этом ``try/"
#~ "except`` позволяет обрабатывать эту ошибку для конкретной модели, а не "
#~ "любой найденный объект модели."

# e4ea22de2a2b409aa1736694ce9036a4
#~ msgid "WizardViewCookieModified"
#~ msgstr "WizardViewCookieModified"

# d0ee469e949f48399dc764511574cfbf
#~ msgid ""
#~ "Previous versions of Django only wrapped ``DatabaseError`` and "
#~ "``IntegrityError``, and did not provide ``__cause__``."
#~ msgstr ""
#~ "Предыдущая версия Django только оборачивала ``DatabaseError`` и "
#~ "``IntegrityError``, но не предоставляла ``__cause__``."

# 194b5e4a29d1450eb9a13148c215bfb4
#~ msgid "Django-specific Exceptions"
#~ msgstr "Собственные исключения"

# 5f0a7245e91644559c02289ea6a52e88
#~ msgid ""
#~ "The :exc:`DoesNotExist` exception is raised when an object is not found "
#~ "for the given parameters of a query."
#~ msgstr ""
#~ "Исключение :exc:`DoesNotExist` вызывается, если объект не найден при "
#~ "использовании параметров, указанных в запросе."

# 7c2927bc091f4339936f15554201798d
#~ msgid ""
#~ ":exc:`ObjectDoesNotExist` is defined in :mod:`django.core.exceptions`. :"
#~ "exc:`DoesNotExist` is a subclass of the base :exc:`ObjectDoesNotExist` "
#~ "exception that is provided on every model class as a way of identifying "
#~ "the specific type of object that could not be found."
#~ msgstr ""
#~ "Исключение :exc:`ObjectDoesNotExist` определено в модуле :mod:`django."
#~ "core.exceptions`. Класс :exc:`DoesNotExist` является подклассом базового "
#~ "исключения :exc:`ObjectDoesNotExist`, которое предоставляется каждым "
#~ "классом модели в качестве способа индикации объекта особого типа, который "
#~ "не может быть найден."
