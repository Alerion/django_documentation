# Russian translations for Django package
# Английские переводы для пакета Django.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2020-02-13 22:13+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/paginator.txt:3
msgid "Paginator"
msgstr ""

#: ../../ref/paginator.txt:5
msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :source:`django/core/paginator.py`."
msgstr ""

#: ../../ref/paginator.txt:13
msgid "``Paginator`` class"
msgstr ""

#: ../../ref/paginator.txt:19
msgid ""
"Required. A list, tuple, ``QuerySet``, or other sliceable object with a "
"``count()`` or ``__len__()`` method. For consistent pagination, ``QuerySet``"
"\\s should be ordered, e.g. with an :meth:`~django.db.models.query.QuerySet."
"order_by` clause or with a default :attr:`~django.db.models.Options."
"ordering` on the model."
msgstr ""

#: ../../ref/paginator.txt:25
msgid "Performance issues paginating large ``QuerySet``\\s"
msgstr ""

#: ../../ref/paginator.txt:27
msgid ""
"If you're using a ``QuerySet`` with a very large number of items, requesting "
"high page numbers might be slow on some databases, because the resulting "
"``LIMIT``/``OFFSET`` query needs to count the number of ``OFFSET`` records "
"which takes longer as the page number gets higher."
msgstr ""

#: ../../ref/paginator.txt:34
msgid ""
"Required. The maximum number of items to include on a page, not including "
"orphans (see the :attr:`~Paginator.orphans` optional argument below)."
msgstr ""

#: ../../ref/paginator.txt:39
msgid ""
"Optional. Use this when you don't want to have a last page with very few "
"items. If the last page would normally have a number of items less than or "
"equal to ``orphans``, then those items will be added to the previous page "
"(which becomes the last page) instead of leaving the items on a page by "
"themselves. For example, with 23 items, ``per_page=10``, and ``orphans=3``, "
"there will be two pages; the first page with 10 items and the second (and "
"last) page with 13 items. ``orphans`` defaults to zero, which means pages "
"are never combined and the last page may have one item."
msgstr ""

#: ../../ref/paginator.txt:50
msgid ""
"Optional. Whether or not the first page is allowed to be empty.  If "
"``False`` and ``object_list`` is  empty, then an ``EmptyPage`` error will be "
"raised."
msgstr ""

#: ../../ref/paginator.txt:55 ../../ref/paginator.txt:110
msgid "Methods"
msgstr ""

#: ../../ref/paginator.txt:59
msgid ""
"Returns a :class:`Page` object with the given 1-based index, while also "
"handling out of range and invalid page numbers."
msgstr ""

#: ../../ref/paginator.txt:62
msgid ""
"If the page isn't a number, it returns the first page. If the page number is "
"negative or greater than the number of pages, it returns the last page."
msgstr ""

#: ../../ref/paginator.txt:65
msgid ""
"Raises an :exc:`EmptyPage` exception only if you specify ``Paginator(..., "
"allow_empty_first_page=False)`` and the ``object_list`` is empty."
msgstr ""

#: ../../ref/paginator.txt:71
msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises :exc:"
"`InvalidPage` if the given page number doesn't exist."
msgstr ""

#: ../../ref/paginator.txt:75 ../../ref/paginator.txt:149
msgid "Attributes"
msgstr ""

#: ../../ref/paginator.txt:79
msgid "The total number of objects, across all pages."
msgstr ""

#: ../../ref/paginator.txt:83
msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fall back "
"to using ``len(object_list)``. This allows objects, such as ``QuerySet``, to "
"use a more efficient ``count()`` method when available."
msgstr ""

#: ../../ref/paginator.txt:92
msgid "The total number of pages."
msgstr ""

#: ../../ref/paginator.txt:96
msgid ""
"A 1-based range iterator of page numbers, e.g. yielding ``[1, 2, 3, 4]``."
msgstr ""

#: ../../ref/paginator.txt:99
msgid "``Page`` class"
msgstr ""

#: ../../ref/paginator.txt:101
msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them "
"using :meth:`Paginator.page`."
msgstr ""

#: ../../ref/paginator.txt:106
msgid ""
"A page acts like a sequence of :attr:`Page.object_list` when using ``len()`` "
"or iterating it directly."
msgstr ""

#: ../../ref/paginator.txt:114
msgid "Returns ``True`` if there's a next page."
msgstr ""

#: ../../ref/paginator.txt:118
msgid "Returns ``True`` if there's a previous page."
msgstr ""

#: ../../ref/paginator.txt:122
msgid "Returns ``True`` if there's a next **or** previous page."
msgstr ""

#: ../../ref/paginator.txt:126
msgid ""
"Returns the next page number. Raises :exc:`InvalidPage` if next page doesn't "
"exist."
msgstr ""

#: ../../ref/paginator.txt:131
msgid ""
"Returns the previous page number. Raises :exc:`InvalidPage` if previous page "
"doesn't exist."
msgstr ""

#: ../../ref/paginator.txt:136
msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's :meth:`~Page."
"start_index` would return ``3``."
msgstr ""

#: ../../ref/paginator.txt:143
msgid ""
"Returns the 1-based index of the last object on the page, relative to all of "
"the objects in the paginator's list. For example, when paginating a list of "
"5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` "
"would return ``4``."
msgstr ""

#: ../../ref/paginator.txt:153
msgid "The list of objects on this page."
msgstr ""

#: ../../ref/paginator.txt:157
msgid "The 1-based page number for this page."
msgstr ""

#: ../../ref/paginator.txt:161
msgid "The associated :class:`Paginator` object."
msgstr ""

#: ../../ref/paginator.txt:164
msgid "Exceptions"
msgstr ""

#: ../../ref/paginator.txt:168
msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr ""

#: ../../ref/paginator.txt:171
msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e. not an integer) or contains no objects. Generally, it's "
"enough to catch the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can catch either of the following exceptions:"
msgstr ""

#: ../../ref/paginator.txt:178
msgid ""
"Raised when :meth:`~Paginator.page` is given a value that isn't an integer."
msgstr ""

#: ../../ref/paginator.txt:182
msgid ""
"Raised when :meth:`~Paginator.page` is given a valid value but no objects "
"exist on that page."
msgstr ""

#: ../../ref/paginator.txt:185
msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with ``except InvalidPage``."
msgstr ""
