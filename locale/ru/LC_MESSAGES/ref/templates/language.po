# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2014, 2015, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2017-11-29 16:43+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# f2ec389c092c4aeb9911e01fe093419a
#: ../../ref/templates/language.txt:3
msgid "The Django template language"
msgstr "Язык шаблонов Django"

# 338bc381cbe84a36a6237088e1b1a4af
#: ../../ref/templates/language.txt:5
msgid ""
"This document explains the language syntax of the Django template system. If "
"you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""
"Этот раздел описывает синтаксис языка шаблонов Django. Если вы ищете "
"технически подробности как он работает и как расширять его, смотрите :doc:`/"
"ref/templates/api`."

# 54f37eb253234e3ea62bddaa6549c3e4
#: ../../ref/templates/language.txt:9
msgid ""
"Django's template language is designed to strike a balance between power and "
"ease. It's designed to feel comfortable to those used to working with HTML. "
"If you have any exposure to other text-based template languages, such as "
"Smarty_ or Jinja2_, you should feel right at home with Django's templates."
msgstr ""
"Язык шаблонов Django представляет баланс между возможностями и простотой. Он "
"создавался, чтобы быть удобным для пользователей HTML. Если у вас есть опыт "
"работы с другими языками текстовых шаблонов, таких как Smarty_ или Jinja2_, "
"вы должны себя чувствовать как дома с шаблонами Django."

# 2ef291f17dbc479ea5e8ea15022546d8
# 768873a9c8c3447cbb52bbcb1cd8f8a6
#: ../../ref/templates/language.txt:14 ../../ref/templates/language.txt:67
msgid "Philosophy"
msgstr "Философия"

# 7dd5c2828d124882b34d64fc1151c90c
#: ../../ref/templates/language.txt:16
msgid ""
"If you have a background in programming, or if you're used to languages "
"which mix programming code directly into HTML, you'll want to bear in mind "
"that the Django template system is not simply Python embedded into HTML. "
"This is by design: the template system is meant to express presentation, not "
"program logic."
msgstr ""
"Если у вас есть опыт программирования или вы использовали PHP, который "
"позволяет интегрировать программный код прямо HTML, вам стоит помнить, что "
"система шаблонов Django -- это не просто Python встроенный в HTML. Это "
"сделано намеренно: шаблоны предназначены для представления, а не для "
"реализации логики программы."

# ab34b638ed6d4f3a876bcccddd82b4f7
#: ../../ref/templates/language.txt:22
msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` "
"tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below "
"are supported by default (although you can add :doc:`your own extensions </"
"howto/custom-template-tags>` to the template language as needed)."
msgstr ""
"Шаблоны Django предоставляют теги, которые повторяют некоторые структуры "
"языка программирования -- тег :ttag:`if` для проверки на истинность, тег :"
"ttag:`for` для циклов, и др. -- но они не выполняются непосредственно как "
"код Python, и система шаблонов не будет выполнять произвольное выражение "
"Python. Только теги, фильтры и синтаксис, перечисленные ниже, поддерживаются "
"по умолчанию (хотя вы можете добавить :doc:`собственное расширение </howto/"
"custom-template-tags>` для языка шаблонов при необходимости)."

# 95a64c65987a4095b4e869c612e78ccb
#: ../../ref/templates/language.txt:35
msgid "Templates"
msgstr "Шаблоны"

# d7e87bf68be94e87a5da384ee28a63ef
#: ../../ref/templates/language.txt:39
#, fuzzy
msgid ""
"A template is a text file. It can generate any text-based format (HTML, XML, "
"CSV, etc.)."
msgstr ""
"Шаблон это просто текстовый файл. Он позволяет создать любой текстовый "
"формат (HTML, XML, CSV, и др.)."

# 0efad2a595dc40e0bc4eb4582b3e2fa8
#: ../../ref/templates/language.txt:42
msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the template."
msgstr ""
"Шаблон содержит **переменные**, которые будут заменены значениями при "
"выполнении шаблона, и **теги**, которые управляют логикой шаблона."

# 65336cb59f2e4dfabf855ea8e0c88fd2
#: ../../ref/templates/language.txt:45
msgid ""
"Below is a minimal template that illustrates a few basics. Each element will "
"be explained later in this document."
msgstr ""
"Ниже приводится простой шаблон, который иллюстрирует некоторые основы. "
"Каждый элемент будет объяснен далее в этом разделе."

# 8f01df6c6a6a47ab943ca7841df22c8c
#: ../../ref/templates/language.txt:69
msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)? "
"We wanted Django's template language to be usable for more than just XML/"
"HTML templates. At World Online, we use it for emails, JavaScript and CSV. "
"You can use the template language for any text-based format."
msgstr ""
"Зачем использовать текстовый шаблон, а не на основе XML (как TAL в Zope)? Мы "
"хотели, чтобы шаблоны Django были больше, чем просто XML/HTML шаблоны. На "
"World Online, мы используем их для email, JavaScript и CSV. Вы можете "
"использовать шаблоны для любого текстового формата."

# 27d8a353303c4a39a9a6f19060f348c5
#: ../../ref/templates/language.txt:75
msgid "Oh, and one more thing: making humans edit XML is sadistic!"
msgstr "Ах да, еще одно: заставлять людей редактировать XML -- это садизм!"

# 7e41b7d93cf348bfaae0488724faffc1
#: ../../ref/templates/language.txt:80
msgid "Variables"
msgstr "Переменные"

# dd6987b4df5942dfa94a4f9fc7b6af4b
#: ../../ref/templates/language.txt:82
#, fuzzy
msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters "
"and the underscore (``\"_\"``) but may not start with an underscore. The dot "
"(``\".\"``) also appears in variable sections, although that has a special "
"meaning, as indicated below. Importantly, *you cannot have spaces or "
"punctuation characters in variable names.*"
msgstr ""
"Переменные выглядят таким образом: ``{{ variable }}``. Когда шаблон "
"встречает переменную, он вычисляет ее и заменяет результатом. Названия "
"переменных могут состоять из букв, цифр и нижнего подчеркивания(``\"_\"``). "
"Точку (``\".\"``) также можно использовать, но она имеет особый смысл "
"описанный ниже. Важно, *нельзя использовать пробелы и знаки пунктуации в "
"названии переменных.*"

# 94fbd9e4c7cb404290161934bb965100
#: ../../ref/templates/language.txt:90
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr "Используйте точку (``.``) для доступа к атрибутам переменной."

# 25cbe35d544244f4b084422918fcdff8
#: ../../ref/templates/language.txt:92
msgid "Behind the scenes"
msgstr "За кадром"

# cf89805da4474fdc80890ff5260e774b
#: ../../ref/templates/language.txt:94
msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr ""
"Технически, когда шаблон встречает точку, он пытается получить значения в "
"таком порядке:"

# a2197c683a4d49a6a53cd93ae13199d5
#: ../../ref/templates/language.txt:97
msgid "Dictionary lookup"
msgstr "Ключ словаря"

# dd9a54e445104def8b4cbb8d95e8cc44
#: ../../ref/templates/language.txt:98
msgid "Attribute or method lookup"
msgstr "Атрибут или метод"

# 84e4e3707a72476aa76b24717c4a8146
#: ../../ref/templates/language.txt:99
msgid "Numeric index lookup"
msgstr "Индекс списка"

# 19e2e28027be42e1aa8642e4f868e7db
#: ../../ref/templates/language.txt:101
msgid ""
"If the resulting value is callable, it is called with no arguments. The "
"result of the call becomes the template value."
msgstr ""
"Если найден вызываемый объект(функция или метод), он будет вызван без "
"аргументов. Результат будет использоваться шаблоном как значение."

# db188db83e9b492ca33955153e47181f
#: ../../ref/templates/language.txt:104
msgid ""
"This lookup order can cause some unexpected behavior with objects that "
"override dictionary lookup. For example, consider the following code snippet "
"that attempts to loop over a ``collections.defaultdict``::"
msgstr ""
"Это может приводить к неожиданным результатам с объектами, которые "
"переопределяют поиск по словарю. Например, рассмотрим следующий код, который "
"пытается выполнить цикл по ``collections.defaultdict``::"

# 37364c19bd254f96a88726093d1db9d0
#: ../../ref/templates/language.txt:112
msgid ""
"Because dictionary lookup happens first, that behavior kicks in and provides "
"a default value instead of using the intended ``.items()`` method. In this "
"case, consider converting to a dictionary first."
msgstr ""
"Так как поиск словаре происходит вперёд, такое поведение предоставляет "
"значение по умолчанию вместо использования метода ``.items()``. В данном "
"случае, сначала рассмотрим преобразование в словарь."

# 7a115c2e50194cc69b0f1d70a1346a27
#: ../../ref/templates/language.txt:116
msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""
"В примере выше, ``{{ section.title }}`` будет заменен на атрибут ``title`` "
"объекта ``section``."

# ba0cdd5e0b144067a45e90f29f0ec624
#: ../../ref/templates/language.txt:119
msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the ``string_if_invalid`` option, which is set to ``''`` (the "
"empty string) by default."
msgstr ""
"Если переменная не найдена, шаблон вставит значение опции "
"``string_if_invalid``, которая равна ``''`` (пустой строке) по-умолчанию."

# 8bd19adf676f49d5b677f04b09ccb7a3
#: ../../ref/templates/language.txt:123
msgid ""
"Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be "
"interpreted as a literal string and not using the value of the variable \"bar"
"\", if one exists in the template context."
msgstr ""
"Следует отметить, что \"bar\" в шаблонном выражении выглядит как ``{{ foo."
"bar }}`` и будет интерпретирован как строка. Если в шаблонном контексте "
"определена переменная с таким именем, то значение локальной переменной \"bar"
"\" будет проигнорировано."

#: ../../ref/templates/language.txt:127
msgid ""
"Variable attributes that begin with an underscore may not be accessed as "
"they're generally considered private."
msgstr ""

# 56fb6d3ca10743198e2d5676744b2562
#: ../../ref/templates/language.txt:131
msgid "Filters"
msgstr "Фильтры"

# 0fe29e1597bc4576bf8d9d5cb48dcbe1
#: ../../ref/templates/language.txt:133
msgid "You can modify variables for display by using **filters**."
msgstr "Вы можете изменить значение переменной используя **фильтры**."

# b0209fc4074d46a596c794234e74ee7d
#: ../../ref/templates/language.txt:135
msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the "
"``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""
"Фильтры выглядят таким образом: ``{{ name|lower }}``. Это выведет значение "
"переменной ``{{ name }}`` после применения фильтра :tfilter:`lower` к нему, "
"который преобразует значение в нижний регистр. Используйте символ (``|``) "
"для применения фильтра."

# d5c9d37c690d4a2a837b40f3dd1ed88d
#: ../../ref/templates/language.txt:139
msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next. "
"``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""
"Можно использовать \"цепочку\" фильтров. Вывод одного фильтра используется "
"для другого. ``{{ text|escape|linebreaks }}`` обычно применяется для "
"экранирования текста, и замены переноса строки тегами ``<p>``."

# 83cf676da9224ff5801ddbfbdad40bba
#: ../../ref/templates/language.txt:143
msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ bio|"
"truncatewords:30 }}``. This will display the first 30 words of the ``bio`` "
"variable."
msgstr ""
"Некоторые фильтры принимают аргументы. Аргумент фильтра выглядит таким "
"образом: ``{{ bio|truncatewords:30 }}``. Этот код отобразит первые 30 слов "
"переменной ``bio``."

# a66aecb77ae84b7c8b0f69a6d19527af
#: ../../ref/templates/language.txt:147
msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaces you'd use ``{{ list|join:\", \" }}``."
msgstr ""
"Аргументы фильтров, которые содержат пробелы, должны быть заключены в "
"кавычки. Например, чтобы объединить список пробелом и запятой, используйте "
"``{{ list|join:\", \" }}``."

# 10da6836ea97410e90a71c392bb0c885
#: ../../ref/templates/language.txt:150
msgid ""
"Django provides about sixty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""
"Django предоставляет около шестидесяти встроенных фильтров. Вы можете "
"прочитать о них в :ref:`разделе о встроенных фильтрах <ref-templates-"
"builtins-filters>`. Чтобы дать вам представление о возможностях, вот "
"некоторые из наиболее часто используемых фильтров:"

# dd5ed53839254cc1ac30f396c2f06e9f
#: ../../ref/templates/language.txt:162
msgid ":tfilter:`default`"
msgstr ":tfilter:`default`"

# b70ade8790344ea1b641352e32d2d31c
#: ../../ref/templates/language.txt:156
msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value "
"of the variable. For example::"
msgstr ""
"Если значение равно ``False`` или пустым, будет использовано значение по "
"умолчанию. В противном случае используется значение. Например::"

# 7480af08eb0444e5bc78895573259d44
#: ../../ref/templates/language.txt:161
msgid ""
"If ``value`` isn't provided or is empty, the above will display \"``nothing``"
"\"."
msgstr ""
"Если ``value`` равно ``\"\"`` (пустая строка), будет выведено ``nothing``."

# da94379ccb9f4c9d9fe3abcc76c9293e
#: ../../ref/templates/language.txt:170
msgid ":tfilter:`length`"
msgstr ":tfilter:`length`"

# 90ce9dab4b9e4d3fa7e650fdb5144c8d
#: ../../ref/templates/language.txt:165
msgid ""
"Returns the length of the value. This works for both strings and lists. For "
"example::"
msgstr "Возвращает размер значения. Работает для строк и списков, например::"

# 67bcf20d7db3486dab8c29ed1fc8d667
#: ../../ref/templates/language.txt:170
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr "Если ``value`` равно ``['a', 'b', 'c', 'd']``, выведет ``4``."

# dd5ed53839254cc1ac30f396c2f06e9f
#: ../../ref/templates/language.txt:178
#, fuzzy
msgid ":tfilter:`filesizeformat`"
msgstr "filesizeformat"

#: ../../ref/templates/language.txt:173
msgid ""
"Formats the value like a \"human-readable\" file size (i.e. ``'13 KB'``, "
"``'4.1 MB'``, ``'102 bytes'``, etc.). For example::"
msgstr ""
"Форматирует размер файла в читабельный вид (например, ``'13 KB'``, ``'4.1 "
"MB'``, ``'102 bytes'``, и т.д.). Например::"

# 67bcf20d7db3486dab8c29ed1fc8d667
#: ../../ref/templates/language.txt:178
msgid "If ``value`` is 123456789, the output would be ``117.7 MB``."
msgstr "Если ``value`` равно 123456789, выведет ``117.7 MB``."

# 192621bec1a44a1fafeb028a92712923
#: ../../ref/templates/language.txt:180
msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""
"Опять же, это всего лишь несколько примеров; полный список смотрите :ref:"
"`раздел о встроенных фильтрах <ref-templates-builtins-filters>`."

# 0b5e9162b74d446da8c488714bf54f63
#: ../../ref/templates/language.txt:183
msgid ""
"You can also create your own custom template filters; see :doc:`/howto/"
"custom-template-tags`."
msgstr ""
"Вы можете создать собственный фильтр; смотрите :doc:`/howto/custom-template-"
"tags`."

# d2112403e8ee43ecbac7ba7ce9f5d19d
# 6a62d74a8a114b09aa28afc7e17e0bd5
#: ../../ref/templates/language.txt:188 ../../ref/templates/language.txt:259
msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
"admindocs`."
msgstr ""
"Интерфейс администратора Django может предоставить полный список доступных "
"тегов и фильтров. Смотрите :doc:`/ref/contrib/admin/admindocs`."

# e2fbc31c77dc405cb13535ecd88ee4ba
#: ../../ref/templates/language.txt:193
msgid "Tags"
msgstr "Теги"

# ade3c60483524723a2d406d81467d1be
#: ../../ref/templates/language.txt:195
msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""
"Теги выглядят таким образом: ``{% tag %}``. Теги сложнее чем переменные: "
"одни создают текст для вывода, влияют на выполнение используя условия и "
"циклы, другие загружают дополнительную информацию в шаблоны, чтобы "
"использовать ее далее через переменные."

# 000111c65907405f89bce087e49326a5
#: ../../ref/templates/language.txt:199
msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""
"Некоторые теги требуют открывающий и закрывающий теги (например, ``{% tag "
"%} ... содержимое тега ... {% endtag %}``)."

# 049efc7c33f8445aa9b86d0927bd4253
#: ../../ref/templates/language.txt:202
msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""
"Django содержит около двадцати встроенных тегов. Вы можете прочитать все о "
"них в :ref:`разделе о встроенных тегах <ref-templates-builtins-tags>`. Чтобы "
"дать вам представление о возможностях, вот некоторые из наиболее часто "
"используемых тегов:"

# ce7ba1d0a6f7445f8d0c92da6082d4c8
#: ../../ref/templates/language.txt:215
msgid ":ttag:`for`"
msgstr ":ttag:`for`"

# f02470727ab144538ddaa297e2113369
#: ../../ref/templates/language.txt:208
msgid ""
"Loop over each item in an array.  For example, to display a list of athletes "
"provided in ``athlete_list``::"
msgstr ""
"Цикл по каждому элементу массива.  Например, выведем список спортсменов из "
"``athlete_list``::"

# 8b53531238944f308d0c4e1a29f92a36
#: ../../ref/templates/language.txt:245
#, fuzzy
msgid ":ttag:`if`, ``elif``, and ``else``"
msgstr "if, elif и else"

# 44157ac6b0894d2aa1b7ae97cd938ab3
#: ../../ref/templates/language.txt:218
msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed::"
msgstr ""
"Вычисляет переменную и если она равна \"true\", выводит содержимое блока::"

# b5b5bceafb8e488885d80742d6e77cb1
#: ../../ref/templates/language.txt:229
msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable. Otherwise, if "
"``athlete_in_locker_room_list`` is not empty, the message \"Athletes should "
"be out...\" will be displayed. If both lists are empty, \"No athletes.\" "
"will be displayed."
msgstr ""
"В примере выше, если ``athlete_list`` не пустой, будет отображено количество "
"спортсменов ``{{ athlete_list|length }}``. Иначе, если "
"``athlete_in_locker_room_list`` не пустой, будет показано сообщение "
"\"Athletes should be out...\". Если оба списка пустые, будет показано "
"сообщение \"No athletes.\"."

# 63efcc2e1e2d4592bfc2ef4de29562b8
#: ../../ref/templates/language.txt:235
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr "Вы можете использовать фильтры и операторы в теге :ttag:`if` tag::"

# 8a6c3fced7ef4b4f830af442f3aecc01
#: ../../ref/templates/language.txt:243
msgid ""
"While the above example works, be aware that most template filters return "
"strings, so mathematical comparisons using filters will generally not work "
"as you expect. :tfilter:`length` is an exception."
msgstr ""
"Несмотря на работоспособность вышеупомянутого примера, помните, что "
"большинство шаблонных фильтров возвращает строки, таким образом, "
"математическое сравнение результатов фильтров в общем случае будет работать "
"не так, как вы можете ожидать. Хотя : tfilter:`length` является исключением."

# ae55f950596a4548a48c8b8e3f184c3f
#: ../../ref/templates/language.txt:249
#, fuzzy
msgid ":ttag:`block` and :ttag:`extends`"
msgstr "block и extends"

# 819c94a354a040adb26deceb65dd0749
#: ../../ref/templates/language.txt:248
msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr ""
"Определяет  :ref:`наследование шаблонов <template-inheritance>` (смотрите "
"ниже), эффективный способ использовать шаблоны."

# b713d4c8d03f41e8862285a3ca24215d
#: ../../ref/templates/language.txt:251
msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""
"Опять же, это только несколько тегов; полный список смотрите в :ref:`разделе "
"о встроенных тегах <ref-templates-builtins-tags>`."

# 9b5f027343cb4e43a8d4ecc508dac416
#: ../../ref/templates/language.txt:254
msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""
"Вы можете создать собственный тег; смотрите :doc:`/howto/custom-template-"
"tags`."

# 2342c1ccf2604587a62e089602b2fadf
#: ../../ref/templates/language.txt:266
msgid "Comments"
msgstr "Комментарии"

# f7cca4597a424b43af51c36a9804fef0
#: ../../ref/templates/language.txt:268
msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# #}"
"``."
msgstr ""
"Чтобы закомментировать строку в шаблоне, используйте синтаксис комментариев: "
"``{# #}``."

# dbc1f319d437477087f300d2be853579
#: ../../ref/templates/language.txt:270
msgid "For example, this template would render as ``'hello'``::"
msgstr "Например, этот шаблон выведет ``'hello'``::"

# 070199fbd8ea457da6be2d0a5d67a9bf
#: ../../ref/templates/language.txt:274
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""
"Комментарий может содержать любой код шаблона, правильный или нет. Например::"

# abcff62b7a704a09a532b9c18aee6853
#: ../../ref/templates/language.txt:278
msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""
"Этот синтаксис может быть использован только для однострочных комментариев "
"(нельзя использовать перенос строки между ``{#`` и ``#}``). Если вам нужно "
"закомментировать несколько строк, используйте тег :ttag:`comment`."

# 6ab4da952ddc458daa72ceee5385affb
#: ../../ref/templates/language.txt:285
msgid "Template inheritance"
msgstr "Наследование шаблонов"

# 89ae1e5cdd7346daa96dbd88e81f3b4f
#: ../../ref/templates/language.txt:287
msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""
"Самая могущественная -- и, следовательно, самая сложная -- часть механизма "
"шаблонов Django -- это наследование шаблонов. Наследование шаблонов "
"позволяет создать вам шаблон-\"скелет\", который содержит базовые элементы "
"вашего сайта и определяет **блоки**, которые могут быть переопределены "
"дочерними шаблонами."

# c2f1e9ea43bc4635b8d334bcad53fcc4
#: ../../ref/templates/language.txt:292
#, fuzzy
msgid "Let's look at template inheritance by starting with an example::"
msgstr "Проще всего понять наследования шаблонов с помощью примера:"

# f144259fe2e3434087e0cbb6ef6a8688
#: ../../ref/templates/language.txt:317
#, fuzzy
msgid ""
"This template, which we'll call ``base.html``, defines an HTML skeleton "
"document that you might use for a two-column page. It's the job of \"child\" "
"templates to fill the empty blocks with content."
msgstr ""
"Этот шаблон, который мы будем называть ``base.html``, определяет HTML "
"структуру документа, которую вы можете использовать для двух-колоночной "
"страницы. Задача \"дочернего\" шаблона заполнить пустые блоки содержимым."

# 8684aa413a2745a494c8e083f9806e0f
#: ../../ref/templates/language.txt:321
msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""
"В этом примере, тег :ttag:`block` определяет три блока, которые может "
"переопределить дочерний шаблон. Все что делает тег :ttag:`block` -- "
"указывает механизму шаблонов, какая часть шаблона может быть переопределена "
"в дочернем шаблоне."

# 03489c2c588c4eff917c0e36bd13aa9e
#: ../../ref/templates/language.txt:325
msgid "A child template might look like this::"
msgstr "Дочерний шаблон может выглядеть таким образом::"

# 7d4af052a16d4e149fc6b9b27ff9f3d5
#: ../../ref/templates/language.txt:338
msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, \"base."
"html\"."
msgstr ""
"Ключевым здесь есть тег :ttag:`extends`. Он говорит механизму шаблонов, что "
"этот шаблон \"наследует\" другой шаблон. Когда механизм шаблонов выполняет "
"этот шаблон, первым делом находится родительский шаблон -- в этом примере "
"\"base.html\"."

# 7ea85e9dff2048dcabcef386187c65ab
#: ../../ref/templates/language.txt:342
msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like::"
msgstr ""
"Далее механизм шаблонов находит три тега :ttag:`block` в ``base.html`` и "
"заменяет их содержимым дочернего шаблона. В зависимости от значения "
"``blog_entries``, результат может выглядеть таким образом::"

# a3741c0605b64fb08d6f4da55ab71501
#: ../../ref/templates/language.txt:372
msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""
"Так как дочерний шаблон не определяет блок ``sidebar``, будет использовано "
"значение из родительского шаблона. Содержимое тега ``{% block %}`` "
"родительского шаблона всегда используется как значение по умолчанию."

# 6cd2b627ce5f441cb716d4be3604a489
#: ../../ref/templates/language.txt:376
msgid ""
"You can use as many levels of inheritance as needed. One common way of using "
"inheritance is the following three-level approach:"
msgstr ""
"Вы можете использовать столько уровней наследование, сколько вам нужно. Один "
"из распространенных способов использовать наследование -- это трехуровневый "
"подход:"

# 5ad81e4a174349fbbdd3eff0bc03c3b6
#: ../../ref/templates/language.txt:379
msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr ""
"Создать шаблон ``base.html``, который отображает основной вид вашего сайта."

# c98d15d3d34540b2a9301e705ff5c0f0
#: ../../ref/templates/language.txt:381
msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates "
"all extend ``base.html`` and include section-specific styles/design."
msgstr ""
"Создать шаблон ``base_SECTIONNAME.html`` для каждого \"раздела\" вашего "
"сайта. Например, ``base_news.html``, ``base_sports.html``. Все эти шаблоны "
"наследуют ``base.html`` и включают стили и дизайн специфические для "
"конкретного раздела."

# d9124e875c514688bdf8635b2e759aab
#: ../../ref/templates/language.txt:385
msgid ""
"Create individual templates for each type of page, such as a news article or "
"blog entry. These templates extend the appropriate section template."
msgstr ""
"Создание шаблона для каждого типа страницы, такие как новость или запись в "
"блоге. Эти шаблоны наследуют соответствующий шаблон раздела."

# 74e11a742c0b4b7696acb714f5d5940b
#: ../../ref/templates/language.txt:389
#, fuzzy
msgid ""
"This approach maximizes code reuse and helps to add items to shared content "
"areas, such as section-wide navigation."
msgstr ""
"Такой подход позволяет максимально использовать существующий код и легко "
"добавлять элементы, такие как элементы навигации специфические для каждого "
"раздела, в общие блоки шаблона."

# ff3ac870f9d54ae8b06464c6fa7560ea
#: ../../ref/templates/language.txt:392
msgid "Here are some tips for working with inheritance:"
msgstr "Вот несколько советов по работе с наследованием:"

# 65d489883ec546c786a4379643e41e4c
#: ../../ref/templates/language.txt:394
msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""
"Если вы используете :ttag:`{% extends %}<extends>`, он должен быть первым "
"тегом в шаблоне. Иначе наследование не будет работать."

# 3bb1d212e3b645d7a5bc718ac79ed746
#: ../../ref/templates/language.txt:397
msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can "
"fill in reasonable defaults in a number of blocks, then only define the ones "
"you need later. It's better to have more hooks than fewer hooks."
msgstr ""
"Чем больше тегов :ttag:`{% block %}<block>` в вашем шаблоне, тем лучше. "
"Помните, дочерний шаблон не обязан определять все блоки родительского, вы "
"можете указать значение по умолчанию для всех блоков, а затем определить в "
"дочернем шаблоне только те, которые необходимы. Лучше иметь больше \"hooks"
"\", чем меньше \"hooks\"."

# 20e5ce4f9cd04acd9bb8a39a6471473c
#: ../../ref/templates/language.txt:402
msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent "
"template."
msgstr ""
"Если вы дублируете содержимое в нескольких шаблонах, возможно вы должны "
"перенести его в тег ``{% block %}`` родительского шаблона."

# 464196833fc74e5eb819a0d618398397
#: ../../ref/templates/language.txt:406
msgid ""
"If you need to get the content of the block from the parent template, the "
"``{{ block.super }}`` variable will do the trick. This is useful if you want "
"to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""
"Если вам необходимо содержимое блока родительского шаблона, используйте "
"переменную ``{{ block.super }}``. Эта полезно, если вам необходимо дополнить "
"содержимое родительского блока, а не полностью переопределить его. "
"Содержимое ``{{ block.super }}`` не будет автоматически экранировано "
"(смотрите :ref:`раздел ниже <automatic-html-escaping>`), так как оно уже "
"было экранировано, при необходимости, в родительском шаблоне."

#: ../../ref/templates/language.txt:413
msgid ""
"Variables created outside of a :ttag:`{% block %}<block>` using the template "
"tag ``as`` syntax can't be used inside the block. For example, this template "
"doesn't render anything::"
msgstr ""
"Переменные, созданные вне блока :ttag:`{% block %}<block>`, с использованием "
"``as``, не могут использоваться внутри блока. Например, этот шаблон ничего "
"не выведет::"

# 825c11434b42412d8992b2462ea6f9b8
#: ../../ref/templates/language.txt:420
msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example::"
msgstr ""
"Для ясности, вы можете добавить *название* вашему тегу ``{% endblock %}``. "
"Например::"

# 91669ac2e8ba434a9001ccef3ddd0e13
#: ../../ref/templates/language.txt:427
msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags "
"are being closed."
msgstr ""
"В больших шаблонах такой подход поможет вам увидеть какой тег ``{% block %}"
"`` был закрыт."

# 05d84092ba2d442a9b5cb3fa076c46e5
#: ../../ref/templates/language.txt:430
msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""
"Вы не можете определить несколько тегов :ttag:`block` с одним названием в "
"одном шаблоне. Такое ограничение существует потому, что тег :ttag:`block` "
"работает в \"оба\" направления. :ttag:`block` не просто предоставляет "
"\"полость\" в шаблоне -- он определяет содержимое, которое заполняет "
"\"полость\" в *родительском шаблоне*. Если бы было несколько тегов :ttag:"
"`block` с одним названием, родительский шаблон не знал содержимое какого "
"блока использовать."

# af289496010943e9a9569dcd732824d3
#: ../../ref/templates/language.txt:441
msgid "Automatic HTML escaping"
msgstr "Автоматическое экранирование HTML"

# 61e37993781e46abb74e831f1078a8d0
#: ../../ref/templates/language.txt:443
msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment::"
msgstr ""
"Создавая HTML используя шаблон, есть риск, что переменная может содержать "
"символы, которые повлияют на структуру полученного HTML. Например, "
"рассмотрим такой фрагмент::"

# 7779f35b760249f8bcdd44857ac3a973
#: ../../ref/templates/language.txt:449
msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered their name as this::"
msgstr ""
"На первый взгляд это кажется безобидным способом отображения имени "
"пользователя, но давайте посмотрим, что произойдет, если пользователь выбрал "
"такое имя:::"

# cb4b76ad8fbf4fd6905012c84ba26823
#: ../../ref/templates/language.txt:454
msgid "With this name value, the template would be rendered as::"
msgstr "С таким именем шаблон вернет::"

# ca040842b8d943a2b2b4d9a7d136085e
#: ../../ref/templates/language.txt:458
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr "...что приведет к отображению alert-окна JavaScript!"

# fda644aefd5f4c4290f75cbea670ade4
#: ../../ref/templates/language.txt:460
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr "Аналогично, что если имя содержит символ ``'<'``?"

# 73a9fd3bacdb4f30bf4204270248062a
#: ../../ref/templates/language.txt:466
msgid "That would result in a rendered template like this::"
msgstr "Шаблон вернет такое содержимое::"

# bb6114e1f8a84f0886848c0f3117320c
#: ../../ref/templates/language.txt:470
msgid ""
"...which, in turn, would result in the remainder of the Web page being "
"bolded!"
msgstr ""
"...в результате оставшееся содержимое страницы будет выделено полужирным!"

# f3464b2288854e18a8b0f3885428bd83
#: ../../ref/templates/language.txt:472
msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your Web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""
"Очевидно, пользовательским данными нельзя слепо доверять и вставлять "
"непосредственно в содержимое страницы, так как злоумышленники могут "
"использовать это с плохими намерениями. Такой тип уязвимости называется "
"`Cross Site Scripting <http://ru.wikipedia.org/wiki/%D0%9C"
"%D0%B5%D0%B6%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D1%81%D0%BA"
"%D1%80%D0%B8%D0%BF%D1%82%D0%B8%D0%BD%D0%B3>`_ (XSS) атакой."

# e2489e5fef944e68a1b7868b233139ab
#: ../../ref/templates/language.txt:477
msgid "To avoid this problem, you have two options:"
msgstr "Чтобы избежать этой проблемы, у вас есть два варианта:"

# 7c268055785344208ab6b0047d07eff0
#: ../../ref/templates/language.txt:479
msgid ""
"One, you can make sure to run each untrusted variable through the :tfilter:"
"`escape` filter (documented below), which converts potentially harmful HTML "
"characters to unharmful ones. This was the default solution in Django for "
"its first few years, but the problem is that it puts the onus on *you*, the "
"developer / template author, to ensure you're escaping everything. It's easy "
"to forget to escape data."
msgstr ""
"Первый, вы можете применять ко всем сомнительным переменным фильтр :tfilter:"
"`escape` (описанный далее), который преобразует потенциально опасные HTML "
"символы в безопасные. Такое решение было принятым в первых версиях Django, "
"но проблема в том, что оно возлагает бремя ответственности за безопасность "
"на *вас*, разработчика / автора шаблона. Легко забыть экранировать "
"переменную."

# 9a6f99a3008e4c448d9362048e1ddf27
#: ../../ref/templates/language.txt:486
msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""
"Второй, вы можете позволить Django автоматически экранировать HTML. "
"Оставшаяся часть этого раздела описывает, как автоматическое экранирование "
"работает."

# a2c6625e0d9c4eaeaf0e0ad6ba1c4044
#: ../../ref/templates/language.txt:489
msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""
"По-умолчанию в Django, каждый шаблон экранирует все переменные. В частности "
"выполняются такие замены:"

# ef39136807bb41f68f1bb31100c3f4f6
#: ../../ref/templates/language.txt:493
msgid "``<`` is converted to ``&lt;``"
msgstr "``<`` заменяется на ``&lt;``"

# f6bf91e855a540478a714b55afce1026
#: ../../ref/templates/language.txt:494
msgid "``>`` is converted to ``&gt;``"
msgstr "``>`` заменяется на ``&gt;``"

# 16e820ce340943a8a9c54ee47a851c29
#: ../../ref/templates/language.txt:495
#, fuzzy
msgid "``'`` (single quote) is converted to ``&#x27;``"
msgstr "``'`` (одинарная кавычка) заменяется на ``&#39;``"

# ca3b7e4f5ce4484b8d8615f01049c57b
#: ../../ref/templates/language.txt:496
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr "``\"`` (двойная кавычка) заменяется на ``&quot;``"

# 1429057ff3a345b8a9d806ccfb2969c3
#: ../../ref/templates/language.txt:497
msgid "``&`` is converted to ``&amp;``"
msgstr "``&`` заменяется на ``&amp;``"

# 4ce97e2e0eef404eb910b0526f3cadfa
#: ../../ref/templates/language.txt:499
msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""
"Опять же, мы подчеркиваем, что такое поведение используется по умолчанию. "
"Если вы используете систему шаблонов Django, вы в безопасности."

# dfd5ad7103ec4051aea2c8b45447a3b7
#: ../../ref/templates/language.txt:505
msgid "How to turn it off"
msgstr "Как это отключить"

# 717c058f5dec40acbc5bc30ea75cd31c
#: ../../ref/templates/language.txt:507
msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level "
"or per-variable level, you can turn it off in several ways."
msgstr ""
"Если вы не хотите, чтобы данные автоматически экранировались, на уровне "
"сайта, шаблона или одной переменной, вы можете отключить это несколькими "
"способами."

# 3ea07dba136443238fc2df6cad2902fe
#: ../../ref/templates/language.txt:510
msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you "
"don't want their contents to be escaped. For example, you might store a blob "
"of HTML in your database and want to embed that directly into your template. "
"Or, you might be using Django's template system to produce text that is "
"*not* HTML -- like an email message, for instance."
msgstr ""
"Зачем вам отключить экранирование? Потому что в некоторых ситуациях, вы "
"*намеренно* добавляете HTML в переменную, и хотите, чтобы он выводился без "
"экранирования. Например, вы можете хранить HTML в базе данных и хотите "
"непосредственно вставить его в содержимое страницы. Или шаблоны Django "
"используются для создания текста, который *не* является HTML -- например "
"email."

# c040440af6354e7f89d2f715b4ee7946
#: ../../ref/templates/language.txt:518
msgid "For individual variables"
msgstr "Для отдельных переменных"

# 30ef4d501ec34d25845715a731376e9a
#: ../../ref/templates/language.txt:520
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter::"
msgstr ""
"Для отключения авто-экранирования для отдельных переменных, используйте "
"фильтр :tfilter:`safe`::"

# 1d5bfe3a8c1b4e49915f1d9ffbbb13e7
#: ../../ref/templates/language.txt:526
msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be::"
msgstr ""
"Думайте о :tfilter:`safe` как сокращение *\"обезопасить от последующего "
"экранирования\"* или *\"может быть смело интерпретировано как HTML\"*. В "
"этом примере, если ``data`` содержит ``'<b>'``, будет выведено::"

# 5d76a9fb7da64e6f873f4c7288aa6004
#: ../../ref/templates/language.txt:534
msgid "For template blocks"
msgstr "Для блоков шаблона"

# ebfcbddf66d347f2bad1632847caf084
#: ../../ref/templates/language.txt:536
#, fuzzy
msgid ""
"To control auto-escaping for a template, wrap the template (or a particular "
"section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""
"Для контроля авто-экранирования в шаблоне, \"оберните\" шаблон (или часть "
"шаблона) тегом :ttag:`autoescape`, например::"

# f11304f6313745bfab986c1560b9926a
#: ../../ref/templates/language.txt:543
msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template::"
msgstr ""
"Тег :ttag:`autoescape` в качестве аргумента принимает ``on`` или ``off``. В "
"некоторых случаях, вы захотите включить экранирование в шаблоне, в котором "
"оно было отключено. Например::"

# 0c31d7de36ec45b68ff617b47a501653
#: ../../ref/templates/language.txt:558
msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example:"
msgstr ""
"Тег :ttag:`autoescape` распространяет свой эффект на шаблоны, которые "
"наследуют текущий, и на включенные тегом  :ttag:`include` шаблоны, как и "
"другие блочные теги. Например::"

#: ../../ref/templates/language.txt:562
msgid "base.html"
msgstr ""

#: ../../ref/templates/language.txt:571
msgid "child.html"
msgstr ""

# 9816b544495a4ae9bfe8434296f27edb
#: ../../ref/templates/language.txt:578
msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""
"Так как авто-экранирование отключено в базовом шаблоне, оно будет отключено "
"и в дочернем шаблоне. Если переменная ``greeting`` равна ``<b>Hello!</b>``, "
"будет выведено::"

# 74505fbc46e243be9f6dc16fc8c9f47d
#: ../../ref/templates/language.txt:586
msgid "Notes"
msgstr "Заметки"

# 78c9fcf6ca4c44a8965945a06e480e83
#: ../../ref/templates/language.txt:588
msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""
"Обычно, авторы шаблонов не должны волноваться про авто-экранирование. "
"Разработчики на стороне Python (те, кто создает представления и фильтры) "
"должны определять в каких случаях данные не должны экранироваться и помечать "
"их соответствующим образом, так что все будет `просто работать` в шаблонах."

# 3adf79c9439045a2bf357116d94536d5
#: ../../ref/templates/language.txt:593
msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""
"Если вы создаете шаблон, который может использовать как с включенным авто-"
"экранированием так и без него, добавляйте фильтр :tfilter:`escape` для "
"каждой переменной, которую нужно экранировать. При включенном авто-"
"экранировании фильтр :tfilter:`escape` не выполнит замену символов повторно."

# 80abbf16c49b4e76a9b8707eeaacd4a4
#: ../../ref/templates/language.txt:602
msgid "String literals and automatic escaping"
msgstr "Строки и автоматическое экранирование"

# e16e132ffa21439a83c41ee682b1fadc
#: ../../ref/templates/language.txt:604
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr "Как уже упоминалось выше, аргументом фильтра может быть строка::"

# aa9051f5a5f74618b288a3dbf7b4528c
#: ../../ref/templates/language.txt:608
msgid ""
"All string literals are inserted **without** any automatic escaping into the "
"template -- they act as if they were all passed through the :tfilter:`safe` "
"filter. The reasoning behind this is that the template author is in control "
"of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""
"Все строки в шаблоне вставляются **без** автоматического экранирования -- "
"они обрабатываются как строки, к которым применили фильтр :tfilter:`safe`. "
"Причина этого состоит в том, что автор шаблона контролирует содержимое этих "
"строк и самостоятельно может убедиться при создании шаблона, что они не "
"содержат не безопасных символов."

# a70dfd2f9e424c5fa70c5eddc920ad4c
#: ../../ref/templates/language.txt:614
msgid "This means you would write ::"
msgstr "Это означает, чтобы вы должны писать::"

# 7654fae00eb84ffe87cb70680ebf331b
#: ../../ref/templates/language.txt:618
msgid "...rather than::"
msgstr "...вместо::"

# d980614a2ed5486cb04a4d5b9ee62e04
#: ../../ref/templates/language.txt:622
msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""
"Это правило не распространяется на переменные, которые используются в "
"качестве аргументов, так как автор шаблоне не может контролировать "
"содержимое этих переменных."

# 2c992443237d42628791b5ea4cdef854
#: ../../ref/templates/language.txt:629
msgid "Accessing method calls"
msgstr "Вызов методов"

# 026c75c58f34405ba5e59f9fddff44a8
#: ../../ref/templates/language.txt:631
msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this::"
msgstr ""
"Вызов большинства методов объектов также доступен в шаблоне. Это означает, "
"что шаблон имеет доступ не только к атрибутам классов (например, название "
"поля) и переменных переданных из представлениях. Например, Django ORM "
"предоставляет :ref:`\"entry_set\"<topics-db-queries-related>` атрибут для "
"получения связанных через внешний ключ объектов. Следовательно, для модели "
"комментариев(\"comment\") с внешним ключом на модель задач(\"task\") вы "
"можете обратиться в цикле ко всем связанным комментариям переданного объекта "
"задачи::"

# 58fee8333363456888033bb6e9b70912
#: ../../ref/templates/language.txt:643
msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with::"
msgstr ""
"Также, :doc:`QuerySets</ref/models/querysets>` предоставляет метод "
"``count()`` для получения количества объектов. Следовательно, вы можете "
"получить количество комментариев связанных с конкретной задачей::"

# 61c3299bc4fc4e4b9a54ae452ccd74ee
#: ../../ref/templates/language.txt:649
msgid ""
"And of course you can easily access methods you've explicitly defined on "
"your own models:"
msgstr "И конечно вы можете использовать методы вашей модели::"

#: ../../ref/templates/language.txt:652
msgid "models.py"
msgstr ""

# 95a64c65987a4095b4e869c612e78ccb
#: ../../ref/templates/language.txt:659
#, fuzzy
msgid "template.html"
msgstr "Шаблоны"

# b4ced439160e483eb7b6cef1603ff964
#: ../../ref/templates/language.txt:664
msgid ""
"Because Django intentionally limits the amount of logic processing available "
"in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""
"Так как Django намеренно ограничивает определение логики проекта в шаблоне, "
"передавать аргументы при вызове метода в шаблоне нельзя. Данные должны "
"вычисляться в представлении и передаваться в шаблон для отображения."

# 99065e3a3719449681326a140d52999f
#: ../../ref/templates/language.txt:672
msgid "Custom tag and filter libraries"
msgstr "Собственные библиотеки тегов и фильтров"

# 4a586a7486e54832a6895584032d6fea
#: ../../ref/templates/language.txt:674
msgid ""
"Certain applications provide custom tag and filter libraries. To access them "
"in a template, ensure the application is in :setting:`INSTALLED_APPS` (we'd "
"add ``'django.contrib.humanize'`` for this example), and then use the :ttag:"
"`load` tag in a template::"
msgstr ""
"Некоторые приложения предоставляют собственные библиотеки тегов и фильтров. "
"Чтобы использовать их в шаблоне, укажите приложение в :setting:"
"`INSTALLED_APPS` (в нашем примере мы используем ``'django.contrib."
"humanize'``), затем используйте тег :ttag:`load`::"

# 6ac26bfb05ac49b99b8f98ed9fab8a28
#: ../../ref/templates/language.txt:683
msgid ""
"In the above, the :ttag:`load` tag loads the ``humanize`` tag library, which "
"then makes the ``intcomma`` filter available for use. If you've enabled :mod:"
"`django.contrib.admindocs`, you can consult the documentation area in your "
"admin to find the list of custom libraries in your installation."
msgstr ""
"В это примере, тег :ttag:`load` загружает библиотеку ``humanize``, которая "
"предоставляет тег ``intcomma``. Если вы активировали :mod:`django.contrib."
"admindocs`, в разделе документации вашего интерфейса администратора вы "
"можете найти список всех установленных библиотек."

# d9bfd6e9a8ff4150b2a1e2dc01d96109
#: ../../ref/templates/language.txt:688
msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example::"
msgstr ""
"Тег :ttag:`load` может принимать названия нескольких библиотек, разделенные "
"пробелом. Например::"

# 8430e73cf0524ee490e457590f276827
#: ../../ref/templates/language.txt:693
msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr ""
"Смотрите раздел :doc:`/howto/custom-template-tags`, чтобы узнать как "
"создавать собственные библиотеки для шаблонов."

# ddef1274f1474e478913b65ac3438f84
#: ../../ref/templates/language.txt:697
msgid "Custom libraries and template inheritance"
msgstr "Собственные библиотеки и наследование шаблонов"

# d5d8baf3983240038939f0f92ce73ed5
#: ../../ref/templates/language.txt:699
msgid ""
"When you load a custom tag or filter library, the tags/filters are only made "
"available to the current template -- not any parent or child templates along "
"the template-inheritance path."
msgstr ""
"При загрузке библиотеки, теги и фильтры, которые она содержит, будут "
"доступны только в текущем шаблоне -- не в родительском или дочернем шаблонах."

# 47dafada49574497b1814ed513faa3cd
#: ../../ref/templates/language.txt:703
msgid ""
"For example, if a template ``foo.html`` has ``{% load humanize %}``, a child "
"template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have "
"access to the humanize template tags and filters. The child template is "
"responsible for its own ``{% load humanize %}``."
msgstr ""
"Например, если шаблон ``foo.html`` содержит ``{% load humanize %}``, "
"дочерний шаблон (например, содержащий``{% extends \"foo.html\" %}``) *не* "
"сможет использовать теги и фильтры из этой библиотеки. Дочерний шаблон "
"должен самостоятельно загрузить библиотеку, используя ``{% load humanize %}"
"``."

# 2a77ab437d8f4083881b4173217cb18e
#: ../../ref/templates/language.txt:708
msgid "This is a feature for the sake of maintainability and sanity."
msgstr "Так сделано ради \"maintainability\" и \"sanity\"."

#: ../../ref/templates/language.txt:713
msgid ":doc:`The Templates Reference </ref/templates/index>`"
msgstr ":doc:`Описание системы шаблонов </ref/templates/index>`"

#: ../../ref/templates/language.txt:713
msgid ""
"Covers built-in tags, built-in filters, using an alternative template, "
"language, and more."
msgstr ""
"Описывает встроенные теги, фильтры, использование сторонних шаблонизатор, "
"язык шаблонов и другое."

#~ msgid "default"
#~ msgstr "default"

#~ msgid "length"
#~ msgstr "length"

#~ msgid "for"
#~ msgstr "for"

# 6ab4da952ddc458daa72ceee5385affb
#~ msgid "The Templates Reference"
#~ msgstr "Справочник шаблонов"

# 91617ae39d904c4dbab66c87e6b8e303
#~ msgid "About this document"
#~ msgstr "Об этом документе"

# 6bb84b800595413e9ab43ee3a5328351
#~ msgid "For example::"
#~ msgstr "Например::"

# a76a3a16f67e4ba4a7c393c679788b14
#~ msgid ":tfilter:`striptags`"
#~ msgstr ":tfilter:`striptags`"

# 5d7a0dbe7e3b43e78d4baa609d7f64c8
#~ msgid "Strips all [X]HTML tags. For example::"
#~ msgstr "Удаляет все [X]HTML теги. Например::"

# 07e20e060066445dae60c46478ee9859
#~ msgid ""
#~ "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>"
#~ "\"``, the output will be ``\"Joel is a slug\"``."
#~ msgstr ""
#~ "Если ``value`` равно ``\"<b>Joel</b> <button>is</button> a <span>slug</"
#~ "span>\"``, выведет ``\"Joel is a slug\"``."

# 359db41b2272480ab6238b5f9dc045b6
#~ msgid "Method call"
#~ msgstr "Вызов метода"
