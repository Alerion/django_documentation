# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2015-06-22 12:16+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# c586a9a598fc419dae88177cd52bb841
#: ../../ref/databases.txt:3
msgid "Databases"
msgstr "Базы данных"

#: ../../ref/databases.txt:5
msgid "Django officially supports the following databases:"
msgstr ""

# 31727228b1a14d3f8a1b0187c5124f7f
#: ../../ref/databases.txt:7
#, fuzzy
msgid ":ref:`PostgreSQL <postgresql-notes>`"
msgstr "PostgreSQL"

#: ../../ref/databases.txt:8
msgid ":ref:`MariaDB <mariadb-notes>`"
msgstr ""

#: ../../ref/databases.txt:9
msgid ":ref:`MySQL <mysql-notes>`"
msgstr ""

#: ../../ref/databases.txt:10
msgid ":ref:`Oracle <oracle-notes>`"
msgstr ""

#: ../../ref/databases.txt:11
msgid ":ref:`SQLite <sqlite-notes>`"
msgstr ""

#: ../../ref/databases.txt:13
msgid ""
"There are also a number of :ref:`database backends provided by third parties "
"<third-party-notes>`."
msgstr ""

# 2c469103f40b4c8f8722bd15ef5031bd
#: ../../ref/databases.txt:16
msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and we've had to "
"make design decisions on which features to support and which assumptions we "
"can make safely."
msgstr ""
"Django пытается поддерживать возможности различных бэкендов по максимуму. "
"Однако, базы данных работают по разному, и нам приходится принимать решение "
"какие возможности поддерживать, чтобы они безопасно работали для всех "
"бэкендов."

# afce327157f24a8598e01f8c9a033125
#: ../../ref/databases.txt:21
msgid ""
"This file describes some of the features that might be relevant to Django "
"usage. Of course, it is not intended as a replacement for server-specific "
"documentation or reference manuals."
msgstr ""
"Этот раздел описывает работу Django с различными базами данных. Конечно же "
"он не заменит вам документацию базы данных."

# afda96439a8b45f6a041cab55297c81e
#: ../../ref/databases.txt:26
msgid "General notes"
msgstr "Общие замечания"

# 90f8d13b66b746ba8634258c61eae1af
#: ../../ref/databases.txt:31
msgid "Persistent connections"
msgstr "Постоянные соединения с базой данных"

# b81264ecd32b4218b6be4c548d113190
#: ../../ref/databases.txt:33
msgid ""
"Persistent connections avoid the overhead of re-establishing a connection to "
"the database in each request. They're controlled by the :setting:"
"`CONN_MAX_AGE` parameter which defines the maximum lifetime of a connection. "
"It can be set independently for each database."
msgstr ""
"Постоянные соединения улучшают производительность, позволяя не создавать "
"новое подключение к базе данных при каждом запросе. Настройка :setting:"
"`CONN_MAX_AGE` указывает как долго существует соединение. Эту настройку "
"можно указывать для каждой базы данных отдельно."

# a742c14c54404842bc8fa5c97fbd5cf0
#: ../../ref/databases.txt:38
msgid ""
"The default value is ``0``, preserving the historical behavior of closing "
"the database connection at the end of each request. To enable persistent "
"connections, set :setting:`CONN_MAX_AGE` to a positive number of seconds. "
"For unlimited persistent connections, set it to ``None``."
msgstr ""
"По умолчанию она равна ``0``, и соединение будет закрывать после обработки "
"каждого запроса. Это сделано для обратной совместимости. Чтобы активировать "
"постоянное соединение, укажите количество секунд в :setting:`CONN_MAX_AGE`. "
"Чтобы соединение существовало постоянно, укажите ``None``."

# 0ce4f88fdd8444c5bf3dd57b240f8831
#: ../../ref/databases.txt:44
msgid "Connection management"
msgstr "Управление соединениями с базой данных"

# 0a849482b0a84c5f91b70967a1ab6dd8
#: ../../ref/databases.txt:46
msgid ""
"Django opens a connection to the database when it first makes a database "
"query. It keeps this connection open and reuses it in subsequent requests. "
"Django closes the connection once it exceeds the maximum age defined by :"
"setting:`CONN_MAX_AGE` or when it isn't usable any longer."
msgstr ""
"Django выполняет подключение к базе данных при первом запросе. Он держит "
"соединение и использует его для последующих запросов. Django закрывает "
"соединение по истечению :setting:`CONN_MAX_AGE`, или когда оно не может быть "
"больше использовано."

# aaed5cba5fca4a40b3183b490f2272df
#: ../../ref/databases.txt:51
msgid ""
"In detail, Django automatically opens a connection to the database whenever "
"it needs one and doesn't have one already — either because this is the first "
"connection, or because the previous connection was closed."
msgstr ""
"Точнее, Django автоматически создаете соединение с базой данных, если оно "
"необходимо, и нет открытого соединения, потому что это первое соединение, "
"или предыдущее было закрыто."

# cbe501c8d797469490d14dca7e5c346a
#: ../../ref/databases.txt:55
msgid ""
"At the beginning of each request, Django closes the connection if it has "
"reached its maximum age. If your database terminates idle connections after "
"some time, you should set :setting:`CONN_MAX_AGE` to a lower value, so that "
"Django doesn't attempt to use a connection that has been terminated by the "
"database server. (This problem may only affect very low traffic sites.)"
msgstr ""
"В начале каждого запроса Django закрывает соединение, если истек его срок. "
"Если ваша база данных закрывает соединение после определенного времени, вам "
"следует указать меньшее значение в :setting:`CONN_MAX_AGE`, чтобы Django не "
"пытался использовать закрытое соединение. (Эта проблема может возникнуть "
"только на сайтах с низким трафиком.)"

# 57d1287d9879475f9d4617e03bb4d55b
#: ../../ref/databases.txt:61
msgid ""
"At the end of each request, Django closes the connection if it has reached "
"its maximum age or if it is in an unrecoverable error state. If any database "
"errors have occurred while processing the requests, Django checks whether "
"the connection still works, and closes it if it doesn't. Thus, database "
"errors affect at most one request; if the connection becomes unusable, the "
"next request gets a fresh connection."
msgstr ""
"В конце каждого запроса Django закрывает соединение, если истек его срок, "
"или, если соединение находится в состоянии неисправимой ошибки. Если в "
"процессе обработки запроса произошла ошибка базы данных, Django проверяет "
"работает ли соединение, и закрывает его, если оно не работает. Таким образом "
"ошибка базы данных влияет только на один запрос, для последующих запросов "
"будет создано новое соединение."

# 6f99afc57ac748a4a0ae29a594a3e0f8
#: ../../ref/databases.txt:69
msgid "Caveats"
msgstr "Предостережения"

# 99416b3d20d94d379885a6ec16065813
#: ../../ref/databases.txt:71
msgid ""
"Since each thread maintains its own connection, your database must support "
"at least as many simultaneous connections as you have worker threads."
msgstr ""
"Так как каждый поток использует отдельное подключение, ваша база данных "
"должна поддерживать необходимое количество соединений."

# ea0268d387ba44f1aabedf75bb978899
#: ../../ref/databases.txt:74
msgid ""
"Sometimes a database won't be accessed by the majority of your views, for "
"example because it's the database of an external system, or thanks to "
"caching. In such cases, you should set :setting:`CONN_MAX_AGE` to a low "
"value or even ``0``, because it doesn't make sense to maintain a connection "
"that's unlikely to be reused. This will help keep the number of simultaneous "
"connections to this database small."
msgstr ""
"В некоторых случаях большинство представлений могут не использовать базу "
"данных, например, это база данных внешней системы, или благодаря "
"кэшированию. В таких случаях укажите небольшое значение в :setting:"
"`CONN_MAX_AGE` или ``0``, чтобы не поддерживать соединение, которое почти не "
"используется. Это позволит уменьшить количество одновременных подключений к "
"базе данных."

# b4daee6f45c848d4aa99a75944c92289
#: ../../ref/databases.txt:81
msgid ""
"The development server creates a new thread for each request it handles, "
"negating the effect of persistent connections. Don't enable them during "
"development."
msgstr ""
"Сервер для разработки создает отдельны поток для каждого запроса, по этому "
"нет смысла использовать постоянные подключения во время разработки."

# 3e6e222d31b143d9b2933f3e83ecc64e
#: ../../ref/databases.txt:85
msgid ""
"When Django establishes a connection to the database, it sets up appropriate "
"parameters, depending on the backend being used. If you enable persistent "
"connections, this setup is no longer repeated every request. If you modify "
"parameters such as the connection's isolation level or time zone, you should "
"either restore Django's defaults at the end of each request, force an "
"appropriate value at the beginning of each request, or disable persistent "
"connections."
msgstr ""
"При подключении к базе данных, устанавливаются различные параметры "
"подключения в соответствии с используемым бэкендом. При постоянном "
"соединении это не будет выполняться при каждом запросе. Если вы измените "
"параметры подключения, например, уровень изоляции транзакций или часовой "
"пояс, вам следует восстановить параметры по умолчанию после обработки "
"запроса, или устанавливать в начале каждого запроса, или отключить "
"постоянные соединения."

# d78a6cc484b941139b56f7236cc0b45d
#: ../../ref/databases.txt:94
msgid "Encoding"
msgstr "Кодировка"

# ca2ef9ab579e4650b7059c953dcc52db
#: ../../ref/databases.txt:96
msgid ""
"Django assumes that all databases use UTF-8 encoding. Using other encodings "
"may result in unexpected behavior such as \"value too long\" errors from "
"your database for data that is valid in Django. See the database specific "
"notes below for information on how to set up your database correctly."
msgstr ""
"Django предполагает, что все базы данных используют UTF-8. Использование "
"другой кодировки может привести к неожиданному поведению, например ошибке "
"\"value too long\", в то время, как данные правильны для Django. Смотрите "
"ниже как настраивать различные базы данных."

# 31727228b1a14d3f8a1b0187c5124f7f
#: ../../ref/databases.txt:104
msgid "PostgreSQL notes"
msgstr "PostgreSQL"

#: ../../ref/databases.txt:106
#, fuzzy
msgid ""
"Django supports PostgreSQL 9.5 and higher. `psycopg2`_ 2.5.4 or higher is "
"required, though the latest release is recommended."
msgstr ""
"Django поддерживает PostgreSQL 9.0 и выше. Для этого необходимо использовать "
"`psycopg2`_ 2.4.5 и выше (или 2.5+, если вы хотите использовать :mod:`django."
"contrib.postgres`)."

# 30cb07dfaa9044769304574c5423ff7a
#: ../../ref/databases.txt:112
msgid "PostgreSQL connection settings"
msgstr "Настройки подключения PostgreSQL"

# f6bc985e1c5c4bb8982405f26ffdb2bd
#: ../../ref/databases.txt:114
msgid "See :setting:`HOST` for details."
msgstr "Смотрите подробности в описании :setting:`HOST`."

# fa1343ffc1fd4b1285b92dd7d1eeef24
#: ../../ref/databases.txt:117
msgid "Optimizing PostgreSQL's configuration"
msgstr "Оптимизация настроек PostgreSQL"

# 70f4b63ce6ed45b8b866aa7208562559
#: ../../ref/databases.txt:119
msgid "Django needs the following parameters for its database connections:"
msgstr "Django необходимы следующие параметры для подключения:"

# 2b19ed1f91c847c096a397f8cd9c3395
#: ../../ref/databases.txt:121
msgid "``client_encoding``: ``'UTF8'``,"
msgstr "``client_encoding``: ``'UTF8'``,"

# d113d6f064f646a0940e70371ea5bb85
#: ../../ref/databases.txt:122
msgid ""
"``default_transaction_isolation``: ``'read committed'`` by default, or the "
"value set in the connection options (see below),"
msgstr ""
"``default_transaction_isolation``: ``'read committed'`` по умолчанию, или "
"значение их параметров подключения (смотрите ниже),"

# bb1a61da0b2247049fa41ec346077b70
#: ../../ref/databases.txt:124
msgid ""
"``timezone``: ``'UTC'`` when :setting:`USE_TZ` is ``True``, value of :"
"setting:`TIME_ZONE` otherwise."
msgstr ""
"``timezone``: ``'UTC'`` если :setting:`USE_TZ` равно ``True``, иначе "
"значение :setting:`TIME_ZONE`."

# 53031fc87a8d4a9081a7bc49a881781d
#: ../../ref/databases.txt:127
msgid ""
"If these parameters already have the correct values, Django won't set them "
"for every new connection, which improves performance slightly. You can "
"configure them directly in :file:`postgresql.conf` or more conveniently per "
"database user with `ALTER ROLE`_."
msgstr ""
"Если эти параметры уже содержат правильные значения, Django не будет "
"устанавливать их при каждом запросе, что немного улучшит производительность. "
"Вы можете настроить их непосредственно в :file:`postgresql.conf`, или для "
"каждой базы данных отдельно, используя `ALTER ROLE`_."

# 1e9064acf32a4bf28f4b32d6f808b31e
#: ../../ref/databases.txt:132
msgid ""
"Django will work just fine without this optimization, but each new "
"connection will do some additional queries to set these parameters."
msgstr ""
"Django отлично работает и без этой оптимизации, но для каждого соединения "
"будут выполняться дополнительные запросы для установки параметров."

# 58d9120a9ab946dab447997bec4d3d71
#: ../../ref/databases.txt:140 ../../ref/databases.txt:497
msgid "Isolation level"
msgstr "Уровень изоляции транзакций "

# ceaa25f82ad04fa5a3df935b7ab437f5
#: ../../ref/databases.txt:142
msgid ""
"Like PostgreSQL itself, Django defaults to the ``READ COMMITTED`` `isolation "
"level`_. If you need a higher isolation level such as ``REPEATABLE READ`` or "
"``SERIALIZABLE``, set it in the :setting:`OPTIONS` part of your database "
"configuration in :setting:`DATABASES`::"
msgstr ""
"Как и в PostgreSQL, Django по умолчанию использует ``READ COMMITTED`` "
"`уровень изоляции транзакций <http://www.postgresql.org/docs/current/static/"
"transaction-iso.html>`_. Если вам нужен более высокий уровень изоляции, "
"такой как ``REPEATABLE READ`` или ``SERIALIZABLE``, укажите его в "
"параметрах :setting:`OPTIONS` настройки :setting:`DATABASES`::"

# 98316c189010436b9120dc94ca60d115
#: ../../ref/databases.txt:158
msgid ""
"Under higher isolation levels, your application should be prepared to handle "
"exceptions raised on serialization failures. This option is designed for "
"advanced uses."
msgstr ""
"На более высоком уровне изоляции транзакций ваше приложение должно быть "
"готовым обрабатывать исключения, которые могут возникнуть при сериализации. "
"Этот параметр предназначен для опытных пользователей."

# ccb30563456c40e6a87d40e2e826147e
#: ../../ref/databases.txt:165
msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr "Индексы для колонок ``varchar`` и ``text``"

# d0ff741e979b4bcdb0abe3e6963d5f9a
#: ../../ref/databases.txt:167
msgid ""
"When specifying ``db_index=True`` on your model fields, Django typically "
"outputs a single ``CREATE INDEX`` statement.  However, if the database type "
"for the field is either ``varchar`` or ``text`` (e.g., used by "
"``CharField``, ``FileField``, and ``TextField``), then Django will create an "
"additional index that uses an appropriate `PostgreSQL operator class`_ for "
"the column.  The extra index is necessary to correctly perform lookups that "
"use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and "
"``startswith`` lookup types."
msgstr ""

#: ../../ref/databases.txt:179
msgid "Migration operation for adding extensions"
msgstr ""

#: ../../ref/databases.txt:181
msgid ""
"If you need to add a PostgreSQL extension (like ``hstore``, ``postgis``, "
"etc.) using a migration, use the :class:`~django.contrib.postgres.operations."
"CreateExtension` operation."
msgstr ""

#: ../../ref/databases.txt:188
msgid "Server-side cursors"
msgstr ""

#: ../../ref/databases.txt:190
msgid ""
"When using :meth:`QuerySet.iterator() <django.db.models.query.QuerySet."
"iterator>`, Django opens a :ref:`server-side cursor <psycopg2:server-side-"
"cursors>`. By default, PostgreSQL assumes that only the first 10% of the "
"results of cursor queries will be fetched. The query planner spends less "
"time planning the query and starts returning results faster, but this could "
"diminish performance if more than 10% of the results are retrieved. "
"PostgreSQL's assumptions on the number of rows retrieved for a cursor query "
"is controlled with the `cursor_tuple_fraction`_ option."
msgstr ""

#: ../../ref/databases.txt:204
msgid "Transaction pooling and server-side cursors"
msgstr ""

#: ../../ref/databases.txt:206
msgid ""
"Using a connection pooler in transaction pooling mode (e.g. `pgBouncer`_) "
"requires disabling server-side cursors for that connection."
msgstr ""

#: ../../ref/databases.txt:209
msgid ""
"Server-side cursors are local to a connection and remain open at the end of "
"a transaction when :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` is ``True``. "
"A subsequent transaction may attempt to fetch more results from a server-"
"side cursor. In transaction pooling mode, there's no guarantee that "
"subsequent transactions will use the same connection. If a different "
"connection is used, an error is raised when the transaction references the "
"server-side cursor, because server-side cursors are only accessible in the "
"connection in which they were created."
msgstr ""

#: ../../ref/databases.txt:218
msgid ""
"One solution is to disable server-side cursors for a connection in :setting:"
"`DATABASES` by setting :setting:`DISABLE_SERVER_SIDE_CURSORS <DATABASE-"
"DISABLE_SERVER_SIDE_CURSORS>` to ``True``."
msgstr ""

#: ../../ref/databases.txt:222
msgid ""
"To benefit from server-side cursors in transaction pooling mode, you could "
"set up :doc:`another connection to the database </topics/db/multi-db>` in "
"order to perform queries that use server-side cursors. This connection needs "
"to either be directly to the database or to a connection pooler in session "
"pooling mode."
msgstr ""

#: ../../ref/databases.txt:227
msgid ""
"Another option is to wrap each ``QuerySet`` using server-side cursors in an :"
"func:`~django.db.transaction.atomic` block, because it disables "
"``autocommit`` for the duration of the transaction. This way, the server-"
"side cursor will only live for the duration of the transaction."
msgstr ""

#: ../../ref/databases.txt:237
msgid "Manually-specifying values of auto-incrementing primary keys"
msgstr ""

#: ../../ref/databases.txt:239
msgid ""
"Django uses PostgreSQL's `SERIAL data type`_ to store auto-incrementing "
"primary keys. A ``SERIAL`` column is populated with values from a "
"`sequence`_ that keeps track of the next available value. Manually assigning "
"a value to an auto-incrementing field doesn't update the field's sequence, "
"which might later cause a conflict. For example::"
msgstr ""

#: ../../ref/databases.txt:254
msgid ""
"If you need to specify such values, reset the sequence afterwards to avoid "
"reusing a value that's already in the table. The :djadmin:`sqlsequencereset` "
"management command generates the SQL statements to do that."
msgstr ""

#: ../../ref/databases.txt:262
msgid "Test database templates"
msgstr ""

#: ../../ref/databases.txt:264
msgid ""
"You can use the :setting:`TEST['TEMPLATE'] <TEST_TEMPLATE>` setting to "
"specify a `template`_ (e.g. ``'template0'``) from which to create a test "
"database."
msgstr ""

#: ../../ref/databases.txt:270
msgid "Speeding up test execution with non-durable settings"
msgstr ""

#: ../../ref/databases.txt:272
msgid ""
"You can speed up test execution times by `configuring PostgreSQL to be non-"
"durable <https://www.postgresql.org/docs/current/non-durability.html>`_."
msgstr ""

#: ../../ref/databases.txt:277
msgid ""
"This is dangerous: it will make your database more susceptible to data loss "
"or corruption in the case of a server crash or power loss. Only use this on "
"a development machine where you can easily restore the entire contents of "
"all databases in the cluster."
msgstr ""

# afda96439a8b45f6a041cab55297c81e
#: ../../ref/databases.txt:285
#, fuzzy
msgid "MariaDB notes"
msgstr "Общие замечания"

#: ../../ref/databases.txt:289
msgid "Django supports MariaDB 10.1 and higher."
msgstr ""

#: ../../ref/databases.txt:291
msgid ""
"To use MariaDB, use the MySQL backend, which is shared between the two. See "
"the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""

# 0988f645c38348c296c2a951eb2739e2
#: ../../ref/databases.txt:297
msgid "MySQL notes"
msgstr ""

# 9c7585dcec82413f819aa25740a94b9f
#: ../../ref/databases.txt:300
msgid "Version support"
msgstr ""

#: ../../ref/databases.txt:302
msgid "Django supports MySQL 5.6 and higher."
msgstr ""

# a410109a63c54258aaf66f69afbb9528
#: ../../ref/databases.txt:304
msgid ""
"Django's ``inspectdb`` feature uses the ``information_schema`` database, "
"which contains detailed data on all database schemas."
msgstr ""

# f3559f1dead84c8f82b9ace9b514669d
#: ../../ref/databases.txt:307
msgid ""
"Django expects the database to support Unicode (UTF-8 encoding) and "
"delegates to it the task of enforcing transactions and referential "
"integrity. It is important to be aware of the fact that the two latter ones "
"aren't actually enforced by MySQL when using the MyISAM storage engine, see "
"the next section."
msgstr ""

# 7fdf1eb5f1d44199a391ec5b14fdcd86
#: ../../ref/databases.txt:315
msgid "Storage engines"
msgstr ""

# 4c3bfbaf0d9e4a5e8ac2b0e5ea158275
#: ../../ref/databases.txt:317
msgid ""
"MySQL has several `storage engines`_. You can change the default storage "
"engine in the server configuration."
msgstr ""

#: ../../ref/databases.txt:320
msgid ""
"MySQL's default storage engine is InnoDB_. This engine is fully "
"transactional and supports foreign key references. It's the recommended "
"choice. However, the InnoDB autoincrement counter is lost on a MySQL restart "
"because it does not remember the ``AUTO_INCREMENT`` value, instead "
"recreating it as \"max(id)+1\". This may result in an inadvertent reuse of :"
"class:`~django.db.models.AutoField` values."
msgstr ""

#: ../../ref/databases.txt:327
msgid ""
"The main drawbacks of MyISAM_ are that it doesn't support transactions or "
"enforce foreign-key constraints."
msgstr ""

# b9f95d17733f4e969859adbb911e1f9d
#: ../../ref/databases.txt:337
msgid "MySQL DB API Drivers"
msgstr ""

#: ../../ref/databases.txt:339
msgid ""
"MySQL has a couple drivers that implement the Python Database API described "
"in :pep:`249`:"
msgstr ""

#: ../../ref/databases.txt:342
msgid "`mysqlclient`_ is a native driver. It's **the recommended choice**."
msgstr ""

# a5bb69f602ef408bbb5b7876a19d92d5
#: ../../ref/databases.txt:343
msgid ""
"`MySQL Connector/Python`_ is a pure Python driver from Oracle that does not "
"require the MySQL client library or any Python modules outside the standard "
"library."
msgstr ""

#: ../../ref/databases.txt:350
msgid "These drivers are thread-safe and provide connection pooling."
msgstr ""

#: ../../ref/databases.txt:352
msgid ""
"In addition to a DB API driver, Django needs an adapter to access the "
"database drivers from its ORM. Django provides an adapter for mysqlclient "
"while MySQL Connector/Python includes `its own`_."
msgstr ""

#: ../../ref/databases.txt:359
msgid "mysqlclient"
msgstr ""

#: ../../ref/databases.txt:361
msgid "Django requires `mysqlclient`_ 1.3.13 or later."
msgstr ""

# cbf950c7dd3c4686a1847dad7fc3127c
#: ../../ref/databases.txt:364
msgid "MySQL Connector/Python"
msgstr ""

# 1563b39d92e9469aaaa5d72ceddd704c
#: ../../ref/databases.txt:366
msgid ""
"MySQL Connector/Python is available from the `download page`_. The Django "
"adapter is available in versions 1.1.X and later. It may not support the "
"most recent releases of Django."
msgstr ""

# 0a0161374e1f47b6b60569df747d2a23
#: ../../ref/databases.txt:375
msgid "Time zone definitions"
msgstr ""

# 1d7be74842de47cda57664a41887840a
#: ../../ref/databases.txt:377
msgid ""
"If you plan on using Django's :doc:`timezone support </topics/i18n/"
"timezones>`, use `mysql_tzinfo_to_sql`_ to load time zone tables into the "
"MySQL database. This needs to be done just once for your MySQL server, not "
"per database."
msgstr ""

# cdfa892660e14e72ac041e7879d85d33
#: ../../ref/databases.txt:384
msgid "Creating your database"
msgstr ""

# 95a145f3bbbe47f4b298850c0db23f5c
#: ../../ref/databases.txt:386
msgid ""
"You can `create your database`_ using the command-line tools and this SQL::"
msgstr ""

# 6738cfef46d24d2b9f9ad2b8020bdf9a
#: ../../ref/databases.txt:390
msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr ""

# b54c56a1186f45fe87a45aca5c416d78
#: ../../ref/databases.txt:397
msgid "Collation settings"
msgstr ""

# cb00b5b193324428923ad956b843cc1e
#: ../../ref/databases.txt:399
msgid ""
"The collation setting for a column controls the order in which data is "
"sorted as well as what strings compare as equal. It can be set on a database-"
"wide level and also per-table and per-column. This is `documented "
"thoroughly`_ in the MySQL documentation. In all cases, you set the collation "
"by directly manipulating the database tables; Django doesn't provide a way "
"to set this on the model definition."
msgstr ""

#: ../../ref/databases.txt:408
msgid ""
"By default, with a UTF-8 database, MySQL will use the ``utf8_general_ci`` "
"collation. This results in all string equality comparisons being done in a "
"*case-insensitive* manner. That is, ``\"Fred\"`` and ``\"freD\"`` are "
"considered equal at the database level. If you have a unique constraint on a "
"field, it would be illegal to try to insert both ``\"aa\"`` and ``\"AA\"`` "
"into the same column, since they compare as equal (and, hence, non-unique) "
"with the default collation. If you want case-sensitive comparisons on a "
"particular column or table, change the column or table to use the "
"``utf8_bin`` collation."
msgstr ""

# 9e14f353b82a4649b979489f7c64f902
#: ../../ref/databases.txt:418
msgid ""
"Please note that according to `MySQL Unicode Character Sets`_, comparisons "
"for the ``utf8_general_ci`` collation are faster, but slightly less correct, "
"than comparisons for ``utf8_unicode_ci``. If this is acceptable for your "
"application, you should use ``utf8_general_ci`` because it is faster. If "
"this is not acceptable (for example, if you require German dictionary "
"order), use ``utf8_unicode_ci`` because it is more accurate."
msgstr ""

#: ../../ref/databases.txt:429
msgid ""
"Model formsets validate unique fields in a case-sensitive manner. Thus when "
"using a case-insensitive collation, a formset with unique field values that "
"differ only by case will pass validation, but upon calling ``save()``, an "
"``IntegrityError`` will be raised."
msgstr ""

# 1c9f0938d39b4b48a099827998e1e6c4
# 176c663a236d41228e00c0f4c5cc510c
#: ../../ref/databases.txt:435 ../../ref/databases.txt:836
msgid "Connecting to the database"
msgstr ""

# 926d139dfc2e47409c0ea793c1ff5f80
#: ../../ref/databases.txt:437
msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr ""

# 37738feab7d04b759de6a8245f9ce91e
#: ../../ref/databases.txt:439
msgid "Connection settings are used in this order:"
msgstr ""

# 89a3b3f73f684b11ada9e92c4132738b
#: ../../ref/databases.txt:441
msgid ":setting:`OPTIONS`."
msgstr ""

# a0cf6e193a30472ca57311b6287d1c9e
#: ../../ref/databases.txt:442
msgid ""
":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :"
"setting:`PORT`"
msgstr ""

# 49c0d71d9df74382b4304c18fd09600b
#: ../../ref/databases.txt:444
msgid "MySQL option files."
msgstr ""

# a623019f8b9c4dd49b5437e48ab07ada
#: ../../ref/databases.txt:446
msgid ""
"In other words, if you set the name of the database in :setting:`OPTIONS`, "
"this will take precedence over :setting:`NAME`, which would override "
"anything in a `MySQL option file`_."
msgstr ""

# a82680eea99f47fcabd09d8c492022c3
#: ../../ref/databases.txt:450
msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr ""

#: ../../ref/databases.txt:470
msgid ""
"Several other `MySQLdb connection options`_ may be useful, such as ``ssl``, "
"``init_command``, and ``sql_mode``."
msgstr ""

#: ../../ref/databases.txt:479
msgid "Setting ``sql_mode``"
msgstr ""

#: ../../ref/databases.txt:481
msgid ""
"From MySQL 5.7 onwards and on fresh installs of MySQL 5.6, the default value "
"of the ``sql_mode`` option contains ``STRICT_TRANS_TABLES``. That option "
"escalates warnings into errors when data are truncated upon insertion, so "
"Django highly recommends activating a `strict mode`_ for MySQL to prevent "
"data loss (either ``STRICT_TRANS_TABLES`` or ``STRICT_ALL_TABLES``)."
msgstr ""

#: ../../ref/databases.txt:489
msgid ""
"If you need to customize the SQL mode, you can set the ``sql_mode`` variable "
"like other MySQL options: either in a config file or with the entry "
"``'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"`` in the :setting:"
"`OPTIONS` part of your database configuration in :setting:`DATABASES`."
msgstr ""

#: ../../ref/databases.txt:499
msgid ""
"When running concurrent loads, database transactions from different sessions "
"(say, separate threads handling different requests) may interact with each "
"other. These interactions are affected by each session's `transaction "
"isolation level`_. You can set a connection's isolation level with an "
"``'isolation_level'`` entry in the :setting:`OPTIONS` part of your database "
"configuration in :setting:`DATABASES`. Valid values for this entry are the "
"four standard isolation levels:"
msgstr ""

#: ../../ref/databases.txt:507
msgid "``'read uncommitted'``"
msgstr ""

#: ../../ref/databases.txt:508
msgid "``'read committed'``"
msgstr ""

#: ../../ref/databases.txt:509
msgid "``'repeatable read'``"
msgstr ""

#: ../../ref/databases.txt:510
msgid "``'serializable'``"
msgstr ""

#: ../../ref/databases.txt:512
msgid ""
"or ``None`` to use the server's configured isolation level. However, Django "
"works best with and defaults to read committed rather than MySQL's default, "
"repeatable read. Data loss is possible with repeatable read. In particular, "
"you may see cases where :meth:`~django.db.models.query.QuerySet."
"get_or_create` will raise an :exc:`~django.db.IntegrityError` but the object "
"won't appear in a subsequent :meth:`~django.db.models.query.QuerySet.get` "
"call."
msgstr ""

# 217308a487e84954a0959f6448cf1c33
#: ../../ref/databases.txt:522
msgid "Creating your tables"
msgstr ""

# 6483fb9c488c4a5ca7c1aab9be402b0e
#: ../../ref/databases.txt:524
msgid ""
"When Django generates the schema, it doesn't specify a storage engine, so "
"tables will be created with whatever default storage engine your database "
"server is configured for. The easiest solution is to set your database "
"server's default storage engine to the desired engine."
msgstr ""

# 125e3b961560407bb9c8888364c4bba4
#: ../../ref/databases.txt:529
msgid ""
"If you're using a hosting service and can't change your server's default "
"storage engine, you have a couple of options."
msgstr ""

# 12a7c9c979d54bdba2ecf64ad266e460
#: ../../ref/databases.txt:532
msgid ""
"After the tables are created, execute an ``ALTER TABLE`` statement to "
"convert a table to a new storage engine (such as InnoDB)::"
msgstr ""

# d8d09c00192c4bcc8b8bfcc2dd80e3e6
#: ../../ref/databases.txt:537
msgid "This can be tedious if you have a lot of tables."
msgstr ""

# 398f673dc5da4727b62c7f6e5ef9d849
#: ../../ref/databases.txt:539
msgid ""
"Another option is to use the ``init_command`` option for MySQLdb prior to "
"creating your tables::"
msgstr ""

# 8538c3ef9240417e9bc69776573dde26
#: ../../ref/databases.txt:546
msgid ""
"This sets the default storage engine upon connecting to the database. After "
"your tables have been created, you should remove this option as it adds a "
"query that is only needed during table creation to each database connection."
msgstr ""

# fa8a014d4c204efca8768f3e3787cc65
#: ../../ref/databases.txt:552
msgid "Table names"
msgstr ""

# abea8b81741141ac89eee810483c3cb0
#: ../../ref/databases.txt:554
msgid ""
"There are `known issues`_ in even the latest versions of MySQL that can "
"cause the case of a table name to be altered when certain SQL statements are "
"executed under certain conditions. It is recommended that you use lowercase "
"table names, if possible, to avoid any problems that might arise from this "
"behavior. Django uses lowercase table names when it auto-generates table "
"names from models, so this is mainly a consideration if you are overriding "
"the table name via the :class:`~django.db.models.Options.db_table` parameter."
msgstr ""

# cfc6c5866bdd4058becca48026d77e6d
#: ../../ref/databases.txt:565
msgid "Savepoints"
msgstr ""

# 2aff9774b6e542b482ca6af2c42ad3ce
#: ../../ref/databases.txt:567
msgid ""
"Both the Django ORM and MySQL (when using the InnoDB :ref:`storage engine "
"<mysql-storage-engines>`) support database :ref:`savepoints <topics-db-"
"transactions-savepoints>`."
msgstr ""

# 5b85f4292560406cb6375da1ffb29b55
#: ../../ref/databases.txt:571
msgid ""
"If you use the MyISAM storage engine please be aware of the fact that you "
"will receive database-generated errors if you try to use the :ref:`savepoint-"
"related methods of the transactions API <topics-db-transactions-"
"savepoints>`. The reason for this is that detecting the storage engine of a "
"MySQL database/table is an expensive operation so it was decided it isn't "
"worth to dynamically convert these methods in no-op's based in the results "
"of such detection."
msgstr ""

# 613fe0b08dfc42308264d832166cc1ea
#: ../../ref/databases.txt:579
msgid "Notes on specific fields"
msgstr ""

# dec78d4d90b649cc8b9286ac8a1d002f
#: ../../ref/databases.txt:582
msgid "Character fields"
msgstr ""

#: ../../ref/databases.txt:584
msgid ""
"Any fields that are stored with ``VARCHAR`` column types have their "
"``max_length`` restricted to 255 characters if you are using ``unique=True`` "
"for the field. This affects :class:`~django.db.models.CharField`, :class:"
"`~django.db.models.SlugField`."
msgstr ""

# 947f0671a27b4f889a89054c794815d5
#: ../../ref/databases.txt:590 ../../ref/databases.txt:966
msgid "``TextField`` limitations"
msgstr ""

#: ../../ref/databases.txt:592
msgid ""
"MySQL can index only the first N chars of a ``BLOB`` or ``TEXT`` column. "
"Since ``TextField`` doesn't have a defined length, you can't mark it as "
"``unique=True``. MySQL will report: \"BLOB/TEXT column '<db_column>' used in "
"key specification without a key length\"."
msgstr ""

#: ../../ref/databases.txt:600
msgid "Fractional seconds support for Time and DateTime fields"
msgstr ""

#: ../../ref/databases.txt:602
msgid ""
"MySQL 5.6.4 and later can store fractional seconds, provided that the column "
"definition includes a fractional indication (e.g. ``DATETIME(6)``). Earlier "
"versions do not support them at all."
msgstr ""

#: ../../ref/databases.txt:606
msgid ""
"Django will not upgrade existing columns to include fractional seconds if "
"the database server supports it. If you want to enable them on an existing "
"database, it's up to you to either manually update the column on the target "
"database, by executing a command like::"
msgstr ""

#: ../../ref/databases.txt:613
msgid ""
"or using a :class:`~django.db.migrations.operations.RunSQL` operation in a :"
"ref:`data migration <data-migrations>`."
msgstr ""

# ac3df08bd9924756a8f249c0a037955b
#: ../../ref/databases.txt:617
msgid "``TIMESTAMP`` columns"
msgstr ""

# e2f915cb36654e4cbe02ff2f728910fb
#: ../../ref/databases.txt:619
msgid ""
"If you are using a legacy database that contains ``TIMESTAMP`` columns, you "
"must set :setting:`USE_TZ = False <USE_TZ>` to avoid data corruption. :"
"djadmin:`inspectdb` maps these columns to :class:`~django.db.models."
"DateTimeField` and if you enable timezone support, both MySQL and Django "
"will attempt to convert the values from UTC to local time."
msgstr ""

# 98debd2f8a8e46d7b27a0b681672a0ff
#: ../../ref/databases.txt:626
msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr ""

#: ../../ref/databases.txt:628
msgid ""
"MySQL and MariaDB do not support some options to the ``SELECT ... FOR "
"UPDATE`` statement. If ``select_for_update()`` is used with an unsupported "
"option, then a :exc:`~django.db.NotSupportedError` is raised."
msgstr ""

#: ../../ref/databases.txt:633
msgid "Option"
msgstr ""

#: ../../ref/databases.txt:633
msgid "MariaDB"
msgstr ""

#: ../../ref/databases.txt:633
msgid "MySQL"
msgstr ""

#: ../../ref/databases.txt:635
msgid "``SKIP LOCKED``"
msgstr ""

#: ../../ref/databases.txt:635 ../../ref/databases.txt:636
msgid "X (≥8.0.1)"
msgstr ""

#: ../../ref/databases.txt:636
msgid "``NOWAIT``"
msgstr ""

#: ../../ref/databases.txt:636
msgid "X (≥10.3)"
msgstr ""

#: ../../ref/databases.txt:637
msgid "``OF``"
msgstr ""

#: ../../ref/databases.txt:640
msgid ""
"When using ``select_for_update()`` on MySQL, make sure you filter a queryset "
"against at least set of fields contained in unique constraints or only "
"against fields covered by indexes. Otherwise, an exclusive write lock will "
"be acquired over the full table for the duration of the transaction."
msgstr ""

# 9e87a6baee50418bbdb1ae17ede5b892
#: ../../ref/databases.txt:646
msgid "Automatic typecasting can cause unexpected results"
msgstr ""

# fd8900f92b694a2b8161203f49fc38fa
#: ../../ref/databases.txt:648
msgid ""
"When performing a query on a string type, but with an integer value, MySQL "
"will coerce the types of all values in the table to an integer before "
"performing the comparison. If your table contains the values ``'abc'``, "
"``'def'`` and you query for ``WHERE mycolumn=0``, both rows will match. "
"Similarly, ``WHERE mycolumn=1`` will match the value ``'abc1'``. Therefore, "
"string type fields included in Django will always cast the value to a string "
"before using it in a query."
msgstr ""

#: ../../ref/databases.txt:655
msgid ""
"If you implement custom model fields that inherit from :class:`~django.db."
"models.Field` directly, are overriding :meth:`~django.db.models.Field."
"get_prep_value`, or use :class:`~django.db.models.expressions.RawSQL`, :meth:"
"`~django.db.models.query.QuerySet.extra`, or :meth:`~django.db.models."
"Manager.raw`, you should ensure that you perform appropriate typecasting."
msgstr ""

# 65f1b72f33864d42918dd946b9b52aa7
#: ../../ref/databases.txt:666
msgid "SQLite notes"
msgstr ""

#: ../../ref/databases.txt:668
msgid "Django supports SQLite 3.8.3 and later."
msgstr ""

# 8a844898e3804aa7a98fbbb0ca326d32
#: ../../ref/databases.txt:670
msgid ""
"SQLite_ provides an excellent development alternative for applications that "
"are predominantly read-only or require a smaller installation footprint. As "
"with all database servers, though, there are some differences that are "
"specific to SQLite that you should be aware of."
msgstr ""

# f5e3090499cb4e769c98d2b73d2ea739
#: ../../ref/databases.txt:680
msgid "Substring matching and case sensitivity"
msgstr ""

# f72a76b1283f4447b6d0d7d5574bf5bb
#: ../../ref/databases.txt:682
msgid ""
"For all SQLite versions, there is some slightly counter-intuitive behavior "
"when attempting to match some types of strings.  These are triggered when "
"using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The "
"behavior splits into two cases:"
msgstr ""

# 1b00a38d5fb441bcbab9ad0995841404
#: ../../ref/databases.txt:687
msgid ""
"1. For substring matching, all matches are done case-insensitively. That is "
"a filter such as ``filter(name__contains=\"aa\")`` will match a name of ``"
"\"Aabb\"``."
msgstr ""

# 92491c4e2aaf4efe8b8463160fbf08d1
#: ../../ref/databases.txt:690
msgid ""
"2. For strings containing characters outside the ASCII range, all exact "
"string matches are performed case-sensitively, even when the case-"
"insensitive options are passed into the query. So the :lookup:`iexact` "
"filter will behave exactly the same as the :lookup:`exact` filter in these "
"cases."
msgstr ""

# 5e5ccfdb939a41c7812a9de9be7f688a
#: ../../ref/databases.txt:695
msgid ""
"Some possible workarounds for this are `documented at sqlite.org`_, but they "
"aren't utilized by the default SQLite backend in Django, as incorporating "
"them would be fairly difficult to do robustly. Thus, Django exposes the "
"default SQLite behavior and you should be aware of this when doing case-"
"insensitive or substring filtering."
msgstr ""

#: ../../ref/databases.txt:706
msgid "Decimal handling"
msgstr ""

#: ../../ref/databases.txt:708
msgid ""
"SQLite has no real decimal internal type. Decimal values are internally "
"converted to the ``REAL`` data type (8-byte IEEE floating point number), as "
"explained in the `SQLite datatypes documentation`__, so they don't support "
"correctly-rounded decimal floating point arithmetic."
msgstr ""

# 02441a738ba34954b51578e9b6f4bb6f
#: ../../ref/databases.txt:716
msgid "\"Database is locked\" errors"
msgstr ""

# 572d1b48d40e49aeab0adac1f8766e98
#: ../../ref/databases.txt:718
msgid ""
"SQLite is meant to be a lightweight database, and thus can't support a high "
"level of concurrency. ``OperationalError: database is locked`` errors "
"indicate that your application is experiencing more concurrency than "
"``sqlite`` can handle in default configuration. This error means that one "
"thread or process has an exclusive lock on the database connection and "
"another thread timed out waiting for the lock the be released."
msgstr ""

# cc3bc9561a4d4387bdb26e3dc84535a5
#: ../../ref/databases.txt:725
msgid ""
"Python's SQLite wrapper has a default timeout value that determines how long "
"the second thread is allowed to wait on the lock before it times out and "
"raises the ``OperationalError: database is locked`` error."
msgstr ""

# 9848702c914940efabe623f57fcd5ab9
#: ../../ref/databases.txt:730
msgid "If you're getting this error, you can solve it by:"
msgstr ""

# c8a9678f0b1e4bae8ba8ce71915579b7
#: ../../ref/databases.txt:732
msgid ""
"Switching to another database backend. At a certain point SQLite becomes too "
"\"lite\" for real-world applications, and these sorts of concurrency errors "
"indicate you've reached that point."
msgstr ""

# 346d5a36dc274aa4b5ea81825658f272
#: ../../ref/databases.txt:736
msgid ""
"Rewriting your code to reduce concurrency and ensure that database "
"transactions are short-lived."
msgstr ""

#: ../../ref/databases.txt:739
msgid ""
"Increase the default timeout value by setting the ``timeout`` database "
"option::"
msgstr ""

#: ../../ref/databases.txt:748
msgid ""
"This will make SQLite wait a bit longer before throwing \"database is locked"
"\" errors; it won't really do anything to solve them."
msgstr ""

# a13e2fc148224ea5a4d91311ab531296
#: ../../ref/databases.txt:752
msgid "``QuerySet.select_for_update()`` not supported"
msgstr ""

# d2ac40e89a3a41a6b87a8bf0a2eeadff
#: ../../ref/databases.txt:754
msgid ""
"SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it "
"will have no effect."
msgstr ""

# d5b14fcb02414c85ad06daffff1bee54
#: ../../ref/databases.txt:758
msgid "\"pyformat\" parameter style in raw queries not supported"
msgstr ""

# e2d138c0b5174cf29d7fd57b7653525c
#: ../../ref/databases.txt:760
msgid ""
"For most backends, raw queries (``Manager.raw()`` or ``cursor.execute()``) "
"can use the \"pyformat\" parameter style, where placeholders in the query "
"are given as ``'%(name)s'`` and the parameters are passed as a dictionary "
"rather than a list. SQLite does not support this."
msgstr ""

#: ../../ref/databases.txt:768
msgid "Isolation when using ``QuerySet.iterator()``"
msgstr ""

#: ../../ref/databases.txt:770
msgid ""
"There are special considerations described in `Isolation In SQLite`_ when "
"modifying a table while iterating over it using :meth:`.QuerySet.iterator`. "
"If a row is added, changed, or deleted within the loop, then that row may or "
"may not appear, or may appear twice, in subsequent results fetched from the "
"iterator. Your code must handle this."
msgstr ""

# 46c8788e1cf5420f9b327abed04f6c09
#: ../../ref/databases.txt:781
msgid "Oracle notes"
msgstr ""

#: ../../ref/databases.txt:783
msgid ""
"Django supports `Oracle Database Server`_ versions 12.2 and higher. Version "
"6.0 or higher of the `cx_Oracle`_ Python driver is required."
msgstr ""

# dd38ea4ffbc247d990e335025c78ddc5
#: ../../ref/databases.txt:789
msgid ""
"In order for the ``python manage.py migrate`` command to work, your Oracle "
"database user must have privileges to run the following commands:"
msgstr ""

# bd49722b791c4be18f563e5a6cd8627c
#: ../../ref/databases.txt:792
msgid "CREATE TABLE"
msgstr ""

# a061e1814b4549948df9812a22101ec7
#: ../../ref/databases.txt:793
msgid "CREATE SEQUENCE"
msgstr ""

# 8274a4e4912b44f7bdeb9aefc6507fd7
#: ../../ref/databases.txt:794
msgid "CREATE PROCEDURE"
msgstr ""

# ef47a55683ee4403b5e19773030967c0
#: ../../ref/databases.txt:795
msgid "CREATE TRIGGER"
msgstr ""

#: ../../ref/databases.txt:797
msgid ""
"To run a project's test suite, the user usually needs these *additional* "
"privileges:"
msgstr ""

# e9e0c85fd6f04aa4a96de9b5a6bf9534
#: ../../ref/databases.txt:800
msgid "CREATE USER"
msgstr ""

#: ../../ref/databases.txt:801
msgid "ALTER USER"
msgstr ""

# 8f6bb7c9174e47689b33ba4459a43e62
#: ../../ref/databases.txt:802
msgid "DROP USER"
msgstr ""

# dbbc47a583de4e54b1ebc2cff5e44024
#: ../../ref/databases.txt:803
msgid "CREATE TABLESPACE"
msgstr ""

# b579bd2de96b49e1a3a723f52205219c
#: ../../ref/databases.txt:804
msgid "DROP TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:805
msgid "CREATE SESSION WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:806
msgid "CREATE TABLE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:807
msgid "CREATE SEQUENCE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:808
msgid "CREATE PROCEDURE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:809
msgid "CREATE TRIGGER WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:811
msgid ""
"While the ``RESOURCE`` role has the required ``CREATE TABLE``, ``CREATE "
"SEQUENCE``, ``CREATE PROCEDURE``, and ``CREATE TRIGGER`` privileges, and a "
"user granted ``RESOURCE WITH ADMIN OPTION`` can grant ``RESOURCE``, such a "
"user cannot grant the individual privileges (e.g. ``CREATE TABLE``), and "
"thus ``RESOURCE WITH ADMIN OPTION`` is not usually sufficient for running "
"tests."
msgstr ""

#: ../../ref/databases.txt:817
msgid ""
"Some test suites also create views or materialized views; to run these, the "
"user also needs ``CREATE VIEW WITH ADMIN OPTION`` and ``CREATE MATERIALIZED "
"VIEW WITH ADMIN OPTION`` privileges. In particular, this is needed for "
"Django's own test suite."
msgstr ""

#: ../../ref/databases.txt:822
msgid ""
"All of these privileges are included in the DBA role, which is appropriate "
"for use on a private developer's database."
msgstr ""

#: ../../ref/databases.txt:825
msgid ""
"The Oracle database backend uses the ``SYS.DBMS_LOB`` and ``SYS."
"DBMS_RANDOM`` packages, so your user will require execute permissions on it. "
"It's normally accessible to all users by default, but in case it is not, "
"you'll need to grant permissions like so:"
msgstr ""

# 2984bd5908744edc969b4eab96cabdb3
#: ../../ref/databases.txt:838
msgid ""
"To connect using the service name of your Oracle database, your ``settings."
"py`` file should look something like this::"
msgstr ""

# 5b657ce76ffc4f8a887e052e5e75a36e
#: ../../ref/databases.txt:853
msgid ""
"In this case, you should leave both :setting:`HOST` and :setting:`PORT` "
"empty. However, if you don't use a ``tnsnames.ora`` file or a similar naming "
"method and want to connect using the SID (\"xe\" in this example), then fill "
"in both :setting:`HOST` and :setting:`PORT` like so::"
msgstr ""

# 95245bde537d4d829225915b400a8238
#: ../../ref/databases.txt:869
msgid ""
"You should either supply both :setting:`HOST` and :setting:`PORT`, or leave "
"both as empty strings. Django will use a different connect descriptor "
"depending on that choice."
msgstr ""

#: ../../ref/databases.txt:874
msgid "Full DSN and Easy Connect"
msgstr ""

#: ../../ref/databases.txt:876
msgid ""
"A Full DSN or Easy Connect string can be used in :setting:`NAME` if both :"
"setting:`HOST` and :setting:`PORT` are empty. This format is required when "
"using RAC or pluggable databases without ``tnsnames.ora``, for example."
msgstr ""

#: ../../ref/databases.txt:880
msgid "Example of an Easy Connect string::"
msgstr ""

#: ../../ref/databases.txt:884
msgid "Example of a full DSN string::"
msgstr ""

# 70443cb5f9aa4e34ad97e370b9b325b7
#: ../../ref/databases.txt:892
msgid "Threaded option"
msgstr ""

#: ../../ref/databases.txt:894
msgid ""
"If you plan to run Django in a multithreaded environment (e.g. Apache using "
"the default MPM module on any modern operating system), then you **must** "
"set the ``threaded`` option of your Oracle database configuration to "
"``True``::"
msgstr ""

# c28a8f1303054522bbac665ea8f658fd
#: ../../ref/databases.txt:902
msgid "Failure to do this may result in crashes and other odd behavior."
msgstr ""

# 016b8bacceeb4405bce9a22bc953d9ab
#: ../../ref/databases.txt:905
msgid "INSERT ... RETURNING INTO"
msgstr ""

#: ../../ref/databases.txt:907
msgid ""
"By default, the Oracle backend uses a ``RETURNING INTO`` clause to "
"efficiently retrieve the value of an ``AutoField`` when inserting new rows.  "
"This behavior may result in a ``DatabaseError`` in certain unusual setups, "
"such as when inserting into a remote table, or into a view with an ``INSTEAD "
"OF`` trigger. The ``RETURNING INTO`` clause can be disabled by setting the "
"``use_returning_into`` option of the database configuration to ``False``::"
msgstr ""

#: ../../ref/databases.txt:918
msgid ""
"In this case, the Oracle backend will use a separate ``SELECT`` query to "
"retrieve ``AutoField`` values."
msgstr ""

# 010810bfcba743bbbd47ecfd11493d66
#: ../../ref/databases.txt:922
msgid "Naming issues"
msgstr ""

# 6d955e99b0cf4e2dbcc3599f8a1d84c7
#: ../../ref/databases.txt:924
msgid ""
"Oracle imposes a name length limit of 30 characters. To accommodate this, "
"the backend truncates database identifiers to fit, replacing the final four "
"characters of the truncated name with a repeatable MD5 hash value. "
"Additionally, the backend turns database identifiers to all-uppercase."
msgstr ""

# 7a35dde3dd9d48e9b44406bda1366ada
#: ../../ref/databases.txt:929
msgid ""
"To prevent these transformations (this is usually required only when dealing "
"with legacy databases or accessing tables which belong to other users), use "
"a quoted name as the value for ``db_table``::"
msgstr ""

# c1015ef9d3654f8caeab3a77f26057ed
#: ../../ref/databases.txt:941
msgid ""
"Quoted names can also be used with Django's other supported database "
"backends; except for Oracle, however, the quotes have no effect."
msgstr ""

# bd786e5db5c242ac9deb71fc55c037b2
#: ../../ref/databases.txt:944
msgid ""
"When running ``migrate``, an ``ORA-06552`` error may be encountered if "
"certain Oracle keywords are used as the name of a model field or the value "
"of a ``db_column`` option.  Django quotes all identifiers used in queries to "
"prevent most such problems, but this error can still occur when an Oracle "
"datatype is used as a column name.  In particular, take care to avoid using "
"the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""

# a20530da3f1641a786da48a3b84b08ac
#: ../../ref/databases.txt:955
msgid "NULL and empty strings"
msgstr ""

#: ../../ref/databases.txt:957
msgid ""
"Django generally prefers to use the empty string (``''``) rather than "
"``NULL``, but Oracle treats both identically. To get around this, the Oracle "
"backend ignores an explicit ``null`` option on fields that have the empty "
"string as a possible value and generates DDL as if ``null=True``. When "
"fetching from the database, it is assumed that a ``NULL`` value in one of "
"these fields really means the empty string, and the data is silently "
"converted to reflect this assumption."
msgstr ""

# c6bf8cfb1b63423ca3926564e7c61406
#: ../../ref/databases.txt:968
msgid ""
"The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle "
"imposes some limitations on the usage of such LOB columns in general:"
msgstr ""

# d0f2199b50e64244b1ca9b27db1c37a8
#: ../../ref/databases.txt:971
msgid "LOB columns may not be used as primary keys."
msgstr ""

# 11c0d6bc4166488a938c3fd9ff91f7ee
#: ../../ref/databases.txt:973
msgid "LOB columns may not be used in indexes."
msgstr ""

#: ../../ref/databases.txt:975
msgid ""
"LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that "
"attempting to use the ``QuerySet.distinct`` method on a model that includes "
"``TextField`` columns will result in an ``ORA-00932`` error when run against "
"Oracle. As a workaround, use the ``QuerySet.defer`` method in conjunction "
"with ``distinct()`` to prevent ``TextField`` columns from being included in "
"the ``SELECT DISTINCT`` list."
msgstr ""

#: ../../ref/databases.txt:985
msgid "Subclassing the built-in database backends"
msgstr ""

#: ../../ref/databases.txt:987
msgid ""
"Django comes with built-in database backends. You may subclass an existing "
"database backends to modify its behavior, features, or configuration."
msgstr ""

#: ../../ref/databases.txt:990
msgid ""
"Consider, for example, that you need to change a single database feature. "
"First, you have to create a new directory with a ``base`` module in it. For "
"example::"
msgstr ""

#: ../../ref/databases.txt:1000
msgid ""
"The ``base.py`` module must contain a class named ``DatabaseWrapper`` that "
"subclasses an existing engine from the ``django.db.backends`` module. Here's "
"an example of subclassing the PostgreSQL engine to change a feature class "
"``allows_group_by_selected_pks_on_model``:"
msgstr ""

#: ../../ref/databases.txt:1005
msgid "mysite/mydbengine/base.py"
msgstr ""

#: ../../ref/databases.txt:1017
msgid ""
"Finally, you must specify a :setting:`DATABASE-ENGINE` in your ``settings."
"py`` file::"
msgstr ""

#: ../../ref/databases.txt:1027
msgid ""
"You can see the current list of database engines by looking in :source:"
"`django/db/backends`."
msgstr ""

# f6b80f2d700e4d3ba396842b3c5e4464
#: ../../ref/databases.txt:1033
msgid "Using a 3rd-party database backend"
msgstr ""

# b22a303d49434cbc9493d02898f6826b
#: ../../ref/databases.txt:1035
msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

# d3700e63784c41c485574b038488125b
#: ../../ref/databases.txt:1038
msgid "`IBM DB2`_"
msgstr ""

# 9f33f032f5ed40d2bfb39c028a0fc630
#: ../../ref/databases.txt:1039
msgid "`Microsoft SQL Server`_"
msgstr ""

# 0592880cb07544d2af0d0d27f81f8a62
#: ../../ref/databases.txt:1040
msgid "Firebird_"
msgstr ""

# b37e690874ca43c5b1c9058da94cd528
#: ../../ref/databases.txt:1041
msgid "ODBC_"
msgstr ""

# 8418f167892b4f638a54569f326c0a09
#: ../../ref/databases.txt:1043
msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""

#~ msgid ""
#~ "If you're on Windows, check out the unofficial `compiled Windows "
#~ "version`_ of psycopg2."
#~ msgstr ""
#~ "Если вы используете Windows, можете использовать наши неофициальные "
#~ "`сборки psycopg2 под Windows <http://stickpeople.com/projects/python/win-"
#~ "psycopg/>`_."
