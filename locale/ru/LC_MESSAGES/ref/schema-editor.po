# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# afca80904eb74b03954dbed16c9ea38e
#: ../../ref/schema-editor.txt:3
msgid "``SchemaEditor``"
msgstr ""

# 04e2a674a9ab48c7a170bf30649bd232
#: ../../ref/schema-editor.txt:9
msgid ""
"Django's migration system is split into two parts; the logic for calculating "
"and storing what operations should be run (``django.db.migrations``), and "
"the database abstraction layer that turns things like \"create a model\" or "
"\"delete a field\" into SQL - which is the job of the ``SchemaEditor``."
msgstr ""

# da3583ce86d843c896ac2425579b38e5
#: ../../ref/schema-editor.txt:14
msgid ""
"It's unlikely that you will want to interact directly with ``SchemaEditor`` "
"as a normal developer using Django, but if you want to write your own "
"migration system, or have more advanced needs, it's a lot nicer than writing "
"SQL."
msgstr ""

# 00f51f243d7d4513888407a1b0fa0f35
#: ../../ref/schema-editor.txt:18
msgid ""
"Each database backend in Django supplies its own version of "
"``SchemaEditor``, and it's always accessible via the ``connection."
"schema_editor()`` context manager::"
msgstr ""

# 2083c71063874fa69077d88889a64804
#: ../../ref/schema-editor.txt:25
msgid ""
"It must be used via the context manager as this allows it to manage things "
"like transactions and deferred SQL (like creating ``ForeignKey`` "
"constraints)."
msgstr ""

# 7dd39cfa1a4b4bed9562ac89c881c528
#: ../../ref/schema-editor.txt:28
msgid ""
"It exposes all possible operations as methods, that should be called in the "
"order you wish changes to be applied. Some possible operations or types of "
"change are not possible on all databases - for example, MyISAM does not "
"support foreign key constraints."
msgstr ""

# af837e99f2ef4616b366fdff0dfaf6ee
#: ../../ref/schema-editor.txt:33
msgid ""
"If you are writing or maintaining a third-party database backend for Django, "
"you will need to provide a ``SchemaEditor`` implementation in order to work "
"with 1.7's migration functionality - however, as long as your database is "
"relatively standard in its use of SQL and relational design, you should be "
"able to subclass one of the built-in Django ``SchemaEditor`` classes and "
"just tweak the syntax a little. Also note that there are a few new database "
"features that migrations will look for: ``can_rollback_ddl`` and "
"``supports_combined_alters`` are the most important."
msgstr ""

# 2cd6737e40bf45c6973e0a06ead4f24f
#: ../../ref/schema-editor.txt:43
msgid "Methods"
msgstr ""

#: ../../ref/schema-editor.txt:46
msgid "``execute()``"
msgstr ""

# 46be43ab11064ad8bdf2d34709c45d9b
#: ../../ref/schema-editor.txt:50
msgid ""
"Executes the SQL statement passed in, with parameters if supplied. This is a "
"simple wrapper around the normal database cursors that allows capture of the "
"SQL to a ``.sql`` file if the user wishes."
msgstr ""

#: ../../ref/schema-editor.txt:55
msgid "``create_model()``"
msgstr ""

# d6105d3d987d4bd1bec631f59c748463
#: ../../ref/schema-editor.txt:59
msgid ""
"Creates a new table in the database for the provided model, along with any "
"unique constraints or indexes it requires."
msgstr ""

#: ../../ref/schema-editor.txt:63
msgid "``delete_model()``"
msgstr ""

# 5c13ab597caa429ba33f08e96a9c6293
#: ../../ref/schema-editor.txt:67
msgid ""
"Drops the model's table in the database along with any unique constraints or "
"indexes it has."
msgstr ""

#: ../../ref/schema-editor.txt:71
msgid "``add_index()``"
msgstr ""

#: ../../ref/schema-editor.txt:77
msgid "Adds ``index`` to ``model``’s table."
msgstr ""

#: ../../ref/schema-editor.txt:80
msgid "``remove_index()``"
msgstr ""

#: ../../ref/schema-editor.txt:86
msgid "Removes ``index`` from ``model``’s table."
msgstr ""

#: ../../ref/schema-editor.txt:89
msgid "``alter_unique_together()``"
msgstr ""

# ed08fc489ff84510a82949f968d357d0
#: ../../ref/schema-editor.txt:93
msgid ""
"Changes a model's :attr:`~django.db.models.Options.unique_together` value; "
"this will add or remove unique constraints from the model's table until they "
"match the new value."
msgstr ""

#: ../../ref/schema-editor.txt:98
msgid "``alter_index_together()``"
msgstr ""

# b57a00359eab4e3aac0b2629195d4dc2
#: ../../ref/schema-editor.txt:102
msgid ""
"Changes a model's :attr:`~django.db.models.Options.index_together` value; "
"this will add or remove indexes from the model's table until they match the "
"new value."
msgstr ""

#: ../../ref/schema-editor.txt:107
msgid "``alter_db_table()``"
msgstr ""

# 89cdfbe8af3c416b9cf803b07660cfd3
#: ../../ref/schema-editor.txt:111
msgid "Renames the model's table from ``old_db_table`` to ``new_db_table``."
msgstr ""

#: ../../ref/schema-editor.txt:114
msgid "``alter_db_tablespace()``"
msgstr ""

# 8e030e1660064aa4b7562b9000f655fa
#: ../../ref/schema-editor.txt:118
msgid "Moves the model's table from one tablespace to another."
msgstr ""

#: ../../ref/schema-editor.txt:121
msgid "``add_field()``"
msgstr ""

# 22586a561546460fbeb881ffd965967b
#: ../../ref/schema-editor.txt:125
msgid ""
"Adds a column (or sometimes multiple) to the model's table to represent the "
"field. This will also add indexes or a unique constraint if the field has "
"``db_index=True`` or ``unique=True``."
msgstr ""

# 4fa1fc33103243db96ac027df921e4d7
#: ../../ref/schema-editor.txt:129
msgid ""
"If the field is a ``ManyToManyField`` without a value for ``through``, "
"instead of creating a column, it will make a table to represent the "
"relationship. If ``through`` is provided, it is a no-op."
msgstr ""

# ebea42dff88343e383204c56bfd494f4
#: ../../ref/schema-editor.txt:133
msgid ""
"If the field is a ``ForeignKey``, this will also add the foreign key "
"constraint to the column."
msgstr ""

#: ../../ref/schema-editor.txt:137
msgid "``remove_field()``"
msgstr ""

# ef2e34f7ba32400e88dc62898d3a6a8c
#: ../../ref/schema-editor.txt:141
msgid ""
"Removes the column(s) representing the field from the model's table, along "
"with any unique constraints, foreign key constraints, or indexes caused by "
"that field."
msgstr ""

# 914f1b722c154cb2933b7f25f55b2118
#: ../../ref/schema-editor.txt:145
msgid ""
"If the field is a ManyToManyField without a value for ``through``, it will "
"remove the table created to track the relationship. If ``through`` is "
"provided, it is a no-op."
msgstr ""

#: ../../ref/schema-editor.txt:150
msgid "``alter_field()``"
msgstr ""

# 891b83ce5d654aa5922544b2b9281f45
#: ../../ref/schema-editor.txt:154
msgid ""
"This transforms the field on the model from the old field to the new one. "
"This includes changing the name of the column (the :attr:`~django.db.models."
"Field.db_column` attribute), changing the type of the field (if the field "
"class changes), changing the ``NULL`` status of the field, adding or "
"removing field-only unique constraints and indexes, changing primary key, "
"and changing the destination of ``ForeignKey`` constraints."
msgstr ""

# 7a21955611b0418fb9a4d84c12af2e56
#: ../../ref/schema-editor.txt:161
msgid ""
"The most common transformation this cannot do is transforming a "
"``ManyToManyField`` into a normal Field or vice-versa; Django cannot do this "
"without losing data, and so it will refuse to do it. Instead, :meth:`."
"remove_field` and :meth:`.add_field` should be called separately."
msgstr ""

# ff60454e9eb04461a81ac022fbb64d32
#: ../../ref/schema-editor.txt:166
msgid ""
"If the database has the ``supports_combined_alters``, Django will try and do "
"as many of these in a single database call as possible; otherwise, it will "
"issue a separate ALTER statement for each change, but will not issue ALTERs "
"where no change is required (as South often did)."
msgstr ""

#: ../../ref/schema-editor.txt:172
msgid "Attributes"
msgstr ""

#: ../../ref/schema-editor.txt:174
msgid "All attributes should be considered read-only unless stated otherwise."
msgstr ""

#: ../../ref/schema-editor.txt:177
msgid "``connection``"
msgstr ""

#: ../../ref/schema-editor.txt:181
msgid ""
"A connection object to the database. A useful attribute of the connection is "
"``alias`` which can be used to determine the name of the database being "
"accessed."
msgstr ""

#: ../../ref/schema-editor.txt:185
msgid ""
"This is useful when doing data migrations for :ref:`migrations with multiple "
"databases <data-migrations-and-multiple-databases>`."
msgstr ""
