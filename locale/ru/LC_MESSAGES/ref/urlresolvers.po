# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-23 16:09\n"
"PO-Revision-Date: 2013-06-27 22:39+0700\n"
"Last-Translator: redvi <liberty195@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 47f2a4a1103549be9a7ce2777f56ef7d
#: ../../ref/urlresolvers.txt:3
msgid "``django.core.urlresolvers`` utility functions"
msgstr "``django.core.urlresolvers`` utility functions"

# c2f06fad9a454cddb5c5ff18d8360d8f
#: ../../ref/urlresolvers.txt:8
msgid "reverse()"
msgstr "reverse()"

# e73720aff5624925b2569abf3a0f0583
#: ../../ref/urlresolvers.txt:10
msgid "If you need to use something similar to the :ttag:`url` template tag in your code, Django provides the following function:"
msgstr "Если вам нужно вернуть абсолютную ссылку, соответствующую указанному представлению, как это делает :ttag:`url`, Django предоставляет следующую функцию:"

# c7d9a6d46849429dab74aea6af91d76f
#: ../../ref/urlresolvers.txt:15
msgid "``viewname`` is either the function name (either a function reference, or the string version of the name, if you used that form in ``urlpatterns``) or the :ref:`URL pattern name <naming-url-patterns>`.  Normally, you won't need to worry about the ``urlconf`` parameter and will only pass in the positional and keyword arguments to use in the URL matching. For example::"
msgstr "``viewname`` это любое имя функции (либо ссылка на саму функцию, либо на её строковое представление, если вы используете их в ``urlpatterns``) или :ref:`именованный URL шаблон  <naming-url-patterns>`. По-хорошему, вы не должны волноваться о параметрах ``urlconf``, вам лишь нужно указать позиционные и именованные агрументы для получения соответствия. Например:"

# dd14332dd8424c1580a9186a0c3e3e70
#: ../../ref/urlresolvers.txt:26
msgid "The ``reverse()`` function can reverse a large variety of regular expression patterns for URLs, but not every possible one. The main restriction at the moment is that the pattern cannot contain alternative choices using the vertical bar (``\"|\"``) character. You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns."
msgstr "Функция ``reverse()`` может предоставлять достаточно большое количество шаблонов регулярных выражений, но не все из возможных. На данный момент шаблон не предоставляет возможности альтернативного использования символа вертикальной черты (``\"|\"``). You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns."

# 418870914fd8429f9bb99500102b3a5b
#: ../../ref/urlresolvers.txt:33
msgid "The ``current_app`` argument allows you to provide a hint to the resolver indicating the application to which the currently executing view belongs. This ``current_app`` argument is used as a hint to resolve application namespaces into URLs on specific application instances, according to the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>`."
msgstr "Аругмент ``current_app`` позволит вам получить полный путь к текущей странице. Он возвращает текущий экземпляр приложения из указанного :ref:`пространства имён <topics-http-reversing-url-namespaces>`."

# 42c799381159485fb511c9dae85b410f
#: ../../ref/urlresolvers.txt:39
msgid "You can use ``kwargs`` instead of ``args``. For example::"
msgstr "Вы можете использовать ``kwargs`` (словари)  вместо ``args`` (отдельных аргументов). Например:"

# a6c4f765a5f441b58617228c9df9a83a
#: ../../ref/urlresolvers.txt:44
msgid "``args`` and ``kwargs`` cannot be passed to ``reverse()`` at the same time."
msgstr "``args`` и ``kwargs`` не могут быть переданы функции ``reverse()`` вместе, они используются по отдельности."

# 74825a44d81a4683a1f67f1000e7417c
#: ../../ref/urlresolvers.txt:48
msgid "As part of working out which URL names map to which patterns, the ``reverse()`` function has to import all of your URLconf files and examine the name of each view. This involves importing each view function. If there are *any* errors whilst importing any of your view functions, it will cause ``reverse()`` to raise an error, even if that view function is not the one you are trying to reverse."
msgstr ""

# 522f8622e08846a48d116e2c66fa21c5
#: ../../ref/urlresolvers.txt:55
msgid "Make sure that any views you reference in your URLconf files exist and can be imported correctly. Do not include lines that reference views you haven't written yet, because those views will not be importable."
msgstr "Убедитесь, что представления, указанные в ваших файлах URLconf действительно существуют и могут быть правильно импортированы. Не включайте строки, которые ссылаются на ещё не написанные представления, поскольку эти представления импортированы не будут."

# a390aa00ec724a2b981c81c1ac022a42
#: ../../ref/urlresolvers.txt:61
msgid "The string returned by ``reverse()`` is already :ref:`urlquoted <uri-and-iri-handling>`. For example::"
msgstr "Строка, которую возвращает ``reverse()``, уже кодирована. Чтобы узнать об этом подробнее смотрите :ref:`urlquoted <uri-and-iri-handling>`. Пример::"

# 3f296e11736f477c80b1f3ff285529c6
#: ../../ref/urlresolvers.txt:67
msgid "Applying further encoding (such as :meth:`~django.utils.http.urlquote` or ``urllib.quote``) to the output of ``reverse()`` may produce undesirable results."
msgstr "Кроме того, нужно иметь ввиду, что применение кодирования символов (такое как :meth:`~django.utils.http.urlquote` или ``urllib.quote``) при выводе с ``reverse()`` может привести к нежелательным последствиям."

# 999bb333ecd84bda8f511953b3ea8815
#: ../../ref/urlresolvers.txt:72
msgid "reverse_lazy()"
msgstr "reverse_lazy()"

# 1e48935b8dca4f07ad4916bbe36d53c9
#: ../../ref/urlresolvers.txt:76
msgid "A lazily evaluated version of `reverse()`_."
msgstr ""

# be98303040dd4000a6d647ff26dc10c4
#: ../../ref/urlresolvers.txt:80
msgid "It is useful for when you need to use a URL reversal before your project's URLConf is loaded. Some common cases where this function is necessary are:"
msgstr "Это может быть полезным в случае, если вам нужно вернуть URL прежде, чем ваши настройки URLConf будут загружены. Перечислим несколько случаев, когда эта функция бывает необходима:"

# a46e6af7c7dd41358eb69523c8ab7645
#: ../../ref/urlresolvers.txt:83
msgid "providing a reversed URL as the ``url`` attribute of a generic class-based view."
msgstr "возврат URL как ``url`` атрибута для представления базовых классов."

# d2cd971cdba94381afc1344583f70787
#: ../../ref/urlresolvers.txt:86
msgid "providing a reversed URL to a decorator (such as the ``login_url`` argument for the :func:`django.contrib.auth.decorators.permission_required` decorator)."
msgstr "возврат URL как декоратора (такого как ``login_url`` для :func:`django.contrib.auth.decorators.permission_required` decorator)."

# 2657ed77df4346128fb4ccb76bf950e4
#: ../../ref/urlresolvers.txt:90
msgid "providing a reversed URL as a default value for a parameter in a function's signature."
msgstr ""

# 18ddc5a7a4e34c5a9c64c3209701ed01
#: ../../ref/urlresolvers.txt:94
msgid "resolve()"
msgstr "resolve()"

# 48a81ce420ec4c9bb127dc931431a3ef
#: ../../ref/urlresolvers.txt:96
msgid "The ``resolve()`` function can be used for resolving URL paths to the corresponding view functions. It has the following signature:"
msgstr ""

# 7a041c888da54aa4952e7d9c719ad026
#: ../../ref/urlresolvers.txt:101
msgid "``path`` is the URL path you want to resolve. As with :func:`~django.core.urlresolvers.reverse`, you don't need to worry about the ``urlconf`` parameter. The function returns a :class:`ResolverMatch` object that allows you to access various meta-data about the resolved URL."
msgstr ""

# da481aacf5b54cf18321712c5030fd5b
#: ../../ref/urlresolvers.txt:107
msgid "If the URL does not resolve, the function raises an :class:`~django.http.Http404` exception."
msgstr ""

# cb0a8aa4bb784bc98bbe05f9954163a0
#: ../../ref/urlresolvers.txt:114
msgid "The view function that would be used to serve the URL"
msgstr ""

# 2b303376a73941f29a47a910c14c4084
#: ../../ref/urlresolvers.txt:118
msgid "The arguments that would be passed to the view function, as parsed from the URL."
msgstr ""

# 15782232bf4c4e05883458ca7c336bc7
#: ../../ref/urlresolvers.txt:123
msgid "The keyword arguments that would be passed to the view function, as parsed from the URL."
msgstr ""

# db52f6149fe84480bd0ae5bc2d378529
#: ../../ref/urlresolvers.txt:128
msgid "The name of the URL pattern that matches the URL."
msgstr ""

# 6c93d233044f43ddb389702e683b7638
#: ../../ref/urlresolvers.txt:132
msgid "The application namespace for the URL pattern that matches the URL."
msgstr ""

# 608101eac69e4f4f9a30c5f4dd4b1ccd
#: ../../ref/urlresolvers.txt:137
msgid "The instance namespace for the URL pattern that matches the URL."
msgstr ""

# 3d5817e0f4194bbf86d8b12e17b242b9
#: ../../ref/urlresolvers.txt:142
msgid "The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is ``foo:bar``, then namespaces will be ``['foo', 'bar']``."
msgstr ""

# d991ec1044be4754abf95828acbf13b3
#: ../../ref/urlresolvers.txt:147
msgid "A :class:`ResolverMatch` object can then be interrogated to provide information about the URL pattern that matches a URL::"
msgstr ""

# 347f69761b35426e8ddde903813004fc
#: ../../ref/urlresolvers.txt:155
msgid "A :class:`ResolverMatch` object can also be assigned to a triple::"
msgstr ""

# 4aea0e9f7abe41e88178c138b3a62c97
#: ../../ref/urlresolvers.txt:159
msgid "One possible use of :func:`~django.core.urlresolvers.resolve` would be to test whether a view would raise a ``Http404`` error before redirecting to it::"
msgstr ""

# 5b458dccb3f442d68145b1f0746cbb91
#: ../../ref/urlresolvers.txt:182
msgid "get_script_prefix()"
msgstr "get_script_prefix()"

# bc056e1c489844b2b16694cb171d4f8b
#: ../../ref/urlresolvers.txt:186
msgid "Normally, you should always use :func:`~django.core.urlresolvers.reverse` to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its Web server (normally, :func:`~django.core.urlresolvers.reverse` takes care of this for you). In that case, you can call ``get_script_prefix()``, which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its web server, this is always ``\"/\"``."
msgstr ""

