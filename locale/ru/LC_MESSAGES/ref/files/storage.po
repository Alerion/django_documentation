# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 9e5bd67f33364020a89517e7ecfb9e72
#: ../../ref/files/storage.txt:3
msgid "File storage API"
msgstr ""

# 821ab12ac90b417d9b98ea05fab57ca5
#: ../../ref/files/storage.txt:8
msgid "Getting the current storage class"
msgstr ""

# 85a397cca98f4441a32bdc47407b4282
#: ../../ref/files/storage.txt:10
msgid ""
"Django provides two convenient ways to access the current storage class:"
msgstr ""

# 4ef32c95b4a1446abf1e367ab5035524
#: ../../ref/files/storage.txt:14
msgid ""
":class:`~django.core.files.storage.DefaultStorage` provides lazy access to "
"the current default storage system as defined by :setting:"
"`DEFAULT_FILE_STORAGE`. :class:`DefaultStorage` uses :func:`~django.core."
"files.storage.get_storage_class` internally."
msgstr ""

# d9f3e092a59e4c70b59807f3460397d3
#: ../../ref/files/storage.txt:21
msgid "Returns a class or module which implements the storage API."
msgstr ""

# 1e8a8be4de894d4c86f06e8d3b9756db
#: ../../ref/files/storage.txt:23
msgid ""
"When called without the ``import_path`` parameter ``get_storage_class`` will "
"return the current default storage system as defined by :setting:"
"`DEFAULT_FILE_STORAGE`. If ``import_path`` is provided, "
"``get_storage_class`` will attempt to import the class or module from the "
"given path and will return it if successful. An exception will be raised if "
"the import is unsuccessful."
msgstr ""

#: ../../ref/files/storage.txt:31
msgid "The ``FileSystemStorage`` class"
msgstr ""

# 7b05f629dc91455ea64ae4a127dc0624
#: ../../ref/files/storage.txt:35
msgid ""
"The :class:`~django.core.files.storage.FileSystemStorage` class implements "
"basic file storage on a local filesystem. It inherits from :class:`~django."
"core.files.storage.Storage` and provides implementations for all the public "
"methods thereof."
msgstr ""

# 9952ad55a6c1495cac9a663d2d56c5dc
#: ../../ref/files/storage.txt:42
msgid ""
"Absolute path to the directory that will hold the files. Defaults to the "
"value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

# a5c28c10dd444eb3b76eb31384086590
#: ../../ref/files/storage.txt:47
msgid ""
"URL that serves the files stored at this location. Defaults to the value of "
"your :setting:`MEDIA_URL` setting."
msgstr ""

# 54caee9fe7ec463981166db33820441c
#: ../../ref/files/storage.txt:52
msgid ""
"The file system permissions that the file will receive when it is saved. "
"Defaults to :setting:`FILE_UPLOAD_PERMISSIONS`."
msgstr ""

# 39134719a778406a8237e7c9c2f9a28a
#: ../../ref/files/storage.txt:57
msgid ""
"The file system permissions that the directory will receive when it is "
"saved. Defaults to :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`."
msgstr ""

# 49e7431f120f4109bc0da57ed9f6bfa5
#: ../../ref/files/storage.txt:62
msgid ""
"The ``FileSystemStorage.delete()`` method will not raise an exception if the "
"given file name does not exist."
msgstr ""

#: ../../ref/files/storage.txt:67
msgid ""
"Returns a :class:`~datetime.datetime` of the system's ctime, i.e. :func:`os."
"path.getctime`. On some systems (like Unix), this is the time of the last "
"metadata change, and on others (like Windows), it's the creation time of the "
"file."
msgstr ""

#: ../../ref/files/storage.txt:73
msgid "The ``Storage`` class"
msgstr ""

# cc5de11b2b314fa392d1bdc2117fc0c0
#: ../../ref/files/storage.txt:77
msgid ""
"The :class:`~django.core.files.storage.Storage` class provides a "
"standardized API for storing files, along with a set of default behaviors "
"that all other storage systems can inherit or override as necessary."
msgstr ""

#: ../../ref/files/storage.txt:83
msgid ""
"When methods return naive ``datetime`` objects, the effective timezone used "
"will be the current value of ``os.environ['TZ']``; note that this is usually "
"set from Django's :setting:`TIME_ZONE`."
msgstr ""

# a0aba45535e440e6bc098f4e0e14c188
#: ../../ref/files/storage.txt:89
msgid ""
"Deletes the file referenced by ``name``. If deletion is not supported on the "
"target storage system this will raise ``NotImplementedError`` instead"
msgstr ""

# bb5049b4f75f4c12a190b5c1a1bae831
#: ../../ref/files/storage.txt:95
msgid ""
"Returns ``True`` if a file referenced by the given name already exists in "
"the storage system, or ``False`` if the name is available for a new file."
msgstr ""

#: ../../ref/files/storage.txt:101
msgid ""
"Returns a :class:`~datetime.datetime` of the last accessed time of the file. "
"For storage systems unable to return the last accessed time this will raise :"
"exc:`NotImplementedError`."
msgstr ""

#: ../../ref/files/storage.txt:105 ../../ref/files/storage.txt:129
#: ../../ref/files/storage.txt:138
msgid ""
"If :setting:`USE_TZ` is ``True``, returns an aware ``datetime``, otherwise "
"returns a naive ``datetime`` in the local timezone."
msgstr ""

# ac6f60e01c49413dbaa8836c7ec212d7
#: ../../ref/files/storage.txt:110
msgid ""
"Returns a filename based on the ``name`` parameter that's free and available "
"for new content to be written to on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:114
msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a "
"free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception will be raised."
msgstr ""

# 3168d66ef85f497a872ecd22f6a2ad1d
#: ../../ref/files/storage.txt:119
msgid ""
"If a file with ``name`` already exists, an underscore plus a random 7 "
"character alphanumeric string is appended to the filename before the "
"extension."
msgstr ""

#: ../../ref/files/storage.txt:125
msgid ""
"Returns a :class:`~datetime.datetime` of the creation time of the file. For "
"storage systems unable to return the creation time this will raise :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../ref/files/storage.txt:134
msgid ""
"Returns a :class:`~datetime.datetime` of the last modified time of the file. "
"For storage systems unable to return the last modified time this will raise :"
"exc:`NotImplementedError`."
msgstr ""

# c43bfd7e172b46a2962f8bb3116fab65
#: ../../ref/files/storage.txt:143
msgid ""
"Returns a filename based on the ``name`` parameter that's suitable for use "
"on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:148
msgid ""
"Validates the ``filename`` by calling :attr:`get_valid_name()` and returns a "
"filename to be passed to the :meth:`save` method."
msgstr ""

#: ../../ref/files/storage.txt:151
msgid ""
"The ``filename`` argument may include a path as returned by :attr:`FileField."
"upload_to <django.db.models.FileField.upload_to>`. In that case, the path "
"won't be passed to :attr:`get_valid_name()` but will be prepended back to "
"the resulting name."
msgstr ""

#: ../../ref/files/storage.txt:156
msgid ""
"The default implementation uses :mod:`os.path` operations. Override this "
"method if that's not appropriate for your storage."
msgstr ""

# faa21e69f2f1452db538f72d142fea81
#: ../../ref/files/storage.txt:161
msgid ""
"Lists the contents of the specified path, returning a 2-tuple of lists; the "
"first item being directories, the second item being files. For storage "
"systems that aren't able to provide such a listing, this will raise a "
"``NotImplementedError`` instead."
msgstr ""

# 3301c808925641408e9062dec892b83b
#: ../../ref/files/storage.txt:168
msgid ""
"Opens the file given by ``name``. Note that although the returned file is "
"guaranteed to be a ``File`` object, it might actually be some subclass. In "
"the case of remote file storage this means that reading/writing could be "
"quite slow, so be warned."
msgstr ""

# 45ca31f8dba14502b48002b7f72f12f8
#: ../../ref/files/storage.txt:175
msgid ""
"The local filesystem path where the file can be opened using Python's "
"standard ``open()``. For storage systems that aren't accessible from the "
"local filesystem, this will raise ``NotImplementedError`` instead."
msgstr ""

# 10a1d671129048bb84d1857d3b050502
#: ../../ref/files/storage.txt:181
msgid ""
"Saves a new file using the storage system, preferably with the name "
"specified. If there already exists a file with this name ``name``, the "
"storage system may modify the filename as necessary to get a unique name. "
"The actual name of the stored file will be returned."
msgstr ""

#: ../../ref/files/storage.txt:186
msgid ""
"The ``max_length`` argument is passed along to :meth:`get_available_name`."
msgstr ""

#: ../../ref/files/storage.txt:189
msgid ""
"The ``content`` argument must be an instance of :class:`django.core.files."
"File` or a file-like object that can be wrapped in ``File``."
msgstr ""

# 41d28d8e100c4dc5ac00a2e85c7295b8
#: ../../ref/files/storage.txt:195
msgid ""
"Returns the total size, in bytes, of the file referenced by ``name``. For "
"storage systems that aren't able to return the file size this will raise "
"``NotImplementedError`` instead."
msgstr ""

# 1d556884b2394bb9b38fd77f3fed237f
#: ../../ref/files/storage.txt:201
msgid ""
"Returns the URL where the contents of the file referenced by ``name`` can be "
"accessed. For storage systems that don't support access by URL this will "
"raise ``NotImplementedError`` instead."
msgstr ""
