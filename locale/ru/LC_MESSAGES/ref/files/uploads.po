# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 320dde08df9b443386e02d8d22383299
#: ../../ref/files/uploads.txt:3
msgid "Uploaded Files and Upload Handlers"
msgstr ""

# 14c0721e44e44b6d989c9f6dd5407179
#: ../../ref/files/uploads.txt:9
msgid "Uploaded files"
msgstr ""

#: ../../ref/files/uploads.txt:13
msgid ""
"During file uploads, the actual file data is stored in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`. Each entry in this dictionary is an "
"``UploadedFile`` object (or a subclass) -- a wrapper around an uploaded "
"file. You'll usually use one of these methods to access the uploaded content:"
msgstr ""

# 6f7c8af8031a496d9a7e4ea10615aea1
#: ../../ref/files/uploads.txt:20
msgid ""
"Read the entire uploaded data from the file. Be careful with this method: if "
"the uploaded file is huge it can overwhelm your system if you try to read it "
"into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""

# 2c851c3503924e2a87a3fc3e0fa1bb10
#: ../../ref/files/uploads.txt:27
msgid ""
"Returns ``True`` if the uploaded file is big enough to require reading in "
"multiple chunks. By default this will be any file larger than 2.5 megabytes, "
"but that's configurable; see below."
msgstr ""

# 335d4dfbcd084d2d909270b2c6370b11
#: ../../ref/files/uploads.txt:33
msgid ""
"A generator returning chunks of the file. If ``multiple_chunks()`` is "
"``True``, you should use this method in a loop instead of ``read()``."
msgstr ""

#: ../../ref/files/uploads.txt:36
msgid ""
"In practice, it's often easiest to use ``chunks()`` all the time. Looping "
"over ``chunks()`` instead of using ``read()`` ensures that large files don't "
"overwhelm your system's memory."
msgstr ""

# 76cccce5f195418589763a017e3108b3
#: ../../ref/files/uploads.txt:40
msgid "Here are some useful attributes of ``UploadedFile``:"
msgstr ""

# 41257fc1c7f349c89c1100ac1d8f1c11
#: ../../ref/files/uploads.txt:44
msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr ""

# a19ab146cb5a48ee9c08e7ba23812184
#: ../../ref/files/uploads.txt:48
msgid "The size, in bytes, of the uploaded file."
msgstr ""

# 80c99d1028254c509be259d6f39aeb21
#: ../../ref/files/uploads.txt:52
msgid ""
"The content-type header uploaded with the file (e.g. :mimetype:`text/plain` "
"or :mimetype:`application/pdf`). Like any data supplied by the user, you "
"shouldn't trust that the uploaded file is actually this type. You'll still "
"need to validate that the file contains the content that the content-type "
"header claims -- \"trust but verify.\""
msgstr ""

# 103b19bde8174798b8c39b469315df78
#: ../../ref/files/uploads.txt:60
msgid ""
"A dictionary containing extra parameters passed to the ``content-type`` "
"header. This is typically provided by services, such as Google App Engine, "
"that intercept and handle file uploads on your behalf. As a result your "
"handler may not receive the uploaded file content, but instead a URL or "
"other pointer to the file. (see `RFC 2388`_ section 5.3)."
msgstr ""

# 1b0a143b072d465e9caecefb6a0328b4
#: ../../ref/files/uploads.txt:70
msgid ""
"For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) "
"supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""

#: ../../ref/files/uploads.txt:75
msgid ""
"Like regular Python files, you can read the file line-by-line by iterating "
"over the uploaded file::"
msgstr ""

#: ../../ref/files/uploads.txt:81
msgid ""
"Lines are split using `universal newlines`_. The following are recognized as "
"ending a line: the Unix end-of-line convention ``'\\n'``, the Windows "
"convention ``'\\r\\n'``, and the old Macintosh convention ``'\\r'``."
msgstr ""

# 02eb9bba4d2142008d06fa4defe8475b
#: ../../ref/files/uploads.txt:87
msgid "Subclasses of ``UploadedFile`` include:"
msgstr ""

# dbbd8cd26db14603a277ba8b71415270
#: ../../ref/files/uploads.txt:91
msgid ""
"A file uploaded to a temporary location (i.e. stream-to-disk). This class is "
"used by the :class:`~django.core.files.uploadhandler."
"TemporaryFileUploadHandler`. In addition to the methods from :class:"
"`UploadedFile`, it has one additional method:"
msgstr ""

# a0ccc4d4ff0e42e387265b87b2a0719c
#: ../../ref/files/uploads.txt:99
msgid "Returns the full path to the temporary uploaded file."
msgstr ""

# c0ab7cc1c1c449789a8de6c7957f7dd8
#: ../../ref/files/uploads.txt:103
msgid ""
"A file uploaded into memory (i.e. stream-to-memory). This class is used by "
"the :class:`~django.core.files.uploadhandler.MemoryFileUploadHandler`."
msgstr ""

#: ../../ref/files/uploads.txt:107
msgid "Built-in upload handlers"
msgstr ""

# daef4492e8c24bf9b1933b8f7ba02de3
#: ../../ref/files/uploads.txt:112
msgid ""
"Together the :class:`MemoryFileUploadHandler` and :class:"
"`TemporaryFileUploadHandler` provide Django's default file upload behavior "
"of reading small files into memory and large ones onto disk. They are "
"located in ``django.core.files.uploadhandler``."
msgstr ""

# c325f0ad44e3405daa1b4ea18520fba4
#: ../../ref/files/uploads.txt:119
msgid ""
"File upload handler to stream uploads into memory (used for small files)."
msgstr ""

# acf99fb4172746bf892450d1081e147f
#: ../../ref/files/uploads.txt:123
msgid ""
"Upload handler that streams data into a temporary file using :class:`~django."
"core.files.uploadedfile.TemporaryUploadedFile`."
msgstr ""

# 1e0fe95f42d848e3b98a2703bdede5b5
#: ../../ref/files/uploads.txt:129
msgid "Writing custom upload handlers"
msgstr ""

# ee680221c8dd43f58ee725f866d90593
#: ../../ref/files/uploads.txt:133
msgid ""
"All file upload handlers should be subclasses of ``django.core.files."
"uploadhandler.FileUploadHandler``. You can define upload handlers wherever "
"you wish."
msgstr ""

# 2a3b295874d942008eec1d58b9b237f7
#: ../../ref/files/uploads.txt:138
msgid "Required methods"
msgstr ""

# 00eb9be3aa634da7a9f10a61e05b07cf
#: ../../ref/files/uploads.txt:140
msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""

# 46863a083e71471499551162715c64ac
#: ../../ref/files/uploads.txt:144
msgid "Receives a \"chunk\" of data from the file upload."
msgstr ""

#: ../../ref/files/uploads.txt:146
msgid "``raw_data`` is a bytestring containing the uploaded data."
msgstr ""

# 9d134c2018b848d1996f9b155af948a3
#: ../../ref/files/uploads.txt:148
msgid ""
"``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""

# 19321d1244b342e7a53c6bdc5d51400a
#: ../../ref/files/uploads.txt:151
msgid ""
"The data you return will get fed into the subsequent upload handlers' "
"``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" "
"for other handlers."
msgstr ""

# 3f052effb5bc46e0ab3d50dcc8f6ef5e
#: ../../ref/files/uploads.txt:155
msgid ""
"Return ``None`` from ``receive_data_chunk`` to short-circuit remaining "
"upload handlers from getting this chunk. This is useful if you're storing "
"the uploaded data yourself and don't want future handlers to store a copy of "
"the data."
msgstr ""

# b80e41f5c90043a7a36d924a64bd8b6d
#: ../../ref/files/uploads.txt:160
msgid ""
"If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will "
"abort or the file will be completely skipped."
msgstr ""

# 24abda2780ea43c4a2096da48043703b
#: ../../ref/files/uploads.txt:165
msgid "Called when a file has finished uploading."
msgstr ""

# 55d62b6874624f32a3a224d55b6ef139
#: ../../ref/files/uploads.txt:167
msgid ""
"The handler should return an ``UploadedFile`` object that will be stored in "
"``request.FILES``. Handlers may also return ``None`` to indicate that the "
"``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""

# af0d54a53b4043678988ba7b7b7df1a0
#: ../../ref/files/uploads.txt:172
msgid "Optional methods"
msgstr ""

# ab9a6c48e00643db82044a196bb91a95
#: ../../ref/files/uploads.txt:174
msgid ""
"Custom upload handlers may also define any of the following optional methods "
"or attributes:"
msgstr ""

# 4224c2b43a3c4dcc992d75dc96d00ce3
#: ../../ref/files/uploads.txt:179
msgid ""
"Size, in bytes, of the \"chunks\" Django should store into memory and feed "
"into the handler. That is, this attribute controls the size of chunks fed "
"into ``FileUploadHandler.receive_data_chunk``."
msgstr ""

# fe5ac31abd114b2c81c5df1747479e28
#: ../../ref/files/uploads.txt:183
msgid ""
"For maximum performance the chunk sizes should be divisible by ``4`` and "
"should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are "
"multiple chunk sizes provided by multiple handlers, Django will use the "
"smallest chunk size defined by any handler."
msgstr ""

# de26dba4f0b64981b55b39fd1aeaee6f
#: ../../ref/files/uploads.txt:188
msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr ""

# 5cda2aee0b4a4809a32cfed9c512116a
#: ../../ref/files/uploads.txt:192
msgid ""
"Callback signaling that a new file upload is starting. This is called before "
"any data has been fed to any upload handlers."
msgstr ""

# 2b76e8f3e74e47e8bddc27482423fbda
#: ../../ref/files/uploads.txt:195
msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr ""

#: ../../ref/files/uploads.txt:197
msgid "``file_name`` is the filename provided by the browser."
msgstr ""

# 2f703a15ca894d469020b48ed300a580
#: ../../ref/files/uploads.txt:199
msgid ""
"``content_type`` is the MIME type provided by the browser -- E.g. ``'image/"
"jpeg'``."
msgstr ""

# 6babddba5bfc403485173e46b7677647
#: ../../ref/files/uploads.txt:202
msgid ""
"``content_length`` is the length of the image given by the browser. "
"Sometimes this won't be provided and will be ``None``."
msgstr ""

# 81c0744eea9448938a9e27906afa88f9
#: ../../ref/files/uploads.txt:205
msgid ""
"``charset`` is the character set (i.e. ``utf8``) given by the browser. Like "
"``content_length``, this sometimes won't be provided."
msgstr ""

# 25d660728a5c4b898d2da4837f8f1a02
#: ../../ref/files/uploads.txt:208
msgid ""
"``content_type_extra`` is extra information about the file from the "
"``content-type`` header. See :attr:`UploadedFile.content_type_extra <django."
"core.files.uploadedfile.UploadedFile.content_type_extra>`."
msgstr ""

# a3aa35e7364f425788fd11a9aa0f4231
#: ../../ref/files/uploads.txt:212
msgid ""
"This method may raise a ``StopFutureHandlers`` exception to prevent future "
"handlers from handling this file."
msgstr ""

# e012046faa38421faec78aedeb060ffe
#: ../../ref/files/uploads.txt:217
msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""

# df7d38a65bd2478f84c4af355bc6f76e
#: ../../ref/files/uploads.txt:221
msgid ""
"Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""

# 59738999ca0143ce8137cd6d73167b97
#: ../../ref/files/uploads.txt:224
msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""

# dd042871a1134e90a88de898c042fbc3
#: ../../ref/files/uploads.txt:226
msgid "``META`` is the same object as ``request.META``."
msgstr ""

# 99885ed9a9284da0b5077146519f2768
#: ../../ref/files/uploads.txt:228
msgid ""
"``content_length`` is the length of the data in ``input_data``. Don't read "
"more than ``content_length`` bytes from ``input_data``."
msgstr ""

# bea7b918657849608833cc6f25e15e7f
#: ../../ref/files/uploads.txt:231
msgid "``boundary`` is the MIME boundary for this request."
msgstr ""

# 87a3bbb036ff4938a411ff1a510e7f6c
#: ../../ref/files/uploads.txt:233
msgid "``encoding`` is the encoding of the request."
msgstr ""

# 17777d1a5be7473390a7c0dd02af2b8d
#: ../../ref/files/uploads.txt:235
msgid ""
"Return ``None`` if you want upload handling to continue, or a tuple of "
"``(POST, FILES)`` if you want to return the new data structures suitable for "
"the request directly."
msgstr ""
