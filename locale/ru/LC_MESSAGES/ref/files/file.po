# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 97aa0f47859c4f0caccf163b3b670dcf
#: ../../ref/files/file.txt:3
msgid "The ``File`` object"
msgstr ""

# de4003dee91c4b9ab8b1245a33485635
#: ../../ref/files/file.txt:5
msgid ""
"The :mod:`django.core.files` module and its submodules contain built-in "
"classes for basic file handling in Django."
msgstr ""

#: ../../ref/files/file.txt:11
msgid "The ``File`` class"
msgstr ""

# 29a10825a6ee48e5a4f6ac8efdfbaa2b
#: ../../ref/files/file.txt:15
msgid ""
"The :class:`File` class is a thin wrapper around a Python :py:term:`file "
"object` with some Django-specific additions. Internally, Django uses this "
"class when it needs to represent a file."
msgstr ""

# 0cf27fd9aba9491c8449e271598e155f
#: ../../ref/files/file.txt:19
msgid ":class:`File` objects have the following attributes and methods:"
msgstr ""

# b15206bc65a94d55be70a15ef305609f
#: ../../ref/files/file.txt:23
msgid ""
"The name of the file including the relative path from :setting:`MEDIA_ROOT`."
msgstr ""

# ed4ab025c48e465187bb0a7831a046dc
#: ../../ref/files/file.txt:28
msgid "The size of the file in bytes."
msgstr ""

# d44060ce08a545fb8f29873e25598591
#: ../../ref/files/file.txt:32
msgid "The underlying :py:term:`file object` that this class wraps."
msgstr ""

#: ../../ref/files/file.txt:34
msgid "Be careful with this attribute in subclasses."
msgstr ""

#: ../../ref/files/file.txt:36
msgid ""
"Some subclasses of :class:`File`, including :class:`~django.core.files.base."
"ContentFile` and :class:`~django.db.models.fields.files.FieldFile`, may "
"replace this attribute with an object other than a Python :py:term:`file "
"object`. In these cases, this attribute may itself be a :class:`File` "
"subclass (and not necessarily the same subclass). Whenever possible, use the "
"attributes and methods of the subclass itself rather than the those of the "
"subclass's ``file`` attribute."
msgstr ""

# 1cbb2c96e06d44e289963d9d706bf555
#: ../../ref/files/file.txt:47
msgid "The read/write mode for the file."
msgstr ""

# c3f87b76315c4e76b42c8bc29b153064
#: ../../ref/files/file.txt:51
msgid ""
"Open or reopen the file (which also does ``File.seek(0)``). The ``mode`` "
"argument allows the same values as Python's built-in :func:`python:open()`."
msgstr ""

# dccc9c5b9c23440ab8db01ca9432f307
#: ../../ref/files/file.txt:55
msgid ""
"When reopening a file, ``mode`` will override whatever mode the file was "
"originally opened with; ``None`` means to reopen with the original mode."
msgstr ""

# 1207179b113543459b138919ba3a28f8
#: ../../ref/files/file.txt:61
msgid ""
"Read content from the file. The optional ``size`` is the number of bytes to "
"read; if not specified, the file will be read to the end."
msgstr ""

# bd2e2b143edc42db9216090b78189131
#: ../../ref/files/file.txt:66
msgid "Iterate over the file yielding one line at a time."
msgstr ""

# 0cde4f467e2b4daba1de7ac97f4b855e
#: ../../ref/files/file.txt:70
msgid ""
"Iterate over the file yielding \"chunks\" of a given size. ``chunk_size`` "
"defaults to 64 KB."
msgstr ""

# bafa9fd27f43477fa40ce924ca5209f0
#: ../../ref/files/file.txt:73
msgid ""
"This is especially useful with very large files since it allows them to be "
"streamed off disk and avoids storing the whole file in memory."
msgstr ""

# 52ce9238161647b3880e381d6c07d5c5
#: ../../ref/files/file.txt:78
msgid ""
"Returns ``True`` if the file is large enough to require multiple chunks to "
"access all of its content give some ``chunk_size``."
msgstr ""

# fe5057c908714ec0be2c4d2e0ab334be
#: ../../ref/files/file.txt:83
msgid ""
"Writes the specified content string to the file. Depending on the storage "
"system behind the scenes, this content might not be fully committed until :"
"func:`close()` is called on the file."
msgstr ""

# 5ec8ac699bdf45fa8a9835b79742037b
#: ../../ref/files/file.txt:89
msgid "Close the file."
msgstr ""

#: ../../ref/files/file.txt:91
msgid ""
"In addition to the listed methods, :class:`~django.core.files.File` exposes "
"the following attributes and methods of its ``file`` object: ``encoding``, "
"``fileno``, ``flush``, ``isatty``, ``newlines``, ``read``, ``readinto``, "
"``readlines``, ``seek``, ``softspace``, ``tell``, ``truncate``, "
"``writelines``, ``xreadlines``, ``readable()``, ``writable()``, and "
"``seekable()``."
msgstr ""

#: ../../ref/files/file.txt:100
msgid ""
"The ``readable()`` and ``writable()`` methods were added and the "
"``seekable()`` method was made available on Python 2."
msgstr ""

#: ../../ref/files/file.txt:106
msgid "The ``ContentFile`` class"
msgstr ""

# 02f36a786952480987050d75df6ecdf2
#: ../../ref/files/file.txt:110
msgid ""
"The ``ContentFile`` class inherits from :class:`~django.core.files.File`, "
"but unlike :class:`~django.core.files.File` it operates on string content "
"(bytes also supported), rather than an actual file. For example::"
msgstr ""

#: ../../ref/files/file.txt:123
msgid "The ``ImageFile`` class"
msgstr ""

# 546f720c4e944675975bc40a2dd4659f
#: ../../ref/files/file.txt:127
msgid ""
"Django provides a built-in class specifically for images. :class:`django."
"core.files.images.ImageFile` inherits all the attributes and methods of :"
"class:`~django.core.files.File`, and additionally provides the following:"
msgstr ""

# f5092054391c4c508dce2e1d18e617f8
#: ../../ref/files/file.txt:134
msgid "Width of the image in pixels."
msgstr ""

# dbfa0d8676114ebd96f701742938e33a
#: ../../ref/files/file.txt:138
msgid "Height of the image in pixels."
msgstr ""

# f07d5c26a9e84ab7b414b5cb6628e5e8
#: ../../ref/files/file.txt:143
msgid "Additional methods on files attached to objects"
msgstr ""

# 4ab6ad82ccc6410bbba349237f89ee76
#: ../../ref/files/file.txt:145
msgid ""
"Any :class:`File` that is associated with an object (as with ``Car.photo``, "
"below) will also have a couple of extra methods:"
msgstr ""

# eb4d143831a14e9fa721ae7dec108ff0
#: ../../ref/files/file.txt:150
msgid ""
"Saves a new file with the file name and contents provided. This will not "
"replace the existing file, but will create a new file and update the object "
"to point to it. If ``save`` is ``True``, the model's ``save()`` method will "
"be called once the file is saved. That is, these two lines::"
msgstr ""

# 21c914b14b184ec397d3b13deeb2e3a0
#: ../../ref/files/file.txt:158
msgid "are equivalent to::"
msgstr ""

# af12c185749341528bb96d32dae56f56
#: ../../ref/files/file.txt:162
msgid ""
"Note that the ``content`` argument must be an instance of either :class:"
"`File` or of a subclass of :class:`File`, such as :class:`~django.core.files."
"base.ContentFile`."
msgstr ""

# 2927e36e894346329de1bff1bc7b488f
#: ../../ref/files/file.txt:168
msgid ""
"Removes the file from the model instance and deletes the underlying file. If "
"``save`` is ``True``, the model's ``save()`` method will be called once the "
"file is deleted."
msgstr ""
