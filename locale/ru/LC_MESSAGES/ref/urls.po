# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 880e92cbd9834c9981803b2e693d5701
#: ../../ref/urls.txt:3
msgid "``django.conf.urls`` utility functions"
msgstr ""

#: ../../ref/urls.txt:8
msgid "``static()``"
msgstr ""

# 6d63b3307b0a428a88bb325154cc1757
#: ../../ref/urls.txt:12
msgid ""
"Helper function to return a URL pattern for serving files in debug mode::"
msgstr ""

#: ../../ref/urls.txt:22
msgid "``url()``"
msgstr ""

#: ../../ref/urls.txt:26
msgid "``urlpatterns`` should be a list of ``url()`` instances. For example::"
msgstr ""

#: ../../ref/urls.txt:36
msgid ""
"The ``regex`` parameter should be a string or :func:`~django.utils."
"translation.ugettext_lazy()` (see :ref:`translating-urlpatterns`) that "
"contains a regular expression compatible with Python's :py:mod:`re` module. "
"Strings typically use raw string syntax (``r''``) so that they can contain "
"sequences like ``\\d`` without the need to escape the backslash with another "
"backslash."
msgstr ""

#: ../../ref/urls.txt:43
msgid ""
"The ``view`` parameter is a view function or the result of :meth:`~django."
"views.generic.base.View.as_view` for class-based views. It can also be an :"
"func:`include`."
msgstr ""

# 9ee1112d2e1546b4809ef8da792ff3fe
#: ../../ref/urls.txt:47
msgid ""
"The ``kwargs`` parameter allows you to pass additional arguments to the view "
"function or method. See :ref:`views-extra-options` for an example."
msgstr ""

# a44f7a54fd314000951c43bccaeccbf5
#: ../../ref/urls.txt:50
msgid ""
"See :ref:`Naming URL patterns <naming-url-patterns>` for why the ``name`` "
"parameter is useful."
msgstr ""

#: ../../ref/urls.txt:54
msgid "``include()``"
msgstr ""

# c701938d62154578bb0412d1e72a3538
#: ../../ref/urls.txt:61
msgid ""
"A function that takes a full Python import path to another URLconf module "
"that should be \"included\" in this place. Optionally, the :term:"
"`application namespace` and :term:`instance namespace` where the entries "
"will be included into can also be specified."
msgstr ""

#: ../../ref/urls.txt:66
msgid ""
"Usually, the application namespace should be specified by the included "
"module. If an application namespace is set, the ``namespace`` argument can "
"be used to set a different instance namespace."
msgstr ""

#: ../../ref/urls.txt:70
msgid ""
"``include()`` also accepts as an argument either an iterable that returns "
"URL patterns, a 2-tuple containing such iterable plus the names of the "
"application namespaces, or a 3-tuple containing the iterable and the names "
"of both the application and instance namespace."
msgstr ""

# cde006ea4653493baf65e7b3f55bece7
#: ../../ref/urls.txt:75
msgid "URLconf module (or module name)"
msgstr ""

# fb9751ecc8b44e3f87a6832ae0e18d27
# d99c395c510744cea56b8adc6d320dd4
#: ../../ref/urls.txt:76 ../../ref/urls.txt:83
msgid "Instance namespace for the URL entries being included"
msgstr ""

# a87dd9affb6d4164a2ea3d71f318dd1f
# eeb1e53199124840a6a11c16308a7b6a
#: ../../ref/urls.txt:78 ../../ref/urls.txt:81
msgid "Application namespace for the URL entries being included"
msgstr ""

#: ../../ref/urls.txt:80
msgid "Iterable of :func:`django.conf.urls.url` instances"
msgstr ""

# b700f63ffec04fbc9e12638d153fbeae
#: ../../ref/urls.txt:86
msgid "See :ref:`including-other-urlconfs` and :ref:`namespaces-and-include`."
msgstr ""

#: ../../ref/urls.txt:90
msgid ""
"Support for the ``app_name`` argument is deprecated and will be removed in "
"Django 2.0. Specify the ``app_name`` as explained in :ref:`namespaces-and-"
"include` instead."
msgstr ""

#: ../../ref/urls.txt:94
msgid ""
"Support for passing a 3-tuple is also deprecated and will be removed in "
"Django 2.0. Pass a 2-tuple containing the pattern list and application "
"namespace, and use the ``namespace`` argument instead."
msgstr ""

#: ../../ref/urls.txt:98
msgid ""
"Lastly, support for an instance namespace without an application namespace "
"has been deprecated and will be removed in Django 2.0. Specify the "
"application namespace or remove the instance namespace."
msgstr ""

#: ../../ref/urls.txt:103
msgid "``handler400``"
msgstr ""

# 79e1d08e50ef4957a82037635c1bd700
#: ../../ref/urls.txt:107
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the HTTP client has sent a request that caused an "
"error condition and a response with a status code of 400."
msgstr ""

#: ../../ref/urls.txt:111
msgid ""
"By default, this is ``'django.views.defaults.bad_request'``. If you "
"implement a custom view, be sure it returns an :class:`~django.http."
"HttpResponseBadRequest`."
msgstr ""

# b5012ceb695c4785bd2c0ab1dee5af2c
#: ../../ref/urls.txt:115
msgid ""
"See the documentation about :ref:`the 400 (bad request) view "
"<http_bad_request_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:119
msgid "``handler403``"
msgstr ""

# a050a5eb51e641479d877f0ffe2f6f37
#: ../../ref/urls.txt:123
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the user doesn't have the permissions required to "
"access a resource."
msgstr ""

#: ../../ref/urls.txt:127
msgid ""
"By default, this is ``'django.views.defaults.permission_denied'``. If you "
"implement a custom view, be sure it returns an :class:`~django.http."
"HttpResponseForbidden`."
msgstr ""

# cf2c3c9704254b809c18df7a9eac2989
#: ../../ref/urls.txt:131
msgid ""
"See the documentation about :ref:`the 403 (HTTP Forbidden) view "
"<http_forbidden_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:135
msgid "``handler404``"
msgstr ""

# 2d0838524c2745b28e6c7be8a33dc5e7
#: ../../ref/urls.txt:139
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if none of the URL patterns match."
msgstr ""

#: ../../ref/urls.txt:142
msgid ""
"By default, this is ``'django.views.defaults.page_not_found'``. If you "
"implement a custom view, be sure it returns an :class:`~django.http."
"HttpResponseNotFound`."
msgstr ""

# 18665d5c354a4e76a9810f4960e28d69
#: ../../ref/urls.txt:146
msgid ""
"See the documentation about :ref:`the 404 (HTTP Not Found) view "
"<http_not_found_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:150
msgid "``handler500``"
msgstr ""

# 5a192794e2b14f28a212009b613e5f22
#: ../../ref/urls.txt:154
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called in case of server errors. Server errors happen when "
"you have runtime errors in view code."
msgstr ""

#: ../../ref/urls.txt:158
msgid ""
"By default, this is ``'django.views.defaults.server_error'``. If you "
"implement a custom view, be sure it returns an :class:`~django.http."
"HttpResponseServerError`."
msgstr ""

# 5d43d9f9571d4b759dc30e42e2cfa7e1
#: ../../ref/urls.txt:162
msgid ""
"See the documentation about :ref:`the 500 (HTTP Internal Server Error) view "
"<http_internal_server_error_view>` for more information."
msgstr ""
