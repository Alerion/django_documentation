# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2016-03-24 13:11+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# b2211400c769428586748d8dfba69719
#: ../../ref/request-response.txt:3
msgid "Request and response objects"
msgstr "Объекты ответа и запроса"

# d707a7dc7ed0492c89c6c8adc7bb05ea
#: ../../ref/request-response.txt:9
msgid "Quick overview"
msgstr "Быстрый обзор"

# ea2c0cde6f66467dac16fc9dd6acd8f0
#: ../../ref/request-response.txt:11
msgid ""
"Django uses request and response objects to pass state through the system."
msgstr ""
"Django использует объекты ответа и запроса, чтобы передавать состояние в "
"системе."

# 8606a7352091408aa2f742cbac6a3501
#: ../../ref/request-response.txt:13
msgid ""
"When a page is requested, Django creates an :class:`HttpRequest` object that "
"contains metadata about the request. Then Django loads the appropriate view, "
"passing the :class:`HttpRequest` as the first argument to the view function. "
"Each view is responsible for returning an :class:`HttpResponse` object."
msgstr ""
"Когда запрашивает страница, Django создает объект :class:`HttpRequest`, "
"который содержит различные данные о запросе. Потом Django определяет и "
"загружает необходимое представление и вызывает его передавая объект :class:"
"`HttpRequest` первым аргументом. Каждое представление должно вернуть объект :"
"class:`HttpResponse`."

# edd2d48f1d084b83a4a59ed999807a9e
#: ../../ref/request-response.txt:18
msgid ""
"This document explains the APIs for :class:`HttpRequest` and :class:"
"`HttpResponse` objects, which are defined in the :mod:`django.http` module."
msgstr ""
"Этот раздел описывает API объектов :class:`HttpRequest` и :class:"
"`HttpResponse`, которые определены в модуле :mod:`django.http`."

# dbb086d8d34d4c3ea8903f61ad6e1220
#: ../../ref/request-response.txt:23
#, fuzzy
msgid "``HttpRequest`` objects"
msgstr "Объект HttpRequest"

# 9b4dcb0a8ed34e46b0c5bfe8474fe5ba
# 9d903a8efd6b433f89a4010f994d4a82
# 7e3b5dd4a77341ca9528fa350f854720
#: ../../ref/request-response.txt:30 ../../ref/request-response.txt:683
#: ../../ref/request-response.txt:1048
msgid "Attributes"
msgstr "Атрибуты"

# 007f6bbef9dd4e46b599402cbe033e90
#: ../../ref/request-response.txt:32
msgid "All attributes should be considered read-only, unless stated otherwise."
msgstr ""
"Все атрибуты должны рассматриваться как неизменяемые, пока об обратном не "
"будет сказано явно."

# 9f3f098d3b064b3b8327240c1ca99b5c
#: ../../ref/request-response.txt:36
msgid ""
"A string representing the scheme of the request (``http`` or ``https`` "
"usually)."
msgstr "Строка, указывающая схему запроса (обычно ``http`` или ``https``)."

# 8f3565e3f242490f8a744ef81d736ecd
#: ../../ref/request-response.txt:41
msgid ""
"The raw HTTP request body as a byte string. This is useful for processing "
"data in different ways than conventional HTML forms: binary images, XML "
"payload etc. For processing conventional form data, use ``HttpRequest.POST``."
msgstr ""
"Тело запроса HTTP в байтовой строке. Он полезен для обработки данных "
"различными способами, а не только традиционной HTML формой: передача "
"изображений, загрузка XML и др. Для обработки данных обычной формы, "
"используйте ``HttpRequest.POST``."

# 06f3a60e6ed74c1083ac00d5a62d6f4a
#: ../../ref/request-response.txt:45
msgid ""
"You can also read from an HttpRequest using a file-like interface. See :meth:"
"`HttpRequest.read()`."
msgstr ""
"Вы также можете читать с объекта ``HttpRequest`` используя интерфейс чтения "
"с файла. Смотрите :meth:`HttpRequest.read()`."

# 9f3f098d3b064b3b8327240c1ca99b5c
#: ../../ref/request-response.txt:50
msgid ""
"A string representing the full path to the requested page, not including the "
"scheme or domain."
msgstr "Содержит полный путь к запрашиваемой странице, не включая домен."

# 0c6d1bd7e2624472a0c099aed4eb62c3
#: ../../ref/request-response.txt:53
msgid "Example: ``\"/music/bands/the_beatles/\"``"
msgstr "Например: ``\"/music/bands/the_beatles/\"``"

# 0b9a857a4c2b4a25ae1583ec8d2c5633
#: ../../ref/request-response.txt:57
msgid ""
"Under some Web server configurations, the portion of the URL after the host "
"name is split up into a script prefix portion and a path info portion. The "
"``path_info`` attribute always contains the path info portion of the path, "
"no matter what Web server is being used. Using this instead of :attr:"
"`~HttpRequest.path` can make your code easier to move between test and "
"deployment servers."
msgstr ""
"Для некоторых конфигурация сервера, часть URL-а после названия домена "
"содержит префикс скрипта и \"полезную\" часть пути(path info portion). "
"Атрибут ``path_info`` всегда содержит часть URL-а, которую использует "
"Django, не зависимо от сервера . Использование этого атрибута вместо :attr:"
"`~HttpRequest.path` сделает ваш код более надежным и независимым от настроек "
"сервера."

# 5a2afdd5620c4daeb2e332b25e485e6d
#: ../../ref/request-response.txt:64
msgid ""
"For example, if the ``WSGIScriptAlias`` for your application is set to ``\"/"
"minfo\"``, then ``path`` might be ``\"/minfo/music/bands/the_beatles/\"`` "
"and ``path_info`` would be ``\"/music/bands/the_beatles/\"``."
msgstr ""
"Например, если ``WSGIScriptAlias`` равен ``\"/minfo\"``, атрибут ``path`` "
"может быть равен ``\"/minfo/music/bands/the_beatles/\"`` в то время как "
"``path_info`` будет равен ``\"/music/bands/the_beatles/\"``."

# 71446f4c27764092880d4c45d9d67e0e
#: ../../ref/request-response.txt:70
msgid ""
"A string representing the HTTP method used in the request. This is "
"guaranteed to be uppercase. Example::"
msgstr ""
"Строка отображающая метод HTTP запроса. Значение всегда будет в верхнем "
"регистре. Например::"

# 0d1bb64c4cd54dd5ae638b57e0370e8b
#: ../../ref/request-response.txt:80
msgid ""
"A string representing the current encoding used to decode form submission "
"data (or ``None``, which means the :setting:`DEFAULT_CHARSET` setting is "
"used). You can write to this attribute to change the encoding used when "
"accessing the form data. Any subsequent attribute accesses (such as reading "
"from ``GET`` or ``POST``) will use the new ``encoding`` value.  Useful if "
"you know the form data is not in the :setting:`DEFAULT_CHARSET` encoding."
msgstr ""
"Кодировка, которая используется для декодирования данных формы (или "
"``None``, что означает использовать значение настройки :setting:"
"`DEFAULT_CHARSET`). Вы можете изменить значение этого атрибута. При "
"последующих доступах к атрибутам (например, чтение с ``GET`` или ``POST``) "
"будет использоваться новое значение ``encoding``.  Полезен, если вы знаете, "
"что данные формы не используют кодировку указанную :setting:"
"`DEFAULT_CHARSET`."

# 9f3f098d3b064b3b8327240c1ca99b5c
#: ../../ref/request-response.txt:91
#, fuzzy
msgid ""
"A string representing the MIME type of the request, parsed from the "
"``CONTENT_TYPE`` header."
msgstr "Строка, указывающая схему запроса (обычно ``http`` или ``https``)."

#: ../../ref/request-response.txt:98
msgid ""
"A dictionary of key/value parameters included in the ``CONTENT_TYPE`` header."
msgstr ""

# b1339e08a3e34441a37c80b86528a952
#: ../../ref/request-response.txt:103
msgid ""
"A dictionary-like object containing all given HTTP GET parameters. See the :"
"class:`QueryDict` documentation below."
msgstr ""
"Объект с интерфейсом словаря, который содержит HTTP GET параметры. Смотрите "
"описание :class:`QueryDict` ниже."

# 7d08a17de1874cf5b6693d5c7695cead
#: ../../ref/request-response.txt:108
msgid ""
"A dictionary-like object containing all given HTTP POST parameters, "
"providing that the request contains form data. See the :class:`QueryDict` "
"documentation below. If you need to access raw or non-form data posted in "
"the request, access this through the :attr:`HttpRequest.body` attribute "
"instead."
msgstr ""
"Объект-словарь содержащий все POST параметры, переданные формой. Смотрите "
"описание :class:`QueryDict` ниже. Если вам необходимо получить "
"необработанные данные или данные переданные не через форму, используйте "
"атрибут :attr:`HttpRequest.body`."

# e86a4ab1cb71420b896171a8d5e38e5a
#: ../../ref/request-response.txt:114
msgid ""
"It's possible that a request can come in via POST with an empty ``POST`` "
"dictionary -- if, say, a form is requested via the POST HTTP method but does "
"not include form data. Therefore, you shouldn't use ``if request.POST`` to "
"check for use of the POST method; instead, use ``if request.method == \"POST"
"\"`` (see above)."
msgstr ""
"Запрос может использовать метод POST но содержать пустой словарь ``POST`` -- "
"например, форма была передана через POST HTTP метод, но не содержала никаких "
"данных. Поэтому, вы не должны использовать ``if request.POST`` для проверки "
"был ли использован метод POST; вместо этого используйте ``if request.method "
"== \"POST\"`` (смотрите ниже)."

# 223d86bfc89c401c8acd1b4d9f551e67
#: ../../ref/request-response.txt:120
msgid ""
"Note: ``POST`` does *not* include file-upload information. See ``FILES``."
msgstr ""
"Заметим: ``POST`` *не* содержит информацию о загруженных файлах. Смотрите "
"``FILES``."

# 28616482100146c98e2ac2ca8afee863
#: ../../ref/request-response.txt:124
msgid ""
"A standard Python dictionary containing all cookies. Keys and values are "
"strings."
msgstr ""
"Словарь Python содержащий все \"cookie\". Ключи и значения являются строками."

# 3692299a62134353ab97ca819fef6773
#: ../../ref/request-response.txt:129
msgid ""
"A dictionary-like object containing all uploaded files. Each key in "
"``FILES`` is the ``name`` from the ``<input type=\"file\" name=\"\" />``. "
"Each value in ``FILES`` is an :class:`~django.core.files.uploadedfile."
"UploadedFile`."
msgstr ""
"Объект с интерфейсом словаря, который содержит все загруженные файлы. Каждый "
"ключ в ``FILES`` это ``name`` из ``<input type=\"file\" name=\"\" />``. "
"Каждое значение в ``FILES`` это объект :class:`~django.core.files."
"uploadedfile.UploadedFile`."

# 270d997993a344449a019fab1089f310
#: ../../ref/request-response.txt:133
msgid "See :doc:`/topics/files` for more information."
msgstr "Подробности в разделе :doc:`/topics/files`."

# 9e005f5667dd45dab8e4c6b30213ec85
#: ../../ref/request-response.txt:135
msgid ""
"Note that ``FILES`` will only contain data if the request method was POST "
"and the ``<form>`` that posted to the request had ``enctype=\"multipart/form-"
"data\"``. Otherwise, ``FILES`` will be a blank dictionary-like object."
msgstr ""
"Заметим, что ``FILES`` содержит данные только, если метод запроса POST и "
"``<form>`` содержал ``enctype=\"multipart/form-data\"``. В другом случае "
"``FILES`` будет содержать пустой словарь."

# 011f19d5b7b1427bb3931e417289aee6
#: ../../ref/request-response.txt:142
msgid ""
"A standard Python dictionary containing all available HTTP headers. "
"Available headers depend on the client and server, but here are some "
"examples:"
msgstr ""
"Словарь Python содержащий все доступные HTTP заголовки запроса. Доступные "
"заголовки зависят от сервера и клиента. Вот список возможных:"

# 1682041efc5143948fc17bfc080e3f7a
#: ../../ref/request-response.txt:146
msgid "``CONTENT_LENGTH`` -- The length of the request body (as a string)."
msgstr ""
"``CONTENT_LENGTH`` -- размер содержимого запроса (содержимое учитывается как "
"строка)."

# 4aeb3bb7edf743a5b24e4756cae2cfdd
#: ../../ref/request-response.txt:147
msgid "``CONTENT_TYPE`` -- The MIME type of the request body."
msgstr "``CONTENT_TYPE`` -- MIME-тип содержимого запроса."

# 93df98a3903945deb951a996fb71acb5
#: ../../ref/request-response.txt:148
msgid "``HTTP_ACCEPT`` -- Acceptable content types for the response."
msgstr "``HTTP_ACCEPT`` -- принимаемые типы ответа ответа."

# 93df98a3903945deb951a996fb71acb5
#: ../../ref/request-response.txt:149
msgid "``HTTP_ACCEPT_ENCODING`` -- Acceptable encodings for the response."
msgstr "``HTTP_ACCEPT_ENCODING`` -- принимаемые кодировки ответа."

# c36aa59c684f4ff7a99332b7330cf5b7
#: ../../ref/request-response.txt:150
msgid "``HTTP_ACCEPT_LANGUAGE`` -- Acceptable languages for the response."
msgstr "``HTTP_ACCEPT_LANGUAGE`` -- принимаемые языки ответа."

# a010b193cdf1435783caf699d2e1dc6c
#: ../../ref/request-response.txt:151
msgid "``HTTP_HOST`` -- The HTTP Host header sent by the client."
msgstr "``HTTP_HOST`` -- заголовок HTTP Host отсылаемый клиентом."

# 4e7f7cba9c1d4a8da1f60ddb44b7c54f
#: ../../ref/request-response.txt:152
msgid "``HTTP_REFERER`` -- The referring page, if any."
msgstr "``HTTP_REFERER`` -- Ссылающаяся страница, если определена."

# 68d18575ea914037a3108f82c787b25e
#: ../../ref/request-response.txt:153
msgid "``HTTP_USER_AGENT`` -- The client's user-agent string."
msgstr "``HTTP_USER_AGENT`` -- Строка \"user-agent\" клиента."

# 775afd77934344e193d88e154b4ec447
#: ../../ref/request-response.txt:154
msgid "``QUERY_STRING`` -- The query string, as a single (unparsed) string."
msgstr "``QUERY_STRING`` -- Строка запроса, не обработанная."

# 5cd540f48d744cce8b191fe039c3520e
#: ../../ref/request-response.txt:155
msgid "``REMOTE_ADDR`` -- The IP address of the client."
msgstr "``REMOTE_ADDR`` -- IP-адрес клиента."

# 1a07d92ffb374bae981045f4189173da
#: ../../ref/request-response.txt:156
msgid "``REMOTE_HOST`` -- The hostname of the client."
msgstr "``REMOTE_HOST`` -- имя хоста клиента."

# eddb1ae03dba443aa5e8e690293e6110
#: ../../ref/request-response.txt:157
msgid "``REMOTE_USER`` -- The user authenticated by the Web server, if any."
msgstr ""
"``REMOTE_USER`` -- пользователь аутентифицированный Web-сервером, если "
"определен."

# afdb6d8598a84291b25704510b103478
#: ../../ref/request-response.txt:158
msgid "``REQUEST_METHOD`` -- A string such as ``\"GET\"`` or ``\"POST\"``."
msgstr ""
"``REQUEST_METHOD`` -- Метод запроса. Строка, например, ``\"GET\"`` или ``"
"\"POST\"``."

# 7b078ca04a174485b6af330fdc89fc64
#: ../../ref/request-response.txt:159
msgid "``SERVER_NAME`` -- The hostname of the server."
msgstr "``SERVER_NAME`` -- имя хоста сервера."

# c7c157e789ca43a49adf50337508e96d
#: ../../ref/request-response.txt:160
msgid "``SERVER_PORT`` -- The port of the server (as a string)."
msgstr "``SERVER_PORT`` -- Порт сервера(строка)."

# 87a2a4d6d0504153b2dc4cc0df3a8606
#: ../../ref/request-response.txt:162
msgid ""
"With the exception of ``CONTENT_LENGTH`` and ``CONTENT_TYPE``, as given "
"above, any HTTP headers in the request are converted to ``META`` keys by "
"converting all characters to uppercase, replacing any hyphens with "
"underscores and adding an ``HTTP_`` prefix to the name. So, for example, a "
"header called ``X-Bender`` would be mapped to the ``META`` key "
"``HTTP_X_BENDER``."
msgstr ""
"За исключением ``CONTENT_LENGTH`` и ``CONTENT_TYPE`` из примера выше, любый "
"HTTP заголовок запроса преобразуется в ключ атрибута ``META`` "
"конвертированием всех символов в верхний регистр, заменой дефисов нижним "
"подчеркиванием и добавлением префикса ``HTTP_`` к названию. Например, "
"заголовок ``X-Bender`` будет добавлен в ``META`` с ключом ``HTTP_X_BENDER``."

#: ../../ref/request-response.txt:169
msgid ""
"Note that :djadmin:`runserver` strips all headers with underscores in the "
"name, so you won't see them in ``META``. This prevents header-spoofing based "
"on ambiguity between underscores and dashes both being normalizing to "
"underscores in WSGI environment variables. It matches the behavior of Web "
"servers like Nginx and Apache 2.4+."
msgstr ""
"Обратите внимание, :djadmin:`runserver` обрезает все заголовки с "
"подчеркиванием в названии, по этому вы их не увидите в ``META``. Это "
"предотвращает подделку заголовков, которая возможна из-за преобразования "
"дефисов в подчеркивания в названиях переменных окружения WSGI. Такое "
"поведение совпадает с поведением Web-серверов, таких как Nginx и Apache 2.4+."

# 8ac5eeb7d9ef4ea59d3ce2697c7dad4f
#: ../../ref/request-response.txt:177
#, fuzzy
msgid ""
"An instance of :class:`~django.urls.ResolverMatch` representing the resolved "
"URL. This attribute is only set after URL resolving took place, which means "
"it's available in all views but not in middleware which are executed before "
"URL resolving takes place (you can use it in :meth:`process_view` though)."
msgstr ""
"Экземпляр :class:`~django.core.urlresolvers.ResolverMatch` представляющий "
"запрошенный URL. Атрибут устанавливается при поиске подходящего URL-шаблона, "
"это значит что middleware он не доступен т.к. они вызывается до обработки "
"URL-а (в таком случае вместо ``process_request`` можно использовать "
"``process_view``)."

#: ../../ref/request-response.txt:184
msgid "Attributes set by application code"
msgstr "Атрибуты, которые могут добавляться кодом приложения"

#: ../../ref/request-response.txt:186
msgid ""
"Django doesn't set these attributes itself but makes use of them if set by "
"your application."
msgstr ""
"Django не устанавливает эти атрибуты, но использует их, если ваше приложение "
"установит их."

#: ../../ref/request-response.txt:191
#, fuzzy
msgid ""
"The :ttag:`url` template tag will use its value as the ``current_app`` "
"argument to :func:`~django.urls.reverse()`."
msgstr ""
"Шаблонный тег :ttag:`url` будет использовать значение этого атрибута как "
"аргумент ``current_app`` для :func:`~django.core.urlresolvers.reverse()`."

# 56c0daca3ca74ecb8126f7928bab68a7
#: ../../ref/request-response.txt:196
msgid ""
"This will be used as the root URLconf for the current request, overriding "
"the :setting:`ROOT_URLCONF` setting. See :ref:`how-django-processes-a-"
"request` for details."
msgstr ""
"Будет использоваться как URLconf текущего запроса вместо значения настройки :"
"setting:`ROOT_URLCONF`. Подробности смотрите в разделе :ref:`how-django-"
"processes-a-request`."

#: ../../ref/request-response.txt:200
msgid ""
"``urlconf`` can be set to ``None`` to revert any changes made by previous "
"middleware and return to using the :setting:`ROOT_URLCONF`."
msgstr ""
"``urlconf`` можно установить в ``None``, чтобы отменить какие-либо "
"изменения, сделанные предыдущими промежуточными слоями, и снова "
"использовать :setting:`ROOT_URLCONF`."

#: ../../ref/request-response.txt:204
msgid "Attributes set by middleware"
msgstr "Атрибуты, которые устанавливаются промежуточным слоем(middleware)"

#: ../../ref/request-response.txt:206
#, fuzzy
msgid ""
"Some of the middleware included in Django's contrib apps set attributes on "
"the request. If you don't see the attribute on a request, be sure the "
"appropriate middleware class is listed in :setting:`MIDDLEWARE`."
msgstr ""
"Некоторые промежуточные слои, включая встроенные в Django, добавляют "
"атрибуты к объекту запроса. Если вы не нашли атрибут в объекте запроса, "
"убедитесь, что нужный промежуточный слой добавлен в :setting:"
"`MIDDLEWARE_CLASSES`."

#: ../../ref/request-response.txt:212
msgid ""
"From the :class:`~django.contrib.sessions.middleware.SessionMiddleware`: A "
"readable and writable, dictionary-like object that represents the current "
"session."
msgstr ""
"Добавляется :class:`~django.contrib.sessions.middleware.SessionMiddleware`: "
"объект с интерфейсом словаря, который содержит текущую сессию."

#: ../../ref/request-response.txt:218
msgid ""
"From the :class:`~django.contrib.sites.middleware.CurrentSiteMiddleware`: An "
"instance of :class:`~django.contrib.sites.models.Site` or :class:`~django."
"contrib.sites.requests.RequestSite` as returned by :func:`~django.contrib."
"sites.shortcuts.get_current_site()` representing the current site."
msgstr ""
"Добавляется :class:`~django.contrib.sites.middleware.CurrentSiteMiddleware`: "
"экземпляр :class:`~django.contrib.sites.models.Site` или :class:`~django."
"contrib.sites.requests.RequestSite`, который возвращается :func:`~django."
"contrib.sites.shortcuts.get_current_site()`, отображает текущий сайт."

# 62814af0b87449a0b6cdbf015fd22bca
#: ../../ref/request-response.txt:226
#, fuzzy
msgid ""
"From the :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`: "
"An instance of :setting:`AUTH_USER_MODEL` representing the currently logged-"
"in user. If the user isn't currently logged in, ``user`` will be set to an "
"instance of :class:`~django.contrib.auth.models.AnonymousUser`. You can tell "
"them apart with :attr:`~django.contrib.auth.models.User.is_authenticated`, "
"like so::"
msgstr ""
"Добавляется :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware`: содержит объект :setting:`AUTH_USER_MODEL` "
"представляющий текущего пользователя. Если пользователь не авторизирован, "
"атрибут ``user`` будет содержать ``django.contrib.auth.models."
"AnonymousUser``. Вы можете различить их используя :meth:`~django.contrib."
"auth.models.User.is_authenticated`::"

# 08c634bbd3554176b2dca88a53fd6a3d
# 44d3adacb90c42afbf3855e352ba8cff
# 627ef7bc0af2416685b0d939ea317139
# fe37a8d1b44942299d8e0588dcf89379
#: ../../ref/request-response.txt:239 ../../ref/request-response.txt:402
#: ../../ref/request-response.txt:725
msgid "Methods"
msgstr "Методы"

# ae6e91fbc7ed489093bd4dff5e8db3eb
#: ../../ref/request-response.txt:243
msgid ""
"Returns the originating host of the request using information from the "
"``HTTP_X_FORWARDED_HOST`` (if :setting:`USE_X_FORWARDED_HOST` is enabled) "
"and ``HTTP_HOST`` headers, in that order. If they don't provide a value, the "
"method uses a combination of ``SERVER_NAME`` and ``SERVER_PORT`` as detailed "
"in :pep:`3333`."
msgstr ""
"Возвращает оригинальное имя хоста используя информацию из "
"``HTTP_X_FORWARDED_HOST`` (если включена настройка :setting:"
"`USE_X_FORWARDED_HOST`) и ``HTTP_HOST`` заголовков, в соответствующем "
"порядке. Если эти значения не определенны, метод использует комбинацию "
"``SERVER_NAME`` и ``SERVER_PORT`` как описано в :pep:`3333`."

# e5a14caede72494c8ba98ccec988a5ea
#: ../../ref/request-response.txt:249
msgid "Example: ``\"127.0.0.1:8000\"``"
msgstr "Например: ``\"127.0.0.1:8000\"``"

# 19529ff87bb44d018c815e8559d64e1f
#: ../../ref/request-response.txt:251
msgid ""
"The :meth:`~HttpRequest.get_host()` method fails when the host is behind "
"multiple proxies. One solution is to use middleware to rewrite the proxy "
"headers, as in the following example::"
msgstr ""
"Метод :meth:`~HttpRequest.get_host()` вернет ошибку если сервер находится за "
"несколькими proxy. Одно из решений -- создать функциональный "
"слой(middleware), который переопределить заголовки proxy таким образом::"

# d664439c26354ac9ac2db4ec76e947c9
#: ../../ref/request-response.txt:275
msgid ""
"This middleware should be positioned before any other middleware that relies "
"on the value of :meth:`~HttpRequest.get_host()` -- for instance, :class:"
"`~django.middleware.common.CommonMiddleware` or :class:`~django.middleware."
"csrf.CsrfViewMiddleware`."
msgstr ""
"Этот функциональный слой должен находиться перед любый другим, который может "
"использовать :meth:`~HttpRequest.get_host()`, например, :class:`~django."
"middleware.common.CommonMiddleware` или :class:`~django.middleware.csrf."
"CsrfViewMiddleware`."

# ae6e91fbc7ed489093bd4dff5e8db3eb
#: ../../ref/request-response.txt:282
msgid ""
"Returns the originating port of the request using information from the "
"``HTTP_X_FORWARDED_PORT`` (if :setting:`USE_X_FORWARDED_PORT` is enabled) "
"and ``SERVER_PORT`` ``META`` variables, in that order."
msgstr ""
"Возвращает оригинальный порт запроса, используя данные из "
"``HTTP_X_FORWARDED_PORT`` (если включена настройка :setting:"
"`USE_X_FORWARDED_PORT`) и значение ``SERVER_PORT`` из ``META`` в указанном "
"порядке."

# a73e20a339eb4f188e60dab4dca03a5e
#: ../../ref/request-response.txt:288
msgid "Returns the ``path``, plus an appended query string, if applicable."
msgstr "Возвращает ``path``, со строкой запроса, если она присутствует."

# b81d1d3bcd1f4eff91f0801937f0faa5
#: ../../ref/request-response.txt:290
msgid "Example: ``\"/music/bands/the_beatles/?print=true\"``"
msgstr "Например: ``\"/music/bands/the_beatles/?print=true\"``"

# 91b7e69ebcc34151841720ea0856082e
#: ../../ref/request-response.txt:294
msgid ""
"Returns the absolute URI form of ``location``. If no location is provided, "
"the location will be set to ``request.get_full_path()``."
msgstr ""
"Возвращает абсолютный URI для аргумента ``location``. Если ``location`` не "
"указан, будет использовано значение ``request.get_full_path()``."

# 1a7e0003eed44a43a4c5f43e78a31dbb
#: ../../ref/request-response.txt:297
msgid ""
"If the location is already an absolute URI, it will not be altered. "
"Otherwise the absolute URI is built using the server variables available in "
"this request."
msgstr ""
"Если ``location`` уже является абсолютным URI, значение останется не "
"измененным. В другом случае абсолютный URI будет создан с использованием "
"данных запроса."

# cf14c0a45c4c40e4ab5e36c7e4a4605c
#: ../../ref/request-response.txt:301
msgid ""
"Example: ``\"https://example.com/music/bands/the_beatles/?print=true\"``"
msgstr ""
"Например: ``\"https://example.com/music/bands/the_beatles/?print=true\"``"

#: ../../ref/request-response.txt:305
#, fuzzy
msgid ""
"Mixing HTTP and HTTPS on the same site is discouraged, therefore :meth:"
"`~HttpRequest.build_absolute_uri()` will always generate an absolute URI "
"with the same scheme the current request has. If you need to redirect users "
"to HTTPS, it's best to let your Web server redirect all HTTP traffic to "
"HTTPS."
msgstr ""
"Не следует использовать HTTP и HTTPS на одному сайте. :meth:`~HttpRequest."
"build_absolute_uri()` всегда сгенерирует полный URI с протоколом из запроса. "
"Если вы хотите перенаправить пользователей на HTTPS, лучше позволить веб-"
"серверу перенаправлять весь HTTP трафик на HTTPS."

# 33430fc679cf40bd9c4a2bbd75e49f59
#: ../../ref/request-response.txt:313
msgid ""
"Returns a cookie value for a signed cookie, or raises a ``django.core."
"signing.BadSignature`` exception if the signature is no longer valid. If you "
"provide the ``default`` argument the exception will be suppressed and that "
"default value will be returned instead."
msgstr ""
"Возвращает значение подписанных(signed) cookie, или вызывает исключение "
"``django.core.signing.BadSignature`` если подпись не верна. При передаче "
"аргумента ``default`` исключение не будет вызвано и функция вернет значение "
"по-умолчанию."

# 05fec99492df41f7b27c8c53727bee69
#: ../../ref/request-response.txt:318
msgid ""
"The optional ``salt`` argument can be used to provide extra protection "
"against brute force attacks on your secret key. If supplied, the ``max_age`` "
"argument will be checked against the signed timestamp attached to the cookie "
"value to ensure the cookie is not older than ``max_age`` seconds."
msgstr ""
"Необязательный аргумент ``salt`` может быть использован для дополнительной "
"защиты от \" brute force\" атак. Если передан аргумент ``max_age``, время "
"подписи cookie будет проверяться, чтобы убедиться, что cookie не старше "
"``max_age`` секунд."

# 0731a5162f9e4a0289121355c35fc7f4
#: ../../ref/request-response.txt:324
msgid "For example::"
msgstr "Например::"

# a27dd73c22054249a7b092fcc9b79d0c
#: ../../ref/request-response.txt:344
msgid ""
"See :doc:`cryptographic signing </topics/signing>` for more information."
msgstr ""
"Подробности смотрите в разделе о :doc:`криптографической подписи </topics/"
"signing>`."

# 4b36043dc082468da1a2f2c74196b016
#: ../../ref/request-response.txt:348
msgid ""
"Returns ``True`` if the request is secure; that is, if it was made with "
"HTTPS."
msgstr ""
"Возвращает ``True`` если запрос безопасный; то есть, если он был выполнен "
"через HTTPS."

# 74cb2ede9a2f427f9783256918ca10be
#: ../../ref/request-response.txt:353
msgid ""
"Returns ``True`` if the request was made via an ``XMLHttpRequest``, by "
"checking the ``HTTP_X_REQUESTED_WITH`` header for the string "
"``'XMLHttpRequest'``. Most modern JavaScript libraries send this header. If "
"you write your own XMLHttpRequest call (on the browser side), you'll have to "
"set this header manually if you want ``is_ajax()`` to work."
msgstr ""
"Возвращает ``True``, если запрос был выполнен через ``XMLHttpRequest``, "
"проверяя равен ли заголовок ``HTTP_X_REQUESTED_WITH`` значению "
"``'XMLHttpRequest'``. Большинство современных JavaScript библиотек "
"используют этот заголовок. Если вы самостоятельно выполняете XMLHttpRequest "
"запрос (в браузере), необходимо установить этот заголовок, иначе метод "
"``is_ajax()`` не будет работать."

# bc52ce3bbeee4074b4c9dd9ddb6d6ca5
#: ../../ref/request-response.txt:359
#, fuzzy
msgid ""
"If a response varies on whether or not it's requested via AJAX and you are "
"using some form of caching like Django's :mod:`cache middleware <django."
"middleware.cache>`, you should decorate the view with :func:"
"`vary_on_headers('X-Requested-With') <django.views.decorators.vary."
"vary_on_headers>` so that the responses are properly cached."
msgstr ""
"Если ответ зависит от того, отправлен он через AJAX или нет, и вы "
"используете кеширование Django, например :mod:`кеширующий мидлвар <django."
"middleware.cache>`, необходимо использовать декоратор :func:"
"`vary_on_headers('HTTP_X_REQUESTED_WITH') <django.views.decorators.vary."
"vary_on_headers>` для корректного кеширования."

# 6a50c3808c924e42bf88ff9625b3157a
#: ../../ref/request-response.txt:372
msgid ""
"Methods implementing a file-like interface for reading from an HttpRequest "
"instance. This makes it possible to consume an incoming request in a "
"streaming fashion. A common use-case would be to process a big XML payload "
"with an iterative parser without constructing a whole XML tree in memory."
msgstr ""
"Методы, предоставляющие интерфейс файла для чтения данных из объекта "
"``HttpRequest``. Это дает возможность читать содержимое запроса в потоке. "
"Один из вариантов использования -- это обработка большого XML-документа "
"\"парсером\", без создания всего XML-дерева в памяти."

# 911c8fac86da453cadd9bd3149caf49d
#: ../../ref/request-response.txt:378
msgid ""
"Given this standard interface, an HttpRequest instance can be passed "
"directly to an XML parser such as ElementTree::"
msgstr ""
"Предоставляя стандартный интерфейс, объект ``HttpRequest`` можно передавать "
"непосредственно в XML-парсер такой как ElementTree::"

# 711a1e61babe47c3a5decdb904700425
#: ../../ref/request-response.txt:387
#, fuzzy
msgid "``QueryDict`` objects"
msgstr "Объект QueryDict"

# 01f8070f0f3740b0b4d04c63bda6bcb0
#: ../../ref/request-response.txt:391
msgid ""
"In an :class:`HttpRequest` object, the ``GET`` and ``POST`` attributes are "
"instances of ``django.http.QueryDict``, a dictionary-like class customized "
"to deal with multiple values for the same key. This is necessary because "
"some HTML form elements, notably ``<select multiple>``, pass multiple values "
"for the same key."
msgstr ""
"В объекте :class:`HttpRequest`, атрибуты ``GET`` и ``POST`` являются "
"экземплярами класса ``django.http.QueryDict`` -- это класс с интерфейсом "
"словаря, который дополнительной хранить несколько значений для одного ключа. "
"Это необходимо так как определенные элементы HTML-форм(например, ``<select "
"multiple>``) передают несколько значений для одного ключа."

# c09fa005f32b46c1b8548b911fafa688
#: ../../ref/request-response.txt:397
msgid ""
"The ``QueryDict``\\ s at ``request.POST`` and ``request.GET`` will be "
"immutable when accessed in a normal request/response cycle. To get a mutable "
"version you need to use ``.copy()``."
msgstr ""
"``QueryDict`` из ``request.POST`` и ``request.GET`` -- неизменяемы. Чтобы "
"получить изменяемую версию, используйте ``.copy()``."

# 3db2c973524a4f9ea4d46a6e42127d01
#: ../../ref/request-response.txt:404
msgid ""
":class:`QueryDict` implements all the standard dictionary methods because "
"it's a subclass of dictionary. Exceptions are outlined here:"
msgstr ""
"Класс :class:`QueryDict` представляет все стандартные методы словаря, так "
"как является его подклассом. Исключения описаны здесь:"

# 969c0d3edec844eeb013169cb5e746e8
#: ../../ref/request-response.txt:409
msgid "Instantiates a ``QueryDict`` object based on ``query_string``."
msgstr "Создает экземпляр ``QueryDict`` из ``query_string``."

#: ../../ref/request-response.txt:414
msgid ""
"If ``query_string`` is not passed in, the resulting ``QueryDict`` will be "
"empty (it will have no keys or values)."
msgstr ""
"Если параметр ``query_string`` не указан, полученный ``QueryDict`` будет "
"пустым (без ключей и значений)."

# fabbd526ab314b2897d1e70a21503d7a
#: ../../ref/request-response.txt:417
msgid ""
"Most ``QueryDict``\\ s you encounter, and in particular those at ``request."
"POST`` and ``request.GET``, will be immutable. If you are instantiating one "
"yourself, you can make it mutable by passing ``mutable=True`` to its "
"``__init__()``."
msgstr ""
"Большинство объектов ``QueryDict``, которые используются в Django, в том "
"числе ``request.POST`` и ``request.GET``, будут неизменяемыми. Если вы "
"создаете экземпляр самостоятельно, можете сделать его изменяемым, передав "
"``mutable=True`` в ``__init__()``."

# 22153acbec934561b831e2ac65e8d936
#: ../../ref/request-response.txt:422
msgid ""
"Strings for setting both keys and values will be converted from ``encoding`` "
"to unicode. If encoding is not set, it defaults to :setting:"
"`DEFAULT_CHARSET`."
msgstr ""
"Строки ключей и значений будут преобразованы в ``unicode`` с использованием "
"``encoding``. Если ``encoding`` не указан, будет использоваться значение :"
"setting:`DEFAULT_CHARSET`."

#: ../../ref/request-response.txt:429
msgid ""
"Creates a new ``QueryDict`` with keys from ``iterable`` and each value equal "
"to ``value``. For example::"
msgstr ""

# 29b98e1eb67a46749f0b9fee7c9e7986
#: ../../ref/request-response.txt:437
msgid ""
"Returns the value for the given key. If the key has more than one value, "
"``__getitem__()`` returns the last value. Raises ``django.utils."
"datastructures.MultiValueDictKeyError`` if the key does not exist. (This is "
"a subclass of Python's standard ``KeyError``, so you can stick to catching "
"``KeyError``.)"
msgstr ""
"Возвращает значение для переданного ключа. Если ключа содержит несколько "
"значений, ``__getitem__()`` возвращает последнее значение. Вызывает "
"исключение ``django.utils.datastructures.MultiValueDictKeyError`` если ключ "
"не существует. (Это подкласс стандартного исключения Python ``KeyError``, "
"так что вы как обычно можете обрабатывать исключение ``KeyError``.)"

# d3a84bfec551487997934e2312e364b9
#: ../../ref/request-response.txt:445
msgid ""
"Sets the given key to ``[value]`` (a Python list whose single element is "
"``value``). Note that this, as other dictionary functions that have side "
"effects, can only be called on a mutable ``QueryDict`` (such as one that was "
"created via ``copy()``)."
msgstr ""
"Устанавливает значения ключа в ``[value]`` (список Python с единственным "
"элементом ``value``). Заметим, что это, так же как и другие методы словаря "
"изменяющие значения, могут быть вызваны только для изменяемого объекта "
"``QueryDict`` (который был создан через ``copy()``)."

# 3e3c0675969541f2b4c9a1858c80af95
#: ../../ref/request-response.txt:452
msgid ""
"Returns ``True`` if the given key is set. This lets you do, e.g., ``if \"foo"
"\" in request.GET``."
msgstr ""
"Возвращает ``True`` если переданный ключ существует. Это позволяет вам "
"использовать ``if \"foo\" in request.GET``."

# 4eabfed063d54473977fa650b9b062c8
#: ../../ref/request-response.txt:457
msgid ""
"Uses the same logic as ``__getitem__()`` above, with a hook for returning a "
"default value if the key doesn't exist."
msgstr ""
"Аналогичен методу ``__getitem__()``, но возвращает значение по-умолчанию "
"вместо исключения, если ключ не существует."

# de47346398824c4f91d0b92b480f27cf
#: ../../ref/request-response.txt:462
msgid ""
"Just like the standard dictionary ``setdefault()`` method, except it uses "
"``__setitem__()`` internally."
msgstr ""
"Аналогичен методу ``setdefault()`` словаря, но использует метод "
"``__setitem__()``."

# 954503e9efd24ea989dd9e200127b36e
#: ../../ref/request-response.txt:467
msgid ""
"Takes either a ``QueryDict`` or standard dictionary. Just like the standard "
"dictionary ``update()`` method, except it *appends* to the current "
"dictionary items rather than replacing them. For example::"
msgstr ""
"Принимает ``QueryDict`` или обычный словарь. Аналогичен методу ``update()`` "
"словаря, но *добавляет* значения к текущему словарю, а не заменяет их. "
"Например::"

# a83424ed41e6423c9b9775dea32ceae7
#: ../../ref/request-response.txt:480
msgid ""
"Just like the standard dictionary ``items()`` method, except this uses the "
"same last-value logic as ``__getitem__()``. For example::"
msgstr ""
"Аналогичен методу ``items()`` словаря, но получает значения аналогично "
"методу ``__getitem__()``. Например::"

# 189a8cf639dc44d4987643268e653107
#: ../../ref/request-response.txt:489
msgid ""
"Just like the standard dictionary ``iteritems()`` method. Like :meth:"
"`QueryDict.items()` this uses the same last-value logic as :meth:`QueryDict."
"__getitem__()`."
msgstr ""
"Аналогичен методу ``iteritems()`` словаря. Как и метод :meth:`QueryDict."
"items()`, получает значения способом описанным в :meth:`QueryDict."
"__getitem__()`."

#: ../../ref/request-response.txt:493 ../../ref/request-response.txt:500
#: ../../ref/request-response.txt:515
msgid "Available only on Python 2."
msgstr ""

# 03f3ed58510e44989b39773dde603161
#: ../../ref/request-response.txt:497
msgid ""
"Like :meth:`QueryDict.iteritems()` except it includes all values, as a list, "
"for each member of the dictionary."
msgstr ""
"Аналогичен методу :meth:`QueryDict.iteritems()`, но возвращает все значения, "
"списком, для ключа."

# 3881692539024a2cb7b1d2be8acfbaee
#: ../../ref/request-response.txt:504
msgid ""
"Just like the standard dictionary ``values()`` method, except this uses the "
"same last-value logic as ``__getitem__()``. For example::"
msgstr ""
"Аналогичен методу ``values()`` словаря, но получает данные аналогично методу "
"``__getitem__()``. Например::"

# f7e53e42cda7442e8d3790c5393c7b83
#: ../../ref/request-response.txt:513
msgid "Just like :meth:`QueryDict.values()`, except an iterator."
msgstr "Аналогичен методу :meth:`QueryDict.values()`, но является генератором."

# 139bba7521c64487b4dfce7bf843a573
#: ../../ref/request-response.txt:517
msgid "In addition, ``QueryDict`` has the following methods:"
msgstr "В дополнение, ``QueryDict`` содержит такие методы:"

# 9c8fe7907ae1458ba3fa810a33a18065
#: ../../ref/request-response.txt:521
msgid ""
"Returns a copy of the object, using ``copy.deepcopy()`` from the Python "
"standard library. This copy will be mutable even if the original was not."
msgstr ""
"Возвращает копию объекта, используя ``copy.deepcopy()`` из стандартных "
"библиотек Python. Копия будет изменяемая, даже если оригинал не был."

# 1fcd4aaa1f624352a28fa4c6abd2f1b8
#: ../../ref/request-response.txt:526
msgid ""
"Returns the data with the requested key, as a Python list. Returns an empty "
"list if the key doesn't exist and no default value was provided. It's "
"guaranteed to return a list of some sort unless the default value provided "
"is not a list."
msgstr ""
"Возвращает данные для ключа в виде списка. Возвращает пустой список, если "
"ключ не существует и не указанно значение по-умолчанию. Этот метод всегда "
"возвращает список, если не указанно значение по-умолчанию другого типа."

# 82a9458843c446c28a0970d9c4b03f15
#: ../../ref/request-response.txt:533
msgid "Sets the given key to ``list_`` (unlike ``__setitem__()``)."
msgstr ""
"Устанавливает значение ключа в список ``list_`` (в отличии от "
"``__setitem__()``)."

# d1b833d807c849f4912fad7bb8d9dd03
#: ../../ref/request-response.txt:537
msgid "Appends an item to the internal list associated with key."
msgstr "Добавляет элемент во внутренний список значений ключа."

# 80758a8897cc403a9f39618aa6f364ba
#: ../../ref/request-response.txt:541
msgid ""
"Just like ``setdefault``, except it takes a list of values instead of a "
"single value."
msgstr ""
"Аналогичен ``setdefault``, но принимает список значений, а не одно значение."

# dcede540b2a44fe599ae95dce55579b3
#: ../../ref/request-response.txt:546
msgid ""
"Like :meth:`items()`, except it includes all values, as a list, for each "
"member of the dictionary. For example::"
msgstr ""
"Аналогичен методу :meth:`items()`, но включает все значения списком для "
"каждого элемента словаря. Например::"

# 2e4c59cd915c4f31b284e2d40a47482b
#: ../../ref/request-response.txt:555
msgid ""
"Returns a list of values for the given key and removes them from the "
"dictionary. Raises ``KeyError`` if the key does not exist. For example::"
msgstr ""
"Возвращает список значений для переданного ключа и удаляет его из словаря. "
"Вызывает ``KeyError``, если ключ не существует. Например::"

# c8bf8b371009436595051f4263665014
#: ../../ref/request-response.txt:564
msgid ""
"Removes an arbitrary member of the dictionary (since there's no concept of "
"ordering), and returns a two value tuple containing the key and a list of "
"all values for the key. Raises ``KeyError`` when called on an empty "
"dictionary. For example::"
msgstr ""
"Удаляет произвольный элемент словаря(т.к. не сохраняется порядок ключей) и "
"возвращает кортеж содержащий ключ и список значений. Вызывает ``KeyError``, "
"если словарь не содержит элементов. Например::"

# f9ccddba5f6c4a53ba8caadfe429d90c
#: ../../ref/request-response.txt:575
msgid ""
"Returns ``dict`` representation of ``QueryDict``. For every (key, list) pair "
"in ``QueryDict``, ``dict`` will have (key, item), where item is one element "
"of the list, using same logic as :meth:`QueryDict.__getitem__()`::"
msgstr ""
"Возвращает ``dict``-представление объекта ``QueryDict``. Для каждой пары "
"(ключ, список) в ``QueryDict``, возвращаемый словарь будет содержать ключ и "
"значение, значением будет последнее значение из списка аналогично методу :"
"meth:`QueryDict.__getitem__()`::"

# 6668660d68694aada31165873281d3da
#: ../../ref/request-response.txt:585
msgid "Returns a string of the data in query-string format. Example::"
msgstr "Возвращает строку данных в формате запроса. Например::"

# e4d8c84724014880bb72d9057e101b05
#: ../../ref/request-response.txt:591
msgid ""
"Optionally, urlencode can be passed characters which do not require "
"encoding. For example::"
msgstr ""
"Используя аргумент ``safe``, можно указать безопасные символы, которые не "
"будут закодированы. Например::"

# a8f9e457bc3b4e8383b67a8564d7310c
#: ../../ref/request-response.txt:600
#, fuzzy
msgid "``HttpResponse`` objects"
msgstr "Объект HttpResponse"

# 2dba81b7c8ab418c951765943956e25b
#: ../../ref/request-response.txt:604
msgid ""
"In contrast to :class:`HttpRequest` objects, which are created automatically "
"by Django, :class:`HttpResponse` objects are your responsibility. Each view "
"you write is responsible for instantiating, populating and returning an :"
"class:`HttpResponse`."
msgstr ""
"В отличии от объекта :class:`HttpRequest`, который создается Django, объект :"
"class:`HttpResponse` создаете вы. Каждое представление должно создать и "
"вернуть объект :class:`HttpResponse`."

# 76944b68077f4e0e8f17065e62509d3b
#: ../../ref/request-response.txt:609
msgid "The :class:`HttpResponse` class lives in the :mod:`django.http` module."
msgstr "Класс :class:`HttpResponse` находится в модуле :mod:`django.http`."

# 8f1215b4cfe74a7691edf0011c33cc02
#: ../../ref/request-response.txt:612 ../../ref/request-response.txt:968
msgid "Usage"
msgstr "Использование"

# 74239950ef1e4eeea95506cb065afd05
#: ../../ref/request-response.txt:615
msgid "Passing strings"
msgstr "Передача строки"

# 3f0f6972182240e889127ff48dcc4b7e
#: ../../ref/request-response.txt:617
msgid ""
"Typical usage is to pass the contents of the page, as a string, to the :"
"class:`HttpResponse` constructor::"
msgstr ""
"Типичное использование заключается в передаче содержимого страницы в виде "
"строки в конструктор :class:`HttpResponse`::"

# 18c7278ed41945c2bd77ee2e1aa340ad
#: ../../ref/request-response.txt:624
msgid ""
"But if you want to add content incrementally, you can use ``response`` as a "
"file-like object::"
msgstr ""
"Но если вам необходимо добавлять содержимое постепенно, вы можете "
"использовать объект ``response`` как объект файла::"

# 968060a8485f42dcaac8bf67178ebedf
#: ../../ref/request-response.txt:632
msgid "Passing iterators"
msgstr "Передача итератора"

# 9bc135c1788e4fe490939b8c2b38bc98
#: ../../ref/request-response.txt:634
#, fuzzy
msgid ""
"Finally, you can pass ``HttpResponse`` an iterator rather than strings. "
"``HttpResponse`` will consume the iterator immediately, store its content as "
"a string, and discard it. Objects with a ``close()`` method such as files "
"and generators are immediately closed."
msgstr ""
"Вы можете передать итератор в конструктор ``HttpResponse`` вместо строк. "
"``HttpResponse`` сразу выполнит итератор и сохранит результат как строку."

# 09fca820a0514ad3a8826113b17cae72
#: ../../ref/request-response.txt:639
msgid ""
"If you need the response to be streamed from the iterator to the client, you "
"must use the :class:`StreamingHttpResponse` class instead."
msgstr ""
"Если необходимо отдавать данные из итератора в потоке, используйте "
"экземпляр :class:`StreamingHttpResponse`."

#: ../../ref/request-response.txt:644
msgid ""
"Objects with a ``close()`` method used to be closed when the WSGI server "
"called ``close()`` on the response."
msgstr ""

# 24256c8432e043ac9f8283f9c273f8f8
#: ../../ref/request-response.txt:648
msgid "Setting header fields"
msgstr "Установка заголовков"

# aec1512d314045b0aeb97b8b3d0f25fa
#: ../../ref/request-response.txt:650
msgid ""
"To set or remove a header field in your response, treat it like a "
"dictionary::"
msgstr ""
"При установке или удалении заголовка в объекте ответа, рассматривайте его "
"как словарь:"

# 6e172d16d3a74fed8185828c5e9b856c
#: ../../ref/request-response.txt:656
msgid ""
"Note that unlike a dictionary, ``del`` doesn't raise ``KeyError`` if the "
"header field doesn't exist."
msgstr ""
"Заметим, что в отличии от словаря, ``del`` не вызовет исключение "
"``KeyError`` если заголовок не определен."

# f06c09d42b84485d8b5a651a6d62b4e7
#: ../../ref/request-response.txt:659
msgid ""
"For setting the ``Cache-Control`` and ``Vary`` header fields, it is "
"recommended to use the :func:`~django.utils.cache.patch_cache_control` and :"
"func:`~django.utils.cache.patch_vary_headers` methods from :mod:`django."
"utils.cache`, since these fields can have multiple, comma-separated values. "
"The \"patch\" methods ensure that other values, e.g. added by a middleware, "
"are not removed."
msgstr ""
"Для установки заголовков ``Cache-Control`` и ``Vary``, лучше использовать "
"функции :func:`~django.utils.cache.patch_cache_control` и :func:`~django."
"utils.cache.patch_vary_headers` из модуля :mod:`django.utils.cache`, так как "
"эти поля могут содержать несколько значений, разделенных запятыми. Эти "
"функции добавят новые значение не удаляя существующие."

# 2c7a4d3b9d1a43aab0bc4b9e7047550f
#: ../../ref/request-response.txt:666
msgid ""
"HTTP header fields cannot contain newlines. An attempt to set a header field "
"containing a newline character (CR or LF) will raise ``BadHeaderError``"
msgstr ""
"HTTP заголовки не могут содержать перенос строки. При попытке добавить "
"заголовок содержащий символ переноса строки (CR или LF) будет вызвано "
"исключение ``BadHeaderError``"

# f73b0241d62040288bcb23f7227db450
#: ../../ref/request-response.txt:670
msgid "Telling the browser to treat the response as a file attachment"
msgstr "Указываем браузеру воспринимать ответ как вложенный файл"

# cccb7c730a0a481c8ac3b92956bbad91
#: ../../ref/request-response.txt:672
msgid ""
"To tell the browser to treat the response as a file attachment, use the "
"``content_type`` argument and set the ``Content-Disposition`` header. For "
"example, this is how you might return a Microsoft Excel spreadsheet::"
msgstr ""
"Для этого используйте аргумент ``content_type`` и установите заголовок "
"``Content-Disposition``. Например, вот так вы можете вернуть таблицу "
"Microsoft Excel::"

# b34f45beac1c478f878054fc36df1ae9
#: ../../ref/request-response.txt:679
msgid ""
"There's nothing Django-specific about the ``Content-Disposition`` header, "
"but it's easy to forget the syntax, so we've included it here."
msgstr ""
"Заголовок ``Content-Disposition`` никак не относится к Django, но очень "
"легко забыть синтаксис, поэтому мы добавили пример."

# f1b9be8204af4403bddd047548ac6eb5
#: ../../ref/request-response.txt:687
msgid ""
"A bytestring representing the content, encoded from a Unicode object if "
"necessary."
msgstr ""
"Байтовое представление содержимого, закодированное с объекта Unicode при "
"необходимости."

#: ../../ref/request-response.txt:692
msgid ""
"A string denoting the charset in which the response will be encoded. If not "
"given at ``HttpResponse`` instantiation time, it will be extracted from "
"``content_type`` and if that is unsuccessful, the :setting:`DEFAULT_CHARSET` "
"setting will be used."
msgstr ""
"Кодировка, в которую будет закодирован ответ. Если не указана во время "
"создания объекта ``HttpResponse``, будет проверятся ``content_type``, и если "
"не будет найдена, будет использоваться значение настройки :setting:"
"`DEFAULT_CHARSET`."

# ed04331429e54e9995058732b65b9a6b
#: ../../ref/request-response.txt:699 ../../ref/request-response.txt:1056
#, fuzzy
msgid "The :rfc:`HTTP status code <7231#section-6>` for the response."
msgstr ""
"`Код HTTP состояния <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10."
"html#sec10>`_ ответа."

#: ../../ref/request-response.txt:701 ../../ref/request-response.txt:1058
msgid ""
"Unless :attr:`reason_phrase` is explicitly set, modifying the value of "
"``status_code`` outside the constructor will also modify the value of "
"``reason_phrase``."
msgstr ""
"Если :attr:`reason_phrase` не установлен явно, изменение ``status_code`` вне "
"конструктора также изменит ``reason_phrase``."

#: ../../ref/request-response.txt:707 ../../ref/request-response.txt:1064
#, fuzzy
msgid ""
"The HTTP reason phrase for the response. It uses the :rfc:`HTTP standard's "
"<7231#section-6.1>` default reason phrases."
msgstr ""
"``reason_phrase`` теперь по умолчанию не в верхнем регистре. Теперь "
"используются значения из `стандарта HTTP <https://www.ietf.org/rfc/rfc2616."
"txt>`_."

#: ../../ref/request-response.txt:710 ../../ref/request-response.txt:1067
#, fuzzy
msgid ""
"Unless explicitly set, ``reason_phrase`` is determined by the value of :attr:"
"`status_code`."
msgstr ""
"Если не указан явно, ``reason_phrase`` определяется из текущего значения :"
"attr:`status_code`."

# 647a9b26265d4c81923f0da7b74d2cc1
#: ../../ref/request-response.txt:715
msgid "This is always ``False``."
msgstr "Всегда ``False``."

# 8d5007b0b9aa4133ae147a06db2b8614
#: ../../ref/request-response.txt:717
msgid ""
"This attribute exists so middleware can treat streaming responses "
"differently from regular responses."
msgstr ""
"Указывает middleware, что этот ответ потоковый и его нужно обрабатывать не "
"так, как обычные запросы."

#: ../../ref/request-response.txt:722
msgid "``True`` if the response has been closed."
msgstr "``True``, если ответ был закрыт."

# 6cc7098661804a12ab60f6b9f276386c
#: ../../ref/request-response.txt:729
msgid ""
"Instantiates an ``HttpResponse`` object with the given page content and "
"content type."
msgstr ""
"Создает экземпляр ``HttpResponse`` с переданным содержимым и MIME-типом."

# c97e391f23d245e88381547b7fe8a733
#: ../../ref/request-response.txt:732
msgid ""
"``content`` should be an iterator or a string. If it's an iterator, it "
"should return strings, and those strings will be joined together to form the "
"content of the response. If it is not an iterator or a string, it will be "
"converted to a string when accessed."
msgstr ""
"``content`` должен быть строкой или итератором. Если это итератор, он должен "
"возвращать строки, которые будут объединены для формирования содержимого "
"ответа. Если это не итератор и не строка, значение будет конвертировано в "
"строковое представление."

# fea44da46e9544b690ab5b26c13bee4f
#: ../../ref/request-response.txt:738
msgid ""
"``content_type`` is the MIME type optionally completed by a character set "
"encoding and is used to fill the HTTP ``Content-Type`` header. If not "
"specified, it is formed by the :setting:`DEFAULT_CONTENT_TYPE` and :setting:"
"`DEFAULT_CHARSET` settings, by default: \"`text/html; charset=utf-8`\"."
msgstr ""
"``content_type`` - MIME-тип, возможно с кодировкой, используется в HTTP "
"заголовке ``Content-Type``. Если не указан, используются настройки :setting:"
"`DEFAULT_CONTENT_TYPE` и :setting:`DEFAULT_CHARSET`, по умолчанию: \"`text/"
"html; charset=utf-8`\"."

# 0f62f3e25a4f4deb8426026dd1a87a83
#: ../../ref/request-response.txt:743
#, fuzzy
msgid ""
"``status`` is the :rfc:`HTTP status code <7231#section-6>` for the response."
msgstr ""
"``status`` -- это `Код HTTP состояния <http://www.w3.org/Protocols/rfc2616/"
"rfc2616-sec10.html#sec10>`_ ответа."

# 6801aa75c9f74329b6cc24502a4bb83c
#: ../../ref/request-response.txt:745
msgid ""
"``reason`` is the HTTP response phrase. If not provided, a default phrase "
"will be used."
msgstr ""
"``reason`` -- это описание HTTP ответа. Если не указано, будет "
"использоваться стандартное значение."

#: ../../ref/request-response.txt:748
msgid ""
"``charset`` is the charset in which the response will be encoded. If not "
"given it will be extracted from ``content_type``, and if that is "
"unsuccessful, the :setting:`DEFAULT_CHARSET` setting will be used."
msgstr ""
"``charset`` - кодировка, в которую будет закодирован ответ. Если не указана "
"во время создания объекта ``HttpResponse``, будет проверятся "
"``content_type``, и если не будет найдена, будет использоваться значение "
"настройки :setting:`DEFAULT_CHARSET`."

# 1bf8ae2461954fbc9a1cddff88ab47cc
#: ../../ref/request-response.txt:754
msgid ""
"Sets the given header name to the given value. Both ``header`` and ``value`` "
"should be strings."
msgstr ""
"Устанавливает заголовок ответа. ``header`` и ``value`` должны быть строками."

# 148380a175954a019420735cb2e734f4
#: ../../ref/request-response.txt:759
msgid ""
"Deletes the header with the given name. Fails silently if the header doesn't "
"exist. Case-insensitive."
msgstr ""
"Удаляет заголовок ответа. Не вызывает исключения, если заголовок не "
"существует. Регистронезависимый."

# 3ae9d0f629d64aa29a87692fbcd5ceb3
#: ../../ref/request-response.txt:764
msgid "Returns the value for the given header name. Case-insensitive."
msgstr "Возвращает значение заголовка. Регистрозависимый."

# f74deca2d03f43b88cac9da641fa4c68
#: ../../ref/request-response.txt:768
msgid ""
"Returns ``True`` or ``False`` based on a case-insensitive check for a header "
"with the given name."
msgstr ""
"Возвращает ``True`` или ``False`` в результате регистронезависимого поиска "
"заголовка по указанному названию."

#: ../../ref/request-response.txt:773
msgid "Sets a header unless it has already been set."
msgstr "Устанавливает заголовок, если он еще не был установлен."

# 69bb53d6b2f9424f935b6250253a278e
#: ../../ref/request-response.txt:777
msgid ""
"Sets a cookie. The parameters are the same as in the :class:`~http.cookies."
"Morsel` cookie object in the Python standard library."
msgstr ""
"Устанавливает cookie. Аргументы соответствуют аргументам для конструктора "
"объекта :class:`~http.cookies.Morsel` из стандартных библиотек Python."

# f978aaa2fcd4427191d37413568441fd
#: ../../ref/request-response.txt:780
msgid ""
"``max_age`` should be a number of seconds, or ``None`` (default) if the "
"cookie should last only as long as the client's browser session. If "
"``expires`` is not specified, it will be calculated."
msgstr ""
"``max_age`` должен содержать количество секунд или ``None`` (по-умолчанию), "
"если cookie должна существовать до закрытия браузера. Если ``expires`` не "
"указан, он будет вычислен."

# bccf04f15bbb40d0803cd4555d181499
#: ../../ref/request-response.txt:783
msgid ""
"``expires`` should either be a string in the format ``\"Wdy, DD-Mon-YY HH:MM:"
"SS GMT\"`` or a ``datetime.datetime`` object in UTC. If ``expires`` is a "
"``datetime`` object, the ``max_age`` will be calculated."
msgstr ""
"``expires`` должен быть строкой в формате ``\"Wdy, DD-Mon-YY HH:MM:SS GMT"
"\"`` или объект ``datetime.datetime`` в UTC. Если ``expires`` объект "
"``datetime``, значение ``max_age`` будет вычислено."

# b6ab0a1bd18649ed92ecca9d9b931f84
#: ../../ref/request-response.txt:787
msgid ""
"Use ``domain`` if you want to set a cross-domain cookie. For example, "
"``domain=\".lawrence.com\"`` will set a cookie that is readable by the "
"domains www.lawrence.com, blogs.lawrence.com and calendars.lawrence.com. "
"Otherwise, a cookie will only be readable by the domain that set it."
msgstr ""
"Используйте ``domain`` если хотите установить междоменные cookie. Например, "
"``domain=\".lawrence.com\"`` установит cookie доступные для доменов www."
"lawrence.com, blogs.lawrence.com и calendars.lawrence.com. Иначе, cookie "
"будут доступны только для текущего домена."

# 5c5668de6f814bcc95137d42cbb31228
#: ../../ref/request-response.txt:792
msgid ""
"Use ``httponly=True`` if you want to prevent client-side JavaScript from "
"having access to the cookie."
msgstr ""
"Используйте ``httponly=True``, если хотите ограничит доступ клиентского "
"JavaScript к этим cookie."

# a22675be92944b019d2dbe2154c35a1e
#: ../../ref/request-response.txt:795
msgid ""
"HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not "
"part of the :rfc:`2109` standard for cookies, and it isn't honored "
"consistently by all browsers. However, when it is honored, it can be a "
"useful way to mitigate the risk of a client-side script from accessing the "
"protected cookie data."
msgstr ""
"HTTPOnly_ -- это флаг добавляемый в HTTP заголовок Set-Cookie ответа. Он не "
"является частью стандарта :rfc:`2109`, и поддерживается не всеми браузерами. "
"Однако, если он поддерживается, это может быть полезным для уменьшения "
"риска, что клиентский скрипт получит доступа к защищенным данным cookie."

# b58c0ae0ea974f21800b5fe11273f5cc
#: ../../ref/request-response.txt:806
msgid ""
"Both :rfc:`2109` and :rfc:`6265` state that user agents should support "
"cookies of at least 4096 bytes. For many browsers this is also the maximum "
"size. Django will not raise an exception if there's an attempt to store a "
"cookie of more than 4096 bytes, but many browsers will not set the cookie "
"correctly."
msgstr ""
"Спецификации :rfc:`2109` и :rfc:`6265` указывают, что клиент должен "
"поддерживать куки минимального размера 4096 байт. Для большинства браузеров "
"это максимальный размер кук. Django не вызовет исключение, если вы "
"попытаетесь добавить куки больше 4096 байт, но многие браузеры установят их "
"неправильно."

# 13ff68d4de914b4794cba9539a35a166
#: ../../ref/request-response.txt:814
msgid ""
"Like :meth:`~HttpResponse.set_cookie()`, but :doc:`cryptographic signing </"
"topics/signing>` the cookie before setting it. Use in conjunction with :meth:"
"`HttpRequest.get_signed_cookie`. You can use the optional ``salt`` argument "
"for added key strength, but you will need to remember to pass it to the "
"corresponding :meth:`HttpRequest.get_signed_cookie` call."
msgstr ""
"Аналогичен :meth:`~HttpResponse.set_cookie()`, но использует :doc:"
"`криптографическую подписаь </topics/signing>` перед установкой cookie. "
"Используется вместе с методом :meth:`HttpRequest.get_signed_cookie`. Вы "
"можете использовать не обязательный аргумент ``salt`` для дополнительной "
"защиты, но не забывайте добавлять его при вызове :meth:`HttpRequest."
"get_signed_cookie`."

# ed59f014bc0d469da0b9ac43cb07a49f
#: ../../ref/request-response.txt:823
msgid ""
"Deletes the cookie with the given key. Fails silently if the key doesn't "
"exist."
msgstr "Удаляет cookie. Не вызывает исключения, если cookie не существует."

# 051d86635e644104a7d603b16d8099f1
#: ../../ref/request-response.txt:826
msgid ""
"Due to the way cookies work, ``path`` and ``domain`` should be the same "
"values you used in ``set_cookie()`` -- otherwise the cookie may not be "
"deleted."
msgstr ""
"Учитывая механизм работы cookie, значения ``path`` и ``domain`` должны быть "
"такими же, какие использовались при вызове ``set_cookie()`` -- в противном "
"случае cookie могут быть не удалены."

# 6feb846140624b55a484b5c8a6aafdb5
# c0a180efcd384baf8c81b072178310a5
# 78b376388ec24f97a6e08153f0e20285
#: ../../ref/request-response.txt:832 ../../ref/request-response.txt:836
#: ../../ref/request-response.txt:840
msgid "This method makes an :class:`HttpResponse` instance a file-like object."
msgstr "Метод для соблюдения интерфейса объекта файла."

# 6feb846140624b55a484b5c8a6aafdb5
# c0a180efcd384baf8c81b072178310a5
# 78b376388ec24f97a6e08153f0e20285
#: ../../ref/request-response.txt:844
msgid ""
"Returns the value of :attr:`HttpResponse.content`. This method makes an :"
"class:`HttpResponse` instance a stream-like object."
msgstr ""
"Возвращает значение :attr:`HttpResponse.content`. Этот метод позволяет "
"использовать :class:`HttpResponse` как объект-файл."

# 6feb846140624b55a484b5c8a6aafdb5
# c0a180efcd384baf8c81b072178310a5
# 78b376388ec24f97a6e08153f0e20285
#: ../../ref/request-response.txt:851 ../../ref/request-response.txt:858
#, fuzzy
msgid ""
"Always ``False``. This method makes an :class:`HttpResponse` instance a "
"stream-like object."
msgstr ""
"Всегда ``True``. Этот метод позволяет использовать :class:`HttpResponse` как "
"объект-файл."

# 6feb846140624b55a484b5c8a6aafdb5
# c0a180efcd384baf8c81b072178310a5
# 78b376388ec24f97a6e08153f0e20285
#: ../../ref/request-response.txt:863
msgid ""
"Always ``True``. This method makes an :class:`HttpResponse` instance a "
"stream-like object."
msgstr ""
"Всегда ``True``. Этот метод позволяет использовать :class:`HttpResponse` как "
"объект-файл."

# 6feb846140624b55a484b5c8a6aafdb5
# c0a180efcd384baf8c81b072178310a5
# 78b376388ec24f97a6e08153f0e20285
#: ../../ref/request-response.txt:868
msgid ""
"Writes a list of lines to the response. Line separators are not added. This "
"method makes an :class:`HttpResponse` instance a stream-like object."
msgstr ""
"Записывает список строк в ответ. Разделители строк не добавляются. Этот "
"метод позволяет использовать :class:`HttpResponse` как объект-файл."

# 9e87c3481cf440b8b1a16e124397d2f6
#: ../../ref/request-response.txt:874
#, fuzzy
msgid "``HttpResponse`` subclasses"
msgstr "Подклассы HttpResponse"

# 2f1575380b2b496c8f82301a7ecaf74a
#: ../../ref/request-response.txt:876
msgid ""
"Django includes a number of ``HttpResponse`` subclasses that handle "
"different types of HTTP responses. Like ``HttpResponse``, these subclasses "
"live in :mod:`django.http`."
msgstr ""
"Django содержит несколько подклассов ``HttpResponse``, которые представляют "
"различные типы HTTP ответов. Как и ``HttpResponse``, эти подклассы находятся "
"в модуле :mod:`django.http`."

# 8c4f9db3530a4debb7be739fa7d439fb
#: ../../ref/request-response.txt:882
msgid ""
"The first argument to the constructor is required -- the path to redirect "
"to. This can be a fully qualified URL (e.g. ``'https://www.yahoo.com/"
"search/'``), an absolute path with no domain (e.g. ``'/search/'``), or even "
"a relative path (e.g. ``'search/'``). In that last case, the client browser "
"will reconstruct the full URL itself according to the current path. See :"
"class:`HttpResponse` for other optional constructor arguments. Note that "
"this returns an HTTP status code 302."
msgstr ""
"Конструктор принимает один обязательный аргумент -- путь для "
"перенаправления. Это может быть полный URL (например, ``'https://www.yahoo."
"com/search/'``) или абсолютный путь без домена (например, ``'/search/'``). "
"Дополнительные необязательные аргументы можно найти в описании :class:"
"`HttpResponse`. Возвращает код HTTP состояния равный 302."

# 62e154f51b16498db789392f76c18d29
#: ../../ref/request-response.txt:892
msgid ""
"This read-only attribute represents the URL the response will redirect to "
"(equivalent to the ``Location`` response header)."
msgstr ""
"Этот атрибут, доступный только для чтения, содержит URL для редиректа "
"(аналог заголовка ``Location``)."

# 0157657a47c84ed0858743b6ab775e68
#: ../../ref/request-response.txt:897
msgid ""
"Like :class:`HttpResponseRedirect`, but it returns a permanent redirect "
"(HTTP status code 301) instead of a \"found\" redirect (status code 302)."
msgstr ""
"Аналогичен :class:`HttpResponseRedirect`, но возвращает постоянное "
"перенаправление (код HTTP состояния 301) вместо временного перенаправления "
"(код состояния 302)."

# 08239c6d4ffb4249aa50553d31c65440
#: ../../ref/request-response.txt:902
msgid ""
"The constructor doesn't take any arguments and no content should be added to "
"this response. Use this to designate that a page hasn't been modified since "
"the user's last request (status code 304)."
msgstr ""
"Конструктор не принимает аргументы и ответ должен быть пустым. Используйте, "
"чтобы указать, что страница не изменилась с прошлого запроса пользователя "
"(код состояния 304)."

# d374391146a94a0e8f302b219bd8592b
#: ../../ref/request-response.txt:908
msgid "Acts just like :class:`HttpResponse` but uses a 400 status code."
msgstr "Аналогичен :class:`HttpResponse` но использует код состояния 400."

# 48953e6b4c06494aba3e591954c16144
#: ../../ref/request-response.txt:912
msgid "Acts just like :class:`HttpResponse` but uses a 404 status code."
msgstr "Аналогичен :class:`HttpResponse` но использует код состояния 404."

# 30b25e6cce064f759133e530def9ae80
#: ../../ref/request-response.txt:916
msgid "Acts just like :class:`HttpResponse` but uses a 403 status code."
msgstr "Аналогичен :class:`HttpResponse` но использует код состояния 403."

# d80cbfa84e954a329fea50fd7b988862
#: ../../ref/request-response.txt:920
msgid ""
"Like :class:`HttpResponse`, but uses a 405 status code. The first argument "
"to the constructor is required: a list of permitted methods (e.g. ``['GET', "
"'POST']``)."
msgstr ""
"Аналогичен :class:`HttpResponse`, но использует код состояния 405. "
"Обязательный аргумент: список разрешенных методов (например, ``['GET', "
"'POST']``)."

# b6ff097f8677491a949f85796e9d9ff6
#: ../../ref/request-response.txt:926
msgid "Acts just like :class:`HttpResponse` but uses a 410 status code."
msgstr "Аналогичен :class:`HttpResponse` но использует код состояния 410."

# 19e977b63fa3498688ca8149345d49d8
#: ../../ref/request-response.txt:930
msgid "Acts just like :class:`HttpResponse` but uses a 500 status code."
msgstr "Аналогичен :class:`HttpResponse` но использует код состояния 500."

# 43a326703bfb40e7a43460cc0917aaf9
#: ../../ref/request-response.txt:934
msgid ""
"If a custom subclass of :class:`HttpResponse` implements a ``render`` "
"method, Django will treat it as emulating a :class:`~django.template."
"response.SimpleTemplateResponse`, and the ``render`` method must itself "
"return a valid response object."
msgstr ""
"Если ваш подкласс :class:`HttpResponse` содержит метод ``render``, Django "
"воспринимает его как аналог класса :class:`~django.template.response."
"SimpleTemplateResponse`. Метод ``render`` должен возвращать правильный "
"объект ответа."

# a8f9e457bc3b4e8383b67a8564d7310c
#: ../../ref/request-response.txt:940
#, fuzzy
msgid "``JsonResponse`` objects"
msgstr "Объект JsonResponse"

# 64f0b27ccdef4720880f4eea11331986
#: ../../ref/request-response.txt:944
msgid ""
"An :class:`HttpResponse` subclass that helps to create a JSON-encoded "
"response. It inherits most behavior from its superclass with a couple "
"differences:"
msgstr ""
"Дочерний класс :class:`HttpResponse`, который помогает вернуть ответ в JSON. "
"Наследует большую часть поведения родительского класса с некоторыми "
"исключениями:"

# 2236b67fe6d8496fb8a5486c04194156
#: ../../ref/request-response.txt:948
msgid "Its default ``Content-Type`` header is set to ``application/json``."
msgstr "Заголовок ``Content-Type`` по умолчанию равен ``application/json``."

# 76cd710491a94ba5bf5e5dda5086dd60
#: ../../ref/request-response.txt:950
msgid ""
"The first parameter, ``data``, should be a ``dict`` instance. If the "
"``safe`` parameter is set to ``False`` (see below) it can be any JSON-"
"serializable object."
msgstr ""
"Первый параметр ``data`` должен быть словарем. Если параметр ``safe`` равен "
"``False`` (смотрите ниже), может принимать любой объект, который можно "
"преобразовать в JSON."

# c5961332e5434fd38816df710180e435
#: ../../ref/request-response.txt:954
#, fuzzy
msgid ""
"The ``encoder``, which defaults to :class:`django.core.serializers.json."
"DjangoJSONEncoder`, will be used to serialize the data. See :ref:`JSON "
"serialization <serialization-formats-json>` for more details about this "
"serializer."
msgstr ""
"``encoder``, по умолчанию равен ``django.core.serializers.json."
"DjangoJSONEncoder``, будет использовать для преобразования данных. "
"Подрбности смотрите в :ref:`JSON сериализации <serialization-formats-json>`."

# e879c69d5bc849bca21e303f87223219
#: ../../ref/request-response.txt:959
msgid ""
"The ``safe`` boolean parameter defaults to ``True``. If it's set to "
"``False``, any object can be passed for serialization (otherwise only "
"``dict`` instances are allowed). If ``safe`` is ``True`` and a non-``dict`` "
"object is passed as the first argument, a :exc:`TypeError` will be raised."
msgstr ""
"Параметр ``safe`` по умолчанию равен ``True``. Если равен ``False``, можно "
"передать любой объект для преобразования в JSON (иначе -- только ``dict``). "
"Если ``safe`` равен ``True`` и передали не ``dict`` объект, будет вызвано "
"исключение :exc:`TypeError`."

#: ../../ref/request-response.txt:964
msgid ""
"The ``json_dumps_params`` parameter is a dictionary of keyword arguments to "
"pass to the ``json.dumps()`` call used to generate the response."
msgstr ""
"Аргумент ``json_dumps_params`` содержит словарь именованных переменных, "
"который передаются в  ``json.dumps()`` при генерации ответа."

# e7a2fd7c8d5d4f0ebd2845aa4c492dce
#: ../../ref/request-response.txt:970
msgid "Typical usage could look like::"
msgstr "Пример использования:"

# 5514654d053e47e4b7b8fe90aa9eaec7
#: ../../ref/request-response.txt:978
msgid "Serializing non-dictionary objects"
msgstr "Преобразование не словарей"

# 38dae0a8aa8b4f428e498dbd522ea62c
#: ../../ref/request-response.txt:980
msgid ""
"In order to serialize objects other than ``dict`` you must set the ``safe`` "
"parameter to ``False``::"
msgstr "Для этого передайте в ``safe`` значение ``False``::"

# ca698ac638c745a1961f4ec5914de6de
#: ../../ref/request-response.txt:985
msgid "Without passing ``safe=False``, a :exc:`TypeError` will be raised."
msgstr "При ``safe=False`` будет вызвано исключение :exc:`TypeError`."

# 2e069d35b89b49ecb104b8411e909df4
#: ../../ref/request-response.txt:989
#, fuzzy
msgid ""
"Before the `5th edition of ECMAScript <http://www.ecma-international.org/"
"ecma-262/5.1/index.html#sec-11.1.4>`_ it was possible to poison the "
"JavaScript ``Array`` constructor. For this reason, Django does not allow "
"passing non-dict objects to the :class:`~django.http.JsonResponse` "
"constructor by default.  However, most modern browsers implement EcmaScript "
"5 which removes this attack vector. Therefore it is possible to disable this "
"security precaution."
msgstr ""
"До `5-й редакции EcmaScript <http://www.ecma-international.org/publications/"
"standards/Ecma-262.htm>`_ была возможность использовать уязвимость в "
"конструкторе ``Array`` в JavaScript. Поэтому Django по умолчанию не "
"позволяет передавать не словари в :class:`~django.http.JsonResponse`. "
"Однако, большинство современных браузеров поддерживают EcmaScript 5, "
"исключая эту атаку. Поэтому можно отключить эту предосторожность "
"безопасности."

# 7a550b3a52c2486c9c39e425c44165f8
#: ../../ref/request-response.txt:998
msgid "Changing the default JSON encoder"
msgstr "Переопределяем преобразователь в JSON"

# 95518127fbd14dc2890e84b06693b658
#: ../../ref/request-response.txt:1000
msgid ""
"If you need to use a different JSON encoder class you can pass the "
"``encoder`` parameter to the constructor method::"
msgstr ""
"Чтобы использовать другой преобразователь в JSON, передайте его через "
"аргумент ``encoder`` конструктора::"

# a8f9e457bc3b4e8383b67a8564d7310c
#: ../../ref/request-response.txt:1008
#, fuzzy
msgid "``StreamingHttpResponse`` objects"
msgstr "Объекты StreamingHttpResponse"

# bb0ccc634e1246fa887aacf42f0703bf
#: ../../ref/request-response.txt:1012
msgid ""
"The :class:`StreamingHttpResponse` class is used to stream a response from "
"Django to the browser. You might want to do this if generating the response "
"takes too long or uses too much memory. For instance, it's useful for :ref:"
"`generating large CSV files <streaming-csv-files>`."
msgstr ""
"Класс :class:`StreamingHttpResponse` используется для \"стриминга\" ответа "
"из Django в браузер. Это может пригодится для медленных запросов или "
"требующих большого количества памяти. Например, можно :ref:`генерировать "
"большие CSV файлы <streaming-csv-files>`."

# 90b98d38fca84f4d8e0f9a063c881ea9
#: ../../ref/request-response.txt:1017
msgid "Performance considerations"
msgstr "Проблемы производительности"

# 720923d24f904a93b566b995b312216c
#: ../../ref/request-response.txt:1019
msgid ""
"Django is designed for short-lived requests. Streaming responses will tie a "
"worker process for the entire duration of the response. This may result in "
"poor performance."
msgstr ""
"Архитектура Django создавалась для обработки быстрых запросов. Потоковые "
"запросы держат рабочий процесс и подключение к БД до окончания обработки "
"запроса. Это может негативно повлиять на производительность."

# 573567f1a5e94f7585fe9ff2e6d41e89
#: ../../ref/request-response.txt:1023
msgid ""
"Generally speaking, you should perform expensive tasks outside of the "
"request-response cycle, rather than resorting to a streamed response."
msgstr ""
"Сложные задачи следует выполнять вне цикла запрос-ответ и не злоупотреблять "
"потоковыми ответами."

# 60e8badbfb6f4aeeb5ffd781ef3682ad
#: ../../ref/request-response.txt:1026
msgid ""
"The :class:`StreamingHttpResponse` is not a subclass of :class:"
"`HttpResponse`, because it features a slightly different API. However, it is "
"almost identical, with the following notable differences:"
msgstr ""
":class:`StreamingHttpResponse` не является подклассом :class:`HttpResponse` "
"и предоставляет немного другое API. Однако, они очень похожи со следующими "
"отличиями:"

# 502d80ce7a1d4761acf14d5aabe7259b
#: ../../ref/request-response.txt:1030
msgid "It should be given an iterator that yields strings as content."
msgstr "Принимает итератор строк."

# 47ce43b4c4bc41cba623ceb89e94843d
#: ../../ref/request-response.txt:1032
msgid ""
"You cannot access its content, except by iterating the response object "
"itself. This should only occur when the response is returned to the client."
msgstr ""
"Вы не можете обратиться к содержимому ответа кроме как проитерировав объект "
"ответа. Это должно происходить после возвращения ответа клиенту."

# c06406a0f046492882959b82a0dda9ab
#: ../../ref/request-response.txt:1035
msgid ""
"It has no ``content`` attribute. Instead, it has a :attr:"
"`~StreamingHttpResponse.streaming_content` attribute."
msgstr ""
"Не содержит атрибут ``content``. Вместо этого содержит атрибут :attr:"
"`~StreamingHttpResponse.streaming_content`."

# 3b2ecc96acda4e048980388277467142
#: ../../ref/request-response.txt:1038
msgid ""
"You cannot use the file-like object ``tell()`` or ``write()`` methods. Doing "
"so will raise an exception."
msgstr ""
"Вы не можете использовать методы объекта файла ``tell()`` или ``write()``. "
"Это вызовет исключение."

# 5d4ec5e1feac451483aec558ade4c2d7
#: ../../ref/request-response.txt:1041
#, fuzzy
msgid ""
":class:`StreamingHttpResponse` should only be used in situations where it is "
"absolutely required that the whole content isn't iterated before "
"transferring the data to the client. Because the content can't be accessed, "
"many middlewares can't function normally. For example the ``ETag`` and "
"``Content-Length`` headers can't be generated for streaming responses."
msgstr ""
":class:`StreamingHttpResponse` должен использовать только в тех ситуациях, "
"когда мы не можем сформировать тело ответа до его возврата клиенту. Т.к. нет "
"доступа к содержимому ответа, многие middleware не могут нормально работать. "
"Например заголовки ``ETag`` и ``Content- Length`` не могут быть добавлены к "
"потоковому ответу."

# 8cf86f702d1142ef89b337bb66440516
#: ../../ref/request-response.txt:1052
msgid "An iterator of strings representing the content."
msgstr "Итератор строк, которые являются содержимым ответа."

# 2b4e704727b946149a13806e84879511
#: ../../ref/request-response.txt:1072
msgid "This is always ``True``."
msgstr "Всегда ``True``."

# a8f9e457bc3b4e8383b67a8564d7310c
#: ../../ref/request-response.txt:1075
#, fuzzy
msgid "``FileResponse`` objects"
msgstr "Объекты FileResponse"

#: ../../ref/request-response.txt:1079
msgid ""
":class:`FileResponse` is a subclass of :class:`StreamingHttpResponse` "
"optimized for binary files. It uses `wsgi.file_wrapper`_ if provided by the "
"wsgi server, otherwise it streams the file out in small chunks."
msgstr ""
":class:`FileResponse` -- дочерний класс :class:`StreamingHttpResponse` "
"оптимизированный для работы с бинарными файлами. Использует `wsgi."
"file_wrapper`_, если он предоставлен wsgi сервером, иначе стримит файл "
"небольшими частями."

#: ../../ref/request-response.txt:1085
msgid "``FileResponse`` expects a file open in binary mode like so::"
msgstr "``FileResponse`` ожидает файл открытый в бинарном режиме чтения::"

#~ msgid ""
#~ "Setting ``urlconf=None`` raised :exc:`~django.core.exceptions."
#~ "ImproperlyConfigured` in older versions."
#~ msgstr ""
#~ "В предыдущих версиях установка ``urlconf=None`` вызывала :exc:`~django."
#~ "core.exceptions.ImproperlyConfigured`."

# ed04331429e54e9995058732b65b9a6b
#~ msgid "The HTTP reason phrase for the response."
#~ msgstr "Описание HTTP ответа(HTTP reason phrase)."

#~ msgid "The ``json_dumps_params`` argument was added."
#~ msgstr "Был добавлен аргумент  ``json_dumps_params``."

#~ msgid ""
#~ "In previous versions, ``query_string`` was a required positional argument."
#~ msgstr "В предыдущих версиях ``query_string`` был обязательным параметром."

#~ msgid "The ``charset`` parameter was added."
#~ msgstr "Был добавлен параметр ``charset``."

# 06c0621d6d4645249cd8398411f0825b
#~ msgid "Use the more explicit ``GET`` and ``POST`` instead."
#~ msgstr "Используйте более явные ``GET`` и ``POST`` вместо этого."

# 72e9200e1862433fa3c3d90ccc8c3993
#~ msgid ""
#~ "For convenience, a dictionary-like object that searches ``POST`` first, "
#~ "then ``GET``. Inspired by PHP's ``$_REQUEST``."
#~ msgstr ""
#~ "Объект с интерфейсом словаря, который ищет данные сначала в ``POST``, "
#~ "затем в ``GET``. Сделан по примеру ``$_REQUEST`` в PHP."

# 8379bf23eefc4a89b98ab996df67b280
#~ msgid ""
#~ "For example, if ``GET = {\"name\": \"john\"}`` and ``POST = {\"age\": "
#~ "'34'}``, ``REQUEST[\"name\"]`` would be ``\"john\"``, and ``REQUEST[\"age"
#~ "\"]`` would be ``\"34\"``."
#~ msgstr ""
#~ "Например, если ``GET = {\"name\": \"john\"}`` и ``POST = {\"age\": '34'}"
#~ "``, ``REQUEST[\"name\"]`` будет содержать ``\"john\"``, а ``REQUEST[\"age"
#~ "\"]`` - ``\"34\"``."

# a2f6688c6de24485ad9b65a2ce03550f
#~ msgid ""
#~ "It's strongly suggested that you use ``GET`` and ``POST`` instead of "
#~ "``REQUEST``, because the former are more explicit."
#~ msgstr ""
#~ "Рекомендуется использовать ``GET`` и ``POST`` вместо ``REQUEST``, "
#~ "поскольку последние являются более явными."

# 224c67582a314fb8b246a6071b87a01a
#~ msgid ""
#~ "``user`` is only available if your Django installation has the :class:"
#~ "`~django.contrib.auth.middleware.AuthenticationMiddleware` activated. For "
#~ "more, see :doc:`/topics/auth/index`."
#~ msgstr ""
#~ "Атрибут ``user`` доступен только если проект использует :class:`~django."
#~ "contrib.auth.middleware.AuthenticationMiddleware`. Подробности смотрите в "
#~ "разделе :doc:`/topics/auth/index`."

# 9ddf5c73ad1341b0b9f45894cdab465d
#~ msgid ""
#~ "A readable-and-writable, dictionary-like object that represents the "
#~ "current session. This is only available if your Django installation has "
#~ "session support activated. See the :doc:`session documentation </topics/"
#~ "http/sessions>` for full details."
#~ msgstr ""
#~ "Объект с интерфейсом словаря, который доступен для чтения и изменений, "
#~ "представляет текущую сессию. Доступен только, если настроена поддержка "
#~ "сессии. Подробности смотрите в разделе про :doc:`использование сессии </"
#~ "topics/http/sessions>`."

# b55aac3ee7c348fd97ddc31f159e0d1a
#~ msgid ""
#~ "Historically, this parameter was called ``mimetype`` (now deprecated)."
#~ msgstr ""
#~ "Раньше этот параметр назывался ``mimetype``(теперь этот атрибут считается "
#~ "устаревшим)."

# f0ce286b8f3349ba9a4465dfdc80b8e4
#~ msgid "UploadedFile objects"
#~ msgstr "Объект UploadedFile"

# 3a52638271d44bdd947c6365fdc0c235
#~ msgid "The name of the uploaded file."
#~ msgstr "Название загруженного файла."

# 55a840a681114075a66694a90a7b1b22
#~ msgid "The size, in bytes, of the uploaded file."
#~ msgstr "Размер, в байтах, загруженного файла."

# 5ff7216988ad478ca56a2758346b661e
#~ msgid "Returns a generator that yields sequential chunks of data."
#~ msgstr ""
#~ "Возвращает генератор, который последовательно выдает блоками данные файла."

# c150daa85bd64fca96ad9cfd4c2fe7d4
#~ msgid "Read a number of bytes from the file."
#~ msgstr "Читает определенное количество байтов из файла."

# d31fbf1f884641a18b755604f31a8421
#~ msgid ""
#~ "``QueryDict`` instances are immutable, unless you create a ``copy()`` of "
#~ "them. That means you can't change attributes of ``request.POST`` and "
#~ "``request.GET`` directly."
#~ msgstr ""
#~ "Экземпляр ``QueryDict`` неизменяемый, если только вы не создадите его "
#~ "копию используя ``copy()``. Это означает, что вы не можете "
#~ "непосредственно изменить атрибуты ``request.POST`` и ``request.GET``."

# e5363434a4c84b029b6a726a5683a3f1
#~ msgid ""
#~ "Passing an iterator as content to :class:`HttpResponse` creates a "
#~ "streaming response if (and only if) no middleware accesses the :attr:"
#~ "`HttpResponse.content` attribute before the response is returned."
#~ msgstr ""
#~ "При передаче итератора в :class:`HttpResponse` создается "
#~ "потоковый(streaming) ответ, но только если middleware не обращался к :"
#~ "attr:`HttpResponse.content` до возвращения ответа."

# 77e66ca125bd41189d1933180cad000c
#~ msgid ""
#~ "Before Django 1.4, ``HttpRequest.body`` was named ``HttpRequest."
#~ "raw_post_data``."
#~ msgstr ""
#~ "До Django 1.4, ``HttpRequest.body`` назывался ``HttpRequest."
#~ "raw_post_data``."

# 8c98f3ddad43439dae2cebbd91b3be4b
#~ msgid ""
#~ "As of Django 1.7, when :class:`HttpResponse` is instantiated with an "
#~ "iterator, it will consume it immediately, store the response content as a "
#~ "string, and discard the iterator."
#~ msgstr ""
#~ "С Django 1.7 при передаче итератора в :class:`HttpResponse` он будет "
#~ "сразу выполнятся, а результат сохраняться как содержимое ответа."

# 70de778a52b24bfdb192172899ba324c
#~ msgid ""
#~ "You can now use :class:`HttpResponse` as a file-like object even if it "
#~ "was instantiated with an iterator. Django will consume and save the "
#~ "content of the iterator on first access."
#~ msgstr ""
#~ "Теперь вы можете использовать :class:`HttpResponse` как объект-файл, даже "
#~ "если он был создан с итератором. Django выполнит итератор и сохранит "
#~ "результат при первом обращении."
