# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2013-06-27 20:47+0300\n"
"Last-Translator: aum <compfaculty@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Poedit 1.5.4\n"

# 5fe120f0da5543078f4f543fdf6ba676
#: ../../ref/class-based-views/base.txt:3
msgid "Base views"
msgstr "Базовые представления"

# 8f4b7d64b30d467d96dde459ffbe35b1
#: ../../ref/class-based-views/base.txt:5
msgid ""
"The following three classes provide much of the functionality needed to "
"create Django views. You may think of them as *parent* views, which can be "
"used by themselves or inherited from. They may not provide all the "
"capabilities required for projects, in which case there are Mixins and "
"Generic class-based views."
msgstr ""
"Следующие три класса реализуют достаточный набор функциональности, чтобы "
"создать представление Django. Вы можете рассматривать их как *родительские* "
"представления, которые можно использовать как непосредственно, так и в "
"наследовании. Конечно, эти классы не всегда могут удовлетворить все "
"требования к представлению в проекте: в таком случае рекомендуется "
"\"присмотреться\" к примесям(Mixins) и общим представлениям классам(Generic "
"class-based views)"

# 53bcd77755814e54b1fcb76906d8c975
#: ../../ref/class-based-views/base.txt:11
msgid ""
"Many of Django's built-in class-based views inherit from other class-based "
"views or various mixins. Because this inheritence chain is very important, "
"the ancestor classes are  documented under the section title of **Ancestors "
"(MRO)**. MRO is an acronym for Method Resolution Order."
msgstr ""
"Множество из встроенных CBV в Django наследуют другие представления-классы "
"или классы-примеси. Это цепочка наследований(и порядок классов) очень важна, "
"поэтому информация о классах-предках находится в разделе   **Ancestors (MRO)"
"**. MRO - это акроним для  Method Resolution Order."

# bc7e9ca7ff7041718ad7487145bfbf8b
#: ../../ref/class-based-views/base.txt:17
msgid "View"
msgstr ""

# c77a6b924e354099870cc46581539dce
#: ../../ref/class-based-views/base.txt:21
msgid ""
"The master class-based base view. All other class-based views inherit from "
"this base class."
msgstr ""
"Самый главный класс в CBV. Все остальные представления-классы наследуются от "
"него."

# 4b442343386d49da88821ec24712410b
# 97c6b2362d2047eda16bb6f4a0b0a260
# 4cc1ebf63b5f4992be5417616205f8cd
#: ../../ref/class-based-views/base.txt:24
#: ../../ref/class-based-views/base.txt:120
#: ../../ref/class-based-views/base.txt:178
msgid "**Method Flowchart**"
msgstr "**Диаграмма методов**"

# edc66bcf77c74c8b90fd5523fe66ec11
#: ../../ref/class-based-views/base.txt:26
msgid ":meth:`dispatch()`"
msgstr ""

# bf653344b0e040529fcefacfcada5012
#: ../../ref/class-based-views/base.txt:27
msgid ":meth:`http_method_not_allowed()`"
msgstr ""

# 2dd3aa69b7174e619df2d7e707677ae9
#: ../../ref/class-based-views/base.txt:28
msgid ":meth:`options()`"
msgstr ""

# 614ebb5620f24e3cafb738b26221788e
# c7b55346dd7a40d69a6e006ec5f38eac
# b702a7e7919747beb63a706660c32670
#: ../../ref/class-based-views/base.txt:30
#: ../../ref/class-based-views/base.txt:126
#: ../../ref/class-based-views/base.txt:184
msgid "**Example views.py**::"
msgstr "**Пример views.py**::"

# f01d668d60d74c3194c0263dace4c19a
# d219eecdbe7a442a8c43564c2ce10e11
# d93eafb218c841b38dd4b539b92e3408
#: ../../ref/class-based-views/base.txt:40
#: ../../ref/class-based-views/base.txt:141
#: ../../ref/class-based-views/base.txt:201
msgid "**Example urls.py**::"
msgstr "**Пример urls.py**::"

# 260a25be296c42e89a89f7dea51e4312
# 8df4c0198e154f3c96aca15bfdf29f29
#: ../../ref/class-based-views/base.txt:50
#: ../../ref/class-based-views/base.txt:214
msgid "**Attributes**"
msgstr "**Атрибуты**"

# cdc1905fc16145a9b3c5495d6b347cc5
#: ../../ref/class-based-views/base.txt:54
msgid "The list of HTTP method names that this view will accept."
msgstr ""
"Список методов HTTP, которые принимает(обрабатывает) данное представление."

# 4262b7dc8e494422b36b9a8631a45599
#: ../../ref/class-based-views/base.txt:56
msgid "Default::"
msgstr "Значения по умолчанию::"

# 1f38ecd970a14834ab5b3b479c33888b
# 89f2e0f1d3ac4e1b87555524cb1227b2
#: ../../ref/class-based-views/base.txt:60
#: ../../ref/class-based-views/base.txt:235
msgid "**Methods**"
msgstr "**Методы**"

# 34f48efeebae4004bc0f97928d2fb3fa
#: ../../ref/class-based-views/base.txt:64
msgid "Returns a callable view that takes a request and returns a response::"
msgstr ""
"Возвращает выполняемое(callable) представление, которое принимает запрос"
"(request) и возвращает ответ(response)::"

# 2a1f79df3a34405588c9671385af93d3
#: ../../ref/class-based-views/base.txt:70
msgid ""
"The ``view`` part of the view -- the method that accepts a ``request`` "
"argument plus arguments, and returns a HTTP response."
msgstr ""
"``view`` часть представления -- метод, который принимает аргумент "
"``request`` плюс дополнительные аргументы, и возвращает HTTP ответ(response)."

# 997c824ed9f44d7f8416daaa8b150202
#: ../../ref/class-based-views/base.txt:73
msgid ""
"The default implementation will inspect the HTTP method and attempt to "
"delegate to a method that matches the HTTP method; a ``GET`` will be "
"delegated to ``get()``, a ``POST`` to ``post()``, and so on."
msgstr ""
"Реализация по умолчанию анализирует HTTP метод запроса и делегирует его "
"соответствующему методу класса; ``GET`` будет обработан методом ``get()``, "
"запрос ``POST`` делегируется к ``post()``, и т.д."

# 6d6a3c890b124942b676a125cb7d2e0f
#: ../../ref/class-based-views/base.txt:77
msgid ""
"By default, a ``HEAD`` request will be delegated to ``get()``. If you need "
"to handle ``HEAD`` requests in a different way than ``GET``, you can "
"override the ``head()`` method. See :ref:`supporting-other-http-methods` for "
"an example."
msgstr ""
"По умолчанию, запрос ``HEAD`` будет делегирован в метод ``get()``. Если вам "
"необходимо обработать ``HEAD`` запрос другим способом,  вы можете "
"переопределить метод ``head()``. Смотри :ref:`supporting-other-http-methods` "
"для примера."

# 2db26543af7e4f6da5143e9ffa6a763c
#: ../../ref/class-based-views/base.txt:82
msgid ""
"The default implementation also sets ``request``, ``args`` and ``kwargs`` as "
"instance variables, so any method on the view can know the full details of "
"the request that was made to invoke the view."
msgstr ""
"Если реализация по умолчанию также устанавливает ``request``, ``args`` и "
"``kwargs`` в качестве переменных экземпляра, то любой метод представления "
"может узнать \"подробности\" о запросе, который вызвал данное представление."

# 15e3e3aae8d74d2eb4b73ad41adf1a28
#: ../../ref/class-based-views/base.txt:88
msgid ""
"If the view was called with a HTTP method it doesn't support, this method is "
"called instead."
msgstr ""
"Если представление было вызвано с неподдерживаемым методом HTTP, будет "
"вызван данный метод."

# 71f8b4ef1e1e491f8df8055a369fa728
#: ../../ref/class-based-views/base.txt:91
msgid ""
"The default implementation returns ``HttpResponseNotAllowed`` with a list of "
"allowed methods in plain text."
msgstr ""
"Реализация по умолчанию возвращает ``HttpResponseNotAllowed`` со списком "
"разрешенных методов в виде простого текста."

# cc226f212e50466ba0defca1a1b66f9c
#: ../../ref/class-based-views/base.txt:96
msgid ""
"Handles responding to requests for the OPTIONS HTTP verb.  Returns a list of "
"the allowed HTTP method names for the view."
msgstr ""
"Обрабатывает запросы на определение \"глаголов\"(методов) OPTIONS HTTP.  "
"Возвращает список всех разрешенных для представления методов HTTP."

# f65cfd05327a49e681b8ffc8e0dbca7b
#: ../../ref/class-based-views/base.txt:100
msgid "TemplateView"
msgstr ""

# a5d76652ceb249d182a941435f2b8052
#: ../../ref/class-based-views/base.txt:104
msgid ""
"Renders a given template, with the context containing parameters captured in "
"the URL."
msgstr ""
"Обрабатывает заданный шаблон, используя контекст(context), содержащий "
"параметры из URL."

# 373aca7d82ba47cdb2465b560f50490d
# eef1be54db2e47b69e6001079162395b
#: ../../ref/class-based-views/base.txt:112
#: ../../ref/class-based-views/base.txt:172
msgid "**Ancestors (MRO)**"
msgstr "**Классы-предки, Ancestors (MRO)**"

# c80ec0409ecf47f38632459c306e913b
#: ../../ref/class-based-views/base.txt:114
msgid "This view inherits methods and attributes from the following views:"
msgstr "Представление наследует методы и атрибуты из следующего представления:"

# 38cb4b8fbe354393b13bdef2d623f2bf
#: ../../ref/class-based-views/base.txt:116
msgid ":class:`django.views.generic.base.TemplateView`"
msgstr ""

# 8001fd24d949408eb159ead5b40e154a
#: ../../ref/class-based-views/base.txt:117
msgid ":class:`django.views.generic.base.TemplateResponseMixin`"
msgstr ""

# 217647f67d9f483ea5ec0a76aafb343b
# 63770f621c8f4f51bd6a445044d124c2
#: ../../ref/class-based-views/base.txt:118
#: ../../ref/class-based-views/base.txt:176
msgid ":class:`django.views.generic.base.View`"
msgstr ""

# 23f28aae8c3143c2b091c34c01fce6e1
# 572c86eeb5f947e485c8d16e4d0f4b58
#: ../../ref/class-based-views/base.txt:122
#: ../../ref/class-based-views/base.txt:180
msgid ":meth:`~django.views.generic.base.View.dispatch()`"
msgstr ""

# 09c56a51ac86477b8f4b845f5e434324
# 80b84a59e6854ba281fceaf92f917be8
#: ../../ref/class-based-views/base.txt:123
#: ../../ref/class-based-views/base.txt:181
msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed()`"
msgstr ""

# fc7d5dc3453645caa78c3d31925548e9
#: ../../ref/class-based-views/base.txt:124
msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data()`"
msgstr ""

# 5a863073e411454ea537ffc521da707d
#: ../../ref/class-based-views/base.txt:151
msgid "**Context**"
msgstr "**Контекст(Context)**"

# b7633fc6dccb4f2bb69682be07b5c002
#: ../../ref/class-based-views/base.txt:153
msgid ""
"``params``: The dictionary of keyword arguments captured from the URL "
"pattern that served the view."
msgstr ""
"``params``:  словарей ключевых аргументов, \"отловленных\" из шаблона URL, "
"который обрабатывается данным представлением."

# 1b75f70ab7794fc9922c2f67ca598f73
#: ../../ref/class-based-views/base.txt:157
msgid "RedirectView"
msgstr ""

# ce854e313c23489b8692901d87a2f289
#: ../../ref/class-based-views/base.txt:161
msgid "Redirects to a given URL."
msgstr "Редирект на заданный URL."

# 4604ecb3c5cf4bb9a9c8b9ac07b33c1b
#: ../../ref/class-based-views/base.txt:163
msgid ""
"The given URL may contain dictionary-style string formatting, which will be "
"interpolated against the parameters captured in the URL. Because keyword "
"interpolation is *always* done (even if no arguments are passed in), any ``"
"\"%\"`` characters in the URL must be written as ``\"%%\"`` so that Python "
"will convert them to a single percent sign on output."
msgstr ""
"Переданный URL может содержать строку с форматированием (dictionary-style), "
"которая будет обработана в соответствии с параметрами \"отловленными\" в "
"URL.  Поскольку ключевая интерполяция *всегда* выполняется (даже если не "
"было передано никаких аргументов), любые символы ``\"%\"`` в URL должны быть "
"написаны как ``\"%%\"``, а затем Python преобразует их в один знак процента "
"на выходе."

# db49fc3fcc23460c844c36304d9d7425
#: ../../ref/class-based-views/base.txt:169
msgid ""
"If the given URL is ``None``, Django will return an ``HttpResponseGone`` "
"(410)."
msgstr ""
"Если переданный URL равен ``None``, Django вернет исключение "
"``HttpResponseGone`` (410)."

# 7044a16bf7a34428b60d16312444c008
#: ../../ref/class-based-views/base.txt:174
msgid "This view inherits methods and attributes from the following view:"
msgstr "Представление наследует методы и атрибуты из следующего представления:"

# ada5594b6674465a82e7711c06a0460a
#: ../../ref/class-based-views/base.txt:182
msgid ":meth:`get_redirect_url()`"
msgstr ""

# 9669b873c6ce401ca675d1875a02a56d
#: ../../ref/class-based-views/base.txt:218
msgid ""
"The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP "
"error."
msgstr ""
"Адрес URL для редиректа, в виде строки. Или ``None`` для генерации 410 "
"(Gone) HTTP ошибки."

# c432476c12af463e9505a7a0721cd59a
#: ../../ref/class-based-views/base.txt:223
msgid ""
"Whether the redirect should be permanent. The only difference here is the "
"HTTP status code returned. If ``True``, then the redirect will use status "
"code 301. If ``False``, then the redirect will use status code 302. By "
"default, ``permanent`` is ``True``."
msgstr ""
"Должно ли  перенаправление должно быть постоянным. Единственная разница "
"состоит в возвращаемом HTTP коде статуса. Если  ``True``, то для редиректа "
"используется код статуса(use status) 301. Если ``False``, то 302. По "
"умолчанию, ``permanent`` установлен в  ``True``."

# e966162e271f441f8fb9bbfff68ffcb1
#: ../../ref/class-based-views/base.txt:230
msgid ""
"Whether to pass along the GET query string to the new location. If ``True``, "
"then the query string is appended to the URL. If ``False``, then the query "
"string is discarded. By default, ``query_string`` is ``False``."
msgstr ""
"Передавать ли строку GET запроса в новую локацию. Если  ``True``,то строка "
"запроса добавляется к URL. Если  ``False``, то строка запроса обрасывается. "
"По умолчанию, ``query_string`` равно ``False``."

# 2ab43a5b451a494ab2ce3a1475d6f3ff
#: ../../ref/class-based-views/base.txt:239
msgid "Constructs the target URL for redirection."
msgstr "Создает целевой URL для редиректа"

# 7941c26ec80947c6a6e807550fc293dd
#: ../../ref/class-based-views/base.txt:241
msgid ""
"The default implementation uses :attr:`url` as a starting string, performs "
"expansion of ``%`` parameters in that string, as well as the appending of "
"query string if requested by :attr:`query_string`. Subclasses may implement "
"any behavior they wish, as long as the method returns a redirect-ready URL "
"string."
msgstr ""
"Реализация по умолчанию использует :attr:`url` в качестве отправной строки, "
"выполняет подстановку  ``%`` параметров в этой строке, а также добавляет "
"строку запроса если указано в атрибуте :attr:`query_string`. Подклассы могут "
"реализовать любое поведение, важно лишь чтобы метод возвращал корректную "
"строку URL для редиректа."
