# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2013-08-21 17:15\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# c0acd355c2a64e23aa2e86777a909cc4
#: ../../ref/views.txt:3
msgid "Built-in Views"
msgstr ""

# 2a09439cc6e2436c9a7ab870bda79150
#: ../../ref/views.txt:8
msgid ""
"Several of Django's built-in views are documented in :doc:`/topics/http/"
"views` as well as elsewhere in the documentation."
msgstr ""

# 7d4552e479384af5babe789bcdca6dfb
#: ../../ref/views.txt:12
msgid "Serving files in development"
msgstr ""

# b2d74ccbd317442994350af300666d42
#: ../../ref/views.txt:16
msgid ""
"There may be files other than your project's static assets that, for "
"convenience, you'd like to have Django serve for you in local development. "
"The :func:`~django.views.static.serve` view can be used to serve any "
"directory you give it. (This view is **not** hardened for production use and "
"should be used only as a development aid; you should serve these files in "
"production using a real front-end web server)."
msgstr ""

# 8298e1fa96134bba997b67d482070d20
#: ../../ref/views.txt:23
msgid ""
"The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. "
"``django.contrib.staticfiles`` is intended for static assets and has no "
"built-in handling for user-uploaded files, but you can have Django serve "
"your :setting:`MEDIA_ROOT` by appending something like this to your URLconf::"
msgstr ""

# b35ebaad023f4383bc8447b7c25ee084
#: ../../ref/views.txt:41
msgid ""
"Note, the snippet assumes your :setting:`MEDIA_URL` has a value of ``'/"
"media/'``. This will call the :func:`~django.views.static.serve` view, "
"passing in the path from the URLconf and the (required) ``document_root`` "
"parameter."
msgstr ""

# dbeb20b1ae2344a296c181c7922570d0
#: ../../ref/views.txt:46
msgid ""
"Since it can become a bit cumbersome to define this URL pattern, Django "
"ships with a small URL helper function :func:`~django.conf.urls.static."
"static` that takes as parameters the prefix such as :setting:`MEDIA_URL` and "
"a dotted path to a view, such as ``'django.views.static.serve'``. Any other "
"function parameter will be transparently passed to the view."
msgstr ""

# 7b95385613184c48b0ce8eefd1058c27
#: ../../ref/views.txt:55
msgid "Error views"
msgstr ""

# c8876e06dbc34cf09b1e22e2bdb8ec76
#: ../../ref/views.txt:57
msgid ""
"Django comes with a few views by default for handling HTTP errors. To "
"override these with your own custom views, see :ref:`customizing-error-"
"views`."
msgstr ""

# 1245fed2ebb3493b9c963f4a949542a1
#: ../../ref/views.txt:63
msgid "The 404 (page not found) view"
msgstr ""

# b7ddafac9de3481f925bb27697179748
#: ../../ref/views.txt:67
msgid ""
"When you raise :exc:`~django.http.Http404` from within a view, Django loads "
"a special view devoted to handling 404 errors. By default, it's the view :"
"func:`django.views.defaults.page_not_found`, which either produces a very "
"simple \"Not Found\" message or loads and renders the template ``404.html`` "
"if you created it in your root template directory."
msgstr ""

#: ../../ref/views.txt:73
msgid ""
"The default 404 view will pass two variables to the template: "
"``request_path``, which is the URL that resulted in the error, and "
"``exception``, which is a useful representation of the exception that "
"triggered the view (e.g. containing any message passed to a specific "
"``Http404`` instance)."
msgstr ""

# 5cdbcf45f30f42b0a99143f3faeb4555
#: ../../ref/views.txt:78
msgid "Three things to note about 404 views:"
msgstr ""

# 7e45728c942047969760ba53d59ff163
#: ../../ref/views.txt:80
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

#: ../../ref/views.txt:83
msgid ""
"The 404 view is passed a :class:`~django.template.RequestContext` and will "
"have access to variables supplied by your template context processors (e.g. "
"``MEDIA_URL``)."
msgstr ""

# ac80cf71373c41ce95205a1bd9b3a4b9
#: ../../ref/views.txt:87
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"404 view will never be used, and your URLconf will be displayed instead, "
"with some debug information."
msgstr ""

# 130a070a609446e8b09211cbe9d6f62d
#: ../../ref/views.txt:94
msgid "The 500 (server error) view"
msgstr ""

# d2a37bbaf830499299ac5685742f38fd
#: ../../ref/views.txt:98
msgid ""
"Similarly, Django executes special-case behavior in the case of runtime "
"errors in view code. If a view results in an exception, Django will, by "
"default, call the view ``django.views.defaults.server_error``, which either "
"produces a very simple \"Server Error\" message or loads and renders the "
"template ``500.html`` if you created it in your root template directory."
msgstr ""

# 85a3933d7dd045c7b684372bf9735220
#: ../../ref/views.txt:104
msgid ""
"The default 500 view passes no variables to the ``500.html`` template and is "
"rendered with an empty ``Context`` to lessen the chance of additional errors."
msgstr ""

# 50d9d9d5ccd847899bc8ed0fb6195135
#: ../../ref/views.txt:107
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"500 view will never be used, and the traceback will be displayed instead, "
"with some debug information."
msgstr ""

# 144e7d92876b4283a619cc7c0a56a947
#: ../../ref/views.txt:114
msgid "The 403 (HTTP Forbidden) view"
msgstr ""

# eb65adcba4a84dc49a4d167c95e949f8
#: ../../ref/views.txt:118
msgid ""
"In the same vein as the 404 and 500 views, Django has a view to handle 403 "
"Forbidden errors. If a view results in a 403 exception then Django will, by "
"default, call the view ``django.views.defaults.permission_denied``."
msgstr ""

#: ../../ref/views.txt:122
msgid ""
"This view loads and renders the template ``403.html`` in your root template "
"directory, or if this file does not exist, instead serves the text \"403 "
"Forbidden\", as per :rfc:`7231#section-6.5.3` (the HTTP 1.1 Specification). "
"The template context contains ``exception``, which is the string "
"representation of the exception that triggered the view."
msgstr ""

# 8b0ae8cd1e7747f081548bf44768a67b
#: ../../ref/views.txt:128
msgid ""
"``django.views.defaults.permission_denied`` is triggered by a :exc:`~django."
"core.exceptions.PermissionDenied` exception. To deny access in a view you "
"can use code like this::"
msgstr ""

# 76f3027c262b480382f6516787e2d3d3
#: ../../ref/views.txt:142
msgid "The 400 (bad request) view"
msgstr ""

# 0c64f9f61cd64ca89d39f3e266a4daf6
#: ../../ref/views.txt:146
msgid ""
"When a :exc:`~django.core.exceptions.SuspiciousOperation` is raised in "
"Django, it may be handled by a component of Django (for example resetting "
"the session data). If not specifically handled, Django will consider the "
"current request a 'bad request' instead of a server error."
msgstr ""

#: ../../ref/views.txt:151
msgid ""
"``django.views.defaults.bad_request``, is otherwise very similar to the "
"``server_error`` view, but returns with the status code 400 indicating that "
"the error condition was the result of a client operation. By default, "
"nothing related to the exception that triggered the view is passed to the "
"template context, as the exception message might contain sensitive "
"information like filesystem paths."
msgstr ""

# e41e4ad025ec4d39aa7ce78363307806
#: ../../ref/views.txt:158
msgid ""
"``bad_request`` views are also only used when :setting:`DEBUG` is ``False``."
msgstr ""
