# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-03 16:54+0200\n"
"PO-Revision-Date: 2017-11-16 11:56+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../releases/2.0.txt:3
msgid "Django 2.0 release notes"
msgstr ""

#: ../../releases/2.0.txt:5
msgid "*December 2, 2017*"
msgstr ""

#: ../../releases/2.0.txt:7
msgid "Welcome to Django 2.0!"
msgstr ""

#: ../../releases/2.0.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-2.0>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-2.0>` "
"you'll want to be aware of when upgrading from Django 1.11 or earlier. "
"We've :ref:`dropped some features<removed-features-2.0>` that have reached "
"the end of their deprecation cycle, and we've :ref:`begun the deprecation "
"process for some features <deprecated-features-2.0>`."
msgstr ""

#: ../../releases/2.0.txt:16
msgid ""
"This release starts Django's use of a :ref:`loose form of semantic "
"versioning <internal-release-cadence>`, but there aren't any major backwards "
"incompatible changes that might be expected of a 2.0 release. Upgrading "
"should be a similar amount of effort as past feature releases."
msgstr ""

#: ../../releases/2.0.txt:21
msgid ""
"See the :doc:`/howto/upgrade-version` guide if you're updating an existing "
"project."
msgstr ""

#: ../../releases/2.0.txt:25
msgid "Python compatibility"
msgstr ""

#: ../../releases/2.0.txt:27
msgid ""
"Django 2.0 supports Python 3.4, 3.5, and 3.6. We **highly recommend** and "
"only officially support the latest release of each series."
msgstr ""

#: ../../releases/2.0.txt:30
msgid "The Django 1.11.x series is the last to support Python 2.7."
msgstr ""

#: ../../releases/2.0.txt:32
msgid ""
"Django 2.0 will be the last release series to support Python 3.4. If you "
"plan a deployment of Python 3.4 beyond the end-of-life for Django 2.0 (April "
"2019), stick with Django 1.11 LTS (supported until April 2020) instead. "
"Note, however, that the end-of-life for Python 3.4 is March 2019."
msgstr ""

#: ../../releases/2.0.txt:38
msgid "Third-party library support for older version of Django"
msgstr ""

#: ../../releases/2.0.txt:40
msgid ""
"Following the release of Django 2.0, we suggest that third-party app authors "
"drop support for all versions of Django prior to 1.11. At that time, you "
"should be able to run your package's tests using ``python -Wd`` so that "
"deprecation warnings do appear. After making the deprecation warning fixes, "
"your app should be compatible with Django 2.0."
msgstr ""

#: ../../releases/2.0.txt:49
msgid "What's new in Django 2.0"
msgstr ""

#: ../../releases/2.0.txt:52
msgid "Simplified URL routing syntax"
msgstr ""

#: ../../releases/2.0.txt:54
msgid ""
"The new :func:`django.urls.path()` function allows a simpler, more readable "
"URL routing syntax. For example, this example from previous Django releases::"
msgstr ""

#: ../../releases/2.0.txt:59
msgid "could be written as::"
msgstr ""

#: ../../releases/2.0.txt:63
msgid ""
"The new syntax supports type coercion of URL parameters. In the example, the "
"view will receive the ``year`` keyword argument as an integer rather than as "
"a string. Also, the URLs that will match are slightly less constrained in "
"the rewritten example. For example, the year 10000 will now match since the "
"year integers aren't constrained to be exactly four digits long as they are "
"in the regular expression."
msgstr ""

#: ../../releases/2.0.txt:70
msgid ""
"The ``django.conf.urls.url()`` function from previous versions is now "
"available as :func:`django.urls.re_path`. The old location remains for "
"backwards compatibility, without an imminent deprecation. The old ``django."
"conf.urls.include()`` function is now importable from ``django.urls`` so you "
"can use ``from django.urls import include, path, re_path`` in your URLconfs."
msgstr ""

#: ../../releases/2.0.txt:77
msgid ""
"The :doc:`/topics/http/urls` document is rewritten to feature the new syntax "
"and provide more details."
msgstr ""

#: ../../releases/2.0.txt:81
msgid "Mobile-friendly ``contrib.admin``"
msgstr ""

#: ../../releases/2.0.txt:83
msgid ""
"The admin is now responsive and supports all major mobile devices. Older "
"browsers may experience varying levels of graceful degradation."
msgstr ""

#: ../../releases/2.0.txt:87
msgid "Window expressions"
msgstr ""

#: ../../releases/2.0.txt:89
msgid ""
"The new :class:`~django.db.models.expressions.Window` expression allows "
"adding an ``OVER`` clause to querysets. You can use :ref:`window functions "
"<window-functions>` and :ref:`aggregate functions <aggregation-functions>` "
"in the expression."
msgstr ""

#: ../../releases/2.0.txt:95
msgid "Minor features"
msgstr ""

#: ../../releases/2.0.txt:98
msgid ":mod:`django.contrib.admin`"
msgstr ""

#: ../../releases/2.0.txt:100
msgid ""
"The new :attr:`.ModelAdmin.autocomplete_fields` attribute and :meth:`."
"ModelAdmin.get_autocomplete_fields` method allow using an `Select2 <https://"
"select2.org>`_ search widget for ``ForeignKey`` and ``ManyToManyField``."
msgstr ""

#: ../../releases/2.0.txt:106
msgid ":mod:`django.contrib.auth`"
msgstr ""

#: ../../releases/2.0.txt:108
msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"36,000 to 100,000."
msgstr ""

#: ../../releases/2.0.txt:112
msgid ":mod:`django.contrib.gis`"
msgstr ""

#: ../../releases/2.0.txt:114
msgid ""
"Added MySQL support for the :class:`~django.contrib.gis.db.models.functions."
"AsGeoJSON` function, :class:`~django.contrib.gis.db.models.functions."
"GeoHash` function, :class:`~django.contrib.gis.db.models.functions.IsValid` "
"function, :lookup:`isvalid` lookup, and :ref:`distance lookups <distance-"
"lookups>`."
msgstr ""

#: ../../releases/2.0.txt:120
msgid ""
"Added the :class:`~django.contrib.gis.db.models.functions.Azimuth` and :"
"class:`~django.contrib.gis.db.models.functions.LineLocatePoint` functions, "
"supported on PostGIS and SpatiaLite."
msgstr ""

#: ../../releases/2.0.txt:124
msgid ""
"Any :class:`~django.contrib.gis.geos.GEOSGeometry` imported from GeoJSON now "
"has its SRID set."
msgstr ""

#: ../../releases/2.0.txt:127
msgid ""
"Added the :attr:`.OSMWidget.default_zoom` attribute to customize the map's "
"default zoom level."
msgstr ""

#: ../../releases/2.0.txt:130
msgid ""
"Made metadata readable and editable on rasters through the :attr:`~django."
"contrib.gis.gdal.GDALRaster.metadata`, :attr:`~django.contrib.gis.gdal."
"GDALRaster.info`, and :attr:`~django.contrib.gis.gdal.GDALBand.metadata` "
"attributes."
msgstr ""

#: ../../releases/2.0.txt:135
msgid ""
"Allowed passing driver-specific creation options to :class:`~django.contrib."
"gis.gdal.GDALRaster` objects using ``papsz_options``."
msgstr ""

#: ../../releases/2.0.txt:138
msgid ""
"Allowed creating :class:`~django.contrib.gis.gdal.GDALRaster` objects in "
"GDAL's internal virtual filesystem. Rasters can now be :ref:`created from "
"and converted to binary data <gdal-raster-vsimem>` in-memory."
msgstr ""

#: ../../releases/2.0.txt:142
msgid ""
"The new :meth:`GDALBand.color_interp() <django.contrib.gis.gdal.GDALBand."
"color_interp>` method returns the color interpretation for the band."
msgstr ""

#: ../../releases/2.0.txt:147
msgid ":mod:`django.contrib.postgres`"
msgstr ""

#: ../../releases/2.0.txt:149
msgid ""
"The new ``distinct`` argument for :class:`~django.contrib.postgres."
"aggregates.ArrayAgg` determines if concatenated values will be distinct."
msgstr ""

#: ../../releases/2.0.txt:153
msgid ""
"The new :class:`~django.contrib.postgres.functions.RandomUUID` database "
"function returns a version 4 UUID. It requires use of PostgreSQL's "
"``pgcrypto`` extension which can be activated using the new :class:`~django."
"contrib.postgres.operations.CryptoExtension` migration operation."
msgstr ""

#: ../../releases/2.0.txt:159
msgid ""
":class:`django.contrib.postgres.indexes.GinIndex` now supports the "
"``fastupdate`` and ``gin_pending_list_limit`` parameters."
msgstr ""

#: ../../releases/2.0.txt:162
msgid ""
"The new :class:`~django.contrib.postgres.indexes.GistIndex` class allows "
"creating ``GiST`` indexes in the database. The new :class:`~django.contrib."
"postgres.operations.BtreeGistExtension` migration operation installs the "
"``btree_gist`` extension to add support for operator classes that aren't "
"built-in."
msgstr ""

#: ../../releases/2.0.txt:168
msgid ""
":djadmin:`inspectdb` can now introspect ``JSONField`` and various "
"``RangeField``\\s (``django.contrib.postgres`` must be in "
"``INSTALLED_APPS``)."
msgstr ""

#: ../../releases/2.0.txt:172
msgid ":mod:`django.contrib.sitemaps`"
msgstr ""

#: ../../releases/2.0.txt:174
msgid ""
"Added the ``protocol`` keyword argument to the :class:`~django.contrib."
"sitemaps.GenericSitemap` constructor."
msgstr ""

#: ../../releases/2.0.txt:178
msgid "Cache"
msgstr ""

#: ../../releases/2.0.txt:180
msgid ""
"``cache.set_many()`` now returns a list of keys that failed to be inserted. "
"For the built-in backends, failed inserts can only happen on memcached."
msgstr ""

#: ../../releases/2.0.txt:184
msgid "File Storage"
msgstr ""

#: ../../releases/2.0.txt:186
msgid ""
":meth:`File.open() <django.core.files.File.open>` can be used as a context "
"manager, e.g. ``with file.open() as f:``."
msgstr ""

#: ../../releases/2.0.txt:190
msgid "Forms"
msgstr ""

#: ../../releases/2.0.txt:192
msgid ""
"The new ``date_attrs`` and ``time_attrs`` arguments for :class:`~django."
"forms.SplitDateTimeWidget` and :class:`~django.forms."
"SplitHiddenDateTimeWidget` allow specifying different HTML attributes for "
"the ``DateInput`` and ``TimeInput`` (or hidden) subwidgets."
msgstr ""

#: ../../releases/2.0.txt:198
msgid ""
"The new :meth:`Form.errors.get_json_data() <django.forms.Form.errors."
"get_json_data>` method returns form errors as a dictionary suitable for "
"including in a JSON response."
msgstr ""

#: ../../releases/2.0.txt:203
msgid "Generic Views"
msgstr ""

#: ../../releases/2.0.txt:205
msgid ""
"The new :attr:`.ContextMixin.extra_context` attribute allows adding context "
"in ``View.as_view()``."
msgstr ""

#: ../../releases/2.0.txt:209
msgid "Management Commands"
msgstr ""

#: ../../releases/2.0.txt:211
msgid ""
":djadmin:`inspectdb` now translates MySQL's unsigned integer columns to "
"``PositiveIntegerField`` or ``PositiveSmallIntegerField``."
msgstr ""

#: ../../releases/2.0.txt:214
msgid ""
"The new :option:`makemessages --add-location` option controls the comment "
"format in PO files."
msgstr ""

#: ../../releases/2.0.txt:217
msgid ""
":djadmin:`loaddata` can now :ref:`read from stdin <loading-fixtures-stdin>`."
msgstr ""

#: ../../releases/2.0.txt:219
msgid ""
"The new :option:`diffsettings --output` option allows formatting the output "
"in a unified diff format."
msgstr ""

#: ../../releases/2.0.txt:222
msgid ""
"On Oracle, :djadmin:`inspectdb` can now introspect ``AutoField`` if the "
"column is created as an identity column."
msgstr ""

#: ../../releases/2.0.txt:225
msgid "On MySQL, :djadmin:`dbshell` now supports client-side TLS certificates."
msgstr ""

#: ../../releases/2.0.txt:228
msgid "Migrations"
msgstr ""

#: ../../releases/2.0.txt:230
msgid ""
"The new :option:`squashmigrations --squashed-name` option allows naming the "
"squashed migration."
msgstr ""

#: ../../releases/2.0.txt:234
msgid "Models"
msgstr ""

#: ../../releases/2.0.txt:236
msgid ""
"The new :class:`~django.db.models.functions.StrIndex` database function "
"finds the starting index of a string inside another string."
msgstr ""

#: ../../releases/2.0.txt:239
msgid ""
"On Oracle, ``AutoField`` and ``BigAutoField`` are now created as `identity "
"columns`_."
msgstr ""

#: ../../releases/2.0.txt:244
msgid ""
"The new ``chunk_size`` parameter of :meth:`.QuerySet.iterator` controls the "
"number of rows fetched by the Python database client when streaming results "
"from the database. For databases that don't support server-side cursors, it "
"controls the number of results Django fetches from the database adapter."
msgstr ""

#: ../../releases/2.0.txt:249
msgid ""
":meth:`.QuerySet.earliest`, :meth:`.QuerySet.latest`, and :attr:`Meta."
"get_latest_by <django.db.models.Options.get_latest_by>` now allow ordering "
"by several fields."
msgstr ""

#: ../../releases/2.0.txt:253
msgid ""
"Added the :class:`~django.db.models.functions.ExtractQuarter` function to "
"extract the quarter from :class:`~django.db.models.DateField` and :class:"
"`~django.db.models.DateTimeField`, and exposed it through the :lookup:"
"`quarter` lookup."
msgstr ""

#: ../../releases/2.0.txt:258
msgid ""
"Added the :class:`~django.db.models.functions.TruncQuarter` function to "
"truncate :class:`~django.db.models.DateField` and :class:`~django.db.models."
"DateTimeField` to the first day of a quarter."
msgstr ""

#: ../../releases/2.0.txt:262
msgid ""
"Added the :attr:`~django.db.models.Index.db_tablespace` parameter to class-"
"based indexes."
msgstr ""

#: ../../releases/2.0.txt:265
msgid ""
"If the database supports a native duration field (Oracle and PostgreSQL), :"
"class:`~django.db.models.functions.Extract` now works with :class:`~django."
"db.models.DurationField`."
msgstr ""

#: ../../releases/2.0.txt:269
msgid ""
"Added the ``of`` argument to :meth:`.QuerySet.select_for_update()`, "
"supported on PostgreSQL and Oracle, to lock only rows from specific tables "
"rather than all selected tables. It may be helpful particularly when :meth:"
"`~.QuerySet.select_for_update()` is used in conjunction with :meth:`~."
"QuerySet.select_related()`."
msgstr ""

#: ../../releases/2.0.txt:275
msgid ""
"The new ``field_name`` parameter of :meth:`.QuerySet.in_bulk` allows "
"fetching results based on any unique model field."
msgstr ""

#: ../../releases/2.0.txt:278
msgid ""
":meth:`.CursorWrapper.callproc()` now takes an optional dictionary of "
"keyword parameters, if the backend supports this feature. Of Django's built-"
"in backends, only Oracle supports it."
msgstr ""

#: ../../releases/2.0.txt:282
msgid ""
"The new :meth:`connection.execute_wrapper() <django.db.backends.base."
"DatabaseWrapper.execute_wrapper>` method allows :doc:`installing wrappers "
"around execution of database queries </topics/db/instrumentation>`."
msgstr ""

#: ../../releases/2.0.txt:287
msgid ""
"The new ``filter`` argument for built-in aggregates allows :ref:`adding "
"different conditionals <conditional-aggregation>` to multiple aggregations "
"over the same fields or relations."
msgstr ""

#: ../../releases/2.0.txt:291
msgid ""
"Added support for expressions in :attr:`Meta.ordering <django.db.models."
"Options.ordering>`."
msgstr ""

#: ../../releases/2.0.txt:294
msgid ""
"The new ``named`` parameter of :meth:`.QuerySet.values_list` allows fetching "
"results as named tuples."
msgstr ""

#: ../../releases/2.0.txt:297
msgid ""
"The new :class:`.FilteredRelation` class allows adding an ``ON`` clause to "
"querysets."
msgstr ""

#: ../../releases/2.0.txt:301
msgid "Pagination"
msgstr ""

#: ../../releases/2.0.txt:303
msgid ""
"Added :meth:`Paginator.get_page() <django.core.paginator.Paginator."
"get_page>` to provide the documented pattern of handling invalid page "
"numbers."
msgstr ""

#: ../../releases/2.0.txt:307
msgid "Requests and Responses"
msgstr ""

#: ../../releases/2.0.txt:309
msgid "The :djadmin:`runserver` Web server supports HTTP 1.1."
msgstr ""

#: ../../releases/2.0.txt:312
msgid "Templates"
msgstr ""

#: ../../releases/2.0.txt:314
msgid ""
"To increase the usefulness of :meth:`.Engine.get_default` in third-party "
"apps, it now returns the first engine if multiple ``DjangoTemplates`` "
"engines are configured in ``TEMPLATES`` rather than raising "
"``ImproperlyConfigured``."
msgstr ""

#: ../../releases/2.0.txt:318
msgid "Custom template tags may now accept keyword-only arguments."
msgstr ""

#: ../../releases/2.0.txt:321
msgid "Tests"
msgstr ""

#: ../../releases/2.0.txt:323
msgid "Added threading support to :class:`~django.test.LiveServerTestCase`."
msgstr ""

#: ../../releases/2.0.txt:325
msgid ""
"Added settings that allow customizing the test tablespace parameters for "
"Oracle: :setting:`DATAFILE_SIZE`, :setting:`DATAFILE_TMP_SIZE`, :setting:"
"`DATAFILE_EXTSIZE`, and :setting:`DATAFILE_TMP_EXTSIZE`."
msgstr ""

#: ../../releases/2.0.txt:330
msgid "Validators"
msgstr ""

#: ../../releases/2.0.txt:332
msgid ""
"The new :class:`.ProhibitNullCharactersValidator` disallows the null "
"character in the input of the :class:`~django.forms.CharField` form field "
"and its subclasses. Null character input was observed from vulnerability "
"scanning tools. Most databases silently discard null characters, but "
"psycopg2 2.7+ raises an exception when trying to save a null character to a "
"char/text field with PostgreSQL."
msgstr ""

#: ../../releases/2.0.txt:342
msgid "Backwards incompatible changes in 2.0"
msgstr ""

#: ../../releases/2.0.txt:345
msgid "Removed support for bytestrings in some places"
msgstr ""

#: ../../releases/2.0.txt:347
msgid ""
"To support native Python 2 strings, older Django versions had to accept both "
"bytestrings and unicode strings. Now that Python 2 support is dropped, "
"bytestrings should only be encountered around input/output boundaries "
"(handling of binary fields or HTTP streams, for example). You might have to "
"update your code to limit bytestring usage to a minimum, as Django no longer "
"accepts bytestrings in certain code paths."
msgstr ""

#: ../../releases/2.0.txt:354
msgid ""
"For example, ``reverse()`` now uses ``str()`` instead of ``force_text()`` to "
"coerce the ``args`` and ``kwargs`` it receives, prior to their placement in "
"the URL. For bytestrings, this creates a string with an undesired ``b`` "
"prefix as well as additional quotes (``str(b'foo')`` is ``\"b'foo'\"``). To "
"adapt, call ``decode()`` on the bytestring before passing it to "
"``reverse()``."
msgstr ""

#: ../../releases/2.0.txt:361
msgid "Database backend API"
msgstr ""

#: ../../releases/2.0.txt:363
msgid ""
"This section describes changes that may be needed in third-party database "
"backends."
msgstr ""

#: ../../releases/2.0.txt:366
msgid ""
"The ``DatabaseOperations.datetime_cast_date_sql()``, "
"``datetime_cast_time_sql()``, ``datetime_trunc_sql()``, "
"``datetime_extract_sql()``, and ``date_interval_sql()`` methods now return "
"only the SQL to perform the operation instead of SQL and a list of "
"parameters."
msgstr ""

#: ../../releases/2.0.txt:372
msgid ""
"Third-party database backends should add a ``DatabaseWrapper.display_name`` "
"attribute with the name of the database that your backend works with. Django "
"may use it in various messages, such as in system checks."
msgstr ""

#: ../../releases/2.0.txt:376
msgid ""
"The first argument of ``SchemaEditor._alter_column_type_sql()`` is now "
"``model`` rather than ``table``."
msgstr ""

#: ../../releases/2.0.txt:379
msgid ""
"The first argument of ``SchemaEditor._create_index_name()`` is now "
"``table_name`` rather than ``model``."
msgstr ""

#: ../../releases/2.0.txt:382
msgid ""
"To enable ``FOR UPDATE OF`` support, set ``DatabaseFeatures."
"has_select_for_update_of = True``. If the database requires that the "
"arguments to ``OF`` be columns rather than tables, set ``DatabaseFeatures."
"select_for_update_of_column = True``."
msgstr ""

#: ../../releases/2.0.txt:387
msgid ""
"To enable support for :class:`~django.db.models.expressions.Window` "
"expressions, set ``DatabaseFeatures.supports_over_clause`` to ``True``. You "
"may need to customize the ``DatabaseOperations."
"window_start_rows_start_end()`` and/or ``window_start_range_start_end()`` "
"methods."
msgstr ""

#: ../../releases/2.0.txt:392
msgid ""
"Third-party database backends should add a ``DatabaseOperations."
"cast_char_field_without_max_length`` attribute with the database data type "
"that will be used in the :class:`~django.db.models.functions.Cast` function "
"for a ``CharField`` if the ``max_length`` argument isn't provided."
msgstr ""

#: ../../releases/2.0.txt:398
msgid ""
"The first argument of ``DatabaseCreation._clone_test_db()`` and "
"``get_test_db_clone_settings()`` is now ``suffix`` rather than ``number`` "
"(in case you want to rename the signatures in your backend for consistency). "
"``django.test`` also now passes those values as strings rather than as "
"integers."
msgstr ""

#: ../../releases/2.0.txt:404
msgid ""
"Third-party database backends should add a ``DatabaseIntrospection."
"get_sequences()`` method based on the stub in ``BaseDatabaseIntrospection``."
msgstr ""

#: ../../releases/2.0.txt:409
msgid "Dropped support for Oracle 11.2"
msgstr ""

#: ../../releases/2.0.txt:411
msgid ""
"The end of upstream support for Oracle 11.2 is Dec. 2020. Django 1.11 will "
"be supported until April 2020 which almost reaches this date. Django 2.0 "
"officially supports Oracle 12.1+."
msgstr ""

#: ../../releases/2.0.txt:416
msgid "Default MySQL isolation level is read committed"
msgstr ""

#: ../../releases/2.0.txt:418
msgid ""
"MySQL's default isolation level, repeatable read, may cause data loss in "
"typical Django usage. To prevent that and for consistency with other "
"databases, the default isolation level is now read committed. You can use "
"the :setting:`DATABASES` setting to :ref:`use a different isolation level "
"<mysql-isolation-level>`, if needed."
msgstr ""

#: ../../releases/2.0.txt:425
msgid ""
":attr:`AbstractUser.last_name <django.contrib.auth.models.User.last_name>` "
"``max_length`` increased to 150"
msgstr ""

#: ../../releases/2.0.txt:427
msgid ""
"A migration for :attr:`django.contrib.auth.models.User.last_name` is "
"included. If you have a custom user model inheriting from ``AbstractUser``, "
"you'll need to generate and apply a database migration for your user model."
msgstr ""

#: ../../releases/2.0.txt:431
msgid ""
"If you want to preserve the 30 character limit for last names, use a custom "
"form::"
msgstr ""

#: ../../releases/2.0.txt:439
msgid ""
"If you wish to keep this restriction in the admin when editing users, set "
"``UserAdmin.form`` to use this form::"
msgstr ""

#: ../../releases/2.0.txt:452
msgid "``QuerySet.reverse()`` and ``last()`` are prohibited after slicing"
msgstr ""

#: ../../releases/2.0.txt:454
msgid ""
"Calling ``QuerySet.reverse()`` or ``last()`` on a sliced queryset leads to "
"unexpected results due to the slice being applied after reordering. This is "
"now prohibited, e.g.::"
msgstr ""

#: ../../releases/2.0.txt:464
msgid "Form fields no longer accept optional arguments as positional arguments"
msgstr ""

#: ../../releases/2.0.txt:466
msgid ""
"To help prevent runtime errors due to incorrect ordering of form field "
"arguments, optional arguments of built-in form fields are no longer accepted "
"as positional arguments. For example::"
msgstr ""

#: ../../releases/2.0.txt:472 ../../releases/2.0.txt:495
msgid "raises an exception and should be replaced with::"
msgstr ""

#: ../../releases/2.0.txt:477
msgid "``call_command()`` validates the options it receives"
msgstr ""

#: ../../releases/2.0.txt:479
msgid ""
"``call_command()`` now validates that the argument parser of the command "
"being called defines all of the options passed to ``call_command()``."
msgstr ""

#: ../../releases/2.0.txt:482
msgid ""
"For custom management commands that use options not created using ``parser."
"add_argument()``, add a ``stealth_options`` attribute on the command::"
msgstr ""

#: ../../releases/2.0.txt:489
msgid "Indexes no longer accept positional arguments"
msgstr ""

#: ../../releases/2.0.txt:491
msgid "For example::"
msgstr ""

#: ../../releases/2.0.txt:500
msgid "Foreign key constraints are now enabled on SQLite"
msgstr ""

#: ../../releases/2.0.txt:502
msgid ""
"This will appear as a backwards-incompatible change (``IntegrityError: "
"FOREIGN KEY constraint failed``) if attempting to save an existing model "
"instance that's violating a foreign key constraint."
msgstr ""

#: ../../releases/2.0.txt:506
msgid ""
"Foreign keys are now created with ``DEFERRABLE INITIALLY DEFERRED`` instead "
"of ``DEFERRABLE IMMEDIATE``. Thus, tables may need to be rebuilt to recreate "
"foreign keys with the new definition, particularly if you're using a pattern "
"like this::"
msgstr ""

#: ../../releases/2.0.txt:517
msgid ""
"If you don't recreate the foreign key as ``DEFERRED``, the first "
"``create()`` would fail now that foreign key constraints are enforced."
msgstr ""

#: ../../releases/2.0.txt:520
msgid ""
"Backup your database first! After upgrading to Django 2.0, you can then "
"rebuild tables using a script similar to this::"
msgstr ""

#: ../../releases/2.0.txt:536
msgid ""
"This script hasn't received extensive testing and needs adaption for various "
"cases such as multiple databases. Feel free to contribute improvements."
msgstr ""

#: ../../releases/2.0.txt:539
msgid ""
"In addition, because of a table alteration limitation of SQLite, it's "
"prohibited to perform :class:`~django.db.migrations.operations.RenameModel` "
"and :class:`~django.db.migrations.operations.RenameField` operations on "
"models or fields referenced by other models in a transaction. In order to "
"allow migrations containing these operations to be applied, you must set the "
"``Migration.atomic`` attribute to ``False``."
msgstr ""

#: ../../releases/2.0.txt:547 ../../releases/2.0.txt:656
msgid "Miscellaneous"
msgstr ""

#: ../../releases/2.0.txt:549
msgid ""
"The ``SessionAuthenticationMiddleware`` class is removed. It provided no "
"functionality since session authentication is unconditionally enabled in "
"Django 1.10."
msgstr ""

#: ../../releases/2.0.txt:553
msgid ""
"The default HTTP error handlers (``handler404``, etc.) are now callables "
"instead of dotted Python path strings. Django favors callable references "
"since they provide better performance and debugging experience."
msgstr ""

#: ../../releases/2.0.txt:557
msgid ""
":class:`~django.views.generic.base.RedirectView` no longer silences "
"``NoReverseMatch`` if the ``pattern_name`` doesn't exist."
msgstr ""

#: ../../releases/2.0.txt:560
msgid ""
"When :setting:`USE_L10N` is off, :class:`~django.forms.FloatField` and :"
"class:`~django.forms.DecimalField` now respect :setting:`DECIMAL_SEPARATOR` "
"and :setting:`THOUSAND_SEPARATOR` during validation. For example, with the "
"settings::"
msgstr ""

#: ../../releases/2.0.txt:570
msgid ""
"an input of ``\"1.345\"`` is now converted to ``1345`` instead of ``1.345``."
msgstr ""

#: ../../releases/2.0.txt:572
msgid ""
"Subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser` are no "
"longer required to implement ``get_short_name()`` and ``get_full_name()``. "
"(The base implementations that raise ``NotImplementedError`` are removed.) "
"``django.contrib.admin`` uses these methods if implemented but doesn't "
"require them. Third-party apps that use these methods may want to adopt a "
"similar approach."
msgstr ""

#: ../../releases/2.0.txt:579
msgid ""
"The ``FIRST_DAY_OF_WEEK`` and ``NUMBER_GROUPING`` format settings are now "
"kept as integers in JavaScript and JSON i18n view outputs."
msgstr ""

#: ../../releases/2.0.txt:582
msgid ""
":meth:`~django.test.TransactionTestCase.assertNumQueries` now ignores "
"connection configuration queries. Previously, if a test opened a new "
"database connection, those queries could be included as part of the "
"``assertNumQueries()`` count."
msgstr ""

#: ../../releases/2.0.txt:587
msgid ""
"The default size of the Oracle test tablespace is increased from 20M to 50M "
"and the default autoextend size is increased from 10M to 25M."
msgstr ""

#: ../../releases/2.0.txt:590
msgid ""
"To improve performance when streaming large result sets from the database, :"
"meth:`.QuerySet.iterator` now fetches 2000 rows at a time instead of 100. "
"The old behavior can be restored using the ``chunk_size`` parameter. For "
"example::"
msgstr ""

#: ../../releases/2.0.txt:597
msgid ""
"Providing unknown package names in the ``packages`` argument of the :class:"
"`~django.views.i18n.JavaScriptCatalog` view now raises ``ValueError`` "
"instead of passing silently."
msgstr ""

#: ../../releases/2.0.txt:601
msgid ""
"A model instance's primary key now appears in the default ``Model."
"__str__()`` method, e.g. ``Question object (1)``."
msgstr ""

#: ../../releases/2.0.txt:604
msgid ""
"``makemigrations`` now detects changes to the model field "
"``limit_choices_to`` option. Add this to your existing migrations or accept "
"an auto-generated migration for fields that use it."
msgstr ""

#: ../../releases/2.0.txt:608
msgid ""
"Performing queries that require :ref:`automatic spatial transformations "
"<automatic-spatial-transformations>` now raises ``NotImplementedError`` on "
"MySQL instead of silently using non-transformed geometries."
msgstr ""

#: ../../releases/2.0.txt:612
msgid ""
"``django.core.exceptions.DjangoRuntimeWarning`` is removed. It was only used "
"in the cache backend as an intermediate class in ``CacheKeyWarning``'s "
"inheritance of ``RuntimeWarning``."
msgstr ""

#: ../../releases/2.0.txt:616
msgid ""
"Renamed ``BaseExpression._output_field`` to ``output_field``. You may need "
"to update custom expressions."
msgstr ""

#: ../../releases/2.0.txt:619
msgid ""
"In older versions, forms and formsets combine their ``Media`` with widget "
"``Media`` by concatenating the two. The combining now tries to :ref:"
"`preserve the relative order of elements in each list <form-media-asset-"
"order>`. ``MediaOrderConflictWarning`` is issued if the order can't be "
"preserved."
msgstr ""

#: ../../releases/2.0.txt:624
msgid ""
"``django.contrib.gis.gdal.OGRException`` is removed. It's been an alias for "
"``GDALException`` since Django 1.8."
msgstr ""

#: ../../releases/2.0.txt:627
msgid "Support for GEOS 3.3.x is dropped."
msgstr ""

#: ../../releases/2.0.txt:629
msgid ""
"The way data is selected for ``GeometryField`` is changed to improve "
"performance, and in raw SQL queries, those fields must now be wrapped in "
"``connection.ops.select``. See the :ref:`Raw queries note<gis-raw-sql>` in "
"the GIS tutorial for an example."
msgstr ""

#: ../../releases/2.0.txt:637
msgid "Features deprecated in 2.0"
msgstr ""

#: ../../releases/2.0.txt:640
msgid ""
"``context`` argument of ``Field.from_db_value()`` and ``Expression."
"convert_value()``"
msgstr ""

#: ../../releases/2.0.txt:642
msgid ""
"The ``context`` argument of ``Field.from_db_value()`` and ``Expression."
"convert_value()`` is unused as it's always an empty dictionary. The "
"signature of both methods is now::"
msgstr ""

#: ../../releases/2.0.txt:648
msgid "instead of::"
msgstr ""

#: ../../releases/2.0.txt:652
msgid ""
"Support for the old signature in custom fields and expressions remains until "
"Django 3.0."
msgstr ""

#: ../../releases/2.0.txt:658
msgid ""
"The ``django.db.backends.postgresql_psycopg2`` module is deprecated in favor "
"of ``django.db.backends.postgresql``. It's been an alias since Django 1.9. "
"This only affects code that imports from the module directly. The "
"``DATABASES`` setting can still use ``'django.db.backends."
"postgresql_psycopg2'``, though you can simplify that by using the ``'django."
"db.backends.postgresql'`` name added in Django 1.9."
msgstr ""

#: ../../releases/2.0.txt:665
msgid ""
"``django.shortcuts.render_to_response()`` is deprecated in favor of :func:"
"`django.shortcuts.render`. ``render()`` takes the same arguments except that "
"it also requires a ``request``."
msgstr ""

#: ../../releases/2.0.txt:669
msgid ""
"The ``DEFAULT_CONTENT_TYPE`` setting is deprecated. It doesn't interact well "
"well with third-party apps and is obsolete since HTML5 has mostly superseded "
"XHTML."
msgstr ""

#: ../../releases/2.0.txt:673
msgid ""
"``HttpRequest.xreadlines()`` is deprecated in favor of iterating over the "
"request."
msgstr ""

#: ../../releases/2.0.txt:676
msgid ""
"The ``field_name`` keyword argument to :meth:`.QuerySet.earliest` and :meth:"
"`.QuerySet.latest` is deprecated in favor of passing the field names as "
"arguments. Write ``.earliest('pub_date')`` instead of ``."
"earliest(field_name='pub_date')``."
msgstr ""

#: ../../releases/2.0.txt:684
msgid "Features removed in 2.0"
msgstr ""

#: ../../releases/2.0.txt:686
msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 2.0."
msgstr ""

#: ../../releases/2.0.txt:689
msgid ""
"See :ref:`deprecated-features-1.9` for details on these changes, including "
"how to remove usage of these features."
msgstr ""

#: ../../releases/2.0.txt:692
msgid ""
"The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` is "
"removed."
msgstr ""

#: ../../releases/2.0.txt:695
msgid ""
"``django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()`` "
"is removed."
msgstr ""

#: ../../releases/2.0.txt:698
msgid "The ``django.forms.extras`` package is removed."
msgstr ""

#: ../../releases/2.0.txt:700
msgid "The ``assignment_tag`` helper is removed."
msgstr ""

#: ../../releases/2.0.txt:702
msgid ""
"The ``host`` argument to ``SimpleTestCase.assertsRedirects()`` is removed. "
"The compatibility layer which allows absolute URLs to be considered equal to "
"relative ones when the path is identical is also removed."
msgstr ""

#: ../../releases/2.0.txt:706
msgid "``Field.rel`` and ``Field.remote_field.to`` are removed."
msgstr ""

#: ../../releases/2.0.txt:708
msgid ""
"The ``on_delete`` argument for ``ForeignKey`` and ``OneToOneField`` is now "
"required in models and migrations. Consider squashing migrations so that you "
"have less of them to update."
msgstr ""

#: ../../releases/2.0.txt:712
msgid "``django.db.models.fields.add_lazy_relation()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:714
msgid ""
"When time zone support is enabled, database backends that don't support time "
"zones no longer convert aware datetimes to naive values in UTC anymore when "
"such values are passed as parameters to SQL queries executed outside of the "
"ORM, e.g. with ``cursor.execute()``."
msgstr ""

#: ../../releases/2.0.txt:719
msgid "``django.contrib.auth.tests.utils.skipIfCustomUser()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:721
msgid "The ``GeoManager`` and ``GeoQuerySet`` classes are removed."
msgstr ""

#: ../../releases/2.0.txt:723
msgid "The ``django.contrib.gis.geoip`` module is removed."
msgstr ""

#: ../../releases/2.0.txt:725
msgid "The ``supports_recursion`` check for template loaders is removed from:"
msgstr ""

#: ../../releases/2.0.txt:727
msgid "``django.template.engine.Engine.find_template()``"
msgstr ""

#: ../../releases/2.0.txt:728
msgid "``django.template.loader_tags.ExtendsNode.find_template()``"
msgstr ""

#: ../../releases/2.0.txt:729
msgid "``django.template.loaders.base.Loader.supports_recursion()``"
msgstr ""

#: ../../releases/2.0.txt:730
msgid "``django.template.loaders.cached.Loader.supports_recursion()``"
msgstr ""

#: ../../releases/2.0.txt:732
msgid ""
"The ``load_template`` and ``load_template_sources`` template loader methods "
"are removed."
msgstr ""

#: ../../releases/2.0.txt:735
msgid "The ``template_dirs`` argument for template loaders is removed:"
msgstr ""

#: ../../releases/2.0.txt:737
msgid "``django.template.loaders.base.Loader.get_template()``"
msgstr ""

#: ../../releases/2.0.txt:738
msgid "``django.template.loaders.cached.Loader.cache_key()``"
msgstr ""

#: ../../releases/2.0.txt:739
msgid "``django.template.loaders.cached.Loader.get_template()``"
msgstr ""

#: ../../releases/2.0.txt:740
msgid "``django.template.loaders.cached.Loader.get_template_sources()``"
msgstr ""

#: ../../releases/2.0.txt:741
msgid "``django.template.loaders.filesystem.Loader.get_template_sources()``"
msgstr ""

#: ../../releases/2.0.txt:743
msgid "``django.template.loaders.base.Loader.__call__()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:745
msgid ""
"Support for custom error views that don't accept an ``exception`` parameter "
"is removed."
msgstr ""

#: ../../releases/2.0.txt:748
msgid ""
"The ``mime_type`` attribute of ``django.utils.feedgenerator.Atom1Feed`` and "
"``django.utils.feedgenerator.RssFeed`` is removed."
msgstr ""

#: ../../releases/2.0.txt:751
msgid "The ``app_name`` argument to ``include()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:753
msgid ""
"Support for passing a 3-tuple (including ``admin.site.urls``) as the first "
"argument to ``include()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:756
msgid ""
"Support for setting a URL instance namespace without an application "
"namespace is removed."
msgstr ""

#: ../../releases/2.0.txt:759
msgid "``Field._get_val_from_obj()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:761
msgid "``django.template.loaders.eggs.Loader`` is removed."
msgstr ""

#: ../../releases/2.0.txt:763
msgid ""
"The ``current_app`` parameter to the ``contrib.auth`` function-based views "
"is removed."
msgstr ""

#: ../../releases/2.0.txt:766
msgid ""
"The ``callable_obj`` keyword argument to ``SimpleTestCase."
"assertRaisesMessage()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:769
msgid ""
"Support for the ``allow_tags`` attribute on ``ModelAdmin`` methods is "
"removed."
msgstr ""

#: ../../releases/2.0.txt:772
msgid ""
"The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is "
"removed."
msgstr ""

#: ../../releases/2.0.txt:775
msgid ""
"The ``django.template.loader.LoaderOrigin`` and ``django.template.base."
"StringOrigin`` aliases for ``django.template.base.Origin`` are removed."
msgstr ""

#: ../../releases/2.0.txt:779
msgid "See :ref:`deprecated-features-1.10` for details on these changes."
msgstr ""

#: ../../releases/2.0.txt:781
msgid "The ``makemigrations --exit`` option is removed."
msgstr ""

#: ../../releases/2.0.txt:783
msgid ""
"Support for direct assignment to a reverse foreign key or many-to-many "
"relation is removed."
msgstr ""

#: ../../releases/2.0.txt:786
msgid ""
"The ``get_srid()`` and ``set_srid()`` methods of ``django.contrib.gis.geos."
"GEOSGeometry`` are removed."
msgstr ""

#: ../../releases/2.0.txt:789
msgid ""
"The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and "
"``set_z()`` methods of ``django.contrib.gis.geos.Point`` are removed."
msgstr ""

#: ../../releases/2.0.txt:792
msgid ""
"The ``get_coords()`` and ``set_coords()`` methods of ``django.contrib.gis."
"geos.Point`` are removed."
msgstr ""

#: ../../releases/2.0.txt:795
msgid ""
"The ``cascaded_union`` property of ``django.contrib.gis.geos.MultiPolygon`` "
"is removed."
msgstr ""

#: ../../releases/2.0.txt:798
msgid "``django.utils.functional.allow_lazy()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:800
msgid "The ``shell --plain`` option is removed."
msgstr ""

#: ../../releases/2.0.txt:802
msgid ""
"The ``django.core.urlresolvers`` module is removed in favor of its new "
"location, ``django.urls``."
msgstr ""

#: ../../releases/2.0.txt:805
msgid ""
"``CommaSeparatedIntegerField`` is removed, except for support in historical "
"migrations."
msgstr ""

#: ../../releases/2.0.txt:808
msgid "The template ``Context.has_key()`` method is removed."
msgstr ""

#: ../../releases/2.0.txt:810
msgid ""
"Support for the ``django.core.files.storage.Storage.accessed_time()``, "
"``created_time()``, and ``modified_time()`` methods is removed."
msgstr ""

#: ../../releases/2.0.txt:813
msgid ""
"Support for query lookups using the model name when ``Meta."
"default_related_name`` is set is removed."
msgstr ""

#: ../../releases/2.0.txt:816
msgid "The MySQL ``__search`` lookup is removed."
msgstr ""

#: ../../releases/2.0.txt:818
msgid ""
"The shim for supporting custom related manager classes without a "
"``_apply_rel_filters()`` method is removed."
msgstr ""

#: ../../releases/2.0.txt:821
msgid ""
"Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods "
"rather than properties is no longer supported."
msgstr ""

#: ../../releases/2.0.txt:824
msgid "The ``Model._meta.virtual_fields`` attribute is removed."
msgstr ""

#: ../../releases/2.0.txt:826
msgid ""
"The keyword arguments ``virtual_only`` in ``Field.contribute_to_class()`` "
"and ``virtual`` in ``Model._meta.add_field()`` are removed."
msgstr ""

#: ../../releases/2.0.txt:829
msgid "The ``javascript_catalog()`` and ``json_catalog()`` views are removed."
msgstr ""

#: ../../releases/2.0.txt:831
msgid "``django.contrib.gis.utils.precision_wkt()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:833
msgid ""
"In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a "
"``parent_link`` is removed."
msgstr ""

#: ../../releases/2.0.txt:836
msgid "Support for ``Widget._format_value()`` is removed."
msgstr ""

#: ../../releases/2.0.txt:838
msgid ""
"``FileField`` methods ``get_directory_name()`` and ``get_filename()`` are "
"removed."
msgstr ""

#: ../../releases/2.0.txt:841
msgid ""
"The ``mark_for_escaping()`` function and the classes it uses: "
"``EscapeData``, ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and "
"``EscapeUnicode`` are removed."
msgstr ""

#: ../../releases/2.0.txt:845
msgid ""
"The ``escape`` filter now uses ``django.utils.html.conditional_escape()``."
msgstr ""

#: ../../releases/2.0.txt:847
msgid "``Manager.use_for_related_fields`` is removed."
msgstr ""

#: ../../releases/2.0.txt:849
msgid ""
"Model ``Manager`` inheritance follows MRO inheritance rules. The requirement "
"to use ``Meta.manager_inheritance_from_future`` to opt-in to the behavior is "
"removed."
msgstr ""

#: ../../releases/2.0.txt:853
msgid ""
"Support for old-style middleware using ``settings.MIDDLEWARE_CLASSES`` is "
"removed."
msgstr ""
