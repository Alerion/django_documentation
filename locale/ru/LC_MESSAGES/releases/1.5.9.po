# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2014-09-09 11:16+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# d49cb0f8b69745efb13ea25e61efb23f
#: ../../releases/1.5.9.txt:3
msgid "Django 1.5.9 release notes"
msgstr ""

# 5ad1732db2804cca88c2a9c780145f41
#: ../../releases/1.5.9.txt:5
msgid "*August 20, 2014*"
msgstr ""

# d45a5ae541604eac9af7d69b7997ec6b
#: ../../releases/1.5.9.txt:7
msgid "Django 1.5.9 fixes several security issues in 1.5.8."
msgstr ""

#: ../../releases/1.5.9.txt:10
msgid "``reverse()`` could generate URLs pointing to other hosts"
msgstr ""

# c1753f5e1c974ea4883c0e222db685d6
#: ../../releases/1.5.9.txt:12
msgid ""
"In certain situations, URL reversing could generate scheme-relative URLs  "
"(URLs starting with two slashes), which could unexpectedly redirect a user  "
"to a different host. An attacker could exploit this, for example, by "
"redirecting users to a phishing site designed to ask for user's passwords."
msgstr ""

# ea5f39957d034b548dded86a51969729
#: ../../releases/1.5.9.txt:17
msgid ""
"To remedy this, URL reversing now ensures that no URL starts with two "
"slashes (//), replacing the second slash with its URL encoded counterpart "
"(%2F). This approach ensures that semantics stay the same, while making the "
"URL relative to the domain and not to the scheme."
msgstr ""

# 5c3923cdb89d4f9c98879f95521e89a5
#: ../../releases/1.5.9.txt:23
msgid "File upload denial-of-service"
msgstr ""

# 81721d61229e47c09e89eea1bbeac4a2
#: ../../releases/1.5.9.txt:25
msgid ""
"Before this release, Django's file upload handing in its default "
"configuration may degrade to producing a huge number of ``os.stat()`` system "
"calls when a duplicate filename is uploaded. Since ``stat()`` may invoke IO, "
"this may produce a huge data-dependent slowdown that slowly worsens over "
"time. The net result is that given enough time, a user with the ability to "
"upload files can cause poor performance in the upload handler, eventually "
"causing it to become very slow simply by uploading 0-byte files. At this "
"point, even a slow network connection and few HTTP requests would be all "
"that is necessary to make a site unavailable."
msgstr ""

# dfd7c8106e7647f4a8c8d9028207d908
#: ../../releases/1.5.9.txt:34
msgid ""
"We've remedied the issue by changing the algorithm for generating file names "
"if a file with the uploaded name already exists. :meth:`Storage."
"get_available_name() <django.core.files.storage.Storage.get_available_name>` "
"now appends an underscore plus a random 7 character alphanumeric string (e."
"g. ``\"_x3a1gho\"``), rather than iterating through an underscore followed "
"by a number (e.g. ``\"_1\"``, ``\"_2\"``, etc.)."
msgstr ""

# 070eb74853fe4b19bcea10059a8edab5
#: ../../releases/1.5.9.txt:43
msgid "``RemoteUserMiddleware`` session hijacking"
msgstr ""

# 718af1e086e542a6be0a9170dd1b0488
#: ../../releases/1.5.9.txt:45
msgid ""
"When using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware` "
"and the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header "
"between requests without an intervening logout could result in the prior "
"user's session being co-opted by the subsequent user. The middleware now "
"logs the user out on a failed login attempt."
msgstr ""

# 689749910af149b9aaa5d5f6f11a672d
#: ../../releases/1.5.9.txt:52
msgid "Data leakage via query string manipulation in ``contrib.admin``"
msgstr ""

# 989605a935dd412180ec0bcabd5f2702
#: ../../releases/1.5.9.txt:54
msgid ""
"In older versions of Django it was possible to reveal any field's data by "
"modifying the \"popup\" and \"to_field\" parameters of the query string on "
"an admin change form page. For example, requesting a URL like ``/admin/auth/"
"user/?pop=1&t=password`` and viewing the page's HTML allowed viewing the "
"password hash of each user. While the admin requires users to have "
"permissions to view the change form pages in the first place, this could "
"leak data if you rely on users having access to view only certain fields on "
"a model."
msgstr ""

# 7d528f3ae722443990dcbe2fde5f3695
#: ../../releases/1.5.9.txt:62
msgid ""
"To address the issue, an exception will now be raised if a ``to_field`` "
"value that isn't a related field to a model that has been registered with "
"the admin is specified."
msgstr ""
