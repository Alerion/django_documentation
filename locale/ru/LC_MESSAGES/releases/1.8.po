# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../releases/1.8.txt:3
msgid "Django 1.8 release notes"
msgstr ""

#: ../../releases/1.8.txt:5
msgid "*April 1, 2015*"
msgstr ""

#: ../../releases/1.8.txt:7
msgid "Welcome to Django 1.8!"
msgstr ""

#: ../../releases/1.8.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.8>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.8>` "
"you'll want to be aware of when upgrading from Django 1.7 or older versions. "
"We've also :ref:`begun the deprecation process for some features <deprecated-"
"features-1.8>`, and some features have reached the end of their deprecation "
"process and :ref:`have been removed <removed-features-1.8>`."
msgstr ""

#: ../../releases/1.8.txt:16
msgid ""
"See the :doc:`/howto/upgrade-version` guide if you're updating an existing "
"project."
msgstr ""

#: ../../releases/1.8.txt:19
msgid ""
"Django 1.8 has been designated as Django's second :term:`long-term support "
"release`. It will receive security updates for at least three years after "
"its release. Support for the previous LTS, Django 1.4, will end 6 months "
"from the release date of Django 1.8."
msgstr ""

#: ../../releases/1.8.txt:25
msgid "Python compatibility"
msgstr ""

#: ../../releases/1.8.txt:27
msgid ""
"Django 1.8 requires Python 2.7, 3.2, 3.3, 3.4, or 3.5. We **highly "
"recommend** and only officially support the latest release of each series."
msgstr ""

#: ../../releases/1.8.txt:30
msgid "Django 1.8 is the first release to support Python 3.5."
msgstr ""

#: ../../releases/1.8.txt:32
msgid ""
"Due to the end of upstream support for Python 3.2 in February 2016, we won't "
"test Django 1.8.x on Python 3.2 after the end of 2016."
msgstr ""

#: ../../releases/1.8.txt:38
msgid "What's new in Django 1.8"
msgstr ""

#: ../../releases/1.8.txt:41
msgid "``Model._meta`` API"
msgstr ""

#: ../../releases/1.8.txt:43
msgid ""
"Django now has a formalized API for :doc:`Model._meta </ref/models/meta>`, "
"providing an officially supported way to :ref:`retrieve fields <model-meta-"
"field-api>` and filter fields based on their :ref:`attributes <model-field-"
"attributes>`."
msgstr ""

#: ../../releases/1.8.txt:48
msgid ""
"The ``Model._meta`` object has been part of Django since the days of "
"pre-0.96 \"Magic Removal\" -- it just wasn't an official, stable API. In "
"recognition of this, we've endeavored to maintain backwards-compatibility "
"with the old API endpoint where possible. However, API endpoints that aren't "
"part of the new official API have been deprecated and will eventually be "
"removed."
msgstr ""

#: ../../releases/1.8.txt:55
msgid "Multiple template engines"
msgstr ""

#: ../../releases/1.8.txt:57
msgid ""
"Django 1.8 defines a stable API for integrating template backends. It "
"includes built-in support for the Django template language and for :class:"
"`~django.template.backends.jinja2.Jinja2`. It supports rendering templates "
"with multiple engines within the same project. Learn more about the new "
"features in the :doc:`topic guide </topics/templates>` and check the upgrade "
"instructions in older versions of the documentation."
msgstr ""

#: ../../releases/1.8.txt:65
msgid "Security enhancements"
msgstr ""

#: ../../releases/1.8.txt:67
msgid ""
"Several features of the django-secure_ third-party library have been "
"integrated into Django. :class:`django.middleware.security."
"SecurityMiddleware` provides several security enhancements to the request/"
"response cycle. The new :option:`check --deploy` option allows you to check "
"your production settings file for ways to increase the security of your site."
msgstr ""

#: ../../releases/1.8.txt:76
msgid "New PostgreSQL specific functionality"
msgstr ""

#: ../../releases/1.8.txt:78
msgid ""
"Django now has a module with extensions for PostgreSQL specific features, "
"such as :class:`~django.contrib.postgres.fields.ArrayField`, :class:`~django."
"contrib.postgres.fields.HStoreField`, :ref:`range-fields`, and :lookup:"
"`unaccent` lookup. A full breakdown of the features is available :doc:`in "
"the documentation </ref/contrib/postgres/index>`."
msgstr ""

#: ../../releases/1.8.txt:85
msgid "New data types"
msgstr ""

#: ../../releases/1.8.txt:87
msgid ""
"Django now has a :class:`~django.db.models.UUIDField` for storing "
"universally unique identifiers. It is stored as the native ``uuid`` data "
"type on PostgreSQL and as a fixed length character field on other backends. "
"There is a corresponding :class:`form field <django.forms.UUIDField>`."
msgstr ""

#: ../../releases/1.8.txt:92
msgid ""
"Django now has a :class:`~django.db.models.DurationField` for storing "
"periods of time - modeled in Python by :class:`~python:datetime.timedelta`. "
"It is stored in the native ``interval`` data type on PostgreSQL, as a "
"``INTERVAL DAY(9) TO SECOND(6)`` on Oracle, and as a ``bigint`` of "
"microseconds on other backends. Date and time related arithmetic has also "
"been improved on all backends. There is a corresponding :class:`form field "
"<django.forms.DurationField>`."
msgstr ""

#: ../../releases/1.8.txt:101
msgid "Query Expressions, Conditional Expressions, and Database Functions"
msgstr ""

#: ../../releases/1.8.txt:103
msgid ""
":doc:`Query Expressions </ref/models/expressions>` allow you to create, "
"customize, and compose complex SQL expressions. This has enabled annotate to "
"accept expressions other than aggregates. Aggregates are now able to "
"reference multiple fields, as well as perform arithmetic, similar to ``F()`` "
"objects. :meth:`~django.db.models.query.QuerySet.order_by` has also gained "
"the ability to accept expressions."
msgstr ""

#: ../../releases/1.8.txt:110
msgid ""
":doc:`Conditional Expressions </ref/models/conditional-expressions>` allow "
"you to use :keyword:`if` ... :keyword:`elif` ... :keyword:`else` logic "
"within queries."
msgstr ""

#: ../../releases/1.8.txt:114
msgid ""
"A collection of :doc:`database functions </ref/models/database-functions>` "
"is also included with functionality such as :class:`~django.db.models."
"functions.Coalesce`, :class:`~django.db.models.functions.Concat`, and :class:"
"`~django.db.models.functions.Substr`."
msgstr ""

#: ../../releases/1.8.txt:121
msgid "``TestCase`` data setup"
msgstr ""

#: ../../releases/1.8.txt:123
msgid ""
":class:`~django.test.TestCase` has been refactored to allow for data "
"initialization at the class level using transactions and savepoints. "
"Database backends which do not support transactions, like MySQL with the "
"MyISAM storage engine, will still be able to run these tests but won't "
"benefit from the improvements. Tests are now run within two nested :func:"
"`~django.db.transaction.atomic()` blocks: one for the whole class and one "
"for each test."
msgstr ""

#: ../../releases/1.8.txt:131
msgid ""
"The class method :meth:`TestCase.setUpTestData() <django.test.TestCase."
"setUpTestData>` adds the ability to setup test data at the class level. "
"Using this technique can speed up the tests as compared to using ``setUp()``."
msgstr ""

#: ../../releases/1.8.txt:136
msgid ""
"Fixture loading within ``TestCase`` is now performed once for the whole "
"``TestCase``."
msgstr ""

#: ../../releases/1.8.txt:140
msgid "Minor features"
msgstr ""

#: ../../releases/1.8.txt:143 ../../releases/1.8.txt:1024
msgid ":mod:`django.contrib.admin`"
msgstr ""

#: ../../releases/1.8.txt:145
msgid ""
":class:`~django.contrib.admin.ModelAdmin` now has a :meth:`~django.contrib."
"admin.ModelAdmin.has_module_permission` method to allow limiting access to "
"the module on the admin index page."
msgstr ""

#: ../../releases/1.8.txt:149
msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` now has an attribute :attr:"
"`~django.contrib.admin.InlineModelAdmin.show_change_link` that supports "
"showing a link to an inline object's change form."
msgstr ""

#: ../../releases/1.8.txt:153
msgid ""
"Use the new ``django.contrib.admin.RelatedOnlyFieldListFilter`` in :attr:"
"`ModelAdmin.list_filter <django.contrib.admin.ModelAdmin.list_filter>` to "
"limit the ``list_filter`` choices to foreign objects which are attached to "
"those from the ``ModelAdmin``."
msgstr ""

#: ../../releases/1.8.txt:158
msgid ""
"The :meth:`ModelAdmin.delete_view() <django.contrib.admin.ModelAdmin."
"delete_view>` displays a summary of objects to be deleted on the deletion "
"confirmation page."
msgstr ""

#: ../../releases/1.8.txt:162
msgid ""
"The jQuery library embedded in the admin has been upgraded to version 1.11.2."
msgstr ""

#: ../../releases/1.8.txt:164
msgid ""
"You can now specify :attr:`AdminSite.site_url <django.contrib.admin."
"AdminSite.site_url>` in order to display a link to the front-end site."
msgstr ""

#: ../../releases/1.8.txt:168
msgid ""
"You can now specify :attr:`ModelAdmin.show_full_result_count <django.contrib."
"admin.ModelAdmin.show_full_result_count>` to control whether or not the full "
"count of objects should be displayed on a filtered admin page."
msgstr ""

#: ../../releases/1.8.txt:172
msgid ""
"The ``AdminSite.password_change()`` method now has an ``extra_context`` "
"parameter."
msgstr ""

#: ../../releases/1.8.txt:175
msgid ""
"You can now control who may login to the admin site by overriding only :meth:"
"`AdminSite.has_permission() <django.contrib.admin.AdminSite.has_permission>` "
"and :attr:`AdminSite.login_form <django.contrib.admin.AdminSite."
"login_form>`. The ``base.html`` template has a new block ``usertools`` which "
"contains the user-specific header. A new context variable "
"``has_permission``, which gets its value from :meth:`~django.contrib.admin."
"AdminSite.has_permission`, indicates whether the user may access the site."
msgstr ""

#: ../../releases/1.8.txt:184
msgid ""
"Foreign key dropdowns now have buttons for changing or deleting related "
"objects using a popup."
msgstr ""

#: ../../releases/1.8.txt:188
msgid ":mod:`django.contrib.admindocs`"
msgstr ""

#: ../../releases/1.8.txt:190
msgid "reStructuredText is now parsed in model docstrings."
msgstr ""

#: ../../releases/1.8.txt:193
msgid ":mod:`django.contrib.auth`"
msgstr ""

#: ../../releases/1.8.txt:195
msgid ""
"Authorization backends can now raise :class:`~django.core.exceptions."
"PermissionDenied` in :meth:`~django.contrib.auth.models.User.has_perm` and :"
"meth:`~django.contrib.auth.models.User.has_module_perms` to short-circuit "
"permission checking."
msgstr ""

#: ../../releases/1.8.txt:200
msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm` now has a method :meth:"
"`~django.contrib.auth.forms.PasswordResetForm.send_mail` that can be "
"overridden to customize the mail to be sent."
msgstr ""

#: ../../releases/1.8.txt:204
msgid ""
"The ``max_length`` of :attr:`Permission.name <django.contrib.auth.models."
"Permission.name>` has been increased from 50 to 255 characters. Please run "
"the database migration."
msgstr ""

#: ../../releases/1.8.txt:208
msgid ""
":attr:`~django.contrib.auth.models.CustomUser.USERNAME_FIELD` and :attr:"
"`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` now supports :class:"
"`~django.db.models.ForeignKey`\\s."
msgstr ""

#: ../../releases/1.8.txt:212
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 33%. This backwards compatible change will not affect users who "
"have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""

#: ../../releases/1.8.txt:218 ../../releases/1.8.txt:892
msgid ":mod:`django.contrib.gis`"
msgstr ""

#: ../../releases/1.8.txt:220
msgid ""
"A new :doc:`GeoJSON serializer </ref/contrib/gis/serializers>` is now "
"available."
msgstr ""

#: ../../releases/1.8.txt:223
msgid ""
"It is now allowed to include a subquery as a geographic lookup argument, for "
"example ``City.objects.filter(point__within=Country.objects."
"filter(continent='Africa').values('mpoly'))``."
msgstr ""

#: ../../releases/1.8.txt:226
msgid ""
"The SpatiaLite backend now supports ``Collect`` and ``Extent`` aggregates "
"when the database version is 3.0 or later."
msgstr ""

#: ../../releases/1.8.txt:229
msgid ""
"The PostGIS 2 ``CREATE EXTENSION postgis`` and the SpatiaLite ``SELECT "
"InitSpatialMetaData`` initialization commands are now automatically run by :"
"djadmin:`migrate`."
msgstr ""

#: ../../releases/1.8.txt:233
msgid ""
"The GDAL interface now supports retrieving properties of :ref:`raster "
"(image) data file <raster-data-source-objects>`."
msgstr ""

#: ../../releases/1.8.txt:236
msgid ""
"Compatibility shims for ``SpatialRefSys`` and ``GeometryColumns`` changed in "
"Django 1.2 have been removed."
msgstr ""

#: ../../releases/1.8.txt:239
msgid ""
"All GDAL-related exceptions are now raised with ``GDALException``. The "
"former ``OGRException`` has been kept for backwards compatibility but should "
"not be used any longer."
msgstr ""

#: ../../releases/1.8.txt:244
msgid ":mod:`django.contrib.sessions`"
msgstr ""

#: ../../releases/1.8.txt:246
msgid ""
"Session cookie is now deleted after :meth:`~django.contrib.sessions.backends."
"base.SessionBase.flush()` is called."
msgstr ""

#: ../../releases/1.8.txt:250
msgid ":mod:`django.contrib.sitemaps`"
msgstr ""

#: ../../releases/1.8.txt:252
msgid ""
"The new :attr:`Sitemap.i18n <django.contrib.sitemaps.Sitemap.i18n>` "
"attribute allows you to generate a sitemap based on the :setting:`LANGUAGES` "
"setting."
msgstr ""

#: ../../releases/1.8.txt:256
msgid ":mod:`django.contrib.sites`"
msgstr ""

#: ../../releases/1.8.txt:258
msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` will now lookup the "
"current site based on :meth:`request.get_host() <django.http.HttpRequest."
"get_host>` if the :setting:`SITE_ID` setting is not defined."
msgstr ""

#: ../../releases/1.8.txt:263
msgid ""
"The default :class:`~django.contrib.sites.models.Site` created when running "
"``migrate`` now respects the :setting:`SITE_ID` setting (instead of always "
"using ``pk=1``)."
msgstr ""

#: ../../releases/1.8.txt:268
msgid "Cache"
msgstr ""

#: ../../releases/1.8.txt:270
msgid ""
"The ``incr()`` method of the ``django.core.cache.backends.locmem."
"LocMemCache`` backend is now thread-safe."
msgstr ""

#: ../../releases/1.8.txt:274
msgid "Cryptography"
msgstr ""

#: ../../releases/1.8.txt:276
msgid ""
"The ``max_age`` parameter of the :meth:`django.core.signing.TimestampSigner."
"unsign` method now also accepts a :py:class:`datetime.timedelta` object."
msgstr ""

#: ../../releases/1.8.txt:281
msgid "Database backends"
msgstr ""

#: ../../releases/1.8.txt:283
msgid ""
"The MySQL backend no longer strips microseconds from ``datetime`` values as "
"MySQL 5.6.4 and up supports fractional seconds depending on the declaration "
"of the datetime field (when ``DATETIME`` includes fractional precision "
"greater than 0). New datetime database columns created with Django 1.8 and "
"MySQL 5.6.4 and up will support microseconds. See the :ref:`MySQL database "
"notes <mysql-fractional-seconds>` for more details."
msgstr ""

#: ../../releases/1.8.txt:290
msgid ""
"The MySQL backend no longer creates explicit indexes for foreign keys when "
"using the InnoDB storage engine, as MySQL already creates them automatically."
msgstr ""

#: ../../releases/1.8.txt:293
msgid ""
"The Oracle backend no longer defines the ``connection_persists_old_columns`` "
"feature as ``True``. Instead, Oracle will now include a cache busting clause "
"when getting the description of a table."
msgstr ""

#: ../../releases/1.8.txt:298
msgid "Email"
msgstr ""

#: ../../releases/1.8.txt:300
msgid ""
":ref:`Email backends <topic-email-backends>` now support the context manager "
"protocol for opening and closing connections."
msgstr ""

#: ../../releases/1.8.txt:303
msgid ""
"The SMTP email backend now supports ``keyfile`` and ``certfile`` "
"authentication with the :setting:`EMAIL_SSL_CERTFILE` and :setting:"
"`EMAIL_SSL_KEYFILE` settings."
msgstr ""

#: ../../releases/1.8.txt:307
msgid ""
"The SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` now supports "
"setting the ``timeout`` parameter with the :setting:`EMAIL_TIMEOUT` setting."
msgstr ""

#: ../../releases/1.8.txt:310
msgid ""
":class:`~django.core.mail.EmailMessage` and ``EmailMultiAlternatives`` now "
"support the ``reply_to`` parameter."
msgstr ""

#: ../../releases/1.8.txt:314
msgid "File Storage"
msgstr ""

#: ../../releases/1.8.txt:316
msgid ""
":meth:`Storage.get_available_name() <django.core.files.storage.Storage."
"get_available_name>` and :meth:`Storage.save() <django.core.files.storage."
"Storage.save>` now take a ``max_length`` argument to implement storage-level "
"maximum filename length constraints. Filenames exceeding this argument will "
"get truncated. This prevents a database error when appending a unique suffix "
"to a long filename that already exists on the storage. See the :ref:"
"`deprecation note <storage-max-length-update>` about adding this argument to "
"your custom storage classes."
msgstr ""

#: ../../releases/1.8.txt:327
msgid "Forms"
msgstr ""

#: ../../releases/1.8.txt:329
msgid ""
"Form widgets now render attributes with a value of ``True`` or ``False`` as "
"HTML5 boolean attributes."
msgstr ""

#: ../../releases/1.8.txt:332
msgid ""
"The new :meth:`~django.forms.Form.has_error()` method allows checking if a "
"specific error has happened."
msgstr ""

#: ../../releases/1.8.txt:335
msgid ""
"If :attr:`~django.forms.Form.required_css_class` is defined on a form, then "
"the ``<label>`` tags for required fields will have this class present in its "
"attributes."
msgstr ""

#: ../../releases/1.8.txt:339
msgid ""
"The rendering of non-field errors in unordered lists (``<ul>``) now includes "
"``nonfield`` in its list of classes to distinguish them from field-specific "
"errors."
msgstr ""

#: ../../releases/1.8.txt:343
msgid ""
":class:`~django.forms.Field` now accepts a :attr:`~django.forms.Field."
"label_suffix` argument, which will override the form's :attr:`~django.forms."
"Form.label_suffix`. This enables customizing the suffix on a per-field basis "
"— previously it wasn't possible to override a form's :attr:`~django.forms."
"Form.label_suffix` while using  shortcuts such as ``{{ form.as_p }}`` in "
"templates."
msgstr ""

#: ../../releases/1.8.txt:350
msgid ""
":class:`~django.forms.SelectDateWidget` now accepts an :attr:`~django.forms."
"SelectDateWidget.empty_label` argument, which will override the top list "
"choice label when :class:`~django.forms.DateField` is not required."
msgstr ""

#: ../../releases/1.8.txt:355
msgid ""
"After an :class:`~django.forms.ImageField` has been cleaned and validated, "
"the ``UploadedFile`` object will have an additional ``image`` attribute "
"containing the Pillow ``Image`` instance used to check if the file was a "
"valid image. It will also update ``UploadedFile.content_type`` with the "
"image's content type as determined by Pillow."
msgstr ""

#: ../../releases/1.8.txt:361
msgid ""
"You can now pass a callable that returns an iterable of choices when "
"instantiating a :class:`~django.forms.ChoiceField`."
msgstr ""

#: ../../releases/1.8.txt:365
msgid "Generic Views"
msgstr ""

#: ../../releases/1.8.txt:367
msgid ""
"Generic views that use :class:`~django.views.generic.list."
"MultipleObjectMixin` may now specify the ordering applied to the :attr:"
"`~django.views.generic.list.MultipleObjectMixin.queryset` by setting :attr:"
"`~django.views.generic.list.MultipleObjectMixin.ordering` or overriding :"
"meth:`~django.views.generic.list.MultipleObjectMixin.get_ordering()`."
msgstr ""

#: ../../releases/1.8.txt:373
msgid ""
"The new :attr:`SingleObjectMixin.query_pk_and_slug <django.views.generic."
"detail.SingleObjectMixin.query_pk_and_slug>` attribute allows changing the "
"behavior of :meth:`~django.views.generic.detail.SingleObjectMixin."
"get_object()` so that it'll perform its lookup using both the primary key "
"and the slug."
msgstr ""

#: ../../releases/1.8.txt:379
msgid ""
"The :meth:`~django.views.generic.edit.FormMixin.get_form()` method doesn't "
"require a ``form_class`` to be provided anymore. If not provided "
"``form_class`` defaults to :meth:`~django.views.generic.edit.FormMixin."
"get_form_class()`."
msgstr ""

#: ../../releases/1.8.txt:383
msgid ""
"Placeholders in :attr:`ModelFormMixin.success_url <django.views.generic.edit."
"ModelFormMixin.success_url>` now support the Python :py:meth:`str.format()` "
"syntax. The legacy ``%(<foo>)s`` syntax is still supported but will be "
"removed in Django 1.10."
msgstr ""

#: ../../releases/1.8.txt:389
msgid "Internationalization"
msgstr ""

#: ../../releases/1.8.txt:391
msgid ""
":setting:`FORMAT_MODULE_PATH` can now be a list of strings representing "
"module paths. This allows importing several format modules from different "
"reusable apps. It also allows overriding those custom formats in your main "
"Django project."
msgstr ""

#: ../../releases/1.8.txt:397
msgid "Logging"
msgstr ""

#: ../../releases/1.8.txt:399
msgid ""
"The :class:`django.utils.log.AdminEmailHandler` class now has a :meth:"
"`~django.utils.log.AdminEmailHandler.send_mail` method to make it more "
"subclass friendly."
msgstr ""

#: ../../releases/1.8.txt:404
msgid "Management Commands"
msgstr ""

#: ../../releases/1.8.txt:406
msgid ""
"Database connections are now always closed after a management command called "
"from the command line has finished doing its job."
msgstr ""

#: ../../releases/1.8.txt:409
msgid ""
"Commands from alternate package formats like eggs are now also discovered."
msgstr ""

#: ../../releases/1.8.txt:411
msgid ""
"The new :option:`dumpdata --output` option allows specifying a file to which "
"the serialized data is written."
msgstr ""

#: ../../releases/1.8.txt:414
msgid ""
"The new :option:`makemessages --exclude` and :option:`compilemessages --"
"exclude` options allow excluding specific locales from processing."
msgstr ""

#: ../../releases/1.8.txt:417
msgid ""
":djadmin:`compilemessages` now has a ``--use-fuzzy`` or ``-f`` option which "
"includes fuzzy translations into compiled files."
msgstr ""

#: ../../releases/1.8.txt:420
msgid ""
"The :option:`loaddata --ignorenonexistent` option now ignores data for "
"models that no longer exist."
msgstr ""

#: ../../releases/1.8.txt:423
msgid ":djadmin:`runserver` now uses daemon threads for faster reloading."
msgstr ""

#: ../../releases/1.8.txt:425
msgid ""
":djadmin:`inspectdb` now outputs ``Meta.unique_together``. It is also able "
"to introspect :class:`~django.db.models.AutoField` for MySQL and PostgreSQL "
"databases."
msgstr ""

#: ../../releases/1.8.txt:429
msgid ""
"When calling management commands with options using :func:`~django.core."
"management.call_command`, the option name can match the command line option "
"name (without the initial dashes) or the final option destination variable "
"name, but in either case, the resulting option received by the command is "
"now always the ``dest`` name specified in the command option definition (as "
"long as the command uses the :mod:`argparse` module)."
msgstr ""

#: ../../releases/1.8.txt:436
msgid ""
"The :djadmin:`dbshell` command now supports MySQL's optional SSL certificate "
"authority setting (``--ssl-ca``)."
msgstr ""

#: ../../releases/1.8.txt:439
msgid ""
"The new :option:`makemigrations --name` allows giving the migration(s) a "
"custom name instead of a generated one."
msgstr ""

#: ../../releases/1.8.txt:442
msgid ""
"The :djadmin:`loaddata` command now prevents repeated fixture loading. If :"
"setting:`FIXTURE_DIRS` contains duplicates or a default fixture directory "
"path (``app_name/fixtures``), an exception is raised."
msgstr ""

#: ../../releases/1.8.txt:446
msgid ""
"The new ``makemigrations --exit`` option allows exiting with an error code "
"if no migrations are created."
msgstr ""

#: ../../releases/1.8.txt:449
msgid ""
"The new :djadmin:`showmigrations` command allows listing all migrations and "
"their dependencies in a project."
msgstr ""

#: ../../releases/1.8.txt:453
msgid "Middleware"
msgstr ""

#: ../../releases/1.8.txt:455
msgid ""
"The :attr:`CommonMiddleware.response_redirect_class <django.middleware."
"common.CommonMiddleware.response_redirect_class>` attribute allows you to "
"customize the redirects issued by the middleware."
msgstr ""

#: ../../releases/1.8.txt:459
msgid ""
"A debug message will be logged to the ``django.request`` logger when a "
"middleware raises a :exc:`~django.core.exceptions.MiddlewareNotUsed` "
"exception in :setting:`DEBUG` mode."
msgstr ""

#: ../../releases/1.8.txt:464
msgid "Migrations"
msgstr ""

#: ../../releases/1.8.txt:466
msgid ""
"The :class:`~django.db.migrations.operations.RunSQL` operation can now "
"handle parameters passed to the SQL statements."
msgstr ""

#: ../../releases/1.8.txt:469
msgid ""
"It is now possible to have migrations (most probably :ref:`data migrations "
"<data-migrations>`) for applications without models."
msgstr ""

#: ../../releases/1.8.txt:472
msgid ""
"Migrations can now :ref:`serialize model managers <using-managers-in-"
"migrations>` as part of the model state."
msgstr ""

#: ../../releases/1.8.txt:475
msgid ""
"A :ref:`generic mechanism to handle the deprecation of model fields "
"<migrations-removing-model-fields>` was added."
msgstr ""

#: ../../releases/1.8.txt:478
msgid ""
"The :meth:`RunPython.noop() <django.db.migrations.operations.RunPython."
"noop>` and :attr:`RunSQL.noop <django.db.migrations.operations.RunSQL.noop>` "
"class method/attribute were added to ease in making ``RunPython`` and "
"``RunSQL`` operations reversible."
msgstr ""

#: ../../releases/1.8.txt:483
msgid ""
"The migration operations :class:`~django.db.migrations.operations.RunPython` "
"and :class:`~django.db.migrations.operations.RunSQL` now call the :meth:"
"`allow_migrate` method of database routers. The router can use the newly "
"introduced ``app_label`` and ``hints`` arguments to make a routing decision. "
"To take advantage of this feature you need to update the router to the new "
"``allow_migrate`` signature, see the :ref:`deprecation section <deprecated-"
"signature-of-allow-migrate>` for more details."
msgstr ""

#: ../../releases/1.8.txt:492
msgid "Models"
msgstr ""

#: ../../releases/1.8.txt:494
msgid ""
"Django now logs at most 9000 queries in ``connections.queries``, in order to "
"prevent excessive memory usage in long-running processes in debug mode."
msgstr ""

#: ../../releases/1.8.txt:497
msgid ""
"There is now a model ``Meta`` option to define a :attr:`default related name "
"<django.db.models.Options.default_related_name>` for all relational fields "
"of a model."
msgstr ""

#: ../../releases/1.8.txt:501
msgid ""
"Pickling models and querysets across different versions of Django isn't "
"officially supported (it may work, but there's no guarantee). An extra "
"variable that specifies the current Django version is now added to the "
"pickled state of models and querysets, and Django raises a "
"``RuntimeWarning`` when these objects are unpickled in a different version "
"than the one in which they were pickled."
msgstr ""

#: ../../releases/1.8.txt:508
msgid ""
"Added :meth:`Model.from_db() <django.db.models.Model.from_db()>` which "
"Django uses whenever objects are loaded using the ORM. The method allows "
"customizing model loading behavior."
msgstr ""

#: ../../releases/1.8.txt:512
msgid ""
"``extra(select={...})`` now allows you to escape a literal ``%s`` sequence "
"using ``%%s``."
msgstr ""

#: ../../releases/1.8.txt:515
msgid ""
":doc:`Custom Lookups</howto/custom-lookups>` can now be registered using a "
"decorator pattern."
msgstr ""

#: ../../releases/1.8.txt:518
msgid ""
"The new :attr:`Transform.bilateral <django.db.models.Transform.bilateral>` "
"attribute allows creating bilateral transformations. These transformations "
"are applied to both ``lhs`` and ``rhs`` when used in a lookup expression, "
"providing opportunities for more sophisticated lookups."
msgstr ""

#: ../../releases/1.8.txt:523
msgid ""
"SQL special characters (\\, %, _) are now escaped properly when a pattern "
"lookup (e.g. ``contains``, ``startswith``, etc.) is used with an ``F()`` "
"expression as the right-hand side. In those cases, the escaping is performed "
"by the database, which can lead to somewhat complex queries involving nested "
"``REPLACE`` function calls."
msgstr ""

#: ../../releases/1.8.txt:529
msgid ""
"You can now refresh model instances by using :meth:`Model.refresh_from_db() "
"<django.db.models.Model.refresh_from_db>`."
msgstr ""

#: ../../releases/1.8.txt:532
msgid ""
"You can now get the set of deferred fields for a model using :meth:`Model."
"get_deferred_fields() <django.db.models.Model.get_deferred_fields>`."
msgstr ""

#: ../../releases/1.8.txt:535
msgid ""
"Model field ``default``’s are now used when primary key field's are set to "
"``None``."
msgstr ""

#: ../../releases/1.8.txt:539
msgid "Signals"
msgstr ""

#: ../../releases/1.8.txt:541
msgid ""
"Exceptions from the ``(receiver, exception)`` tuples returned by :meth:"
"`Signal.send_robust() <django.dispatch.Signal.send_robust>` now have their "
"traceback attached as a ``__traceback__`` attribute."
msgstr ""

#: ../../releases/1.8.txt:545
msgid ""
"The ``environ`` argument, which contains the WSGI environment structure from "
"the request, was added to the :data:`~django.core.signals.request_started` "
"signal."
msgstr ""

#: ../../releases/1.8.txt:549
msgid ""
"You can now import the :func:`~django.test.signals.setting_changed` signal "
"from ``django.core.signals`` to avoid loading ``django.test`` in non-test "
"situations. Django no longer does so itself."
msgstr ""

#: ../../releases/1.8.txt:554
msgid "System Check Framework"
msgstr ""

#: ../../releases/1.8.txt:556
msgid ":attr:`~django.core.checks.register` can now be used as a function."
msgstr ""

#: ../../releases/1.8.txt:559
msgid "Templates"
msgstr ""

#: ../../releases/1.8.txt:561
msgid ""
":tfilter:`urlize` now supports domain-only links that include characters "
"after the top-level domain (e.g. ``djangoproject.com/`` and ``djangoproject."
"com/download/``)."
msgstr ""

#: ../../releases/1.8.txt:565
msgid ""
":tfilter:`urlize` doesn't treat exclamation marks at the end of a domain or "
"its query string as part of the URL (the URL in e.g. ``'djangoproject.com!`` "
"is ``djangoproject.com``)"
msgstr ""

#: ../../releases/1.8.txt:569
msgid ""
"Added a :class:`locmem.Loader <django.template.loaders.locmem.Loader>` class "
"that loads Django templates from a Python dictionary."
msgstr ""

#: ../../releases/1.8.txt:572
msgid ""
"The :ttag:`now` tag can now store its output in a context variable with the "
"usual syntax: ``{% now 'j n Y' as varname %}``."
msgstr ""

#: ../../releases/1.8.txt:576
msgid "Requests and Responses"
msgstr ""

#: ../../releases/1.8.txt:578
msgid "``WSGIRequest`` now respects paths starting with ``//``."
msgstr ""

#: ../../releases/1.8.txt:580
msgid ""
"The :meth:`HttpRequest.build_absolute_uri() <django.http.HttpRequest."
"build_absolute_uri>` method now handles paths starting with ``//`` correctly."
msgstr ""

#: ../../releases/1.8.txt:584
msgid ""
"If :setting:`DEBUG` is ``True`` and a request raises a :exc:`~django.core."
"exceptions.SuspiciousOperation`, the response will be rendered with a "
"detailed error page."
msgstr ""

#: ../../releases/1.8.txt:588
msgid ""
"The ``query_string`` argument of :class:`~django.http.QueryDict` is now "
"optional, defaulting to ``None``, so a blank ``QueryDict`` can now be "
"instantiated with ``QueryDict()`` instead of ``QueryDict(None)`` or "
"``QueryDict('')``."
msgstr ""

#: ../../releases/1.8.txt:593
msgid ""
"The ``GET`` and ``POST`` attributes of an :class:`~django.http.HttpRequest` "
"object are now :class:`~django.http.QueryDict`\\s rather than dictionaries, "
"and the ``FILES`` attribute is now a ``MultiValueDict``. This brings this "
"class into line with the documentation and with ``WSGIRequest``."
msgstr ""

#: ../../releases/1.8.txt:599
msgid ""
"The :attr:`HttpResponse.charset <django.http.HttpResponse.charset>` "
"attribute was added."
msgstr ""

#: ../../releases/1.8.txt:602
msgid ""
"``WSGIRequestHandler`` now follows RFC in converting URI to IRI, using "
"``uri_to_iri()``."
msgstr ""

#: ../../releases/1.8.txt:605
msgid ""
"The :meth:`HttpRequest.get_full_path() <django.http.HttpRequest."
"get_full_path>` method now escapes unsafe characters from the path portion "
"of a Uniform Resource Identifier (URI) properly."
msgstr ""

#: ../../releases/1.8.txt:609
msgid ""
":class:`~django.http.HttpResponse` now implements a few additional methods "
"like :meth:`~django.http.HttpResponse.getvalue` so that instances can be "
"used as stream objects."
msgstr ""

#: ../../releases/1.8.txt:613
msgid ""
"The new :meth:`HttpResponse.setdefault() <django.http.HttpResponse."
"setdefault>` method allows setting a header unless it has already been set."
msgstr ""

#: ../../releases/1.8.txt:617
msgid "You can use the new :class:`~django.http.FileResponse` to stream files."
msgstr ""

#: ../../releases/1.8.txt:619
msgid ""
"The :func:`~django.views.decorators.http.condition` decorator for "
"conditional view processing now supports the ``If-unmodified-since`` header."
msgstr ""

#: ../../releases/1.8.txt:623
msgid "Tests"
msgstr ""

#: ../../releases/1.8.txt:625
msgid ""
"The :class:`RequestFactory.trace() <django.test.RequestFactory>` and :class:"
"`Client.trace() <django.test.Client.trace>` methods were implemented, "
"allowing you to create ``TRACE`` requests in your tests."
msgstr ""

#: ../../releases/1.8.txt:629
msgid ""
"The ``count`` argument was added to :meth:`~django.test.SimpleTestCase."
"assertTemplateUsed`. This allows you to assert that a template was rendered "
"a specific number of times."
msgstr ""

#: ../../releases/1.8.txt:633
msgid ""
"The new :meth:`~django.test.SimpleTestCase.assertJSONNotEqual` assertion "
"allows you to test that two JSON fragments are not equal."
msgstr ""

#: ../../releases/1.8.txt:636
msgid ""
"Added options to the :djadmin:`test` command to preserve the test database (:"
"option:`--keepdb <test --keepdb>`), to run the test cases in reverse order (:"
"option:`--reverse <test --reverse>`), and to enable SQL logging for failing "
"tests (:option:`--debug-sql <test --debug-sql>`)."
msgstr ""

#: ../../releases/1.8.txt:641
msgid ""
"Added the :attr:`~django.test.Response.resolver_match` attribute to test "
"client responses."
msgstr ""

#: ../../releases/1.8.txt:644
msgid ""
"Added several settings that allow customization of test tablespace "
"parameters for Oracle: :setting:`DATAFILE`, :setting:`DATAFILE_TMP`, :"
"setting:`DATAFILE_MAXSIZE` and :setting:`DATAFILE_TMP_MAXSIZE`."
msgstr ""

#: ../../releases/1.8.txt:648
msgid ""
"The :func:`~django.test.override_settings` decorator can now affect the "
"master router in :setting:`DATABASE_ROUTERS`."
msgstr ""

#: ../../releases/1.8.txt:651
msgid "Added test client support for file uploads with file-like objects."
msgstr ""

#: ../../releases/1.8.txt:653
msgid ""
"A shared cache is now used when testing with an SQLite in-memory database "
"when using Python 3.4+ and SQLite 3.7.13+. This allows sharing the database "
"between threads."
msgstr ""

#: ../../releases/1.8.txt:658
msgid "Validators"
msgstr ""

#: ../../releases/1.8.txt:660
msgid ""
":class:`~django.core.validators.URLValidator` now supports IPv6 addresses, "
"unicode domains, and URLs containing authentication data."
msgstr ""

#: ../../releases/1.8.txt:666
msgid "Backwards incompatible changes in 1.8"
msgstr ""

#: ../../releases/1.8.txt:670
msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`deprecation plan <deprecation-removed-in-1.8>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

#: ../../releases/1.8.txt:677
msgid "Related object operations are run in a transaction"
msgstr ""

#: ../../releases/1.8.txt:679
msgid ""
"Some operations on related objects such as :meth:`~django.db.models.fields."
"related.RelatedManager.add()` or direct assignment ran multiple data "
"modifying queries without wrapping them in transactions. To reduce the risk "
"of data corruption, all data modifying methods that affect multiple related "
"objects (i.e. ``add()``, ``remove()``, ``clear()``, and direct assignment) "
"now perform their data modifying queries from within a transaction, provided "
"your database supports transactions."
msgstr ""

#: ../../releases/1.8.txt:687
msgid ""
"This has one backwards incompatible side effect, signal handlers triggered "
"from these methods are now executed within the method's transaction and any "
"exception in a signal handler will prevent the whole operation."
msgstr ""

#: ../../releases/1.8.txt:694
msgid "Assigning unsaved objects to relations raises an error"
msgstr ""

#: ../../releases/1.8.txt:698
msgid ""
"To more easily allow in-memory usage of models, this change was reverted in "
"Django 1.8.4 and replaced with a check during ``model.save()``. For example::"
msgstr ""

#: ../../releases/1.8.txt:708
msgid ""
"A similar check on assignment to reverse one-to-one relations was removed in "
"Django 1.8.5."
msgstr ""

#: ../../releases/1.8.txt:711
msgid ""
"Assigning unsaved objects to a :class:`~django.db.models.ForeignKey`, :class:"
"`~django.contrib.contenttypes.fields.GenericForeignKey`, and :class:`~django."
"db.models.OneToOneField` now raises a :exc:`ValueError`."
msgstr ""

#: ../../releases/1.8.txt:715
msgid ""
"Previously, the assignment of an unsaved object would be silently ignored. "
"For example::"
msgstr ""

#: ../../releases/1.8.txt:727
msgid "Now, an error will be raised to prevent data loss::"
msgstr ""

#: ../../releases/1.8.txt:734
msgid ""
"If you require allowing the assignment of unsaved instances (the old "
"behavior) and aren't concerned about the data loss possibility (e.g. you "
"never save the objects to the database), you can disable this check by using "
"the ``ForeignKey.allow_unsaved_instance_assignment`` attribute. (This "
"attribute was removed in 1.8.4 as it's no longer relevant.)"
msgstr ""

#: ../../releases/1.8.txt:741
msgid "Management commands that only accept positional arguments"
msgstr ""

#: ../../releases/1.8.txt:743
msgid ""
"If you have written a custom management command that only accepts positional "
"arguments and you didn't specify the ``args`` command variable, you might "
"get an error like ``Error: unrecognized arguments: ...``, as variable "
"parsing is now based on :py:mod:`argparse` which doesn't implicitly accept "
"positional arguments. You can make your command backwards compatible by "
"simply setting the ``args`` class variable. However, if you don't have to "
"keep compatibility with older Django versions, it's better to implement the "
"new :meth:`~django.core.management.BaseCommand.add_arguments` method as "
"described in :doc:`/howto/custom-management-commands`."
msgstr ""

#: ../../releases/1.8.txt:754
msgid "Custom test management command arguments through test runner"
msgstr ""

#: ../../releases/1.8.txt:756
msgid ""
"The method to add custom arguments to the `test` management command through "
"the test runner has changed. Previously, you could provide an `option_list` "
"class variable on the test runner to add more arguments (à la :py:mod:"
"`optparse`). Now to implement the same behavior, you have to create an "
"``add_arguments(cls, parser)`` class method on the test runner and call "
"``parser.add_argument`` to add any custom arguments, as parser is now an :py:"
"class:`argparse.ArgumentParser` instance."
msgstr ""

#: ../../releases/1.8.txt:765
msgid ""
"Model check ensures auto-generated column names are within limits specified "
"by database"
msgstr ""

#: ../../releases/1.8.txt:767
msgid ""
"A field name that's longer than the column name length supported by a "
"database can create problems. For example, with MySQL you'll get an "
"exception trying to create the column, and with PostgreSQL the column name "
"is truncated by the database (you may see a warning in the PostgreSQL logs)."
msgstr ""

#: ../../releases/1.8.txt:772
msgid ""
"A model check has been introduced to better alert users to this scenario "
"before the actual creation of database tables."
msgstr ""

#: ../../releases/1.8.txt:775
msgid ""
"If you have an existing model where this check seems to be a false positive, "
"for example on PostgreSQL where the name was already being truncated, simply "
"use :attr:`~django.db.models.Field.db_column` to specify the name that's "
"being used."
msgstr ""

#: ../../releases/1.8.txt:780
msgid ""
"The check also applies to the columns generated in an implicit "
"``ManyToManyField.through`` model. If you run into an issue there, use :attr:"
"`~django.db.models.ManyToManyField.through` to create an explicit model and "
"then specify :attr:`~django.db.models.Field.db_column` on its column(s) as "
"needed."
msgstr ""

#: ../../releases/1.8.txt:787
msgid "Query relation lookups now check object types"
msgstr ""

#: ../../releases/1.8.txt:789
msgid ""
"Querying for model lookups now checks if the object passed is of correct "
"type and raises a :exc:`ValueError` if not. Previously, Django didn't care "
"if the object was of correct type; it just used the object's related field "
"attribute (e.g. ``id``) for the lookup. Now, an error is raised to prevent "
"incorrect lookups::"
msgstr ""

#: ../../releases/1.8.txt:802
msgid "``select_related()`` now checks given fields"
msgstr ""

#: ../../releases/1.8.txt:804
msgid ""
"``select_related()`` now validates that the given fields actually exist. "
"Previously, nonexistent fields were silently ignored. Now, an error is "
"raised::"
msgstr ""

#: ../../releases/1.8.txt:812
msgid "The validation also makes sure that the given field is relational::"
msgstr ""

#: ../../releases/1.8.txt:820
msgid "Default ``EmailField.max_length`` increased to 254"
msgstr ""

#: ../../releases/1.8.txt:822
msgid ""
"The old default 75 character ``max_length`` was not capable of storing all "
"possible RFC3696/5321-compliant email addresses. In order to store all "
"possible valid email addresses, the ``max_length`` has been increased to 254 "
"characters. You will need to generate and apply database migrations for your "
"affected models (or add ``max_length=75`` if you wish to keep the length on "
"your current fields). A migration for :attr:`django.contrib.auth.models.User."
"email` is included."
msgstr ""

#: ../../releases/1.8.txt:831
msgid "Support for PostgreSQL versions older than 9.0"
msgstr ""

#: ../../releases/1.8.txt:833
msgid ""
"The end of upstream support periods was reached in July 2014 for PostgreSQL "
"8.4. As a consequence, Django 1.8 sets 9.0 as the minimum PostgreSQL version "
"it officially supports."
msgstr ""

#: ../../releases/1.8.txt:837
msgid ""
"This also includes dropping support for PostGIS 1.3 and 1.4 as these "
"versions are not supported on versions of PostgreSQL later than 8.4."
msgstr ""

#: ../../releases/1.8.txt:840
msgid ""
"Django also now requires the use of Psycopg2 version 2.4.5 or higher (or "
"2.5+ if you want to use :mod:`django.contrib.postgres`)."
msgstr ""

#: ../../releases/1.8.txt:844
msgid "Support for MySQL versions older than 5.5"
msgstr ""

#: ../../releases/1.8.txt:846
msgid ""
"The end of upstream support periods was reached in January 2012 for MySQL "
"5.0 and December 2013 for MySQL 5.1. As a consequence, Django 1.8 sets 5.5 "
"as the minimum MySQL version it officially supports."
msgstr ""

#: ../../releases/1.8.txt:851
msgid "Support for Oracle versions older than 11.1"
msgstr ""

#: ../../releases/1.8.txt:853
msgid ""
"The end of upstream support periods was reached in July 2010 for Oracle 9.2, "
"January 2012 for Oracle 10.1, and July 2013 for Oracle 10.2. As a "
"consequence, Django 1.8 sets 11.1 as the minimum Oracle version it "
"officially supports."
msgstr ""

#: ../../releases/1.8.txt:858
msgid "Specific privileges used instead of roles for tests on Oracle"
msgstr ""

#: ../../releases/1.8.txt:860
msgid ""
"Earlier versions of Django granted the CONNECT and RESOURCE roles to the "
"test user on Oracle. These roles have been deprecated, so Django 1.8 uses "
"the specific underlying privileges instead. This changes the privileges "
"required of the main user for running tests (unless the project is "
"configured to avoid creating a test user). The exact privileges required now "
"are detailed in :ref:`Oracle notes <oracle-notes>`."
msgstr ""

#: ../../releases/1.8.txt:868
msgid "``AbstractUser.last_login`` allows null values"
msgstr ""

#: ../../releases/1.8.txt:870
msgid ""
"The :attr:`AbstractUser.last_login <django.contrib.auth.models.User."
"last_login>` field now allows null values. Previously, it defaulted to the "
"time when the user was created which was misleading if the user never logged "
"in. If you are using the default user (:class:`django.contrib.auth.models."
"User`), run the database migration included in ``contrib.auth``."
msgstr ""

#: ../../releases/1.8.txt:876
msgid ""
"If you are using a custom user model that inherits from ``AbstractUser``, "
"you'll need to run :djadmin:`makemigrations` and generate a migration for "
"your app that contains that model. Also, if wish to set ``last_login`` to "
"``NULL`` for users who haven't logged in, you can run this query::"
msgstr ""

#: ../../releases/1.8.txt:894
msgid "Support for GEOS 3.1 and GDAL 1.6 has been dropped."
msgstr ""

#: ../../releases/1.8.txt:896
msgid "Support for SpatiaLite < 2.4 has been dropped."
msgstr ""

#: ../../releases/1.8.txt:898
msgid ""
"GIS-specific lookups have been refactored to use the :class:`django.db."
"models.Lookup` API."
msgstr ""

#: ../../releases/1.8.txt:901
msgid ""
"The default ``str`` representation of :class:`~django.contrib.gis.geos."
"GEOSGeometry` objects has been changed from WKT to EWKT format (including "
"the SRID). As this representation is used in the serialization framework, "
"that means that ``dumpdata`` output will now contain the SRID value of "
"geometry objects."
msgstr ""

#: ../../releases/1.8.txt:908
msgid ""
"Priority of context processors for ``TemplateResponse`` brought in line with "
"``render``"
msgstr ""

#: ../../releases/1.8.txt:910
msgid ""
"The :class:`~django.template.response.TemplateResponse` constructor is "
"designed to be a drop-in replacement for the :func:`~django.shortcuts."
"render` function. However, it had a slight incompatibility, in that for "
"``TemplateResponse``, context data from the passed in context dictionary "
"could be shadowed by context data returned from context processors, whereas "
"for ``render`` it was the other way around. This was a bug, and the behavior "
"of ``render`` is more appropriate, since it allows the globally defined "
"context processors to be overridden locally in the view. If you were relying "
"on the fact context data in a ``TemplateResponse`` could be overridden using "
"a context processor, you will need to change your code."
msgstr ""

#: ../../releases/1.8.txt:922
msgid "Overriding ``setUpClass`` / ``tearDownClass`` in test cases"
msgstr ""

#: ../../releases/1.8.txt:924
msgid ""
"The decorators :func:`~django.test.override_settings` and :func:`~django."
"test.modify_settings` now act at the class level when used as class "
"decorators. As a consequence, when overriding ``setUpClass()`` or "
"``tearDownClass()``, the ``super`` implementation should always be called."
msgstr ""

#: ../../releases/1.8.txt:930
msgid "Removal of ``django.contrib.formtools``"
msgstr ""

#: ../../releases/1.8.txt:932
msgid ""
"The formtools contrib app has been moved to a separate package and the "
"relevant documentation pages have been updated or removed."
msgstr ""

#: ../../releases/1.8.txt:935
msgid "The new package is available `on GitHub`_ and on PyPI."
msgstr ""

#: ../../releases/1.8.txt:940
msgid "Database connection reloading between tests"
msgstr ""

#: ../../releases/1.8.txt:942
msgid ""
"Django previously closed database connections between each test within a "
"``TestCase``. This is no longer the case as Django now wraps the whole "
"``TestCase`` within a transaction. If some of your tests relied on the old "
"behavior, you should have them inherit from ``TransactionTestCase`` instead."
msgstr ""

#: ../../releases/1.8.txt:948
msgid "Cleanup of the ``django.template`` namespace"
msgstr ""

#: ../../releases/1.8.txt:950
msgid ""
"If you've been relying on private APIs exposed in the ``django.template`` "
"module, you may have to import them from ``django.template.base`` instead."
msgstr ""

#: ../../releases/1.8.txt:953
msgid ""
"Also private APIs ``django.template.base.compile_string()``, ``django."
"template.loader.find_template()``, and ``django.template.loader."
"get_template_from_string()`` were removed."
msgstr ""

#: ../../releases/1.8.txt:958
msgid "``model`` attribute on private model relations"
msgstr ""

#: ../../releases/1.8.txt:960
msgid ""
"In earlier versions of Django, on a model with a reverse foreign key "
"relationship (for example), ``model._meta.get_all_related_objects()`` "
"returned the relationship as a ``django.db.models.related.RelatedObject`` "
"with the ``model`` attribute set to the source of the relationship. Now, "
"this method returns the relationship as ``django.db.models.fields.related."
"ManyToOneRel`` (private API ``RelatedObject`` has been removed), and the "
"``model`` attribute is set to the target of the relationship instead of the "
"source. The source model is accessible on the ``related_model`` attribute "
"instead."
msgstr ""

#: ../../releases/1.8.txt:969
msgid "Consider this example from the tutorial in Django 1.8::"
msgstr ""

#: ../../releases/1.8.txt:979
msgid "and compare it to the behavior on older versions::"
msgstr ""

#: ../../releases/1.8.txt:986
msgid ""
"To access the source model, you can use a pattern like this to write code "
"that will work with both Django 1.8 and older versions::"
msgstr ""

#: ../../releases/1.8.txt:992
msgid "Also note that ``get_all_related_objects()`` is deprecated in 1.8."
msgstr ""

#: ../../releases/1.8.txt:995
msgid "Database backend API"
msgstr ""

#: ../../releases/1.8.txt:997
msgid ""
"The following changes to the database backend API are documented to assist "
"those writing third-party backends in updating their code:"
msgstr ""

#: ../../releases/1.8.txt:1000
msgid ""
"``BaseDatabaseXXX`` classes have been moved to ``django.db.backends.base``. "
"Please import them from the new locations::"
msgstr ""

#: ../../releases/1.8.txt:1013
msgid ""
"The ``data_types``, ``data_types_suffix``, and "
"``data_type_check_constraints`` attributes have moved from the "
"``DatabaseCreation`` class to ``DatabaseWrapper``."
msgstr ""

#: ../../releases/1.8.txt:1017
msgid ""
"The ``SQLCompiler.as_sql()`` method now takes a ``subquery`` parameter (:"
"ticket:`24164`)."
msgstr ""

#: ../../releases/1.8.txt:1020
msgid ""
"The ``BaseDatabaseOperations.date_interval_sql()`` method now only takes a "
"``timedelta`` parameter."
msgstr ""

#: ../../releases/1.8.txt:1026
msgid ""
"``AdminSite`` no longer takes an ``app_name`` argument and its ``app_name`` "
"attribute has been removed. The application name is always ``admin`` (as "
"opposed to the instance name which you can still customize using "
"``AdminSite(name=\"...\")``."
msgstr ""

#: ../../releases/1.8.txt:1031
msgid ""
"The ``ModelAdmin.get_object()`` method (private API) now takes a third "
"argument named ``from_field`` in order to specify which field should match "
"the provided ``object_id``."
msgstr ""

#: ../../releases/1.8.txt:1035
msgid ""
"The :meth:`ModelAdmin.response_delete() <django.contrib.admin.ModelAdmin."
"response_delete>` method now takes a second argument named ``obj_id`` which "
"is the serialized identifier used to retrieve the object before deletion."
msgstr ""

#: ../../releases/1.8.txt:1041
msgid "Default autoescaping of functions in ``django.template.defaultfilters``"
msgstr ""

#: ../../releases/1.8.txt:1043
msgid ""
"In order to make built-in template filters that output HTML \"safe by default"
"\" when calling them in Python code, the following functions in ``django."
"template.defaultfilters`` have been changed to automatically escape their "
"input value:"
msgstr ""

#: ../../releases/1.8.txt:1048
msgid "``join``"
msgstr ""

#: ../../releases/1.8.txt:1049
msgid "``linebreaksbr``"
msgstr ""

#: ../../releases/1.8.txt:1050
msgid "``linebreaks_filter``"
msgstr ""

#: ../../releases/1.8.txt:1051
msgid "``linenumbers``"
msgstr ""

#: ../../releases/1.8.txt:1052
msgid "``unordered_list``"
msgstr ""

#: ../../releases/1.8.txt:1053
msgid "``urlize``"
msgstr ""

#: ../../releases/1.8.txt:1054
msgid "``urlizetrunc``"
msgstr ""

#: ../../releases/1.8.txt:1056
msgid ""
"You can revert to the old behavior by specifying ``autoescape=False`` if you "
"are passing trusted content. This change doesn't have any effect when using "
"the corresponding filters in templates."
msgstr ""

#: ../../releases/1.8.txt:1061
msgid "Miscellaneous"
msgstr ""

#: ../../releases/1.8.txt:1063
msgid "``connections.queries`` is now a read-only attribute."
msgstr ""

#: ../../releases/1.8.txt:1065
msgid ""
"Database connections are considered equal only if they're the same object. "
"They aren't hashable any more."
msgstr ""

#: ../../releases/1.8.txt:1068
msgid ""
":class:`~django.middleware.gzip.GZipMiddleware` used to disable compression "
"for some content types when the request is from Internet Explorer, in order "
"to work around a bug in IE6 and earlier. This behavior could affect "
"performance on IE7 and later. It was removed."
msgstr ""

#: ../../releases/1.8.txt:1073
msgid ""
"``URLField.to_python`` no longer adds a trailing slash to pathless URLs."
msgstr ""

#: ../../releases/1.8.txt:1075
msgid ""
"The :tfilter:`length` template filter now returns ``0`` for an undefined "
"variable, rather than an empty string."
msgstr ""

#: ../../releases/1.8.txt:1078
msgid ""
"``ForeignKey.default_error_message['invalid']`` has been changed from "
"``'%(model)s instance with pk %(pk)r does not exist.'`` to ``'%(model)s "
"instance with %(field)s %(value)r does not exist.'`` If you are using this "
"message in your own code, please update the list of interpolated parameters. "
"Internally, Django will continue to provide the ``pk`` parameter in "
"``params`` for backwards compatibility."
msgstr ""

#: ../../releases/1.8.txt:1085
msgid ""
"``UserCreationForm.error_messages['duplicate_username']`` is no longer used. "
"If you wish to customize that error message, :ref:`override it on the form "
"<modelforms-overriding-default-fields>` using the ``'unique'`` key in ``Meta."
"error_messages['username']`` or, if you have a custom form field for "
"``'username'``, using the ``'unique'`` key in its :attr:`~django.forms.Field."
"error_messages` argument."
msgstr ""

#: ../../releases/1.8.txt:1092
msgid ""
"The block ``usertools`` in the ``base.html`` template of :mod:`django."
"contrib.admin` now requires the ``has_permission`` context variable to be "
"set. If you have any custom admin views that use this template, update them "
"to pass :meth:`AdminSite.has_permission() <django.contrib.admin.AdminSite."
"has_permission>` as this new variable's value or simply include :meth:"
"`AdminSite.each_context(request) <django.contrib.admin.AdminSite."
"each_context>` in the context."
msgstr ""

#: ../../releases/1.8.txt:1100
msgid ""
"Internal changes were made to the :class:`~django.forms.ClearableFileInput` "
"widget to allow more customization. The undocumented ``url_markup_template`` "
"attribute was removed in favor of ``template_with_initial``."
msgstr ""

#: ../../releases/1.8.txt:1104
msgid ""
"For consistency with other major vendors, the ``en_GB`` locale now has "
"Monday as the first day of the week."
msgstr ""

#: ../../releases/1.8.txt:1107
msgid ""
"Seconds have been removed from any locales that had them in ``TIME_FORMAT``, "
"``DATETIME_FORMAT``, or ``SHORT_DATETIME_FORMAT``."
msgstr ""

#: ../../releases/1.8.txt:1110
msgid ""
"The default max size of the Oracle test tablespace has increased from 300M "
"(or 200M, before 1.7.2) to 500M."
msgstr ""

#: ../../releases/1.8.txt:1113
msgid ""
"``reverse()`` and ``reverse_lazy()`` now return Unicode strings instead of "
"bytestrings."
msgstr ""

#: ../../releases/1.8.txt:1116
msgid ""
"The ``CacheClass`` shim has been removed from all cache backends. These "
"aliases were provided for backwards compatibility with Django 1.3. If you "
"are still using them, please update your project to use the real class name "
"found in the :setting:`BACKEND <CACHES-BACKEND>` key of the :setting:"
"`CACHES` setting."
msgstr ""

#: ../../releases/1.8.txt:1122
msgid ""
"By default, :func:`~django.core.management.call_command` now always skips "
"the check framework (unless you pass it ``skip_checks=False``)."
msgstr ""

#: ../../releases/1.8.txt:1125
msgid ""
"When iterating over lines, :class:`~django.core.files.File` now uses "
"`universal newlines`_. The following are recognized as ending a line: the "
"Unix end-of-line convention ``'\\n'``, the Windows convention ``'\\r\\n'``, "
"and the old Macintosh convention ``'\\r'``."
msgstr ""

#: ../../releases/1.8.txt:1132
msgid ""
"The Memcached cache backends ``MemcachedCache`` and ``PyLibMCCache`` will "
"delete a key if ``set()`` fails. This is necessary to ensure the "
"``cache_db`` session store always fetches the most current session data."
msgstr ""

#: ../../releases/1.8.txt:1136
msgid ""
"Private APIs ``override_template_loaders`` and ``override_with_test_loader`` "
"in ``django.test.utils`` were removed. Override ``TEMPLATES`` with "
"``override_settings`` instead."
msgstr ""

#: ../../releases/1.8.txt:1140
msgid ""
"Warnings from the MySQL database backend are no longer converted to "
"exceptions when :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../releases/1.8.txt:1143
msgid ""
":class:`~django.http.HttpRequest` now has a simplified ``repr`` (e.g. "
"``<WSGIRequest: GET '/somepath/'>``). This won't change the behavior of the :"
"class:`~django.views.debug.SafeExceptionReporterFilter` class."
msgstr ""

#: ../../releases/1.8.txt:1147
msgid ""
"Class-based views that use :class:`~django.views.generic.edit."
"ModelFormMixin` will raise an :exc:`~django.core.exceptions."
"ImproperlyConfigured` exception when both the ``fields`` and ``form_class`` "
"attributes are specified. Previously, ``fields`` was silently ignored."
msgstr ""

#: ../../releases/1.8.txt:1152
msgid ""
"When following redirects, the test client now raises :exc:`~django.test."
"client.RedirectCycleError` if it detects a loop or hits a maximum redirect "
"limit (rather than passing silently)."
msgstr ""

#: ../../releases/1.8.txt:1156
msgid ""
"Translatable strings set as the ``default`` parameter of the field are cast "
"to concrete strings later, so the return type of ``Field.get_default()`` is "
"different in some cases. There is no change to default values which are the "
"result of a callable."
msgstr ""

#: ../../releases/1.8.txt:1161
msgid ""
"``GenericIPAddressField.empty_strings_allowed`` is now ``False``. Database "
"backends that interpret empty strings as null (only Oracle among the "
"backends that Django includes) will no longer convert null values back to an "
"empty string. This is consistent with other backends."
msgstr ""

#: ../../releases/1.8.txt:1166
msgid ""
"When the ``BaseCommand.leave_locale_alone`` attribute is ``False``, "
"translations are now deactivated instead of forcing the \"en-us\" locale. In "
"the case your models contained non-English strings and you counted on "
"English translations to be activated in management commands, this will not "
"happen any longer. It might be that new database migrations are generated "
"(once) after migrating to 1.8."
msgstr ""

#: ../../releases/1.8.txt:1173
msgid ""
":func:`django.utils.translation.get_language()` now returns ``None`` instead "
"of :setting:`LANGUAGE_CODE` when translations are temporarily deactivated."
msgstr ""

#: ../../releases/1.8.txt:1176
msgid ""
"When a translation doesn't exist for a specific literal, the fallback is now "
"taken from the :setting:`LANGUAGE_CODE` language (instead of from the "
"untranslated ``msgid`` message)."
msgstr ""

#: ../../releases/1.8.txt:1180
msgid ""
"The ``name`` field of :class:`django.contrib.contenttypes.models."
"ContentType` has been removed by a migration and replaced by a property. "
"That means it's not possible to query or filter a ``ContentType`` by this "
"field any longer."
msgstr ""

#: ../../releases/1.8.txt:1184
msgid ""
"Be careful if you upgrade to Django 1.8 and skip Django 1.7. If you run "
"``manage.py migrate --fake``, this migration will be skipped and you'll see "
"a ``RuntimeError: Error creating new content types.`` exception because the "
"``name`` column won't be dropped from the database. Use ``manage.py migrate "
"--fake-initial`` to fake only the initial migration instead."
msgstr ""

#: ../../releases/1.8.txt:1190
msgid ""
"The new :option:`migrate --fake-initial` option allows faking initial "
"migrations. In 1.7, initial migrations were always automatically faked if "
"all tables created in an initial migration already existed."
msgstr ""

#: ../../releases/1.8.txt:1194
msgid ""
"An app *without* migrations with a ``ForeignKey`` to an app *with* "
"migrations may now result in a foreign key constraint error when migrating "
"the database or running tests. In Django 1.7, this could fail silently and "
"result in a missing constraint. To resolve the error, add migrations to the "
"app without them."
msgstr ""

#: ../../releases/1.8.txt:1203
msgid "Features deprecated in 1.8"
msgstr ""

#: ../../releases/1.8.txt:1206
msgid "Selected methods in ``django.db.models.options.Options``"
msgstr ""

#: ../../releases/1.8.txt:1208
msgid ""
"As part of the formalization of the ``Model._meta`` API (from the :class:"
"`django.db.models.options.Options` class), a number of methods have been "
"deprecated and will be removed in Django 1.10:"
msgstr ""

#: ../../releases/1.8.txt:1212
msgid "``get_all_field_names()``"
msgstr ""

#: ../../releases/1.8.txt:1213
msgid "``get_all_related_objects()``"
msgstr ""

#: ../../releases/1.8.txt:1214
msgid "``get_all_related_objects_with_model()``"
msgstr ""

#: ../../releases/1.8.txt:1215
msgid "``get_all_related_many_to_many_objects()``"
msgstr ""

#: ../../releases/1.8.txt:1216
msgid "``get_all_related_m2m_objects_with_model()``"
msgstr ""

#: ../../releases/1.8.txt:1217
msgid "``get_concrete_fields_with_model()``"
msgstr ""

#: ../../releases/1.8.txt:1218
msgid "``get_field_by_name()``"
msgstr ""

#: ../../releases/1.8.txt:1219
msgid "``get_fields_with_model()``"
msgstr ""

#: ../../releases/1.8.txt:1220
msgid "``get_m2m_with_model()``"
msgstr ""

#: ../../releases/1.8.txt:1223
msgid "Loading ``cycle`` and ``firstof`` template tags from ``future`` library"
msgstr ""

#: ../../releases/1.8.txt:1225
msgid ""
"Django 1.6 introduced ``{% load cycle from future %}`` and ``{% load firstof "
"from future %}`` syntax for forward compatibility of the :ttag:`cycle` and :"
"ttag:`firstof` template tags. This syntax is now deprecated and will be "
"removed in Django 1.10. You can simply remove the ``{% load ... from future "
"%}`` tags."
msgstr ""

#: ../../releases/1.8.txt:1232
msgid "``django.conf.urls.patterns()``"
msgstr ""

#: ../../releases/1.8.txt:1234
msgid ""
"In the olden days of Django, it was encouraged to reference views as strings "
"in ``urlpatterns``::"
msgstr ""

#: ../../releases/1.8.txt:1241
msgid ""
"and Django would magically import ``myapp.views.myview`` internally and turn "
"the string into a real function reference. In order to reduce repetition "
"when referencing many views from the same module, the ``patterns()`` "
"function takes a required initial ``prefix`` argument which is prepended to "
"all views-as-strings in that set of ``urlpatterns``::"
msgstr ""

#: ../../releases/1.8.txt:1252
msgid ""
"In the modern era, we have updated the tutorial to instead recommend "
"importing your views module and referencing your view functions (or classes) "
"directly. This has a number of advantages, all deriving from the fact that "
"we are using normal Python in place of \"Django String Magic\": the errors "
"when you mistype a view name are less obscure, IDEs can help with "
"autocompletion of view names, etc."
msgstr ""

#: ../../releases/1.8.txt:1259
msgid ""
"So these days, the above use of the ``prefix`` arg is much more likely to be "
"written (and is better written) as::"
msgstr ""

#: ../../releases/1.8.txt:1269
msgid ""
"Thus ``patterns()`` serves little purpose and is a burden when teaching new "
"users (answering the newbie's question \"why do I need this empty string as "
"the first argument to ``patterns()``?\"). For these reasons, we are "
"deprecating it. Updating your code is as simple as ensuring that "
"``urlpatterns`` is a list of :func:`django.conf.urls.url` instances. For "
"example::"
msgstr ""

#: ../../releases/1.8.txt:1284
msgid "Passing a string as ``view`` to :func:`~django.conf.urls.url`"
msgstr ""

#: ../../releases/1.8.txt:1286
msgid ""
"Related to the previous item, referencing views as strings in the ``url()`` "
"function is deprecated. Pass the callable view as described in the previous "
"section instead."
msgstr ""

#: ../../releases/1.8.txt:1291
msgid "Template-related settings"
msgstr ""

#: ../../releases/1.8.txt:1293
msgid ""
"As a consequence of the multiple template engines refactor, several settings "
"are deprecated in favor of :setting:`TEMPLATES`:"
msgstr ""

#: ../../releases/1.8.txt:1296
msgid "``ALLOWED_INCLUDE_ROOTS``"
msgstr ""

#: ../../releases/1.8.txt:1297
msgid "``TEMPLATE_CONTEXT_PROCESSORS``"
msgstr ""

#: ../../releases/1.8.txt:1298
msgid "``TEMPLATE_DEBUG``"
msgstr ""

#: ../../releases/1.8.txt:1299
msgid "``TEMPLATE_DIRS``"
msgstr ""

#: ../../releases/1.8.txt:1300
msgid "``TEMPLATE_LOADERS``"
msgstr ""

#: ../../releases/1.8.txt:1301
msgid "``TEMPLATE_STRING_IF_INVALID``"
msgstr ""

#: ../../releases/1.8.txt:1304
msgid "``django.core.context_processors``"
msgstr ""

#: ../../releases/1.8.txt:1306
msgid ""
"Built-in template context processors have been moved to ``django.template."
"context_processors``."
msgstr ""

#: ../../releases/1.8.txt:1310
msgid "``django.test.SimpleTestCase.urls``"
msgstr ""

#: ../../releases/1.8.txt:1312
msgid ""
"The attribute ``SimpleTestCase.urls`` for specifying URLconf configuration "
"in tests has been deprecated and will be removed in Django 1.10. Use :func:"
"`@override_settings(ROOT_URLCONF=...) <django.test.override_settings>` "
"instead."
msgstr ""

#: ../../releases/1.8.txt:1318
msgid "``prefix`` argument to :func:`~django.conf.urls.i18n.i18n_patterns`"
msgstr ""

#: ../../releases/1.8.txt:1320
msgid ""
"Related to the previous item, the ``prefix`` argument to :func:`django.conf."
"urls.i18n.i18n_patterns` has been deprecated. Simply pass a list of :func:"
"`django.conf.urls.url` instances instead."
msgstr ""

#: ../../releases/1.8.txt:1325
msgid ""
"Using an incorrect count of unpacked values in the :ttag:`for` template tag"
msgstr ""

#: ../../releases/1.8.txt:1327
msgid ""
"Using an incorrect count of unpacked values in :ttag:`for` tag will raise an "
"exception rather than fail silently in Django 1.10."
msgstr ""

#: ../../releases/1.8.txt:1331
msgid "Passing a dotted path to ``reverse()`` and :ttag:`url`"
msgstr ""

#: ../../releases/1.8.txt:1333
msgid ""
"Reversing URLs by Python path is an expensive operation as it causes the "
"path being reversed to be imported. This behavior has also resulted in a "
"`security issue`_. Use :ref:`named URL patterns <naming-url-patterns>` for "
"reversing instead."
msgstr ""

#: ../../releases/1.8.txt:1338
msgid ""
"If you are using :mod:`django.contrib.sitemaps`, add the ``name`` argument "
"to the ``url`` that references :func:`django.contrib.sitemaps.views."
"sitemap`::"
msgstr ""

#: ../../releases/1.8.txt:1346
msgid ""
"to ensure compatibility when reversing by Python path is removed in Django "
"1.10."
msgstr ""

#: ../../releases/1.8.txt:1348
msgid ""
"Similarly for GIS sitemaps, add ``name='django.contrib.gis.sitemaps.views."
"kml'`` or ``name='django.contrib.gis.sitemaps.views.kmz'``."
msgstr ""

#: ../../releases/1.8.txt:1351
msgid ""
"If you are using a Python path for the :setting:`LOGIN_URL` or :setting:"
"`LOGIN_REDIRECT_URL` setting, use the name of the ``url()`` instead."
msgstr ""

#: ../../releases/1.8.txt:1357
msgid "Aggregate methods and modules"
msgstr ""

#: ../../releases/1.8.txt:1359
msgid ""
"The ``django.db.models.sql.aggregates`` and ``django.contrib.gis.db.models."
"sql.aggregates`` modules (both private API), have been deprecated as "
"``django.db.models.aggregates`` and ``django.contrib.gis.db.models."
"aggregates`` are now also responsible for SQL generation. The old modules "
"will be removed in Django 1.10."
msgstr ""

#: ../../releases/1.8.txt:1365
msgid ""
"If you were using the old modules, see :doc:`Query Expressions </ref/models/"
"expressions>` for instructions on rewriting custom aggregates using the new "
"stable API."
msgstr ""

#: ../../releases/1.8.txt:1369
msgid ""
"The following methods and properties of ``django.db.models.sql.query.Query`` "
"have also been deprecated and the backwards compatibility shims will be "
"removed in Django 1.10:"
msgstr ""

#: ../../releases/1.8.txt:1373
msgid "``Query.aggregates``, replaced by ``annotations``."
msgstr ""

#: ../../releases/1.8.txt:1374
msgid "``Query.aggregate_select``, replaced by ``annotation_select``."
msgstr ""

#: ../../releases/1.8.txt:1375
msgid "``Query.add_aggregate()``, replaced by ``add_annotation()``."
msgstr ""

#: ../../releases/1.8.txt:1376
msgid "``Query.set_aggregate_mask()``, replaced by ``set_annotation_mask()``."
msgstr ""

#: ../../releases/1.8.txt:1377
msgid ""
"``Query.append_aggregate_mask()``, replaced by ``append_annotation_mask()``."
msgstr ""

#: ../../releases/1.8.txt:1380
msgid "Extending management command arguments through ``Command.option_list``"
msgstr ""

#: ../../releases/1.8.txt:1382
msgid ""
"Management commands now use :py:mod:`argparse` instead of :py:mod:`optparse` "
"to parse command-line arguments passed to commands. This also means that the "
"way to add custom arguments to commands has changed: instead of extending "
"the ``option_list`` class list, you should now override the :meth:`~django."
"core.management.BaseCommand.add_arguments` method and add arguments through "
"``argparse.add_argument()``. See :ref:`this example <custom-commands-"
"options>` for more details."
msgstr ""

#: ../../releases/1.8.txt:1391
msgid "``django.core.management.NoArgsCommand``"
msgstr ""

#: ../../releases/1.8.txt:1393
msgid ""
"The class ``NoArgsCommand`` is now deprecated and will be removed in Django "
"1.10. Use :class:`~django.core.management.BaseCommand` instead, which takes "
"no arguments by default."
msgstr ""

#: ../../releases/1.8.txt:1398
msgid "Listing all migrations in a project"
msgstr ""

#: ../../releases/1.8.txt:1400
msgid ""
"The ``--list`` option of the :djadmin:`migrate` management command is "
"deprecated and will be removed in Django 1.10. Use :djadmin:`showmigrations` "
"instead."
msgstr ""

#: ../../releases/1.8.txt:1405
msgid ""
"``cache_choices`` option of ``ModelChoiceField`` and "
"``ModelMultipleChoiceField``"
msgstr ""

#: ../../releases/1.8.txt:1407
msgid ""
":class:`~django.forms.ModelChoiceField` and :class:`~django.forms."
"ModelMultipleChoiceField` took an undocumented, untested option "
"``cache_choices``. This cached querysets between multiple renderings of the "
"same ``Form`` object. This option is subject to an accelerated deprecation "
"and will be removed in Django 1.9."
msgstr ""

#: ../../releases/1.8.txt:1414
msgid "``django.template.resolve_variable()``"
msgstr ""

#: ../../releases/1.8.txt:1416
msgid ""
"The function has been informally marked as \"Deprecated\" for some time. "
"Replace ``resolve_variable(path, context)`` with ``django.template."
"Variable(path).resolve(context)``."
msgstr ""

#: ../../releases/1.8.txt:1421
msgid "``django.contrib.webdesign``"
msgstr ""

#: ../../releases/1.8.txt:1423
msgid ""
"It provided the :ttag:`lorem` template tag which is now included in the "
"built-in tags. Simply remove ``'django.contrib.webdesign'`` from :setting:"
"`INSTALLED_APPS` and ``{% load webdesign %}`` from your templates."
msgstr ""

#: ../../releases/1.8.txt:1428
msgid "``error_message`` argument to ``django.forms.RegexField``"
msgstr ""

#: ../../releases/1.8.txt:1430
msgid ""
"It provided backwards compatibility for pre-1.0 code, but its functionality "
"is redundant. Use ``Field.error_messages['invalid']`` instead."
msgstr ""

#: ../../releases/1.8.txt:1434
msgid "Old :tfilter:`unordered_list` syntax"
msgstr ""

#: ../../releases/1.8.txt:1436
msgid ""
"An older (pre-1.0), more restrictive and verbose input format for the :"
"tfilter:`unordered_list` template filter has been deprecated::"
msgstr ""

#: ../../releases/1.8.txt:1441
msgid "Using the new syntax, this becomes::"
msgstr ""

#: ../../releases/1.8.txt:1446
msgid "``django.forms.Field._has_changed()``"
msgstr ""

#: ../../releases/1.8.txt:1448
msgid ""
"Rename this method to :meth:`~django.forms.Field.has_changed` by removing "
"the leading underscore. The old name will still work until Django 1.10."
msgstr ""

#: ../../releases/1.8.txt:1452
msgid "``django.utils.html.remove_tags()`` and ``removetags`` template filter"
msgstr ""

#: ../../releases/1.8.txt:1454
msgid ""
"``django.utils.html.remove_tags()`` as well as the template filter "
"``removetags`` have been deprecated as they cannot guarantee safe output. "
"Their existence is likely to lead to their use in security-sensitive "
"contexts where they are not actually safe."
msgstr ""

#: ../../releases/1.8.txt:1459
msgid ""
"The unused and undocumented ``django.utils.html.strip_entities()`` function "
"has also been deprecated."
msgstr ""

#: ../../releases/1.8.txt:1463
msgid ""
"``is_admin_site`` argument to ``django.contrib.auth.views.password_reset()``"
msgstr ""

#: ../../releases/1.8.txt:1465
msgid "It's a legacy option that should no longer be necessary."
msgstr ""

#: ../../releases/1.8.txt:1468
msgid "``SubfieldBase``"
msgstr ""

#: ../../releases/1.8.txt:1470
msgid ""
"``django.db.models.fields.subclassing.SubfieldBase`` has been deprecated and "
"will be removed in Django 1.10. Historically, it was used to handle fields "
"where type conversion was needed when loading from the database, but it was "
"not used in ``.values()`` calls or in aggregates. It has been replaced with :"
"meth:`~django.db.models.Field.from_db_value`."
msgstr ""

#: ../../releases/1.8.txt:1476
msgid ""
"The new approach doesn't call the :meth:`~django.db.models.Field.to_python` "
"method on assignment as was the case with ``SubfieldBase``. If you need that "
"behavior, reimplement the ``Creator`` class `from Django's source code "
"<https://github.com/django/django/blob/stable/1.8.x/django/db/models/fields/"
"subclassing.py#L31-L44>`_ in your project."
msgstr ""

#: ../../releases/1.8.txt:1483
msgid "``django.utils.checksums``"
msgstr ""

#: ../../releases/1.8.txt:1485
msgid ""
"The ``django.utils.checksums`` module has been deprecated and will be "
"removed in Django 1.10. The functionality it provided (validating checksum "
"using the Luhn algorithm) was undocumented and not used in Django. The "
"module has been moved to the `django-localflavor`_ package (version 1.1+)."
msgstr ""

#: ../../releases/1.8.txt:1493
msgid "``InlineAdminForm.original_content_type_id``"
msgstr ""

#: ../../releases/1.8.txt:1495
msgid ""
"The ``original_content_type_id`` attribute on ``InlineAdminForm`` has been "
"deprecated and will be removed in Django 1.10. Historically, it was used to "
"construct the \"view on site\" URL. This URL is now accessible using the "
"``absolute_url`` attribute of the form."
msgstr ""

#: ../../releases/1.8.txt:1501
msgid ""
"``django.views.generic.edit.FormMixin.get_form()``’s ``form_class`` argument"
msgstr ""

#: ../../releases/1.8.txt:1503
msgid ""
"``FormMixin`` subclasses that override the ``get_form()`` method should make "
"sure to provide a default value for the ``form_class`` argument since it's "
"now optional."
msgstr ""

#: ../../releases/1.8.txt:1508
msgid ""
"Rendering templates loaded by :func:`~django.template.loader.get_template()` "
"with a :class:`~django.template.Context`"
msgstr ""

#: ../../releases/1.8.txt:1510
msgid ""
"The return type of :func:`~django.template.loader.get_template()` has "
"changed in Django 1.8: instead of a :class:`django.template.Template`, it "
"returns a ``Template`` instance whose exact type depends on which backend "
"loaded it."
msgstr ""

#: ../../releases/1.8.txt:1514
msgid ""
"Both classes provide a ``render()`` method, however, the former takes a :"
"class:`django.template.Context` as an argument while the latter expects a :"
"class:`dict`. This change is enforced through a deprecation path for Django "
"templates."
msgstr ""

#: ../../releases/1.8.txt:1519
msgid ""
"All this also applies to :func:`~django.template.loader.select_template()`."
msgstr ""

#: ../../releases/1.8.txt:1522
msgid ""
":class:`~django.template.Template` and :class:`~django.template.Context` "
"classes in template responses"
msgstr ""

#: ../../releases/1.8.txt:1524
msgid ""
"Some methods of :class:`~django.template.response.SimpleTemplateResponse` "
"and :class:`~django.template.response.TemplateResponse` accepted :class:"
"`django.template.Context` and :class:`django.template.Template` objects as "
"arguments. They should now receive :class:`dict` and backend-dependent "
"template objects respectively."
msgstr ""

#: ../../releases/1.8.txt:1530
msgid ""
"This also applies to the return types if you have subclassed either template "
"response class."
msgstr ""

#: ../../releases/1.8.txt:1533
msgid ""
"Check the :doc:`template response API documentation </ref/template-"
"response>` for details."
msgstr ""

#: ../../releases/1.8.txt:1537
msgid "``current_app`` argument of template-related APIs"
msgstr ""

#: ../../releases/1.8.txt:1539
msgid ""
"The following functions and classes will no longer accept a ``current_app`` "
"parameter to set an URL namespace in Django 1.10:"
msgstr ""

#: ../../releases/1.8.txt:1542 ../../releases/1.8.txt:1557
msgid "``django.shortcuts.render()``"
msgstr ""

#: ../../releases/1.8.txt:1543
msgid "``django.template.Context()``"
msgstr ""

#: ../../releases/1.8.txt:1544
msgid "``django.template.RequestContext()``"
msgstr ""

#: ../../releases/1.8.txt:1545
msgid "``django.template.response.TemplateResponse()``"
msgstr ""

#: ../../releases/1.8.txt:1547
msgid ""
"Set ``request.current_app`` instead, where ``request`` is the first argument "
"to these functions or classes. If you're using a plain ``Context``, use a "
"``RequestContext`` instead."
msgstr ""

#: ../../releases/1.8.txt:1552
msgid ""
"``dictionary`` and ``context_instance`` arguments of rendering functions"
msgstr ""

#: ../../releases/1.8.txt:1554
msgid ""
"The following functions will no longer accept the ``dictionary`` and "
"``context_instance`` parameters in Django 1.10:"
msgstr ""

#: ../../releases/1.8.txt:1558 ../../releases/1.8.txt:1578
msgid "``django.shortcuts.render_to_response()``"
msgstr ""

#: ../../releases/1.8.txt:1559
msgid "``django.template.loader.render_to_string()``"
msgstr ""

#: ../../releases/1.8.txt:1561
msgid ""
"Use the ``context`` parameter instead. When ``dictionary`` is passed as a "
"positional argument, which is the most common idiom, no changes are needed."
msgstr ""

#: ../../releases/1.8.txt:1564
msgid ""
"If you're passing a :class:`~django.template.Context` in "
"``context_instance``, pass a :class:`dict` in the ``context`` parameter "
"instead. If you're passing a :class:`~django.template.RequestContext`, pass "
"the request separately in the ``request`` parameter."
msgstr ""

#: ../../releases/1.8.txt:1570
msgid "``dirs`` argument of template-finding functions"
msgstr ""

#: ../../releases/1.8.txt:1572
msgid ""
"The following functions will no longer accept a ``dirs`` parameter to "
"override ``TEMPLATE_DIRS`` in Django 1.10:"
msgstr ""

#: ../../releases/1.8.txt:1575
msgid ":func:`django.template.loader.get_template()`"
msgstr ""

#: ../../releases/1.8.txt:1576
msgid ":func:`django.template.loader.select_template()`"
msgstr ""

#: ../../releases/1.8.txt:1577
msgid ":func:`django.shortcuts.render()`"
msgstr ""

#: ../../releases/1.8.txt:1580
msgid ""
"The parameter didn't work consistently across different template loaders and "
"didn't work for included templates."
msgstr ""

#: ../../releases/1.8.txt:1584
msgid "``django.template.loader.BaseLoader``"
msgstr ""

#: ../../releases/1.8.txt:1586
msgid ""
"``django.template.loader.BaseLoader`` was renamed to ``django.template."
"loaders.base.Loader``. If you've written a custom template loader that "
"inherits ``BaseLoader``, you must inherit ``Loader`` instead."
msgstr ""

#: ../../releases/1.8.txt:1591
msgid "``django.test.utils.TestTemplateLoader``"
msgstr ""

#: ../../releases/1.8.txt:1593
msgid ""
"Private API ``django.test.utils.TestTemplateLoader`` is deprecated in favor "
"of ``django.template.loaders.locmem.Loader`` and will be removed in Django "
"1.9."
msgstr ""

#: ../../releases/1.8.txt:1599
msgid "Support for the ``max_length`` argument on custom ``Storage`` classes"
msgstr ""

#: ../../releases/1.8.txt:1601
msgid ""
"``Storage`` subclasses should add ``max_length=None`` as a parameter to :"
"meth:`~django.core.files.storage.Storage.get_available_name` and/or :meth:"
"`~django.core.files.storage.Storage.save` if they override either method. "
"Support for storages that do not accept this argument will be removed in "
"Django 1.10."
msgstr ""

#: ../../releases/1.8.txt:1608
msgid "``qn`` replaced by ``compiler``"
msgstr ""

#: ../../releases/1.8.txt:1610
msgid ""
"In previous Django versions, various internal ORM methods (mostly ``as_sql`` "
"methods) accepted a ``qn`` (for \"quote name\") argument, which was a "
"reference to a function that quoted identifiers for sending to the database. "
"In Django 1.8, that argument has been renamed to ``compiler`` and is now a "
"full ``SQLCompiler`` instance. For backwards-compatibility, calling a "
"``SQLCompiler`` instance performs the same name-quoting that the ``qn`` "
"function used to. However, this backwards-compatibility shim is immediately "
"deprecated: you should rename your ``qn`` arguments to ``compiler``, and "
"call ``compiler.quote_name_unless_alias(...)`` where you previously called "
"``qn(...)``."
msgstr ""

#: ../../releases/1.8.txt:1622
msgid "Default value of ``RedirectView.permanent``"
msgstr ""

#: ../../releases/1.8.txt:1624
msgid ""
"The default value of the :attr:`RedirectView.permanent <django.views.generic."
"base.RedirectView.permanent>` attribute will change from ``True`` to "
"``False`` in Django 1.9."
msgstr ""

#: ../../releases/1.8.txt:1629
msgid ""
"Using ``AuthenticationMiddleware`` without "
"``SessionAuthenticationMiddleware``"
msgstr ""

#: ../../releases/1.8.txt:1631
msgid ""
"``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` was added "
"in Django 1.7. In Django 1.7.2, its functionality was moved to ``auth."
"get_user()`` and, for backwards compatibility, enabled only if ``'django."
"contrib.auth.middleware.SessionAuthenticationMiddleware'`` appears in "
"``MIDDLEWARE_CLASSES``."
msgstr ""

#: ../../releases/1.8.txt:1637
msgid ""
"In Django 1.10, session verification will be enabled regardless of whether "
"or not ``SessionAuthenticationMiddleware`` is enabled (at which point "
"``SessionAuthenticationMiddleware`` will have no significance). You can add "
"it to your ``MIDDLEWARE_CLASSES`` sometime before then to opt-in. Please "
"read the :ref:`upgrade considerations <session-invalidation-on-password-"
"change>` first."
msgstr ""

#: ../../releases/1.8.txt:1644
msgid "``django.contrib.sitemaps.FlatPageSitemap``"
msgstr ""

#: ../../releases/1.8.txt:1646
msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` has moved to ``django.contrib."
"flatpages.sitemaps.FlatPageSitemap``. The old import location is deprecated "
"and will be removed in Django 1.9."
msgstr ""

#: ../../releases/1.8.txt:1651
msgid "Model ``Field.related``"
msgstr ""

#: ../../releases/1.8.txt:1653
msgid ""
"Private attribute ``django.db.models.Field.related`` is deprecated in favor "
"of ``Field.rel``.  The latter is an instance of ``django.db.models.fields."
"related.ForeignObjectRel`` which replaces ``django.db.models.related."
"RelatedObject``. The ``django.db.models.related`` module has been removed "
"and the ``Field.related`` attribute will be removed in Django 1.10."
msgstr ""

#: ../../releases/1.8.txt:1661
msgid "``ssi`` template tag"
msgstr ""

#: ../../releases/1.8.txt:1663
msgid ""
"The ``ssi`` template tag allows files to be included in a template by "
"absolute path. This is of limited use in most deployment situations, and "
"the :ttag:`include` tag often makes more sense. This tag is now deprecated "
"and will be removed in Django 1.10."
msgstr ""

#: ../../releases/1.8.txt:1669
msgid "``=`` as comparison operator in ``if`` template tag"
msgstr ""

#: ../../releases/1.8.txt:1671
msgid ""
"Using a single equals sign with the ``{% if %}`` template tag for equality "
"testing was undocumented and untested. It's now deprecated in favor of "
"``==``."
msgstr ""

#: ../../releases/1.8.txt:1675
msgid "``%(<foo>)s`` syntax in ``ModelFormMixin.success_url``"
msgstr ""

#: ../../releases/1.8.txt:1677
msgid ""
"The legacy ``%(<foo>)s`` syntax in :attr:`ModelFormMixin.success_url <django."
"views.generic.edit.ModelFormMixin.success_url>` is deprecated and will be "
"removed in Django 1.10."
msgstr ""

#: ../../releases/1.8.txt:1682
msgid "``GeoQuerySet`` aggregate methods"
msgstr ""

#: ../../releases/1.8.txt:1684
msgid ""
"The ``collect()``, ``extent()``, ``extent3d()``, ``make_line()``, and "
"``unionagg()`` aggregate methods are deprecated and should be replaced by "
"their function-based aggregate equivalents (``Collect``, ``Extent``, "
"``Extent3D``, ``MakeLine``, and ``Union``)."
msgstr ""

#: ../../releases/1.8.txt:1692
msgid "Signature of the ``allow_migrate`` router method"
msgstr ""

#: ../../releases/1.8.txt:1694
msgid ""
"The signature of the :meth:`allow_migrate` method of database routers has "
"changed from ``allow_migrate(db, model)`` to ``allow_migrate(db, app_label, "
"model_name=None, **hints)``."
msgstr ""

#: ../../releases/1.8.txt:1698
msgid ""
"When ``model_name`` is set, the value that was previously given through the "
"``model`` positional argument may now be found inside the ``hints`` "
"dictionary under the key ``'model'``."
msgstr ""

#: ../../releases/1.8.txt:1702
msgid ""
"After switching to the new signature the router will also be called by the :"
"class:`~django.db.migrations.operations.RunPython` and :class:`~django.db."
"migrations.operations.RunSQL` operations."
msgstr ""

#: ../../releases/1.8.txt:1709
msgid "Features removed in 1.8"
msgstr ""

#: ../../releases/1.8.txt:1711
msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.8. See :ref:`deprecated-features-1.6` for details, "
"including how to remove usage of these features."
msgstr ""

#: ../../releases/1.8.txt:1715
msgid "``django.contrib.comments`` is removed."
msgstr ""

#: ../../releases/1.8.txt:1717
msgid "The following transaction management APIs are removed:"
msgstr ""

#: ../../releases/1.8.txt:1719
msgid "``TransactionMiddleware``"
msgstr ""

#: ../../releases/1.8.txt:1720
msgid ""
"the decorators and context managers ``autocommit``, ``commit_on_success``, "
"and ``commit_manually``, defined in ``django.db.transaction``"
msgstr ""

#: ../../releases/1.8.txt:1722
msgid ""
"the functions ``commit_unless_managed`` and ``rollback_unless_managed``, "
"also defined in ``django.db.transaction``"
msgstr ""

#: ../../releases/1.8.txt:1724
msgid "the ``TRANSACTIONS_MANAGED`` setting"
msgstr ""

#: ../../releases/1.8.txt:1726
msgid ""
"The :ttag:`cycle` and :ttag:`firstof` template tags auto-escape their "
"arguments."
msgstr ""

#: ../../releases/1.8.txt:1729
msgid "The ``SEND_BROKEN_LINK_EMAILS`` setting is removed."
msgstr ""

#: ../../releases/1.8.txt:1731
msgid "``django.middleware.doc.XViewMiddleware`` is removed."
msgstr ""

#: ../../releases/1.8.txt:1733
msgid "The ``Model._meta.module_name`` alias is removed."
msgstr ""

#: ../../releases/1.8.txt:1735
msgid ""
"The backward compatible shims introduced to rename ``get_query_set`` and "
"similar queryset methods are removed. This affects the following classes: "
"``BaseModelAdmin``, ``ChangeList``, ``BaseCommentNode``, "
"``GenericForeignKey``, ``Manager``, ``SingleRelatedObjectDescriptor`` and "
"``ReverseSingleRelatedObjectDescriptor``."
msgstr ""

#: ../../releases/1.8.txt:1741
msgid ""
"The backward compatible shims introduced to rename the attributes "
"``ChangeList.root_query_set`` and ``ChangeList.query_set`` are removed."
msgstr ""

#: ../../releases/1.8.txt:1744
msgid ""
"``django.views.defaults.shortcut`` and ``django.conf.urls.shortcut`` are "
"removed."
msgstr ""

#: ../../releases/1.8.txt:1747
msgid "Support for the Python Imaging Library (PIL) module is removed."
msgstr ""

#: ../../releases/1.8.txt:1749
msgid "The following private APIs are removed:"
msgstr ""

#: ../../releases/1.8.txt:1751
msgid "``django.db.backend``"
msgstr ""

#: ../../releases/1.8.txt:1752
msgid "``django.db.close_connection()``"
msgstr ""

#: ../../releases/1.8.txt:1753
msgid "``django.db.backends.creation.BaseDatabaseCreation.set_autocommit()``"
msgstr ""

#: ../../releases/1.8.txt:1754
msgid "``django.db.transaction.is_managed()``"
msgstr ""

#: ../../releases/1.8.txt:1755
msgid "``django.db.transaction.managed()``"
msgstr ""

#: ../../releases/1.8.txt:1757
msgid "``django.forms.widgets.RadioInput`` is removed."
msgstr ""

#: ../../releases/1.8.txt:1759
msgid ""
"The module ``django.test.simple`` and the class ``django.test.simple."
"DjangoTestSuiteRunner`` are removed."
msgstr ""

#: ../../releases/1.8.txt:1762
msgid "The module ``django.test._doctest`` is removed."
msgstr ""

#: ../../releases/1.8.txt:1764
msgid ""
"The ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting is removed. This change "
"affects both ``django.middleware.cache.CacheMiddleware`` and ``django."
"middleware.cache.UpdateCacheMiddleware`` despite the lack of a deprecation "
"warning in the latter class."
msgstr ""

#: ../../releases/1.8.txt:1769
msgid ""
"Usage of the hard-coded *Hold down \"Control\", or \"Command\" on a Mac, to "
"select more than one.* string to override or append to user-provided "
"``help_text`` in forms for ``ManyToMany`` model fields is not performed by "
"Django anymore either at the model or forms layer."
msgstr ""

#: ../../releases/1.8.txt:1774
msgid ""
"The ``Model._meta.get_(add|change|delete)_permission`` methods are removed."
msgstr ""

#: ../../releases/1.8.txt:1776
msgid ""
"The session key ``django_language`` is no longer read for backwards "
"compatibility."
msgstr ""

#: ../../releases/1.8.txt:1779
msgid ""
"Geographic Sitemaps are removed (``django.contrib.gis.sitemaps.views.index`` "
"and ``django.contrib.gis.sitemaps.views.sitemap``)."
msgstr ""

#: ../../releases/1.8.txt:1783
msgid ""
"``django.utils.html.fix_ampersands``, the ``fix_ampersands`` template "
"filter, and ``django.utils.html.clean_html`` are removed."
msgstr ""
