# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 60532337c1144819a1aac61acaf0ff3c
#: ../../releases/1.1.txt:3
msgid "Django 1.1 release notes"
msgstr ""

# b6f61e165f074757858edabe835633b8
#: ../../releases/1.1.txt:5
msgid "July 29, 2009"
msgstr ""

# 5114f19a8b584076abfa0829366ec81d
#: ../../releases/1.1.txt:7
msgid "Welcome to Django 1.1!"
msgstr ""

#: ../../releases/1.1.txt:9
msgid ""
"Django 1.1 includes a number of nifty :ref:`new features <whats-new-1.1>`, "
"lots of bug fixes, and an easy upgrade path from Django 1.0."
msgstr ""

# 20cbab8185c946eaa57026b872a1435f
#: ../../releases/1.1.txt:15
msgid "Backwards-incompatible changes in 1.1"
msgstr ""

# a7d05936164a4c2cb490896a03fa46fa
#: ../../releases/1.1.txt:17
msgid ""
"Django has a policy of :doc:`API stability </misc/api-stability>`. This "
"means that, in general, code you develop against Django 1.0 should continue "
"to work against 1.1 unchanged. However, we do sometimes make backwards-"
"incompatible changes if they're necessary to resolve bugs, and there are a "
"handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""

# d4adc3bb09f84dcd8563567089cdf523
#: ../../releases/1.1.txt:23
msgid ""
"Before upgrading to Django 1.1 you should double-check that the following "
"changes don't impact you, and upgrade your code if they do."
msgstr ""

# bc4f540c0a804a2f953c33045059a4dc
#: ../../releases/1.1.txt:27
msgid "Changes to constraint names"
msgstr ""

# c017bda0325f47188e357e2b1ae601b1
#: ../../releases/1.1.txt:29
msgid ""
"Django 1.1 modifies the method used to generate database constraint names so "
"that names are consistent regardless of machine word size. This change is "
"backwards incompatible for some users."
msgstr ""

# 84f64b8ca63246c0ab3ff3b9dc1c814d
#: ../../releases/1.1.txt:33
msgid ""
"If you are using a 32-bit platform, you're off the hook; you'll observe no "
"differences as a result of this change."
msgstr ""

# eb63bc8e241743608a8114ca70d0d567
#: ../../releases/1.1.txt:36
msgid ""
"However, **users on 64-bit platforms may experience some problems** using "
"the ``reset`` management command. Prior to this change, 64-bit platforms "
"would generate a 64-bit, 16 character digest in the constraint name; for "
"example::"
msgstr ""

# dc50b1682e194c7ba97fb7741cdff23b
#: ../../releases/1.1.txt:43
msgid ""
"Following this change, all platforms, regardless of word size, will generate "
"a 32-bit, 8 character digest in the constraint name; for example::"
msgstr ""

# 399d898757c54bc09966a62692027608
#: ../../releases/1.1.txt:48
msgid ""
"As a result of this change, you will not be able to use the ``reset`` "
"management command on any table made by a 64-bit machine. This is because "
"the new generated name will not match the historically generated name; as a "
"result, the SQL constructed by the reset command will be invalid."
msgstr ""

# 390cbc5f7d764eb2a4ba55f36a4c08e5
#: ../../releases/1.1.txt:53
msgid ""
"If you need to reset an application that was created with 64-bit "
"constraints, you will need to manually drop the old constraint prior to "
"invoking ``reset``."
msgstr ""

# 7974d13b1e0b4e82aa388184e78b60b1
#: ../../releases/1.1.txt:58
msgid "Test cases are now run in a transaction"
msgstr ""

# 3f56b0b10feb440693eb3811d903cea0
#: ../../releases/1.1.txt:60
msgid ""
"Django 1.1 runs tests inside a transaction, allowing better test performance "
"(see `test performance improvements`_ for details)."
msgstr ""

# 929985aa2fc74f81ab56c6407752b9ab
#: ../../releases/1.1.txt:63
msgid ""
"This change is slightly backwards incompatible if existing tests need to "
"test transactional behavior, if they rely on invalid assumptions about the "
"test environment, or if they require a specific test case ordering."
msgstr ""

# ad987e68580b46c7872a08dc4211a0ee
#: ../../releases/1.1.txt:67
msgid ""
"For these cases, :class:`~django.test.TransactionTestCase` can be used "
"instead. This is a just a quick fix to get around test case errors revealed "
"by the new rollback approach; in the long-term tests should be rewritten to "
"correct the test case."
msgstr ""

# 4ab981ee9ba64f768071e24748586773
#: ../../releases/1.1.txt:75
msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr ""

# 3154c0688c7d4f4e911c6ce757f4242c
#: ../../releases/1.1.txt:77
msgid ""
"For convenience, Django 1.0 included an optional middleware class -- "
"``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated "
"the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header "
"commonly set by some proxy configurations."
msgstr ""

# 2f28e695446347b3abc1d93fed9aac5c
#: ../../releases/1.1.txt:82
msgid ""
"It has been demonstrated that this mechanism cannot be made reliable enough "
"for general-purpose use, and that (despite documentation to the contrary) "
"its inclusion in Django may lead application developers to assume that the "
"value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of "
"authentication."
msgstr ""

# 3505b1a8326e41cfa35ad095f2afc666
#: ../../releases/1.1.txt:87
msgid ""
"While not directly a security issue, we've decided to remove this middleware "
"with the Django 1.1 release. It has been replaced with a class that does "
"nothing other than raise a ``DeprecationWarning``."
msgstr ""

# 15aa5dc32e734b00bf55c6ad60ecfa6e
#: ../../releases/1.1.txt:91
msgid "If you've been relying on this middleware, the easiest upgrade path is:"
msgstr ""

# eff9bf17c6c94501bd55cc0280b50b18
#: ../../releases/1.1.txt:93
msgid "Examine `the code as it existed before it was removed`__."
msgstr ""

# b9acbbb8532844a2bc543a487ec343fd
#: ../../releases/1.1.txt:95
msgid ""
"Verify that it works correctly with your upstream proxy, modifying it to "
"support your particular proxy (if necessary)."
msgstr ""

# e0c40e316bfb4ccbbeb21cc2b02a9663
#: ../../releases/1.1.txt:98
msgid ""
"Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a "
"piece of middleware in your own project."
msgstr ""

# a8f050451f1944fb881fc09a1b73add3
#: ../../releases/1.1.txt:104
msgid "Names of uploaded files are available later"
msgstr ""

# 448812ab599340a38ec2684411fc86ff
#: ../../releases/1.1.txt:108
msgid ""
"In Django 1.0, files uploaded and stored in a model's :class:`FileField` "
"were saved to disk before the model was saved to the database. This meant "
"that the actual file name assigned to the file was available before saving. "
"For example, it was available in a model's pre-save signal handler."
msgstr ""

# 53ac48757e6742699838f17f78de1661
#: ../../releases/1.1.txt:113
msgid ""
"In Django 1.1 the file is saved as part of saving the model in the database, "
"so the actual file name used on disk cannot be relied on until *after* the "
"model has been saved."
msgstr ""

# 8c8cb9e1d1034f49a6627858c7c1ac70
#: ../../releases/1.1.txt:118
msgid "Changes to how model formsets are saved"
msgstr ""

# 6f7fe85b628841f287f30ad0e5c9bd54
#: ../../releases/1.1.txt:120
msgid ""
"In Django 1.1, :class:`~django.forms.models.BaseModelFormSet` now calls "
"``ModelForm.save()``."
msgstr ""

# 1f7a7453503147db9f8748e746225265
#: ../../releases/1.1.txt:123
msgid ""
"This is backwards-incompatible if you were modifying ``self.initial`` in a "
"model formset's ``__init__``, or if you relied on the internal "
"``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. "
"Those attributes are now public methods."
msgstr ""

# db29f0f873cc441c85177ba52bad53b9
#: ../../releases/1.1.txt:129
msgid "Fixed the ``join`` filter's escaping behavior"
msgstr ""

# 0eb901d1a0fd43a99d58d2092caeffe4
#: ../../releases/1.1.txt:131
msgid ""
"The :tfilter:`join` filter no longer escapes the literal value that is "
"passed in for the connector."
msgstr ""

# 3ad4788828b14bb2b351e6aa9bd41dfa
#: ../../releases/1.1.txt:134
msgid ""
"This is backwards incompatible for the special situation of the literal "
"string containing one of the five special HTML characters. Thus, if you were "
"writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ foo|join:\"&amp;"
"\" }}``."
msgstr ""

# 24a089647f4849f8b9136d53abc52b24
#: ../../releases/1.1.txt:138
msgid ""
"The previous behavior was a bug and contrary to what was documented and "
"expected."
msgstr ""

# 8e92c62514f747eba037f5bc55efbc38
#: ../../releases/1.1.txt:142
msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr ""

# e77ec6fcc03b4ce49f92ba93145a325c
#: ../../releases/1.1.txt:144
msgid ""
"Django 1.1 adds a ``permanent`` argument to the ``django.views.generic."
"simple.redirect_to()`` view. This is technically backwards-incompatible if "
"you were using the ``redirect_to`` view with a format-string key called "
"'permanent', which is highly unlikely."
msgstr ""

# 2e871f50451e4628a04a7039a6d4c5ce
#: ../../releases/1.1.txt:152
msgid "Features deprecated in 1.1"
msgstr ""

# affdaf951b9d4f9cb471955bb22165e3
#: ../../releases/1.1.txt:154
msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr ""

# b26d27ed179d47ec805646e4f06bfe49
#: ../../releases/1.1.txt:156
msgid ""
"You should no longer use ``AdminSite.root()`` to register that admin views. "
"That is, if your URLconf contains the line::"
msgstr ""

# 52acbd0383e04387abec8e777673f27d
#: ../../releases/1.1.txt:161
msgid "You should change it to read::"
msgstr ""

# 981a54120fc244c7883341fab25c1214
#: ../../releases/1.1.txt:165
msgid ""
"You should begin to remove use of this feature from your code immediately."
msgstr ""

# 74113b28cf8f47d19301b3aa6a8b40ac
#: ../../releases/1.1.txt:167
msgid ""
"``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in "
"Django 1.1. This warning is hidden by default. In Django 1.2, this warning "
"will be upgraded to a ``DeprecationWarning``, which will be displayed "
"loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""

# 99700af6ad9e4d1498a31077a74180e7
#: ../../releases/1.1.txt:172
msgid ""
"For more details on our deprecation policies and strategy, see :doc:`/"
"internals/release-process`."
msgstr ""

# 1b9fdee4d5db43068cfb3580aa8c3b83
#: ../../releases/1.1.txt:178
msgid "What's new in Django 1.1"
msgstr ""

# 6f40d0fc1a1b4b11b4d0c00acaa1619c
#: ../../releases/1.1.txt:180
msgid ""
"Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 "
"bugs, and added roughly 10,000 lines of documentation."
msgstr ""

# 0a6f5d2af7494f67a7d174af1d74cb47
#: ../../releases/1.1.txt:183
msgid "The major new features in Django 1.1 are:"
msgstr ""

# fff1ba066a1b402aa03753c2074eadb7
#: ../../releases/1.1.txt:186
msgid "ORM improvements"
msgstr ""

# bac363e1e57b4da79d5c66ee72da3698
#: ../../releases/1.1.txt:190
msgid ""
"Two major enhancements have been added to Django's object-relational mapper "
"(ORM): aggregate support, and query expressions."
msgstr ""

# c91334d63e5a41a2994cdde026c8d186
#: ../../releases/1.1.txt:194
msgid "Aggregate support"
msgstr ""

# 8252494e5b2a4d03bac41a8f7b061d1d
#: ../../releases/1.1.txt:196
msgid ""
"It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``, "
"``MIN()``, etc.) from within Django's ORM. You can choose to either return "
"the results of the aggregate directly, or else annotate the objects in a :"
"class:`~django.db.models.query.QuerySet` with the results of the aggregate "
"query."
msgstr ""

# 37851b9ed11b4038b7c6b4222c599920
#: ../../releases/1.1.txt:202
msgid ""
"This feature is available as new :meth:`~django.db.models.query.QuerySet."
"aggregate` and :meth:`~django.db.models.query.QuerySet.annotate` methods, "
"and is covered in detail in :doc:`the ORM aggregation documentation </topics/"
"db/aggregation>`."
msgstr ""

# a9853c197b4b4bd99e6a2d5b797e1665
#: ../../releases/1.1.txt:208
msgid "Query expressions"
msgstr ""

# 0141b46165db4b90adf40f8aae27b96a
#: ../../releases/1.1.txt:210
msgid ""
"Queries can now refer to a another field on the query and can traverse "
"relationships to refer to fields on related models. This is implemented in "
"the new :class:`~django.db.models.F` object; for full details, including "
"examples, consult the :class:`F expressions documentation <django.db.models."
"F>`."
msgstr ""

# 86645fb110af4fbd9f7560065134372e
#: ../../releases/1.1.txt:216
msgid "Model improvements"
msgstr ""

# 77e3049ceae24de78a84799061b9055e
#: ../../releases/1.1.txt:218
msgid "A number of features have been added to Django's model layer:"
msgstr ""

# f9a5b43870cc46acae8a6ce1a5f999d9
#: ../../releases/1.1.txt:221
msgid "\"Unmanaged\" models"
msgstr ""

#: ../../releases/1.1.txt:223
msgid ""
"You can now control whether or not Django manages the life-cycle of the "
"database tables for a model using the :attr:`~Options.managed` model option. "
"This defaults to ``True``, meaning that Django will create the appropriate "
"database tables in ``syncdb`` and remove them as part of the ``reset`` "
"command. That is, Django *manages* the database table's lifecycle."
msgstr ""

# 0d521c3fe6374e4ea0570af46a7a29f8
#: ../../releases/1.1.txt:229
msgid ""
"If you set this to ``False``, however, no database table creating or "
"deletion will be automatically performed for this model. This is useful if "
"the model represents an existing table or a database view that has been "
"created by some other means."
msgstr ""

# 944b126ff2964e94905db139f5fa1298
#: ../../releases/1.1.txt:234
msgid ""
"For more details, see the documentation for the :attr:`~Options.managed` "
"option."
msgstr ""

# c9a4b5fc9e444f5d8434a59bb7168fbe
#: ../../releases/1.1.txt:238
msgid "Proxy models"
msgstr ""

# f8322aab30764b418ca9fbdcdd6bacd0
#: ../../releases/1.1.txt:240
msgid ""
"You can now create :ref:`proxy models <proxy-models>`: subclasses of "
"existing models that only add Python-level (rather than database-level) "
"behavior and aren't represented by a new table. That is, the new model is a "
"*proxy* for some underlying model, which stores all the real data."
msgstr ""

# 3b5cd79450324e388d43dd51c1e4bd35
#: ../../releases/1.1.txt:245
msgid ""
"All the details can be found in the :ref:`proxy models documentation <proxy-"
"models>`. This feature is similar on the surface to unmanaged models, so the "
"documentation has an explanation of :ref:`how proxy models differ from "
"unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""

# 954ee43009a4496abbdaeedf4d28475d
#: ../../releases/1.1.txt:251
msgid "Deferred fields"
msgstr ""

# 703f4bf09d6b4688a1a3f920e280819c
#: ../../releases/1.1.txt:253
msgid ""
"In some complex situations, your models might contain fields which could "
"contain a lot of data (for example, large text fields), or require expensive "
"processing to convert them to Python objects. If you know you don't need "
"those particular fields, you can now tell Django not to retrieve them from "
"the database."
msgstr ""

# 394fc3146c77417ba711664806e32303
#: ../../releases/1.1.txt:259
msgid ""
"You'll do this with the new queryset methods :meth:`~django.db.models.query."
"QuerySet.defer` and :meth:`~django.db.models.query.QuerySet.only`."
msgstr ""

# 768fd4f5cc154fb782252f42d52c7a1b
#: ../../releases/1.1.txt:264
msgid "Testing improvements"
msgstr ""

# 30c3c586bafd4338af532c7ab380cce3
#: ../../releases/1.1.txt:266
msgid ""
"A few notable improvements have been made to the :doc:`testing framework </"
"topics/testing/index>`."
msgstr ""

# b0eb6b82141e4ddb8fcf8abcbbdca682
#: ../../releases/1.1.txt:270
msgid "Test performance improvements"
msgstr ""

# 426d72ea2d5c42c38c3e8973d76a5664
#: ../../releases/1.1.txt:274
msgid ""
"Tests written using Django's :doc:`testing framework </topics/testing/"
"index>` now run dramatically faster (as much as 10 times faster in many "
"cases)."
msgstr ""

# 9a7d13e4c581457daaeda09d9d280048
#: ../../releases/1.1.txt:277
msgid ""
"This was accomplished through the introduction of transaction-based tests: "
"when using :class:`django.test.TestCase`, your tests will now be run in a "
"transaction which is rolled back when finished, instead of by flushing and "
"re-populating the database. This results in an immense speedup for most "
"types of unit tests. See the documentation for :class:`TestCase` and :class:"
"`TransactionTestCase` for a full description, and some important notes on "
"database support."
msgstr ""

# 877b304dc8b04b5ead3df44bb601d785
#: ../../releases/1.1.txt:285
msgid "Test client improvements"
msgstr ""

# 85644ef145214ee8bc2573d9c5280c19
#: ../../releases/1.1.txt:287
msgid ""
"A couple of small -- but highly useful -- improvements have been made to the "
"test client:"
msgstr ""

# b19efb9da78642a6ab63165359d0cd97
#: ../../releases/1.1.txt:290
msgid ""
"The test :class:`Client` now can automatically follow redirects with the "
"``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This "
"makes testing views that issue redirects simpler."
msgstr ""

# d4b3ceb98ce24f4584889ebc4e35d9be
#: ../../releases/1.1.txt:294
msgid ""
"It's now easier to get at the template context in the response returned the "
"test client: you'll simply access the context as ``request.context[key]``. "
"The old way, which treats ``request.context`` as a list of contexts, one for "
"each rendered template in the inheritance chain, is still available if you "
"need it."
msgstr ""

# 0f4b950e52194848863da278e67d37d7
#: ../../releases/1.1.txt:301
msgid "New admin features"
msgstr ""

# 5527b5f48216426a940181f4c782f013
#: ../../releases/1.1.txt:303
msgid ""
"Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr ""

# ac059a4014ef4605b4fc7106f9c3afae
#: ../../releases/1.1.txt:306
msgid "Editable fields on the change list"
msgstr ""

# 0dbaf3696b8043cf88a4c9dfd6ced557
#: ../../releases/1.1.txt:308
msgid ""
"You can now make fields editable on the admin list views via the new :ref:"
"`list_editable <admin-list-editable>` admin option. These fields will show "
"up as form widgets on the list pages, and can be edited and saved in bulk."
msgstr ""

# ddd15a0195b342d0ad31eaab52adbd2e
#: ../../releases/1.1.txt:313
msgid "Admin \"actions\""
msgstr ""

# f59f293086834764a0d209e1b2d3fd7f
#: ../../releases/1.1.txt:315
msgid ""
"You can now define :doc:`admin actions </ref/contrib/admin/actions>` that "
"can perform some action to a group of models in bulk. Users will be able to "
"select objects on the change list page and then apply these bulk actions to "
"all selected objects."
msgstr ""

# 57b1aa6bda86400b82c666917bd2e2e9
#: ../../releases/1.1.txt:320
msgid ""
"Django ships with one pre-defined admin action to delete a group of objects "
"in one fell swoop."
msgstr ""

# 9bba0124b03a40bfb6d9b48d8d2cce0d
#: ../../releases/1.1.txt:324
msgid "Conditional view processing"
msgstr ""

# b699c730165443918e83f360ffc6632f
#: ../../releases/1.1.txt:326
msgid ""
"Django now has much better support for :doc:`conditional view processing </"
"topics/conditional-view-processing>` using the standard ``ETag`` and ``Last-"
"Modified`` HTTP headers. This means you can now easily short-circuit view "
"processing by testing less-expensive conditions. For many views this can "
"lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""

# d6f24d43fe7d49bc8b401f3b4b51082d
#: ../../releases/1.1.txt:333
msgid "URL namespaces"
msgstr ""

# 25a16a47266a467e91698925a182ce2b
#: ../../releases/1.1.txt:335
msgid ""
"Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the "
"introduction of URL \"namespaces.\""
msgstr ""

# 1caa52e4c10a4b768b22a48fad6f9a22
#: ../../releases/1.1.txt:338
msgid ""
"In short, this feature allows the same group of URLs, from the same "
"application, to be included in a Django URLConf multiple times, with varying "
"(and potentially nested) named prefixes which will be used when performing "
"reverse resolution. In other words, reusable applications like Django's "
"admin interface may be registered multiple times without URL conflicts."
msgstr ""

# 439e5edf06ac43f5978f82e234c077e3
#: ../../releases/1.1.txt:344
msgid ""
"For full details, see :ref:`the documentation on defining URL namespaces "
"<topics-http-defining-url-namespaces>`."
msgstr ""

# 8bbf5ea989024b8a9fbe9f971302eb36
#: ../../releases/1.1.txt:348
msgid "GeoDjango"
msgstr ""

# 425ee15c109741338c642fc74a9f6f8d
#: ../../releases/1.1.txt:350
msgid ""
"In Django 1.1, GeoDjango_ (i.e. ``django.contrib.gis``) has several new "
"features:"
msgstr ""

# 1fbfacd1ebc040fbb5c90e77897d1f04
#: ../../releases/1.1.txt:353
msgid ""
"Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial "
"backend."
msgstr ""

# 24877b953cf44b42ad0dce23f0f9683c
#: ../../releases/1.1.txt:356
msgid ""
"Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and "
"``F`` expressions."
msgstr ""

# 44684e90ee964e02ab509eeb7e23db38
#: ../../releases/1.1.txt:359
msgid ""
"New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""

# 2671bde9b37d4a5ca40e2f5c38443c75
#: ../../releases/1.1.txt:362
msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr ""

# 0a175e1fb43d4524940b5c5ce265011f
#: ../../releases/1.1.txt:364
msgid "For more details, see the GeoDjango documentation."
msgstr ""

# 1644437126844213a467e06917dfd1a2
#: ../../releases/1.1.txt:370
msgid "Other improvements"
msgstr ""

# b8fbf75b55814ef4ac82892931e31cb1
#: ../../releases/1.1.txt:372
msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr ""

#: ../../releases/1.1.txt:374
msgid ""
"The :doc:`CSRF protection middleware </ref/csrf>` has been split into two "
"classes -- ``CsrfViewMiddleware`` checks incoming requests, and "
"``CsrfResponseMiddleware`` processes outgoing responses. The combined "
"``CsrfMiddleware`` class (which does both) remains for backwards-"
"compatibility, but using the split classes is now recommended in order to "
"allow fine-grained control of when and where the CSRF processing takes place."
msgstr ""

#: ../../releases/1.1.txt:382
msgid ""
"``reverse()`` and code which uses it (e.g., the ``{% url %}`` template tag) "
"now works with URLs in Django's administrative site, provided that the admin "
"URLs are set up via ``include(admin.site.urls)`` (sending admin requests to "
"the ``admin.site.root`` view still works, but URLs in the admin will not be "
"\"reversible\" when configured this way)."
msgstr ""

# 2d6cc109204249fb918c60bfd65e773b
#: ../../releases/1.1.txt:388
msgid ""
"The ``include()`` function in Django URLconf modules can now accept "
"sequences of URL patterns (generated by ``patterns()``) in addition to "
"module names."
msgstr ""

# 97eb13c2a9874261af7f9795276b172b
#: ../../releases/1.1.txt:391
msgid ""
"Instances of Django forms (see :doc:`the forms overview </topics/forms/"
"index>`) now have two additional methods, ``hidden_fields()`` and "
"``visible_fields()``, which return the list of hidden -- i.e., ``<input type="
"\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""

# af4fddcc46ea46869a2d95dcda33560a
#: ../../releases/1.1.txt:396
msgid ""
"The ``redirect_to`` generic view now accepts an additional keyword argument "
"``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP "
"permanent redirect (status code 301). If ``False``, the view will emit an "
"HTTP temporary redirect (status code 302)."
msgstr ""

# 103c93a0b7e549dc8b5370e36e0a3518
#: ../../releases/1.1.txt:402
msgid ""
"A new database lookup type -- ``week_day`` -- has been added for "
"``DateField`` and ``DateTimeField``. This type of lookup accepts a number "
"between 1 (Sunday) and 7 (Saturday), and returns objects where the field "
"value matches that day of the week. See :ref:`the full list of lookup types "
"<field-lookups>` for details."
msgstr ""

# 2190323e655b4cc9ac125b652576ce10
#: ../../releases/1.1.txt:408
msgid ""
"The ``{% for %}`` tag in Django's template language now accepts an optional "
"``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop "
"over an empty sequence. See :doc:`the list of built-in template tags </ref/"
"templates/builtins>` for examples of this."
msgstr ""

# 686c1323440d479980529f49c1eede7b
#: ../../releases/1.1.txt:413
msgid ""
"The :djadmin:`dumpdata` management command now accepts individual model "
"names as arguments, allowing you to export the data just from particular "
"models."
msgstr ""

# c437d0e026fc4f0a977923dfb9fb8b6a
#: ../../releases/1.1.txt:417
msgid ""
"There's a new :tfilter:`safeseq` template filter which works just like :"
"tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""

# 8b23d82c0d9c4b28aba9b40bf254b6da
#: ../../releases/1.1.txt:420
msgid ""
":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` "
"commands to increment and decrement the value of a cache key. On cache "
"backends that support atomic increment/decrement -- most notably, the "
"memcached backend -- these operations will be atomic, and quite fast."
msgstr ""

# d533de2269c943d080f4c4ff478f31fc
#: ../../releases/1.1.txt:426
msgid ""
"Django now can :doc:`easily delegate authentication to the Web server </"
"howto/auth-remote-user>` via a new authentication backend that supports the "
"standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""

# 1626d2112dfb4cd3bbc30550592a7ef4
#: ../../releases/1.1.txt:430
msgid ""
"There's a new :func:`django.shortcuts.redirect` function that makes it "
"easier to issue redirects given an object, a view name, or a URL."
msgstr ""

# 441392908ca64b159b2dafd590929c1b
#: ../../releases/1.1.txt:433
msgid ""
"The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL "
"autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific "
"feature, that can make certain read-heavy applications a good deal faster."
msgstr ""

# 4a4cd176ce6d4615a28c80c3a080be3e
#: ../../releases/1.1.txt:439
msgid "What's next?"
msgstr ""

#: ../../releases/1.1.txt:441
msgid ""
"We'll take a short break, and then work on Django 1.2 will begin -- no rest "
"for the weary! If you'd like to help, discussion of Django development, "
"including progress toward the 1.2 release, takes place daily on the |django-"
"developers| mailing list and in the ``#django-dev`` IRC channel on ``irc."
"freenode.net``. Feel free to join the discussions!"
msgstr ""

# cf8007c993ae4997abc865b2904fe640
#: ../../releases/1.1.txt:447
msgid ""
"Django's online documentation also includes pointers on how to contribute to "
"Django:"
msgstr ""

# 274a8f1fca8e44dba8f459cd99a7cff5
#: ../../releases/1.1.txt:450
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

# 079c016b35ee408fb71022a524712a4d
#: ../../releases/1.1.txt:452
msgid ""
"Contributions on any level -- developing code, writing documentation or "
"simply triaging tickets and helping to test proposed bugfixes -- are always "
"welcome and appreciated."
msgstr ""

# fbae311939f94b22a04b13797f9f56f4
#: ../../releases/1.1.txt:456
msgid "And that's the way it is."
msgstr ""
