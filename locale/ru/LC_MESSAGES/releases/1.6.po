# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2013-11-07 10:34\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 02b569c934e440368c0d3ba935b27cc2
#: ../../releases/1.6.txt:3
msgid "Django 1.6 release notes"
msgstr ""

# d3add1faa0ee4318877b8ca2ae61dd59
#: ../../releases/1.6.txt:7
msgid "Dedicated to Malcolm Tredinnick"
msgstr ""

# 618a9eee553b40668024b416cbd5bf70
#: ../../releases/1.6.txt:9
msgid ""
"On March 17, 2013, the Django project and the free software community lost a "
"very dear friend and developer."
msgstr ""

# bd2b3cb081334fd1852e6046869e8a3b
#: ../../releases/1.6.txt:12
msgid ""
"Malcolm was a long-time contributor to Django, a model community member, a "
"brilliant mind, and a friend. His contributions to Django — and to many "
"other open source projects — are nearly impossible to enumerate. Many on the "
"core Django team had their first patches reviewed by him; his mentorship "
"enriched us. His consideration, patience, and dedication will always be an "
"inspiration to us."
msgstr ""

# f9c91739eb2d40fd8d341a33eb109cb6
#: ../../releases/1.6.txt:19
msgid "This release of Django is for Malcolm."
msgstr ""

# 7852fee7b200428493a72c42f0338a90
#: ../../releases/1.6.txt:21
msgid "-- The Django Developers"
msgstr ""

# 6b56e0ffb0d74440a7850f31f8a603c5
#: ../../releases/1.6.txt:23
msgid "*November 6, 2013*"
msgstr ""

# caeb824c0b724e57b41ee78b2f9b4e33
#: ../../releases/1.6.txt:25
msgid "Welcome to Django 1.6!"
msgstr ""

#: ../../releases/1.6.txt:27
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.6>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.6>` "
"you'll want to be aware of when upgrading from Django 1.5 or older versions. "
"We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.6>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.6>`."
msgstr ""

# 0c15b4217a3b4fc3a96df80b14fa6521
#: ../../releases/1.6.txt:35
msgid "Python compatibility"
msgstr ""

# 502962595aa64e548a3a9eeb593a88ec
#: ../../releases/1.6.txt:37
msgid ""
"Django 1.6, like Django 1.5, requires Python 2.6.5 or above. Python 3 is "
"also officially supported. We **highly recommend** the latest minor release "
"for each supported Python series (2.6.X, 2.7.X, 3.2.X, and 3.3.X)."
msgstr ""

# 8662fd729a72468f82f4812439c618dd
#: ../../releases/1.6.txt:41
msgid ""
"Django 1.6 will be the final release series to support Python 2.6; beginning "
"with Django 1.7, the minimum supported Python version will be 2.7."
msgstr ""

# 31970640a87b47fcbaa6abf063f2d822
#: ../../releases/1.6.txt:44
msgid "Python 3.4 is not supported, but support will be added in Django 1.7."
msgstr ""

# 0529ab96b3974d11a79cfc51d0b0e60e
#: ../../releases/1.6.txt:49
msgid "What's new in Django 1.6"
msgstr ""

# c94287bf7b464fa0b29f75e9aaf26a52
#: ../../releases/1.6.txt:52
msgid "Simplified default project and app templates"
msgstr ""

# aa47c079ba1a48ebaf20c25fb05b5c7e
#: ../../releases/1.6.txt:54
msgid ""
"The default templates used by :djadmin:`startproject` and :djadmin:"
"`startapp` have been simplified and modernized. The :doc:`admin </ref/"
"contrib/admin/index>` is now enabled by default in new projects; the :doc:"
"`sites </ref/contrib/sites>` framework no longer is. :ref:`clickjacking "
"prevention <clickjacking-prevention>` is now on and the database defaults to "
"SQLite."
msgstr ""

# 027d69ea3de74e33b28f58b187a37d75
#: ../../releases/1.6.txt:61
msgid ""
"If the default templates don't suit your tastes, you can use :ref:`custom "
"project and app templates <custom-app-and-project-templates>`."
msgstr ""

# 50d9138cb6e14683ad0bfceb6db8817f
#: ../../releases/1.6.txt:65
msgid "Improved transaction management"
msgstr ""

# e13135f68a164202a93088aea3626dff
#: ../../releases/1.6.txt:67
msgid ""
"Django's transaction management was overhauled. Database-level autocommit is "
"now turned on by default. This makes transaction handling more explicit and "
"should improve performance. The existing APIs were deprecated, and new APIs "
"were introduced, as described in the :doc:`transaction management docs </"
"topics/db/transactions>`."
msgstr ""

# 713f7ee0623e428482c3f2947f3d6817
#: ../../releases/1.6.txt:74
msgid "Persistent database connections"
msgstr ""

# 7fa078fdebf94ccf93e74e0916e51f65
#: ../../releases/1.6.txt:76
msgid ""
"Django now supports reusing the same database connection for several "
"requests. This avoids the overhead of re-establishing a connection at the "
"beginning of each request. For backwards compatibility, this feature is "
"disabled by default. See :ref:`persistent-database-connections` for details."
msgstr ""

# 842a39ffac8d4d34bdb4fdb2f24f541c
#: ../../releases/1.6.txt:82
msgid "Discovery of tests in any test module"
msgstr ""

# 9c0b0dd90a40403da07671be31c2ed55
#: ../../releases/1.6.txt:84
msgid ""
"Django 1.6 ships with a new test runner that allows more flexibility in the "
"location of tests. The previous runner (``django.test.simple."
"DjangoTestSuiteRunner``) found tests only in the ``models.py`` and ``tests."
"py`` modules of a Python package in :setting:`INSTALLED_APPS`."
msgstr ""

# b2f4db5e13f246a683de4b9f613acf23
#: ../../releases/1.6.txt:90
msgid ""
"The new runner (``django.test.runner.DiscoverRunner``) uses the test "
"discovery features built into ``unittest2`` (the version of ``unittest`` in "
"the Python 2.7+ standard library, and bundled with Django). With test "
"discovery, tests can be located in any module whose name matches the pattern "
"``test*.py``."
msgstr ""

# 816f66db2b07491583e7c6bff9e13693
#: ../../releases/1.6.txt:95
msgid ""
"In addition, the test labels provided to ``./manage.py test`` to nominate "
"specific tests to run must now be full Python dotted paths (or directory "
"paths), rather than ``applabel.TestCase.test_method_name`` pseudo-paths. "
"This allows running tests located anywhere in your codebase, rather than "
"only in :setting:`INSTALLED_APPS`. For more details, see :doc:`/topics/"
"testing/index`."
msgstr ""

# 024553b075bb4d748d7d4c24cd84b5c7
#: ../../releases/1.6.txt:101
msgid ""
"This change is backwards-incompatible; see the :ref:`backwards-"
"incompatibility notes<new-test-runner>`."
msgstr ""

# ab3be03a02134365add55eade664cb78
#: ../../releases/1.6.txt:105
msgid "Time zone aware aggregation"
msgstr ""

# ec81ed8ab7bd40d89a8edee41132ba7b
#: ../../releases/1.6.txt:107
msgid ""
"The support for :doc:`time zones </topics/i18n/timezones>` introduced in "
"Django 1.4 didn't work well with :meth:`QuerySet.dates() <django.db.models."
"query.QuerySet.dates>`: aggregation was always performed in UTC. This "
"limitation was lifted in Django 1.6. Use :meth:`QuerySet.datetimes() <django."
"db.models.query.QuerySet.datetimes>` to perform time zone aware aggregation "
"on a :class:`~django.db.models.DateTimeField`."
msgstr ""

# 0357c0f73371440daa5b63ba30f9d3b9
#: ../../releases/1.6.txt:115
msgid "Support for savepoints in SQLite"
msgstr ""

# 8186f7130a1447ada843283f1078a904
#: ../../releases/1.6.txt:117
msgid ""
"Django 1.6 adds support for savepoints in SQLite, with some :ref:"
"`limitations <savepoints-in-sqlite>`."
msgstr ""

# 41de9dc40883486e962d1a6b357d4886
#: ../../releases/1.6.txt:121
msgid "``BinaryField`` model field"
msgstr ""

# bbea7a639f9143c18200a9657a8b505e
#: ../../releases/1.6.txt:123
msgid ""
"A new :class:`django.db.models.BinaryField` model field allows storage of "
"raw binary data in the database."
msgstr ""

# 6a5ba47c51d54c9784391fa749b62ca8
#: ../../releases/1.6.txt:127
msgid "GeoDjango form widgets"
msgstr ""

#: ../../releases/1.6.txt:129
msgid ""
"GeoDjango now provides :doc:`form fields and widgets </ref/contrib/gis/forms-"
"api>` for its geo-specialized fields. They are OpenLayers-based by default, "
"but they can be customized to use any other JS framework."
msgstr ""

# cf2663362f6d4ca4ab705753cf366cd4
#: ../../releases/1.6.txt:134
msgid "``check`` management command added for verifying compatibility"
msgstr ""

# 4d6ff8bd962e4bb4a91d0970bb919556
#: ../../releases/1.6.txt:136
msgid ""
"A :djadmin:`check` management command was added, enabling you to verify if "
"your current configuration (currently oriented at settings) is compatible "
"with the current version of Django."
msgstr ""

# a1975fe5419645a8b10d0f553bb79251
#: ../../releases/1.6.txt:141
msgid ":meth:`Model.save() <django.db.models.Model.save()>` algorithm changed"
msgstr ""

# d0fa5060622d43e4ac7164cb74939637
#: ../../releases/1.6.txt:143
msgid ""
"The :meth:`Model.save() <django.db.models.Model.save()>` method now tries to "
"directly ``UPDATE`` the database if the instance has a primary key value. "
"Previously ``SELECT`` was performed to determine if ``UPDATE`` or ``INSERT`` "
"were needed. The new algorithm needs only one query for updating an existing "
"row while the old algorithm needed two. See :meth:`Model.save() <django.db."
"models.Model.save()>` for more details."
msgstr ""

# 6810d77e0b3d44a58ea3e06e1193f8db
#: ../../releases/1.6.txt:150
msgid ""
"In some rare cases the database doesn't report that a matching row was found "
"when doing an ``UPDATE``. An example is the PostgreSQL ``ON UPDATE`` trigger "
"which returns ``NULL``. In such cases it is possible to set :attr:`django.db."
"models.Options.select_on_save` flag to force saving to use the old algorithm."
msgstr ""

# 6e75087b72514871a4d730077ca57f3c
#: ../../releases/1.6.txt:157
msgid "Minor features"
msgstr ""

# 509ed1c4da9442d7a12ba53811238827
#: ../../releases/1.6.txt:159
msgid ""
"Authentication backends can raise ``PermissionDenied`` to immediately fail "
"the authentication chain."
msgstr ""

# ad4ab73da93147c0abd137f19dbb9e11
#: ../../releases/1.6.txt:162
msgid ""
"The ``HttpOnly`` flag can be set on the CSRF cookie with :setting:"
"`CSRF_COOKIE_HTTPONLY`."
msgstr ""

# e1a93677b74c4c3ab76f55303411a3aa
#: ../../releases/1.6.txt:165
msgid ""
"The :meth:`~django.test.TransactionTestCase.assertQuerysetEqual` now checks "
"for undefined order and raises :exc:`ValueError` if undefined order is "
"spotted. The order is seen as undefined if the given ``QuerySet`` isn't "
"ordered and there are more than one ordered values to compare against."
msgstr ""

# c9ed4aeacdab481dac7bf30304e94580
#: ../../releases/1.6.txt:170
msgid ""
"Added :meth:`~django.db.models.query.QuerySet.earliest` for symmetry with :"
"meth:`~django.db.models.query.QuerySet.latest`."
msgstr ""

# debc997195e545bcb97b04de53b17983
#: ../../releases/1.6.txt:173
msgid ""
"In addition to :lookup:`year`, :lookup:`month` and :lookup:`day`, the ORM "
"now supports :lookup:`hour`, :lookup:`minute` and :lookup:`second` lookups."
msgstr ""

# 24ed74f3d6854fe199e3699e94864348
#: ../../releases/1.6.txt:176
msgid "Django now wraps all PEP-249 exceptions."
msgstr ""

# a08f004c07a94e87becbf0ffee75b207
#: ../../releases/1.6.txt:178
msgid ""
"The default widgets for :class:`~django.forms.EmailField`, :class:`~django."
"forms.URLField`, :class:`~django.forms.IntegerField`, :class:`~django.forms."
"FloatField` and :class:`~django.forms.DecimalField` use the new type "
"attributes available in HTML5 (``type='email'``, ``type='url'``, "
"``type='number'``). Note that due to erratic support of the ``number`` input "
"type with localized numbers in current browsers, Django only uses it when "
"numeric fields are not localized."
msgstr ""

# d75571a838134e2e9222729a31e3e659
#: ../../releases/1.6.txt:186
msgid ""
"The ``number`` argument for :ref:`lazy plural translations <lazy-plural-"
"translations>` can be provided at translation time rather than at definition "
"time."
msgstr ""

#: ../../releases/1.6.txt:190
msgid ""
"For custom management commands: Verification of the presence of valid "
"settings in commands that ask for it by using the ``BaseCommand."
"can_import_settings`` internal option is now performed independently from "
"handling of the locale that should be active during the execution of the "
"command. The latter can now be influenced by the new :attr:`~django.core."
"management.BaseCommand.leave_locale_alone` internal option. See :ref:"
"`management-commands-and-locales` for more details."
msgstr ""

# 7328390e50d94ea9a6da2f6eebae49aa
#: ../../releases/1.6.txt:199
msgid ""
"The :attr:`~django.views.generic.edit.DeletionMixin.success_url` of :class:"
"`~django.views.generic.edit.DeletionMixin` is now interpolated with its "
"``object``’s ``__dict__``."
msgstr ""

# e950778aa1bf41bea91181ce9f55f7fa
#: ../../releases/1.6.txt:203
msgid ""
":class:`~django.http.HttpResponseRedirect` and :class:`~django.http."
"HttpResponsePermanentRedirect` now provide an ``url`` attribute (equivalent "
"to the URL the response will redirect to)."
msgstr ""

# 2a73615d62ad4146be7d7181d0b549a0
#: ../../releases/1.6.txt:207
msgid ""
"The ``MemcachedCache`` cache backend now uses the latest :mod:`pickle` "
"protocol available."
msgstr ""

# 5a218d40604c4e4583675fc52be86971
#: ../../releases/1.6.txt:210
msgid ""
"Added :class:`~django.contrib.messages.views.SuccessMessageMixin` which "
"provides a ``success_message`` attribute for :class:`~django.views.generic."
"edit.FormView` based classes."
msgstr ""

# 3ccdc73391f845bf851d243cb9ac4b58
#: ../../releases/1.6.txt:214
msgid ""
"Added the :attr:`django.db.models.ForeignKey.db_constraint` and :attr:"
"`django.db.models.ManyToManyField.db_constraint` options."
msgstr ""

# cb400f42531548c2a795973a944f04c2
#: ../../releases/1.6.txt:217
msgid ""
"The jQuery library embedded in the admin has been upgraded to version 1.9.1."
msgstr ""

# f7cd4c2cb36641be96e514b3e52bf7f4
#: ../../releases/1.6.txt:219
msgid ""
"Syndication feeds (:mod:`django.contrib.syndication`) can now pass extra "
"context through to feed templates using a new :meth:`Feed.get_context_data() "
"<django.contrib.syndication.Feed.get_context_data>` callback."
msgstr ""

# 214f2f353474453b9950780e91e85d73
#: ../../releases/1.6.txt:224
msgid ""
"The admin list columns have a ``column-<field_name>`` class in the HTML so "
"the columns header can be styled with CSS, e.g. to set a column width."
msgstr ""

# ba52f651ab3143398b0780d47c59d289
#: ../../releases/1.6.txt:227
msgid ""
"The :ref:`isolation level<database-isolation-level>` can be customized under "
"PostgreSQL."
msgstr ""

#: ../../releases/1.6.txt:230
msgid ""
"The :ttag:`blocktrans` template tag now respects "
"``TEMPLATE_STRING_IF_INVALID`` for variables not present in the context, "
"just like other template constructs."
msgstr ""

# df6a05aa37df44b2b6d64ee57e75018f
#: ../../releases/1.6.txt:234
msgid ""
"``SimpleLazyObject``\\s will now present more helpful representations in "
"shell debugging situations."
msgstr ""

# 2b9d5ed4e2cd4eeeab5f6f87276a05e9
#: ../../releases/1.6.txt:237
msgid ""
"Generic :class:`~django.contrib.gis.db.models.GeometryField` is now editable "
"with the OpenLayers widget in the admin."
msgstr ""

# 6e703f938d6247ba8dbf4e896d50dc68
#: ../../releases/1.6.txt:240
msgid ""
"The documentation contains a :doc:`deployment checklist </howto/deployment/"
"checklist>`."
msgstr ""

# 2d5e488e613144d5b21db3ad9818e4c1
#: ../../releases/1.6.txt:243
msgid "The :djadmin:`diffsettings` command gained a ``--all`` option."
msgstr ""

# e78ced47901e4616aa6df23c41ce2259
#: ../../releases/1.6.txt:245
msgid ""
"``django.forms.fields.Field.__init__`` now calls ``super()``, allowing field "
"mixins to implement ``__init__()`` methods that will reliably be called."
msgstr ""

# daa9a832a001419785df00d029276567
#: ../../releases/1.6.txt:249
msgid ""
"The ``validate_max`` parameter was added to ``BaseFormSet`` and :func:"
"`~django.forms.formsets.formset_factory`, and ``ModelForm`` and inline "
"versions of the same.  The behavior of validation for formsets with "
"``max_num`` was clarified.  The previously undocumented behavior that "
"hardened formsets against memory exhaustion attacks was documented, and the "
"undocumented limit of the higher of 1000 or ``max_num`` forms was changed so "
"it is always 1000 more than ``max_num``."
msgstr ""

# 088c18798c294a6282375fcdf3d37cc9
#: ../../releases/1.6.txt:257
msgid ""
"Added ``BCryptSHA256PasswordHasher`` to resolve the password truncation "
"issue with bcrypt."
msgstr ""

# e73d2dd10b3e42c6b8a518339e612131
#: ../../releases/1.6.txt:260
msgid ""
"`Pillow`_ is now the preferred image manipulation library to use with "
"Django. `PIL`_ is pending deprecation (support to be removed in Django 1.8). "
"To upgrade, you should **first** uninstall PIL, **then** install Pillow."
msgstr ""

# eff0bb70ad794fde8c31aca6fe2c8378
#: ../../releases/1.6.txt:267
msgid ":class:`~django.forms.ModelForm` accepts several new ``Meta`` options."
msgstr ""

# 4ac43b25ae214675b67241e8ef7d66f3
#: ../../releases/1.6.txt:270
msgid ""
"Fields included in the ``localized_fields`` list will be localized (by "
"setting ``localize`` on the form field)."
msgstr ""

# de020b4236db4e1fa8637bdd710dc0a9
#: ../../releases/1.6.txt:272
msgid ""
"The  ``labels``, ``help_texts`` and ``error_messages`` options may be used "
"to customize the default fields, see :ref:`modelforms-overriding-default-"
"fields` for details."
msgstr ""

# 9bd0512ced2541c5b5cddb5181d5b809
#: ../../releases/1.6.txt:276
msgid ""
"The ``choices`` argument to model fields now accepts an iterable of "
"iterables instead of requiring an iterable of lists or tuples."
msgstr ""

# fcffa5791e8c404da33d4e95be57d61a
#: ../../releases/1.6.txt:279
msgid ""
"The reason phrase can be customized in HTTP responses using :attr:`~django."
"http.HttpResponse.reason_phrase`."
msgstr ""

# 1af73bf128f848b89cce483a24e02efb
#: ../../releases/1.6.txt:282
msgid ""
"When giving the URL of the next page for :func:`~django.contrib.auth.views."
"logout`, :func:`~django.contrib.auth.views.password_reset`, :func:`~django."
"contrib.auth.views.password_reset_confirm`, and :func:`~django.contrib.auth."
"views.password_change`, you can now pass URL names and they will be resolved."
msgstr ""

#: ../../releases/1.6.txt:289
msgid ""
"The new :option:`dumpdata --pks` option specifies the primary keys of "
"objects to dump. This option can only be used with one model."
msgstr ""

# 627ed7bf375647eeb2daaebb38fb862d
#: ../../releases/1.6.txt:292
msgid ""
"Added ``QuerySet`` methods :meth:`~django.db.models.query.QuerySet.first` "
"and :meth:`~django.db.models.query.QuerySet.last` which are convenience "
"methods returning the first or last object matching the filters. Returns "
"``None`` if there are no objects matching."
msgstr ""

# be225e76930743cd99255e9502b6ba85
#: ../../releases/1.6.txt:297
msgid ""
":class:`~django.views.generic.base.View` and :class:`~django.views.generic."
"base.RedirectView` now support HTTP ``PATCH`` method."
msgstr ""

# 24f389b71f4c40d885590b4cc6733428
#: ../../releases/1.6.txt:301
msgid ""
"``GenericForeignKey`` now takes an optional ``for_concrete_model`` argument, "
"which when set to ``False`` allows the field to reference proxy models. The "
"default is ``True`` to retain the old behavior."
msgstr ""

# 7b3a8fcb3a9941b2a88b04a8abe0f6c8
#: ../../releases/1.6.txt:305
msgid ""
"The :class:`~django.middleware.locale.LocaleMiddleware` now stores the "
"active language in session if it is not present there. This prevents loss of "
"language settings after session flush, e.g. logout."
msgstr ""

# 94e101cbc43b4dfc975d34f0005e1e53
#: ../../releases/1.6.txt:309
msgid ""
":exc:`~django.core.exceptions.SuspiciousOperation` has been differentiated "
"into a number of subclasses, and each will log to a matching named logger "
"under the ``django.security`` logging hierarchy. Along with this change, a "
"``handler400`` mechanism and default view are used whenever a "
"``SuspiciousOperation`` reaches the WSGI handler to return an "
"``HttpResponseBadRequest``."
msgstr ""

#: ../../releases/1.6.txt:316
msgid ""
"The :exc:`~django.db.models.Model.DoesNotExist` exception now includes a "
"message indicating the name of the attribute used for the lookup."
msgstr ""

# c6d48afe7d964fc0bb54756c26f2c8b1
#: ../../releases/1.6.txt:319
msgid ""
"The :meth:`~django.db.models.query.QuerySet.get_or_create` method no longer "
"requires at least one keyword argument."
msgstr ""

# 0110b6f76a9a43dcb1c0994edcc5b605
#: ../../releases/1.6.txt:322
msgid ""
"The :class:`~django.test.SimpleTestCase` class includes a new assertion "
"helper for testing formset errors: :meth:`~django.test.SimpleTestCase."
"assertFormsetError`."
msgstr ""

# 860989f23a0047b18dd9e7307d65022d
#: ../../releases/1.6.txt:326
msgid ""
"The list of related fields added to a :class:`~django.db.models.query."
"QuerySet` by :meth:`~django.db.models.query.QuerySet.select_related` can be "
"cleared using ``select_related(None)``."
msgstr ""

# bd0f29f05a584a86881de1f1c14356f6
#: ../../releases/1.6.txt:331
msgid ""
"The :meth:`~django.contrib.admin.InlineModelAdmin.get_extra` and :meth:"
"`~django.contrib.admin.InlineModelAdmin.get_max_num` methods on :class:"
"`~django.contrib.admin.InlineModelAdmin` may be overridden to customize the "
"extra and maximum number of inline forms."
msgstr ""

# 65ab6959227a4c1586101da7e6fde474
#: ../../releases/1.6.txt:336
msgid ""
"Formsets now have a :meth:`~django.forms.formsets.BaseFormSet."
"total_error_count` method."
msgstr ""

# 04c56fb87d9c48699cf99ed147e5acb1
#: ../../releases/1.6.txt:339
msgid ""
":class:`~django.forms.ModelForm` fields can now override error messages "
"defined in model fields by using the :attr:`~django.forms.Field."
"error_messages` argument of a ``Field``’s constructor. To take advantage of "
"this new feature with your custom fields, :ref:`see the updated "
"recommendation <raising-validation-error>` for raising a ``ValidationError``."
msgstr ""

# 35b1deeefeae439586d79732e18daad1
#: ../../releases/1.6.txt:346
msgid ""
":class:`~django.contrib.admin.ModelAdmin` now preserves filters on the list "
"view after creating, editing or deleting an object. It's possible to restore "
"the previous behavior of clearing filters by setting the :attr:`~django."
"contrib.admin.ModelAdmin.preserve_filters` attribute to ``False``."
msgstr ""

# 0aceb500b43f4131a9b63ab1805bd78e
#: ../../releases/1.6.txt:351
msgid ""
"Added :meth:`FormMixin.get_prefix<django.views.generic.edit.FormMixin."
"get_prefix>` (which returns :attr:`FormMixin.prefix<django.views.generic."
"edit.FormMixin.prefix>` by default) to allow customizing the :attr:`~django."
"forms.Form.prefix` of the form."
msgstr ""

# 6483800d450c467c8d76502c199c354c
#: ../../releases/1.6.txt:358
msgid ""
"Raw queries (``Manager.raw()`` or ``cursor.execute()``) can now use the "
"\"pyformat\" parameter style, where placeholders in the query are given as "
"``'%(name)s'`` and the parameters are passed as a dictionary rather than a "
"list (except on SQLite). This has long been possible (but not officially "
"supported) on MySQL and PostgreSQL, and is now also available on Oracle."
msgstr ""

# da5a0ccf63314c08b2bd2dbbf7ea99ee
#: ../../releases/1.6.txt:364
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 20%. This backwards compatible change will not affect existing "
"passwords or users who have subclassed ``django.contrib.auth.hashers."
"PBKDF2PasswordHasher`` to change the default value. Passwords :ref:`will be "
"upgraded <password-upgrades>` to use the new iteration count as necessary."
msgstr ""

# fa4000dbb19e4574bce0de0eec8a0746
#: ../../releases/1.6.txt:374
msgid "Backwards incompatible changes in 1.6"
msgstr ""

# 2ab4278a8f484e9fb3f6cea93013bbf2
#: ../../releases/1.6.txt:378
msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`deprecation plan <deprecation-removed-in-1.6>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# 5a2754c7fcb14a658613419c6c973f2f
#: ../../releases/1.6.txt:385
msgid "New transaction management model"
msgstr ""

# 85487c4cc7f341138760bb49da0a22b9
#: ../../releases/1.6.txt:388
msgid "Behavior changes"
msgstr ""

#: ../../releases/1.6.txt:390
msgid ""
"Database-level autocommit is enabled by default in Django 1.6. While this "
"doesn't change the general spirit of Django's transaction management, there "
"are a few backwards-incompatibilities."
msgstr ""

# bff279f2f7d943c0af33c0e82b4aefde
#: ../../releases/1.6.txt:395
msgid "Savepoints and ``assertNumQueries``"
msgstr ""

# aeeea7a35eec4689a95f7409b9eec56f
#: ../../releases/1.6.txt:397
msgid ""
"The changes in transaction management may result in additional statements to "
"create, release or rollback savepoints. This is more likely to happen with "
"SQLite, since it didn't support savepoints until this release."
msgstr ""

# 80558e1c13714505ae9b556ab4f936a2
#: ../../releases/1.6.txt:401
msgid ""
"If tests using :meth:`~django.test.TransactionTestCase.assertNumQueries` "
"fail because of a higher number of queries than expected, check that the "
"extra queries are related to savepoints, and adjust the expected number of "
"queries accordingly."
msgstr ""

# 0d45759ec3fc430a8aea62cef110e6ed
#: ../../releases/1.6.txt:407
msgid "Autocommit option for PostgreSQL"
msgstr ""

#: ../../releases/1.6.txt:409
msgid ""
"In previous versions, database-level autocommit was only an option for "
"PostgreSQL, and it was disabled by default. This option is now ignored and "
"can be removed."
msgstr ""

# 644c1659012a46ab97ea3dd711f9046d
#: ../../releases/1.6.txt:416
msgid "New test runner"
msgstr ""

# 5c35ce3f4a55481b983d7396c61aec68
#: ../../releases/1.6.txt:418
msgid ""
"In order to maintain greater consistency with Python's unittest module, the "
"new test runner (``django.test.runner.DiscoverRunner``) does not "
"automatically support some types of tests that were supported by the "
"previous runner:"
msgstr ""

# 5647c90daadc46529cfe72401a8bff68
#: ../../releases/1.6.txt:422
msgid ""
"Tests in ``models.py`` and ``tests/__init__.py`` files will no longer be "
"found and run. Move them to a file whose name begins with ``test``."
msgstr ""

#: ../../releases/1.6.txt:425
msgid ""
"Doctests will no longer be automatically discovered. To integrate doctests "
"in your test suite, follow the :ref:`recommendations in the Python "
"documentation <doctest-unittest-api>`."
msgstr ""

# 792c8c79b9b64bdc97fab4f9349dbfd7
#: ../../releases/1.6.txt:429
msgid ""
"Django bundles a modified version of the :mod:`doctest` module from the "
"Python standard library (in ``django.test._doctest``) and includes some "
"additional doctest utilities. These utilities are deprecated and will be "
"removed in Django 1.8; doctest suites should be updated to work with the "
"standard library's doctest module (or converted to unittest-compatible "
"tests)."
msgstr ""

# 2cfbd9a106bf4543af882909201ef5f4
#: ../../releases/1.6.txt:435
msgid ""
"If you wish to delay updates to your test suite, you can set your :setting:"
"`TEST_RUNNER` setting to ``django.test.simple.DjangoTestSuiteRunner`` to "
"fully restore the old test behavior. ``DjangoTestSuiteRunner`` is deprecated "
"but will not be removed from Django until version 1.8."
msgstr ""

# b509d476c0c045afb11634fc6e8e81e6
#: ../../releases/1.6.txt:441
msgid ""
"Removal of ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` GeoDjango "
"custom test runner"
msgstr ""

# b700cb0c633c42109584a54f77ae7e91
#: ../../releases/1.6.txt:443
msgid ""
"This is for developers working on the GeoDjango application itself and "
"related to the item above about changes in the test runners:"
msgstr ""

# 2151537096254a87ba1329240e1bcc98
#: ../../releases/1.6.txt:446
msgid ""
"The ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` test runner has "
"been removed and the standalone GeoDjango tests execution setup it "
"implemented isn't supported anymore. To run the GeoDjango tests simply use "
"the new ``DiscoverRunner`` and specify the ``django.contrib.gis`` app."
msgstr ""

#: ../../releases/1.6.txt:452
msgid "Custom user models in tests"
msgstr ""

#: ../../releases/1.6.txt:454
msgid ""
"The introduction of the new test runner has also slightly changed the way "
"that test models are imported. As a result, any test that overrides "
"``AUTH_USER_MODEL`` to test behavior with one of Django's test user models "
"( ``django.contrib.auth.tests.custom_user.CustomUser`` and ``django.contrib."
"auth.tests.custom_user.ExtensionUser``) must now explicitly import the User "
"model in your test module::"
msgstr ""

# 05bc48e10a2d4fd0843b33d830defb50
#: ../../releases/1.6.txt:468
msgid ""
"This import forces the custom user model to be registered. Without this "
"import, the test will be unable to swap in the custom user model, and you "
"will get an error reporting::"
msgstr ""

# 8e6f8a39072847f18eb129e4a5b9c454
#: ../../releases/1.6.txt:475
msgid "Time zone-aware ``day``, ``month``, and ``week_day`` lookups"
msgstr ""

# 43cddf516c854683b8bbd3ca297e5ff5
#: ../../releases/1.6.txt:477
msgid ""
"Django 1.6 introduces time zone support for :lookup:`day`, :lookup:`month`, "
"and :lookup:`week_day` lookups when :setting:`USE_TZ` is ``True``. These "
"lookups were previously performed in UTC regardless of the current time zone."
msgstr ""

# 9c81468fbbc44cd6b732c33bdbb079c8
#: ../../releases/1.6.txt:481
msgid ""
"This requires :ref:`time zone definitions in the database <database-time-"
"zone-definitions>`. If you're using SQLite, you must install pytz_. If "
"you're using MySQL, you must install pytz_ and load the time zone tables "
"with `mysql_tzinfo_to_sql`_."
msgstr ""

# f65ef57d73d8445e9745461667fb6f69
#: ../../releases/1.6.txt:490
msgid "Addition of ``QuerySet.datetimes()``"
msgstr ""

# 42f2db6d516c4c97a8fef7a74a3eea8d
#: ../../releases/1.6.txt:492
msgid ""
"When the :doc:`time zone support </topics/i18n/timezones>` added in Django "
"1.4 was active, :meth:`QuerySet.dates() <django.db.models.query.QuerySet."
"dates>` lookups returned unexpected results, because the aggregation was "
"performed in UTC. To fix this, Django 1.6 introduces a new API, :meth:"
"`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>`. This "
"requires a few changes in your code."
msgstr ""

# a845d489ef61433e931d272752c08c89
#: ../../releases/1.6.txt:500
msgid "``QuerySet.dates()`` returns ``date`` objects"
msgstr ""

# bacc4bb84ab64715a2d1ed2cf91b9df6
#: ../../releases/1.6.txt:502
msgid ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` now returns "
"a list of :class:`~datetime.date`. It used to return a list of :class:"
"`~datetime.datetime`."
msgstr ""

# e950e1502e064b6c8ff24c8b450888e6
#: ../../releases/1.6.txt:506
msgid ""
":meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` "
"returns a list of :class:`~datetime.datetime`."
msgstr ""

# 81e11145cdc046fdb4a5706d9ee9e558
#: ../../releases/1.6.txt:510
msgid "``QuerySet.dates()`` no longer usable on ``DateTimeField``"
msgstr ""

# ad478f8f3ed84374aba826e810809996
#: ../../releases/1.6.txt:512
msgid ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` raises an "
"error if it's used on :class:`~django.db.models.DateTimeField` when time "
"zone support is active. Use :meth:`QuerySet.datetimes() <django.db.models."
"query.QuerySet.datetimes>` instead."
msgstr ""

# dce0849352f041ce9586396f75be0e5d
#: ../../releases/1.6.txt:518
msgid "``date_hierarchy`` requires time zone definitions"
msgstr ""

# e71334d76702401699a0ceed8c862cba
#: ../../releases/1.6.txt:520
msgid ""
"The :attr:`~django.contrib.admin.ModelAdmin.date_hierarchy` feature of the "
"admin now relies on :meth:`QuerySet.datetimes() <django.db.models.query."
"QuerySet.datetimes>` when it's used on a :class:`~django.db.models."
"DateTimeField`."
msgstr ""

# 82ac4086a2a74720b69f333553f1541e
#: ../../releases/1.6.txt:525
msgid ""
"This requires time zone definitions in the database when :setting:`USE_TZ` "
"is ``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""

# 8de81ee34c06486d8eda1ce425689d53
#: ../../releases/1.6.txt:529
msgid "``date_list`` in generic views requires time zone definitions"
msgstr ""

# 4dbfe02951254a80b88d835e86fd4287
#: ../../releases/1.6.txt:531
msgid ""
"For the same reason, accessing ``date_list`` in the context of a date-based "
"generic view requires time zone definitions in the database when the view is "
"based on a :class:`~django.db.models.DateTimeField` and :setting:`USE_TZ` is "
"``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""

# 289e9ec64efb4ac3aca78f87fa660149
#: ../../releases/1.6.txt:537
msgid "New lookups may clash with model fields"
msgstr ""

# e8b601a851624fcba4e97ce0defdb3a9
#: ../../releases/1.6.txt:539
msgid ""
"Django 1.6 introduces ``hour``, ``minute``, and ``second`` lookups on :class:"
"`~django.db.models.DateTimeField`. If you had model fields called ``hour``, "
"``minute``, or ``second``, the new lookups will clash with you field names. "
"Append an explicit :lookup:`exact` lookup if this is an issue."
msgstr ""

# 521a80dc2b07401daf12b84c34d18844
#: ../../releases/1.6.txt:545
msgid "``BooleanField`` no longer defaults to ``False``"
msgstr ""

# cee352e91cd244d2a9e18baf91b99033
#: ../../releases/1.6.txt:547
msgid ""
"When a :class:`~django.db.models.BooleanField` doesn't have an explicit :"
"attr:`~django.db.models.Field.default`, the implicit default value is "
"``None``. In previous version of Django, it was ``False``, but that didn't "
"represent accurately the lack of a value."
msgstr ""

# 9fb9db950f9d4e2596d957f116b12607
#: ../../releases/1.6.txt:552
msgid ""
"Code that relies on the default value being ``False`` may raise an exception "
"when saving new model instances to the database, because ``None`` isn't an "
"acceptable value for a :class:`~django.db.models.BooleanField`. You should "
"either specify ``default=False`` in the field definition, or ensure the "
"field is set to ``True`` or ``False`` before saving the object."
msgstr ""

# 5214fd8299084c279984aa56137b3e3a
#: ../../releases/1.6.txt:559
msgid "Translations and comments in templates"
msgstr ""

# df2672ef7e7441fe8a806c54cb9d98ff
#: ../../releases/1.6.txt:562
msgid "Extraction of translations after comments"
msgstr ""

# 2eb7f3bc7370409b9af106e0d8828207
#: ../../releases/1.6.txt:564
msgid ""
"Extraction of translatable literals from templates with the :djadmin:"
"`makemessages` command now correctly detects i18n constructs when they are "
"located after a ``{#`` / ``#}``-type comment on the same line. E.g.:"
msgstr ""

# bd9cdcbb459a40578f6aac747e1062e5
#: ../../releases/1.6.txt:573
msgid "Location of translator comments"
msgstr ""

# f27927867d5c4c3db274629757dce948
#: ../../releases/1.6.txt:575
msgid ""
":ref:`translator-comments-in-templates` specified using ``{#`` / ``#}`` need "
"to be at the end of a line. If they are not, the comments are ignored and :"
"djadmin:`makemessages` will generate a warning. For example:"
msgstr ""

#: ../../releases/1.6.txt:586
msgid "Quoting in ``reverse()``"
msgstr ""

#: ../../releases/1.6.txt:588
msgid ""
"When reversing URLs, Django didn't apply :func:`~django.utils.http.urlquote` "
"to arguments before interpolating them in URL patterns. This bug is fixed in "
"Django 1.6. If you worked around this bug by applying URL quoting before "
"passing arguments to ``reverse()``, this may result in double-quoting. If "
"this happens, simply remove the URL quoting from your code. You will also "
"have to replace special characters in URLs used in :func:`~django.test."
"SimpleTestCase.assertRedirects` with their encoded versions."
msgstr ""

# 960925a02b934d12ab393b32efbbef62
#: ../../releases/1.6.txt:598
msgid "Storage of IP addresses in the comments app"
msgstr ""

#: ../../releases/1.6.txt:600
msgid ""
"The comments app now uses a ``GenericIPAddressField`` for storing "
"commenters' IP addresses, to support comments submitted from IPv6 addresses. "
"Until now, it stored them in an ``IPAddressField``, which is only meant to "
"support IPv4. When saving a comment made from an IPv6 address, the address "
"would be silently truncated on MySQL databases, and raise an exception on "
"Oracle. You will need to change the column type in your database to benefit "
"from this change."
msgstr ""

# 74dfd15f6ae644349e36310e39d534a3
#: ../../releases/1.6.txt:608
msgid "For MySQL, execute this query on your project's database:"
msgstr ""

# 4460192145774b9882222488447b5b0b
#: ../../releases/1.6.txt:614
msgid "For Oracle, execute this query:"
msgstr ""

# 166479845977446295c88a0e9706c983
#: ../../releases/1.6.txt:620
msgid ""
"If you do not apply this change, the behavior is unchanged: on MySQL, IPv6 "
"addresses are silently truncated; on Oracle, an exception is generated. No "
"database change is needed for SQLite or PostgreSQL databases."
msgstr ""

# cbc424c43b58476f8ca7d7bfa806d6bd
#: ../../releases/1.6.txt:625
msgid "Percent literals in ``cursor.execute`` queries"
msgstr ""

# b3d93e5163014796ad549dd12672f442
#: ../../releases/1.6.txt:627
msgid ""
"When you are running raw SQL queries through the :ref:`cursor.execute "
"<executing-custom-sql>` method, the rule about doubling percent literals (``"
"%``) inside the query has been unified. Past behavior depended on the "
"database backend. Now, across all backends, you only need to double literal "
"percent characters if you are also providing replacement parameters. For "
"example::"
msgstr ""

# 4d949ddb316b4682b723220a217f4bc7
#: ../../releases/1.6.txt:640
msgid "``SQLite`` users need to check and update such queries."
msgstr ""

# c24a3062b7f1413ea999e3caee859dc4
#: ../../releases/1.6.txt:645
msgid "Help text of model form fields for ManyToManyField fields"
msgstr ""

# a83aed879f6549f2b150bf6f0d83fa65
#: ../../releases/1.6.txt:647
msgid ""
"HTML rendering of model form fields corresponding to :class:`~django.db."
"models.ManyToManyField` model fields used to get the hard-coded sentence:"
msgstr ""

# c35ef378498d4bc8ba553aa8ab1caa8d
#: ../../releases/1.6.txt:651
msgid ""
"*Hold down \"Control\", or \"Command\" on a Mac, to select more than one.*"
msgstr ""

# 3e3d045eaf084426bbae2cbe62ff0fb1
#: ../../releases/1.6.txt:653
msgid ""
"(or its translation to the active locale) imposed as the help legend shown "
"along them if neither :attr:`model <django.db.models.Field.help_text>` nor :"
"attr:`form <django.forms.Field.help_text>` ``help_text`` attributes were "
"specified by the user (or this string was appended to any ``help_text`` that "
"was provided)."
msgstr ""

# aced40eac489485ca756bffea1411baf
#: ../../releases/1.6.txt:658
msgid ""
"Since this happened at the model layer, there was no way to prevent the text "
"from appearing in cases where it wasn't applicable such as form fields that "
"implement user interactions that don't involve a keyboard and/or a mouse."
msgstr ""

# a2f33247a8ff40fda7d51613d4a3e44e
#: ../../releases/1.6.txt:662
msgid ""
"Starting with Django 1.6, as an ad-hoc temporary backward-compatibility "
"provision, the logic to add the \"Hold down...\" sentence has been moved to "
"the model form field layer and modified to add the text only when the "
"associated widget is :class:`~django.forms.SelectMultiple` or selected "
"subclasses."
msgstr ""

# f89d0ed99bdd4175b2a4d0d8a490c50f
#: ../../releases/1.6.txt:667
msgid ""
"The change can affect you in a backward incompatible way if you employ "
"custom model form fields and/or widgets for ``ManyToManyField`` model fields "
"whose UIs do rely on the automatic provision of the mentioned hard-coded "
"sentence. These form field implementations need to adapt to the new scenario "
"by providing their own handling of the ``help_text`` attribute."
msgstr ""

# eb26d19fc0ec414d92a08b724ae7b36b
#: ../../releases/1.6.txt:673
msgid ""
"Applications that use Django :doc:`model form </topics/forms/modelforms>` "
"facilities together with Django built-in form :doc:`fields </ref/forms/"
"fields>` and :doc:`widgets </ref/forms/widgets>` aren't affected but need to "
"be aware of what's described in :ref:`m2m-help_text-deprecation` below."
msgstr ""

# 360113992472456a8ad6725c2f9da0f0
#: ../../releases/1.6.txt:679
msgid "QuerySet iteration"
msgstr ""

# 0006833a7a4a46ff9c8f4e539b37a6b6
#: ../../releases/1.6.txt:681
msgid ""
"The ``QuerySet`` iteration was changed to immediately convert all fetched "
"rows to ``Model`` objects. In Django 1.5 and earlier the fetched rows were "
"converted to ``Model`` objects in chunks of 100."
msgstr ""

# 2601a745e0544e798f60a5907bac043d
#: ../../releases/1.6.txt:685
msgid ""
"Existing code will work, but the amount of rows converted to objects might "
"change in certain use cases. Such usages include partially looping over a "
"queryset or any usage which ends up doing ``__bool__`` or ``__contains__``."
msgstr ""

# 3841298a0317420f96607a28b93b789c
#: ../../releases/1.6.txt:690
msgid ""
"Notably most database backends did fetch all the rows in one go already in "
"1.5."
msgstr ""

# a255494a0b3e47da91eeac23f1d0efe2
#: ../../releases/1.6.txt:693
msgid ""
"It is still possible to convert the fetched rows to ``Model`` objects lazily "
"by using the :meth:`~django.db.models.query.QuerySet.iterator()` method."
msgstr ""

# 42adbb5136654234a451656291b56170
#: ../../releases/1.6.txt:698
msgid ""
":meth:`BoundField.label_tag<django.forms.BoundField.label_tag>` now includes "
"the form's :attr:`~django.forms.Form.label_suffix`"
msgstr ""

# 19e5f9d9a7f0456c85abe2dbdf563ef0
#: ../../releases/1.6.txt:700
msgid ""
"This is consistent with how methods like :meth:`Form.as_p<django.forms.Form."
"as_p>` and :meth:`Form.as_ul<django.forms.Form.as_ul>` render labels."
msgstr ""

# 72c90dae65a9482aa0db649e5f3267b4
#: ../../releases/1.6.txt:704
msgid "If you manually render ``label_tag`` in your templates:"
msgstr ""

# 5ac8170b02b24ffb8dffdb05f9776eb2
#: ../../releases/1.6.txt:710
msgid ""
"you'll want to remove the colon (or whatever other separator you may be "
"using) to avoid duplicating it when upgrading to Django 1.6. The following "
"template in Django 1.6 will render identically to the above template in "
"Django 1.5, except that the colon will appear inside the ``<label>`` element."
msgstr ""

# 9247838b0fd741e091163d586d8368ae
#: ../../releases/1.6.txt:719
msgid "will render something like:"
msgstr ""

# 252d044b3a2f4f328d8e63eb052010da
#: ../../releases/1.6.txt:725
msgid ""
"If you want to keep the current behavior of rendering ``label_tag`` without "
"the ``label_suffix``, instantiate the form ``label_suffix=''``. You can also "
"customize the ``label_suffix`` on a per-field basis using the new "
"``label_suffix`` parameter on :meth:`~django.forms.BoundField.label_tag`."
msgstr ""

# c344f5b8bc77415390da6455bcd368be
#: ../../releases/1.6.txt:731
msgid "Admin views ``_changelist_filters`` GET parameter"
msgstr ""

# 4fc83f0072d14d478855a57205bdf85d
#: ../../releases/1.6.txt:733
msgid ""
"To achieve preserving and restoring list view filters, admin views now pass "
"around the `_changelist_filters` GET parameter. It's important that you "
"account for that change if you have custom admin templates or if your tests "
"rely on the previous URLs. If you want to revert to the original behavior "
"you can set the :attr:`~django.contrib.admin.ModelAdmin.preserve_filters` "
"attribute to ``False``."
msgstr ""

# fb365232c984488fb6086d9a30b6b53d
#: ../../releases/1.6.txt:741
msgid ""
"``django.contrib.auth`` password reset uses base 64 encoding of ``User`` PK"
msgstr ""

# a3213a37c89745d8b635014020601ece
#: ../../releases/1.6.txt:743
msgid ""
"Past versions of Django used base 36 encoding of the ``User`` primary key in "
"the password reset views and URLs (:func:`django.contrib.auth.views."
"password_reset_confirm`). Base 36 encoding is sufficient if the user primary "
"key is an integer, however, with the introduction of custom user models in "
"Django 1.5, that assumption may no longer be true."
msgstr ""

# 523264a15e79447fbf37b2cdff156a5d
#: ../../releases/1.6.txt:750
msgid ""
":func:`django.contrib.auth.views.password_reset_confirm` has been modified "
"to take a ``uidb64`` parameter instead of ``uidb36``. If you are reversing "
"this view, for example in a custom ``password_reset_email.html`` template, "
"be sure to update your code."
msgstr ""

# d03ee42c3069466c8679b22023520019
#: ../../releases/1.6.txt:755
msgid ""
"A temporary shim for :func:`django.contrib.auth.views."
"password_reset_confirm` that will allow password reset links generated prior "
"to Django 1.6 to continue to work has been added to provide backwards "
"compatibility; this will be removed in Django 1.7. Thus, as long as your "
"site has been running Django 1.6 for more than :setting:"
"`PASSWORD_RESET_TIMEOUT_DAYS`, this change will have no effect. If not (for "
"example, if you upgrade directly from Django 1.5 to Django 1.7), then any "
"password reset links generated before you upgrade to Django 1.7 or later "
"won't work after the upgrade."
msgstr ""

# 35af6481053a4ebb9a119fbc509da042
#: ../../releases/1.6.txt:764
msgid ""
"In addition, if you have any custom password reset URLs, you will need to "
"update them by replacing ``uidb36`` with ``uidb64`` and the dash that "
"follows that pattern with a slash. Also add ``_\\-`` to the list of "
"characters that may match the ``uidb64`` pattern."
msgstr ""

# 6a3368e77c6d4472a9baa384b7aba315
#: ../../releases/1.6.txt:769
msgid "For example::"
msgstr ""

# 3dd97bad6e1a481282325744b0f0003b
# 9753bc7ff34b4a2a8e1cdd92098c877a
#: ../../releases/1.6.txt:775 ../../releases/1.6.txt:923
msgid "becomes::"
msgstr ""

# 432b3514dae5484abaf07147ca87774a
#: ../../releases/1.6.txt:781
msgid ""
"You may also want to add the shim to support the old style reset links. "
"Using the example above, you would modify the existing url by replacing "
"``django.contrib.auth.views.password_reset_confirm`` with ``django.contrib."
"auth.views.password_reset_confirm_uidb36`` and also remove the ``name`` "
"argument so it doesn't conflict with the new url::"
msgstr ""

#: ../../releases/1.6.txt:790
msgid ""
"You can remove this URL pattern after your app has been deployed with Django "
"1.6 for :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# 7d4bd8acb6c645e5850ab951d9e4471e
#: ../../releases/1.6.txt:794
msgid "Default session serialization switched to JSON"
msgstr ""

# 61b8f6852139485e9d8e9fd47a4cd874
#: ../../releases/1.6.txt:796
msgid ""
"Historically, :mod:`django.contrib.sessions` used :mod:`pickle` to serialize "
"session data before storing it in the backend. If you're using the :ref:"
"`signed cookie session backend<cookie-session-backend>` and :setting:"
"`SECRET_KEY` is known by an attacker (there isn't an inherent vulnerability "
"in Django that would cause it to leak), the attacker could insert a string "
"into his session which, when unpickled, executes arbitrary code on the "
"server. The technique for doing so is simple and easily available on the "
"internet. Although the cookie session storage signs the cookie-stored data "
"to prevent tampering, a :setting:`SECRET_KEY` leak immediately escalates to "
"a remote code execution vulnerability."
msgstr ""

# 941e8fbe434e40058bcf331dc6c8aee4
#: ../../releases/1.6.txt:807
msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduced a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaulted to "
"using :mod:`pickle` in Django 1.5.3, but we've changed the default to JSON "
"in 1.6. If you upgrade and switch from pickle to JSON, sessions created "
"before the upgrade will be lost. While JSON serialization does not support "
"all Python objects like :mod:`pickle` does, we highly recommend using JSON-"
"serialized sessions. Be aware of the following when checking your code to "
"determine if JSON serialization will work for your application:"
msgstr ""

# b9df9e90f0ec45ed9ae89d2e55463333
#: ../../releases/1.6.txt:818
msgid ""
"JSON requires string keys, so you will likely run into problems if you are "
"using non-string keys in ``request.session``."
msgstr ""

# e9616b474e3d40129f68740497b77b13
#: ../../releases/1.6.txt:820
msgid ""
"Setting session expiration by passing ``datetime`` values to :meth:`~django."
"contrib.sessions.backends.base.SessionBase.set_expiry` will not work as "
"``datetime`` values are not serializable in JSON. You can use integer values "
"instead."
msgstr ""

# 5cb53f7571a649ba974290b7a81d8170
#: ../../releases/1.6.txt:825
msgid "See the :ref:`session_serialization` documentation for more details."
msgstr ""

# 9854724a26ca4dfcad2bae81440cedd5
#: ../../releases/1.6.txt:828
msgid "Object Relational Mapper changes"
msgstr ""

# a1384e4ce11145f29465f05551919b38
#: ../../releases/1.6.txt:830
msgid ""
"Django 1.6 contains many changes to the ORM. These changes fall mostly in "
"three categories:"
msgstr ""

# 0c560afbad6444ebba2e2c4d0937ecc5
#: ../../releases/1.6.txt:833
msgid ""
"Bug fixes (e.g. proper join clauses for generic relations, query combining, "
"join promotion, and join trimming fixes)"
msgstr ""

# 314e62a509e941b7aa5bd24a6a76aa9f
#: ../../releases/1.6.txt:835
msgid ""
"Preparation for new features. For example the ORM is now internally ready "
"for multicolumn foreign keys."
msgstr ""

# be21965a8f9a41898b48bab28e0fbb84
#: ../../releases/1.6.txt:837
msgid "General cleanup."
msgstr ""

# e92ebdcad1794f3dbfae8dbb098ee542
#: ../../releases/1.6.txt:839
msgid ""
"These changes can result in some compatibility problems. For example, some "
"queries will now generate different table aliases. This can affect :meth:"
"`QuerySet.extra() <django.db.models.query.QuerySet.extra>`. In addition some "
"queries will now produce different results. An example is :meth:"
"`exclude(condition) <django.db.models.query.QuerySet.exclude>` where the "
"condition is a complex one (referencing multijoins inside :class:`Q objects "
"<django.db.models.Q>`). In many cases the affected queries didn't produce "
"correct results in Django 1.5 but do now. Unfortunately there are also cases "
"that produce different results, but neither Django 1.5 nor 1.6 produce "
"correct results."
msgstr ""

# 3f38cd1499364c39bed7e9f0921921c6
#: ../../releases/1.6.txt:850
msgid "Finally, there have been many changes to the ORM internal APIs."
msgstr ""

# 52fd9ff1c8034885b59994f20d489741
#: ../../releases/1.6.txt:853
msgid "Miscellaneous"
msgstr ""

# 1d675904f60d4683b705b7f83e78efd2
#: ../../releases/1.6.txt:855
msgid ""
"The ``django.db.models.query.EmptyQuerySet`` can't be instantiated any more "
"- it is only usable as a marker class for checking if :meth:`~django.db."
"models.query.QuerySet.none` has been called: ``isinstance(qs.none(), "
"EmptyQuerySet)``"
msgstr ""

#: ../../releases/1.6.txt:860
msgid ""
"If your CSS/JavaScript code used to access HTML input widgets by type, you "
"should review it as ``type='text'`` widgets might be now output as "
"``type='email'``, ``type='url'`` or ``type='number'`` depending on their "
"corresponding field type."
msgstr ""

# 5146d8111b3d4daab78758baef7077f2
#: ../../releases/1.6.txt:865
msgid ""
"Form field's :attr:`~django.forms.Field.error_messages` that contain a "
"placeholder should now always use a named placeholder (``\"Value '%(value)s' "
"is too big\"`` instead of ``\"Value '%s' is too big\"``). See the "
"corresponding field documentation for details about the names of the "
"placeholders. The changes in 1.6 particularly affect :class:`~django.forms."
"DecimalField` and :class:`~django.forms.ModelMultipleChoiceField`."
msgstr ""

#: ../../releases/1.6.txt:872
msgid ""
"Some :attr:`~django.forms.Field.error_messages` for :class:`~django.forms."
"IntegerField`, :class:`~django.forms.EmailField`, ``IPAddressField``, :class:"
"`~django.forms.GenericIPAddressField`, and :class:`~django.forms.SlugField` "
"have been suppressed because they duplicated error messages already provided "
"by validators tied to the fields."
msgstr ""

# d7a05d3d6f0842338e30b824ddf44a8f
#: ../../releases/1.6.txt:878
msgid ""
"Due to a change in the form validation workflow, :class:`~django.forms."
"TypedChoiceField` ``coerce`` method should always return a value present in "
"the ``choices`` field attribute. That limitation should be lift again in "
"Django 1.7."
msgstr ""

# 3aedd3614b514e92a0750c0e82a7e1ea
#: ../../releases/1.6.txt:883
msgid ""
"There have been changes in the way timeouts are handled in cache backends. "
"Explicitly passing in ``timeout=None`` no longer results in using the "
"default timeout. It will now set a non-expiring timeout. Passing 0 into the "
"memcache backend no longer uses the default timeout, and now will set-and-"
"expire-immediately the value."
msgstr ""

# 6a8174ad44f445f394c27e80d61d93d3
#: ../../releases/1.6.txt:889
msgid ""
"The ``django.contrib.flatpages`` app used to set custom HTTP headers for "
"debugging purposes. This functionality was not documented and made caching "
"ineffective so it has been removed, along with its generic implementation, "
"previously available in ``django.core.xheaders``."
msgstr ""

# 46b8a0b43de04c28925f3318791a1231
#: ../../releases/1.6.txt:894
msgid ""
"The ``XViewMiddleware`` has been moved from ``django.middleware.doc`` to "
"``django.contrib.admindocs.middleware`` because it is an implementation "
"detail of admindocs, proven not to be reusable in general."
msgstr ""

# b16d92d933044d9d8cebe80499b2a2cc
#: ../../releases/1.6.txt:898
msgid ""
":class:`~django.db.models.GenericIPAddressField` will now only allow "
"``blank`` values if ``null`` values are also allowed. Creating a "
"``GenericIPAddressField`` where ``blank`` is allowed but ``null`` is not "
"will trigger a model validation error because ``blank`` values are always "
"stored as ``null``. Previously, storing a ``blank`` value in a field which "
"did not allow ``null`` would cause a database exception at runtime."
msgstr ""

#: ../../releases/1.6.txt:905
msgid ""
"If a ``NoReverseMatch`` exception is raised from a method when rendering a "
"template, it is not silenced. For example, ``{{ obj.view_href }}`` will "
"cause template rendering to fail if ``view_href()`` raises "
"``NoReverseMatch``. There is no change to the :ttag:`{% url %}<url>` tag, it "
"causes template rendering to fail like always when ``NoReverseMatch`` is "
"raised."
msgstr ""

# eda9ecf4205740c4b62233695868a2ee
#: ../../releases/1.6.txt:912
msgid ""
":meth:`django.test.Client.logout` now calls :meth:`django.contrib.auth."
"logout` which will send the :func:`~django.contrib.auth.signals."
"user_logged_out` signal."
msgstr ""

# 34889e4241bc4582a4a578fd83a80142
#: ../../releases/1.6.txt:916
msgid ""
":ref:`Authentication views <built-in-auth-views>` are now reversed by name, "
"not their locations in ``django.contrib.auth.views``. If you are using the "
"views without a ``name``, you should update your ``urlpatterns`` to use :"
"meth:`~django.conf.urls.url` with the ``name`` parameter. For example::"
msgstr ""

# 227923f37fa7457eb9d7881ea814774c
#: ../../releases/1.6.txt:927
msgid ""
":class:`~django.views.generic.base.RedirectView` now has a `pattern_name` "
"attribute which allows it to choose the target by reversing the URL."
msgstr ""

# 299878c12c5441bd896a2f5419119633
#: ../../releases/1.6.txt:930
msgid ""
"In Django 1.4 and 1.5, a blank string was unintentionally not considered to "
"be a valid password. This meant :meth:`~django.contrib.auth.models.User."
"set_password()` would save a blank password as an unusable password like :"
"meth:`~django.contrib.auth.models.User.set_unusable_password()` does, and "
"thus :meth:`~django.contrib.auth.models.User.check_password()` always "
"returned ``False`` for blank passwords. This has been corrected in this "
"release: blank passwords are now valid."
msgstr ""

# 58b4fdfebb6e40108b7c8c32f82f4f0e
#: ../../releases/1.6.txt:939
msgid ""
"The admin :attr:`~django.contrib.admin.ModelAdmin.changelist_view` "
"previously accepted a ``pop`` GET parameter to signify it was to be "
"displayed in a popup. This parameter has been renamed to ``_popup`` to be "
"consistent with the rest of the admin views. You should update your custom "
"templates if they use the previous parameter name."
msgstr ""

# 710332feee6046ce858d58beb59f18d2
#: ../../releases/1.6.txt:945
msgid ""
":meth:`~django.core.validators.validate_email` now accepts email addresses "
"with ``localhost`` as the domain."
msgstr ""

#: ../../releases/1.6.txt:948
msgid ""
"The new :option:`makemessages --keep-pot` option prevents deleting the "
"temporary .pot file generated before creating the .po file."
msgstr ""

# f49ba959c2d043f899b2a9f998580b42
#: ../../releases/1.6.txt:951
msgid ""
"The undocumented ``django.core.servers.basehttp.WSGIServerException`` has "
"been removed. Use ``socket.error`` provided by the standard library instead. "
"This change was also released in Django 1.5.5."
msgstr ""

# 86a6da053a1e44fc9ae788309ec2ad18
#: ../../releases/1.6.txt:955
msgid ""
"The signature of :meth:`django.views.generic.base.RedirectView."
"get_redirect_url` has changed and now accepts positional arguments as well "
"(``*args, **kwargs``). Any unnamed captured group will now be passed to "
"``get_redirect_url()`` which may result in a ``TypeError`` if you don't "
"update the signature of your custom method."
msgstr ""

# 59ad2025a23a48c19ce9c3424e95ba73
#: ../../releases/1.6.txt:964
msgid "Features deprecated in 1.6"
msgstr ""

# 6069cf9d4271417da417b857d20afec6
#: ../../releases/1.6.txt:967
msgid "Transaction management APIs"
msgstr ""

# 4f3dbd629c4544f5bd388f79b6cb989b
#: ../../releases/1.6.txt:969
msgid ""
"Transaction management was completely overhauled in Django 1.6, and the "
"current APIs are deprecated:"
msgstr ""

# b0a60b217085443c97038ed8f79b8e11
#: ../../releases/1.6.txt:972
msgid "``django.middleware.transaction.TransactionMiddleware``"
msgstr ""

# e90de42a51be4a1dbf315ec917e1a38c
#: ../../releases/1.6.txt:973
msgid "``django.db.transaction.autocommit``"
msgstr ""

# 8e169ebc985f494f850d93ed8d38b061
#: ../../releases/1.6.txt:974
msgid "``django.db.transaction.commit_on_success``"
msgstr ""

# 26962c06ecf44be094bbcd17d38f4017
#: ../../releases/1.6.txt:975
msgid "``django.db.transaction.commit_manually``"
msgstr ""

# fc1ee699b27c4e9e80e1e2160bf8a754
#: ../../releases/1.6.txt:976
msgid "the ``TRANSACTIONS_MANAGED`` setting"
msgstr ""

# 8b17de044192498a8c83f62122c72cff
#: ../../releases/1.6.txt:979
msgid "``django.contrib.comments``"
msgstr ""

# 3f03220278ec40f994d727ffc137345b
#: ../../releases/1.6.txt:981
msgid ""
"Django's comment framework has been deprecated and is no longer supported. "
"It will be available in Django 1.6 and 1.7, and removed in Django 1.8. Most "
"users will be better served with a custom solution, or a hosted product like "
"Disqus__."
msgstr ""

# 8784097e149b4f2083b8ad5445203a2b
#: ../../releases/1.6.txt:985
msgid ""
"The code formerly known as ``django.contrib.comments`` is `still available "
"in an external repository`__."
msgstr ""

# 3e00529b48304f1da793ed4eb6c0c738
#: ../../releases/1.6.txt:992
msgid "Support for PostgreSQL versions older than 8.4"
msgstr ""

# ff5ad5b8fb434ebbb86b57053a97ab64
#: ../../releases/1.6.txt:994
msgid ""
"The end of upstream support periods was reached in December 2011 for "
"PostgreSQL 8.2 and in February 2013 for 8.3. As a consequence, Django 1.6 "
"sets 8.4 as the minimum PostgreSQL version it officially supports."
msgstr ""

# ffcbda7e986a40409a8303983fe428d1
#: ../../releases/1.6.txt:998
msgid ""
"You're strongly encouraged to use the most recent version of PostgreSQL "
"available, because of performance improvements and to take advantage of the "
"native streaming replication available in PostgreSQL 9.x."
msgstr ""

# c099066ce3174376b76c8cebebff67f0
#: ../../releases/1.6.txt:1003
msgid "Changes to :ttag:`cycle` and :ttag:`firstof`"
msgstr ""

# 9af6aa0fae5f4be1a10e3dce702d5062
#: ../../releases/1.6.txt:1005
msgid ""
"The template system generally escapes all variables to avoid XSS attacks. "
"However, due to an accident of history, the :ttag:`cycle` and :ttag:"
"`firstof` tags render their arguments as-is."
msgstr ""

#: ../../releases/1.6.txt:1009
msgid ""
"Django 1.6 starts a process to correct this inconsistency. The ``future`` "
"template library provides alternate implementations of :ttag:`cycle` and :"
"ttag:`firstof` that autoescape their inputs. If you're using these tags, "
"you're encouraged to include the following line at the top of your templates "
"to enable the new behavior::"
msgstr ""

# a863a180417b4a17b4f28f16e6d2984a
#: ../../releases/1.6.txt:1017
msgid "or::"
msgstr ""

# a493d6d14a974c4d82cbb28e25ae9c64
#: ../../releases/1.6.txt:1021
msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.8, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the ``future`` versions."
msgstr ""

# a8a92b2244e54656a1a80366192518e2
#: ../../releases/1.6.txt:1026
msgid ""
"If necessary, you can temporarily disable auto-escaping with :func:`~django."
"utils.safestring.mark_safe` or :ttag:`{% autoescape off %} <autoescape>`."
msgstr ""

# 407e48a318d64a4b8d0e04f19c42ac23
#: ../../releases/1.6.txt:1031
msgid "``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting"
msgstr ""

#: ../../releases/1.6.txt:1033
msgid ""
"``CacheMiddleware`` and ``UpdateCacheMiddleware`` used to provide a way to "
"cache requests only if they weren't made by a logged-in user. This mechanism "
"was largely ineffective because the middleware correctly takes into account "
"the ``Vary: Cookie`` HTTP header, and this header is being set on a variety "
"of occasions, such as:"
msgstr ""

# 250b86a56cd04035878c321b4af7bbd6
#: ../../releases/1.6.txt:1039
msgid "accessing the session, or"
msgstr ""

# ca14d1be101f4872b0e1e7c8d07b7e9a
#: ../../releases/1.6.txt:1040
msgid "using CSRF protection, which is turned on by default, or"
msgstr ""

# b137c73ce1514dd68e8f199acc1a4298
#: ../../releases/1.6.txt:1041
msgid ""
"using a client-side library which sets cookies, like `Google Analytics`__."
msgstr ""

# 6f49364a3bc64cfaabcaae45078023a2
#: ../../releases/1.6.txt:1043
msgid ""
"This makes the cache effectively work on a per-session basis regardless of "
"the ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting."
msgstr ""

# 6dd0b227e7ec4a8cbc20163bfac27ba0
#: ../../releases/1.6.txt:1049
msgid "``SEND_BROKEN_LINK_EMAILS`` setting"
msgstr ""

# 158552fa581f4c5890568b989562a076
#: ../../releases/1.6.txt:1051
msgid ""
":class:`~django.middleware.common.CommonMiddleware` used to provide basic "
"reporting of broken links by email when ``SEND_BROKEN_LINK_EMAILS`` is set "
"to ``True``."
msgstr ""

# d6e520c45f6d46abad1a2f0bf08a949d
#: ../../releases/1.6.txt:1055
msgid ""
"Because of intractable ordering problems between :class:`~django.middleware."
"common.CommonMiddleware` and :class:`~django.middleware.locale."
"LocaleMiddleware`, this feature was split out into a new middleware: :class:"
"`~django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr ""

# 335900525727412fa6bb7d09026a13f9
#: ../../releases/1.6.txt:1061
msgid ""
"If you're relying on this feature, you should add ``'django.middleware."
"common.BrokenLinkEmailsMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` "
"setting and remove ``SEND_BROKEN_LINK_EMAILS`` from your settings."
msgstr ""

# f39254b732b94f799eb1f041b472cdda
#: ../../releases/1.6.txt:1067
msgid "``_has_changed`` method on widgets"
msgstr ""

# 03afd3d35e6247a58a0b2405b9d18448
#: ../../releases/1.6.txt:1069
msgid ""
"If you defined your own form widgets and defined the ``_has_changed`` method "
"on a widget, you should now define this method on the form field itself."
msgstr ""

# 21219896cad947968c6a10c9d7a1bd67
#: ../../releases/1.6.txt:1073
msgid "``module_name`` model _meta attribute"
msgstr ""

# f72ebaca946b4d7f88e74812b4e966e6
#: ../../releases/1.6.txt:1075
msgid ""
"``Model._meta.module_name`` was renamed to ``model_name``. Despite being a "
"private API, it will go through a regular deprecation path."
msgstr ""

# 8a427939a2054eca9dee63209c2fb4d2
#: ../../releases/1.6.txt:1079
msgid "``get_(add|change|delete)_permission`` model _meta methods"
msgstr ""

#: ../../releases/1.6.txt:1081
msgid ""
"``Model._meta.get_(add|change|delete)_permission`` methods were deprecated. "
"Even if they were not part of the public API they'll also go through a "
"regular deprecation path. You can replace them with ``django.contrib.auth."
"get_permission_codename('action', Model._meta)`` where ``'action'`` is "
"``'add'``, ``'change'``, or ``'delete'``."
msgstr ""

# cdbdd7e607a94adcb26c63397c26f073
#: ../../releases/1.6.txt:1088
msgid "``get_query_set`` and similar methods renamed to ``get_queryset``"
msgstr ""

# 882700294cda4c71921daad956c409af
#: ../../releases/1.6.txt:1090
msgid ""
"Methods that return a ``QuerySet`` such as ``Manager.get_query_set`` or "
"``ModelAdmin.queryset`` have been renamed to ``get_queryset``."
msgstr ""

#: ../../releases/1.6.txt:1093
msgid ""
"If you are writing a library that implements, for example, a ``Manager."
"get_query_set`` method, and you need to support old Django versions, you "
"should rename the method and conditionally add an alias with the old name::"
msgstr ""

#: ../../releases/1.6.txt:1107
msgid ""
"If you are writing a library that needs to call the ``get_queryset`` method "
"and must support old Django versions, you should write::"
msgstr ""

#: ../../releases/1.6.txt:1115
msgid ""
"In the general case of a custom manager that both implements its own "
"``get_queryset`` method and calls that method, and needs to work with older "
"Django versions, and libraries that have not been updated yet, it is useful "
"to define a ``get_queryset_compat`` method as below and use it internally to "
"your manager::"
msgstr ""

#: ../../releases/1.6.txt:1136
msgid ""
"This helps to minimize the changes that are needed, but also works correctly "
"in the case of subclasses (such as ``RelatedManagers`` from Django 1.5) "
"which might override either ``get_query_set`` or ``get_queryset``."
msgstr ""

# 581fcb0582eb4c81abdaf2c3c0c421c3
#: ../../releases/1.6.txt:1142
msgid "``shortcut`` view and URLconf"
msgstr ""

# b85900a901a3400a8e889b511170230e
#: ../../releases/1.6.txt:1144
msgid ""
"The ``shortcut`` view was moved from ``django.views.defaults`` to ``django."
"contrib.contenttypes.views`` shortly after the 1.0 release, but the old "
"location was never deprecated. This oversight was corrected in Django 1.6 "
"and you should now use the new location."
msgstr ""

# 729c151a5b7d4651adc5032106da5816
#: ../../releases/1.6.txt:1149
msgid ""
"The URLconf ``django.conf.urls.shortcut`` was also deprecated. If you're "
"including it in an URLconf, simply replace::"
msgstr ""

# 4644fe84f94d47a4b5d77c38ccb32ab9
#: ../../releases/1.6.txt:1154
msgid "with::"
msgstr ""

# d1f0a602585f401cb96c0aa864ee470d
#: ../../releases/1.6.txt:1159
msgid "``ModelForm`` without ``fields`` or ``exclude``"
msgstr ""

# 54d79e7aef1d49608b26482ddbef9f1e
#: ../../releases/1.6.txt:1161
msgid ""
"Previously, if you wanted a :class:`~django.forms.ModelForm` to use all "
"fields on the model, you could simply omit the ``Meta.fields`` attribute, "
"and all fields would be used."
msgstr ""

#: ../../releases/1.6.txt:1165
msgid ""
"This can lead to security problems where fields are added to the model and, "
"unintentionally, automatically become editable by end users. In some cases, "
"particular with boolean fields, it is possible for this problem to be "
"completely invisible. This is a form of `Mass assignment vulnerability "
"<https://en.wikipedia.org/wiki/Mass_assignment_vulnerability>`_."
msgstr ""

# 7048fb1164584b449fa7d5d78182c773
#: ../../releases/1.6.txt:1171
msgid ""
"For this reason, this behavior is deprecated, and using the ``Meta.exclude`` "
"option is strongly discouraged. Instead, all fields that are intended for "
"inclusion in the form should be listed explicitly in the ``fields`` "
"attribute."
msgstr ""

# 2debf4e1c693465faecaa5c224588682
#: ../../releases/1.6.txt:1175
msgid ""
"If this security concern really does not apply in your case, there is a "
"shortcut to explicitly indicate that all fields should be used - use the "
"special value ``\"__all__\"`` for the fields attribute::"
msgstr ""

# d7b199bfc1f04062a8530b27a66de5c6
#: ../../releases/1.6.txt:1184
msgid ""
"If you have custom ``ModelForms`` that only need to be used in the admin, "
"there is another option. The admin has its own methods for defining fields "
"(``fieldsets`` etc.), and so adding a list of fields to the ``ModelForm`` is "
"redundant. Instead, simply omit the ``Meta`` inner class of the "
"``ModelForm``, or omit the ``Meta.model`` attribute. Since the "
"``ModelAdmin`` subclass knows which model it is for, it can add the "
"necessary attributes to derive a functioning ``ModelForm``. This behavior "
"also works for earlier Django versions."
msgstr ""

# cbc66c82fec74c4e9e42ccd4e9e40897
#: ../../releases/1.6.txt:1194
msgid "``UpdateView`` and ``CreateView`` without explicit fields"
msgstr ""

# 2b6f715d2c0b44db82d4b9f568e0cb51
#: ../../releases/1.6.txt:1196
msgid ""
"The generic views :class:`~django.views.generic.edit.CreateView` and :class:"
"`~django.views.generic.edit.UpdateView`, and anything else derived from :"
"class:`~django.views.generic.edit.ModelFormMixin`, are vulnerable to the "
"security problem described in the section above, because they can "
"automatically create a ``ModelForm`` that uses all fields for a model."
msgstr ""

#: ../../releases/1.6.txt:1202
msgid ""
"For this reason, if you use these views for editing models, you must also "
"supply the ``fields`` attribute (new in Django 1.6), which is a list of "
"model fields and works in the same way as the :class:`~django.forms."
"ModelForm` ``Meta.fields`` attribute. Alternatively, you can set the "
"``form_class`` attribute to a ``ModelForm`` that explicitly defines the "
"fields to be used. Defining an ``UpdateView`` or ``CreateView`` subclass to "
"be used with a model but without an explicit list of fields is deprecated."
msgstr ""

# 50ed5db6855145a38b64f0942058584e
#: ../../releases/1.6.txt:1213
msgid ""
"Munging of help text of model form fields for ``ManyToManyField`` fields"
msgstr ""

# 376390f0d13c4ccc8ea848831c9a7602
#: ../../releases/1.6.txt:1215
msgid ""
"All special handling of the ``help_text`` attribute of ``ManyToManyField`` "
"model fields performed by standard model or model form fields as described "
"in :ref:`m2m-help_text` above is deprecated and will be removed in Django "
"1.8."
msgstr ""

# 02ae397342b243599f9382fa207b4e41
#: ../../releases/1.6.txt:1219
msgid ""
"Help text of these fields will need to be handled either by applications, "
"custom form fields or widgets, just like happens with the rest of the model "
"field types."
msgstr ""
