# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 50b201207eea48848c44453c57db09c9
#: ../../releases/1.2.txt:3
msgid "Django 1.2 release notes"
msgstr ""

# e0832072a7614804b07acad529c767f3
#: ../../releases/1.2.txt:5
msgid "*May 17, 2010.*"
msgstr ""

# d3a347615c7a4e5fa120d2c77dc7eea1
#: ../../releases/1.2.txt:7
msgid "Welcome to Django 1.2!"
msgstr ""

#: ../../releases/1.2.txt:9
msgid ""
"Nearly a year in the making, Django 1.2 packs an impressive list of :ref:"
"`new features <whats-new-1.2>` and lots of bug fixes. These release notes "
"cover the new features, as well as important changes you'll want to be aware "
"of when upgrading from Django 1.1 or older versions."
msgstr ""

# 81ebf342fe814aaebac5962e009124ea
#: ../../releases/1.2.txt:15
msgid "Overview"
msgstr ""

# ad91cda67b7f4c4da87c51499d71bd66
#: ../../releases/1.2.txt:17
msgid "Django 1.2 introduces several large, important new features, including:"
msgstr ""

# c000546fd0d7454282ea975f686d8df6
#: ../../releases/1.2.txt:19
msgid ""
"Support for `multiple database connections`_ in a single Django instance."
msgstr ""

# 1fa870b9c3a9478899315b84f754ffb5
#: ../../releases/1.2.txt:21
msgid "`Model validation`_ inspired by Django's form validation."
msgstr ""

# d276fb4ee3b446fb9083f0e9d7d82c6d
#: ../../releases/1.2.txt:23
msgid ""
"Vastly `improved protection against Cross-Site Request Forgery`_ (CSRF)."
msgstr ""

# f09411288efe4f25b6c04467965dbc87
#: ../../releases/1.2.txt:25
msgid ""
"A new `user \"messages\" framework`_ with support for cookie- and session-"
"based message for both anonymous and authenticated users."
msgstr ""

# 848749fd4940435685b9d7f2d9e96b1e
#: ../../releases/1.2.txt:28
msgid ""
"Hooks for `object-level permissions`_, `permissions for anonymous users`_, "
"and `more flexible username requirements`_."
msgstr ""

# 33ce6f05117d4ceda543272b34f99261
#: ../../releases/1.2.txt:31
msgid "Customization of email sending via `email backends`_."
msgstr ""

# 4c1f7e3328064236b04a7e5429a988f0
#: ../../releases/1.2.txt:33
msgid ""
"New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports "
"comparison operators."
msgstr ""

# 1d234f1763434875a94e55db23f37a0c
#: ../../releases/1.2.txt:41
msgid ""
"These are just the highlights; full details and a complete list of features "
"`may be found below`_."
msgstr ""

# 58e90b6856844b9787a88d2cc049b0ae
#: ../../releases/1.2.txt:48
msgid ""
"`Django Advent`_ covered the release of Django 1.2 with a series of articles "
"and tutorials that cover some of the new features in depth."
msgstr ""

# 5c922043ad204272bacaf5fb28724714
#: ../../releases/1.2.txt:53
msgid ""
"Wherever possible these features have been introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy."
msgstr ""

# 0c87136be37f43d89a28e6759077d91d
#: ../../releases/1.2.txt:56
msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be backwards-incompatible. The big changes are:"
msgstr ""

# 718cef558dea4fc8b2e99881ae5f4fa2
#: ../../releases/1.2.txt:59
msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr ""

# 8bb58e634fe149eba4a59ffd1d726fd6
#: ../../releases/1.2.txt:62
msgid ""
"The new CSRF protection framework is not backwards-compatible with the old "
"system. Users of the old system will not be affected until the old system is "
"removed in Django 1.4."
msgstr ""

# cfe28a0223a24dcca3ea406b714f9258
#: ../../releases/1.2.txt:66
msgid ""
"However, upgrading to the new CSRF protection framework requires a few "
"important backwards-incompatible changes, detailed in `CSRF Protection`_, "
"below."
msgstr ""

# a5f87821ecc64c56bf650a404a7b4e2d
#: ../../releases/1.2.txt:70
msgid ""
"Authors of custom :class:`~django.db.models.Field` subclasses should be "
"aware that a number of methods have had a change in prototype, detailed "
"under `get_db_prep_*() methods on Field`_, below."
msgstr ""

# eea58be08ebf4d5e8460d8061520b834
#: ../../releases/1.2.txt:74
msgid ""
"The internals of template tags have changed somewhat; authors of custom "
"template tags that need to store state (e.g. custom control flow tags) "
"should ensure that their code follows the new rules for `stateful template "
"tags`_"
msgstr ""

# 0f6e870bac4d428d92225b1b36d86407
#: ../../releases/1.2.txt:79
msgid ""
"The :func:`~django.contrib.auth.decorators.user_passes_test`, :func:`~django."
"contrib.auth.decorators.login_required`, and :func:`~django.contrib.auth."
"decorators.permission_required`, decorators from :mod:`django.contrib.auth` "
"only apply to functions and no longer work on methods. There's a simple one-"
"line fix `detailed below`_."
msgstr ""

# 223f7746f2c44cd9a0db251bca8d1892
#: ../../releases/1.2.txt:87
msgid ""
"Again, these are just the big features that will affect the most users. "
"Users upgrading from previous versions of Django are heavily encouraged to "
"consult the complete list of :ref:`backwards-incompatible changes <backwards-"
"incompatible-changes-1.2>` and the list of :ref:`deprecated features "
"<deprecated-features-1.2>`."
msgstr ""

# 38eab031e4fd489fa630af96f5b854e6
#: ../../releases/1.2.txt:94
msgid "Python compatibility"
msgstr ""

# c84cc919a706424396f8e60e40224999
#: ../../releases/1.2.txt:96
msgid ""
"While not a new feature, it's important to note that Django 1.2 introduces "
"the first shift in our Python compatibility policy since Django's initial "
"public debut. Previous Django releases were tested and supported on 2.x "
"Python versions from 2.3 up; Django 1.2, however, drops official support for "
"Python 2.3. As such, the minimum Python version required for Django is now "
"2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will "
"be supported on the as-yet-unreleased Python 2.7."
msgstr ""

# e27243c0f3504926ae172610ed0a1259
#: ../../releases/1.2.txt:105
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.4 or newer as their "
"default version. If you're still using Python 2.3, however, you'll need to "
"stick to Django 1.1 until you can upgrade; per :doc:`our support policy </"
"internals/release-process>`, Django 1.1 will continue to receive security "
"support until the release of Django 1.3."
msgstr ""

# 678ef8e04c464e3288e9a6340e8e332a
#: ../../releases/1.2.txt:112
msgid ""
"A roadmap for Django's overall 2.x Python support, and eventual transition "
"to Python 3.x, is currently being developed, and will be announced prior to "
"the release of Django 1.3."
msgstr ""

# 40e184a3480c44b2bea16e6d7f2a0862
#: ../../releases/1.2.txt:119
msgid "What's new in Django 1.2"
msgstr ""

# 843ecec82588423c9f06776e25977b87
#: ../../releases/1.2.txt:122
msgid "Support for multiple databases"
msgstr ""

# 7a691d70e69847f6bce4e07761d723f1
#: ../../releases/1.2.txt:124
msgid ""
"Django 1.2 adds the ability to use :doc:`more than one database </topics/db/"
"multi-db>` in your Django project. Queries can be issued at a specific "
"database with the ``using()`` method on ``QuerySet`` objects. Individual "
"objects can be saved to a specific database by providing a ``using`` "
"argument when you call ``save()``."
msgstr ""

# a62efb94106c445ba509a607a401f58d
#: ../../releases/1.2.txt:131
msgid "Model validation"
msgstr ""

# 071f455443aa44ffa5840b2646a6db8e
#: ../../releases/1.2.txt:133
msgid ""
"Model instances now have support for :ref:`validating their own data "
"<validating-objects>`, and both model and form fields now accept "
"configurable lists of :doc:`validators </ref/validators>` specifying "
"reusable, encapsulated validation behavior. Note, however, that validation "
"must still be performed explicitly. Simply invoking a model instance's "
"``save()`` method will not perform any validation of the instance's data."
msgstr ""

# d844f282f41341c095dddf4351ae1ee9
#: ../../releases/1.2.txt:141
msgid "Improved CSRF protection"
msgstr ""

#: ../../releases/1.2.txt:143
msgid ""
"Django now has much improved protection against :doc:`Cross-Site Request "
"Forgery (CSRF) attacks</ref/csrf>`. This type of attack occurs when a "
"malicious website contains a link, a form button or some JavaScript that is "
"intended to perform some action on your website, using the credentials of a "
"logged-in user who visits the malicious site in their browser. A related "
"type of attack, \"login CSRF,\" where an attacking site tricks a user's "
"browser into logging into a site with someone else's credentials, is also "
"covered."
msgstr ""

# 3b2b6726d0204f1ab653d2ba6822fce1
#: ../../releases/1.2.txt:152
msgid "Messages framework"
msgstr ""

# 8020abd4a8d14a48bb1aeae5bf5a6af9
#: ../../releases/1.2.txt:154
msgid ""
"Django now includes a robust and configurable :doc:`messages framework </ref/"
"contrib/messages>` with built-in support for cookie- and session-based "
"messaging, for both anonymous and authenticated clients. The messages "
"framework replaces the deprecated user message API and allows you to "
"temporarily store messages in one request and retrieve them for display in a "
"subsequent request (usually the next one)."
msgstr ""

# ba635feca0234d74b91e8db390184bd3
#: ../../releases/1.2.txt:162
msgid "Object-level permissions"
msgstr ""

# 7002d3fca6934159aedd2008548be280
#: ../../releases/1.2.txt:164
msgid ""
"A foundation for specifying permissions at the per-object level has been "
"added. Although there is no implementation of this in core, a custom "
"authentication backend can provide this implementation and it will be used "
"by :class:`django.contrib.auth.models.User`. See the :doc:`authentication "
"docs </topics/auth/index>` for more information."
msgstr ""

# a2c703c092064f718e08a645b0c831db
#: ../../releases/1.2.txt:171
msgid "Permissions for anonymous users"
msgstr ""

# a28a712156054d7e9ff783445671f8d0
#: ../../releases/1.2.txt:173
msgid ""
"If you provide a custom auth backend with ``supports_anonymous_user`` set to "
"``True``, AnonymousUser will check the backend for permissions, just like "
"User already did.  This is useful for centralizing permission handling - "
"apps can always delegate the question of whether something is allowed or not "
"to the authorization/authentication backend. See the :doc:`authentication "
"docs </topics/auth/index>` for more details."
msgstr ""

# 42af7eda94a848a4ba04fc3559112016
#: ../../releases/1.2.txt:181
msgid "Relaxed requirements for usernames"
msgstr ""

# 91a75de9531c45e38d1b482b5d8da4b1
#: ../../releases/1.2.txt:183
msgid ""
"The built-in :class:`~django.contrib.auth.models.User` model's :attr:"
"`~django.contrib.auth.models.User.username` field now allows a wider range "
"of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

# d03840e209a540feae0ba59d4e80af81
#: ../../releases/1.2.txt:188
msgid "Email backends"
msgstr ""

# 60fbe62b979f41b7b72a03ac9221ab1d
#: ../../releases/1.2.txt:190
msgid ""
"You can now :ref:`configure the way that Django sends email <topic-email-"
"backends>`. Instead of using SMTP to send all email, you can now choose a "
"configurable email backend to send messages. If your hosting provider uses a "
"sandbox or some other non-SMTP technique for sending mail, you can now "
"construct an email backend that will allow Django's standard :doc:`mail "
"sending methods</topics/email>` to use those facilities."
msgstr ""

# 8b6a8e15a3c449679380d02e3b5dcf8e
#: ../../releases/1.2.txt:198
msgid ""
"This also makes it easier to debug mail sending. Django ships with backend "
"implementations that allow you to send email to a :ref:`file<topic-email-"
"file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :"
"ref:`memory<topic-email-memory-backend>`. You can even configure all email "
"to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

# 7be6c295072d4f3182bae06b4a237cc0
#: ../../releases/1.2.txt:208
msgid "\"Smart\" :ttag:`if` tag"
msgstr ""

# 69ec624f7c3a4c8ba91ecd8f9984a437
#: ../../releases/1.2.txt:210
msgid ""
"The :ttag:`if` tag has been upgraded to be much more powerful. First, we've "
"added support for comparison operators. No longer will you have to type:"
msgstr ""

# 8e97a95541ef4d929625d0cd160e38c6
#: ../../releases/1.2.txt:219
msgid "You can now do this:"
msgstr ""

# f8dd3b084aab4c199d5bc0bc4d87f831
#: ../../releases/1.2.txt:227
msgid ""
"There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` "
"anymore, unless you're the nostalgic type."
msgstr ""

# c317e18a8b304a77accaf4c1f31e1a51
#: ../../releases/1.2.txt:230
msgid ""
"The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, "
"``in`` and ``not in``, all of which work like the Python operators, in "
"addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""

# fcb7432124a24dc6b543b71567ff17c0
#: ../../releases/1.2.txt:234
msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr ""

# 71026ece565041829486ffed03f61ff3
#: ../../releases/1.2.txt:245
msgid "Template caching"
msgstr ""

# a3946994e3d14948b05e81da4cd019f2
#: ../../releases/1.2.txt:247
msgid ""
"In previous versions of Django, every time you rendered a template, it would "
"be reloaded from disk. In Django 1.2, you can use a :ref:`cached template "
"loader <template-loaders>` to load templates once, then cache the result for "
"every subsequent render. This can lead to a significant performance "
"improvement if your templates are broken into lots of smaller subtemplates "
"(using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2.txt:255
msgid ""
"As a side effect, it is now much easier to support non-Django template "
"languages."
msgstr ""

# 8d8049f2184942668083f0a03eda6ab5
#: ../../releases/1.2.txt:259
msgid "Class-based template loaders"
msgstr ""

# 740bc471aab840f1b228807398909147
#: ../../releases/1.2.txt:261
msgid ""
"As part of the changes made to introduce `Template caching`_  and following "
"a general trend in Django, the template loaders API has been modified to use "
"template loading mechanisms that are encapsulated in Python classes as "
"opposed to functions, the only method available until Django 1.1."
msgstr ""

#: ../../releases/1.2.txt:266
msgid ""
"All the template loaders :ref:`shipped with Django <template-loaders>` have "
"been ported to the new API but they still implement the function-based API "
"and the template core machinery still accepts function-based loaders "
"(builtin or third party) so there is no immediate need to modify your "
"``TEMPLATE_LOADERS`` setting in existing projects, things will keep working "
"if you leave it untouched up to and including the Django 1.3 release."
msgstr ""

#: ../../releases/1.2.txt:273
msgid ""
"If you have developed your own custom template loaders we suggest to "
"consider porting them to a class-based implementation because the code for "
"backwards compatibility with function-based loaders starts its deprecation "
"process in Django 1.2 and will be removed in Django 1.4.  There is a "
"description of the API these loader classes must implement in the template "
"API reference and you can also examine the source code of the loaders "
"shipped with Django."
msgstr ""

# ca2657916da64062b4da5641720c68ab
#: ../../releases/1.2.txt:281
msgid "Natural keys in fixtures"
msgstr ""

# 2907264e9d644243af3a41b29605368b
#: ../../releases/1.2.txt:283
msgid ""
"Fixtures can now refer to remote objects using :ref:`topics-serialization-"
"natural-keys`. This lookup scheme is an alternative to the normal primary-"
"key based object references in a fixture, improving readability and "
"resolving problems referring to objects whose primary key value may not be "
"predictable or known."
msgstr ""

# ed048c60b44b400da877c4dc6cd3b3bd
#: ../../releases/1.2.txt:290
msgid "Fast failure for tests"
msgstr ""

# be9ab18313ce4e9388451cf4da2a3398
#: ../../releases/1.2.txt:292
msgid ""
"Both the :djadmin:`test` subcommand of ``django-admin.py`` and the "
"``runtests.py`` script used to run Django's own test suite now support a ``--"
"failfast`` option. When specified, this option causes the test runner to "
"exit after encountering a failure instead of continuing with the test run. "
"In addition, the handling of ``Ctrl-C`` during a test run has been improved "
"to trigger a graceful exit from the test run that reports details of the "
"tests that were run before the interruption."
msgstr ""

# 37e7397d1ce34eca90c3a4753a81802b
#: ../../releases/1.2.txt:301
msgid "``BigIntegerField``"
msgstr ""

# 549fe2fcd0314722bbd0278bd42d3fed
#: ../../releases/1.2.txt:303
msgid ""
"Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

# 42c7e62a19dc4ed29264ba988b0f8f8a
#: ../../releases/1.2.txt:306
msgid "Improved localization"
msgstr ""

#: ../../releases/1.2.txt:308
msgid ""
"Django's :doc:`internationalization framework </topics/i18n/index>` has been "
"expanded with locale-aware formatting and form processing. That means, if "
"enabled, dates and numbers on templates will be displayed using the format "
"specified for the current locale. Django will also use localized formats "
"when parsing data in forms. See :doc:`/topics/i18n/formatting` for more "
"details."
msgstr ""

# 4d2ec146f5354730bf50eaf29c28c2d8
#: ../../releases/1.2.txt:315
msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr ""

# e30040987fe5418c87c4352dd309f57c
#: ../../releases/1.2.txt:317
msgid ""
":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to "
"enable non-editable fields in add/change pages for models and inlines. Field "
"and calculated values can be displayed alongside editable fields."
msgstr ""

# cca7a5c175d540faab953f1be821f906
#: ../../releases/1.2.txt:322
msgid "Customizable syntax highlighting"
msgstr ""

# 073182e085a04d80841d226b42218d97
#: ../../releases/1.2.txt:324
msgid ""
"You can now use a ``DJANGO_COLORS`` environment variable to modify or "
"disable the colors used by ``django-admin.py`` to provide :ref:`syntax "
"highlighting <syntax-coloring>`."
msgstr ""

# 9d8f15bbcd644305a91438a5d28227da
#: ../../releases/1.2.txt:329
msgid "Syndication feeds as views"
msgstr ""

# af97172fd992443c99a4347d75d7252b
#: ../../releases/1.2.txt:331
msgid ""
":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly "
"as views in your :doc:`URLconf </topics/http/urls>`. This means that you can "
"maintain complete control over the URL structure of your feeds. Like any "
"other view, feeds views are passed a ``request`` object, so you can do "
"anything you would normally do with a view, like user based access control, "
"or making a feed a named URL."
msgstr ""

# 5e049808452746a9b2ad667a6dfbaf72
# a4d321eef4da42dbaec8bf1ad32d1ea3
#: ../../releases/1.2.txt:339 ../../releases/1.2.txt:1076
msgid "GeoDjango"
msgstr ""

# 6ca7876c103347bd919eb4010e6fd62f
#: ../../releases/1.2.txt:341
msgid ""
"The most significant new feature for :doc:`GeoDjango </ref/contrib/gis/"
"index>` in 1.2 is support for multiple spatial databases.  As a result, the "
"following :ref:`spatial database backends <spatial-backends>` are now "
"included:"
msgstr ""

# 81aff78f03624ee3954e307ed5b27aa5
#: ../../releases/1.2.txt:346
msgid "``django.contrib.gis.db.backends.postgis``"
msgstr ""

# f2ab88d3bc2b44ba871ab9b48ad33341
#: ../../releases/1.2.txt:347
msgid "``django.contrib.gis.db.backends.mysql``"
msgstr ""

# 47b08165eec146258a1ac37211b54bc3
#: ../../releases/1.2.txt:348
msgid "``django.contrib.gis.db.backends.oracle``"
msgstr ""

# b4dd5c8027974a52adb7d10674ed47de
#: ../../releases/1.2.txt:349
msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr ""

#: ../../releases/1.2.txt:351
msgid ""
"GeoDjango now supports the rich capabilities added in the PostGIS 1.5 "
"release. New features include support for the :ref:`geography type "
"<geography-type>` and enabling of :ref:`distance queries <distance-queries>` "
"with non-point geometries on geographic coordinate systems."
msgstr ""

#: ../../releases/1.2.txt:356
msgid ""
"Support for 3D geometry fields was added, and may be enabled by setting the :"
"attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your :"
"class:`~django.contrib.gis.db.models.GeometryField`. The :class:`~django."
"contrib.gis.db.models.Extent3D` aggregate and ``extent3d()`` ``GeoQuerySet`` "
"method were added as a part of this feature."
msgstr ""

#: ../../releases/1.2.txt:362
msgid ""
"The ``force_rhr()``, ``reverse_geom()``, and ``geohash()`` ``GeoQuerySet`` "
"methods are new."
msgstr ""

#: ../../releases/1.2.txt:365
msgid ""
"The GEOS interface was updated to use thread-safe C library functions when "
"available on the platform."
msgstr ""

#: ../../releases/1.2.txt:368
msgid ""
"The GDAL interface now allows the user to set a :attr:`~django.contrib.gis."
"gdal.Layer.spatial_filter` on the features returned when iterating over a :"
"class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

# aa7b1077134c4867b081f8edcba123c8
#: ../../releases/1.2.txt:372
msgid ""
"Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now "
"included with Django's and is no longer hosted separately at `geodjango.org "
"<http://geodjango.org/>`_."
msgstr ""

# a69dff235efd4252ae89b794be100704
#: ../../releases/1.2.txt:379
msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr ""

# 39241cb1b1164581882c660c1eb95dd1
#: ../../releases/1.2.txt:381
msgid ""
"If a user has JavaScript enabled in their browser, the interface for inline "
"objects in the admin now allows inline objects to be dynamically added and "
"removed. Users without JavaScript-enabled browsers will see no change in the "
"behavior of inline objects."
msgstr ""

# 78f5575f6e41448281ba36912d99e1c4
#: ../../releases/1.2.txt:387
msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr ""

# 7bbcde5c8ef84c128836d7899b6e277a
#: ../../releases/1.2.txt:389
msgid ""
"The argument to the :ttag:`now` has gained two new format characters: ``c`` "
"to specify that a datetime value should be formatted in ISO 8601 format, and "
"``u`` that allows output of the microseconds part of a datetime or time "
"value."
msgstr ""

# 064882fdc68b41058248b8d4d3b09700
#: ../../releases/1.2.txt:394
msgid ""
"These are also available in others parts like the :tfilter:`date` and :"
"tfilter:`time` template filters, the ``humanize`` template tag library and "
"the new `format localization`_ framework."
msgstr ""

# dadc4a4d25b44725a9cd675a0e09c132
#: ../../releases/1.2.txt:403
msgid "Backwards-incompatible changes in 1.2"
msgstr ""

# 06351b2a07d64c7093c435c9402de02a
#: ../../releases/1.2.txt:405
msgid ""
"Wherever possible the new features above have been introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy. This means that practically all existing code which worked with "
"Django 1.1 will continue to work with Django 1.2; such code will, however, "
"begin issuing warnings (see below for details)."
msgstr ""

# f058d37eb9b44484bbbdafb6c852544d
#: ../../releases/1.2.txt:412
msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be immediately backwards-incompatible. Those changes are detailed below."
msgstr ""

# d0e5360530fd4c6884d6a1f2d74339bf
#: ../../releases/1.2.txt:417
msgid "CSRF Protection"
msgstr ""

#: ../../releases/1.2.txt:419
msgid ""
"We've made large changes to the way CSRF protection works, detailed in :doc:"
"`the CSRF documentation </ref/csrf>`. Here are the major changes you should "
"be aware of:"
msgstr ""

# 095beddf33d24a34b87377bca7862d46
#: ../../releases/1.2.txt:423
msgid ""
"``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and "
"will be removed completely in Django 1.4, in favor of a template tag that "
"should be inserted into forms."
msgstr ""

# 3383ed807cb2460abf8d2507d995e749
#: ../../releases/1.2.txt:427
msgid ""
"All contrib apps use a ``csrf_protect`` decorator to protect the view. This "
"requires the use of the ``csrf_token`` template tag in the template. If you "
"have used custom templates for contrib views, you MUST READ THE UPGRADE "
"INSTRUCTIONS to fix those templates."
msgstr ""

# c886eeaeb5854835a7f21c6a9c32bdc8
# de4cb5eedb67444482dd90cc62ca9dbd
#: ../../releases/1.2.txt:432 ../../releases/1.2.txt:861
msgid "Documentation removed"
msgstr ""

# 86e95fd3810d4a39b9f8bc45e5e867c4
# 64e04ba3fa8d4a6fbc266cf08498d41b
#: ../../releases/1.2.txt:434 ../../releases/1.2.txt:863
msgid ""
"The upgrade notes have been removed in current Django docs. Please refer to "
"the docs for Django 1.3 or older to find these instructions."
msgstr ""

#: ../../releases/1.2.txt:437
msgid ""
"``CsrfViewMiddleware`` is included in ``MIDDLEWARE_CLASSES`` by default. "
"This turns on CSRF protection by default, so views that accept POST requests "
"need to be written to work with the middleware. Instructions on how to do "
"this are found in the CSRF docs."
msgstr ""

# 8ab64eb8492644cb8eef1434ffacb90f
#: ../../releases/1.2.txt:442
msgid ""
"All of the CSRF has moved from contrib to core (with backwards compatible "
"imports in the old locations, which are deprecated and will cease to be "
"supported in Django 1.4)."
msgstr ""

# 0cd24af78b4547b8ac8aa85989993e1a
#: ../../releases/1.2.txt:447
msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr ""

# 52b81691f6f049f28f36d762bad2b0af
#: ../../releases/1.2.txt:449
msgid ""
"Prior to Django 1.2, a custom ``Field`` had the option of defining several "
"functions to support conversion of Python values into database-compatible "
"values. A custom field might look something like::"
msgstr ""

# 352c313e9c0841bc8ccafecdfb28a818
#: ../../releases/1.2.txt:467
msgid ""
"In 1.2, these three methods have undergone a change in prototype, and two "
"extra methods have been introduced::"
msgstr ""

# ce0e5bcef626426c805028fe1a271c51
#: ../../releases/1.2.txt:491
msgid ""
"These changes are required to support multiple databases -- ``db_type`` and "
"``get_db_prep_*`` can no longer make any assumptions regarding the database "
"for which it is preparing. The ``connection`` argument now provides the "
"preparation methods with the specific connection for which the value is "
"being prepared."
msgstr ""

# 748ed3b7335342e2a58511492bd4a506
#: ../../releases/1.2.txt:497
msgid ""
"The two new methods exist to differentiate general data-preparation "
"requirements from requirements that are database-specific. The ``prepared`` "
"argument is used to indicate to the database-preparation methods whether "
"generic value preparation has been performed. If an unprepared (i.e., "
"``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they "
"should invoke the corresponding ``get_prep_*()`` calls to perform generic "
"data preparation."
msgstr ""

# a7391477b9ff4f17bbc65a8ea727c7ca
#: ../../releases/1.2.txt:505
msgid ""
"We've provided conversion functions that will transparently convert "
"functions adhering to the old prototype into functions compatible with the "
"new prototype. However, these conversion functions will be removed in Django "
"1.4, so you should upgrade your ``Field`` definitions to use the new "
"prototype as soon as possible."
msgstr ""

# e3586d1353f240e1843303e798ced41f
#: ../../releases/1.2.txt:511
msgid ""
"If your ``get_db_prep_*()`` methods made no use of the database connection, "
"you should be able to upgrade by renaming ``get_db_prep_value()`` to "
"``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. "
"If you require database specific conversions, then you will need to provide "
"an implementation ``get_db_prep_*`` that uses the ``connection`` argument to "
"resolve database-specific values."
msgstr ""

# b3d54e1a93fb4a9aa5f3f26e4dcb5ea1
#: ../../releases/1.2.txt:520
msgid "Stateful template tags"
msgstr ""

# 3bfcd0bab4db4609a0bb23755eb13424
#: ../../releases/1.2.txt:522
msgid ""
"Template tags that store rendering state on their ``Node`` subclass have "
"always been vulnerable to thread-safety and other issues; as of Django 1.2, "
"however, they may also cause problems when used with the new :ref:`cached "
"template loader<template-loaders>`."
msgstr ""

# 8d8f4fd813584417af5576d0060e2743
#: ../../releases/1.2.txt:527
msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or from your own code, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see :ref:"
"`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

# 26cf187dfbf24be680418581841737c8
#: ../../releases/1.2.txt:534
msgid ""
"You may also need to update your templates if you were relying on the "
"implementation of Django's template tags *not* being thread safe. The :ttag:"
"`cycle` tag is the most likely to be affected in this way, especially when "
"used in conjunction with the :ttag:`include` tag. Consider the following "
"template fragment::"
msgstr ""

# a7b8fe4b6a874309868d607fe852f067
#: ../../releases/1.2.txt:544
msgid "with a ``subtemplate.html`` that reads::"
msgstr ""

# 6e0c008b56db40d0a4afe10b19256195
#: ../../releases/1.2.txt:548
msgid "Using the non-thread-safe, pre-Django 1.2 renderer, this would output::"
msgstr ""

# 68055f4bf9dd4df98ddcb17c8d2273cd
#: ../../releases/1.2.txt:552
msgid "Using the thread-safe Django 1.2 renderer, you will instead get::"
msgstr ""

# 626448e29ecc4bfab3613491fe008764
#: ../../releases/1.2.txt:556
msgid ""
"This is because each rendering of the :ttag:`include` tag is an independent "
"rendering. When the :ttag:`cycle` tag was not thread safe, the state of the :"
"ttag:`cycle` tag would leak between multiple renderings of the same :ttag:"
"`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage no "
"longer occurs."
msgstr ""

# aacb20e0a7e5431096e44951e3c005ab
#: ../../releases/1.2.txt:563
msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr ""

# 0be39a3c1e7740b58fd76c1858de6e27
#: ../../releases/1.2.txt:565
msgid ""
"``django.contrib.auth.decorators`` provides the decorators "
"``login_required``, ``permission_required`` and ``user_passes_test``. "
"Previously it was possible to use these decorators both on functions (where "
"the first argument is 'request') and on methods (where the first argument is "
"'self', and the second argument is 'request'). Unfortunately, flaws were "
"discovered in the code supporting this: it only works in limited "
"circumstances, and produces errors that are very difficult to debug when it "
"does not work."
msgstr ""

# 52440fb0384e4ec3ad7ec108a5634e2a
#: ../../releases/1.2.txt:575
msgid ""
"For this reason, the 'auto adapt' behavior has been removed, and if you are "
"using these decorators on methods, you will need to manually apply :func:"
"`django.utils.decorators.method_decorator` to convert the decorator to one "
"that works with methods. For example, you would change code from this::"
msgstr ""

# 970ab6622a4e4f688b31a4dab938ad9f
#: ../../releases/1.2.txt:587
msgid "to this::"
msgstr ""

# cef7b4d9879646cdac1369932fd21940
#: ../../releases/1.2.txt:597
msgid "or::"
msgstr ""

# 455d7f143e7b4576bb78957a3f42b8c8
#: ../../releases/1.2.txt:609
msgid ""
"For those of you who've been following the development trunk, this change "
"also applies to other decorators introduced since 1.1, including "
"``csrf_protect``, ``cache_control`` and anything created using "
"``decorator_from_middleware``."
msgstr ""

# c4fe23faa4e8493aa6643a025408169e
#: ../../releases/1.2.txt:615
msgid ":ttag:`if` tag changes"
msgstr ""

# 5988afeec96d4b3a96ecc6c0e1bd3a5a
#: ../../releases/1.2.txt:617
msgid ""
"Due to new features in the :ttag:`if` template tag, it no longer accepts "
"'and', 'or' and 'not' as valid **variable** names. Previously, these strings "
"could be used as variable names. Now, the keyword status is always enforced, "
"and template code such as ``{% if not %}`` or ``{% if and %}`` will throw a "
"``TemplateSyntaxError``. Also, ``in`` is a new keyword and so is not a valid "
"variable name in this tag."
msgstr ""

# 96d6537d15034c41915a25a83cbe06f1
#: ../../releases/1.2.txt:625
msgid "``LazyObject``"
msgstr ""

# ce583605ee9e4048b6afa734d9e6e53a
#: ../../releases/1.2.txt:627
msgid ""
"``LazyObject`` is an undocumented-but-often-used utility class used for "
"lazily wrapping other objects of unknown type."
msgstr ""

# 86db816161f04f3caccf3a493dce26ae
#: ../../releases/1.2.txt:630
msgid ""
"In Django 1.1 and earlier, it handled introspection in a non-standard way, "
"depending on wrapped objects implementing a public method named "
"``get_all_members()``. Since this could easily lead to name clashes, it has "
"been changed to use the standard Python introspection method, involving "
"``__members__`` and ``__dir__()``."
msgstr ""

# 176f256e05d24c3f9a4a666644dc348a
#: ../../releases/1.2.txt:636
msgid ""
"If you used ``LazyObject`` in your own code and implemented the "
"``get_all_members()`` method for wrapped objects, you'll need to make a "
"couple of changes:"
msgstr ""

# efc3c15b25a4426ab571eb00f867c3c7
#: ../../releases/1.2.txt:640
msgid ""
"First, if your class does not have special requirements for introspection (i."
"e., you have not implemented ``__getattr__()`` or other methods that allow "
"for attributes not discoverable by normal mechanisms), you can simply remove "
"the ``get_all_members()`` method. The default implementation on "
"``LazyObject`` will do the right thing."
msgstr ""

# 505416a85cb0486d8ca7dad72369e639
#: ../../releases/1.2.txt:646
msgid ""
"If you have more complex requirements for introspection, first rename the "
"``get_all_members()`` method to ``__dir__()``. This is the standard "
"introspection method for Python 2.6 and above. If you require support for "
"Python versions earlier than 2.6, add the following code to the class::"
msgstr ""

# 84a02a40dec145b0846f22cfe95765ab
#: ../../releases/1.2.txt:654
msgid "``__dict__`` on model instances"
msgstr ""

# 7880ed11a92b42ce9552fc67e9383dc0
#: ../../releases/1.2.txt:656
msgid ""
"Historically, the ``__dict__`` attribute of a model instance has only "
"contained attributes corresponding to the fields on a model."
msgstr ""

# 7a46e4383b694e2fa0f5801725757a7a
#: ../../releases/1.2.txt:659
msgid ""
"In order to support multiple database configurations, Django 1.2 has added a "
"``_state`` attribute to object instances. This attribute will appear in "
"``__dict__`` for a model instance. If your code relies on iterating over "
"``__dict__`` to obtain a list of fields, you must now be prepared to handle "
"or filter out the ``_state`` attribute."
msgstr ""

# 70ca306019b6464992a58a0d0d5702ea
#: ../../releases/1.2.txt:666
msgid "Test runner exit status code"
msgstr ""

# b533552aabf44ab48529d1b6c9f76760
#: ../../releases/1.2.txt:668
msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python "
"manage.py test``) no longer represents the number of failed tests, because a "
"failure of 256 or more tests resulted in a wrong exit status code. The exit "
"status code for the test runner is now 0 for success (no failing tests) and "
"1 for any number of test failures. If needed, the number of test failures "
"can be found at the end of the test runner's output."
msgstr ""

# 212c3549377440a5b2e46365b951b082
#: ../../releases/1.2.txt:676
msgid "Cookie encoding"
msgstr ""

#: ../../releases/1.2.txt:678
msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the comma and "
"semicolon are treated as non-safe characters, and are therefore encoded as ``"
"\\054`` and ``\\073`` respectively.  This could produce backwards "
"incompatibilities, especially if you are storing comma or semi-colon in "
"cookies and have JavaScript code that parses and manipulates cookie values "
"client-side."
msgstr ""

# 44fbd04c87cf4e46a7ac67a81add11c2
#: ../../releases/1.2.txt:687
msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr ""

# 611141810dd64e2d9c70f5d451f64ac9
#: ../../releases/1.2.txt:689
msgid ""
"Much of the validation work for ModelForms has been moved down to the model "
"level. As a result, the first time you call ``ModelForm.is_valid()``, access "
"``ModelForm.errors`` or otherwise trigger form validation, your model will "
"be cleaned in-place. This conversion used to happen when the model was "
"saved. If you need an unmodified instance of your model, you should pass a "
"copy to the ``ModelForm`` constructor."
msgstr ""

# 61107bc2105e46b1b20b904e57697498
#: ../../releases/1.2.txt:697
msgid "``BooleanField`` on MySQL"
msgstr ""

# 595bf3f31ed64bd080e276a45a162d12
#: ../../releases/1.2.txt:699
msgid ""
"In previous versions of Django, a model's ``BooleanField`` under MySQL would "
"return its value as either ``1`` or ``0``, instead of ``True`` or ``False``; "
"for most people this wasn't a problem because ``bool`` is a subclass of "
"``int`` in Python. In Django 1.2, however, ``BooleanField`` on MySQL "
"correctly returns a real ``bool``.  The only time this should ever be an "
"issue is if you were expecting the ``repr`` of a ``BooleanField`` to print "
"``1`` or ``0``."
msgstr ""

# 8fe7271b45c44de2b08f50ca5595022a
#: ../../releases/1.2.txt:708
msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr ""

# e33385a3991f4484b60d6c7a0e8f5387
#: ../../releases/1.2.txt:710
msgid ""
"As part of enhancements made to the handling of FormSets, the default value "
"and interpretation of the ``max_num`` parameter to the :ref:`django.forms."
"formsets.formset_factory() <formsets-max-num>` and :ref:`django.forms.models."
"modelformset_factory() <model-formsets-max-num>` functions has changed "
"slightly. This change also affects the way the :attr:`~django.contrib.admin."
"InlineModelAdmin.max_num` argument is used for inline admin objects."
msgstr ""

# 564bcdc5b8204303ac772b83f9dbb4d9
#: ../../releases/1.2.txt:719
msgid ""
"Previously, the default value for ``max_num`` was ``0`` (zero). FormSets "
"then used the boolean value of ``max_num`` to determine if a limit was to be "
"imposed on the number of generated forms. The default value of ``0`` meant "
"that there was no default limit on the number of forms in a FormSet."
msgstr ""

# 6c6446225ae14bc6b03f68d8c531097a
#: ../../releases/1.2.txt:725
msgid ""
"Starting with 1.2, the default value for ``max_num`` has been changed to "
"``None``, and FormSets will differentiate between a value of ``None`` and a "
"value of ``0``. A value of ``None`` indicates that no limit on the number of "
"forms is to be imposed; a value of ``0`` indicates that a maximum of 0 forms "
"should be imposed. This doesn't necessarily mean that no forms will be "
"displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-"
"num>` for more details."
msgstr ""

# 7c235962466c416fbe8d758be3559471
#: ../../releases/1.2.txt:734
msgid ""
"If you were manually specifying a value of ``0`` for ``max_num``, you will "
"need to update your FormSet and/or admin definitions."
msgstr ""

# 5eefd86184d9411b9c21e64e5412102b
#: ../../releases/1.2.txt:739
msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ""

# 7ad01a925e744e4b9dded0e405b4c67f
#: ../../releases/1.2.txt:742
msgid "``email_re``"
msgstr ""

# c6a0913ee8414be49a1adb31eb432052
#: ../../releases/1.2.txt:744
msgid ""
"An undocumented regular expression for validating email addresses has been "
"moved from ``django.form.fields`` to ``django.core.validators``. You will "
"need to update your imports if you are using it."
msgstr ""

# b90ec4d2bfa34e56b8d02a6886cd5f86
#: ../../releases/1.2.txt:751
msgid "Features deprecated in 1.2"
msgstr ""

# 1257bf9b50ee4ef281045271e15aa5d2
#: ../../releases/1.2.txt:753
msgid ""
"Finally, Django 1.2 deprecates some features from earlier releases. These "
"features are still supported, but will be gradually phased out over the next "
"few release cycles."
msgstr ""

# 3281701a702b48e78b5961e026bbf0e4
#: ../../releases/1.2.txt:757
msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

# 575b1a9c734a4bc2a158d18ab7090ffa
#: ../../releases/1.2.txt:762
msgid ""
"In Django 1.3, these warnings will become a ``DeprecationWarning``, which is "
"*not* silent. In Django 1.4 support for these features will be removed "
"entirely."
msgstr ""

# 6304071354c64ad690cf96e80eea5ddf
#: ../../releases/1.2.txt:768
msgid ""
"For more details, see the documentation :doc:`Django's release process </"
"internals/release-process>` and our :doc:`deprecation timeline </internals/"
"deprecation>`.`"
msgstr ""

# 3a05e0c851704c30b600c7528357f770
#: ../../releases/1.2.txt:775
msgid "Specifying databases"
msgstr ""

# d9ba704950fe4e24be678491b644b693
#: ../../releases/1.2.txt:777
msgid ""
"Prior to Django 1.2, Django used a number of settings to control access to a "
"single database. Django 1.2 introduces support for multiple databases, and "
"as a result the way you define database settings has changed."
msgstr ""

# cf33165932ac4cd9b0171bc85d7e5460
#: ../../releases/1.2.txt:782
msgid ""
"Any existing Django settings file will continue to work as expected until "
"Django 1.4. Until then, old-style database settings will be automatically "
"translated to the new-style format."
msgstr ""

# 251d9d97701d496db395def677674b57
#: ../../releases/1.2.txt:786
msgid ""
"In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` "
"settings in your settings file. For example::"
msgstr ""

# 1d6207a1e4344c4594ecdc56b411ea8d
#: ../../releases/1.2.txt:794
msgid ""
"These settings are now in a dictionary named :setting:`DATABASES`. Each item "
"in the dictionary corresponds to a single database connection, with the name "
"``'default'`` describing the default database connection. The setting names "
"have also been shortened. The previous sample settings would now look like "
"this::"
msgstr ""

# 1896ba4d8bed4abf843d4d41127d956f
#: ../../releases/1.2.txt:809
msgid "This affects the following settings:"
msgstr ""

# 7344e558a63449ea8dd2c0579063c378
#: ../../releases/1.2.txt:812
msgid "Old setting"
msgstr ""

# a5946e742d904664b25e18c50e9a39e9
#: ../../releases/1.2.txt:812
msgid "New Setting"
msgstr ""

# 8bd6840edc0847c790b08ed45826059e
#: ../../releases/1.2.txt:814
msgid "`DATABASE_ENGINE`"
msgstr ""

# 899ca144f3e44f91ba66b62c2e0ff665
#: ../../releases/1.2.txt:814
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

# 3443d85ba89d4cb48ea5de73388eabdf
#: ../../releases/1.2.txt:815
msgid "`DATABASE_HOST`"
msgstr ""

# 475335cd1d154489a4a8c541c4ec06fa
#: ../../releases/1.2.txt:815
msgid ":setting:`HOST`"
msgstr ""

# 3d6f2d2f58204d4f967aeb64d6d45499
#: ../../releases/1.2.txt:816
msgid "`DATABASE_NAME`"
msgstr ""

# 2a9e981f9b5d4e218760dcb1fa075cce
#: ../../releases/1.2.txt:816
msgid ":setting:`NAME`"
msgstr ""

# d333ff97a4b144dfa6e30454a964186f
#: ../../releases/1.2.txt:817
msgid "`DATABASE_OPTIONS`"
msgstr ""

# 0923c3c3437f4e9b846c8c63b9f37eb4
#: ../../releases/1.2.txt:817
msgid ":setting:`OPTIONS`"
msgstr ""

# e66b0c610c084381b586c8c69b7cf684
#: ../../releases/1.2.txt:818
msgid "`DATABASE_PASSWORD`"
msgstr ""

# 36214a34f81241baae886c46b29fecb0
#: ../../releases/1.2.txt:818
msgid ":setting:`PASSWORD`"
msgstr ""

# af6bb9ed446348f796c19f07553d2352
#: ../../releases/1.2.txt:819
msgid "`DATABASE_PORT`"
msgstr ""

# e8a2999c133343bab7fe4ced9662ea07
#: ../../releases/1.2.txt:819
msgid ":setting:`PORT`"
msgstr ""

# dc56175c0ae448d38c0b0f933fa7bcbc
#: ../../releases/1.2.txt:820
msgid "`DATABASE_USER`"
msgstr ""

# d0f60d78702842e5a0a1835486bf773a
#: ../../releases/1.2.txt:820
msgid ":setting:`USER`"
msgstr ""

# 1a59eab16f0b4e2ca1c70f444f30625c
#: ../../releases/1.2.txt:821
msgid "`TEST_DATABASE_CHARSET`"
msgstr ""

# 0c494b1f202f4297974919ae6e2a113d
#: ../../releases/1.2.txt:821
msgid ":setting:`TEST_CHARSET`"
msgstr ""

# 9621255b8b9f4bf3be131f080e9e194b
#: ../../releases/1.2.txt:822
msgid "`TEST_DATABASE_COLLATION`"
msgstr ""

# 291097fb99244268b803401e2505911b
#: ../../releases/1.2.txt:822
msgid ":setting:`TEST_COLLATION`"
msgstr ""

# 528af226980e4d43bde4b8ff3c94436d
#: ../../releases/1.2.txt:823
msgid "`TEST_DATABASE_NAME`"
msgstr ""

# 3476480c3b58488f9308736b80c540c8
#: ../../releases/1.2.txt:823
msgid ":setting:`TEST_NAME`"
msgstr ""

# 8b12820cb52c44b88f32f4dcf468f6c7
#: ../../releases/1.2.txt:826
msgid ""
"These changes are also required if you have manually created a database "
"connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""

# c968a3e01d264dee8f34a07d9ef6c73d
#: ../../releases/1.2.txt:829
msgid ""
"In addition to the change in structure, Django 1.2 removes the special "
"handling for the built-in database backends. All database backends must now "
"be specified by a fully qualified module name (i.e., ``django.db.backends."
"postgresql_psycopg2``, rather than just ``postgresql_psycopg2``)."
msgstr ""

# a37325af24624143af84eab393d6a9d2
#: ../../releases/1.2.txt:836
msgid "``postgresql`` database backend"
msgstr ""

# 2279f6b4dff341ef8c67b3fc23e4412b
#: ../../releases/1.2.txt:838
msgid ""
"The ``psycopg1`` library has not been updated since October 2005. As a "
"result, the ``postgresql`` database backend, which uses this library, has "
"been deprecated."
msgstr ""

# b17e384ed9b0408b997850761b70f291
#: ../../releases/1.2.txt:842
msgid ""
"If you are currently using the ``postgresql`` backend, you should migrate to "
"using the ``postgresql_psycopg2`` backend. To update your code, install the "
"``psycopg2`` library and change the :setting:`ENGINE <DATABASE-ENGINE>` "
"setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""

# 5c5916e988e841aa991fcdefb6b8145c
#: ../../releases/1.2.txt:849
msgid "CSRF response-rewriting middleware"
msgstr ""

# 225a23b1316044be9d6e63b4a793ae97
#: ../../releases/1.2.txt:851
msgid ""
"``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF "
"tokens into ``POST`` forms in outgoing pages, has been deprecated in favor "
"of a template tag method (see above), and will be removed completely in "
"Django 1.4. ``CsrfMiddleware``, which includes the functionality of "
"``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been "
"deprecated."
msgstr ""

# 80dc0e643f3f453087c70fdfbdcaaf34
#: ../../releases/1.2.txt:858
msgid ""
"Also, the CSRF module has moved from contrib to core, and the old imports "
"are deprecated, as described in the upgrading notes."
msgstr ""

# 5888b939bbd84ad7a630c4f3f35f8e1b
#: ../../releases/1.2.txt:867
msgid "``SMTPConnection``"
msgstr ""

# 4b5135c932934f4d9a4db8245998f43c
#: ../../releases/1.2.txt:869
msgid ""
"The ``SMTPConnection`` class has been deprecated in favor of a generic email "
"backend API. Old code that explicitly instantiated an instance of an "
"SMTPConnection::"
msgstr ""

# fd31acd0b14f47ce9f7031cacb6cc820
#: ../../releases/1.2.txt:878
msgid ""
"...should now call :meth:`~django.core.mail.get_connection()` to instantiate "
"a generic email connection::"
msgstr ""

# 24a84af20ad843d2886834f472a795ee
#: ../../releases/1.2.txt:886
msgid ""
"Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not "
"return an SMTP connection. If you explicitly require an SMTP connection with "
"which to send email, you can explicitly request an SMTP connection::"
msgstr ""

# f7ca302b1bc14b819d9263c96969a19d
#: ../../releases/1.2.txt:896
msgid ""
"If your call to construct an instance of ``SMTPConnection`` required "
"additional arguments, those arguments can be passed to the :meth:`~django."
"core.mail.get_connection()` call::"
msgstr ""

# 7a27dfef6bbf405e839cf16d9893ccd0
#: ../../releases/1.2.txt:903
msgid "User Messages API"
msgstr ""

# f24d49ad4c93416fb0440a19574ac11c
#: ../../releases/1.2.txt:905
msgid ""
"The API for storing messages in the user ``Message`` model (via ``user."
"message_set.create``) is now deprecated and will be removed in Django 1.4 "
"according to the standard :doc:`release process </internals/release-"
"process>`."
msgstr ""

# f899025f60d143469cb6052f34aff9fd
#: ../../releases/1.2.txt:909
msgid "To upgrade your code, you need to replace any instances of this::"
msgstr ""

# 391a40d85210469987c4f46e2bf310ed
#: ../../releases/1.2.txt:913
msgid "...with the following::"
msgstr ""

# 077416654b754c3eb7070596a6fd74b0
#: ../../releases/1.2.txt:918
msgid ""
"Additionally, if you make use of the method, you need to replace the "
"following::"
msgstr ""

# a15b95e3047f4f1fb467855a5574a8fe
#: ../../releases/1.2.txt:924
msgid "...with::"
msgstr ""

# 6be1873cfa2245a2aa3df53185eeb846
#: ../../releases/1.2.txt:930
msgid ""
"For more information, see the full :doc:`messages documentation </ref/"
"contrib/messages>`. You should begin to update your code to use the new API "
"immediately."
msgstr ""

# 13b63d7d01834febbe85cbade7fc1bfc
#: ../../releases/1.2.txt:935
msgid "Date format helper functions"
msgstr ""

# 2d14cc022ec649eeafde06ee3385d336
#: ../../releases/1.2.txt:937
msgid ""
"``django.utils.translation.get_date_formats()`` and ``django.utils."
"translation.get_partial_date_formats()`` have been deprecated in favor of "
"the appropriate calls to ``django.utils.formats.get_format()``, which is "
"locale-aware when :setting:`USE_L10N` is set to ``True``, and falls back to "
"default settings if set to ``False``."
msgstr ""

# fee6f19a2cf345b894860cfc66541f71
#: ../../releases/1.2.txt:943
msgid "To get the different date formats, instead of writing this::"
msgstr ""

# b96b2b04a5cb44ee89a611a272b1695f
#: ../../releases/1.2.txt:948
msgid "...use::"
msgstr ""

# b70a4e15c2454723b4d4896b434ac4e0
#: ../../releases/1.2.txt:955
msgid "Or, when directly formatting a date value::"
msgstr ""

# 62fcc17e3b9b406580e7e986ac1b3fd0
#: ../../releases/1.2.txt:960
msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr ""

# a99abff947c848c2b4bd3bce86c451c0
#: ../../releases/1.2.txt:962
msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr ""

# e4155625cd484877afa969a13d4cd3f9
#: ../../releases/1.2.txt:963
msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr ""

# c65e9a5c988049f0816604fc629970c7
#: ../../releases/1.2.txt:964
msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr ""

# 41f92d32ca4945f08957c57ac4201708
#: ../../releases/1.2.txt:966
msgid ""
"Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

# 6401856be57e4020879639276b607dd3
#: ../../releases/1.2.txt:969
msgid "Function-based test runners"
msgstr ""

# 523d1ff5a2d1414bbe6d8fd80517d56e
#: ../../releases/1.2.txt:971
msgid ""
"Django 1.2 changes the test runner tools to use a class-based approach. Old "
"style function-based test runners will still work, but should be updated to "
"use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""

# 5844e73a361b4bfe9a45bd96a448657b
#: ../../releases/1.2.txt:979
msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr ""

# e453f23bc8fb49ba8404dfcd0fadb2a2
#: ../../releases/1.2.txt:981
msgid ""
"The ``django.contrib.syndication.feeds.Feed`` class has been replaced by "
"the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds."
"Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""

# 3bade32d19944332883046551c3085e6
#: ../../releases/1.2.txt:986
msgid ""
"The new class has an almost identical API, but allows instances to be used "
"as views. For example, consider the use of the old framework in the "
"following :doc:`URLconf </topics/http/urls>`::"
msgstr ""

# 52dcf13289874309845bfdc46c99e8d8
#: ../../releases/1.2.txt:1005
msgid ""
"Using the new Feed class, these feeds can be deployed directly as views::"
msgstr ""

# 0305ede2a1ca495bb448f5ffed7717a9
#: ../../releases/1.2.txt:1017
msgid ""
"If you currently use the ``feed()`` view, the ``LatestEntries`` class would "
"often not need to be modified apart from subclassing the new :class:`~django."
"contrib.syndication.views.Feed` class. The exception is if Django was "
"automatically working out the name of the template to use to render the "
"feed's description and title elements (if you were not specifying the "
"``title_template`` and ``description_template`` attributes). You should "
"ensure that you always specify ``title_template`` and "
"``description_template`` attributes, or provide ``item_title()`` and "
"``item_description()`` methods."
msgstr ""

# fc5d868edff5473c8dda6adbe7814d60
#: ../../releases/1.2.txt:1026
msgid ""
"However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with "
"the ``bits`` argument to specify a specific category to show. In the new :"
"class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` "
"method takes a ``request`` and arguments from the URL, so it would look like "
"this::"
msgstr ""

# 0fefc0e6817546b8a76011ca8f27fa74
#: ../../releases/1.2.txt:1042
msgid ""
"Additionally, the ``get_feed()`` method on ``Feed`` classes now take "
"different arguments, which may impact you if you use the ``Feed`` classes "
"directly. Instead of just taking an optional ``url`` argument, it now takes "
"two arguments: the object returned by its own ``get_object()`` method, and "
"the current ``request`` object."
msgstr ""

# aa0c50cfaf434d8db14509ab50ca38d1
#: ../../releases/1.2.txt:1048
msgid ""
"To take into account ``Feed`` classes not being initialized for each "
"request, the ``__init__()`` method now takes no arguments by default. "
"Previously it would have taken the ``slug`` from the URL and the ``request`` "
"object."
msgstr ""

# 8bd6451682b24a18a0777f81c90ccec4
#: ../../releases/1.2.txt:1053
msgid ""
"In accordance with `RSS best practices`_, RSS feeds will now include an "
"``atom:link`` element. You may need to update your tests to take this into "
"account."
msgstr ""

# 8391e7e2233649ff9f1e613e5ca427eb
#: ../../releases/1.2.txt:1057
msgid ""
"For more information, see the full :doc:`syndication framework documentation "
"</ref/contrib/syndication>`."
msgstr ""

# 16dacbdacd38429494775af8a8470c96
#: ../../releases/1.2.txt:1063
msgid "Technical message IDs"
msgstr ""

#: ../../releases/1.2.txt:1065
msgid ""
"Up to version 1.1 Django used technical message IDs to provide localizers "
"the possibility to translate date and time formats. They were translatable :"
"term:`translation strings <translation string>` that could be recognized "
"because they were all upper case (for example :setting:`DATETIME_FORMAT`, :"
"setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated in "
"favor of the new :doc:`/topics/i18n/formatting` infrastructure that allows "
"localizers to specify that information in a ``formats.py`` file in the "
"corresponding ``django/conf/locale/<locale name>/`` directory."
msgstr ""

# 2fa95dccf88c4e7d8a464103a5ba1d1a
#: ../../releases/1.2.txt:1078
msgid ""
"To allow support for multiple databases, the GeoDjango database internals "
"were changed substantially.  The largest backwards-incompatible change is "
"that the module ``django.contrib.gis.db.backend`` was renamed to :mod:"
"`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial "
"database backends <spatial-backends>` now exist.  The following sections "
"provide information on the most-popular APIs that were affected by these "
"changes."
msgstr ""

# 39b9e180875648619f3ebcd44f8a6384
#: ../../releases/1.2.txt:1087
msgid "``SpatialBackend``"
msgstr ""

# b9c21a9f15424e0caafdad66753be7c5
#: ../../releases/1.2.txt:1089
msgid ""
"Prior to the creation of the separate spatial backends, the ``django.contrib."
"gis.db.backend.SpatialBackend`` object was provided as an abstraction to "
"introspect on the capabilities of the spatial database.  All of the "
"attributes and routines provided by ``SpatialBackend`` are now a part of the "
"``ops`` attribute of the database backend."
msgstr ""

# a4ad4b970d1e47b4a76497342d621614
#: ../../releases/1.2.txt:1096
msgid ""
"The old module ``django.contrib.gis.db.backend`` is still provided for "
"backwards-compatibility access to a ``SpatialBackend`` object, which is just "
"an alias to the ``ops`` module of the *default* spatial database connection."
msgstr ""

# fda3eef025bb4141ba6443cf2f2977b5
#: ../../releases/1.2.txt:1101
msgid ""
"Users that were relying on undocumented modules and objects within ``django."
"contrib.gis.db.backend``, rather the abstractions provided by "
"``SpatialBackend``, are required to modify their code. For example, the "
"following import which would work in 1.1 and below::"
msgstr ""

# d4a6fbc9912a4a79854064f83a6ca71c
#: ../../releases/1.2.txt:1109
msgid "Would need to be changed::"
msgstr ""

# 06e5dedc2abd4408939131bc1c487417
#: ../../releases/1.2.txt:1115
msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr ""

# 10223fbb274f432b9f786916062c92da
#: ../../releases/1.2.txt:1117
msgid ""
"In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had "
"``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC "
"spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, "
"respectively."
msgstr ""

# ade2a09e7aa54594849e301cd942efde
#: ../../releases/1.2.txt:1122
msgid ""
"While these aliases are still provided, they are only for the *default* "
"database connection and exist only if the default connection is using a "
"supported spatial database backend."
msgstr ""

# 9b7d2e6ba393401fb578f073b6c57833
#: ../../releases/1.2.txt:1128
msgid ""
"Because the table structure of the OGC spatial metadata tables differs "
"across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` "
"models can no longer be associated with the ``gis`` application name.  Thus, "
"no models will be returned when using the ``get_models`` method in the "
"following example::"
msgstr ""

# 52253ca960624198b2d17d3fbe227f8c
#: ../../releases/1.2.txt:1138
msgid ""
"To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your "
"spatial database use the methods provided by the spatial backend::"
msgstr ""

# 9292aa9c7d5242ac9bc171b173d3af36
#: ../../releases/1.2.txt:1147
msgid ""
"When using the models returned from the ``spatial_ref_sys()`` and "
"``geometry_columns()`` method, you'll still need to use the correct database "
"alias when querying on the non-default connection. In other words, to ensure "
"that the models in the example above use the correct database::"
msgstr ""

# cd4962b941d54927a862d7ac8d3ec593
#: ../../releases/1.2.txt:1157
msgid "Language code ``no``"
msgstr ""

# 7c030799f64a4ed3b6e55a7d5a37a6c7
#: ../../releases/1.2.txt:1159
msgid ""
"The currently used language code for Norwegian Bokmål ``no`` is being "
"replaced by the more common language code ``nb``."
msgstr ""

# bfcc0c27bf2e4f6ca011bb884d218e82
#: ../../releases/1.2.txt:1163
msgid "Function-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:1165
msgid ""
"Django 1.2 changes the template loading mechanism to use a class-based "
"approach. Old style function-based template loaders will still work, but "
"should be updated to use the new class-based template loaders."
msgstr ""
