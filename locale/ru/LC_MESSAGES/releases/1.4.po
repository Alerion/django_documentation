# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# Tyshchenko Viktor <tyvik8@gmail.com>, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2014-07-14 17:04+0300\n"
"Last-Translator: Tyshchenko Viktor <tyvik8@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 550630289f8a465bbd372aeb09bcd2ec
#: ../../releases/1.4.txt:3
msgid "Django 1.4 release notes"
msgstr "О релизе Django 1.4"

# 0c7daca019144075af0c63e48202fce5
#: ../../releases/1.4.txt:5
msgid "*March 23, 2012*"
msgstr "*23 марта 2012*"

# f622feb2dc7a4134b7dabb5046c7a668
#: ../../releases/1.4.txt:7
msgid "Welcome to Django 1.4!"
msgstr "Добро пожаловать в Django 1.4!"

# 389abb3ff88e4443a5a45322fd162cc6
#: ../../releases/1.4.txt:9
#, fuzzy
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.4>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.4>` "
"you'll want to be aware of when upgrading from Django 1.3 or older versions. "
"We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.4>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.4>`."
msgstr ""
"Здесь описаны `new features`_, а также `backwards incompatible changes`_ для "
"тех, кто обновляется со старых версий. Мы удалили некоторую функциональность "
"согласно :doc:`our deprecation plan </internals/deprecation>` и подготовили "
"`begun the deprecation process for some features`_."

# f592db28e7384de2b971a08d3eef583c
#: ../../releases/1.4.txt:17
msgid "Overview"
msgstr "Обзор"

# bae90ff4a538436f981639a6dc7f17f5
#: ../../releases/1.4.txt:19
msgid ""
"The biggest new feature in Django 1.4 is `support for time zones`_ when "
"handling date/times. When enabled, this Django will store date/times in UTC, "
"use timezone-aware objects internally, and translate them to users' local "
"timezones for display."
msgstr ""
"Самым важным изменением стало `support for time zones`_, которая учитывает "
"разницу даты/времени. Если эта опция включена, то Django сохраняет дату/"
"время в формате UTC и переводит его в часовой пояс пользователя для "
"отображения."

# 9e3f3e57d14c4b79a619e1b6bab75fc8
#: ../../releases/1.4.txt:24
#, fuzzy
msgid ""
"If you're upgrading an existing project to Django 1.4, switching to the "
"timezone aware mode may take some care: the new mode disallows some rather "
"sloppy behavior that used to be accepted. We encourage anyone who's "
"upgrading to check out the :ref:`timezone migration guide <time-zones-"
"migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful "
"pointers."
msgstr ""
"Если вы обновляете существующий проект до версии 1.4, перевод на новую "
"функциональность требует осторожности: новый режим запрещает некоторое "
"неряшливое поведение, которое было принято ранее. Мы призываем всех обратить "
"внимание на :ref:`timezone migration guide <time-zones-migration-guide>` и :"
"ref:`timezone FAQ <time-zones-faq>`."

# 77e0d0aa54d94c24a2f8bdb582bc6054
#: ../../releases/1.4.txt:30
msgid "Other notable new features in Django 1.4 include:"
msgstr "Другие изменения в Django 1.4:"

# 92c44bdb887241f6ad31b94202d1602f
#: ../../releases/1.4.txt:32
msgid ""
"A number of ORM improvements, including `SELECT FOR UPDATE support`_, the "
"ability to `bulk insert <#model-objects-bulk-create-in-the-orm>`_ large "
"datasets for improved performance, and `QuerySet.prefetch_related`_, a "
"method to batch-load related objects in areas where :meth:`~django.db.models."
"query.QuerySet.select_related` doesn't work."
msgstr ""
"Ряд улучшений ORM, включая `SELECT FOR UPDATE support`_, который позволяет "
"`bulk insert <#model-objects-bulk-create-in-the-orm>`_ большие объёмы данных "
"без потери в производительности, и `QuerySet.prefetch_related`_ -- метод, "
"позволяющий пакетно загрузить связанные объекты, когда :meth:`~django.db."
"models.query.QuerySet.select_related` не работает."

# 835f5c09bcc14a7ca198b6327174108d
#: ../../releases/1.4.txt:39
msgid ""
"Some nice security additions, including `improved password hashing`_ "
"(featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic "
"signing`_, several `CSRF improvements`_, and `simple clickjacking "
"protection`_."
msgstr ""
"Улучшения безопасности, включая `improved password hashing`_ (поддержка "
"PBKDF2_ и bcrypt_), новый `tools for cryptographic signing`_, некоторые "
"`CSRF improvements`_ и `simple clickjacking protection`_."

# d467bb1abcfd4fbfa8b3f1a4a39d2b6c
#: ../../releases/1.4.txt:44
msgid ""
"An `updated default project layout and manage.py`_ that removes the \"magic"
"\" from prior versions. And for those who don't like the new layout, you can "
"use `custom project and app templates`_ instead!"
msgstr ""
"`updated default project layout and manage.py`_, который убирает магию "
"предыдущих версий. "

# f4cf902968ec49099f5384952bb0f5f2
#: ../../releases/1.4.txt:48
msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr "`Support for in-browser testing frameworks`_ (например, Selenium_)."

# bef97ab9172d489b9db203a57630cd61
#: ../../releases/1.4.txt:50
msgid "... and a whole lot more; `see below <#what-s-new-in-django-1-4>`_!"
msgstr "... и кучу всего другого; `see below <#what-s-new-in-django-1-4>`_!"

# 96d28b475cc14d1baa40c73f35e20b9f
#: ../../releases/1.4.txt:52
#, fuzzy
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>` policy. "
"However, as with previous releases, Django 1.4 ships with some minor :ref:"
"`backwards incompatible changes <backwards-incompatible-1.4>`; people "
"upgrading from previous versions of Django should read that list carefully."
msgstr ""
"Везде, где это возможно, мы стараемся поддерживать обратную совместимость "
"согласно политике :doc:`our API stability policy </misc/api-stability>`. "
"Однако, как и предыдущие версии, Django 1.4 ломает некоторую совместимость "
"(`backwards incompatible changes`_). Будьте осторожны при обновлении с "
"предыдущих версий."

# 213df19afa184f7cadf36601eb51868b
#: ../../releases/1.4.txt:59
msgid "Python compatibility"
msgstr "Совместимость версий Python"

# e80870c48fa84ff48f78e768f3c6ad34
#: ../../releases/1.4.txt:61
msgid ""
"Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum "
"required Python version. Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""
"Django 1.4 более не поддерживает Python 2.4. Теперь минимальной версией "
"является Python 2.5. Этот релиз мы протестировали на Python 2.5, 2.6, 2.7."

# 7eb02d85ae724c098bf15b567a2213d1
#: ../../releases/1.4.txt:65
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade. Per :doc:`our support policy </"
"internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""
"Это изменение должно затронуть лишь небольшое число пользователей, т.к. "
"большинство ОС поставляется с Python 2.5 или чем-то поновее. Если у вас нет "
"возможности уйти с Python 2.4, то лучше оставайтесь на 1.3. Согласно :doc:"
"`our support policy </internals/release-process>` мы будем выпускать "
"обновления безопасности вплоть до выпуска Django 1.5."

# f21d94288ae94ee787e840b05750272e
#: ../../releases/1.4.txt:72
msgid ""
"Django does not support Python 3.x at this time. At some point before the "
"release of Django 1.4, we plan to publish a document outlining our full "
"timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""
"Django пока ещё не поддерживает Python 3.x, но в скором времени мы планируем "
"опубликовать документ с планом перехода на Python 3.x."

# 9d8aee022f664b8093ec70212a5c0f57
#: ../../releases/1.4.txt:79
msgid "What's new in Django 1.4"
msgstr "Что нового в Django 1.4"

# 68d556b7b1f84456841c8aa99c767e0f
#: ../../releases/1.4.txt:82
msgid "Support for time zones"
msgstr "Поддержка часовых поясов."

# 78121dad6c804fe4bd10631dbf806cba
#: ../../releases/1.4.txt:84
msgid ""
"In previous versions, Django used \"naive\" date/times (that is, date/times "
"without an associated time zone), leaving it up to each developer to "
"interpret what a given date/time \"really means\". This can cause all sorts "
"of subtle timezone-related bugs."
msgstr ""
"В предыдущих версиях Django использует \"наивную\" дату/время (без указания "
"временной зоны), соответственно, каждый разработчик должен сам следить за "
"тем, что же она означает по местному времени. Это провоцировало много ошибок."

# c71b67c8de17458b94aba9006ec01c26
#: ../../releases/1.4.txt:89
msgid ""
"In Django 1.4, you can now switch Django into a more correct, time-zone "
"aware mode. In this mode, Django stores date and  time information in UTC in "
"the database, uses time-zone-aware datetime objects internally and "
"translates them to the end user's time zone in templates and forms. Reasons "
"for using this feature include:"
msgstr ""
"В Django 1.4 вы можете активировать поддержку временных зон. В этом случае "
"дата будет записываться в базу данных в формате UTC, а используя time-zone-"
"объекты перевод в тайм-зону пользователя будет происходить автоматически. "
"Это может понадобиться в следующих случаях:"

# e104cc56f9094aaa9c069f69803383d6
#: ../../releases/1.4.txt:95
msgid "Customizing date and time display for users around the world."
msgstr "Настройка отображения даты и времени для пользователей по всему миру."

# 016018eca26b4bf88b00ca3571e0fd9f
#: ../../releases/1.4.txt:97
msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""
"Сохранение даты/времени в формате UTC обеспечивает совместимость и "
"переносимость. Это не относится к PostgreSQL, потому что это уже реализовано "
"в Django 1.3."

# 9a61d2f1a85241fca34734d3e8df9f46
#: ../../releases/1.4.txt:101
msgid "Avoiding data corruption problems around DST transitions."
msgstr "Позволяет избежать проблем с повреждением данных при переходе DST."

# 379b84cb32c347b2a74cb6e340863019
#: ../../releases/1.4.txt:103
msgid ""
"Time zone support is enabled by default in new projects created with :"
"djadmin:`startproject`. If you want to use this feature in an existing "
"project, read the :ref:`migration guide <time-zones-migration-guide>`. If "
"you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""
"Поддержка временных зон включена по умолчанию для новых проектов, созданных "
"с помощью :djadmin:`startproject`. Если вы хотите его включить в "
"существующем проекте, обратитесь к :ref:`migration guide <time-zones-"
"migration-guide>`. При возникновении проблем загляните в :ref:`FAQ <time-"
"zones-faq>`."

# 40e04b980b4e439b9e29d55c829a3ca7
#: ../../releases/1.4.txt:109
msgid "Support for in-browser testing frameworks"
msgstr "Поддержка фреймворков для тестирования в браузере"

# f62ffa88b264484c98a0a4dee82bbf28
#: ../../releases/1.4.txt:111
msgid ""
"Django 1.4 supports integration with in-browser testing frameworks like "
"Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets "
"you test the interactions between your site's front and back ends more "
"comprehensively. See the :class:`documentation<django.test."
"LiveServerTestCase>` for more details and concrete examples."
msgstr ""
"Django 1.4 поддерживает интеграцию с фреймворками для тестирования в "
"браузере типа Selenium_. Новый класс :class:`django.test.LiveServerTestCase` "
"позволяет тестировать взаимодействие клиентской и серверной части. Подробную "
"информацию и примеры можно найти в :class:`documentation<django.test."
"LiveServerTestCase>`."

# acf4c9754b024462ad015bff89a6f02d
#: ../../releases/1.4.txt:121
msgid "Updated default project layout and ``manage.py``"
msgstr "Обновлён шаблон нового проекта и ``manage.py``"

# 516c1e597cf54ea8ac3ac6479a77ee68
#: ../../releases/1.4.txt:123
msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""
"Django 1.4 поставляется с обновлённым шаблоном для нового приложения, "
"который создаётся командой :djadmin:`startproject`. Он исправляет несколько "
"ошибок, связанных с дублирующим импортом, трудностями развертывания и "
"прочими сложными в отладке проблемами."

# 4d7e3d4d6d56499ea4c0a25fbbd688e3
#: ../../releases/1.4.txt:129
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""
"Предыдущий ``manage.py`` использовал функциональность, которая стала "
"устаревшей, так что надо бы обновить и его в проекте. Но можно пока не "
"торопиться - он будет работать до версии 1.6, правда, в 1.5 вам напомнят "
"исключением ``DeprecationWarning``."

# 0220e674a57342188d297d08955e59bd
#: ../../releases/1.4.txt:134
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr "Новый рекомендуемый ``manage.py`` должен выглядеть как-то так::"

# fbef75321e7d42cbb82253a1c7af6d26
#: ../../releases/1.4.txt:146
msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr "где ``{{ project_name }}`` -- имя вашего приложения."

# 50a21d03dd934024b079c30fc9d86f76
#: ../../releases/1.4.txt:149
#, fuzzy
msgid ""
"If settings, URLconfs and apps within the project are imported or referenced "
"using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = "
"\"myproject.urls\"``, etc.), the new ``manage.py`` will need to be moved one "
"directory up, so it is outside the project package rather than adjacent to "
"``settings.py`` and ``urls.py``."
msgstr ""
"Если настройки, пути и приложения импортируются в рамках проекта с помощью "
"имени префикса (например, ``myproject.settings``, ``ROOT_URLCONF = "
"\"myproject.urls\"``), то новый ``manage.py`` должен быть перемещён на "
"директорию выше относительно ``settings.py`` и ``urls.py``."

# c8d9f2f0431b4ffe94a039719cc66b99
#: ../../releases/1.4.txt:155
msgid "For instance, with the following layout::"
msgstr "Например, как-то так::"

# 7e2793cc5d7e436ba8c387acbc3aee47
#: ../../releases/1.4.txt:166
msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, "
"but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""
"Вы должны импортировать ``mysite.settings``, ``mysite.urls``, ``mysite."
"myapp``, а не ``settings``, ``urls``, ``myapp`` в виде модулей верхнего "
"уровня."

# 627a9fbdac7d457fa2a32a619973afb7
#: ../../releases/1.4.txt:169
msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple \"myapp\" from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""
"Всё, что импортируется как модуль верхнего уровня, может быть размещено "
"рядом с новым ``manage.py``. Например, чтобы отделить \"myapp\" от проекта и "
"импортировать его просто как ``myapp``, просто вынесите его из каталога "
"``mysite/``::"

# cb7c51e53b6240b9ba5061a6906ee938
#: ../../releases/1.4.txt:182
msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when "
"switching to the new ``manage.py``."
msgstr ""
"Если же импорт идёт непоследовательно (где-то с префиксом проекта, где-то "
"без), то его необходимо почистить при обновлении ``manage.py``."

# 9ca0728fa1eb476a96906a2c214777b0
#: ../../releases/1.4.txt:187
msgid "Custom project and app templates"
msgstr "Пользовательские проекты и шаблоны приложений"

# 161db856870945439bc0c863508b20b3
#: ../../releases/1.4.txt:189
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands now "
"have a ``--template`` option for specifying a path or URL to a custom app or "
"project template."
msgstr ""
"Команды :djadmin:`startapp` и :djadmin:`startproject` теперь имеют опцию ``--"
"template`` для указания пути или URL до пользовательского приложения или "
"шаблона."

# f14707ebf2a54f18bdbb9595b7ad945e
#: ../../releases/1.4.txt:193
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when you run the following command::"
msgstr ""
"Например, Django будет использовать каталог ``/path/to/my_project_template`` "
"при выполнении следующего кода::"

# 01216d7eb45f4044b006f9bc14372e55
#: ../../releases/1.4.txt:198
msgid ""
"You can also now provide a destination directory as the second argument to "
"both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""
"Вы также можете указать каталог назначения вторым аргументом к :djadmin:"
"`startapp` и :djadmin:`startproject`::"

# dadf8bd0ebef418998ca5fabcad7d757
#: ../../releases/1.4.txt:204
msgid ""
"For more information, see the :djadmin:`startapp` and :djadmin:"
"`startproject` documentation."
msgstr ""
"За подробностями обратитесь к :djadmin:`startapp` и :djadmin:`startproject`."

# 92ca01c396e4462a91c890fbf5a6576e
#: ../../releases/1.4.txt:208
msgid "Improved WSGI support"
msgstr "Улучшение поддержки WSGI"

# 208a26d4d41e45a38970899fb7bc7355
#: ../../releases/1.4.txt:210
msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app servers</howto/deployment/"
"wsgi/index>`."
msgstr ""
"Команда :djadmin:`startproject` теперь добавляет в новый проект файл :file:"
"`wsgi.py`, содержащий простое приложение WSGI, которое используется :doc:"
"`deploying with WSGI app servers</howto/deployment/wsgi/index>`."

# 59c9e53007af4660bab7ac920990a5cd
#: ../../releases/1.4.txt:215
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, which makes it possible to run runserver "
"with the same WSGI configuration that is used for deployment. The new :"
"setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable :"
"djadmin:`runserver` uses."
msgstr ""
":djadmin:`built-in development server<runserver>` теперь поддерживает "
"внешние определения вызовов WSGI, что даёт возможность запустить runserver с "
"конфигурацией на боевом сервере. Новая настройка :setting:`WSGI_APPLICATION` "
"определяет какие вызовы WSGI использует :djadmin:`runserver`."

# a4d8986e13dc443284538a4dffe938b4
#: ../../releases/1.4.txt:221
#, fuzzy
msgid ""
"(The ``runfcgi`` management command also internally wraps the WSGI callable "
"configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""
"(Команда :djadmin:`runfcgi` является обёрткой для WSGI, настроенной с "
"помощью :setting:`WSGI_APPLICATION`.)"

# 659a36aca02a407da9ce6c06eb94b2e8
#: ../../releases/1.4.txt:225
msgid "``SELECT FOR UPDATE`` support"
msgstr "Поддержка ``SELECT FOR UPDATE``"

# 7be0935efd0d46aab6a9e83c2b8ce885
#: ../../releases/1.4.txt:227
msgid ""
"Django 1.4 includes a :meth:`QuerySet.select_for_update() <django.db.models."
"query.QuerySet.select_for_update>` method, which generates a ``SELECT ... "
"FOR UPDATE`` SQL query. This will lock rows until the end of the "
"transaction, meaning other transactions cannot modify or delete rows matched "
"by a ``FOR UPDATE`` query."
msgstr ""
"В Django 1.4 есть метод :meth:`QuerySet.select_for_update() <django.db."
"models.query.QuerySet.select_for_update>`, который генерирует SQL запрос "
"``SELECT ... FOR UPDATE``. Это блокирует записи до окончания транзакции, так "
"что остальные пользователи не смогут их изменить или удалить."

# 2be3435c2a194092b8c1d7d37acdb703
#: ../../releases/1.4.txt:233
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.select_for_update`."
msgstr ""
"За подробностями обратитесь к :meth:`~django.db.models.query.QuerySet."
"select_for_update`."

# e3ccf1a12eb6469fb3c1e73be408ec8f
#: ../../releases/1.4.txt:237
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr "``Model.objects.bulk_create`` в ORM"

# f84c8bdc008544e58097d4305b102b3e
#: ../../releases/1.4.txt:239
msgid ""
"This method lets you create multiple objects more efficiently. It can result "
"in significant performance increases if you have many objects."
msgstr ""
"Этот метод позволяет создавать несколько объектов более эффективно. Это "
"может привести к значительному увеличению производительности, если у вас "
"много объектов."

# 22d19dddd66e4b3ebfb64a9bc64b0aff
#: ../../releases/1.4.txt:242
msgid ""
"Django makes use of this internally, meaning some operations (such as "
"database setup for test suites) have seen a performance benefit as a result."
msgstr ""
"Django внутри себя использует этот метод, например при загрузке данных для "
"тестов, что даёт некоторый выигрыш в производительности."

# 7570072720884645a516844f1a5e071a
#: ../../releases/1.4.txt:245
msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""
"Подробнее описано в :meth:`~django.db.models.query.QuerySet.bulk_create`."

# 1999d227efff4d2a86a13bb52728a2f7
#: ../../releases/1.4.txt:249
msgid "``QuerySet.prefetch_related``"
msgstr "``QuerySet.prefetch_related``"

# 908aea2a2edd4174a417d058d6710f1d
#: ../../releases/1.4.txt:251
#, fuzzy
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, :meth:`~django.db.models.query."
"QuerySet.prefetch_related` has been added to :class:`~django.db.models.query."
"QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of "
"the specified related lookups in a single batch as soon as the query begins "
"to be evaluated. Unlike ``select_related``, it does the joins in Python, not "
"in the database, and supports many-to-many relationships, "
"``GenericForeignKey`` and more. This allows you to fix a very common "
"performance problem in which your code ends up doing O(n) database queries "
"(or worse) if objects on your primary ``QuerySet`` each have many related "
"objects that you also need to fetch."
msgstr ""
"Метод :meth:`~django.db.models.query.QuerySet.prefetch_related`, который "
"добавлен в :class:`~django.db.models.query.QuerySet`, похож на :meth:"
"`~django.db.models.query.QuerySet.select_related`, однако использует "
"некоторую другую стратегию выполнения. Этот метод возвращает новый "
"``QuerySet``, который получает за один проход все связанные данные. В "
"отличие от ``select_related`` он объединяет на уровне Python, а не в базе "
"данных, и поддерживает отношения многие-ко-многим, класс :class:`~django."
"contrib.contenttypes.generic.GenericForeignKey`... Это позволяет избежать "
"распространённой проблемы, когда код выполняет O(n) запросов, и для каждого "
"из них подтягивает связанные объекты."

# 2d725bf09f8e46a083d783ad0987fa81
#: ../../releases/1.4.txt:264
msgid "Improved password hashing"
msgstr "Улучшенное хеширование паролей"

# 5ee8d81fe9e44950b0ad283794ea98fb
#: ../../releases/1.4.txt:266
msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor "
"speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You "
"can also easily choose a different algorithm (including the popular bcrypt_ "
"algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""
"Система аутентификации Django (``django.contrib.auth``) хранит пароли с "
"односторонним алгоритмом шифрования. Django 1.3 использует SHA1_, однако с "
"ростом производительности компьютеров риск успешной атаки всё повышается. В "
"Django 1.4 представлена новая система хранения паролей, основанная на "
"алгоритме PBKDF2_ (рекомендован NIST_). Тем не менее вы можете указать свой, "
"например, популярный bcrypt_. Для подробностей смотрите в :ref:"
"`auth_password_storage`."

# e7907206634946a59844ed631d7b632a
#: ../../releases/1.4.txt:280
msgid "HTML5 doctype"
msgstr "Поддержка HTML5"

# ef96e103a613431ea63c5ce8d1843704
#: ../../releases/1.4.txt:282
msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""
"В админке и прочих стандартных шаблонах мы теперь используем тип документа "
"HTML5. В то же время Django старается сохранить совместимость со старыми "
"браузерами. Это изменение позволяет использовать возможности HTML5 без "
"потери корректности HTML, а также указать самому тип документа."

# a031c5e0858045599046136e779e376e
#: ../../releases/1.4.txt:289
msgid "List filters in admin interface"
msgstr "Фильтрация списков в интерфейса администратора"

# 0cca7f72ed6a450c8cabbc9e46420db2
#: ../../releases/1.4.txt:291
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify "
"change list filters by specifying a field lookup, but it didn't allow you to "
"create custom filters. This has been rectified with a simple API (previously "
"used internally and known as \"FilterSpec\"). For more details, see the "
"documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""
"До Django 1.4 :mod:`~django.contrib.admin` позволяло указывать значения "
"отдельных полей без возможности создания своих фильтров. Это было исправлено "
"с помощью небольшого API (ранее использовался внутренний \"FilterSpec\"). "
"Подробнее можно прочитать здесь :attr:`~django.contrib.admin.ModelAdmin."
"list_filter`."

# ab0f1ba23c1b4931b4cc882a3f4ac8c6
#: ../../releases/1.4.txt:298
msgid "Multiple sort in admin interface"
msgstr "Множественная сортировка в интерфейсе администратора"

# d82a12721a2b4761a8f6ae51cb6c86a9
#: ../../releases/1.4.txt:300
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. We also added a :meth:"
"`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the "
"ordering dynamically (i.e., depending on the request)."
msgstr ""
"Теперь в админке можно указывать сортировку по нескольким столбцам. "
"Учитываются все элементы, указанные в атрибуте :attr:`~django.contrib.admin."
"ModelAdmin.ordering`. Поведение взято из настольного GUI - достаточно "
"кликнуть по заголовку столбца. Мы также добавили метод :meth:`~django."
"contrib.admin.ModelAdmin.get_ordering` для указания сортировки динамически, "
"например, в зависимости от запроса."

# fb2afe95925e413f8649f13f8a0bbc42
#: ../../releases/1.4.txt:308
msgid "New ``ModelAdmin`` methods"
msgstr "Новые методы в ``ModelAdmin``"

# 5b22f126f045437fbe710655b7223b33
#: ../../releases/1.4.txt:310
msgid ""
"We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to :"
"mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related "
"objects are saved in the admin."
msgstr ""
"Мы добавили метод :meth:`~django.contrib.admin.ModelAdmin.save_related` в "
"модель :mod:`~django.contrib.admin.ModelAdmin` для возможности управления "
"сохранением связанных объектов."

# 54174c53eb5847a9bc78f377d0e2471d
#: ../../releases/1.4.txt:314
msgid ""
"Two other new :class:`~django.contrib.admin.ModelAdmin` methods, :meth:"
"`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django."
"contrib.admin.ModelAdmin.get_list_display_links` enable dynamic "
"customization of fields and links displayed on the admin change list."
msgstr ""
"Два других новых метода класса :class:`~django.contrib.admin.ModelAdmin` :"
"meth:`~django.contrib.admin.ModelAdmin.get_list_display` и :meth:`~django."
"contrib.admin.ModelAdmin.get_list_display_links` включают динамическое "
"управление полями и ссылками, которые будут показаны в таблицах админки."

# 011becf1613d4af7b0f3680dbcb70a5e
#: ../../releases/1.4.txt:321
msgid "Admin inlines respect user permissions"
msgstr "Проверка прав в панели администратора"

# dea8de3165e146a98274028ea21e60cf
#: ../../releases/1.4.txt:323
msgid ""
"Admin inlines now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""
"В админке теперь доступны только те действия, на которые пользователь имеет "
"разрешения. Для отношения ``ManyToMany``, когда создаётся модель, на которую "
"пользователь не имеет явных прав, они определяются из прав на отношение."

# bd058ddf9d624cb28db4f5a51d2cc996
#: ../../releases/1.4.txt:330
msgid "Tools for cryptographic signing"
msgstr "Инструменты для криптографических подписей"

# a1a2fe03fc5a404f9af9c87491b7ef1c
#: ../../releases/1.4.txt:332
msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""
"Django 1.4 добавляет как низкоуровневые, так и высокоуровневые средства для "
"работы с куками, которые являются одним из самых распространённых способов "
"подписи веб-приложения."

# 77003a46424a4fcaa930d6a267ef0e62
#: ../../releases/1.4.txt:336
msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr ""
"Подробнее можно посмотреть здесь :doc:`cryptographic signing </topics/"
"signing>`."

# 8379f7a3c2df4b37aafc440319abcc61
#: ../../releases/1.4.txt:340
msgid "Cookie-based session backend"
msgstr "Сессии на базе кук"

# dde796f39c954a4c9117de425b7a9a1f
#: ../../releases/1.4.txt:342
msgid ""
"Django 1.4 introduces a cookie-based session backend that uses the tools "
"for :doc:`cryptographic signing </topics/signing>` to store the session data "
"in the client's browser."
msgstr ""
"Django 1.4 поддерживает сессии на базе кук, используя криптографическую "
"подпись :doc:`cryptographic signing </topics/signing>` для хранения данных "
"сессии в браузере клиента."

# 675d826b49bf4b6f84d3cf011eadb5c8
#: ../../releases/1.4.txt:348
msgid ""
"Session data is signed and validated by the server, but it's not encrypted. "
"This means a user can view any data stored in the session but cannot change "
"it. Please read the documentation for further clarification before using "
"this backend."
msgstr ""
"Данные сессии подписываются и проверяются сервером, но не шифруются. Это "
"означает, что пользователь может их посмотреть, но не изменить. Пожалуйста, "
"прочитайте документацию, прежде чем использовать эту возможность."

# 61563dcfb8d34d8280068253c18a4f9b
#: ../../releases/1.4.txt:353
msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""
"Подробнее можно посмотреть здесь :ref:`cookie-based session backend <cookie-"
"session-backend>`."

# f59a922c7120466786ef4daefa55ac54
#: ../../releases/1.4.txt:357
msgid "New form wizard"
msgstr "Новый FormWizard"

# 6eeabe102797451bb960209ac62c40fe
#: ../../releases/1.4.txt:359
#, fuzzy
msgid ""
"The previous ``FormWizard`` from ``django.contrib.formtools`` has been "
"replaced with a new implementation based on the class-based views introduced "
"in Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""
"Предыдущий ``FormWizard`` из модуля :mod:`django.contrib.formtools` заменён "
"новой реализацией, основанной на классах представлений, которые появились в "
"Django 1.3. Вместе с тем стало возможным подключить API для хранения, чтобы "
"передавать скрытые поля с предыдущего шага."

# 4cba8f8b817a44759e49c1a24e75ae71
#: ../../releases/1.4.txt:364
msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing </"
"topics/signing>` also introduced in Django 1.4 to store the wizard's state "
"in the user's cookies."
msgstr ""
"Django 1.4 поставляется с возможностью хранения информации пользователя в "
"сессиях или куках. Последние имеют инструменты для :doc:`cryptographic "
"signing </topics/signing>`, которые введены в Django 1.4 для хранения "
"состояния помощника (wizard`а) в куках."

# dbebb09dbeb24b8ca88cc45d6017eebd
#: ../../releases/1.4.txt:370
msgid "``reverse_lazy``"
msgstr "``reverse_lazy``"

# 78f1c8c19d8b4a6ba0fe856ccd3ca094
#: ../../releases/1.4.txt:372
#, fuzzy
msgid ""
"A lazily evaluated version of ``reverse()`` was added to allow using URL "
"reversals before the project's URLconf gets loaded."
msgstr ""
"Ленивая версия вычисления :func:`django.core.urlresolvers.reverse` была "
"добавлена для расшифровки URL до загрузки URLconf."

# c0cc8909e3244325b1a730de45f0a260
#: ../../releases/1.4.txt:376
msgid "Translating URL patterns"
msgstr "Трансляция шаблонов URL"

# b26f99cebacf4bd4b9a92cdcf2bc1d12
#: ../../releases/1.4.txt:378
msgid ""
"Django can now look for a language prefix in the URLpattern when using the "
"new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also "
"now possible to define translatable URL patterns using :func:`~django.utils."
"translation.ugettext_lazy`. See :ref:`url-internationalization` for more "
"information about the language prefix and how to internationalize URL "
"patterns."
msgstr ""
"С помощью функции хэлпера :func:`~django.conf.urls.i18n.i18n_patterns` "
"Django теперь может учитывать языковой префикс в URL. Благодаря :func:"
"`~django.utils.translation.ugettext_lazy` стало возможным определять URL для "
"интернационализации. Смотри :ref:`url-internationalization` для информации "
"об использовании языковых префиксов и интернационализации шаблонов URL."

# 97d694a0a1534720b1a8c3dbaf8fd8d7
#: ../../releases/1.4.txt:386
msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""
"Поддержка контекстного перевода для ``{% trans %}`` и ``{% blocktrans %}``"

# a36b7fe1678f4321aa1a82ed6dbd141b
#: ../../releases/1.4.txt:388
msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the :ttag:"
"`trans` and :ttag:`blocktrans` template tags using the new ``context`` "
"keyword."
msgstr ""
"Поддержка :ref:`contextual translation<contextual-markers>` была введена в "
"Django 1.3 с помощью функции ``pgettext``, которая расширяла теги :ttag:"
"`trans` и :ttag:`blocktrans` через ключевое слово ``context``."

# 186c83c5a114452abcbb2b9ea6613551
#: ../../releases/1.4.txt:394
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr "Настройка ``SingleObjectMixin`` URLConf kwargs"

# e4ee7a4349704a23b9bc8b95592eb5e7
#: ../../releases/1.4.txt:396
msgid ""
"Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:"
"`~django.views.generic.detail.SingleObjectMixin` to enable the customization "
"of URLconf keyword arguments used for single object generic views."
msgstr ""
"Два новых атрибута :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` и :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>` были добавлены в класс :"
"class:`~django.views.generic.detail.SingleObjectMixin` для возможности "
"настройки URLconf через единственный общий объект представления."

# efea427b055f43aba8e10a280f7a7b71
#: ../../releases/1.4.txt:405
msgid "Assignment template tags"
msgstr "Связывание тегов шаблонизатора"

# d21ce218e7ee44a9b8404c18ce8e7f08
#: ../../releases/1.4.txt:407
#, fuzzy
msgid ""
"A new ``assignment_tag`` helper function was added to ``template.Library`` "
"to ease the creation of template tags that store data in a specified context "
"variable."
msgstr ""
"Новая функция :ref:`assignment_tag<howto-custom-template-tags-assignment-"
"tags>` была добавлена в ``template.Library`` для упрощения создания тегов, "
"которые хранят данные в контекстной переменной."

# 7544b2ab11134670bb73e61f8485685a
#: ../../releases/1.4.txt:412
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr "Поддержка ``*args`` и ``**kwargs`` для хэлперов тегов"

# cfb2fb4e945a437f8b831a1e00188e70
#: ../../releases/1.4.txt:414
#, fuzzy
msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:"
"`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced ``assignment_tag`` template helper functions may now accept any "
"number of positional or keyword arguments. For example::"
msgstr ""
"Хэлперы шаблонов :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :"
"ref:`inclusion_tag <howto-custom-template-tags-inclusion-tags>` и новый :ref:"
"`assignment_tag<howto-custom-template-tags-assignment-tags>` теперь может "
"принимать позиционные или словарные параметры:"

# 19e6a7fd6df84c5cbe5319e4576e8a8f
#: ../../releases/1.4.txt:426
msgid ""
"Then, in the template, any number of arguments may be passed to the template "
"tag. For example:"
msgstr "Тогда в шаблоне любое число аргументов может быть передано в тег:"

# 6f539dfdcec442899dfcad6557b01f67
#: ../../releases/1.4.txt:434
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr "Обёртывание исключений в режиме ``TEMPLATE_DEBUG``"

# 0fc60bd601d64e638d576eff0f870a0b
#: ../../releases/1.4.txt:436
#, fuzzy
msgid ""
"In previous versions of Django, whenever the ``TEMPLATE_DEBUG`` setting was "
"``True``, any exception raised during template rendering (even exceptions "
"unrelated to template syntax) were wrapped in ``TemplateSyntaxError`` and re-"
"raised. This was done in order to provide detailed template source location "
"information in the debug 500 page."
msgstr ""
"В предыдущей версии Django в случае, когда :setting:`TEMPLATE_DEBUG` "
"установлена в ``True``, любое исключение при рендеринге шаблонов (даже не "
"связанное с синтаксисом шаблона) порождало вызов исключения "
"``TemplateSyntaxError``. Это было сделано в целях получения детальной "
"информации для отладочной страницы ошибки 500."

# 04734159308c4d43b8b1e7a8dd2e3ff2
#: ../../releases/1.4.txt:442
#, fuzzy
msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching "
"exceptions from template rendering is now consistent regardless of the value "
"of ``TEMPLATE_DEBUG``, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""
"В Django 1.4 исключения не перехватываются. Вместо этого оригинальное "
"исключение дополняется информацией об источнике. Это означает, что теперь "
"можно ловить исключения при рендеринге шаблонов вне зависимости от значения :"
"setting:`TEMPLATE_DEBUG`, и нет необходимости ловить и разворачивать "
"``TemplateSyntaxError`` для обработки остальных ошибок."

# aea00db3e90944a080ea186c7ad6340c
#: ../../releases/1.4.txt:449
msgid "``truncatechars`` template filter"
msgstr "Фильтр шаблона ``truncatechars``"

# a585d9d144104881952565643659701d
#: ../../releases/1.4.txt:451
msgid ""
"This new filter truncates a string to be no longer than the specified number "
"of characters. Truncated strings end with a translatable ellipsis sequence "
"(\"...\"). See the documentation for :tfilter:`truncatechars` for more "
"details."
msgstr ""
"Новый фильтр урезает строку до определённого количества символов. Обрезанная "
"строка заканчивается последовательностью \"...\". Подробнее в документации "
"по :tfilter:`truncatechars`."

# c6bd44649b104aeb8934995b4660ad89
#: ../../releases/1.4.txt:457
msgid "``static`` template tag"
msgstr "Тег шаблона ``static``"

# 17343231d4c74e7fb816eb073ab9ba0c
#: ../../releases/1.4.txt:459
#, fuzzy
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new "
"``static`` template tag to refer to files saved with the :setting:"
"`STATICFILES_STORAGE` storage backend. It uses the storage backend's ``url`` "
"method and therefore supports advanced features such as :ref:`serving files "
"from a cloud service<staticfiles-from-cdn>`."
msgstr ""
"В модуль :mod:`staticfiles<django.contrib.staticfiles>` добавлен новый тег "
"шаблонизатора :ttag:`static<staticfiles-static>`, который позволяет указать "
"на файл, который был сохранён с помощью :setting:`STATICFILES_STORAGE`. Он "
"поддерживает метод ``url``, так что позволяет :ref:`serving files from a "
"cloud service<staticfiles-from-cdn>`."

# 6c26a2c211044807a1fc790735c6b2b5
#: ../../releases/1.4.txt:466
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr "Поддержка бэкенда ``CachedStaticFilesStorage``"

# 41866b663d97400d92c0de3b6f536b2c
#: ../../releases/1.4.txt:468
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :"
"class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend "
"that caches the files it saves (when running the :djadmin:`collectstatic` "
"management command) by appending the MD5 hash of the file's content to the "
"filename. For example, the file ``css/styles.css`` would also be saved as "
"``css/styles.55e7cbb9ba48.css``"
msgstr ""
"В модуль :mod:`staticfiles<django.contrib.staticfiles>` добавлен класс "
"бэкенда :class:`~django.contrib.staticfiles.storage."
"CachedStaticFilesStorage`, который кэширует файлы при сохранении (при "
"запуске команды :djadmin:`collectstatic`), добавляя MD5 к имени файла. "
"Например, файл ``css/styles.css`` будет сохранён как ``css/"
"styles.55e7cbb9ba48.css``."

# 5c96e6a904cd4fa5a1a4476e3eaadb6f
#: ../../releases/1.4.txt:475
msgid ""
"See the :class:`~django.contrib.staticfiles.storage."
"CachedStaticFilesStorage` docs for more information."
msgstr ""
"Подробнее описано здесь :class:`~django.contrib.staticfiles.storage."
"CachedStaticFilesStorage`."

# 4a66e55ebbe14079ab5988aaf1991114
#: ../../releases/1.4.txt:479
msgid "Simple clickjacking protection"
msgstr "Простая защита от кликджекинга"

# 561c2fbb6e7548b89985881295b9a83a
#: ../../releases/1.4.txt:481
#, fuzzy
msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<https://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` "
"header. It's not enabled by default for backwards compatibility reasons, but "
"you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to "
"help plug that security hole for browsers that support the header."
msgstr ""
"Мы добавили поддержку защиты от `clickjacking <http://en.wikipedia.org/wiki/"
"Clickjacking>`_, который использует атрибут заголовка ``X-Frame-Options``. "
"Из-за обратной совместимости она отключена по умолчанию; как её включить "
"можно посмотреть в :doc:`enable it </ref/clickjacking/>`, чтобы обезопасить "
"пользователей браузеров, которые поддерживают этот заголовок."

# ec72485bcd5f4e76af1a0b51ba5fd537
#: ../../releases/1.4.txt:488
msgid "CSRF improvements"
msgstr "Улучшение CSRF"

# a37068af316543c0b20d9969abe51abc
#: ../../releases/1.4.txt:490
#, fuzzy
msgid ""
"We've made various improvements to our CSRF features, including the :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which can help "
"with AJAX-heavy sites; protection for PUT and DELETE requests; and the :"
"setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, which "
"can improve the security and usefulness of CSRF protection. See the :doc:"
"`CSRF docs </ref/csrf>` for more information."
msgstr ""
"Мы проделали некоторые улучшения в плане поддержки CSRF, включая декоратор :"
"func:`~django.views.decorators.csrf.ensure_csrf_cookie`, который будет "
"полезен в тяжёлых AJAX-сайтах; защита запросов PUT и DELETE; настройки :"
"setting:`CSRF_COOKIE_SECURE` и :setting:`CSRF_COOKIE_PATH`, которые "
"обеспечивают большую защиту от CSRF-атак. Подробнее можно посмотреть в "
"разделе :doc:`CSRF docs </ref/contrib/csrf>`."

# 32b456f0445344b299ff8c8382f4b90e
#: ../../releases/1.4.txt:498
msgid "Error report filtering"
msgstr "Фильтрации отчётов об ошибках"

# 7673f4be673e4ae486fd698534000076
#: ../../releases/1.4.txt:500
msgid ""
"We added two function decorators, :func:`~django.views.decorators.debug."
"sensitive_variables` and :func:`~django.views.decorators.debug."
"sensitive_post_parameters`, to allow designating the local variables and "
"POST parameters that may contain sensitive information and should be "
"filtered out of error reports."
msgstr ""
"Мы добавили два декоратора функций (:func:`~django.views.decorators.debug."
"sensitive_variables` и :func:`~django.views.decorators.debug."
"sensitive_post_parameters`) для обработки переменных и POST-параметров с "
"целью исключения какой-либо персонализированной информации из отчётов об "
"ошибках."

# 2f659736d838490993fbeb2df88085f6
#: ../../releases/1.4.txt:506
msgid ""
"All POST parameters are now systematically filtered out of error reports for "
"certain views (``login``, ``password_reset_confirm``, ``password_change`` "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""
"Все POST-параметры теперь постоянно фильтруют вывод отчёта для определённых "
"представлений (``login``, ``password_reset_confirm``, ``password_change`` и "
"``add_view`` в модуле :mod:`django.contrib.auth.views`, известном также как "
"``user_change_password`` в админке) для предотвращения утечки информации, "
"например, паролей."

# b21a123b10804eff8e53c74c5d31a055
#: ../../releases/1.4.txt:512
msgid ""
"You can override or customize the default filtering by writing a :ref:"
"`custom filter<custom-error-reports>`. For more information see the docs on :"
"ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""
"Вы можете перекрыть поведение по умолчанию, написав свой фильтр :ref:`custom "
"filter<custom-error-reports>`. Подробнее можно прочитать в :ref:`Filtering "
"error reports<filtering-error-reports>`."

# e78fe8cfe986466b8c13f92f55d6645c
#: ../../releases/1.4.txt:517
msgid "Extended IPv6 support"
msgstr "Расширена поддержка IPv6"

# a30c55ffb43b4d57b1a7a488af62bfd3
#: ../../releases/1.4.txt:519
msgid ""
"Django 1.4 can now better handle IPv6 addresses with the new :class:`~django."
"db.models.GenericIPAddressField` model field, :class:`~django.forms."
"GenericIPAddressField` form field and the validators :data:`~django.core."
"validators.validate_ipv46_address` and :data:`~django.core.validators."
"validate_ipv6_address`."
msgstr ""
"В Django 1.4 улучшена поддержка IPv6 с помощью нового класса поля модели :"
"class:`~django.db.models.GenericIPAddressField`, поля формы :class:`~django."
"forms.GenericIPAddressField` и валидаторов :data:`~django.core.validators."
"validate_ipv46_address` и :data:`~django.core.validators."
"validate_ipv6_address`."

# f3838eae2f494217b5e4aa3d3c9795bb
#: ../../releases/1.4.txt:526
msgid "HTML comparisons in tests"
msgstr "Сравнение HTML в тестах"

# 446f174ed5fe4785910012e4c190e132
#: ../../releases/1.4.txt:528
msgid ""
"The base classes in :mod:`django.test` now have some helpers to compare HTML "
"without tripping over irrelevant differences in whitespace, argument quoting/"
"ordering and closing of self-closing tags. You can either compare HTML "
"directly with the new :meth:`~django.test.SimpleTestCase.assertHTMLEqual` "
"and :meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or "
"use the ``html=True`` flag with :meth:`~django.test.SimpleTestCase."
"assertContains` and :meth:`~django.test.SimpleTestCase.assertNotContains` to "
"test whether the client's response contains a given HTML fragment. See the :"
"ref:`assertions documentation <assertions>` for more."
msgstr ""
"В базовый класс тестов :mod:`django.test` добавлены хелперы для нестрого "
"сравнения HTML, исключающие несовпадение пробелов, кавычки аргументов, их "
"порядок. Вы можете сравнить непосредственно два HTML-документа через новые "
"методы :meth:`~django.test.SimpleTestCase.assertHTMLEqual` и :meth:`~django."
"test.SimpleTestCase.assertHTMLNotEqual` или использовать флаг ``html=True`` "
"в методе :meth:`~django.test.SimpleTestCase.assertContains` и :meth:`~django."
"test.SimpleTestCase.assertNotContains` для проверки что же отдаётся клиенту. "
"Смотрите документацию по :ref:`assertions documentation <assertions>`."

# a23e3f090d3f49999e13be04e2506dbf
#: ../../releases/1.4.txt:541
msgid "Two new date format strings"
msgstr "Два новых формата даты"

# 1396900e66934767bfc9d34d381a9f35
#: ../../releases/1.4.txt:543
#, fuzzy
msgid ""
"Two new :tfilter:`date` formats were added for use in template filters, "
"template tags and :doc:`/topics/i18n/formatting`:"
msgstr ""
"Два новых формата :tfilter:`date` добавлены в фильтры шаблонов, тегов и :ref:"
"`format-localization`:"

# 40939dc789cf4c38833c7c868f920ff1
#: ../../releases/1.4.txt:546
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr "``e`` -- название временной зоны у объекта даты/времени"

# 1b28a80ccc8b432794842638919f2b1d
#: ../../releases/1.4.txt:547
msgid "``o`` -- the ISO 8601 year number"
msgstr "``o`` -- номер года по ISO 8601"

# 8604e7cd1bec4b74a031534df224b3e8
#: ../../releases/1.4.txt:549
msgid ""
"Please make sure to update your :ref:`custom format files <custom-format-"
"files>` if they contain either ``e`` or ``o`` in a format string. For "
"example a Spanish localization format previously only escaped the ``d`` "
"format character::"
msgstr ""
"Если вы используете ``e`` или ``o``, обновитесь согласно :ref:`custom format "
"files <custom-format-files>`. Например, для локализации на испанский "
"экранируйте аналогично ``d``::"

# 4880243424924888a3253296e0b8f34a
#: ../../releases/1.4.txt:556
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr "Теперь же нужно экранировать и ``e`` с ``o``::"

# f1e3414517ec4b57819ca95e4b681bea
#: ../../releases/1.4.txt:560
msgid "For more information, see the :tfilter:`date` documentation."
msgstr "Подробнее можно посмотреть в документации к :tfilter:`date`."

# 6f1e07a35b39497e99f943e2e7a5d0bc
#: ../../releases/1.4.txt:563
msgid "Minor features"
msgstr "Минорные изменения"

# 043344790fae49f69e10f928e4766244
#: ../../releases/1.4.txt:565
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr "Django 1.4 включает в себя также несколько небольших изменений:"

# 836ceddf4fd043c1a38cfac1e1d8526a
#: ../../releases/1.4.txt:567
msgid ""
"A more usable stacktrace in the technical 500 page. Frames in the stack "
"trace that reference Django's framework code are dimmed out, while frames in "
"application code are slightly emphasized. This change makes it easier to "
"scan a stacktrace for issues in application code."
msgstr ""
"Улучшенная техническая страница ошибки 500. Фреймы стека, которые относятся "
"к коду Django, затемнены, а код приложения подсвечен. Это облегчит разбор "
"ошибок приложения."

# b63ca0414bb141acb917633452fe39f4
#: ../../releases/1.4.txt:572
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ":doc:`Tablespace support </topics/db/tablespaces>` в PostgreSQL."

# 044457d68d8e436bb6481e8cb97f9936
#: ../../releases/1.4.txt:574
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr "Настраиваемые имена для :meth:`~django.template.Library.simple_tag`."

# b7ca5dba7b534c4895518b86dab351f6
#: ../../releases/1.4.txt:576
msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr ""
"Посмотрите раздел :doc:`security overview </topics/security>` в документации."

# 979ceccfc2014781b1f80a2e2df352e2
#: ../../releases/1.4.txt:579
msgid ""
"The ``django.contrib.auth.models.check_password`` function has been moved to "
"the :mod:`django.contrib.auth.hashers` module. Importing it from the old "
"location will still work, but you should update your imports."
msgstr ""
"Функция ``django.contrib.auth.models.check_password`` перемещена в модуль :"
"mod:`django.contrib.auth.hashers`. Старый импорт всё ещё работает, но "
"рекомендуется его обновить."

# af128f3506364c9f9441c169964e3065
#: ../../releases/1.4.txt:583
msgid ""
"The :djadmin:`collectstatic` management command now has a ``--clear`` option "
"to delete all files at the destination before copying or linking the static "
"files."
msgstr ""
"Команда :djadmin:`collectstatic` обзавелась опцией ``--clear``, при указании "
"которой перед копированием все старые файлы будут удалены."

# 9bd925a95da94cc987673d188e617e50
#: ../../releases/1.4.txt:587
msgid ""
"It's now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""
"Стало возможным использовать для MySQL/InnoDB фикстуры со сложными "
"зависимостями."

# b3f297b0142541818619925fc3cae768
#: ../../releases/1.4.txt:590
msgid ""
"A new 403 response handler has been added as ``'django.views.defaults."
"permission_denied'``. You can set your own handler by setting the value of :"
"data:`django.conf.urls.handler403`. See the documentation about :ref:`the "
"403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""
"Новый обработчик ошибки 403 добавлен как ``'django.views.defaults."
"permission_denied'``. Вы можете указать свой обработчик в :data:`django.conf."
"urls.handler403`. Подробнее можно посмотреть в документации по :ref:`the 403 "
"(HTTP Forbidden) view<http_forbidden_view>`."

# 525351aa0b6c423da0d285d4ccba870b
#: ../../releases/1.4.txt:596
msgid ""
"The :djadmin:`makemessages` command uses a new and more accurate lexer, "
"`JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""
"Команда :djadmin:`makemessages` использует новый более точный лексер "
"`JsLex`_ для получения строк для локализации из файлов JavaScript."

# b4585e255a83480a83ebc782ea804a5b
#: ../../releases/1.4.txt:601
msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""
"Тег шаблонизатора :ttag:`trans` теперь принимает опциональный аргумент "
"``as``, чтобы получить строку перевода без её отображения, а вместо этого "
"настроить какую-либо контекстную переменную."

# 912218df596f4a88812e3a464bfe3555
#: ../../releases/1.4.txt:605
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr "Тег шаблонизатора :ttag:`if` теперь поддерживает ``{% elif %}``."

# a1218aff09694c3a9beeb50a9f029079
#: ../../releases/1.4.txt:607
msgid ""
"If your Django app is behind a proxy, you might find the new :setting:"
"`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of your "
"proxy \"eating\" the fact that a request came in via HTTPS. But only use "
"this setting if you know what you're doing."
msgstr ""
"Если вы используете Django за прокси, то вам может пригодиться новая "
"настройка :setting:`SECURE_PROXY_SSL_HEADER`. Она решает проблему, когда "
"прокси отбрасывает тот факт, что запрос пришёл через HTTPS. Используёте её "
"только когда точно понимаете, что вы делаете."

# d7c3dbfff0f54393a2468984ee1c73ff
#: ../../releases/1.4.txt:612
msgid ""
"A new, plain-text, version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code. (:meth:"
"`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""
"Новая, текстовая, версия HTTP ошибки 500, которая показывается при :setting:"
"`DEBUG` равным ``True``, теперь отсылает код JavaScript, в том случае, если "
"Django узнает, что ошибка произошла в AJAX-запросе (метод :meth:`~django."
"http.HttpRequest.is_ajax`)."

# 48cc47e2ad1042039f96549292c0abf4
#: ../../releases/1.4.txt:617
msgid ""
"Like its HTML counterpart, it contains a collection of different pieces of "
"information about the state of the application."
msgstr ""
"Как и в случае HTML, там будет содержаться ряд полезной информации о "
"состоянии приложения."

# cb68eedd1c7043638abbbe4931af1cc2
#: ../../releases/1.4.txt:620
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side JavaScript."
msgstr ""
"Это должно помочь при отладке взаимодействия клиентского JavaScript и "
"серверной части."

#: ../../releases/1.4.txt:623
msgid "Added the :option:`makemessages --no-location` option."
msgstr ""

# 8e1266400a65415d99d3b51ceba865a8
#: ../../releases/1.4.txt:625
msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""
"Вместо бэкенда кэша ``locmem`` следует использовать ``pickle."
"HIGHEST_PROTOCOL`` для лучшей совместимости с остальными кэширующими "
"бэкендами."

# cd1e90ffb70c4d72825303bc9c0e5a07
#: ../../releases/1.4.txt:629
msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr "В ORM добавлена поддержка ``DISTINCT ON`` для запросов ``SELECT``."

# 3e83df77fa8b45a88f1548dca50817b0
#: ../../releases/1.4.txt:632
msgid ""
"The ``distinct()`` ``QuerySet`` method now accepts an optional list of model "
"field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. This is only supported in PostgreSQL."
msgstr ""
"Метод ``distinct()`` у ``QuerySet`` теперь может опционально принимать "
"список полей модели. Если он указан, то выражение ``DISTINCT`` действует "
"только на эти поля. Поддерживается пока только в PostgreSQL."

# fceb014f54c747dba8ee8c8105cc75cd
#: ../../releases/1.4.txt:636
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.distinct`."
msgstr ""
"Подробнее в документации :meth:`~django.db.models.query.QuerySet.distinct`."

# af7c1bb0596d4166ab731276328f72e0
#: ../../releases/1.4.txt:639
msgid ""
"The admin login page will add a password reset link if you include a URL "
"with the name `'admin_password_reset'` in your urls.py, so plugging in the "
"built-in password reset mechanism and making it available is now much "
"easier. For details, see :ref:`auth_password_reset`."
msgstr ""
"В страницу входа в админку добавлена ссылка на восстановление пароля, если в "
"urls.py добавлена `'admin_password_reset'`. Теперь подключить встроенный "
"механизм сброса пароля стало ещё проще. За подробностями обратитесь к :ref:"
"`auth_password_reset`."

# 524263dba04c4018885fca52a452a560
#: ../../releases/1.4.txt:644
msgid ""
"The MySQL database backend can now make use of the savepoint feature "
"implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""
"В поддержку MySQL добавлена функциональность по работе с точками сохранения, "
"которые были реализованы в версии 5.0.3 для движка InnoDB."

# 24b6403c218a47868649453711a0d862
#: ../../releases/1.4.txt:647
msgid ""
"It's now possible to pass initial values to the model forms that are part of "
"both model formsets and inline model formsets as returned from factory "
"functions ``modelformset_factory`` and ``inlineformset_factory`` "
"respectively just like with regular formsets. However, initial values only "
"apply to extra forms, i.e. those which are not bound to an existing model "
"instance."
msgstr ""
"Стало возможным передавать начальные значение в форму модели, которая "
"представляет из себя набор форм, построенных с помощью "
"``modelformset_factory`` или ``inlineformset_factory``. Тем не менее, "
"начальные значения применяются только к дополнительным формам, то есть те, "
"которые не связаны с существующего экземпляра модели."

# adbf969ece544eb5aed7c55ea07b761e
#: ../../releases/1.4.txt:653
msgid ""
"The sitemaps framework can now handle HTTPS links using the new :attr:"
"`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class "
"attribute."
msgstr ""
"В поддержку карты сайта добавлена возможность работы с HTTPS-ссылками, "
"которая реализована с помощью атрибута :attr:`Sitemap.protocol <django."
"contrib.sitemaps.Sitemap.protocol>`."

# cafa89a712e64f40a604728909a02282
#: ../../releases/1.4.txt:657
msgid ""
"A new :class:`django.test.SimpleTestCase` subclass of :class:`unittest."
"TestCase` that's lighter than :class:`django.test.TestCase` and company. It "
"can be useful in tests that don't need to hit a database. See :ref:"
"`testcase_hierarchy_diagram`."
msgstr ""
"Новый класс :class:`django.test.SimpleTestCase`, потомок :class:`unittest."
"TestCase`, который легче, чем :class:`django.test.TestCase` и прочие. Его "
"следует применять, когда не требуется подключение к БД, подробнее в :ref:"
"`testcase_hierarchy_diagram`."

# 232175d6a0784bcdb97ef33e5cce4f5b
#: ../../releases/1.4.txt:666
msgid "Backwards incompatible changes in 1.4"
msgstr "Обратная несовместимость в 1.4"

# d809f7d6abfb4dc79e41d44f22765b9c
#: ../../releases/1.4.txt:669
msgid "SECRET_KEY setting is required"
msgstr "SECRET_KEY теперь обязателен"

# 090c4c4b900c43cfb2b2590595d83c2d
#: ../../releases/1.4.txt:671
msgid ""
"Running Django with an empty or known :setting:`SECRET_KEY` disables many of "
"Django's security protections and can lead to remote-code-execution "
"vulnerabilities. No Django site should ever be run without a :setting:"
"`SECRET_KEY`."
msgstr ""
"Работа сайта с пустой или известной злоумышленнику настройкой :setting:"
"`SECRET_KEY` сразу нивелирует многие средства защиты вплоть до выполнения "
"чужого кода. Ни один сайт на Django не должен запускаться без этой настройки."

# 103effbaec5f4b00a056cd17a169b526
#: ../../releases/1.4.txt:676
msgid ""
"In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will "
"raise a `DeprecationWarning`. In Django 1.5, it will raise an exception and "
"Django will refuse to start. This is slightly accelerated from the usual "
"deprecation path due to the severity of the consequences of running Django "
"with no :setting:`SECRET_KEY`."
msgstr ""
"В Django 1.4 запуск сайта без :setting:`SECRET_KEY` вызовет "
"`DeprecationWarning`. В Django 1.5 будет исключение, что приведёт к отказу "
"выполнения. Этот ускоренный путь устаревания поведения был выбран из-за "
"серьёзности последствий при работе без :setting:`SECRET_KEY`."

# bc37cd16565545f5b68fc16698f35543
#: ../../releases/1.4.txt:683
#, fuzzy
msgid "``django.contrib.admin``"
msgstr "django.contrib.admin"

# b76270264e0a4906a32b47d893c6074b
#: ../../releases/1.4.txt:685
msgid ""
"The included administration app ``django.contrib.admin`` has for a long time "
"shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app ``django.contrib."
"staticfiles`` to handle such files in a generic way and defined conventions "
"for static files included in apps."
msgstr ""
"Включаемое по умолчанию приложение ``django.contrib.admin`` долгое время "
"поставлялось с набором статики: JavaScript, CSS, картинки... В Django 1.3 "
"Добавлено новое приложение ``django.contrib.staticfiles`` для обработки этих "
"файлов в общем виде и определения соглашений для всех включённых приложений."

# 43cd1a7895d34db1ba1c3a10977a6ff0
#: ../../releases/1.4.txt:691
msgid ""
"Starting in Django 1.4, the admin's static files also follow this "
"convention, to make the files easier to deploy. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files live on a Web server. This "
"setting has now been deprecated and replaced by the more general setting :"
"setting:`STATIC_URL`. Django will now expect to find the admin static files "
"under the URL ``<STATIC_URL>/admin/``."
msgstr ""
"Начиная с Django 1.4, файлы статики для админки следуют этому соглашению, "
"что должно упростить развертывание проекта. В предыдущей версии была "
"добавлена настройка ``ADMIN_MEDIA_PREFIX``, которая указывала на "
"местоположение этих файлов. На данный момент она считается устаревшей и "
"заменена на более общую :setting:`STATIC_URL`. Django будет искать файлы для "
"админки по адресу ``<STATIC_URL>/admin/``."

# cad936263e03438e98c7b94b4f0aaf29
#: ../../releases/1.4.txt:699
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/"
"media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` "
"are configured and your Web server serves those files correctly. The "
"development server continues to serve the admin files just like before. Read "
"the :doc:`static files howto </howto/static-files/index>` for more details."
msgstr ""
"Если у вас используется ``ADMIN_MEDIA_PREFIX`` (например, ``/media/``) "
"убедитесь, что настройки :setting:`STATIC_URL` и :setting:`STATIC_ROOT` "
"заданы верно. Встроенный веб-сервер продолжает работать также, как и раньше. "
"Подробности можно подсмотреть здесь :doc:`static files howto </howto/static-"
"files/index>`."

# c6762e3d496d46d58269eecdd4212b73
#: ../../releases/1.4.txt:705
msgid ""
"If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://"
"media.example.com/admin/``), make sure to also set your :setting:"
"`STATIC_URL` setting to the correct URL -- for example, ``http://media."
"example.com/``."
msgstr ""
"Если ``ADMIN_MEDIA_PREFIX`` указывает на какой-либо домен (например, "
"``http://media.example.com/admin/``), убедитесь, что в :setting:`STATIC_URL` "
"правильный путь -- например, ``http://media.example.com/``."

# 96ae8e2e041c4dfc8f77142c8e5e45b8
#: ../../releases/1.4.txt:712
msgid ""
"If you're implicitly relying on the path of the admin static files within "
"Django's source code, you'll need to update that path. The files were moved "
"from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/"
"static/admin/`."
msgstr ""
"Если вы использовали знание внутреннего расположения файлов статики для "
"админки, то вам нужно обновить пути: эти объекты были перемещены из :file:"
"`django/contrib/admin/media/` в :file:`django/contrib/admin/static/admin/`."

# 663c16eeb39e4e1a8aba077c11401b38
#: ../../releases/1.4.txt:718
msgid "Supported browsers for the admin"
msgstr "Поддерживаемые браузеры для админки"

# fde862c4f2b349ddaa93d589278d318d
#: ../../releases/1.4.txt:720
msgid ""
"Django hasn't had a clear policy on which browsers are supported by the "
"admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ "
"browsers should provide a fully-functional admin experience, with the "
"notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""
"Django не следует какой-либо чёткой политике поддержки браузеров в админке. "
"На практике же это сводится к следующему: браузеры из `YUI's A-grade`_ "
"должны поддерживаться полностью, за исключением IE 6, который снят с "
"поддержки."

# 7e489b60d6a2461ba8217244537fdecf
#: ../../releases/1.4.txt:725
msgid ""
"Released over 10 years ago, IE6 imposes many limitations on modern Web "
"development. The practical implications of this policy are that contributors "
"are free to improve the admin without consideration for these limitations."
msgstr ""
"IE 6, выпущенный более 10 лет назад, накладывает значительные ограничения на "
"веб-разработку. Если их отбросить, то развивать Django становится гораздо "
"легче. "

# 4496b333acef40108b71644e29123ca8
#: ../../releases/1.4.txt:729
msgid ""
"Obviously, this new policy **has no impact** on sites you develop using "
"Django. It only applies to the Django admin. Feel free to develop apps "
"compatible with any range of browsers."
msgstr ""
"Эта решение относится только к панели администратора, так что вы можете сами "
"определять какие браузеры должен поддерживать ваш сайт."

# 78f2860b65b84a2d934172f804da2bc8
#: ../../releases/1.4.txt:736
msgid "Removed admin icons"
msgstr "Иконки для админки"

# b8ac4108913247059c2f51085ead2e84
#: ../../releases/1.4.txt:738
msgid ""
"As part of an effort to improve the performance and usability of the admin's "
"change-list sorting interface and :attr:`horizontal <django.contrib.admin."
"ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin."
"ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were "
"removed and grouped into two sprite files."
msgstr ""
"В рамках улучшения быстродействия и юзабилити админки иконки виджетов для "
"фильтров :attr:`horizontal <django.contrib.admin.ModelAdmin."
"filter_horizontal>` и :attr:`vertical <django.contrib.admin.ModelAdmin."
"filter_vertical>` были перемещены и сгруппированы в два файла класса."

# 995019e170ad4514a67dd28023250b70
#: ../../releases/1.4.txt:744
msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""
"А именно: ``selector-add.gif``, ``selector-addall.gif``, ``selector-remove."
"gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` и "
"``selector_stacked-remove.gif`` слиты в ``selector-icons.gif``; ``arrow-up."
"gif`` и ``arrow-down.gif`` в ``sorting-icons.gif``."

# 27d72edc96fc4083b82bc0cc4320e6b3
#: ../../releases/1.4.txt:750
msgid ""
"If you used those icons to customize the admin, then you'll need to replace "
"them with your own icons or get the files from a previous release."
msgstr ""
"Если вы использовали эти файлы для модификации админки, вам нужно заменить "
"их своими или взять из предыдущей версии."

# ad4465c4b1ed4181a57abcabf16a5b5a
#: ../../releases/1.4.txt:754
msgid "CSS class names in admin forms"
msgstr "Имена классов CSS в панели администратора"

# 0412be097ffa47f5add7443ea775aa66
#: ../../releases/1.4.txt:756
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), we "
"added a prefix (\"field-\") to all CSS class names automatically generated "
"from the form field names in the main admin forms, stacked inline forms and "
"tabular inline cells. You'll need to take that prefix into account in your "
"custom style sheets or JavaScript files if you previously used plain field "
"names as selectors for custom styles or JavaScript transformations."
msgstr ""
"Дабы избежать конфликтов с остальными именами классов CSS (например, \"button"
"\"), мы добавили префикс (\"field-\") ко всем иенам классов, которые "
"генерируются автоматически из имён полей формы, встраиваемых форм и ячеек "
"таблиц. Адаптируйте ваши таблицы стилей и JavaScript код для учёта этого "
"факта."

# be26b70f29974b5e91a6efc739ca84d6
#: ../../releases/1.4.txt:764
msgid "Compatibility with old signed data"
msgstr "Совместимость с ранее подписанными данными"

# 17b2f00a622f44848b9dcb56d3aea35f
#: ../../releases/1.4.txt:766
msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""
"В Django 1.3 изменился механизм криптографической подписи данных, который "
"использовался в ряде мест. Для обеспечения совместимости Django 1.3 "
"поддерживал оба метода - и старый, и новый, однако в Django 1.4 обратная "
"совместимость удалена."

# b23a1c4037c348fd8ed83d47a72ae589
#: ../../releases/1.4.txt:770
msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/"
"invalidate certain pieces of data that have been cryptographically signed "
"using an old method. To avoid this, use Django 1.3 first for a period of "
"time to allow the signed data to expire naturally. The affected parts are "
"detailed below, with 1) the consequences of ignoring this advice and 2) the "
"amount of time you need to run Django 1.3 for the data to expire or become "
"irrelevant."
msgstr ""
"Так что, если вы обновляетесь до 1.4 с версии 1.2 или меньшей, вы можете "
"потерять некоторые части данных, которые были подписаны с помощью старого "
"криптографического метода. В данном случае рекомендуется какое-то время "
"использовать Django 1.3, чтобы срок хранения подписанных данных истёк, и они "
"бы шифровались новым алгоритмом. Подверженные этой проблеме данные описаны "
"ниже, где 1) последствия при игнорировании рекомендации 2) время, "
"необходимое для новой подписи данных."

# ac988563a8cd4d73a6a818999b7348ba
#: ../../releases/1.4.txt:777
msgid "``contrib.sessions`` data integrity check"
msgstr "проверка целостности данных в ``contrib.sessions``"

# 5c9d0cf81ae04fd69b2c3a1b796e3efd
#: ../../releases/1.4.txt:779
msgid ""
"Consequences: The user will be logged out, and session data will be lost."
msgstr ""
"Последствия: Пользователь будет разлогинен, и данные сессии потеряются."

# 1b4f5074d32d48f9914be2ca08435f57
#: ../../releases/1.4.txt:781
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr "Срок перевалидации: Определён в :setting:`SESSION_COOKIE_AGE`."

# 67086118aeb04c73abb8e3a5c51815f2
#: ../../releases/1.4.txt:783
msgid "``contrib.auth`` password reset hash"
msgstr "Хеш восстановления пароля в ``contrib.auth``"

# 004fc3d7c19048778a801ccdc4537737
#: ../../releases/1.4.txt:785
msgid ""
"Consequences: Password reset links from before the upgrade will not work."
msgstr ""
"Последствия: Старые ссылки для восстановления пароля перестанут работать."

# a008ec5f10de459d857e8bdfbc6cdebb
#: ../../releases/1.4.txt:787
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""
"Срок перевалидации: Определён в :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."

# 36da8089f6964388be8452f6c7c1f359
#: ../../releases/1.4.txt:789
msgid ""
"Form-related hashes: these have a are much shorter lifetime and are relevant "
"only for the short window where a user might fill in a form generated by the "
"pre-upgrade Django instance and try to submit it to the upgraded Django "
"instance:"
msgstr ""
"Хеши для форм: они имеют очень короткое время жизни. Так что это актуально "
"только когда пользователь заполняет форму, сгенерированную Django до "
"обновления, а отправляет уже в обновлённую версию:"

# 35d58d7978324da2a6d535425fef865e
#: ../../releases/1.4.txt:794
msgid "``contrib.comments`` form security hash"
msgstr "Хеш безопасности ``contrib.comments``"

# bdd13a2645064710a4b916831ca1b93e
#: ../../releases/1.4.txt:796
msgid ""
"Consequences: The user will see the validation error \"Security hash failed."
"\""
msgstr ""
"Последствия: Пользователь увидит ошибку валидации \"Security hash failed.\""

# fe37c182092144d4a082cfaddc15df79
#: ../../releases/1.4.txt:798
msgid ""
"Time period: The amount of time you expect users to take filling out comment "
"forms."
msgstr "Срок перевалидации: Всё время, пока пользователь пишет комментарий."

# e091fa21e16a4933be67f700b59a6fb2
#: ../../releases/1.4.txt:801
msgid "``FormWizard`` security hash"
msgstr "Хеш безопасности ``FormWizard``"

# 8c17744e231b46bfb2fcd14ad96c8998
#: ../../releases/1.4.txt:803
#, fuzzy
msgid ""
"Consequences: The user will see an error about the form having expired and "
"will be sent back to the first page of the wizard, losing the data entered "
"so far."
msgstr ""
"Последствия: Пользователь увидит сообщение об ошибке, в которой сказано, что "
"он будет перенаправлен к первой форме мастера с потерей всех введённых "
"данных."

# f23db05158da45959964c734c9b6ea50
#: ../../releases/1.4.txt:807
msgid ""
"Time period: The amount of time you expect users to take filling out the "
"affected forms."
msgstr "Срок перевалидации: Всё время, пока пользователь заполняет форму."

# 8191ea67b7514c9eb5a52f0cdbda4a00
#: ../../releases/1.4.txt:810
msgid "CSRF check"
msgstr "Проверка CSRF"

# b8852d1d161542308976d9d3944457ac
#: ../../releases/1.4.txt:812
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies "
"only if you're upgrading from 1.1."
msgstr ""
"Замечание: Это актуально для совместимости с Django 1.1 (не Django 1.2), и "
"имеет значение только при обновлении с версии 1.1."

# e5fa0a9ed3e54b1bab0eb8edebebbf26
#: ../../releases/1.4.txt:815
msgid ""
"Consequences: The user will see a 403 error with any CSRF-protected POST "
"form."
msgstr ""
"Последствия: Пользователь увидит ошибку 403 с сообщением о том, что "
"сработала CSRF-защита."

# b83c77bcc5c9471b8b8e26b58a336450
#: ../../releases/1.4.txt:818
msgid ""
"Time period: The amount of time you expect user to take filling out such "
"forms."
msgstr "Срок перевалидации: Всё время, пока пользователь заполняет форму."

# 217e0a357f864af79e10328dd0e80f53
#: ../../releases/1.4.txt:821
msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr "Обновление паролей пользователей через ``contrib.auth``"

# 34aa4e076fb14448bd711071c2f4f6ee
#: ../../releases/1.4.txt:823
msgid ""
"Consequences: Each user's password will be updated to a stronger password "
"hash when it's written to the database in 1.4. This means that if you "
"upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able "
"to read the updated passwords."
msgstr ""
"Последствия: При записи в БД пароль пользователя будет обновлён с помощью "
"нового криптостойкого алгоритма. Так что если вы обновитесь до 1.4, а потом "
"откатитесь на 1.3, некоторые пользователи не смогут войти."

# dbe25eee15b44d4ab8857886b350744c
#: ../../releases/1.4.txt:828
msgid ""
"Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password "
"hashing when you initially upgrade to 1.4. After you confirm your app works "
"well with Django 1.4 and you won't have to roll back to 1.3, enable the new "
"password hashes."
msgstr "Лекарство: Установите :setting:`PASSWORD_HASHERS`"

# 5158c1eaa8f744da9cd5b67e9afb3469
#: ../../releases/1.4.txt:834
#, fuzzy
msgid "``django.contrib.flatpages``"
msgstr "django.contrib.flatpages"

# 5656e44be99747e7870e6c91f8b79832
#: ../../releases/1.4.txt:836
msgid ""
"Starting in 1.4, the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the "
"resulting URL refers to an existing flatpage. For example, requesting ``/"
"notaflatpageoravalidurl`` in a previous version would redirect to ``/"
"notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting "
"``/notaflatpageoravalidurl`` now will immediately raise a 404."
msgstr ""
"Начиная с версии 1.4 класс :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` только добавляет конечный слэш и перенаправляет "
"на получившийся URL, если такая страница есть в приложении. Например, при "
"запросе ``/notaflatpageoravalidurl`` в предыдущей версии шло перенаправление "
"на ``/notaflatpageoravalidurl/``, что порождало исключение, теперь же уже ``/"
"notaflatpageoravalidurl`` будет вызывать ошибку 404."

# e9391e793bb84c98800daef12cecd654
#: ../../releases/1.4.txt:844
msgid ""
"Also, redirects returned by flatpages are now permanent (with 301 status "
"code), to match the behavior of :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""
"К тому же перенаправление таким образом считается перманентным (с кодом 301) "
"в соответствии с поведением класса :class:`~django.middleware.common."
"CommonMiddleware`."

# 25073a1fe4d34700bd5168641096d370
#: ../../releases/1.4.txt:848
msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr "Сериализация :class:`~datetime.datetime` и :class:`~datetime.time`"

# 54d0aaefdb0547be93dcf304295c0f10
#: ../../releases/1.4.txt:850
msgid ""
"As a consequence of time-zone support, and according to the ECMA-262 "
"specification, we made changes to the JSON serializer:"
msgstr ""
"В следствии поддержки часовых поясов и согласно спецификации ECMA-262, мы "
"внесли изменения в сериализатор JSON:"

# 1c2cf0d995644a86953393908167c5d1
#: ../../releases/1.4.txt:853
msgid ""
"It includes the time zone for aware datetime objects. It raises an exception "
"for aware time objects."
msgstr ""
"Для datetime-объектов добавляется временная зона, в случае с time-объектами "
"генерируется исключение."

# 798dbaaacfb14a07959d9d5ee25c63d7
#: ../../releases/1.4.txt:855
msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""
"Для datetime- и time-объектов добавлена поддержка миллисекунд. Немного "
"теряется точность, потому что Python хранит микросекунды (6 знаков), а JSON "
"миллисекунды (3 знака). Однако, это всё равно лучше, чем простое их "
"игнорирование в предыдущих версиях."

# 0fe7957e65be467f99e91985e00a01a7
#: ../../releases/1.4.txt:860
msgid ""
"We changed the XML serializer to use the ISO8601 format for datetimes. The "
"letter ``T`` is used to separate the date part from the time part, instead "
"of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""
"Мы добавили в XML-сериализатор поддержку формата ISO8601 для даты со "
"временем. Для разделения части даты от части времени используется буква "
"``T`` вместо пробела. Информация по временной зоне включает в себя формат "
"``[+-]HH:MM``."

# 5ce54d53c403481da3d38d763481e414
#: ../../releases/1.4.txt:864
msgid ""
"Though the serializers now use these new formats when creating fixtures, "
"they can still load fixtures that use the old format."
msgstr ""
"Хотя сериализаторы теперь используют новые форматы при создании фикстур, они "
"все еще могут загрузить фикстуры, созданные ранее."

# 3de26f3607cc43ae8398a9e36feef4ac
#: ../../releases/1.4.txt:868
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr "Для SQLite ``supports_timezone`` установлен в ``False``"

# e86bc1168c6644d3b0a81e6b9043a692
#: ../../releases/1.4.txt:870
msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""
"Для SQLite поддержка временных зон может быть включена, однако, если вы "
"сохраняете datetime-объект, SQLite представляет его как строку с указанием "
"UTC. При загрузке же из базы эта информация отбрасывается, что может "
"привести к порче данных."

# 42832ce7b127418eb482cec96344e27f
#: ../../releases/1.4.txt:875
msgid ""
"In the context of time-zone support, this flag was changed to ``False``, and "
"datetimes are now stored without time-zone information in SQLite. When :"
"setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""
"В контексте поддержки временных зон этот флаг изменён на ``False``, и дата-"
"время сохраняется без этой информации. Когда настройка :setting:`USE_TZ` "
"установлена в ``False``, при попытке сохранения со сведениями UTC произойдёт "
"исключение."

# 8c36d11e44e740a0906fe0a6a13acf7a
#: ../../releases/1.4.txt:881
msgid "``MySQLdb``-specific exceptions"
msgstr "Специфические исключения ``MySQLdb``"

# f081a3c4a78340ddbbb20bed38ac73b9
#: ../../releases/1.4.txt:883
msgid ""
"The MySQL backend historically has raised ``MySQLdb.OperationalError`` when "
"a query triggered an exception. We've fixed this bug, and we now raise :exc:"
"`django.db.DatabaseError` instead. If you were testing for ``MySQLdb."
"OperationalError``, you'll need to update your ``except`` clauses."
msgstr ""
"Исторически MySQL-бэкенд вызывал ``MySQLdb.OperationalError``, если в "
"запросе происходило исключение. Мы исправили этот баг, теперь вызывается :"
"exc:`django.db.DatabaseError`. Если у вас были завязки на ``MySQLdb."
"OperationalError``, адаптируйте блок ``except``."

# c363950a4ad842188b78f85e055d3cf4
#: ../../releases/1.4.txt:890
msgid "Database connection's thread-locality"
msgstr "Потокобезопасные соединения с БД"

# 4897424098524f4e9f5e58f1795cee76
#: ../../releases/1.4.txt:892
msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used "
"to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are "
"now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the "
"default ``DatabaseWrapper`` object anymore and is now a proxy to access that "
"object's attributes. If you need to access the actual ``DatabaseWrapper`` "
"object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""
"Объекты ``DatabaseWrapper`` (включая соединения типа ``django.db."
"connection`` и ``django.db.connections[\"что_то_там\"]``) потокобезопасны. "
"Сейчас они представляют из себя глобальные объекты, дабы имелся доступ из "
"разных потоков. В то время как собственно объекты соединений глобальны, "
"словарь ``django.db.connections`` остаётся потокобезопасным. Однако, если вы "
"используете ORM или ``DatabaseWrapper.cursor()``, то заметите некоторое "
"изменение в поведении. Теперь ``django.db.connection`` не ссылается напрямую "
"на ``DatabaseWrapper``, а использует прокси для доступа к атрибутам объекта. "
"Если вам всё-таки нужен непосредственно текущий ``DatabaseWrapper``, "
"используйте ``django.db.connections[DEFAULT_DB_ALIAS]``."

# a7d4e2c37e6d4a49a9d9db7629813065
#: ../../releases/1.4.txt:904
msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous "
"behavior by disabling thread-sharing by default, so this does not affect any "
"existing code that purely relies on the ORM or on ``DatabaseWrapper."
"cursor()``."
msgstr ""
"Как часть изменений все основные соединения SQLite теперь могут быть "
"потенциально доступны из других потоков (передав атрибут "
"``check_same_thread=False`` в pysqlite), однако ``DatabaseWrapper`` следует "
"предыдущему поведению, где такой доступ запрещён. Это изменение не затронет "
"тех пользователей, которые работали только с ORM или ``DatabaseWrapper."
"cursor()``."

# 7914e60ebb864727bce1f8f928077b86
#: ../../releases/1.4.txt:910
msgid ""
"Finally, while it's now possible to pass connections between threads, Django "
"doesn't make any effort to synchronize access to the underlying backend. "
"Concurrency behavior is defined by the underlying backend implementation. "
"Check their documentation for details."
msgstr ""
"Наконец, т.к. стало возможным передавать соединения между потоками, Django "
"не предпринимает никаких усилий для организации синхронизации с основным "
"бэкендом. Параллельное поведение определяется базовой реализацией бэкендов. "
"Загляните в документацию для выяснения подробностей."

# e55612e9834c435394a494d59d4e0be3
#: ../../releases/1.4.txt:916
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr "Настройка `COMMENTS_BANNED_USERS_GROUP`"

# eb278d5d1fda4c639359028ed9948baa
#: ../../releases/1.4.txt:918
#, fuzzy
msgid ""
"Django's comments has historically supported excluding the comments of a "
"special user group, but we've never documented the feature properly and "
"didn't enforce the exclusion in other parts of the app such as the template "
"tags. To fix this problem, we removed the code from the feed class."
msgstr ""
"Django :doc:`comments app </ref/contrib/comments/index>` исторически "
"поддерживал исключение комментариев для определённой группы пользователей, "
"однако мы нигде не освещали этот момент и не применяли это исключение в "
"других частях приложения, например, в тегах шаблонов. Для решения проблемы "
"мы просто исключили этот код."

# ba119c8c372443d7874132432ccc1005
#: ../../releases/1.4.txt:924
msgid ""
"If you rely on the feature and want to restore the old behavior, use a "
"custom comment model manager to exclude the user group, like this::"
msgstr ""
"Если вам всё-таки нужно старое поведение, используйте свой менеджер моделей "
"для исключения групп пользователей, например::"

# e0801347d1cf4631a7b947ce30b096e4
#: ../../releases/1.4.txt:939
#, fuzzy
msgid ""
"Save this model manager in your custom comment app (e.g., in "
"``my_comments_app/managers.py``) and add it your custom comment app model::"
msgstr ""
"Сохраните этот менеджер моделей в вашем приложении для комментариев "
"(например, в ``my_comments_app/managers.py``) и добавьте в ваш :ref:`custom "
"comment app model <custom-comment-app-api>`::"

# 5818241dd25042f79d43d6dc14ba99f8
#: ../../releases/1.4.txt:953
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr "Настройки `IGNORABLE_404_STARTS` и `IGNORABLE_404_ENDS`"

# 94dddd0785bb42a9926099fa46121878
#: ../../releases/1.4.txt:955
msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's :doc:"
"`404 error reporting</howto/error-reporting>` by adding prefixes to "
"``IGNORABLE_404_STARTS`` and suffixes to ``IGNORABLE_404_ENDS``."
msgstr ""
"До Django 1.4 было возможным исключить из обработки некоторые URL (:doc:`404 "
"error reporting</howto/error-reporting>`) путём добавления префикса в "
"``IGNORABLE_404_STARTS`` и суффикса в ``IGNORABLE_404_ENDS``."

# dbca0db163d94975811ee783872f81af
#: ../../releases/1.4.txt:959
msgid ""
"In Django 1.4, these two settings are superseded by :setting:"
"`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. "
"Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""
"Теперь же обе эти настройки переместились в :setting:`IGNORABLE_404_URLS`, в "
"котором хранится список скомпилированных регулярных выражений. Django не "
"будет генерировать ошибку 404 для любого из них."

# 31cabf83fed548f0a67a51437210449c
#: ../../releases/1.4.txt:964
msgid ""
"Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""
"Однако, ``IGNORABLE_404_STARTS`` и  ``IGNORABLE_404_ENDS`` имели настройки "
"по умолчанию::"

# 418dde035d6b45f1b00210f5adf68400
#: ../../releases/1.4.txt:970
msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of :"
"setting:`IGNORABLE_404_URLS`, ``IGNORABLE_404_STARTS``, and "
"``IGNORABLE_404_ENDS`` are all now empty."
msgstr ""
"Django не будет определять остались ли у вас всякие ``/cgi-bin/`` или "
"``favicon.ico``.Теперь по умолчанию списки :setting:`IGNORABLE_404_URLS`, "
"``IGNORABLE_404_STARTS`` и ``IGNORABLE_404_ENDS`` пусты."

# bfa4b750faa74d509bb77b8c395ab4f5
#: ../../releases/1.4.txt:975
msgid ""
"If you have customized ``IGNORABLE_404_STARTS`` or ``IGNORABLE_404_ENDS``, "
"or if you want to keep the old default value, you should add the following "
"lines in your settings file::"
msgstr ""
"Если вы настраивали ``IGNORABLE_404_STARTS`` или ``IGNORABLE_404_ENDS``, или "
"если хотите сохранить старое поведение по умолчанию, добавьте в файл "
"настроек следующие строки::"

# ac173b886c954932a0119c4d97fa3339
#: ../../releases/1.4.txt:987
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression, such as periods."
msgstr ""
"Не забудьте экранировать символы, которые имеют специальное значение в "
"регулярных выражениях."

# b2a66d46216f429c8d5f1062994ef656
#: ../../releases/1.4.txt:991
msgid "CSRF protection extended to PUT and DELETE"
msgstr "CSRF-защита распространена на запросы PUT и DELETE"

# 5ba1969ea48e4c0cb47398b01940df58
#: ../../releases/1.4.txt:993
#, fuzzy
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/csrf/>` provided protection "
"only against POST requests. Since use of PUT and DELETE methods in AJAX "
"applications is becoming more common, we now protect all methods not defined "
"as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and TRACE, and "
"we enforce protection on everything else."
msgstr ""
"Изначально Django поддерживал защиту от CSRF только для POST-запросов, как "
"это описано в :doc:`CSRF protection </ref/contrib/csrf/>`. Однако, сейчас "
"стало популярным использовать в AJAX-запросах PUT и DELETE, так что мы "
"решили следовать :rfc:`2616` -- включая GET, HEAD, OPTIONS и TRACE и "
"включить защиту для всех запросов."

# 7688a37b8c454786823ce3668c5abce7
#: ../../releases/1.4.txt:999
msgid ""
"If you're using PUT or DELETE methods in AJAX applications, please see the :"
"ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""
"Если вы используете методы PUT или DELETE в AJAX-приложениях, изучите :ref:"
"`instructions about using AJAX and CSRF <csrf-ajax>`."

# 206bfd556cbd42e79623f1bc7676a057
#: ../../releases/1.4.txt:1003
msgid "Password reset view now accepts ``subject_template_name``"
msgstr "Представление сброса пароля теперь принимает ``subject_template_name``"

# 59d9d3e2a0e1471e876ff49194b6dd74
#: ../../releases/1.4.txt:1005
msgid ""
"The ``password_reset`` view in ``django.contrib.auth`` now accepts a "
"``subject_template_name`` parameter, which is passed to the password save "
"form as a keyword argument. If you are using this view with a custom "
"password reset form, then you will need to ensure your form's ``save()`` "
"method accepts this keyword argument."
msgstr ""
"Представление ``password_reset`` в ``django.contrib.auth`` теперь принимает "
"параметр ``subject_template_name``, который передаёт форму пароля как "
"аргумент. Если вы используете это представление со своей формой сброса "
"пароля, то убедитесь, что метод ``save()`` принимает этот аргумент."

# 9ccbf1d7f8654b9783bc84976c7cb19e
#: ../../releases/1.4.txt:1012
msgid "``django.core.template_loaders``"
msgstr "``django.core.template_loaders``"

# 53a7d24e133b4d4da461a9bd715a49e2
#: ../../releases/1.4.txt:1014
msgid ""
"This was an alias to ``django.template.loader`` since 2005, and we've "
"removed it without emitting a warning due to the length of the deprecation. "
"If your code still referenced this, please use ``django.template.loader`` "
"instead."
msgstr ""
"Начиная с 2005 года это была ссылка на ``django.template.loader``, и теперь "
"мы наконец-то удалили её. Замените в коде ``django.core.template_loaders`` "
"на ``django.template.loader``."

# 1ac8c938ba8c4867bf2af74d3691c4e2
#: ../../releases/1.4.txt:1019
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr "``django.db.models.fields.URLField.verify_exists``"

# 9279585a41d84c829c3ffadee60e3e4c
#: ../../releases/1.4.txt:1021
msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""
"Эта функциональность была удалена в следствии ошибок безопасности и падения "
"производительности. Все вызовы ``verify_exists`` должны быть удалены."

# ee37162292a24c1a8becd8d599d47bd5
#: ../../releases/1.4.txt:1026
msgid "``django.core.files.storage.Storage.open``"
msgstr "``django.core.files.storage.Storage.open``"

# f92b0239370c4d23bbe14ebdcacba44d
#: ../../releases/1.4.txt:1028
msgid ""
"The ``open`` method of the base Storage class used to take an obscure "
"parameter ``mixin`` that allowed you to dynamically change the base classes "
"of the returned file object. This has been removed. In the rare case you "
"relied on the ``mixin`` parameter, you can easily achieve the same by "
"overriding the ``open`` method, like this::"
msgstr ""
"Метод ``open`` базового класса Storage принимал непонятный параметр "
"``mixin``, который позволял динамически менять класс возвращаемого файлового "
"объекта. Теперь он удалён. В тех редких случаях, когда он всё же "
"использовался, вы можете адаптировать код, переопределив метод ``open``::"

# a59398e074e243d586e48843be445078
#: ../../releases/1.4.txt:1052
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr "Десериализатор YAML теперь использует ``yaml.safe_load``"

# fb8331969fb4414888e6ac0f7f1c7cc8
#: ../../releases/1.4.txt:1054
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, the YAML deserializer now "
"uses ``yaml.safe_load`` for additional security."
msgstr ""
"``yaml.load`` может построить любой объект Python, который может выполнить "
"любой код из ненадёжного источника. Это функция не нужна непосредственно "
"десериализатору YAML для Django, которой использует загрузку фикстур только "
"примитивных объектов. Так что для обеспечения безопасности теперь "
"используется ``yaml.safe_load``."

# 46c0daaa142a40ceab17901471dbc4cb
#: ../../releases/1.4.txt:1062
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr "По умолчанию сессионные куки имеют флаг ``httponly``"

# 7a2c065452ec4a3792f1cf61a881c781
#: ../../releases/1.4.txt:1064
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. As a consequence of this change, "
"session cookie data, including sessionid, is no longer accessible from "
"JavaScript in many browsers. For strict backwards compatibility, use "
"``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""
"Сессионные куки теперь идут по умолчанию вместе с атрибутом ``httponly`` для "
"избежания потенциальных XSS атак. Вследствие этого некоторые вещи (например, "
"sessionid) более недоступны для JavaScript для большинства браузеров. Для "
"совместимости вы можете вернуть старое поведение, указав в настройках "
"``SESSION_COOKIE_HTTPONLY = False``."

# 2db6b81951b943e0b2ac76cc7302d75c
#: ../../releases/1.4.txt:1072
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr "Фильтр :tfilter:`urlize` более не экранирует каждый URL"

# 272143b90e82451fbafd216b4b6f46fe
#: ../../releases/1.4.txt:1074
msgid ""
"When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal "
"digits, :tfilter:`urlize` now assumes that the URL is already escaped and "
"doesn't apply URL escaping again. This is wrong for URLs whose unquoted form "
"contains a ``%xx`` sequence, but such URLs are very unlikely to happen in "
"the wild, because they would confuse browsers too."
msgstr ""
"Если URL содержит ``%xx``, где ``xx`` - числа, то :tfilter:`urlize` "
"понимает, что этот URL уже экранирован и не пытается проделать это ещё раз. "
"Такое поведение неверно для URL, которые содержат последовательность ``"
"%xx``, но вряд ли они появятся в реальном окружении, к тому же браузеры не "
"смогут правильно понять куда же им идти."

# 3a3d2f65ab3f4544b946cb808413a2c7
#: ../../releases/1.4.txt:1081
msgid "``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""
"``assertTemplateUsed`` и ``assertTemplateNotUsed`` как менеджеры контекстов"

# 9e39e7c828444775882b3d2aa8a628ac
#: ../../releases/1.4.txt:1083
msgid ""
"It's now possible to check whether a template was used within a block of "
"code with :meth:`~django.test.SimpleTestCase.assertTemplateUsed` and :meth:"
"`~django.test.SimpleTestCase.assertTemplateNotUsed`. And they can be used as "
"a context manager::"
msgstr ""
"Теперь стало возможным проверить используется ли шаблон в блоке кода с "
"помощью методов :meth:`~django.test.SimpleTestCase.assertTemplateUsed` и :"
"meth:`~django.test.SimpleTestCase.assertTemplateNotUsed`. Эти методы можно "
"использовать как менеджеры контекстов::"

# e54ad019c82043cc89adec170eeab5f7
#: ../../releases/1.4.txt:1093
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr "Подробнее здесь :ref:`assertion documentation<assertions>`."

# 5e4fa13e2d5342d4ba6a143b1c85c445
#: ../../releases/1.4.txt:1096
msgid "Database connections after running the test suite"
msgstr "Соединения к БД после запуска тестов"

# 927be06503ab440ba51ea6a7bd435512
#: ../../releases/1.4.txt:1098
msgid ""
"The default test runner no longer restores the database connections after "
"tests' execution. This prevents the production database from being exposed "
"to potential threads that would still be running and attempting to create "
"new connections."
msgstr ""
"Исполнитель тестов более не восстанавливает соединение с БД после выполнения "
"тестов. Это предотвращает боевую базу от потенциального воздействия потоков, "
"которые будут висеть и порождать новые соединения."

# 9b9b0133c132444aa5cfc344e2960efd
#: ../../releases/1.4.txt:1103
msgid ""
"If your code relied on connections to the production database being created "
"after tests' execution, then you can restore the previous behavior by "
"subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()`` "
"method."
msgstr ""
"Если в коде у вас были завязки на это, то вы можете восстановить прежнее "
"поведение перекрыв метод ``teardown_databases()`` у ``DjangoTestRunner``."

# 5e91444f1fdd406f85bbb87e127818a6
#: ../../releases/1.4.txt:1109
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr "Вывод :djadmin:`manage.py help <help>`"

# 2cab76857f46463396b8232629fbd412
#: ../../releases/1.4.txt:1111
msgid ""
":djadmin:`manage.py help <help>` now groups available commands by "
"application. If you depended on the output of this command -- if you parsed "
"it, for example -- then you'll need to update your code. To get a list of "
"all available management commands in a script, use :djadmin:`manage.py help "
"--commands <help>` instead."
msgstr ""
":djadmin:`manage.py help <help>` теперь группирует доступные команды по "
"приложениям. Если вы зависели от этого вывода -- например, парсили его -- "
"адаптируйте свой код. Получить список всех доступных команд можно с помощью :"
"djadmin:`manage.py help --commands <help>`."

# 09ea9968d9934a3d8769054df2ff27fd
#: ../../releases/1.4.txt:1118
msgid "``extends`` template tag"
msgstr "Тег шаблона ``extends``"

# 7e4bac16d15947289e618f7a47c040b2
#: ../../releases/1.4.txt:1120
msgid ""
"Previously, the :ttag:`extends` tag used a buggy method of parsing "
"arguments, which could lead to it erroneously considering an argument as a "
"string literal when it wasn't. It now uses ``parser.compile_filter``, like "
"other tags."
msgstr ""
"Ранее тег :ttag:`extends` использовал примитивный алгоритм разбора "
"аргументов, ошибочно считая строкой то, что по сути не было ею. Теперь же "
"``parser.compile_filter`` работает также, как и остальные теги."

# 8aff2f9cc29a4008a1bba9a54283e1b0
#: ../../releases/1.4.txt:1124
msgid ""
"The internals of the tag aren't part of the official stable API, but in the "
"interests of full disclosure, the ``ExtendsNode.__init__`` definition has "
"changed, which may break any custom tags that use this class."
msgstr ""
"Внутренности этого тега не были частью публичного API, но в интересах "
"реализации ``ExtendsNode.__init__`` изменилось, что может сказаться на "
"совместимости с тегами, основанными на этом классе."

# 36e4b72c60914bd4875cb692ed8210c8
#: ../../releases/1.4.txt:1129
msgid "Loading some incomplete fixtures no longer works"
msgstr "Загрузка неполных фикстур более не поддерживается"

# d473d8169422467aba37a1992e611194
#: ../../releases/1.4.txt:1131
msgid ""
"Prior to 1.4, a default value was inserted for fixture objects that were "
"missing a specific date or datetime value when auto_now or auto_now_add was "
"set for the field. This was something that should not have worked, and in "
"1.4 loading such incomplete fixtures will fail. Because fixtures are a raw "
"import, they should explicitly specify all field values, regardless of field "
"options on the model."
msgstr ""
"До версии 1.4 для полей даты и времени в модели можно было указать значения "
"auto_now и auto_now_add при загрузке фикстур. Это работало не всегда так, "
"как хотелось, и в 1.4 было решено убрать такую возможность, потому что "
"фикстуры загружались в \"сыром\" виде, вне зависимости от опций модели."

# a6f2c6c04b7644429077f08f170c0151
#: ../../releases/1.4.txt:1138
msgid "Development Server Multithreading"
msgstr "Многопоточность встроенного сервера"

# be5caed671514b5b870b8d0e2cc7e414
#: ../../releases/1.4.txt:1140
#, fuzzy
msgid ""
"The development server is now is multithreaded by default. Use the :option:"
"`runserver --nothreading` option to disable the use of threading in the "
"development server::"
msgstr ""
"Встроенный сервер теперь по умолчанию запускается в многопоточном режиме. "
"Для отключения этой функциональности используйте опцию :djadminopt:`--"
"nothreading`::"

# 32aa5ba614d94e76a332a3a2e31316cb
#: ../../releases/1.4.txt:1147
msgid "Attributes disabled in markdown when safe mode set"
msgstr "Отключены атрибуты в разметке при активации безопасного режима"

# befde435a43c4a4c8106bdba2350de63
#: ../../releases/1.4.txt:1149
msgid ""
"Prior to Django 1.4, attributes were included in any markdown output "
"regardless of safe mode setting of the filter. With version > 2.1 of the "
"Python-Markdown library, an enable_attributes option was added. When the "
"safe argument is passed to the markdown filter, both the ``safe_mode=True`` "
"and ``enable_attributes=False`` options are set. If using a version of the "
"Python-Markdown library less than 2.1, a warning is issued that the output "
"is insecure."
msgstr ""
"До Django 1.4 атрибуты были включены в вывод разметки вне зависимости от "
"настроек безопасности фильтра. В версии 2.1 в библиотеку Python-Markdown "
"была добавлена опция enable_attributes. При установке ``safe_mode=True`` и "
"``enable_attributes=False`` в фильтр будут передаваться безопасные "
"аргументы. Использование версии Python-Markdown < 2.1, приведёт к "
"предупреждению безопасности."

# 2af9af2536ea4b8a8f51a7db1401b8f7
#: ../../releases/1.4.txt:1158
msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr "get_initial у FormMixin возвращает изначальный словарь"

# cdb672dad3d74279ae04a8c41aca4281
#: ../../releases/1.4.txt:1160
msgid ""
"In Django 1.3, the ``get_initial`` method of the :class:`django.views."
"generic.edit.FormMixin` class was returning the class ``initial`` "
"dictionary. This has been fixed to return a copy of this dictionary, so form "
"instances can modify their initial data without messing with the class "
"variable."
msgstr ""
"В Django 1.3 метод ``get_initial`` класса :class:`django.views.generic.edit."
"FormMixin` возвращал класс ``initial`` словаря. Мы решили возвращать копию "
"словаря, так как экземпляры форм могли модифицировать исходные данные без "
"изменения переменной класса."

# 58dfc36926c24ae0a7a8b596843d9dc0
#: ../../releases/1.4.txt:1169
msgid "Features deprecated in 1.4"
msgstr "Устаревшая функциональность в 1.4"

# 03b77c47f7124ae9b8f300dec2549593
#: ../../releases/1.4.txt:1172
msgid "Old styles of calling ``cache_page`` decorator"
msgstr "Старый стиль вызова декоратора ``cache_page``"

# e955bb836c6c488ea0246d9ca25a8eaf
#: ../../releases/1.4.txt:1174
msgid ""
"Some legacy ways of calling :func:`~django.views.decorators.cache."
"cache_page` have been deprecated. Please see the documentation for the "
"correct way to use this decorator."
msgstr ""
"Некоторые вызовы :func:`~django.views.decorators.cache.cache_page` стали "
"устаревшими. Обратитесь к документации для правильного использования этого "
"декоратора."

# 2226077cb7604ae5b453cab2bb82e5fc
#: ../../releases/1.4.txt:1179
msgid "Support for PostgreSQL versions older than 8.2"
msgstr "Поддержка версий PostgreSQL меньше 8.2"

# e381ae287ae64ea0b2108fc3cf14301e
#: ../../releases/1.4.txt:1181
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we "
"suggested using a more recent version because of performance improvements "
"and, more importantly, the end of upstream support periods for 8.0 and 8.1 "
"was near (November 2010)."
msgstr ""
"Django 1.3 не работает с PostgreSQL младше 8.0, и мы настоятельно "
"рекомендуем использовать более новые версии, тем более что срок окончания "
"поддержки 8.0 и 8.1 уже близок (ноябрь 2010)."

# 5162e64ad3ce411a891987a6c2169130
#: ../../releases/1.4.txt:1186
msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""
"В Django 1.4 мы учли это и сделали версию 8.2 минимально поддерживаемой."

# ade15759574d491caf744d13bb9eb836
#: ../../releases/1.4.txt:1190
msgid "Request exceptions are now always logged"
msgstr "Исключения в запросе теперь всегда логгируются"

# 1dc8a99510ff46859b3fdbef6637a01c
#: ../../releases/1.4.txt:1192
msgid ""
"When we added :doc:`logging support </topics/logging/>` in Django in 1.3, "
"the admin error email support was moved into the :class:`django.utils.log."
"AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to "
"maintain the established behavior of error emails, the ``'django.request'`` "
"logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""
"После того как мы добавили :doc:`logging support </topics/logging/>` в "
"Django 1.3, оповещение администратора по email было перемещено в класс :"
"class:`django.utils.log.AdminEmailHandler`, который прикреплялся к логгеру "
"``django.request``. В целях совместимости с предыдущим поведением логгер "
"``django.request`` будет вызван только если :setting:`DEBUG` установлен в "
"``False``."

# b524c311649945ce83d8f73680e3cc8f
#: ../../releases/1.4.txt:1199
msgid ""
"To increase the flexibility of error logging for requests, the ``'django."
"request'`` logger is now called regardless of the value of :setting:`DEBUG`, "
"and the default settings file for new projects now includes a separate "
"filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent "
"admin error emails in ``DEBUG`` mode::"
msgstr ""
"Для увеличения гибкости регистрации ошибок запросов логгер ``'django."
"request'`` сейчас вызывается независимо от значения :setting:`DEBUG`, однако "
"в новом проекте по умолчанию добавлен фильтр в :class:`django.utils.log."
"AdminEmailHandler` для предотвращения отправки сообщений об ошибках в режиме "
"разработки::"

# b71fa860873549c68e48082711858d0b
#: ../../releases/1.4.txt:1218
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""
"Если вы адаптируете уже существующий проект, то в настройке :setting:"
"`LOGGING` этого фильтра нет. Для обратной совместимости Django определит, "
"что у вашего обработчика ``'mail_admins'`` нет раздела ``'filters'`` и "
"автоматически добавит его. В Django 1.5 мы будем выводить предупреждение, а "
"в версии 1.6 эта совместимость будет удалена."

# dcd09968b8cb46988bd309ae9379b8de
#: ../../releases/1.4.txt:1226
msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""
"Добавление ключа ``'filters'`` в обработчик ``'mail_admins'`` рушит обратную "
"совместимость."

# 11ee8f17f37148edb863fee08003635a
#: ../../releases/1.4.txt:1230
msgid "``django.conf.urls.defaults``"
msgstr "``django.conf.urls.defaults``"

# beaf543a468048d78763a8bb45d0d0dc
#: ../../releases/1.4.txt:1232
#, fuzzy
msgid ""
"Until Django 1.3, the ``include()``, ``patterns()``, and ``url()`` "
"functions, plus :data:`~django.conf.urls.handler404` and :data:`~django.conf."
"urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""
"Вплоть до Django 1.3 функции :func:`~django.conf.urls.include`, :func:"
"`~django.conf.urls.patterns` и :func:`~django.conf.urls.url`, а также :data:"
"`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` "
"располагались в модуле ``django.conf.urls.defaults``."

# 8a940db105f141a6aa32c9ca2513d64e
#: ../../releases/1.4.txt:1236
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr "В Django 1.4 они перемещены в модуль :mod:`django.conf.urls`."

# 9551825b51f8407ab338052d5f31ee93
#: ../../releases/1.4.txt:1239
msgid "``django.contrib.databrowse``"
msgstr "``django.contrib.databrowse``"

# 971bda03a33f41768504f0199a558805
#: ../../releases/1.4.txt:1241
msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_ "
"to integrate the functionality of databrowse into the admin, but no progress "
"was made. While Databrowse has been deprecated, an enhancement of ``django."
"contrib.admin`` providing a similar feature set is still possible."
msgstr ""
"Просмотрщик данных долгое время не развивался, и по сей день не было новых "
"коммитов. Было предложено `GSOC project`_ интегрировать в панель "
"администратора, но никакого прогресса не видно. В то время как Databrowse "
"стал устаревшим, некоторая его функциональность переместилась в ``django."
"contrib.admin``."

# 44106d42e1b44f208c9eb3ef5d380b57
#: ../../releases/1.4.txt:1249
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, so it's available to be adopted by an individual or group as a third-"
"party project."
msgstr ""
"Лицензия на Databrowse совпадает с лицензией Django, так что любой желающий "
"может доработать его для себя."

# 7d57fc797f3d4426bda0074c8872e77f
#: ../../releases/1.4.txt:1254
msgid "``django.core.management.setup_environ``"
msgstr "``django.core.management.setup_environ``"

# 602deff0007b43509fa2607b057552e7
#: ../../releases/1.4.txt:1256
msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""
"Эта функция временно модифицирует ``sys.path``, делая возможным импорт "
"каталога проекта для старой структуры проекта, создаваемой :djadmin:"
"`startproject`. Эта функция более не нужна с новым ``manage.py`` и "
"структурой проекта."

# 77d757af4e9e4ee0b9e5f7271ff3bbe2
#: ../../releases/1.4.txt:1261
msgid ""
"This function was never documented or part of the public API, but it was "
"widely recommended for use in setting up a \"Django environment\" for a user "
"script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf."
"settings.configure`."
msgstr ""
"Эта функция никогда не документировалась в API, но рекомендовалась для "
"настройки окружения Django для пользовательских скриптов. Вместо неё следует "
"использовать функцию :func:`django.conf.settings.configure` или переменную "
"окружения ``DJANGO_SETTINGS_MODULE``."

# 95dddbda9f084d069107c81d84e1db4a
#: ../../releases/1.4.txt:1267
msgid "``django.core.management.execute_manager``"
msgstr "``django.core.management.execute_manager``"

# b1dbb5d7187c45968e26c3a66f18e3d3
#: ../../releases/1.4.txt:1269
msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to ``django.core.management."
"execute_from_command_line``, except that it first calls ``setup_environ``, "
"which is now deprecated. As such, ``execute_manager`` is also deprecated; "
"``execute_from_command_line`` can be used instead. Neither of these "
"functions is documented as part of the public API, but a deprecation path is "
"needed due to use in existing ``manage.py`` files."
msgstr ""
"Эта функция ранее использовалась ``manage.py`` для выполнения команд "
"приложения.Она идентична ``django.core.management."
"execute_from_command_line`` за исключением первого вызова ``setup_environ``. "
"Так что теперь объявлена устаревшей, вместо неё следует использовать "
"``execute_from_command_line``. Ни одна из этих функций не документирована в "
"рамках API, но объявить устаревшей ``django.core.management."
"execute_manager`` всё-таки нужно для дальнейшего использования ``manage.py``."

# 742089c2ff124ee7b217ad50215ee3aa
#: ../../releases/1.4.txt:1278
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr "Атрибуты фильтров в шаблонах ``needs_autoescape`` и ``is_safe``"

# bbf07b4b08c843169eb67be0e7bf3467
#: ../../releases/1.4.txt:1280
msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""
"Два флага (``is_safe`` и ``needs_autoescape``) определяют как каждый фильтр "
"шаблона взаимодействует с автоэкранированием Django. Раньше они были "
"атрибутами функции::"

# 56cd1c2855f04675a0ce2603d7c77d78
#: ../../releases/1.4.txt:1289
msgid ""
"However, this technique caused some problems in combination with decorators, "
"especially :func:`@stringfilter <django.template.defaultfilters."
"stringfilter>`. Now, the flags are keyword arguments of :meth:`@register."
"filter <django.template.Library.filter>`::"
msgstr ""
"Однако, это вызывало проблемы при комбинировании декораторов, особенно :func:"
"`@stringfilter <django.template.defaultfilters.stringfilter>`. Теперь же "
"флаги являются аргументами :meth:`@register.filter <django.template.Library."
"filter>`::"

# fd56913642904e8aa4a212fa14f130c2
#: ../../releases/1.4.txt:1298
msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""
"Подробнее в документации :ref:`filters and auto-escaping <filters-auto-"
"escaping>`."

# 30d92b78c8de4f339fcde03d20fbe72a
#: ../../releases/1.4.txt:1301
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr "Раскрытие шаблонов имен приложений в `INSTALLED_APPS`"

# fb2e2213750340678f2d152398283ef1
#: ../../releases/1.4.txt:1303
#, fuzzy
msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by "
"a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, this can't be done reliably."
msgstr ""
"До Django 1.3 :setting:`INSTALLED_APPS` позволяло использовать маску в "
"именах приложения, например, ``django.contrib.*``. Расшифровка была возможна "
"за счёт реализации ``from <package> import *``, основанной на структуре "
"файлов. К сожалению, `this can't be done reliably`_."

# cd6599f68e074d7fb6a2722fc6db8760
#: ../../releases/1.4.txt:1308
#, fuzzy
msgid ""
"This behavior was never documented. Since it is unpythonic and not obviously "
"useful, it was removed in Django 1.4. If you relied on it, you must edit "
"your settings file to list all your applications explicitly."
msgstr ""
"Такое поведение нигде не документировано, более того - противоречит дзену "
"Python, так что оно было удалено в Django 1.4. Если вы полагались на него, "
"то нужно отредактировать файл настроек, чтобы получить список всех "
"приложений в явном виде."

# 73c27a1973c94236a1e303efe801ea02
#: ../../releases/1.4.txt:1313
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr "``HttpRequest.raw_post_data`` переименован в ``HttpRequest.body``"

# e2a4fb563f3c458ca1a1df665f9ad2d4
#: ../../releases/1.4.txt:1315
msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""
"Этот атрибут назывался ``HttpRequest.raw_post_data``, но на самом деле "
"представлял собой тело HTTP запроса. Теперь он объявлен устаревшим, а вместо "
"него следует использовать ``HttpRequest.body``."

# 7087d4ec49f84c2f8c714411f1cf7381
#: ../../releases/1.4.txt:1320
msgid ""
"``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""
"Исправлена потенциальная ошибка производительности в ``django.contrib."
"sitemaps``"

# ac84afbe203a4d3aa14efbd766544205
#: ../../releases/1.4.txt:1322
msgid ""
"In previous versions, ``Paginator`` objects used in sitemap classes were "
"cached, which could result in stale site maps. We've removed the caching, so "
"each request to a site map now creates a new Paginator object and calls the :"
"attr:`~django.contrib.sitemaps.Sitemap.items()` method of the :class:"
"`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your "
"``items()`` method is doing, this may have a negative performance impact. To "
"mitigate the performance impact, consider using the :doc:`caching framework "
"</topics/cache>` within your ``Sitemap`` subclass."
msgstr ""
"В предыдущих версиях объекты ``Paginator`` кэшировали карту сайта, что могло "
"сказаться на актуальности. Мы избавились от этого, так что при каждом "
"запросе к sitemap создаётся новый объект ``Paginator`` и вызывается метод :"
"attr:`~django.contrib.sitemaps.Sitemap.items()` класса :class:`~django."
"contrib.sitemaps.Sitemap`. В зависимости от того, что ваш метод ``items()`` "
"делает, это может сказаться на производительности. Для смягчения последствий "
"рассмотрите возможность использования :doc:`caching framework </topics/"
"cache>` в ваших подклассах ``Sitemap``."

# 06fec52368c3453aa647f8a23275fe06
#: ../../releases/1.4.txt:1332
msgid "Versions of Python-Markdown earlier than 2.1"
msgstr "Версии Python-Markdown меньшие 2.1"

# 78ea8b6d4f6543a1a1e13493ea369e4b
#: ../../releases/1.4.txt:1334
msgid ""
"Versions of Python-Markdown earlier than 2.1 do not support the option to "
"disable attributes. As a security issue, earlier versions of this library "
"will not be supported by the markup contrib app in 1.5 under an accelerated "
"deprecation timeline."
msgstr ""
"Версии Python-Markdown меньшие, чем 2,1 не поддерживают возможность "
"отключения атрибутов. В целях безопасности старые версии этой библиотеки не "
"будут поддерживаться для разметки в 1.5 и подлежат скорейшему отключению."

# 2579c3abc215444a80cd0e87da81f3c2
#~ msgid ""
#~ "Added the :djadminopt:`--no-location` option to the :djadmin:"
#~ "`makemessages` command."
#~ msgstr ""
#~ "Добавление опции :djadminopt:`--no-location` в команду :djadmin:"
#~ "`makemessages`"

# 4ea104ece16c497895a5c47b7266adfa
#~ msgid ""
#~ "See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for "
#~ "more information."
#~ msgstr ""
#~ "Подробнее можно посмотреть здесь :doc:`form wizard </ref/contrib/"
#~ "formtools/form-wizard>`."

# 98ab06cf54e04814a738eb86f8e9ad4d
#~ msgid ""
#~ "For more details, see the documentation about :doc:`customizing the "
#~ "comments framework </ref/contrib/comments/custom>`."
#~ msgstr ""
#~ "Подробнее можно найти в документации по :doc:`customizing the comments "
#~ "framework </ref/contrib/comments/custom>`."
