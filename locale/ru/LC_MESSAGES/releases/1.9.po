# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2015-11-17 10:48+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../releases/1.9.txt:3
msgid "Django 1.9 release notes"
msgstr ""

#: ../../releases/1.9.txt:5
msgid "*December 1, 2015*"
msgstr ""

#: ../../releases/1.9.txt:7
msgid "Welcome to Django 1.9!"
msgstr ""

#: ../../releases/1.9.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.9>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.9>` "
"you'll want to be aware of when upgrading from Django 1.8 or older versions. "
"We've :ref:`dropped some features<removed-features-1.9>` that have reached "
"the end of their deprecation cycle, and we've :ref:`begun the deprecation "
"process for some features <deprecated-features-1.9>`."
msgstr ""

#: ../../releases/1.9.txt:16
msgid ""
"See the :doc:`/howto/upgrade-version` guide if you're updating an existing "
"project."
msgstr ""

#: ../../releases/1.9.txt:20
msgid "Python compatibility"
msgstr ""

#: ../../releases/1.9.txt:22
msgid ""
"Django 1.9 requires Python 2.7, 3.4, or 3.5. We **highly recommend** and "
"only officially support the latest release of each series."
msgstr ""

#: ../../releases/1.9.txt:25
msgid "The Django 1.8 series is the last to support Python 3.2 and 3.3."
msgstr ""

#: ../../releases/1.9.txt:30
msgid "What's new in Django 1.9"
msgstr ""

#: ../../releases/1.9.txt:33
msgid "Performing actions after a transaction commit"
msgstr ""

#: ../../releases/1.9.txt:35
msgid ""
"The new :func:`~django.db.transaction.on_commit` hook allows performing "
"actions after a database transaction is successfully committed. This is "
"useful for tasks such as sending notification emails, creating queued tasks, "
"or invalidating caches."
msgstr ""

#: ../../releases/1.9.txt:40
msgid ""
"This functionality from the `django-transaction-hooks`_ package has been "
"integrated into Django."
msgstr ""

#: ../../releases/1.9.txt:46
msgid "Password validation"
msgstr ""

#: ../../releases/1.9.txt:48
msgid ""
"Django now offers password validation to help prevent the usage of weak "
"passwords by users. The validation is integrated in the included password "
"change and reset forms and is simple to integrate in any other code. "
"Validation is performed by one or more validators, configured in the new :"
"setting:`AUTH_PASSWORD_VALIDATORS` setting."
msgstr ""

#: ../../releases/1.9.txt:54
msgid ""
"Four validators are included in Django, which can enforce a minimum length, "
"compare the password to the user's attributes like their name, ensure "
"passwords aren't entirely numeric, or check against an included list of "
"common passwords. You can combine multiple validators, and some validators "
"have custom configuration options. For example, you can choose to provide a "
"custom list of common passwords. Each validator provides a help text to "
"explain its requirements to the user."
msgstr ""

#: ../../releases/1.9.txt:62
msgid ""
"By default, no validation is performed and all passwords are accepted, so if "
"you don't set :setting:`AUTH_PASSWORD_VALIDATORS`, you will not see any "
"change. In new projects created with the default :djadmin:`startproject` "
"template, a simple set of validators is enabled. To enable basic validation "
"in the included auth forms for your project, you could set, for example::"
msgstr ""

#: ../../releases/1.9.txt:83
msgid "See :ref:`password-validation` for more details."
msgstr ""

#: ../../releases/1.9.txt:86
msgid "Permission mixins for class-based views"
msgstr ""

#: ../../releases/1.9.txt:88
msgid ""
"Django now ships with the mixins :class:`~django.contrib.auth.mixins."
"AccessMixin`, :class:`~django.contrib.auth.mixins.LoginRequiredMixin`, :"
"class:`~django.contrib.auth.mixins.PermissionRequiredMixin`, and :class:"
"`~django.contrib.auth.mixins.UserPassesTestMixin` to provide the "
"functionality of the ``django.contrib.auth.decorators`` for class-based "
"views. These mixins have been taken from, or are at least inspired by, the "
"`django-braces`_ project."
msgstr ""

#: ../../releases/1.9.txt:97
msgid ""
"There are a few differences between Django's and ``django-braces``\\' "
"implementation, though:"
msgstr ""

#: ../../releases/1.9.txt:100
msgid ""
"The :attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` "
"attribute can only be ``True`` or ``False``. Custom exceptions or callables "
"are not supported."
msgstr ""

#: ../../releases/1.9.txt:104
msgid ""
"The :meth:`~django.contrib.auth.mixins.AccessMixin.handle_no_permission` "
"method does not take a ``request`` argument. The current request is "
"available in ``self.request``."
msgstr ""

#: ../../releases/1.9.txt:108
msgid ""
"The custom ``test_func()`` of :class:`~django.contrib.auth.mixins."
"UserPassesTestMixin` does not take a ``user`` argument. The current user is "
"available in ``self.request.user``."
msgstr ""

#: ../../releases/1.9.txt:112
msgid ""
"The :attr:`permission_required <django.contrib.auth.mixins."
"PermissionRequiredMixin>` attribute supports a string (defining one "
"permission) or a list/tuple of strings (defining multiple permissions) that "
"need to be fulfilled to grant access."
msgstr ""

#: ../../releases/1.9.txt:117
msgid ""
"The new :attr:`~django.contrib.auth.mixins.AccessMixin."
"permission_denied_message` attribute allows passing a message to the "
"``PermissionDenied`` exception."
msgstr ""

#: ../../releases/1.9.txt:123
msgid "New styling for ``contrib.admin``"
msgstr ""

#: ../../releases/1.9.txt:125
msgid ""
"The admin sports a modern, flat design with new SVG icons which look perfect "
"on HiDPI screens. It still provides a fully-functional experience to `YUI's "
"A-grade`_ browsers. Older browser may experience varying levels of graceful "
"degradation."
msgstr ""

#: ../../releases/1.9.txt:133
msgid "Running tests in parallel"
msgstr ""

#: ../../releases/1.9.txt:135
msgid ""
"The :djadmin:`test` command now supports a :option:`--parallel <test --"
"parallel>` option to run a project's tests in multiple processes in parallel."
msgstr ""

#: ../../releases/1.9.txt:138
msgid ""
"Each process gets its own database. You must ensure that different test "
"cases don't access the same resources. For instance, test cases that touch "
"the filesystem should create a temporary directory for their own use."
msgstr ""

#: ../../releases/1.9.txt:142
msgid "This option is enabled by default for Django's own test suite provided:"
msgstr ""

#: ../../releases/1.9.txt:144
msgid "the OS supports it (all but Windows)"
msgstr ""

#: ../../releases/1.9.txt:145
msgid "the database backend supports it (all the built-in backends but Oracle)"
msgstr ""

#: ../../releases/1.9.txt:148
msgid "Minor features"
msgstr ""

#: ../../releases/1.9.txt:151
msgid ":mod:`django.contrib.admin`"
msgstr ""

#: ../../releases/1.9.txt:153
msgid "Admin views now have ``model_admin`` or ``admin_site`` attributes."
msgstr ""

#: ../../releases/1.9.txt:155
msgid ""
"The URL of the admin change view has been changed (was at ``/admin/<app>/"
"<model>/<pk>/`` by default and is now at ``/admin/<app>/<model>/<pk>/change/"
"``). This should not affect your application unless you have hardcoded admin "
"URLs. In that case, replace those links by :ref:`reversing admin URLs <admin-"
"reverse-urls>` instead. Note that the old URL still redirects to the new one "
"for backwards compatibility, but it may be removed in a future version."
msgstr ""

#: ../../releases/1.9.txt:163
msgid ""
":meth:`ModelAdmin.get_list_select_related() <django.contrib.admin.ModelAdmin."
"get_list_select_related>` was added to allow changing the "
"``select_related()`` values used in the admin's changelist query based on "
"the request."
msgstr ""

#: ../../releases/1.9.txt:168
msgid ""
"The ``available_apps`` context variable, which lists the available "
"applications for the current user, has been added to the :meth:`AdminSite."
"each_context() <django.contrib.admin.AdminSite.each_context>` method."
msgstr ""

#: ../../releases/1.9.txt:173
msgid ""
":attr:`AdminSite.empty_value_display <django.contrib.admin.AdminSite."
"empty_value_display>` and :attr:`ModelAdmin.empty_value_display <django."
"contrib.admin.ModelAdmin.empty_value_display>` were added to override the "
"display of empty values in admin change list. You can also customize the "
"value for each field."
msgstr ""

#: ../../releases/1.9.txt:180
msgid ""
"Added jQuery events :ref:`when an inline form is added or removed <admin-"
"javascript-inline-form-events>` on the change form page."
msgstr ""

#: ../../releases/1.9.txt:183
msgid ""
"The time picker widget includes a '6 p.m' option for consistency of having "
"predefined options every 6 hours."
msgstr ""

#: ../../releases/1.9.txt:186
msgid "JavaScript slug generation now supports Romanian characters."
msgstr ""

#: ../../releases/1.9.txt:189
msgid ":mod:`django.contrib.admindocs`"
msgstr ""

#: ../../releases/1.9.txt:191
msgid ""
"The model section of the ``admindocs`` now also describes methods that take "
"arguments, rather than ignoring them."
msgstr ""

#: ../../releases/1.9.txt:195
msgid ":mod:`django.contrib.auth`"
msgstr ""

#: ../../releases/1.9.txt:197
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 20%. This backwards compatible change will not affect users who "
"have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""

#: ../../releases/1.9.txt:202
msgid ""
"The ``BCryptSHA256PasswordHasher`` will now update passwords if its "
"``rounds`` attribute is changed."
msgstr ""

#: ../../releases/1.9.txt:205
msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` were moved to a new ``django."
"contrib.auth.base_user`` module so that they can be imported without "
"including ``django.contrib.auth`` in :setting:`INSTALLED_APPS` (doing so "
"raised a deprecation warning in older versions and is no longer supported in "
"Django 1.9)."
msgstr ""

#: ../../releases/1.9.txt:211
msgid ""
"The permission argument of :func:`~django.contrib.auth.decorators."
"permission_required()` accepts all kinds of iterables, not only list and "
"tuples."
msgstr ""

#: ../../releases/1.9.txt:215
msgid ""
"The new :class:`~django.contrib.auth.middleware."
"PersistentRemoteUserMiddleware` makes it possible to use ``REMOTE_USER`` for "
"setups where the header is only populated on login pages instead of every "
"request in the session."
msgstr ""

#: ../../releases/1.9.txt:219
msgid ""
"The :func:`~django.contrib.auth.views.password_reset` view accepts an "
"``extra_email_context`` parameter."
msgstr ""

#: ../../releases/1.9.txt:223
msgid ":mod:`django.contrib.contenttypes`"
msgstr ""

#: ../../releases/1.9.txt:225
msgid ""
"It's now possible to use :attr:`~django.db.models.Options."
"order_with_respect_to` with a ``GenericForeignKey``."
msgstr ""

#: ../../releases/1.9.txt:230
msgid ":mod:`django.contrib.gis`"
msgstr ""

#: ../../releases/1.9.txt:232
msgid ""
"All ``GeoQuerySet`` methods have been deprecated and replaced by :doc:"
"`equivalent database functions </ref/contrib/gis/functions>`. As soon as the "
"legacy methods have been replaced in your code, you should even be able to "
"remove the special ``GeoManager`` from your GIS-enabled classes."
msgstr ""

#: ../../releases/1.9.txt:237
msgid ""
"The GDAL interface now supports instantiating file-based and in-memory :ref:"
"`GDALRaster objects <raster-data-source-objects>` from raw data. Setters for "
"raster properties such as projection or pixel values have been added."
msgstr ""

#: ../../releases/1.9.txt:242
msgid ""
"For PostGIS users, the new :class:`~django.contrib.gis.db.models."
"RasterField` allows :ref:`storing GDALRaster objects <creating-and-saving-"
"raster-models>`. It supports automatic spatial index creation and "
"reprojection when saving a model. It does not yet support spatial querying."
msgstr ""

#: ../../releases/1.9.txt:247
msgid ""
"The new :meth:`GDALRaster.warp() <django.contrib.gis.gdal.GDALRaster.warp>` "
"method allows warping a raster by specifying target raster properties such "
"as origin, width, height, or pixel size (amongst others)."
msgstr ""

#: ../../releases/1.9.txt:251
msgid ""
"The new :meth:`GDALRaster.transform() <django.contrib.gis.gdal.GDALRaster."
"transform>` method allows transforming a raster into a different spatial "
"reference system by specifying a target ``srid``."
msgstr ""

#: ../../releases/1.9.txt:256
msgid ""
"The new :class:`~django.contrib.gis.geoip2.GeoIP2` class allows using "
"MaxMind's GeoLite2 databases which includes support for IPv6 addresses."
msgstr ""

#: ../../releases/1.9.txt:259
msgid ""
"The default OpenLayers library version included in widgets has been updated "
"from 2.13 to 2.13.1."
msgstr ""

#: ../../releases/1.9.txt:263
msgid ":mod:`django.contrib.postgres`"
msgstr ""

#: ../../releases/1.9.txt:265
msgid ""
"Added support for the :lookup:`rangefield.contained_by` lookup for some "
"built in fields which correspond to the range fields."
msgstr ""

#: ../../releases/1.9.txt:268
msgid "Added :class:`~django.contrib.postgres.fields.JSONField`."
msgstr ""

#: ../../releases/1.9.txt:270
msgid "Added :doc:`/ref/contrib/postgres/aggregates`."
msgstr ""

#: ../../releases/1.9.txt:272
msgid ""
"Added the :class:`~django.contrib.postgres.functions.TransactionNow` "
"database function."
msgstr ""

#: ../../releases/1.9.txt:276
msgid ":mod:`django.contrib.sessions`"
msgstr ""

#: ../../releases/1.9.txt:278
msgid ""
"The session model and ``SessionStore`` classes for the ``db`` and "
"``cached_db`` backends are refactored to allow a custom database session "
"backend to build upon them. See :ref:`extending-database-backed-session-"
"engines` for more details."
msgstr ""

#: ../../releases/1.9.txt:284
msgid ":mod:`django.contrib.sites`"
msgstr ""

#: ../../releases/1.9.txt:286
msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` now handles the "
"case where ``request.get_host()`` returns ``domain:port``, e.g. ``example."
"com:80``. If the lookup fails because the host does not match a record in "
"the database and the host has a port, the port is stripped and the lookup is "
"retried with the domain part only."
msgstr ""

#: ../../releases/1.9.txt:293
msgid ":mod:`django.contrib.syndication`"
msgstr ""

#: ../../releases/1.9.txt:295
msgid ""
"Support for multiple enclosures per feed item has been added. If multiple "
"enclosures are defined on a RSS feed, an exception is raised as RSS feeds, "
"unlike Atom feeds, do not support multiple enclosures per feed item."
msgstr ""

#: ../../releases/1.9.txt:300
msgid "Cache"
msgstr ""

#: ../../releases/1.9.txt:302
msgid ""
"``django.core.cache.backends.base.BaseCache`` now has a ``get_or_set()`` "
"method."
msgstr ""

#: ../../releases/1.9.txt:305
msgid ""
":func:`django.views.decorators.cache.never_cache` now sends more persuasive "
"headers (added ``no-cache, no-store, must-revalidate`` to ``Cache-Control``) "
"to better prevent caching. This was also added in Django 1.8.8."
msgstr ""

#: ../../releases/1.9.txt:310
msgid "CSRF"
msgstr ""

#: ../../releases/1.9.txt:312
msgid ""
"The request header's name used for CSRF authentication can be customized "
"with :setting:`CSRF_HEADER_NAME`."
msgstr ""

#: ../../releases/1.9.txt:315
msgid ""
"The CSRF referer header is now validated against the :setting:"
"`CSRF_COOKIE_DOMAIN` setting if set. See :ref:`how-csrf-works` for details."
msgstr ""

#: ../../releases/1.9.txt:319
msgid ""
"The new :setting:`CSRF_TRUSTED_ORIGINS` setting provides a way to allow "
"cross-origin unsafe requests (e.g. ``POST``) over HTTPS."
msgstr ""

#: ../../releases/1.9.txt:323
msgid "Database backends"
msgstr ""

#: ../../releases/1.9.txt:325
msgid ""
"The PostgreSQL backend (``django.db.backends.postgresql_psycopg2``) is also "
"available as ``django.db.backends.postgresql``. The old name will continue "
"to be available for backwards compatibility."
msgstr ""

#: ../../releases/1.9.txt:330
msgid "File Storage"
msgstr ""

#: ../../releases/1.9.txt:332
msgid ""
":meth:`Storage.get_valid_name() <django.core.files.storage.Storage."
"get_valid_name>` is now called when the :attr:`~django.db.models.FileField."
"upload_to` is a callable."
msgstr ""

#: ../../releases/1.9.txt:336
msgid ""
":class:`~django.core.files.File` now has the ``seekable()`` method when "
"using Python 3."
msgstr ""

#: ../../releases/1.9.txt:340
msgid "Forms"
msgstr ""

#: ../../releases/1.9.txt:342
msgid ""
":class:`~django.forms.ModelForm` accepts the new ``Meta`` option "
"``field_classes`` to customize the type of the fields. See :ref:`modelforms-"
"overriding-default-fields` for details."
msgstr ""

#: ../../releases/1.9.txt:346
msgid ""
"You can now specify the order in which form fields are rendered with the :"
"attr:`~django.forms.Form.field_order` attribute, the ``field_order`` "
"constructor argument , or the :meth:`~django.forms.Form.order_fields` method."
msgstr ""

#: ../../releases/1.9.txt:350
msgid ""
"A form prefix can be specified inside a form class, not only when "
"instantiating a form. See :ref:`form-prefix` for details."
msgstr ""

#: ../../releases/1.9.txt:353
msgid ""
"You can now :ref:`specify keyword arguments <custom-formset-form-kwargs>` "
"that you want to pass to the constructor of forms in a formset."
msgstr ""

#: ../../releases/1.9.txt:356
msgid ""
":class:`~django.forms.SlugField` now accepts an :attr:`~django.forms."
"SlugField.allow_unicode` argument to allow Unicode characters in slugs."
msgstr ""

#: ../../releases/1.9.txt:360
msgid ""
":class:`~django.forms.CharField` now accepts a :attr:`~django.forms."
"CharField.strip` argument to strip input data of leading and trailing "
"whitespace.  As this defaults to ``True`` this is different behavior from "
"previous releases."
msgstr ""

#: ../../releases/1.9.txt:365
msgid ""
"Form fields now support the :attr:`~django.forms.Field.disabled` argument, "
"allowing the field widget to be displayed disabled by browsers."
msgstr ""

#: ../../releases/1.9.txt:368
msgid ""
"It's now possible to customize bound fields by overriding a field's :meth:"
"`~django.forms.Field.get_bound_field()` method."
msgstr ""

#: ../../releases/1.9.txt:372
msgid "Generic Views"
msgstr ""

#: ../../releases/1.9.txt:374
msgid ""
"Class-based views generated using ``as_view()`` now have ``view_class`` and "
"``view_initkwargs`` attributes."
msgstr ""

#: ../../releases/1.9.txt:377
msgid ""
":func:`~django.utils.decorators.method_decorator` can now be used with a "
"list or tuple of decorators. It can also be used to :ref:`decorate classes "
"instead of methods <decorating-class-based-views>`."
msgstr ""

#: ../../releases/1.9.txt:382
msgid "Internationalization"
msgstr ""

#: ../../releases/1.9.txt:384
msgid ""
"The :func:`django.views.i18n.set_language` view now properly redirects to :"
"ref:`translated URLs <url-internationalization>`, when available."
msgstr ""

#: ../../releases/1.9.txt:387
msgid ""
"The ``django.views.i18n.javascript_catalog()`` view now works correctly if "
"used multiple times with different configurations on the same page."
msgstr ""

#: ../../releases/1.9.txt:390
msgid ""
"The :func:`django.utils.timezone.make_aware` function gained an ``is_dst`` "
"argument to help resolve ambiguous times during DST transitions."
msgstr ""

#: ../../releases/1.9.txt:393
msgid ""
"You can now use locale variants supported by gettext. These are usually used "
"for languages which can be written in different scripts, for example Latin "
"and Cyrillic (e.g. ``be@latin``)."
msgstr ""

#: ../../releases/1.9.txt:397
msgid ""
"Added the ``django.views.i18n.json_catalog()`` view to help build a custom "
"client-side i18n library upon Django translations. It returns a JSON object "
"containing a translations catalog, formatting settings, and a plural rule."
msgstr ""

#: ../../releases/1.9.txt:401
msgid ""
"Added the ``name_translated`` attribute to the object returned by the :ttag:"
"`get_language_info` template tag. Also added a corresponding template "
"filter: :tfilter:`language_name_translated`."
msgstr ""

#: ../../releases/1.9.txt:405
msgid ""
"You can now run :djadmin:`compilemessages` from the root directory of your "
"project and it will find all the app message files that were created by :"
"djadmin:`makemessages`."
msgstr ""

#: ../../releases/1.9.txt:409
msgid ""
":djadmin:`makemessages` now calls xgettext once per locale directory rather "
"than once per translatable file. This speeds up localization builds."
msgstr ""

#: ../../releases/1.9.txt:412
msgid ""
":ttag:`blocktrans` supports assigning its output to a variable using "
"``asvar``."
msgstr ""

#: ../../releases/1.9.txt:415
msgid "Two new languages are available: Colombian Spanish and Scottish Gaelic."
msgstr ""

#: ../../releases/1.9.txt:418
msgid "Management Commands"
msgstr ""

#: ../../releases/1.9.txt:420
msgid ""
"The new :djadmin:`sendtestemail` command lets you send a test email to "
"easily confirm that email sending through Django is working."
msgstr ""

#: ../../releases/1.9.txt:423
msgid ""
"To increase the readability of the SQL code generated by :djadmin:"
"`sqlmigrate`, the SQL code generated for each migration operation is "
"preceded by the operation's description."
msgstr ""

#: ../../releases/1.9.txt:427
msgid ""
"The :djadmin:`dumpdata` command output is now deterministically ordered. "
"Moreover, when the ``--output`` option is specified, it also shows a "
"progress bar in the terminal."
msgstr ""

#: ../../releases/1.9.txt:431
msgid ""
"The :djadmin:`createcachetable` command now has a ``--dry-run`` flag to "
"print out the SQL rather than execute it."
msgstr ""

#: ../../releases/1.9.txt:434
msgid ""
"The :djadmin:`startapp` command creates an ``apps.py`` file. Since it "
"doesn't use ``default_app_config`` (:ref:`a discouraged API <configuring-"
"applications-ref>`), you must specify the app config's path, e.g. ``'polls."
"apps.PollsConfig'``, in :setting:`INSTALLED_APPS` for it to be used (instead "
"of just ``'polls'``)."
msgstr ""

#: ../../releases/1.9.txt:440
msgid ""
"When using the PostgreSQL backend, the :djadmin:`dbshell` command can "
"connect to the database using the password from your settings file (instead "
"of requiring it to be manually entered)."
msgstr ""

#: ../../releases/1.9.txt:444
msgid ""
"The ``django`` package may be run as a script, i.e. ``python -m django``, "
"which will behave the same as ``django-admin``."
msgstr ""

#: ../../releases/1.9.txt:447
msgid ""
"Management commands that have the ``--noinput`` option now also take ``--no-"
"input`` as an alias for that option."
msgstr ""

#: ../../releases/1.9.txt:451
msgid "Migrations"
msgstr ""

#: ../../releases/1.9.txt:453
msgid ""
"Initial migrations are now marked with an :attr:`initial = True <django.db."
"migrations.Migration.initial>` class attribute which allows :option:`migrate "
"--fake-initial` to more easily detect initial migrations."
msgstr ""

#: ../../releases/1.9.txt:457
msgid ""
"Added support for serialization of ``functools.partial`` and ``LazyObject`` "
"instances."
msgstr ""

#: ../../releases/1.9.txt:460
msgid ""
"When supplying ``None`` as a value in :setting:`MIGRATION_MODULES`, Django "
"will consider the app an app without migrations."
msgstr ""

#: ../../releases/1.9.txt:463
msgid ""
"When applying migrations, the \"Rendering model states\" step that's "
"displayed when running migrate with verbosity 2 or higher now computes only "
"the states for the migrations that have already been applied. The model "
"states for migrations being applied are generated on demand, drastically "
"reducing the amount of required memory."
msgstr ""

#: ../../releases/1.9.txt:469
msgid ""
"However, this improvement is not available when unapplying migrations and "
"therefore still requires the precomputation and storage of the intermediate "
"migration states."
msgstr ""

#: ../../releases/1.9.txt:473
msgid ""
"This improvement also requires that Django no longer supports mixed "
"migration plans. Mixed plans consist of a list of migrations where some are "
"being applied and others are being unapplied. This was never officially "
"supported and never had a public API that supports this behavior."
msgstr ""

#: ../../releases/1.9.txt:478
msgid ""
"The :djadmin:`squashmigrations` command now supports specifying the starting "
"migration from which migrations will be squashed."
msgstr ""

#: ../../releases/1.9.txt:482
msgid "Models"
msgstr ""

#: ../../releases/1.9.txt:484
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"now works on proxy models."
msgstr ""

#: ../../releases/1.9.txt:487
msgid ""
"Database configuration gained a :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` "
"option for interacting with databases that store datetimes in local time and "
"don't support time zones when :setting:`USE_TZ` is ``True``."
msgstr ""

#: ../../releases/1.9.txt:491
msgid ""
"Added the :meth:`RelatedManager.set() <django.db.models.fields.related."
"RelatedManager.set()>` method to the related managers created by "
"``ForeignKey``, ``GenericForeignKey``, and ``ManyToManyField``."
msgstr ""

#: ../../releases/1.9.txt:496
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.add` method on a "
"reverse foreign key now has a ``bulk`` parameter to allow executing one "
"query regardless of the number of objects being added rather than one query "
"per object."
msgstr ""

#: ../../releases/1.9.txt:501
msgid ""
"Added the ``keep_parents`` parameter to :meth:`Model.delete() <django.db."
"models.Model.delete>` to allow deleting only a child's data in a model that "
"uses multi-table inheritance."
msgstr ""

#: ../../releases/1.9.txt:505
msgid ""
":meth:`Model.delete() <django.db.models.Model.delete>` and :meth:`QuerySet."
"delete() <django.db.models.query.QuerySet.delete>` return the number of "
"objects deleted."
msgstr ""

#: ../../releases/1.9.txt:509
msgid ""
"Added a system check to prevent defining both ``Meta.ordering`` and "
"``order_with_respect_to`` on the same model."
msgstr ""

#: ../../releases/1.9.txt:512
msgid ""
":lookup:`Date and time <year>` lookups can be chained with other lookups "
"(such as :lookup:`exact`, :lookup:`gt`, :lookup:`lt`, etc.). For example: "
"``Entry.objects.filter(pub_date__month__gt=6)``."
msgstr ""

#: ../../releases/1.9.txt:516
msgid ""
"Time lookups (hour, minute, second) are now supported by :class:`~django.db."
"models.TimeField` for all database backends. Support for backends other than "
"SQLite was added but undocumented in Django 1.7."
msgstr ""

#: ../../releases/1.9.txt:520
msgid ""
"You can specify the ``output_field`` parameter of the :class:`~django.db."
"models.Avg` aggregate in order to aggregate over non-numeric columns, such "
"as ``DurationField``."
msgstr ""

#: ../../releases/1.9.txt:524
msgid ""
"Added the :lookup:`date` lookup to :class:`~django.db.models.DateTimeField` "
"to allow querying the field by only the date portion."
msgstr ""

#: ../../releases/1.9.txt:527
msgid ""
"Added the :class:`~django.db.models.functions.Greatest` and :class:`~django."
"db.models.functions.Least` database functions."
msgstr ""

#: ../../releases/1.9.txt:530
msgid ""
"Added the :class:`~django.db.models.functions.Now` database function, which "
"returns the current date and time."
msgstr ""

#: ../../releases/1.9.txt:533
msgid ""
":class:`~django.db.models.Transform` is now a subclass of :ref:`Func() <func-"
"expressions>` which allows ``Transform``\\s to be used on the right hand "
"side of an expression, just like regular ``Func``\\s. This allows "
"registering some database functions like :class:`~django.db.models.functions."
"Length`, :class:`~django.db.models.functions.Lower`, and :class:`~django.db."
"models.functions.Upper` as transforms."
msgstr ""

#: ../../releases/1.9.txt:541
msgid ""
":class:`~django.db.models.SlugField` now accepts an :attr:`~django.db.models."
"SlugField.allow_unicode` argument to allow Unicode characters in slugs."
msgstr ""

#: ../../releases/1.9.txt:545
msgid "Added support for referencing annotations in ``QuerySet.distinct()``."
msgstr ""

#: ../../releases/1.9.txt:547
msgid ""
"``connection.queries`` shows queries with substituted parameters on SQLite."
msgstr ""

#: ../../releases/1.9.txt:549
msgid ""
":doc:`Query expressions </ref/models/expressions>` can now be used when "
"creating new model instances using ``save()``, ``create()``, and "
"``bulk_create()``."
msgstr ""

#: ../../releases/1.9.txt:554
msgid "Requests and Responses"
msgstr ""

#: ../../releases/1.9.txt:556
msgid ""
"Unless :attr:`HttpResponse.reason_phrase <django.http.HttpResponse."
"reason_phrase>` is explicitly set, it now is determined by the current value "
"of :attr:`HttpResponse.status_code <django.http.HttpResponse.status_code>`. "
"Modifying the value of ``status_code`` outside of the constructor will also "
"modify the value of ``reason_phrase``."
msgstr ""

#: ../../releases/1.9.txt:563
msgid "The debug view now shows details of chained exceptions on Python 3."
msgstr ""

#: ../../releases/1.9.txt:565
msgid ""
"The default 40x error views now accept a second positional parameter, the "
"exception that triggered the view."
msgstr ""

#: ../../releases/1.9.txt:568
msgid ""
"View error handlers now support :class:`~django.template.response."
"TemplateResponse`, commonly used with class-based views."
msgstr ""

#: ../../releases/1.9.txt:572
msgid ""
"Exceptions raised by the ``render()`` method are now passed to the "
"``process_exception()`` method of each middleware."
msgstr ""

#: ../../releases/1.9.txt:575
msgid ""
"Request middleware can now set :attr:`HttpRequest.urlconf <django.http."
"HttpRequest.urlconf>` to ``None`` to revert any changes made by previous "
"middleware and return to using the :setting:`ROOT_URLCONF`."
msgstr ""

#: ../../releases/1.9.txt:579
msgid ""
"The :setting:`DISALLOWED_USER_AGENTS` check in :class:`~django.middleware."
"common.CommonMiddleware` now raises a :class:`~django.core.exceptions."
"PermissionDenied` exception as opposed to returning an :class:`~django.http."
"HttpResponseForbidden` so that :data:`~django.conf.urls.handler403` is "
"invoked."
msgstr ""

#: ../../releases/1.9.txt:585
msgid ""
"Added :meth:`HttpRequest.get_port() <django.http.HttpRequest.get_port>` to "
"fetch the originating port of the request."
msgstr ""

#: ../../releases/1.9.txt:588
msgid ""
"Added the ``json_dumps_params`` parameter to :class:`~django.http."
"JsonResponse` to allow passing keyword arguments to the ``json.dumps()`` "
"call used to generate the response."
msgstr ""

#: ../../releases/1.9.txt:592
msgid ""
"The :class:`~django.middleware.common.BrokenLinkEmailsMiddleware` now "
"ignores 404s when the referer is equal to the requested URL. To circumvent "
"the empty referer check already implemented, some Web bots set the referer "
"to the requested URL."
msgstr ""

#: ../../releases/1.9.txt:598
msgid "Templates"
msgstr ""

#: ../../releases/1.9.txt:600
msgid ""
"Template tags created with the :meth:`~django.template.Library.simple_tag` "
"helper can now store results in a template variable by using the ``as`` "
"argument."
msgstr ""

#: ../../releases/1.9.txt:604
msgid ""
"Added a :meth:`Context.setdefault() <django.template.Context.setdefault>` "
"method."
msgstr ""

#: ../../releases/1.9.txt:607
msgid ""
"The :ref:`django.template <django-template-logger>` logger was added and "
"includes the following messages:"
msgstr ""

#: ../../releases/1.9.txt:610
msgid "A ``DEBUG`` level message for missing context variables."
msgstr ""

#: ../../releases/1.9.txt:612
msgid ""
"A ``WARNING`` level message for uncaught exceptions raised during the "
"rendering of an ``{% include %}`` when debug mode is off (helpful since ``{% "
"include %}`` silences the exception and returns an empty string)."
msgstr ""

#: ../../releases/1.9.txt:617
msgid ""
"The :ttag:`firstof` template tag supports storing the output in a variable "
"using 'as'."
msgstr ""

#: ../../releases/1.9.txt:620
msgid ""
":meth:`Context.update() <django.template.Context.update>` can now be used as "
"a context manager."
msgstr ""

#: ../../releases/1.9.txt:623
msgid "Django template loaders can now extend templates recursively."
msgstr ""

#: ../../releases/1.9.txt:625
msgid ""
"The debug page template postmortem now include output from each engine that "
"is installed."
msgstr ""

#: ../../releases/1.9.txt:628
msgid ""
":ref:`Debug page integration <template-debug-integration>` for custom "
"template engines was added."
msgstr ""

#: ../../releases/1.9.txt:631
msgid ""
"The :class:`~django.template.backends.django.DjangoTemplates` backend gained "
"the ability to register libraries and builtins explicitly through the "
"template :setting:`OPTIONS <TEMPLATES-OPTIONS>`."
msgstr ""

#: ../../releases/1.9.txt:635
msgid ""
"The ``timesince`` and ``timeuntil`` filters were improved to deal with leap "
"years when given large time spans."
msgstr ""

#: ../../releases/1.9.txt:638
msgid ""
"The ``include`` tag now caches parsed templates objects during template "
"rendering, speeding up reuse in places such as for loops."
msgstr ""

#: ../../releases/1.9.txt:642
msgid "Tests"
msgstr ""

#: ../../releases/1.9.txt:644
msgid ""
"Added the :meth:`json() <django.test.Response.json>` method to test client "
"responses to give access to the response body as JSON."
msgstr ""

#: ../../releases/1.9.txt:647
msgid ""
"Added the :meth:`~django.test.Client.force_login()` method to the test "
"client. Use this method to simulate the effect of a user logging into the "
"site while skipping the authentication and verification steps of :meth:"
"`~django.test.Client.login()`."
msgstr ""

#: ../../releases/1.9.txt:653
msgid "URLs"
msgstr ""

#: ../../releases/1.9.txt:655
msgid ""
"Regular expression lookaround assertions are now allowed in URL patterns."
msgstr ""

#: ../../releases/1.9.txt:657
msgid ""
"The application namespace can now be set using an ``app_name`` attribute on "
"the included module or object. It can also be set by passing a 2-tuple of "
"(<list of patterns>, <application namespace>) as the first argument to "
"``include()``."
msgstr ""

#: ../../releases/1.9.txt:662
msgid "System checks have been added for common URL pattern mistakes."
msgstr ""

#: ../../releases/1.9.txt:665
msgid "Validators"
msgstr ""

#: ../../releases/1.9.txt:667
msgid ""
"Added :func:`django.core.validators.int_list_validator` to generate "
"validators of strings containing integers separated with a custom character."
msgstr ""

#: ../../releases/1.9.txt:670
msgid ""
":class:`~django.core.validators.EmailValidator` now limits the length of "
"domain name labels to 63 characters per :rfc:`1034`."
msgstr ""

#: ../../releases/1.9.txt:673
msgid ""
"Added :func:`~django.core.validators.validate_unicode_slug` to validate "
"slugs that may contain Unicode characters."
msgstr ""

#: ../../releases/1.9.txt:679
msgid "Backwards incompatible changes in 1.9"
msgstr ""

#: ../../releases/1.9.txt:683
msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`removed-features-1.9` for the features that have reached the end of "
"their deprecation cycle and therefore been removed. If you haven't updated "
"your code within the deprecation timeline for a given feature, its removal "
"may appear as a backwards incompatible change."
msgstr ""

#: ../../releases/1.9.txt:690
msgid "Database backend API"
msgstr ""

#: ../../releases/1.9.txt:692
msgid ""
"A couple of new tests rely on the ability of the backend to introspect "
"column defaults (returning the result as ``Field.default``). You can set the "
"``can_introspect_default`` database feature to ``False`` if your backend "
"doesn't implement this. You may want to review the implementation on the "
"backends that Django includes for reference (:ticket:`24245`)."
msgstr ""

#: ../../releases/1.9.txt:698
msgid ""
"Registering a global adapter or converter at the level of the DB-API module "
"to handle time zone information of :class:`~datetime.datetime` values passed "
"as query parameters or returned as query results on databases that don't "
"support time zones is discouraged. It can conflict with other libraries."
msgstr ""

#: ../../releases/1.9.txt:703
msgid ""
"The recommended way to add a time zone to :class:`~datetime.datetime` values "
"fetched from the database is to register a converter for ``DateTimeField`` "
"in ``DatabaseOperations.get_db_converters()``."
msgstr ""

#: ../../releases/1.9.txt:707
msgid ""
"The ``needs_datetime_string_cast`` database feature was removed. Database "
"backends that set it must register a converter instead, as explained above."
msgstr ""

#: ../../releases/1.9.txt:710
msgid ""
"The ``DatabaseOperations.value_to_db_<type>()`` methods were renamed to "
"``adapt_<type>field_value()`` to mirror the ``convert_<type>field_value()`` "
"methods."
msgstr ""

#: ../../releases/1.9.txt:714
msgid ""
"To use the new ``date`` lookup, third-party database backends may need to "
"implement the ``DatabaseOperations.datetime_cast_date_sql()`` method."
msgstr ""

#: ../../releases/1.9.txt:717
msgid ""
"The ``DatabaseOperations.time_extract_sql()`` method was added. It calls the "
"existing ``date_extract_sql()`` method. This method is overridden by the "
"SQLite backend to add time lookups (hour, minute, second) to :class:`~django."
"db.models.TimeField`, and may be needed by third-party database backends."
msgstr ""

#: ../../releases/1.9.txt:723
msgid ""
"The ``DatabaseOperations.datetime_cast_sql()`` method (not to be confused "
"with ``DatabaseOperations.datetime_cast_date_sql()`` mentioned above) has "
"been removed. This method served to format dates on Oracle long before 1.0, "
"but hasn't been overridden by any core backend in years and hasn't been "
"called anywhere in Django's code or tests."
msgstr ""

#: ../../releases/1.9.txt:729
msgid ""
"In order to support test parallelization, you must implement the "
"``DatabaseCreation._clone_test_db()`` method and set ``DatabaseFeatures."
"can_clone_databases = True``. You may have to adjust ``DatabaseCreation."
"get_test_db_clone_settings()``."
msgstr ""

#: ../../releases/1.9.txt:735
msgid "Default settings that were tuples are now lists"
msgstr ""

#: ../../releases/1.9.txt:737
msgid ""
"The default settings in ``django.conf.global_settings`` were a combination "
"of lists and tuples. All settings that were formerly tuples are now lists."
msgstr ""

#: ../../releases/1.9.txt:741
msgid "``is_usable`` attribute on template loaders is removed"
msgstr ""

#: ../../releases/1.9.txt:743
msgid ""
"Django template loaders previously required an ``is_usable`` attribute to be "
"defined. If a loader was configured in the template settings and this "
"attribute was ``False``, the loader would be silently ignored. In practice, "
"this was only used by the egg loader to detect if setuptools was installed. "
"The ``is_usable`` attribute is now removed and the egg loader instead fails "
"at runtime if setuptools is not installed."
msgstr ""

#: ../../releases/1.9.txt:751
msgid "Related set direct assignment"
msgstr ""

#: ../../releases/1.9.txt:753
msgid ""
"Direct assignment of related objects in the ORM used to perform a "
"``clear()`` followed by a call to ``add()``. This caused needlessly large "
"data changes and prevented using the :data:`~django.db.models.signals."
"m2m_changed` signal to track individual changes in many-to-many relations."
msgstr ""

#: ../../releases/1.9.txt:758
msgid ""
"Direct assignment now relies on the the new :meth:`~django.db.models.fields."
"related.RelatedManager.set` method on related managers which by default only "
"processes changes between the existing related set and the one that's newly "
"assigned. The previous behavior can be restored by replacing direct "
"assignment by a call to ``set()`` with the keyword argument ``clear=True``."
msgstr ""

#: ../../releases/1.9.txt:765
msgid ""
"``ModelForm``, and therefore ``ModelAdmin``, internally rely on direct "
"assignment for many-to-many relations and as a consequence now use the new "
"behavior."
msgstr ""

#: ../../releases/1.9.txt:770
msgid "Filesystem-based template loaders catch more specific exceptions"
msgstr ""

#: ../../releases/1.9.txt:772
msgid ""
"When using the :class:`filesystem.Loader <django.template.loaders.filesystem."
"Loader>` or :class:`app_directories.Loader <django.template.loaders."
"app_directories.Loader>` template loaders, earlier versions of Django raised "
"a :exc:`~django.template.TemplateDoesNotExist` error if a template source "
"existed but was unreadable. This could happen under many circumstances, such "
"as if Django didn't have permissions to open the file, or if the template "
"source was a directory. Now, Django only silences the exception if the "
"template source does not exist. All other situations result in the original "
"``IOError`` being raised."
msgstr ""

#: ../../releases/1.9.txt:783
msgid "HTTP redirects no longer forced to absolute URIs"
msgstr ""

#: ../../releases/1.9.txt:785
msgid ""
"Relative redirects are no longer converted to absolute URIs. :rfc:`2616` "
"required the ``Location`` header in redirect responses to be an absolute "
"URI, but it has been superseded by :rfc:`7231` which allows relative URIs in "
"``Location``, recognizing the actual practice of user agents, almost all of "
"which support them."
msgstr ""

#: ../../releases/1.9.txt:791
msgid ""
"Consequently, the expected URLs passed to ``assertRedirects`` should "
"generally no longer include the scheme and domain part of the URLs. For "
"example, ``self.assertRedirects(response, 'http://testserver/some-url/')`` "
"should be replaced by ``self.assertRedirects(response, '/some-url/')`` "
"(unless the redirection specifically contained an absolute URL, of course)."
msgstr ""

#: ../../releases/1.9.txt:797
msgid ""
"In the rare case that you need the old behavior (discovered with an ancient "
"version of Apache with ``mod_scgi`` that interprets a relative redirect as "
"an \"internal redirect\"), you can restore it by writing a custom "
"middleware::"
msgstr ""

#: ../../releases/1.9.txt:808
msgid "Dropped support for PostgreSQL 9.0"
msgstr ""

#: ../../releases/1.9.txt:810
msgid ""
"Upstream support for PostgreSQL 9.0 ended in September 2015. As a "
"consequence, Django 1.9 sets 9.1 as the minimum PostgreSQL version it "
"officially supports."
msgstr ""

#: ../../releases/1.9.txt:814
msgid "Dropped support for Oracle 11.1"
msgstr ""

#: ../../releases/1.9.txt:816
msgid ""
"Upstream support for Oracle 11.1 ended in August 2015. As a consequence, "
"Django 1.9 sets 11.2 as the minimum Oracle version it officially supports."
msgstr ""

#: ../../releases/1.9.txt:820
msgid "Bulk behavior of ``add()`` method of related managers"
msgstr ""

#: ../../releases/1.9.txt:822
msgid ""
"To improve performance, the ``add()`` methods of the related managers "
"created by ``ForeignKey`` and ``GenericForeignKey`` changed from a series of "
"``Model.save()`` calls to a single ``QuerySet.update()`` call. The change "
"means that ``pre_save`` and ``post_save`` signals aren't sent anymore. You "
"can use the ``bulk=False`` keyword argument to revert to the previous "
"behavior."
msgstr ""

#: ../../releases/1.9.txt:829
msgid "Template ``LoaderOrigin`` and ``StringOrigin`` are removed"
msgstr ""

#: ../../releases/1.9.txt:831
msgid ""
"In previous versions of Django, when a template engine was initialized with "
"debug as ``True``, an instance of ``django.template.loader.LoaderOrigin`` or "
"``django.template.base.StringOrigin`` was set as the origin attribute on the "
"template object. These classes have been combined into :class:`~django."
"template.base.Origin` and is now always set regardless of the engine debug "
"setting. For a minimal level of backwards compatibility, the old class names "
"will be kept as aliases to the new ``Origin`` class until Django 2.0."
msgstr ""

#: ../../releases/1.9.txt:843
msgid "Changes to the default logging configuration"
msgstr ""

#: ../../releases/1.9.txt:845
msgid ""
"To make it easier to write custom logging configurations, Django's default "
"logging configuration no longer defines ``django.request`` and ``django."
"security`` loggers. Instead, it defines a single ``django`` logger, filtered "
"at the ``INFO`` level, with two handlers:"
msgstr ""

#: ../../releases/1.9.txt:850
msgid ""
"``console``: filtered at the ``INFO`` level and only active if "
"``DEBUG=True``."
msgstr ""

#: ../../releases/1.9.txt:851
msgid ""
"``mail_admins``: filtered at the ``ERROR`` level and only active if "
"``DEBUG=False``."
msgstr ""

#: ../../releases/1.9.txt:854
msgid ""
"If you aren't overriding Django's default logging, you should see minimal "
"changes in behavior, but you might see some new logging to the ``runserver`` "
"console, for example."
msgstr ""

#: ../../releases/1.9.txt:858
msgid ""
"If you are overriding Django's default logging, you should check to see how "
"your configuration merges with the new defaults."
msgstr ""

#: ../../releases/1.9.txt:862
msgid "``HttpRequest`` details in error reporting"
msgstr ""

#: ../../releases/1.9.txt:864
msgid ""
"It was redundant to display the full details of the :class:`~django.http."
"HttpRequest` each time it appeared as a stack frame variable in the HTML "
"version of the debug page and error email. Thus, the HTTP request will now "
"display the same standard representation as other variables "
"(``repr(request)``). As a result, the ``ExceptionReporterFilter."
"get_request_repr()`` method and the undocumented ``django.http."
"build_request_repr()`` function were removed."
msgstr ""

#: ../../releases/1.9.txt:872
msgid ""
"The contents of the text version of the email were modified to provide a "
"traceback of the same structure as in the case of AJAX requests. The "
"traceback details are rendered by the ``ExceptionReporter."
"get_traceback_text()`` method."
msgstr ""

#: ../../releases/1.9.txt:877
msgid "Removal of time zone aware global adapters and converters for datetimes"
msgstr ""

#: ../../releases/1.9.txt:879
msgid ""
"Django no longer registers global adapters and converters for managing time "
"zone information on :class:`~datetime.datetime` values sent to the database "
"as query parameters or read from the database in query results. This change "
"affects projects that meet all the following conditions:"
msgstr ""

#: ../../releases/1.9.txt:884
msgid "The :setting:`USE_TZ` setting is ``True``."
msgstr ""

#: ../../releases/1.9.txt:885
msgid ""
"The database is SQLite, MySQL, Oracle, or a third-party database that "
"doesn't support time zones. In doubt, you can check the value of "
"``connection.features.supports_timezones``."
msgstr ""

#: ../../releases/1.9.txt:888
msgid ""
"The code queries the database outside of the ORM, typically with ``cursor."
"execute(sql, params)``."
msgstr ""

#: ../../releases/1.9.txt:891
msgid ""
"If you're passing aware :class:`~datetime.datetime` parameters to such "
"queries, you should turn them into naive datetimes in UTC::"
msgstr ""

#: ../../releases/1.9.txt:897
msgid ""
"If you fail to do so, the conversion will be performed as in earlier "
"versions (with a deprecation warning) up until Django 1.11. Django 2.0 won't "
"perform any conversion, which may result in data corruption."
msgstr ""

#: ../../releases/1.9.txt:901
msgid ""
"If you're reading :class:`~datetime.datetime` values from the results, they "
"will be naive instead of aware. You can compensate as follows::"
msgstr ""

#: ../../releases/1.9.txt:907
msgid ""
"You don't need any of this if you're querying the database through the ORM, "
"even if you're using :meth:`raw() <django.db.models.query.QuerySet.raw>` "
"queries. The ORM takes care of managing time zone information."
msgstr ""

#: ../../releases/1.9.txt:912
msgid "Template tag modules are imported when templates are configured"
msgstr ""

#: ../../releases/1.9.txt:914
msgid ""
"The :class:`~django.template.backends.django.DjangoTemplates` backend now "
"performs discovery on installed template tag modules when instantiated. This "
"update enables libraries to be provided explicitly via the ``'libraries'`` "
"key of :setting:`OPTIONS <TEMPLATES-OPTIONS>` when defining a :class:"
"`~django.template.backends.django.DjangoTemplates` backend. Import or syntax "
"errors in template tag modules now fail early at instantiation time rather "
"than when a template with a :ttag:`{% load %}<load>` tag is first compiled."
msgstr ""

#: ../../releases/1.9.txt:924
msgid "``django.template.base.add_to_builtins()`` is removed"
msgstr ""

#: ../../releases/1.9.txt:926
msgid ""
"Although it was a private API, projects commonly used ``add_to_builtins()`` "
"to make template tags and filters available without using the :ttag:`{% load "
"%}<load>` tag. This API has been formalized. Projects should now define "
"built-in libraries via the ``'builtins'`` key of :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>` when defining a :class:`~django.template.backends."
"django.DjangoTemplates` backend."
msgstr ""

#: ../../releases/1.9.txt:936
msgid "``simple_tag`` now wraps tag output in ``conditional_escape``"
msgstr ""

#: ../../releases/1.9.txt:938
msgid ""
"In general, template tags do not autoescape their contents, and this "
"behavior is :ref:`documented <tags-auto-escaping>`. For tags like :class:"
"`~django.template.Library.inclusion_tag`, this is not a problem because the "
"included template will perform autoescaping. For ``assignment_tag()``, the "
"output will be escaped when it is used as a variable in the template."
msgstr ""

#: ../../releases/1.9.txt:944
msgid ""
"For the intended use cases of :class:`~django.template.Library.simple_tag`, "
"however, it is very easy to end up with incorrect HTML and possibly an XSS "
"exploit. For example::"
msgstr ""

#: ../../releases/1.9.txt:952
msgid ""
"In older versions of Django, this will be an XSS issue because ``user."
"first_name`` is not escaped."
msgstr ""

#: ../../releases/1.9.txt:955
msgid ""
"In Django 1.9, this is fixed: if the template context has "
"``autoescape=True`` set (the default), then ``simple_tag`` will wrap the "
"output of the tag function with :func:`~django.utils.html."
"conditional_escape`."
msgstr ""

#: ../../releases/1.9.txt:959
msgid ""
"To fix your ``simple_tag``\\s, it is best to apply the following practices:"
msgstr ""

#: ../../releases/1.9.txt:961
msgid ""
"Any code that generates HTML should use either the template system or :func:"
"`~django.utils.html.format_html`."
msgstr ""

#: ../../releases/1.9.txt:964
msgid ""
"If the output of a ``simple_tag`` needs escaping, use :func:`~django.utils."
"html.escape` or :func:`~django.utils.html.conditional_escape`."
msgstr ""

#: ../../releases/1.9.txt:968
msgid ""
"If you are absolutely certain that you are outputting HTML from a trusted "
"source (e.g. a CMS field that stores HTML entered by admins), you can mark "
"it as such using :func:`~django.utils.safestring.mark_safe`."
msgstr ""

#: ../../releases/1.9.txt:972
msgid ""
"Tags that follow these rules will be correct and safe whether they are run "
"on Django 1.9+ or earlier."
msgstr ""

#: ../../releases/1.9.txt:976
msgid "``Paginator.page_range``"
msgstr ""

#: ../../releases/1.9.txt:978
msgid ""
":attr:`Paginator.page_range <django.core.paginator.Paginator.page_range>` is "
"now an iterator instead of a list."
msgstr ""

#: ../../releases/1.9.txt:981
msgid ""
"In versions of Django previous to 1.8, ``Paginator.page_range`` returned a "
"``list`` in Python 2 and a ``range`` in Python 3. Django 1.8 consistently "
"returned a list, but an iterator is more efficient."
msgstr ""

#: ../../releases/1.9.txt:985
msgid ""
"Existing code that depends on ``list`` specific features, such as indexing, "
"can be ported by converting the iterator into a ``list`` using ``list()``."
msgstr ""

#: ../../releases/1.9.txt:989
msgid "Implicit ``QuerySet`` ``__in`` lookup removed"
msgstr ""

#: ../../releases/1.9.txt:991
msgid "In earlier versions, queries such as::"
msgstr ""

#: ../../releases/1.9.txt:995
msgid "would implicitly convert to::"
msgstr ""

#: ../../releases/1.9.txt:999
msgid "resulting in SQL like ``\"related_id IN (SELECT id FROM ...)\"``."
msgstr ""

#: ../../releases/1.9.txt:1001
msgid ""
"This implicit ``__in`` no longer happens so the \"IN\" SQL is now \"=\", and "
"if the subquery returns multiple results, at least some databases will throw "
"an error."
msgstr ""

#: ../../releases/1.9.txt:1007
msgid "``contrib.admin`` browser support"
msgstr ""

#: ../../releases/1.9.txt:1009
msgid ""
"The admin no longer supports Internet Explorer 8 and below, as these "
"browsers have reached end-of-life."
msgstr ""

#: ../../releases/1.9.txt:1012
msgid ""
"CSS and images to support Internet Explorer 6 and 7 have been removed. PNG "
"and GIF icons have been replaced with SVG icons, which are not supported by "
"Internet Explorer 8 and earlier."
msgstr ""

#: ../../releases/1.9.txt:1016
msgid ""
"The jQuery library embedded in the admin has been upgraded from version "
"1.11.2 to 2.1.4. jQuery 2.x has the same API as jQuery 1.x, but does not "
"support Internet Explorer 6, 7, or 8, allowing for better performance and a "
"smaller file size. If you need to support IE8 and must also use the latest "
"version of Django, you can override the admin's copy of jQuery with your own "
"by creating a Django application with this structure::"
msgstr ""

#: ../../releases/1.9.txt:1030
msgid "``SyntaxError`` when installing Django setuptools 5.5.x"
msgstr ""

#: ../../releases/1.9.txt:1032
msgid "When installing Django 1.9 or 1.9.1 with setuptools 5.5.x, you'll see::"
msgstr ""

#: ../../releases/1.9.txt:1046
msgid ""
"It's safe to ignore these errors (Django will still install just fine), but "
"you can avoid them by upgrading setuptools to a more recent version. If "
"you're using pip, you can upgrade pip using ``pip install -U pip`` which "
"will also upgrade setuptools. This is resolved in later versions of Django "
"as described in the :doc:`/releases/1.9.2`."
msgstr ""

#: ../../releases/1.9.txt:1053 ../../releases/1.9.txt:1340
msgid "Miscellaneous"
msgstr ""

#: ../../releases/1.9.txt:1055
msgid ""
"The jQuery static files in ``contrib.admin`` have been moved into a ``vendor/"
"jquery`` subdirectory."
msgstr ""

#: ../../releases/1.9.txt:1058
msgid ""
"The text displayed for null columns in the admin changelist ``list_display`` "
"cells has changed from ``(None)`` (or its translated equivalent) to ``-`` (a "
"dash)."
msgstr ""

#: ../../releases/1.9.txt:1062
msgid ""
"``django.http.responses.REASON_PHRASES`` and ``django.core.handlers.wsgi."
"STATUS_CODE_TEXT`` have been removed. Use Python's stdlib instead: :data:"
"`http.client.responses` for Python 3 and `httplib.responses`_ for Python 2."
msgstr ""

#: ../../releases/1.9.txt:1069
msgid "``ValuesQuerySet`` and ``ValuesListQuerySet`` have been removed."
msgstr ""

#: ../../releases/1.9.txt:1071
msgid ""
"The ``admin/base.html`` template no longer sets ``window."
"__admin_media_prefix__`` or ``window.__admin_utc_offset__``. Image "
"references in JavaScript that used that value to construct absolute URLs "
"have been moved to CSS for easier customization. The UTC offset is stored on "
"a data attribute of the ``<body>`` tag."
msgstr ""

#: ../../releases/1.9.txt:1077
msgid ""
"``CommaSeparatedIntegerField`` validation has been refined to forbid values "
"like ``','``, ``',1'``, and ``'1,,2'``."
msgstr ""

#: ../../releases/1.9.txt:1080
msgid ""
"Form initialization was moved from the :meth:`ProcessFormView.get() <django."
"views.generic.edit.ProcessFormView.get>` method to the new :meth:`FormMixin."
"get_context_data() <django.views.generic.edit.FormMixin.get_context_data>` "
"method. This may be backwards incompatible if you have overridden the "
"``get_context_data()`` method without calling ``super()``."
msgstr ""

#: ../../releases/1.9.txt:1087
msgid "Support for PostGIS 1.5 has been dropped."
msgstr ""

#: ../../releases/1.9.txt:1089
msgid ""
"The ``django.contrib.sites.models.Site.domain`` field was changed to be :"
"attr:`~django.db.models.Field.unique`."
msgstr ""

#: ../../releases/1.9.txt:1092
msgid ""
"In order to enforce test isolation, database queries are not allowed by "
"default in :class:`~django.test.SimpleTestCase` tests anymore. You can "
"disable this behavior by setting the :attr:`~django.test.SimpleTestCase."
"allow_database_queries` class attribute to ``True`` on your test class."
msgstr ""

#: ../../releases/1.9.txt:1098
msgid ""
"``ResolverMatch.app_name`` was changed to contain the full namespace path in "
"the case of nested namespaces. For consistency with ``ResolverMatch."
"namespace``, the empty value is now an empty string instead of ``None``."
msgstr ""

#: ../../releases/1.9.txt:1103
msgid "For security hardening, session keys must be at least 8 characters."
msgstr ""

#: ../../releases/1.9.txt:1105
msgid ""
"Private function ``django.utils.functional.total_ordering()`` has been "
"removed. It contained a workaround for a ``functools.total_ordering()`` bug "
"in Python versions older than 2.7.3."
msgstr ""

#: ../../releases/1.9.txt:1109
msgid ""
"XML serialization (either through :djadmin:`dumpdata` or the syndication "
"framework) used to output any characters it received. Now if the content to "
"be serialized contains any control characters not allowed in the XML 1.0 "
"standard, the serialization will fail with a :exc:`ValueError`."
msgstr ""

#: ../../releases/1.9.txt:1114
msgid ""
":class:`~django.forms.CharField` now strips input of leading and trailing "
"whitespace by default. This can be disabled by setting the new :attr:"
"`~django.forms.CharField.strip` argument to ``False``."
msgstr ""

#: ../../releases/1.9.txt:1118
msgid ""
"Template text that is translated and uses two or more consecutive percent "
"signs, e.g. ``\"%%\"``, may have a new `msgid` after ``makemessages`` is run "
"(most likely the translation will be marked fuzzy). The new ``msgid`` will "
"be marked ``\"#, python-format\"``."
msgstr ""

#: ../../releases/1.9.txt:1123
msgid ""
"If neither :attr:`request.current_app <django.http.HttpRequest.current_app>` "
"nor :class:`Context.current_app <django.template.Context>` are set, the :"
"ttag:`url` template tag will now use the namespace of the current request. "
"Set ``request.current_app`` to ``None`` if you don't want to use a namespace "
"hint."
msgstr ""

#: ../../releases/1.9.txt:1129
msgid ""
"The :setting:`SILENCED_SYSTEM_CHECKS` setting now silences messages of all "
"levels. Previously, messages of ``ERROR`` level or higher were printed to "
"the console."
msgstr ""

#: ../../releases/1.9.txt:1133
msgid ""
"The ``FlatPage.enable_comments`` field is removed from the ``FlatPageAdmin`` "
"as it's unused by the application. If your project or a third-party app "
"makes use of it, :ref:`create a custom ModelAdmin <flatpages-admin>` to add "
"it back."
msgstr ""

#: ../../releases/1.9.txt:1137
msgid ""
"The return value of :meth:`~django.test.runner.DiscoverRunner."
"setup_databases` and the first argument of :meth:`~django.test.runner."
"DiscoverRunner.teardown_databases` changed. They used to be ``(old_names, "
"mirrors)`` tuples. Now they're just the first item, ``old_names``."
msgstr ""

#: ../../releases/1.9.txt:1143
msgid ""
"By default :class:`~django.test.LiveServerTestCase` attempts to find an "
"available port in the 8081-8179 range instead of just trying port 8081."
msgstr ""

#: ../../releases/1.9.txt:1146
msgid ""
"The system checks for :class:`~django.contrib.admin.ModelAdmin` now check "
"instances rather than classes."
msgstr ""

#: ../../releases/1.9.txt:1149
msgid ""
"The private API to apply mixed migration plans has been dropped for "
"performance reasons. Mixed plans consist of a list of migrations where some "
"are being applied and others are being unapplied."
msgstr ""

#: ../../releases/1.9.txt:1153
msgid ""
"The related model object descriptor classes in ``django.db.models.fields."
"related`` (private API) are moved from the ``related`` module to "
"``related_descriptors`` and renamed as follows:"
msgstr ""

#: ../../releases/1.9.txt:1157
msgid ""
"``ReverseSingleRelatedObjectDescriptor`` is ``ForwardManyToOneDescriptor``"
msgstr ""

#: ../../releases/1.9.txt:1158
msgid "``SingleRelatedObjectDescriptor`` is ``ReverseOneToOneDescriptor``"
msgstr ""

#: ../../releases/1.9.txt:1159
msgid "``ForeignRelatedObjectsDescriptor`` is ``ReverseManyToOneDescriptor``"
msgstr ""

#: ../../releases/1.9.txt:1160
msgid "``ManyRelatedObjectsDescriptor`` is ``ManyToManyDescriptor``"
msgstr ""

#: ../../releases/1.9.txt:1162
msgid ""
"If you implement a custom :data:`~django.conf.urls.handler404` view, it must "
"return a response with an HTTP 404 status code. Use :class:`~django.http."
"HttpResponseNotFound` or pass ``status=404`` to the :class:`~django.http."
"HttpResponse`. Otherwise, :setting:`APPEND_SLASH` won't work correctly with "
"``DEBUG=False``."
msgstr ""

#: ../../releases/1.9.txt:1171
msgid "Features deprecated in 1.9"
msgstr ""

#: ../../releases/1.9.txt:1174
msgid "``assignment_tag()``"
msgstr ""

#: ../../releases/1.9.txt:1176
msgid ""
"Django 1.4 added the ``assignment_tag`` helper to ease the creation of "
"template tags that store results in a template variable. The :meth:`~django."
"template.Library.simple_tag` helper has gained this same ability, making the "
"``assignment_tag`` obsolete. Tags that use ``assignment_tag`` should be "
"updated to use ``simple_tag``."
msgstr ""

#: ../../releases/1.9.txt:1183
msgid "``{% cycle %}`` syntax with comma-separated arguments"
msgstr ""

#: ../../releases/1.9.txt:1185
msgid ""
"The :ttag:`cycle` tag supports an inferior old syntax from previous Django "
"versions:"
msgstr ""

#: ../../releases/1.9.txt:1192
msgid ""
"Its parsing caused bugs with the current syntax, so support for the old "
"syntax will be removed in Django 1.10 following an accelerated deprecation."
msgstr ""

#: ../../releases/1.9.txt:1196
msgid "``ForeignKey`` and ``OneToOneField`` ``on_delete`` argument"
msgstr ""

#: ../../releases/1.9.txt:1198
msgid ""
"In order to increase awareness about cascading model deletion, the "
"``on_delete`` argument of ``ForeignKey`` and ``OneToOneField`` will be "
"required in Django 2.0."
msgstr ""

#: ../../releases/1.9.txt:1202
msgid ""
"Update models and existing migrations to explicitly set the argument. Since "
"the default is ``models.CASCADE``, add ``on_delete=models.CASCADE`` to all "
"``ForeignKey`` and ``OneToOneField``\\s that don't use a different option. "
"You can also pass it as the second positional argument if you don't care "
"about compatibility with older versions of Django."
msgstr ""

#: ../../releases/1.9.txt:1209
msgid "``Field.rel`` changes"
msgstr ""

#: ../../releases/1.9.txt:1211
msgid ""
"``Field.rel`` and its methods and attributes have changed to match the "
"related fields API. The ``Field.rel`` attribute is renamed to "
"``remote_field`` and many of its methods and attributes are either changed "
"or renamed."
msgstr ""

#: ../../releases/1.9.txt:1215
msgid ""
"The aim of these changes is to provide a documented API for relation fields."
msgstr ""

#: ../../releases/1.9.txt:1218
msgid "``GeoManager`` and ``GeoQuerySet`` custom methods"
msgstr ""

#: ../../releases/1.9.txt:1220
msgid ""
"All custom ``GeoQuerySet`` methods (``area()``, ``distance()``, "
"``gml()``, ...) have been replaced by equivalent geographic expressions in "
"annotations (see in new features). Hence the need to set a custom "
"``GeoManager`` to GIS-enabled models is now obsolete. As soon as your code "
"doesn't call any of the deprecated methods, you can simply remove the "
"``objects = GeoManager()`` lines from your models."
msgstr ""

#: ../../releases/1.9.txt:1228
msgid "Template loader APIs have changed"
msgstr ""

#: ../../releases/1.9.txt:1230
msgid ""
"Django template loaders have been updated to allow recursive template "
"extending. This change necessitated a new template loader API. The old "
"``load_template()`` and ``load_template_sources()`` methods are now "
"deprecated. Details about the new API can be found :ref:`in the template "
"loader documentation <custom-template-loaders>`."
msgstr ""

#: ../../releases/1.9.txt:1237
msgid "Passing a 3-tuple or an ``app_name`` to ``include()``"
msgstr ""

#: ../../releases/1.9.txt:1239
msgid ""
"The instance namespace part of passing a tuple as an argument to "
"``include()`` has been replaced by passing the ``namespace`` argument to "
"``include()``. For example::"
msgstr ""

#: ../../releases/1.9.txt:1251
msgid "becomes::"
msgstr ""

#: ../../releases/1.9.txt:1261
msgid ""
"The ``app_name`` argument to ``include()`` has been replaced by passing a 2-"
"tuple (as above), or passing an object or module with an ``app_name`` "
"attribute (as below). If the ``app_name`` is set in this new way, the "
"``namespace`` argument is no longer required. It will default to the value "
"of ``app_name``. For example, the URL patterns in the tutorial are changed "
"from:"
msgstr ""

#: ../../releases/1.9.txt:1275
msgid "to:"
msgstr ""

#: ../../releases/1.9.txt:1291
msgid ""
"This change also means that the old way of including an ``AdminSite`` "
"instance is deprecated. Instead, pass ``admin.site.urls`` directly to :func:"
"`~django.conf.urls.url()`:"
msgstr ""

#: ../../releases/1.9.txt:1306
msgid "URL application namespace required if setting an instance namespace"
msgstr ""

#: ../../releases/1.9.txt:1308
msgid ""
"In the past, an instance namespace without an application namespace would "
"serve the same purpose as the application namespace, but it was impossible "
"to reverse the patterns if there was an application namespace with the same "
"name. Includes that specify an instance namespace require that the included "
"URLconf sets an application namespace."
msgstr ""

#: ../../releases/1.9.txt:1315
msgid "``current_app`` parameter to ``contrib.auth`` views"
msgstr ""

#: ../../releases/1.9.txt:1317
msgid ""
"All views in ``django.contrib.auth.views`` have the following structure::"
msgstr ""

#: ../../releases/1.9.txt:1328
msgid ""
"As of Django 1.8, ``current_app`` is set on the ``request`` object. For "
"consistency, these views will require the caller to set ``current_app`` on "
"the ``request`` instead of passing it in a separate argument."
msgstr ""

#: ../../releases/1.9.txt:1333
msgid "``django.contrib.gis.geoip``"
msgstr ""

#: ../../releases/1.9.txt:1335
msgid ""
"The :mod:`django.contrib.gis.geoip2` module supersedes ``django.contrib.gis."
"geoip``. The new module provides a similar API except that it doesn't "
"provide the legacy GeoIP-Python API compatibility methods."
msgstr ""

#: ../../releases/1.9.txt:1342
msgid ""
"The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` has "
"been deprecated as it has no effect."
msgstr ""

#: ../../releases/1.9.txt:1345
msgid ""
"The ``check_aggregate_support()`` method of ``django.db.backends.base."
"BaseDatabaseOperations`` has been deprecated and will be removed in Django "
"2.0. The more general ``check_expression_support()`` should be used instead."
msgstr ""

#: ../../releases/1.9.txt:1350
msgid ""
"``django.forms.extras`` is deprecated. You can find :class:`~django.forms."
"SelectDateWidget` in ``django.forms.widgets`` (or simply ``django.forms``) "
"instead."
msgstr ""

#: ../../releases/1.9.txt:1354
msgid ""
"Private API ``django.db.models.fields.add_lazy_relation()`` is deprecated."
msgstr ""

#: ../../releases/1.9.txt:1356
msgid ""
"The ``django.contrib.auth.tests.utils.skipIfCustomUser()`` decorator is "
"deprecated. With the test discovery changes in Django 1.6, the tests for "
"``django.contrib`` apps are no longer run as part of the user's project. "
"Therefore, the ``@skipIfCustomUser`` decorator is no longer needed to "
"decorate tests in ``django.contrib.auth``."
msgstr ""

#: ../../releases/1.9.txt:1362
msgid ""
"If you customized some :ref:`error handlers <error-views>`, the view "
"signatures with only one request parameter are deprecated. The views should "
"now also accept a second ``exception`` positional parameter."
msgstr ""

#: ../../releases/1.9.txt:1366
msgid ""
"The ``django.utils.feedgenerator.Atom1Feed.mime_type`` and ``django.utils."
"feedgenerator.RssFeed.mime_type`` attributes are deprecated in favor of "
"``content_type``."
msgstr ""

#: ../../releases/1.9.txt:1370
msgid ""
":class:`~django.core.signing.Signer` now issues a warning if an invalid "
"separator is used. This will become an exception in Django 1.10."
msgstr ""

#: ../../releases/1.9.txt:1373
msgid ""
"``django.db.models.Field._get_val_from_obj()`` is deprecated in favor of "
"``Field.value_from_object()``."
msgstr ""

#: ../../releases/1.9.txt:1376
msgid ""
"``django.template.loaders.eggs.Loader`` is deprecated as distributing "
"applications as eggs is not recommended."
msgstr ""

#: ../../releases/1.9.txt:1379
msgid ""
"The ``callable_obj`` keyword argument to ``SimpleTestCase."
"assertRaisesMessage()`` is deprecated. Pass the callable as a positional "
"argument instead."
msgstr ""

#: ../../releases/1.9.txt:1383
msgid ""
"The ``allow_tags`` attribute on methods of ``ModelAdmin`` has been "
"deprecated. Use :func:`~django.utils.html.format_html`, :func:`~django.utils."
"html.format_html_join`, or :func:`~django.utils.safestring.mark_safe` when "
"constructing the method's return value instead."
msgstr ""

#: ../../releases/1.9.txt:1389
msgid ""
"The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is "
"deprecated. Use the new ``enclosures`` argument which accepts a list of "
"``Enclosure`` objects instead of a single one."
msgstr ""

#: ../../releases/1.9.txt:1393
msgid ""
"The ``django.template.loader.LoaderOrigin`` and ``django.template.base."
"StringOrigin`` aliases for ``django.template.base.Origin`` are deprecated."
msgstr ""

#: ../../releases/1.9.txt:1400
msgid "Features removed in 1.9"
msgstr ""

#: ../../releases/1.9.txt:1402
msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.9. See :ref:`deprecated-features-1.7` for details, "
"including how to remove usage of these features."
msgstr ""

#: ../../releases/1.9.txt:1406
msgid "``django.utils.dictconfig`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1408
msgid "``django.utils.importlib`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1410
msgid "``django.utils.tzinfo`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1412
msgid "``django.utils.unittest`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1414
msgid "The ``syncdb`` command is removed."
msgstr ""

#: ../../releases/1.9.txt:1416
msgid ""
"``django.db.models.signals.pre_syncdb`` and ``django.db.models.signals."
"post_syncdb`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1419
msgid "Support for ``allow_syncdb`` on database routers is removed."
msgstr ""

#: ../../releases/1.9.txt:1421
msgid ""
"Automatic syncing of apps without migrations is removed. Migrations are "
"compulsory for all apps unless you pass the :option:`migrate --run-syncdb` "
"option."
msgstr ""

#: ../../releases/1.9.txt:1425
msgid ""
"The SQL management commands for apps without migrations, ``sql``, "
"``sqlall``, ``sqlclear``, ``sqldropindexes``, and ``sqlindexes``, are "
"removed."
msgstr ""

#: ../../releases/1.9.txt:1428
msgid ""
"Support for automatic loading of ``initial_data`` fixtures and initial SQL "
"data is removed."
msgstr ""

#: ../../releases/1.9.txt:1431
msgid ""
"All models need to be defined inside an installed application or declare an "
"explicit :attr:`~django.db.models.Options.app_label`. Furthermore, it isn't "
"possible to import them before their application is loaded. In particular, "
"it isn't possible to import models inside the root package of an application."
msgstr ""

#: ../../releases/1.9.txt:1436
msgid ""
"The model and form ``IPAddressField`` is removed. A stub field remains for "
"compatibility with historical migrations."
msgstr ""

#: ../../releases/1.9.txt:1439
msgid "``AppCommand.handle_app()`` is no longer supported."
msgstr ""

#: ../../releases/1.9.txt:1441
msgid ""
"``RequestSite`` and ``get_current_site()`` are no longer importable from "
"``django.contrib.sites.models``."
msgstr ""

#: ../../releases/1.9.txt:1444
msgid "FastCGI support via the ``runfcgi`` management command is removed."
msgstr ""

#: ../../releases/1.9.txt:1446
msgid "``django.utils.datastructures.SortedDict`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1448
msgid "``ModelAdmin.declared_fieldsets`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1450
msgid "The ``util`` modules that provided backwards compatibility are removed:"
msgstr ""

#: ../../releases/1.9.txt:1452
msgid "``django.contrib.admin.util``"
msgstr ""

#: ../../releases/1.9.txt:1453
msgid "``django.contrib.gis.db.backends.util``"
msgstr ""

#: ../../releases/1.9.txt:1454
msgid "``django.db.backends.util``"
msgstr ""

#: ../../releases/1.9.txt:1455
msgid "``django.forms.util``"
msgstr ""

#: ../../releases/1.9.txt:1457
msgid "``ModelAdmin.get_formsets`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1459
msgid ""
"The backward compatible shims introduced to rename the ``BaseMemcachedCache."
"_get_memcache_timeout()`` method to ``get_backend_timeout()`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1463
msgid ""
"The ``--natural`` and ``-n`` options for :djadmin:`dumpdata` are removed."
msgstr ""

#: ../../releases/1.9.txt:1465
msgid ""
"The ``use_natural_keys`` argument for ``serializers.serialize()`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1467
msgid "Private API ``django.forms.forms.get_declared_fields()`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1469
msgid ""
"The ability to use a ``SplitDateTimeWidget`` with ``DateTimeField`` is "
"removed."
msgstr ""

#: ../../releases/1.9.txt:1472
msgid "The ``WSGIRequest.REQUEST`` property is removed."
msgstr ""

#: ../../releases/1.9.txt:1474
msgid "The class ``django.utils.datastructures.MergeDict`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1476
msgid "The ``zh-cn`` and ``zh-tw`` language codes are removed."
msgstr ""

#: ../../releases/1.9.txt:1478
msgid "The internal ``django.utils.functional.memoize()`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1480
msgid "``django.core.cache.get_cache`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1482
msgid "``django.db.models.loading`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1484
msgid "Passing callable arguments to querysets is no longer possible."
msgstr ""

#: ../../releases/1.9.txt:1486
msgid ""
"``BaseCommand.requires_model_validation`` is removed in favor of "
"``requires_system_checks``. Admin validators is replaced by admin checks."
msgstr ""

#: ../../releases/1.9.txt:1489
msgid ""
"The ``ModelAdmin.validator_class`` and ``default_validator_class`` "
"attributes are removed."
msgstr ""

#: ../../releases/1.9.txt:1492
msgid "``ModelAdmin.validate()`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1494
msgid ""
"``django.db.backends.DatabaseValidation.validate_field`` is removed in favor "
"of the ``check_field`` method."
msgstr ""

#: ../../releases/1.9.txt:1497
msgid "The ``validate`` management command is removed."
msgstr ""

#: ../../releases/1.9.txt:1499
msgid ""
"``django.utils.module_loading.import_by_path`` is removed in favor of "
"``django.utils.module_loading.import_string``."
msgstr ""

#: ../../releases/1.9.txt:1502
msgid ""
"``ssi`` and ``url`` template tags are removed from the ``future`` template "
"tag library."
msgstr ""

#: ../../releases/1.9.txt:1505
msgid "``django.utils.text.javascript_quote()`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1507
msgid ""
"Database test settings as independent entries in the database settings, "
"prefixed by ``TEST_``, are no longer supported."
msgstr ""

#: ../../releases/1.9.txt:1510
msgid ""
"The `cache_choices` option to :class:`~django.forms.ModelChoiceField` and :"
"class:`~django.forms.ModelMultipleChoiceField` is removed."
msgstr ""

#: ../../releases/1.9.txt:1513
msgid ""
"The default value of the :attr:`RedirectView.permanent <django.views.generic."
"base.RedirectView.permanent>` attribute has changed from ``True`` to "
"``False``."
msgstr ""

#: ../../releases/1.9.txt:1517
msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` is removed in favor of ``django."
"contrib.flatpages.sitemaps.FlatPageSitemap``."
msgstr ""

#: ../../releases/1.9.txt:1520
msgid "Private API ``django.test.utils.TestTemplateLoader`` is removed."
msgstr ""

#: ../../releases/1.9.txt:1522
msgid "The ``django.contrib.contenttypes.generic`` module is removed."
msgstr ""
