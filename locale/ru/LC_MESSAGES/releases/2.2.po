# Russian translations for Django package
# Английские переводы для пакета Django.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2020-02-13 22:13+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../releases/2.2.txt:3
msgid "Django 2.2 release notes"
msgstr ""

#: ../../releases/2.2.txt:5
msgid "*April 1, 2019*"
msgstr ""

#: ../../releases/2.2.txt:7
msgid "Welcome to Django 2.2!"
msgstr ""

#: ../../releases/2.2.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-2.2>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-2.2>` "
"you'll want to be aware of when upgrading from Django 2.1 or earlier. We've :"
"ref:`begun the deprecation process for some features <deprecated-"
"features-2.2>`."
msgstr ""

#: ../../releases/2.2.txt:15
msgid ""
"See the :doc:`/howto/upgrade-version` guide if you're updating an existing "
"project."
msgstr ""

#: ../../releases/2.2.txt:18
msgid ""
"Django 2.2 is designated as a :term:`long-term support release`. It will "
"receive security updates for at least three years after its release. Support "
"for the previous LTS, Django 1.11, will end in April 2020."
msgstr ""

#: ../../releases/2.2.txt:23
msgid "Python compatibility"
msgstr ""

#: ../../releases/2.2.txt:25
msgid ""
"Django 2.2 supports Python 3.5, 3.6, 3.7, and 3.8 (as of 2.2.8). We **highly "
"recommend** and only officially support the latest release of each series."
msgstr ""

#: ../../releases/2.2.txt:32
msgid "What's new in Django 2.2"
msgstr ""

#: ../../releases/2.2.txt:35
msgid "Constraints"
msgstr ""

#: ../../releases/2.2.txt:37
msgid ""
"The new :class:`~django.db.models.CheckConstraint` and :class:`~django.db."
"models.UniqueConstraint` classes enable adding custom database constraints. "
"Constraints are added to models using the :attr:`Meta.constraints <django.db."
"models.Options.constraints>` option."
msgstr ""

#: ../../releases/2.2.txt:43
msgid "Minor features"
msgstr ""

#: ../../releases/2.2.txt:46
msgid ":mod:`django.contrib.admin`"
msgstr ""

#: ../../releases/2.2.txt:48
msgid ""
"Added a CSS class to the column headers of :class:`~django.contrib.admin."
"TabularInline`."
msgstr ""

#: ../../releases/2.2.txt:52
msgid ":mod:`django.contrib.auth`"
msgstr ""

#: ../../releases/2.2.txt:54
msgid ""
"The ``HttpRequest`` is now passed as the first positional argument to :meth:"
"`.RemoteUserBackend.configure_user`, if it accepts it."
msgstr ""

#: ../../releases/2.2.txt:58 ../../releases/2.2.txt:315
msgid ":mod:`django.contrib.gis`"
msgstr ""

#: ../../releases/2.2.txt:60
msgid ""
"Added Oracle support for the :class:`~django.contrib.gis.db.models.functions."
"Envelope` function."
msgstr ""

#: ../../releases/2.2.txt:63
msgid ""
"Added SpatiaLite support for the :lookup:`coveredby` and :lookup:`covers` "
"lookups."
msgstr ""

#: ../../releases/2.2.txt:67
msgid ":mod:`django.contrib.postgres`"
msgstr ""

#: ../../releases/2.2.txt:69
msgid ""
"The new ``ordering`` argument for :class:`~django.contrib.postgres."
"aggregates.ArrayAgg` and :class:`~django.contrib.postgres.aggregates."
"StringAgg` determines the ordering of the aggregated elements."
msgstr ""

#: ../../releases/2.2.txt:74
msgid ""
"The new :class:`~django.contrib.postgres.indexes.BTreeIndex`, :class:"
"`~django.contrib.postgres.indexes.HashIndex` and :class:`~django.contrib."
"postgres.indexes.SpGistIndex` classes allow creating ``B-Tree``, ``hash``, "
"and ``SP-GiST`` indexes in the database."
msgstr ""

#: ../../releases/2.2.txt:79
msgid ""
":class:`~django.contrib.postgres.indexes.BrinIndex` now has the "
"``autosummarize`` parameter."
msgstr ""

#: ../../releases/2.2.txt:82
msgid ""
"The new ``search_type`` parameter of :class:`~django.contrib.postgres.search."
"SearchQuery` allows searching for a phrase or raw expression."
msgstr ""

#: ../../releases/2.2.txt:87
msgid ":mod:`django.contrib.staticfiles`"
msgstr ""

#: ../../releases/2.2.txt:89
msgid ""
"Added path matching to the :option:`collectstatic --ignore` option so that "
"patterns like ``/vendor/*.js`` can be used."
msgstr ""

#: ../../releases/2.2.txt:93
msgid "Database backends"
msgstr ""

#: ../../releases/2.2.txt:95
msgid "Added result streaming for :meth:`.QuerySet.iterator` on SQLite."
msgstr ""

#: ../../releases/2.2.txt:98
msgid "Generic Views"
msgstr ""

#: ../../releases/2.2.txt:100
msgid ""
"The new :meth:`View.setup <django.views.generic.base.View.setup>` hook "
"initializes view attributes before calling :meth:`~django.views.generic.base."
"View.dispatch`. It allows mixins to setup instance attributes for reuse in "
"child classes."
msgstr ""

#: ../../releases/2.2.txt:106
msgid "Internationalization"
msgstr ""

#: ../../releases/2.2.txt:108
msgid "Added support and translations for the Armenian language."
msgstr ""

#: ../../releases/2.2.txt:111
msgid "Management Commands"
msgstr ""

#: ../../releases/2.2.txt:113
msgid ""
"The new :option:`--force-color` option forces colorization of the command "
"output."
msgstr ""

#: ../../releases/2.2.txt:116
msgid ""
":djadmin:`inspectdb` now creates models for foreign tables on PostgreSQL."
msgstr ""

#: ../../releases/2.2.txt:118
msgid ""
":option:`inspectdb --include-views` now creates models for materialized "
"views on Oracle and PostgreSQL."
msgstr ""

#: ../../releases/2.2.txt:121
msgid ""
"The new :option:`inspectdb --include-partitions` option allows creating "
"models for partition tables on PostgreSQL. In older versions, models are "
"created child tables instead the parent."
msgstr ""

#: ../../releases/2.2.txt:125
msgid ""
":djadmin:`inspectdb` now introspects :class:`~django.db.models."
"DurationField` for Oracle and PostgreSQL, and :class:`~django.db.models."
"AutoField` for SQLite."
msgstr ""

#: ../../releases/2.2.txt:129
msgid ""
"On Oracle, :djadmin:`dbshell` is wrapped with ``rlwrap``, if available. "
"``rlwrap`` provides a command history and editing of keyboard input."
msgstr ""

#: ../../releases/2.2.txt:132
msgid ""
"The new :option:`makemigrations --no-header` option avoids writing header "
"comments in generated migration file(s). This option is also available for :"
"djadmin:`squashmigrations`."
msgstr ""

#: ../../releases/2.2.txt:136
msgid ""
":djadmin:`runserver` can now use `Watchman <https://facebook.github.io/"
"watchman/>`_ to improve the performance of watching a large number of files "
"for changes."
msgstr ""

#: ../../releases/2.2.txt:141
msgid "Migrations"
msgstr ""

#: ../../releases/2.2.txt:143
msgid ""
"The new :option:`migrate --plan` option prints the list of migration "
"operations that will be performed."
msgstr ""

#: ../../releases/2.2.txt:146
msgid "``NoneType`` can now be serialized in migrations."
msgstr ""

#: ../../releases/2.2.txt:148
msgid ""
"You can now :ref:`register custom serializers <custom-migration-"
"serializers>` for migrations."
msgstr ""

#: ../../releases/2.2.txt:152
msgid "Models"
msgstr ""

#: ../../releases/2.2.txt:154
msgid ""
"Added support for PostgreSQL operator classes (:attr:`.Index.opclasses`)."
msgstr ""

#: ../../releases/2.2.txt:156
msgid "Added support for partial indexes (:attr:`.Index.condition`)."
msgstr ""

#: ../../releases/2.2.txt:158
msgid ""
"Added the :class:`~django.db.models.functions.NullIf` and :class:`~django.db."
"models.functions.Reverse` database functions, as well as many :ref:`math "
"database functions <math-functions>`."
msgstr ""

#: ../../releases/2.2.txt:162
msgid ""
"Setting the new ``ignore_conflicts`` parameter of :meth:`.QuerySet."
"bulk_create` to ``True`` tells the database to ignore failure to insert rows "
"that fail uniqueness constraints or other checks."
msgstr ""

#: ../../releases/2.2.txt:166
msgid ""
"The new :class:`~django.db.models.functions.ExtractIsoYear` function "
"extracts ISO-8601 week-numbering years from :class:`~django.db.models."
"DateField` and :class:`~django.db.models.DateTimeField`, and the new :lookup:"
"`iso_year` lookup allows querying by an ISO-8601 week-numbering year."
msgstr ""

#: ../../releases/2.2.txt:171
msgid ""
"The new :meth:`.QuerySet.bulk_update` method allows efficiently updating "
"specific fields on multiple model instances."
msgstr ""

#: ../../releases/2.2.txt:174
msgid ""
"Django no longer always starts a transaction when a single query is being "
"performed, such as ``Model.save()``, ``QuerySet.update()``, and ``Model."
"delete()``. This improves the performance of autocommit by reducing the "
"number of database round trips."
msgstr ""

#: ../../releases/2.2.txt:179
msgid ""
"Added SQLite support for the :class:`~django.db.models.StdDev` and :class:"
"`~django.db.models.Variance` functions."
msgstr ""

#: ../../releases/2.2.txt:182
msgid ""
"The handling of ``DISTINCT`` aggregation is added to the :class:`~django.db."
"models.Aggregate` class. Adding :attr:`allow_distinct = True <django.db."
"models.Aggregate.allow_distinct>` as a class attribute on ``Aggregate`` "
"subclasses allows a ``distinct`` keyword argument to be specified on "
"initialization to ensure that the aggregate function is only called for each "
"distinct value of ``expressions``."
msgstr ""

#: ../../releases/2.2.txt:189
msgid ""
"The :meth:`.RelatedManager.add`, :meth:`~.RelatedManager.create`, :meth:`~."
"RelatedManager.remove`,  :meth:`~.RelatedManager.set`, ``get_or_create()``, "
"and ``update_or_create()`` methods are now allowed on many-to-many "
"relationships with intermediate models. The new ``through_defaults`` "
"argument is used to specify values for new intermediate model instance(s)."
msgstr ""

#: ../../releases/2.2.txt:197
msgid "Requests and Responses"
msgstr ""

#: ../../releases/2.2.txt:199
msgid ""
"Added :attr:`.HttpRequest.headers` to allow simple access to a request's "
"headers."
msgstr ""

#: ../../releases/2.2.txt:203
msgid "Serialization"
msgstr ""

#: ../../releases/2.2.txt:205
msgid ""
"You can now deserialize data using natural keys containing :ref:`forward "
"references <natural-keys-and-forward-references>` by passing "
"``handle_forward_references=True`` to ``serializers.deserialize()``. "
"Additionally, :djadmin:`loaddata` handles forward references automatically."
msgstr ""

#: ../../releases/2.2.txt:211
msgid "Tests"
msgstr ""

#: ../../releases/2.2.txt:213
msgid ""
"The new :meth:`.SimpleTestCase.assertURLEqual` assertion checks for a given "
"URL, ignoring the ordering of the query string. :meth:`~.SimpleTestCase."
"assertRedirects` uses the new assertion."
msgstr ""

#: ../../releases/2.2.txt:217
msgid ""
"The test :class:`~.django.test.Client` now supports automatic JSON "
"serialization of list and tuple ``data`` when ``content_type='application/"
"json'``."
msgstr ""

#: ../../releases/2.2.txt:221
msgid ""
"The new :setting:`ORACLE_MANAGED_FILES <TEST_ORACLE_MANAGED_FILES>` test "
"database setting allows using Oracle Managed Files (OMF) tablespaces."
msgstr ""

#: ../../releases/2.2.txt:224
msgid ""
"Deferrable database constraints are now checked at the end of each :class:"
"`~django.test.TestCase` test on SQLite 3.20+, just like on other backends "
"that support deferrable constraints. These checks aren't implemented for "
"older versions of SQLite because they would require expensive table "
"introspection there."
msgstr ""

#: ../../releases/2.2.txt:230
msgid ""
":class:`~django.test.runner.DiscoverRunner` now skips the setup of databases "
"not :ref:`referenced by tests<testing-multi-db>`."
msgstr ""

#: ../../releases/2.2.txt:234
msgid "URLs"
msgstr ""

#: ../../releases/2.2.txt:236
msgid ""
"The new :attr:`.ResolverMatch.route` attribute stores the route of the "
"matching URL pattern."
msgstr ""

#: ../../releases/2.2.txt:240
msgid "Validators"
msgstr ""

#: ../../releases/2.2.txt:242
msgid ""
":class:`.MaxValueValidator`, :class:`.MinValueValidator`, :class:`."
"MinLengthValidator`, and :class:`.MaxLengthValidator` now accept a callable "
"``limit_value``."
msgstr ""

#: ../../releases/2.2.txt:249
msgid "Backwards incompatible changes in 2.2"
msgstr ""

#: ../../releases/2.2.txt:252
msgid "Database backend API"
msgstr ""

#: ../../releases/2.2.txt:254
msgid ""
"This section describes changes that may be needed in third-party database "
"backends."
msgstr ""

#: ../../releases/2.2.txt:257
msgid ""
"Third-party database backends must implement support for table check "
"constraints or set ``DatabaseFeatures.supports_table_check_constraints`` to "
"``False``."
msgstr ""

#: ../../releases/2.2.txt:261
msgid ""
"Third party database backends must implement support for ignoring "
"constraints or uniqueness errors while inserting or set ``DatabaseFeatures."
"supports_ignore_conflicts`` to ``False``."
msgstr ""

#: ../../releases/2.2.txt:265
msgid ""
"Third party database backends must implement introspection for "
"``DurationField`` or set ``DatabaseFeatures.can_introspect_duration_field`` "
"to ``False``."
msgstr ""

#: ../../releases/2.2.txt:269
msgid "``DatabaseFeatures.uses_savepoints`` now defaults to ``True``."
msgstr ""

#: ../../releases/2.2.txt:271
msgid ""
"Third party database backends must implement support for partial indexes or "
"set ``DatabaseFeatures.supports_partial_indexes`` to ``False``."
msgstr ""

#: ../../releases/2.2.txt:274
msgid ""
"``DatabaseIntrospection.table_name_converter()`` and "
"``column_name_converter()`` are removed. Third party database backends may "
"need to instead implement ``DatabaseIntrospection.identifier_converter()``. "
"In that case, the constraint names that ``DatabaseIntrospection."
"get_constraints()`` returns must be normalized by ``identifier_converter()``."
msgstr ""

#: ../../releases/2.2.txt:281
msgid ""
"SQL generation for indexes is moved from :class:`~django.db.models.Index` to "
"``SchemaEditor`` and these ``SchemaEditor`` methods are added:"
msgstr ""

#: ../../releases/2.2.txt:284
msgid "``_create_primary_key_sql()`` and ``_delete_primary_key_sql()``"
msgstr ""

#: ../../releases/2.2.txt:285
msgid "``_delete_index_sql()`` (to pair with ``_create_index_sql()``)"
msgstr ""

#: ../../releases/2.2.txt:286
msgid "``_delete_unique_sql`` (to pair with ``_create_unique_sql()``)"
msgstr ""

#: ../../releases/2.2.txt:287
msgid "``_delete_fk_sql()`` (to pair with ``_create_fk_sql()``)"
msgstr ""

#: ../../releases/2.2.txt:288
msgid "``_create_check_sql()`` and ``_delete_check_sql()``"
msgstr ""

#: ../../releases/2.2.txt:290
msgid ""
"The third argument of ``DatabaseWrapper.__init__()``, "
"``allow_thread_sharing``, is removed."
msgstr ""

#: ../../releases/2.2.txt:294
msgid "Admin actions are no longer collected from base ``ModelAdmin`` classes"
msgstr ""

#: ../../releases/2.2.txt:296
msgid "For example, in older versions of Django::"
msgstr ""

#: ../../releases/2.2.txt:306
msgid "``SubAdmin`` would have actions ``'a'`` and ``'b'``."
msgstr ""

#: ../../releases/2.2.txt:308
msgid ""
"Now ``actions`` follows standard Python inheritance. To get the same result "
"as before::"
msgstr ""

#: ../../releases/2.2.txt:317
msgid "Support for GDAL 1.9 and 1.10 is dropped."
msgstr ""

#: ../../releases/2.2.txt:320
msgid "``TransactionTestCase`` serialized data loading"
msgstr ""

#: ../../releases/2.2.txt:322
msgid ""
"Initial data migrations are now loaded in :class:`~django.test."
"TransactionTestCase` at the end of the test, after the database flush. In "
"older versions, this data was loaded at the beginning of the test, but this "
"prevents the :option:`test --keepdb` option from working properly (the "
"database was empty at the end of the whole test suite). This change "
"shouldn't have an impact on your tests unless you've customized :class:"
"`~django.test.TransactionTestCase`'s internals."
msgstr ""

#: ../../releases/2.2.txt:331
msgid "``sqlparse`` is required dependency"
msgstr ""

#: ../../releases/2.2.txt:333
msgid ""
"To simplify a few parts of Django's database handling, `sqlparse <https://"
"pypi.org/project/sqlparse/>`_ is now a required dependency. It's "
"automatically installed along with Django."
msgstr ""

#: ../../releases/2.2.txt:338
msgid "``cached_property`` aliases"
msgstr ""

#: ../../releases/2.2.txt:340
msgid "In usage like::"
msgstr ""

#: ../../releases/2.2.txt:352
msgid ""
"``alias`` is not cached. Where the problem can be detected (Python 3.6 and "
"later), such usage now raises ``TypeError: Cannot assign the same "
"cached_property to two different names ('base' and 'alias').``"
msgstr ""

#: ../../releases/2.2.txt:356
msgid "Use this instead::"
msgstr ""

#: ../../releases/2.2.txt:367
msgid "Permissions for proxy models"
msgstr ""

#: ../../releases/2.2.txt:369
msgid ""
":ref:`Permissions for proxy models <proxy-models-permissions-topic>` are now "
"created using the content type of the proxy model rather than the content "
"type of the concrete model. A migration will update existing permissions "
"when you run :djadmin:`migrate`."
msgstr ""

#: ../../releases/2.2.txt:374
msgid ""
"In the admin, the change is transparent for proxy models having the same "
"``app_label`` as their concrete model. However, in older versions, users "
"with permissions for a proxy model with a *different* ``app_label`` than its "
"concrete model couldn't access the model in the admin. That's now fixed, but "
"you might want to audit the permissions assignments for such proxy models "
"(``[add|view|change|delete]_myproxy``) prior to upgrading to ensure the new "
"access is appropriate."
msgstr ""

#: ../../releases/2.2.txt:382
msgid ""
"Finally, proxy model permission strings must be updated to use their own "
"``app_label``. For example, for ``app.MyProxyModel`` inheriting from "
"``other_app.ConcreteModel``, update ``user.has_perm('other_app."
"add_myproxymodel')`` to ``user.has_perm('app.add_myproxymodel')``."
msgstr ""

#: ../../releases/2.2.txt:389
msgid "Merging of form ``Media`` assets"
msgstr ""

#: ../../releases/2.2.txt:391
msgid ""
"Form ``Media`` assets are now merged using a topological sort algorithm, as "
"the old pairwise merging algorithm is insufficient for some cases. CSS and "
"JavaScript files which don't include their dependencies may now be sorted "
"incorrectly (where the old algorithm produced results correctly by "
"coincidence)."
msgstr ""

#: ../../releases/2.2.txt:397
msgid ""
"Audit all ``Media`` classes for any missing dependencies. For example, "
"widgets depending on ``django.jQuery`` must specify ``js=['admin/js/jquery."
"init.js', ...]`` when :ref:`declaring form media assets <assets-as-a-static-"
"definition>`."
msgstr ""

#: ../../releases/2.2.txt:403 ../../releases/2.2.txt:492
msgid "Miscellaneous"
msgstr ""

#: ../../releases/2.2.txt:405
msgid ""
"To improve readability, the ``UUIDField`` form field now displays values "
"with dashes, e.g. ``550e8400-e29b-41d4-a716-446655440000`` instead of "
"``550e8400e29b41d4a716446655440000``."
msgstr ""

#: ../../releases/2.2.txt:409
msgid ""
"On SQLite, ``PositiveIntegerField`` and ``PositiveSmallIntegerField`` now "
"include a check constraint to prevent negative values in the database. If "
"you have existing invalid data and run a migration that recreates a table, "
"you'll see ``CHECK constraint failed``."
msgstr ""

#: ../../releases/2.2.txt:414
msgid ""
"For consistency with WSGI servers, the test client now sets the ``Content-"
"Length`` header to a string rather than an integer."
msgstr ""

#: ../../releases/2.2.txt:417
msgid ""
"The return value of :func:`django.utils.text.slugify` is no longer marked as "
"HTML safe."
msgstr ""

#: ../../releases/2.2.txt:420
msgid ""
"The default truncation character used by the :tfilter:`urlizetrunc`, :"
"tfilter:`truncatechars`, :tfilter:`truncatechars_html`, :tfilter:"
"`truncatewords`, and :tfilter:`truncatewords_html` template filters is now "
"the real ellipsis character (``…``) instead of 3 dots. You may have to adapt "
"some test output comparisons."
msgstr ""

#: ../../releases/2.2.txt:426
msgid ""
"Support for bytestring paths in the template filesystem loader is removed."
msgstr ""

#: ../../releases/2.2.txt:428
msgid ""
":func:`django.utils.http.urlsafe_base64_encode` now returns a string instead "
"of a bytestring, and :func:`django.utils.http.urlsafe_base64_decode` may no "
"longer be passed a bytestring."
msgstr ""

#: ../../releases/2.2.txt:432
msgid "Support for ``cx_Oracle`` < 6.0 is removed."
msgstr ""

#: ../../releases/2.2.txt:434
msgid ""
"The minimum supported version of ``mysqlclient`` is increased from 1.3.7 to "
"1.3.13."
msgstr ""

#: ../../releases/2.2.txt:437
msgid ""
"The minimum supported version of SQLite is increased from 3.7.15 to 3.8.3."
msgstr ""

#: ../../releases/2.2.txt:439
msgid ""
"In an attempt to provide more semantic query data, ``NullBooleanSelect`` now "
"renders ``<option>`` values of ``unknown``, ``true``, and ``false`` instead "
"of ``1``, ``2``, and ``3``. For backwards compatibility, the old values are "
"still accepted as data."
msgstr ""

#: ../../releases/2.2.txt:444
msgid ""
":attr:`Group.name <django.contrib.auth.models.Group.name>` ``max_length`` is "
"increased from 80 to 150 characters."
msgstr ""

#: ../../releases/2.2.txt:447
msgid ""
"Tests that violate deferrable database constraints now error when run on "
"SQLite 3.20+, just like on other backends that support such constraints."
msgstr ""

#: ../../releases/2.2.txt:450
msgid ""
"To catch usage mistakes, the test :class:`~django.test.Client` and :func:"
"`django.utils.http.urlencode` now raise ``TypeError`` if ``None`` is passed "
"as a value to encode because ``None`` can't be encoded in GET and POST data. "
"Either pass an empty string or omit the value."
msgstr ""

#: ../../releases/2.2.txt:455
msgid ""
"The :djadmin:`ping_google` management command now defaults to ``https`` "
"instead of ``http`` for the sitemap's URL. If your site uses http, use the "
"new :option:`ping_google --sitemap-uses-http` option. If you use the :func:"
"`~django.contrib.sitemaps.ping_google` function, set the new "
"``sitemap_uses_https`` argument to ``False``."
msgstr ""

#: ../../releases/2.2.txt:461
msgid ""
":djadmin:`runserver` no longer supports `pyinotify` (replaced by Watchman)."
msgstr ""

#: ../../releases/2.2.txt:463
msgid ""
"The :class:`~django.db.models.Avg`, :class:`~django.db.models.StdDev`, and :"
"class:`~django.db.models.Variance` aggregate functions now return a "
"``Decimal`` instead of a ``float`` when the input is ``Decimal``."
msgstr ""

#: ../../releases/2.2.txt:467
msgid ""
"Tests will fail on SQLite if apps without migrations have relations to apps "
"with migrations. This has been a documented restriction since migrations "
"were added in Django 1.7, but it fails more reliably now. You'll see tests "
"failing with errors like ``no such table: <app_label>_<model>``. This was "
"observed with several third-party apps that had models in tests without "
"migrations. You must add migrations for such models."
msgstr ""

#: ../../releases/2.2.txt:474
msgid ""
"Providing an integer in the ``key`` argument of the :meth:`.cache.delete` "
"or :meth:`.cache.get` now raises :exc:`ValueError`."
msgstr ""

#: ../../releases/2.2.txt:480
msgid "Features deprecated in 2.2"
msgstr ""

#: ../../releases/2.2.txt:483
msgid "Model ``Meta.ordering`` will no longer affect ``GROUP BY`` queries"
msgstr ""

#: ../../releases/2.2.txt:485
msgid ""
"A model's ``Meta.ordering`` affecting ``GROUP BY`` queries (such as ``."
"annotate().values()``) is a common source of confusion. Such queries now "
"issue a deprecation warning with the advice to add an ``order_by()`` to "
"retain the current query. ``Meta.ordering`` will be ignored in such queries "
"starting in Django 3.1."
msgstr ""

#: ../../releases/2.2.txt:494
msgid ""
"``django.utils.timezone.FixedOffset`` is deprecated in favor of :class:"
"`datetime.timezone`."
msgstr ""

#: ../../releases/2.2.txt:497
msgid ""
"The undocumented ``QuerySetPaginator`` alias of ``django.core.paginator."
"Paginator`` is deprecated."
msgstr ""

#: ../../releases/2.2.txt:500
msgid ""
"The ``FloatRangeField`` model and form fields in ``django.contrib.postgres`` "
"are deprecated in favor of a new name, ``DecimalRangeField``, to match the "
"underlying ``numrange`` data type used in the database."
msgstr ""

#: ../../releases/2.2.txt:504
msgid ""
"The ``FILE_CHARSET`` setting is deprecated. Starting with Django 3.1, files "
"read from disk must be UTF-8 encoded."
msgstr ""

#: ../../releases/2.2.txt:507
msgid ""
"``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` is "
"deprecated due to the intractable problems that it has. Use :class:`."
"ManifestStaticFilesStorage` or a third-party cloud storage instead."
msgstr ""

#: ../../releases/2.2.txt:511
msgid ""
":meth:`.RemoteUserBackend.configure_user` is now passed ``request`` as the "
"first positional argument, if it accepts it. Support for overrides that "
"don't accept it will be removed in Django 3.1."
msgstr ""

#: ../../releases/2.2.txt:515
msgid ""
"The :attr:`.SimpleTestCase.allow_database_queries`, :attr:`."
"TransactionTestCase.multi_db`, and :attr:`.TestCase.multi_db` attributes are "
"deprecated in favor of :attr:`.SimpleTestCase.databases`, :attr:`."
"TransactionTestCase.databases`, and :attr:`.TestCase.databases`. These new "
"attributes allow databases dependencies to be declared in order to prevent "
"unexpected queries against non-default databases to leak state between "
"tests. The previous behavior of ``allow_database_queries=True`` and "
"``multi_db=True`` can be achieved by setting ``databases='__all__'``."
msgstr ""
