# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 610cc5e5e9694a528031d3e170960069
#: ../../releases/1.5.txt:3
msgid "Django 1.5 release notes"
msgstr ""

# 49619474e0d645fe8bae7a4eb1aae73e
#: ../../releases/1.5.txt:5
msgid "*February 26, 2013*"
msgstr ""

# 8ef93f015caa4e69b5966ae1709280e5
#: ../../releases/1.5.txt:7
msgid "Welcome to Django 1.5!"
msgstr ""

#: ../../releases/1.5.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.5>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.5>` "
"you'll want to be aware of when upgrading from Django 1.4 or older versions. "
"We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.5>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.5>`."
msgstr ""

# ea485657362b45f3adcf7cef5b8a55dc
#: ../../releases/1.5.txt:17
msgid "Overview"
msgstr ""

# bb5759ab85e74d238f2e0b70de4f5275
#: ../../releases/1.5.txt:19
msgid ""
"The biggest new feature in Django 1.5 is the `configurable User model`_. "
"Before Django 1.5, applications that wanted to use Django's auth framework (:"
"mod:`django.contrib.auth`) were forced to use Django's definition of a \"user"
"\". In Django 1.5, you can now swap out the ``User`` model for one that you "
"write yourself. This could be a simple extension to the existing ``User`` "
"model -- for example, you could add a Twitter or Facebook ID field -- or you "
"could completely replace the ``User`` with one totally customized for your "
"site."
msgstr ""

# 7fc34f956c574eddb9ab7734caf83213
#: ../../releases/1.5.txt:27
msgid ""
"Django 1.5 is also the first release with `Python 3 support`_! We're "
"labeling this support \"experimental\" because we don't yet consider it "
"production-ready, but everything's in place for you to start porting your "
"apps to Python 3. Our next release, Django 1.6, will support Python 3 "
"without reservations."
msgstr ""

# e2e3a92c7abb4a60b3ea2077b1b8993c
#: ../../releases/1.5.txt:32
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

# 8861ef7b0e9d4241a9b2f2623163dfef
#: ../../releases/1.5.txt:34
msgid ""
"`Support for saving a subset of model's fields`_ - :meth:`Model.save() "
"<django.db.models.Model.save()>` now accepts an ``update_fields`` argument, "
"letting you specify which fields are written back to the database when you "
"call ``save()``. This can help in high-concurrency operations, and can "
"improve performance."
msgstr ""

# 3091c43f1d1c4a7a806bb6a78a2b2c91
#: ../../releases/1.5.txt:40
msgid ""
"Better `support for streaming responses <#explicit-streaming-responses>`_ "
"via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

# cffbfe5d891444768e43ed00c294a4d3
#: ../../releases/1.5.txt:43
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

# 2a528e9803d04249bc20f525a6d055f4
#: ../../releases/1.5.txt:45
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

#: ../../releases/1.5.txt:47
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>`. However, "
"as with previous releases, Django 1.5 ships with some minor :ref:`backwards "
"incompatible changes <backwards-incompatible-1.5>`; people upgrading from "
"previous versions of Django should read that list carefully."
msgstr ""

# 52b7f66a8bd14e9ca72b7b8bac6ebf73
#: ../../releases/1.5.txt:53
msgid ""
"One deprecated feature worth noting is the shift to \"new-style\" :ttag:"
"`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was "
"interpreted incorrectly (Django considered ``\"myview\"`` to be a literal "
"name of a view, not a template variable named ``myview``). Django 1.3 and "
"above introduced the ``{% load url from future %}`` syntax to bring in the "
"corrected behavior where ``myview`` was seen as a variable."
msgstr ""

# 13cf4f11cf204047b8f7190d5560fcb7
#: ../../releases/1.5.txt:60
msgid ""
"The upshot of this is that if you are not using ``{% load url from future %}"
"`` in your templates, you'll need to change tags like ``{% url myview %}`` "
"to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future %}"
"`` you can simply remove that line under Django 1.5"
msgstr ""

# 582b7983f13d4a70866fff42ae3f998e
#: ../../releases/1.5.txt:66
msgid "Python compatibility"
msgstr ""

# a650d9108cd84c39ad76b09036e11f15
#: ../../releases/1.5.txt:68
msgid ""
"Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** "
"Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

# bcd7ed5bcc944d4bb4590bb4e40e9d9d
#: ../../releases/1.5.txt:71
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.6 or newer as their "
"default version. If you're still using Python 2.5, however, you'll need to "
"stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our "
"support policy </internals/release-process>`, Django 1.4 will continue to "
"receive security support until the release of Django 1.6."
msgstr ""

# 94d01613a48d4e2ba0257e62fb2654cc
#: ../../releases/1.5.txt:78
msgid ""
"Django 1.5 does not run on a Jython final release, because Jython's latest "
"release doesn't currently support Python 2.6. However, Jython currently does "
"offer an alpha release featuring 2.7 support, and Django 1.5 supports that "
"alpha release."
msgstr ""

# a43d32f90f8b4a6ea0c4345e2134d3dd
#: ../../releases/1.5.txt:84
msgid "Python 3 support"
msgstr ""

# d988d6b857d54e1f845f35761e8d04b5
#: ../../releases/1.5.txt:86
msgid ""
"Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and "
"above. This comes in the form of a **single** codebase; you don't need to "
"install a different version of Django on Python 3. This means that you can "
"write applications targeted for just Python 2, just Python 3, or single "
"applications that support both platforms."
msgstr ""

# 84ad5427dc024c568284253e311043a4
#: ../../releases/1.5.txt:92
msgid ""
"However, we're labeling this support \"experimental\" for now: although it's "
"received extensive testing via our automated test suite, it's received very "
"little real-world testing. We've done our best to eliminate bugs, but we "
"can't be sure we covered all possible uses of Django."
msgstr ""

# f485bef721fb4ae1bd88f1f6c8f1a876
#: ../../releases/1.5.txt:97
msgid ""
"Some features of Django aren't available because they depend on third-party "
"software that hasn't been ported to Python 3 yet, including:"
msgstr ""

# 55364610460c4f1180cb22c5ae7cfdb0
#: ../../releases/1.5.txt:100
msgid "the MySQL database backend (depends on MySQLdb)"
msgstr ""

# 8469b7ff04294cf28adf4cfda6805ee6
#: ../../releases/1.5.txt:101
msgid ":class:`~django.db.models.ImageField` (depends on PIL)"
msgstr ""

# 2b7624f5283e40c08867a1ab027e603b
#: ../../releases/1.5.txt:102
msgid ""
":class:`~django.test.LiveServerTestCase` (depends on Selenium WebDriver)"
msgstr ""

# d3359b0b1fa540ec8f607baa122230da
#: ../../releases/1.5.txt:104
msgid ""
"Further, Django's more than a web framework; it's an ecosystem of pluggable "
"components. At this point, very few third-party applications have been "
"ported to Python 3, so it's unlikely that a real-world application will have "
"all its dependencies satisfied under Python 3."
msgstr ""

#: ../../releases/1.5.txt:109
msgid ""
"Thus, we're recommending that Django 1.5 not be used in production under "
"Python 3. Instead, use this opportunity to begin porting applications to "
"Python 3. If you're an author of a pluggable component, we encourage you to "
"start porting now."
msgstr ""

# 2d533c9121394c209917b78d8711bcdf
#: ../../releases/1.5.txt:114
msgid ""
"We plan to offer first-class, production-ready support for Python 3 in our "
"next release, Django 1.6."
msgstr ""

# 86c8a5784fb34d3a87612524934f9ba0
#: ../../releases/1.5.txt:120
msgid "What's new in Django 1.5"
msgstr ""

# 01e9269075fe4baea7bc2f89ea5d47dd
#: ../../releases/1.5.txt:123
msgid "Configurable User model"
msgstr ""

# f5a89ae05a0e4f5b91012c918455c34a
#: ../../releases/1.5.txt:125
msgid ""
"In Django 1.5, you can now use your own model as the store for user-related "
"data. If your project needs a username with more than 30 characters, or if "
"you want to store user's names in a format other than first name/last name, "
"or you want to put custom profile information onto your User object, you can "
"now do so."
msgstr ""

# aa5f821b122241d792d426feafde7622
#: ../../releases/1.5.txt:131
msgid ""
"If you have a third-party reusable application that references the User "
"model, you may need to make some changes to the way you reference User "
"instances. You should also document any specific features of the User model "
"that your application relies upon."
msgstr ""

#: ../../releases/1.5.txt:136
msgid ""
"See the :ref:`documentation on custom user models <auth-custom-user>` for "
"more details."
msgstr ""

# 61db807e365449a8bc1f6c4ee26a4f57
#: ../../releases/1.5.txt:140
msgid "Support for saving a subset of model's fields"
msgstr ""

# 7d3379a3b9af46dda580096c65024f56
#: ../../releases/1.5.txt:142
msgid ""
"The method :meth:`Model.save() <django.db.models.Model.save()>` has a new "
"keyword argument ``update_fields``. By using this argument it is possible to "
"save only a select list of model's fields. This can be useful for "
"performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

# d62fbc812d184d6695d2bccd2e64b758
#: ../../releases/1.5.txt:147
msgid ""
"Deferred instances (those loaded by ``.only()`` or ``.defer()``) will "
"automatically save just the loaded fields. If any field is set manually "
"after load, that field will also get updated on save."
msgstr ""

# 8a8b104785ce4395a821e99b4c22b38c
#: ../../releases/1.5.txt:151
msgid ""
"See the :meth:`Model.save() <django.db.models.Model.save()>` documentation "
"for more details."
msgstr ""

# f67fd276c02740498a20dbca70481a20
#: ../../releases/1.5.txt:155
msgid "Caching of related model instances"
msgstr ""

# fe158fd077c24f69ae9f9232316aad5a
#: ../../releases/1.5.txt:157
msgid ""
"When traversing relations, the ORM will avoid re-fetching objects that were "
"previously loaded. For example, with the tutorial's models::"
msgstr ""

# 47e3a387f8774d59833db9542d030fb7
#: ../../releases/1.5.txt:165
msgid ""
"In Django 1.5, the third line no longer triggers a new SQL query to fetch "
"``first_choice.poll``; it was set by the second line."
msgstr ""

# 0649cb88bf85465fb6aba1e67edeac97
#: ../../releases/1.5.txt:168
msgid ""
"For one-to-one relationships, both sides can be cached. For many-to-one "
"relationships, only the single side of the relationship can be cached. This "
"is particularly helpful in combination with ``prefetch_related``."
msgstr ""

# 08e4e45eecbd4223bf0d586140b3537a
#: ../../releases/1.5.txt:175
msgid "Explicit support for streaming responses"
msgstr ""

# c846d4d9193e41fc9d33ff3622243ebf
#: ../../releases/1.5.txt:177
msgid ""
"Before Django 1.5, it was possible to create a streaming response by passing "
"an iterator to :class:`~django.http.HttpResponse`. But this was unreliable: "
"any middleware that accessed the :attr:`~django.http.HttpResponse.content` "
"attribute would consume the iterator prematurely."
msgstr ""

# b28dc422393a4088a7ff6d5ad981b287
#: ../../releases/1.5.txt:182
msgid ""
"You can now explicitly generate a streaming response with the new :class:"
"`~django.http.StreamingHttpResponse` class. This class exposes a :class:"
"`~django.http.StreamingHttpResponse.streaming_content` attribute which is an "
"iterator."
msgstr ""

#: ../../releases/1.5.txt:187
msgid ""
"Since :class:`~django.http.StreamingHttpResponse` does not have a "
"``content`` attribute, middleware that needs access to the response content "
"must test for streaming responses and behave accordingly."
msgstr ""

# 44190c706bf14219b688189932be4545
#: ../../releases/1.5.txt:192
msgid "``{% verbatim %}`` template tag"
msgstr ""

#: ../../releases/1.5.txt:194
msgid ""
"To make it easier to deal with JavaScript templates which collide with "
"Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid "
"parsing the tag's content."
msgstr ""

# 188c9540cd8b4b6793c7b82450fe233a
#: ../../releases/1.5.txt:199
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

# f9c96d924efd4617a1c78e6728790727
#: ../../releases/1.5.txt:201
msgid ""
"The methods :meth:`ContentTypeManager.get_for_model() <django.contrib."
"contenttypes.models.ContentTypeManager.get_for_model()>` and :meth:"
"`ContentTypeManager.get_for_models() <django.contrib.contenttypes.models."
"ContentTypeManager.get_for_models()>` have a new keyword argument – "
"respectively ``for_concrete_model`` and ``for_concrete_models``. By passing "
"``False`` using this argument it is now possible to retrieve the :class:"
"`ContentType <django.contrib.contenttypes.models.ContentType>` associated "
"with proxy models."
msgstr ""

# 8b867084d9c2473ea73fd57611d97b29
#: ../../releases/1.5.txt:209
msgid "New ``view`` variable in class-based views context"
msgstr ""

# 9be97b2d7cc24e35aed317368d418164
#: ../../releases/1.5.txt:211
msgid ""
"In all :doc:`generic class-based views </topics/class-based-views/index>` "
"(or any class-based view inheriting from ``ContextMixin``), the context "
"dictionary contains a ``view`` variable that points to the ``View`` instance."
msgstr ""

# e34cc68acc61417ea86bee21ff5a34d0
#: ../../releases/1.5.txt:216
msgid "GeoDjango"
msgstr ""

# ee481949a13b44518331bce87f801ca0
#: ../../releases/1.5.txt:218
msgid ""
":class:`~django.contrib.gis.geos.LineString` and :class:`~django.contrib.gis."
"geos.MultiLineString` GEOS objects now support the :meth:`~django.contrib."
"gis.geos.GEOSGeometry.interpolate()` and :meth:`~django.contrib.gis.geos."
"GEOSGeometry.project()` methods (so-called linear referencing)."
msgstr ""

# 371e8281522d493ea050273dc674548a
#: ../../releases/1.5.txt:224
msgid ""
"The ``wkb`` and ``hex`` properties of :class:`~django.contrib.gis.geos."
"GEOSGeometry` objects preserve the Z dimension."
msgstr ""

# f5fe32d817ff40a794ef25bc4836a157
#: ../../releases/1.5.txt:228
msgid ""
"Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been "
"dropped."
msgstr ""

# 3663fbff963d4cc0accb6fdbfc4c0a48
#: ../../releases/1.5.txt:232
msgid "New tutorials"
msgstr ""

# 2f83995c8b864b6f88248615484adbf9
#: ../../releases/1.5.txt:234
msgid ""
"Additions to the docs include a revamped :doc:`Tutorial 3</intro/"
"tutorial03>` and a new :doc:`tutorial on testing</intro/tutorial05>`. A new "
"section, \"Advanced Tutorials\", offers :doc:`How to write reusable apps </"
"intro/reusable-apps>` as well as a step-by-step guide for new contributors "
"in :doc:`Writing your first patch for Django </intro/contributing>`."
msgstr ""

# 575048fa02a14a3dac220c84d1ee09c4
#: ../../releases/1.5.txt:241
msgid "Minor features"
msgstr ""

# dae9a9c87e0b4d57aa9c6d569ebbbefb
#: ../../releases/1.5.txt:243
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

# 18dfbc34c1044aa2bb6560321709235f
#: ../../releases/1.5.txt:245
msgid ""
"The template engine now interprets ``True``, ``False`` and ``None`` as the "
"corresponding Python objects."
msgstr ""

# 9101f5be7ca34bdd8b7e1122f2210ebb
#: ../../releases/1.5.txt:248
msgid ""
":mod:`django.utils.timezone` provides a helper for converting aware "
"datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

# 67abb9b2fa0a4113acaa7ce15a11da0e
#: ../../releases/1.5.txt:251
msgid "The generic views support OPTIONS requests."
msgstr ""

#: ../../releases/1.5.txt:253
msgid ""
"Management commands do not raise ``SystemExit`` any more when called by code "
"from :func:`~django.core.management.call_command`. Any exception raised by "
"the command (mostly :exc:`~django.core.management.CommandError`) is "
"propagated."
msgstr ""

# 9c99b9e42d514539af677ec59539f324
#: ../../releases/1.5.txt:258
msgid ""
"Moreover, when you output errors or messages in your custom commands, you "
"should now use ``self.stdout.write('message')`` and ``self.stderr."
"write('error')`` (see the note on :ref:`management commands output "
"<management-commands-output>`)."
msgstr ""

#: ../../releases/1.5.txt:263
msgid ""
"The :djadmin:`dumpdata` management command outputs one row at a time, "
"preventing out-of-memory errors when dumping large datasets."
msgstr ""

# dc3f56eb9ae14eb7993de608b8b9145b
#: ../../releases/1.5.txt:266
msgid ""
"In the localflavor for Canada, \"pq\" was added to the acceptable codes for "
"Quebec. It's an old abbreviation."
msgstr ""

# 585d0ef91e70464897691648599ae937
#: ../../releases/1.5.txt:269
msgid ""
"The :ref:`receiver <connecting-receiver-functions>` decorator is now able to "
"connect to more than one signal by supplying a list of signals."
msgstr ""

# aafb25106eed47bf98591cba4f683b2f
#: ../../releases/1.5.txt:272
msgid ""
"In the admin, you can now filter users by groups which they are members of."
msgstr ""

# 4e4c7edeca3c4c5aae7449e4a46b44da
#: ../../releases/1.5.txt:274
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"now has a batch_size argument. By default the batch_size is unlimited except "
"for SQLite where single batch is limited so that 999 parameters per query "
"isn't exceeded."
msgstr ""

# a5bbae522ad44f058d19c7751b9ac24b
#: ../../releases/1.5.txt:279
msgid ""
"The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also "
"accept view function names and :ref:`named URL patterns <naming-url-"
"patterns>`. This allows you to reduce configuration duplication. More "
"information can be found in the :func:`~django.contrib.auth.decorators."
"login_required` documentation."
msgstr ""

# 552614de5c4648d89281b83ede67f646
#: ../../releases/1.5.txt:285
msgid ""
"Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi/"
"apache-auth>`."
msgstr ""

# 8a93d11e62934763ab25add680bf5c52
#: ../../releases/1.5.txt:288
msgid ""
"The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and :"
"meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-"
"path in some cases. The fast-path allows for less queries and less objects "
"fetched into memory. See :meth:`QuerySet.delete() <django.db.models.query."
"QuerySet.delete>` for details."
msgstr ""

#: ../../releases/1.5.txt:294
msgid ""
"An instance of ``ResolverMatch`` is stored on the request as "
"``resolver_match``."
msgstr ""

# 5295dbc3889c493db98cd6c723c0ebff
#: ../../releases/1.5.txt:297
msgid ""
"By default, all logging messages reaching the ``django`` logger when :"
"setting:`DEBUG` is ``True`` are sent to the console (unless you redefine the "
"logger in your :setting:`LOGGING` setting)."
msgstr ""

# bc2234af921f4547b0586bdea8acfeda
#: ../../releases/1.5.txt:301
msgid ""
"When using :class:`~django.template.RequestContext`, it is now possible to "
"look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in "
"templates."
msgstr ""

# 0b707bcca52047eda45919f42721a5f4
#: ../../releases/1.5.txt:305
msgid ""
"It's not required any more to have ``404.html`` and ``500.html`` templates "
"in the root templates directory. Django will output some basic error "
"messages for both situations when those templates are not found. Of course, "
"it's still recommended as good practice to provide those templates in order "
"to present pretty error pages to the user."
msgstr ""

# 94998df2a2f14592a25b1c265369b0b9
#: ../../releases/1.5.txt:311
msgid ""
":mod:`django.contrib.auth` provides a new signal that is emitted whenever a "
"user fails to login successfully. See :data:`~django.contrib.auth.signals."
"user_login_failed`"
msgstr ""

#: ../../releases/1.5.txt:315
msgid ""
"The new :option:`loaddata --ignorenonexistent` option ignore data for fields "
"that no longer exist."
msgstr ""

# 838d7114eb364d31af37e095454962e6
#: ../../releases/1.5.txt:318
msgid ""
":meth:`~django.test.SimpleTestCase.assertXMLEqual` and :meth:`~django.test."
"SimpleTestCase.assertXMLNotEqual` new assertions allow you to test equality "
"for XML content at a semantic level, without caring for syntax differences "
"(spaces, attribute order, etc.)."
msgstr ""

# d1c6a39d9e394eb49baf3c701e887d73
#: ../../releases/1.5.txt:323
msgid ""
"RemoteUserMiddleware now forces logout when the REMOTE_USER header "
"disappears during the same browser session."
msgstr ""

# ff747e75b9cf43c9b7254fbfca587bbf
#: ../../releases/1.5.txt:326
msgid ""
"The :ref:`cache-based session backend <cached-sessions-backend>` can store "
"session data in a non-default cache."
msgstr ""

# eb7628250d3c4fc5b9b20db9256a9018
#: ../../releases/1.5.txt:329
msgid ""
"Multi-column indexes can now be created on models. Read the :attr:`~django."
"db.models.Options.index_together` documentation for more information."
msgstr ""

# 79b2e0d62bd2408b8fb2d017a44f4509
#: ../../releases/1.5.txt:333
msgid ""
"During Django's logging configuration verbose Deprecation warnings are "
"enabled and warnings are captured into the logging system. Logged warnings "
"are routed through the ``console`` logging handler, which by default "
"requires :setting:`DEBUG` to be True for output to be generated. The result "
"is that DeprecationWarnings should be printed to the console in development "
"environments the way they have been in Python versions < 2.7."
msgstr ""

# d33f2072897f49bfa14a1989adb27f00
#: ../../releases/1.5.txt:340
msgid ""
"The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has "
"been modified to accept additional arguments adding capabilities similar to :"
"func:`django.contrib.messages.add_message`. This is useful for generating "
"error messages from admin actions."
msgstr ""

# 83914e9a9bdc484c8414f34b333c6ccf
#: ../../releases/1.5.txt:345
msgid ""
"The admin's list filters can now be customized per-request thanks to the "
"new :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""

# 6a9d04989b164f3d9760b0e744c8dccc
#: ../../releases/1.5.txt:351
msgid "Backwards incompatible changes in 1.5"
msgstr ""

# 6cda4bb25e114507a84526352f7443c3
#: ../../releases/1.5.txt:355
msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`deprecation plan <deprecation-removed-in-1.5>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# 21583f1b58c54fe2b4d0a9ccb6da4970
#: ../../releases/1.5.txt:362
msgid "``ALLOWED_HOSTS`` required in production"
msgstr ""

# 1cc2e5c7297c4221b2d355ad04b19f88
#: ../../releases/1.5.txt:364
msgid ""
"The new :setting:`ALLOWED_HOSTS` setting validates the request's ``Host`` "
"header and protects against host-poisoning attacks. This setting is now "
"required whenever :setting:`DEBUG` is ``False``, or else :meth:`django.http."
"HttpRequest.get_host()` will raise :exc:`~django.core.exceptions."
"SuspiciousOperation`. For more details see the :setting:`full "
"documentation<ALLOWED_HOSTS>` for the new setting."
msgstr ""

# 0d5952ed5a0147ca9c4838e74d9bc109
#: ../../releases/1.5.txt:372
msgid "Managers on abstract models"
msgstr ""

# d4ce311879d4405cb6b4c3b0da13be87
#: ../../releases/1.5.txt:374
msgid ""
"Abstract models are able to define a custom manager, and that manager :ref:"
"`will be inherited by any concrete models extending the abstract model "
"<custom-managers-and-inheritance>`. However, if you try to use the abstract "
"model to call a method on the manager, an exception will now be raised. "
"Previously, the call would have been permitted, but would have failed as "
"soon as any database operation was attempted (usually with a \"table does "
"not exist\" error from the database)."
msgstr ""

# a549e35629b44aff82fe3f653f877515
#: ../../releases/1.5.txt:382
msgid ""
"If you have functionality on a manager that you have been invoking using the "
"abstract class, you should migrate that logic to a Python ``staticmethod`` "
"or ``classmethod`` on the abstract class."
msgstr ""

# cbb6ce51a25b4603994b88d43ffd9775
#: ../../releases/1.5.txt:387
msgid "Context in year archive class-based views"
msgstr ""

# 5ca6c4e3c1034da48a2ec599ca45cf02
#: ../../releases/1.5.txt:389
msgid ""
"For consistency with the other date-based generic views, :class:`~django."
"views.generic.dates.YearArchiveView` now passes ``year`` in the context as "
"a :class:`datetime.date` rather than a string.  If you are using ``{{ year }}"
"`` in your templates, you must replace it with ``{{ year|date:\"Y\" }}``."
msgstr ""

# e558aa048e7f4b6fb46534666af7e64e
#: ../../releases/1.5.txt:395
msgid ""
"``next_year`` and ``previous_year`` were also added in the context. They are "
"calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

# b177b2f87c2d4e4a9f2ee723ea6d3ea3
#: ../../releases/1.5.txt:399
msgid "Context in year and month archive class-based views"
msgstr ""

# 906bab4d1dc349098d0f139014692d2b
#: ../../releases/1.5.txt:401
msgid ""
":class:`~django.views.generic.dates.YearArchiveView` and :class:`~django."
"views.generic.dates.MonthArchiveView` were documented to provide a "
"``date_list`` sorted in ascending order in the context, like their function-"
"based predecessors, but it actually was in descending order. In 1.5, the "
"documented order was restored. You may want to add (or remove) the "
"``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

# 7cc1805601f241e29a17a3099443bb7c
#: ../../releases/1.5.txt:410
msgid ""
":class:`~django.views.generic.dates.ArchiveIndexView` still provides a "
"``date_list`` in descending order."
msgstr ""

# 6526a90b172b41e2a862fbc4e8dfeee3
#: ../../releases/1.5.txt:414
msgid "Context in TemplateView"
msgstr ""

# ecd9bed31d934e668fe79f00afd1ad78
#: ../../releases/1.5.txt:416
msgid ""
"For consistency with the design of the other generic views, :class:`~django."
"views.generic.base.TemplateView` no longer passes a ``params`` dictionary "
"into the context, instead passing the variables from the URLconf directly "
"into the context."
msgstr ""

# 9f3ec8166a184fd4b3a2854c2e340ea1
#: ../../releases/1.5.txt:422
msgid "Non-form data in HTTP requests"
msgstr ""

# bea576bc8c4c4060af11deee760ef6a1
#: ../../releases/1.5.txt:424
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include "
"data posted via HTTP requests with non form-specific content-types in the "
"header. In prior versions, data posted with content-types other than "
"``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still "
"end up represented in the :attr:`request.POST <django.http.HttpRequest."
"POST>` attribute. Developers wishing to access the raw POST data for these "
"cases, should use the :attr:`request.body <django.http.HttpRequest.body>` "
"attribute instead."
msgstr ""

# 5643e7ba290e49b29040ff671ed8a035
#: ../../releases/1.5.txt:434
msgid ":data:`~django.core.signals.request_finished` signal"
msgstr ""

# 7cfd893498bb4094ae86320a598706dc
#: ../../releases/1.5.txt:436
msgid ""
"Django used to send the :data:`~django.core.signals.request_finished` signal "
"as soon as the view function returned a response. This interacted badly "
"with :ref:`streaming responses <httpresponse-streaming>` that delay content "
"generation."
msgstr ""

# 23f02fec048a4ff58daada13727b2633
#: ../../releases/1.5.txt:441
msgid ""
"This signal is now sent after the content is fully consumed by the WSGI "
"gateway. This might be backwards incompatible if you rely on the signal "
"being fired before sending the response content to the client. If you do, "
"you should consider using :doc:`middleware </topics/http/middleware>` "
"instead."
msgstr ""

# 679ca16c0e504a938cd3e7f9564f9845
#: ../../releases/1.5.txt:448
msgid ""
"Some WSGI servers and middleware do not always call ``close`` on the "
"response object after handling a request, most notably uWSGI prior to 1.2.6 "
"and Sentry's error reporting middleware up to 2.0.7. In those cases the "
"``request_finished`` signal isn't sent at all. This can result in idle "
"connections to database and memcache servers."
msgstr ""

# 817775e62e174a69b9278164dd6b46da
#: ../../releases/1.5.txt:455
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

# 93cf7a7a5cc241f8813e6312d204ad0e
#: ../../releases/1.5.txt:457
msgid ""
"Unlike GET and POST, these HTTP methods aren't implemented by web browsers. "
"Rather, they're used in APIs, which transfer data in various formats such as "
"JSON or XML. Since such requests may contain arbitrary data, Django doesn't "
"attempt to decode their body."
msgstr ""

# 23c75f50c35343999ec3ceeabc73e10f
#: ../../releases/1.5.txt:462
msgid ""
"However, the test client used to build a query string for OPTIONS and DELETE "
"requests like for GET, and a request body for PUT requests like for POST. "
"This encoding was arbitrary and inconsistent with Django's behavior when it "
"receives the requests, so it was removed in Django 1.5."
msgstr ""

# f5ad03c7be1d4d1a8bc40df30535537a
#: ../../releases/1.5.txt:467
msgid ""
"If you were using the ``data`` parameter in an OPTIONS or a DELETE request, "
"you must convert it to a query string and append it to the ``path`` "
"parameter."
msgstr ""

# 121f54b2ef22420c8717032f5aa51796
#: ../../releases/1.5.txt:470
msgid ""
"If you were using the ``data`` parameter in a PUT request without a "
"``content_type``, you must encode your data before passing it to the test "
"client and set the ``content_type`` argument."
msgstr ""

#: ../../releases/1.5.txt:477
msgid "System version of ``simplejson`` no longer used"
msgstr ""

#: ../../releases/1.5.txt:479
msgid ""
":ref:`As explained below <simplejson-deprecation>`, Django 1.5 deprecates "
"``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` "
"module. In theory, this change is harmless. Unfortunately, because of "
"incompatibilities between versions of ``simplejson``, it may trigger errors "
"in some circumstances."
msgstr ""

# b06a5e329925488c94727067694d4938
#: ../../releases/1.5.txt:485
msgid ""
"JSON-related features in Django 1.4 always used ``django.utils.simplejson``. "
"This module was actually:"
msgstr ""

#: ../../releases/1.5.txt:488
msgid ""
"A system version of ``simplejson``, if one was available (ie. ``import "
"simplejson`` works), if it was more recent than Django's built-in copy or it "
"had the C speedups, or"
msgstr ""

# c5366a706d8a4d08ab121d28daec8836
#: ../../releases/1.5.txt:491
msgid ""
"The :mod:`json` module from the standard library, if it was available (ie. "
"Python 2.6 or greater), or"
msgstr ""

#: ../../releases/1.5.txt:493
msgid "A built-in copy of version 2.0.7 of ``simplejson``."
msgstr ""

#: ../../releases/1.5.txt:495
msgid ""
"In Django 1.5, those features use Python's :mod:`json` module, which is "
"based on version 2.0.9 of ``simplejson``."
msgstr ""

#: ../../releases/1.5.txt:498
msgid ""
"There are no known incompatibilities between Django's copy of version 2.0.7 "
"and Python's copy of version 2.0.9. However, there are some "
"incompatibilities between other versions of ``simplejson``:"
msgstr ""

#: ../../releases/1.5.txt:502
msgid ""
"While the ``simplejson`` API is documented as always returning unicode "
"strings, the optional C implementation can return a bytestring. This was "
"fixed in Python 2.7."
msgstr ""

#: ../../releases/1.5.txt:505
msgid ""
"``simplejson.JSONEncoder`` gained a ``namedtuple_as_object`` keyword "
"argument in version 2.2."
msgstr ""

#: ../../releases/1.5.txt:508
msgid ""
"More information on these incompatibilities is available in :ticket:`ticket "
"#18023 <18023#comment:10>`."
msgstr ""

#: ../../releases/1.5.txt:511
msgid ""
"The net result is that, if you have installed ``simplejson`` and your code "
"uses Django's serialization internals directly -- for instance ``django.core."
"serializers.json.DjangoJSONEncoder``, the switch from ``simplejson`` to :mod:"
"`json` could break your code. (In general, changes to internals aren't "
"documented; we're making an exception here.)"
msgstr ""

# d72a6526914d49fb92d1414b8dc4f18b
#: ../../releases/1.5.txt:517
msgid ""
"At this point, the maintainers of Django believe that using :mod:`json` from "
"the standard library offers the strongest guarantee of backwards-"
"compatibility. They recommend to use it from now on."
msgstr ""

# e8f5dc01f4364394a986933b6bbfa157
#: ../../releases/1.5.txt:522
msgid "String types of hasher method parameters"
msgstr ""

#: ../../releases/1.5.txt:524
msgid ""
"If you have written a :ref:`custom password hasher <auth_password_storage>`, "
"your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept "
"Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the "
"hashing methods need bytestrings, you can use the :func:`~django.utils."
"encoding.force_bytes` utility to encode the strings."
msgstr ""

# 0db6b87cf76e4090ae631044ad265e5c
#: ../../releases/1.5.txt:531
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

# ff1ad298146045d69fe2a2655fe2a08c
#: ../../releases/1.5.txt:533
msgid ""
"When using :doc:`object pagination </topics/pagination>`, the "
"``previous_page_number()`` and ``next_page_number()`` methods of the :class:"
"`~django.core.paginator.Page` object did not check if the returned number "
"was inside the existing page range. It does check it now and raises an :exc:"
"`~django.core.paginator.InvalidPage` exception when the number is either too "
"low or too high."
msgstr ""

# 8a6073703605457f8033abaf37255dd9
#: ../../releases/1.5.txt:541
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

# dae95e8aabf84c1cbc61eec62c08b59b
#: ../../releases/1.5.txt:543
msgid ""
"PostgreSQL's autocommit option didn't work as advertised previously. It did "
"work for single transaction block, but after the first block was left the "
"autocommit behavior was never restored. This bug is now fixed in 1.5. While "
"this is only a bug fix, it is worth checking your applications behavior if "
"you are using PostgreSQL together with the autocommit option."
msgstr ""

# a10a45a4ca0c4fe7b31b46a61cbd0c3e
#: ../../releases/1.5.txt:550
msgid "Session not saved on 500 responses"
msgstr ""

# edb03174bf95482abcae777c618fdad2
#: ../../releases/1.5.txt:552
msgid ""
"Django's session middleware will skip saving the session data if the "
"response's status code is 500."
msgstr ""

# cc81482e4da24360bcd9c177fe7977bf
#: ../../releases/1.5.txt:556
msgid "Email checks on failed admin login"
msgstr ""

#: ../../releases/1.5.txt:558
msgid ""
"Prior to Django 1.5, if you attempted to log into the admin interface and "
"mistakenly used your email address instead of your username, the admin "
"interface would provide a warning advising that your email address was not "
"your username. In Django 1.5, the introduction of :ref:`custom user models "
"<auth-custom-user>` has required the removal of this warning. This doesn't "
"change the login behavior of the admin site; it only affects the warning "
"message that is displayed under one particular mode of login failure."
msgstr ""

# 2de7e986a90e43308aaeeb452cedd28e
#: ../../releases/1.5.txt:568
msgid "Changes in tests execution"
msgstr ""

# 06c365ceac134ccdb45e8ae3e7993079
#: ../../releases/1.5.txt:570
msgid ""
"Some changes have been introduced in the execution of tests that might be "
"backward-incompatible for some testing setups:"
msgstr ""

# 6480503a36704140b3952a2f08f1ebf6
#: ../../releases/1.5.txt:574
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

# e30915c76599409bad3b03bd05871fa7
#: ../../releases/1.5.txt:576
msgid ""
"Previously, the test database was truncated *before* each test run in a :"
"class:`~django.test.TransactionTestCase`."
msgstr ""

# 9211754a7d264a44ae482e296f81b80d
#: ../../releases/1.5.txt:579
msgid ""
"In order to be able to run unit tests in any order and to make sure they are "
"always isolated from each other, :class:`~django.test.TransactionTestCase` "
"will now reset the database *after* each test run instead."
msgstr ""

# 605dec34402e47e38623daad12eb8c00
#: ../../releases/1.5.txt:584
msgid "No more implicit DB sequences reset"
msgstr ""

# 9bb6194ebd2441c9b01849281ad446e9
#: ../../releases/1.5.txt:586
msgid ""
":class:`~django.test.TransactionTestCase` tests used to reset primary key "
"sequences automatically together with the database flushing actions "
"described above."
msgstr ""

# 355f99424c06437c8b2a21ac42e89c71
#: ../../releases/1.5.txt:590
msgid ""
"This has been changed so no sequences are implicitly reset. This can cause :"
"class:`~django.test.TransactionTestCase` tests that depend on hard-coded "
"primary key values to break."
msgstr ""

# ef7c3525166f465ba758bf540b8105c7
#: ../../releases/1.5.txt:594
msgid ""
"The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute "
"can be used to force the old behavior for :class:`~django.test."
"TransactionTestCase` that might need it."
msgstr ""

# 6530477eb6f74919a9da6fed08e9750b
#: ../../releases/1.5.txt:599
msgid "Ordering of tests"
msgstr ""

# 03d6edb60d124a7788eab0fc908dede5
#: ../../releases/1.5.txt:601
msgid ""
"In order to make sure all ``TestCase`` code starts with a clean database, "
"tests are now executed in the following order:"
msgstr ""

#: ../../releases/1.5.txt:604
msgid ""
"First, all unit tests (including :class:`unittest.TestCase`, :class:`~django."
"test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django."
"test.TransactionTestCase`) are run with no particular ordering guaranteed "
"nor enforced among them."
msgstr ""

# 4821dd5ea4d84506859da5f3b2dc335d
#: ../../releases/1.5.txt:609
msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr ""

# 4e96f85b5a2a446c93f136424ccefc9c
#: ../../releases/1.5.txt:612
msgid ""
"This should not cause any problems unless you have existing doctests which "
"assume a :class:`~django.test.TransactionTestCase` executed earlier left "
"some database state behind or unit tests that rely on some form of state "
"being preserved after the execution of other tests. Such tests are already "
"very fragile, and must now be changed to be able to run independently."
msgstr ""

# b76343efbffd495dae655dd173d100af
#: ../../releases/1.5.txt:619
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

# e7fdade6c9fd4c15af328db0749a9dfc
#: ../../releases/1.5.txt:621
msgid ""
"The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present "
"after form validation. When the form doesn't validate, it contains only the "
"fields that passed validation. You should test the success of the validation "
"with the :meth:`~django.forms.Form.is_valid()` method and not with the "
"presence or absence of the :attr:`~django.forms.Form.cleaned_data` attribute "
"on the form."
msgstr ""

#: ../../releases/1.5.txt:629
msgid "Behavior of ``syncdb`` with multiple databases"
msgstr ""

#: ../../releases/1.5.txt:631
msgid ""
"``syncdb`` now queries the database routers to determine if content types "
"(when :mod:`~django.contrib.contenttypes` is enabled) and permissions (when :"
"mod:`~django.contrib.auth` is enabled) should be created in the target "
"database. Previously, it created them in the default database, even when "
"another database was specified with the ``--database`` option."
msgstr ""

#: ../../releases/1.5.txt:637
msgid ""
"If you use ``syncdb`` on multiple databases, you should ensure that your "
"routers allow synchronizing content types and permissions to only one of "
"them. See the docs on the :ref:`behavior of contrib apps with multiple "
"databases <contrib_app_multiple_databases>` for more information."
msgstr ""

# 4bb608b2776a4c138ed1f72fe53aca73
#: ../../releases/1.5.txt:643
msgid "XML deserializer will not parse documents with a DTD"
msgstr ""

# d73e0f58253e4073838c5de1ea6f3bee
#: ../../releases/1.5.txt:645
msgid ""
"In order to prevent exposure to denial-of-service attacks related to "
"external entity references and entity expansion, the XML model deserializer "
"now refuses to parse XML documents containing a DTD (DOCTYPE definition). "
"Since the XML serializer does not output a DTD, this will not impact typical "
"usage, only cases where custom-created XML documents are passed to Django's "
"model deserializer."
msgstr ""

# d47b336132a348f79be46d76906a11dc
#: ../../releases/1.5.txt:653
msgid "Formsets default ``max_num``"
msgstr ""

# f21427b78f254f9fac384576a596d3ba
#: ../../releases/1.5.txt:655
msgid ""
"A (default) value of ``None`` for the ``max_num`` argument to a formset "
"factory no longer defaults to allowing any number of forms in the formset. "
"Instead, in order to prevent memory-exhaustion attacks, it now defaults to a "
"limit of 1000 forms. This limit can be raised by explicitly setting a higher "
"value for ``max_num``."
msgstr ""

# 4e32c91777ee43398e1943a461debd93
#: ../../releases/1.5.txt:662
msgid "Miscellaneous"
msgstr ""

# c2446de2eb9c4ee6bfa48df9b4952bd1
#: ../../releases/1.5.txt:664
msgid ""
":class:`django.forms.ModelMultipleChoiceField` now returns an empty "
"``QuerySet`` as the empty value instead of an empty list."
msgstr ""

# 219bd7942fe94115aabf237dd5884c4a
#: ../../releases/1.5.txt:667
msgid ""
":func:`~django.utils.http.int_to_base36` properly raises a :exc:`TypeError` "
"instead of :exc:`ValueError` for non-integer inputs."
msgstr ""

#: ../../releases/1.5.txt:670
msgid ""
"The ``slugify`` template filter is now available as a standard Python "
"function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is "
"available at ``django.utils.html.remove_tags()``."
msgstr ""

# 5f4f70e98c2246f3b6d8b18118966020
#: ../../releases/1.5.txt:674
msgid ""
"Uploaded files are no longer created as executable by default. If you need "
"them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your "
"needs. The new default value is ``0o666`` (octal) and the current umask "
"value is first masked out."
msgstr ""

# a6da1dd3e5b54da6a41d5a822af781bc
#: ../../releases/1.5.txt:679
msgid ""
"The :class:`F expressions <django.db.models.F>` supported bitwise operators "
"by ``&`` and ``|``. These operators are now available using ``.bitand()`` "
"and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be "
"consistent with :ref:`Q() expressions <complex-lookups-with-q>` and "
"``QuerySet`` combining where the operators are used as boolean AND and OR "
"operators."
msgstr ""

# 8417b140767e43d1b9eb158ee211d4a2
#: ../../releases/1.5.txt:686
msgid ""
"In a ``filter()`` call, when :class:`F expressions <django.db.models.F>` "
"contained lookups spanning multi-valued relations, they didn't always reuse "
"the same relations as other lookups along the same chain. This was changed, "
"and now F() expressions will always use the same relations as other lookups "
"within the same ``filter()`` call."
msgstr ""

# ebf3fb6d46ca4eaa8cc1af086bdf20da
#: ../../releases/1.5.txt:692
msgid ""
"The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you "
"need HTML validation against pre-HTML5 Strict DTDs, you should add a div "
"around it in your pages."
msgstr ""

# 8f27cd60e58e405096236b33c62095ec
#: ../../releases/1.5.txt:696
msgid ""
"The template tags library ``adminmedia``, which only contained the "
"deprecated template tag ``{% admin_media_prefix %}``, was removed. "
"Attempting to load it with ``{% load adminmedia %}`` will fail. If your "
"templates still contain that line you must remove it."
msgstr ""

# 6f0204eec24b49bca6e44cb69476f2e1
#: ../../releases/1.5.txt:701
msgid ""
"Because of an implementation oversight, it was possible to use :doc:`django."
"contrib.redirects </ref/contrib/redirects>` without enabling :doc:`django."
"contrib.sites </ref/contrib/sites>`. This isn't allowed any longer. If "
"you're using ``django.contrib.redirects``, make sure :setting:"
"`INSTALLED_APPS` contains ``django.contrib.sites``."
msgstr ""

# 4bf03640a11f464fa033cf269dfdc86a
#: ../../releases/1.5.txt:707
msgid ""
":meth:`BoundField.label_tag <django.forms.BoundField.label_tag>` now escapes "
"its ``contents`` argument. To avoid the HTML escaping, use :func:`django."
"utils.safestring.mark_safe` on the argument before passing it."
msgstr ""

#: ../../releases/1.5.txt:711
msgid ""
"Accessing reverse one-to-one relations fetched via :meth:`~django.db.models."
"query.QuerySet.select_related` now raises :exc:`~django.db.models.Model."
"DoesNotExist` instead of returning ``None``."
msgstr ""

# 6ace8764de404e8ca2c70bc0895d845c
#: ../../releases/1.5.txt:718
msgid "Features deprecated in 1.5"
msgstr ""

# a68fc48e01ad466da4fea942ae95639c
#: ../../releases/1.5.txt:721
msgid "``django.contrib.localflavor``"
msgstr ""

#: ../../releases/1.5.txt:723
msgid ""
"The localflavor contrib app has been split into separate packages. ``django."
"contrib.localflavor`` itself will be removed in Django 1.6, after an "
"accelerated deprecation."
msgstr ""

#: ../../releases/1.5.txt:727
msgid ""
"The new packages are available on GitHub. The core team cannot efficiently "
"maintain these packages in the long term — it spans just a dozen countries "
"at this time; similar to translations, maintenance will be handed over to "
"interested members of the community."
msgstr ""

# 3eafd090f3a247d3a5657cea209eb333
#: ../../releases/1.5.txt:733
msgid "``django.contrib.markup``"
msgstr ""

#: ../../releases/1.5.txt:735
msgid ""
"The markup contrib module has been deprecated and will follow an accelerated "
"deprecation schedule. Direct use of Python markup libraries or 3rd party tag "
"libraries is preferred to Django maintaining this functionality in the "
"framework."
msgstr ""

# 4b3ea028060a43e89d02378499d10f95
#: ../../releases/1.5.txt:741
msgid "``AUTH_PROFILE_MODULE``"
msgstr ""

#: ../../releases/1.5.txt:743
msgid ""
"With the introduction of :ref:`custom user models <auth-custom-user>`, there "
"is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

# b7ad6aac2a64412ca0f654e411b39c82
#: ../../releases/1.5.txt:746
msgid ""
"You can still define user profiles models that have a one-to-one relation "
"with the User model - in fact, for many applications needing to associate "
"data with a User account, this will be an appropriate design pattern to "
"follow. However, the ``AUTH_PROFILE_MODULE`` setting, and the ``django."
"contrib.auth.models.User.get_profile()`` method for accessing the user "
"profile model, should not be used any longer."
msgstr ""

# c2061598de874e1a984ab1ce9f87257f
#: ../../releases/1.5.txt:754
msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ""

# e546960cc79043a08d3be6da8a63c8c7
#: ../../releases/1.5.txt:756
msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:"
"`explicit-streaming-responses` above."
msgstr ""

# dd0b555eb8ef409a862a0a730fd393e1
#: ../../releases/1.5.txt:761
msgid ""
"In Django 1.7 and above, the iterator will be consumed immediately by :class:"
"`~django.http.HttpResponse`."
msgstr ""

# a01beb9adee54900a5e59845e8994873
#: ../../releases/1.5.txt:767
msgid "``django.utils.simplejson``"
msgstr ""

#: ../../releases/1.5.txt:769
msgid ""
"Since Django 1.5 drops support for Python 2.5, we can now rely on the :mod:"
"`json` module being available in Python's standard library, so we've removed "
"our own copy of ``simplejson``. You should now import :mod:`json` instead of "
"``django.utils.simplejson``."
msgstr ""

#: ../../releases/1.5.txt:774
msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of ``simplejson`` -- see the :ref:"
"`backwards-incompatible changes <simplejson-incompatibilities>` section. If "
"you rely on features added to ``simplejson`` after it became Python's :mod:"
"`json`, you should import ``simplejson`` explicitly."
msgstr ""

# 663585e8d98d4f1497f11110e6d2afb7
#: ../../releases/1.5.txt:781
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

#: ../../releases/1.5.txt:783
msgid ""
"The ``django.utils.encoding.StrAndUnicode`` mix-in has been deprecated. "
"Define a ``__str__`` method and apply the ``django.utils.encoding."
"python_2_unicode_compatible`` decorator instead."
msgstr ""

# 01c78bb9c2224d2288f19c659971cd6d
#: ../../releases/1.5.txt:788
msgid "``django.utils.itercompat.product``"
msgstr ""

# 72a26434070a4cca9f3850bff4459d12
#: ../../releases/1.5.txt:790
msgid ""
"The ``django.utils.itercompat.product`` function has been deprecated. Use "
"the built-in :func:`itertools.product` instead."
msgstr ""

# 7128ff0aafd0462cb95c0a656a92301b
#: ../../releases/1.5.txt:794
msgid "``cleanup`` management command"
msgstr ""

# 51a4d2fde99740979936266ea00cfda3
#: ../../releases/1.5.txt:796
msgid ""
"The ``cleanup`` management command has been deprecated and replaced by :"
"djadmin:`clearsessions`."
msgstr ""

# ea5705de174f468fb6fcf85246a47c9c
#: ../../releases/1.5.txt:800
msgid "``daily_cleanup.py`` script"
msgstr ""

# 8840df8c2c684813bbb0e2fb9abb7b53
#: ../../releases/1.5.txt:802
msgid ""
"The undocumented ``daily_cleanup.py`` script has been deprecated. Use the :"
"djadmin:`clearsessions` management command instead."
msgstr ""

# 2ff1dab14a2e4ae789e36f09b33a72c6
#: ../../releases/1.5.txt:806
msgid "``depth`` keyword argument in ``select_related``"
msgstr ""

# 9f0524cc54554f5390dcdb70b29901de
#: ../../releases/1.5.txt:808
msgid ""
"The ``depth`` keyword argument in :meth:`~django.db.models.query.QuerySet."
"select_related` has been deprecated. You should use field names instead."
msgstr ""
