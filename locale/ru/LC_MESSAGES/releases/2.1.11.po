# Russian translations for Django package
# Английские переводы для пакета Django.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2020-02-13 22:13+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../releases/2.1.11.txt:3
msgid "Django 2.1.11 release notes"
msgstr ""

#: ../../releases/2.1.11.txt:5
msgid "*August 1, 2019*"
msgstr ""

#: ../../releases/2.1.11.txt:7
msgid "Django 2.1.11 fixes security issues in 2.1.10."
msgstr ""

#: ../../releases/2.1.11.txt:10
msgid ""
"CVE-2019-14232: Denial-of-service possibility in ``django.utils.text."
"Truncator``"
msgstr ""

#: ../../releases/2.1.11.txt:12
msgid ""
"If ``django.utils.text.Truncator``'s ``chars()`` and ``words()`` methods "
"were passed the ``html=True`` argument, they were extremely slow to evaluate "
"certain inputs due to a catastrophic backtracking vulnerability in a regular "
"expression. The ``chars()`` and ``words()`` methods are used to implement "
"the :tfilter:`truncatechars_html` and :tfilter:`truncatewords_html` template "
"filters, which were thus vulnerable."
msgstr ""

#: ../../releases/2.1.11.txt:19
msgid ""
"The regular expressions used by ``Truncator`` have been simplified in order "
"to avoid potential backtracking issues. As a consequence, trailing "
"punctuation may now at times be included in the truncated output."
msgstr ""

#: ../../releases/2.1.11.txt:24
msgid "CVE-2019-14233: Denial-of-service possibility in ``strip_tags()``"
msgstr ""

#: ../../releases/2.1.11.txt:26
msgid ""
"Due to the behavior of the underlying ``HTMLParser``, :func:`django.utils."
"html.strip_tags` would be extremely slow to evaluate certain inputs "
"containing large sequences of nested incomplete HTML entities. The "
"``strip_tags()`` method is used to implement the corresponding :tfilter:"
"`striptags` template filter, which was thus also vulnerable."
msgstr ""

#: ../../releases/2.1.11.txt:32
msgid ""
"``strip_tags()`` now avoids recursive calls to ``HTMLParser`` when progress "
"removing tags, but necessarily incomplete HTML entities, stops being made."
msgstr ""

#: ../../releases/2.1.11.txt:35
msgid ""
"Remember that absolutely NO guarantee is provided about the results of "
"``strip_tags()`` being HTML safe. So NEVER mark safe the result of a "
"``strip_tags()`` call without escaping it first, for example with :func:"
"`django.utils.html.escape`."
msgstr ""

#: ../../releases/2.1.11.txt:41
msgid ""
"CVE-2019-14234: SQL injection possibility in key and index lookups for "
"``JSONField``/``HStoreField``"
msgstr ""

#: ../../releases/2.1.11.txt:43
msgid ""
":lookup:`Key and index lookups <jsonfield.key>` for :class:`~django.contrib."
"postgres.fields.JSONField` and :lookup:`key lookups <hstorefield.key>` for :"
"class:`~django.contrib.postgres.fields.HStoreField` were subject to SQL "
"injection, using a suitably crafted dictionary, with dictionary expansion, "
"as the ``**kwargs`` passed to ``QuerySet.filter()``."
msgstr ""

#: ../../releases/2.1.11.txt:50
msgid ""
"CVE-2019-14235: Potential memory exhaustion in ``django.utils.encoding."
"uri_to_iri()``"
msgstr ""

#: ../../releases/2.1.11.txt:52
msgid ""
"If passed certain inputs, :func:`django.utils.encoding.uri_to_iri` could "
"lead to significant memory usage due to excessive recursion when re-percent-"
"encoding invalid UTF-8 octet sequences."
msgstr ""

#: ../../releases/2.1.11.txt:56
msgid ""
"``uri_to_iri()`` now avoids recursion when re-percent-encoding invalid UTF-8 "
"octet sequences."
msgstr ""
