# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 2ac08769cc6448ae8271bfe0a42ee784
#: ../../releases/1.4.11.txt:3
msgid "Django 1.4.11 release notes"
msgstr ""

# a253b905795840b8b6d1b692ab5960af
#: ../../releases/1.4.11.txt:5
msgid "*April 21, 2014*"
msgstr ""

# d542cc9addfd40859935e91fb07c6044
#: ../../releases/1.4.11.txt:7
msgid ""
"Django 1.4.11 fixes three security issues in 1.4.10. Additionally, Django's "
"vendored version of six, :mod:`django.utils.six`, has been upgraded to the "
"latest release (1.6.1)."
msgstr ""

# 2c82f72c5c1347b9b236509e5f6d1416
#: ../../releases/1.4.11.txt:12
msgid "Unexpected code execution using ``reverse()``"
msgstr ""

# a7087728b0534bfeb26045760d1c32ca
#: ../../releases/1.4.11.txt:14
msgid ""
"Django's URL handling is based on a mapping of regex patterns (representing "
"the URLs) to callable views, and Django's own processing consists of "
"matching a requested URL against those patterns to determine the appropriate "
"view to invoke."
msgstr ""

#: ../../releases/1.4.11.txt:19
msgid ""
"Django also provides a convenience function -- ``reverse()`` -- which "
"performs this process in the opposite direction. The ``reverse()`` function "
"takes information about a view and returns a URL which would invoke that "
"view. Use of ``reverse()`` is encouraged for application developers, as the "
"output of ``reverse()`` is always based on the current URL patterns, meaning "
"developers do not need to change other code when making changes to URLs."
msgstr ""

# 584d123cc4fe49ecae598a2c5f1ab9a6
#: ../../releases/1.4.11.txt:26
msgid ""
"One argument signature for ``reverse()`` is to pass a dotted Python path to "
"the desired view. In this situation, Django will import the module indicated "
"by that dotted path as part of generating the resulting URL. If such a "
"module has import-time side effects, those side effects will occur."
msgstr ""

# feaa7670ce7a4eb3abfa4ff9a9e596d3
#: ../../releases/1.4.11.txt:32
msgid ""
"Thus it is possible for an attacker to cause unexpected code execution, "
"given the following conditions:"
msgstr ""

# af05c7f4d68b49829f0e689ef4535c04
#: ../../releases/1.4.11.txt:35
msgid ""
"One or more views are present which construct a URL based on user input "
"(commonly, a \"next\" parameter in a querystring indicating where to "
"redirect upon successful completion of an action)."
msgstr ""

# 7ba26b698c3d49b69fcbafb02496a5f0
#: ../../releases/1.4.11.txt:39
msgid ""
"One or more modules are known to an attacker to exist on the server's Python "
"import path, which perform code execution with side effects on importing."
msgstr ""

# 22d1a29427384131b72285ebb0cd9015
#: ../../releases/1.4.11.txt:43
msgid ""
"To remedy this, ``reverse()`` will now only accept and import dotted paths "
"based on the view-containing modules listed in the project's :doc:`URL "
"pattern configuration </topics/http/urls>`, so as to ensure that only "
"modules the developer intended to be imported in this fashion can or will be "
"imported."
msgstr ""

# 489e1b1e8da140a683cb9e202db9df56
#: ../../releases/1.4.11.txt:49
msgid "Caching of anonymous pages could reveal CSRF token"
msgstr ""

#: ../../releases/1.4.11.txt:51
msgid ""
"Django includes both a :doc:`caching framework </topics/cache>` and a system "
"for :doc:`preventing cross-site request forgery (CSRF) attacks </ref/csrf/"
">`. The CSRF-protection system is based on a random nonce sent to the client "
"in a cookie which must be sent by the client on future requests and, in "
"forms, a hidden value which must be submitted back with the form."
msgstr ""

# 33dedb2e067c44e1a4e9d01a5efdaa58
#: ../../releases/1.4.11.txt:58
msgid ""
"The caching framework includes an option to cache responses to anonymous (i."
"e., unauthenticated) clients."
msgstr ""

# e7a5817eceb1444999eac56766745720
#: ../../releases/1.4.11.txt:61
msgid ""
"When the first anonymous request to a given page is by a client which did "
"not have a CSRF cookie, the cache framework will also cache the CSRF cookie "
"and serve the same nonce to other anonymous clients who do not have a CSRF "
"cookie. This can allow an attacker to obtain a valid CSRF cookie value and "
"perform attacks which bypass the check for the cookie."
msgstr ""

# 6560dbef496a425fa3ae510b99c60137
#: ../../releases/1.4.11.txt:68
msgid ""
"To remedy this, the caching framework will no longer cache such responses. "
"The heuristic for this will be:"
msgstr ""

# 426f1bcb158e4fae9e61286a091c4be4
#: ../../releases/1.4.11.txt:71
msgid "If the incoming request did not submit any cookies, and"
msgstr ""

# 90fca8d2ba284f77981c4ade359747d5
#: ../../releases/1.4.11.txt:73
msgid "If the response did send one or more cookies, and"
msgstr ""

# be6233e1c45c4f7f9ae9444898a79e33
#: ../../releases/1.4.11.txt:75
msgid ""
"If the ``Vary: Cookie`` header is set on the response, then the response "
"will not be cached."
msgstr ""

# 6599c4d6df354d0099e17add3192be36
#: ../../releases/1.4.11.txt:79
msgid "MySQL typecasting"
msgstr ""

# 3c773bdca5c4442692ce9c0e3b19d889
#: ../../releases/1.4.11.txt:81
msgid ""
"The MySQL database is known to \"typecast\" on certain queries; for example, "
"when querying a table which contains string values, but using a query which "
"filters based on an integer value, MySQL will first silently coerce the "
"strings to integers and return a result based on that."
msgstr ""

# d42cbf9514f8458fbdb42a586bb6a4ec
#: ../../releases/1.4.11.txt:86
msgid ""
"If a query is performed without first converting values to the appropriate "
"type, this can produce unexpected results, similar to what would occur if "
"the query itself had been manipulated."
msgstr ""

# a19201afa37a4804a801532a5a505a03
#: ../../releases/1.4.11.txt:90
msgid ""
"Django's model field classes are aware of their own types and most such "
"classes perform explicit conversion of query arguments to the correct "
"database-level type before querying. However, three model field classes did "
"not correctly convert their arguments:"
msgstr ""

# a376b3464faa433eb0d349a8517a9886
#: ../../releases/1.4.11.txt:95
msgid ":class:`~django.db.models.FilePathField`"
msgstr ""

# f7a409db8d494fc2802fbfbc3a2e4134
#: ../../releases/1.4.11.txt:96
msgid ":class:`~django.db.models.GenericIPAddressField`"
msgstr ""

#: ../../releases/1.4.11.txt:97
msgid "``IPAddressField``"
msgstr ""

# 700bba5ca7af40da9a5f2741af18b9f6
#: ../../releases/1.4.11.txt:99
msgid ""
"These three fields have been updated to convert their arguments to the "
"correct types before querying."
msgstr ""

# 9d1c795dabb04ea99f1e5d1a01a34492
#: ../../releases/1.4.11.txt:102
msgid ""
"Additionally, developers of custom model fields are now warned via "
"documentation to ensure their custom field classes will perform appropriate "
"type conversions, and users of the :meth:`raw() <django.db.models.query."
"QuerySet.raw>` and :meth:`extra() <django.db.models.query.QuerySet.extra>` "
"query methods -- which allow the developer to supply raw SQL or SQL "
"fragments -- will be advised to ensure they perform appropriate manual type "
"conversions prior to executing queries."
msgstr ""
