# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../releases/1.7.3.txt:3
msgid "Django 1.7.3 release notes"
msgstr ""

#: ../../releases/1.7.3.txt:5
msgid "*January 13, 2015*"
msgstr ""

#: ../../releases/1.7.3.txt:7
msgid "Django 1.7.3 fixes several security issues and bugs in 1.7.2."
msgstr ""

#: ../../releases/1.7.3.txt:10
msgid "WSGI header spoofing via underscore/dash conflation"
msgstr ""

#: ../../releases/1.7.3.txt:12
msgid ""
"When HTTP headers are placed into the WSGI environ, they are normalized by "
"converting to uppercase, converting all dashes to underscores, and "
"prepending `HTTP_`. For instance, a header ``X-Auth-User`` would become "
"``HTTP_X_AUTH_USER`` in the WSGI environ (and thus also in Django's "
"``request.META`` dictionary)."
msgstr ""

#: ../../releases/1.7.3.txt:18
msgid ""
"Unfortunately, this means that the WSGI environ cannot distinguish between "
"headers containing dashes and headers containing underscores: ``X-Auth-"
"User`` and ``X-Auth_User`` both become ``HTTP_X_AUTH_USER``. This means that "
"if a header is used in a security-sensitive way (for instance, passing "
"authentication information along from a front-end proxy), even if the proxy "
"carefully strips any incoming value for ``X-Auth-User``, an attacker may be "
"able to provide an ``X-Auth_User`` header (with underscore) and bypass this "
"protection."
msgstr ""

#: ../../releases/1.7.3.txt:27
msgid ""
"In order to prevent such attacks, both Nginx and Apache 2.4+ strip all "
"headers containing underscores from incoming requests by default. Django's "
"built-in development server now does the same. Django's development server "
"is not recommended for production use, but matching the behavior of common "
"production servers reduces the surface area for behavior changes during "
"deployment."
msgstr ""

#: ../../releases/1.7.3.txt:34
msgid "Mitigated possible XSS attack via user-supplied redirect URLs"
msgstr ""

#: ../../releases/1.7.3.txt:36
msgid ""
"Django relies on user input in some cases (e.g. ``django.contrib.auth.views."
"login()`` and :doc:`i18n </topics/i18n/index>`) to redirect the user to an "
"\"on success\" URL. The security checks for these redirects (namely ``django."
"utils.http.is_safe_url()``) didn't strip leading whitespace on the tested "
"URL and as such considered URLs like ``\\njavascript:...`` safe. If a "
"developer relied on ``is_safe_url()`` to provide safe redirect targets and "
"put such a URL into a link, they could suffer from a XSS attack. This bug "
"doesn't affect Django currently, since we only put this URL into the "
"``Location`` response header and browsers seem to ignore JavaScript there."
msgstr ""

#: ../../releases/1.7.3.txt:48
msgid "Denial-of-service attack against ``django.views.static.serve``"
msgstr ""

#: ../../releases/1.7.3.txt:50
msgid ""
"In older versions of Django, the :func:`django.views.static.serve` view read "
"the files it served one line at a time. Therefore, a big file with no "
"newlines would result in memory usage equal to the size of that file. An "
"attacker could exploit this and launch a denial-of-service attack by "
"simultaneously requesting many large files. This view now reads the file in "
"chunks to prevent large memory usage."
msgstr ""

#: ../../releases/1.7.3.txt:57
msgid ""
"Note, however, that this view has always carried a warning that it is not "
"hardened for production use and should be used only as a development aid. "
"Now may be a good time to audit your project and serve your files in "
"production using a real front-end web server if you are not doing so."
msgstr ""

#: ../../releases/1.7.3.txt:63
msgid "Database denial-of-service with ``ModelMultipleChoiceField``"
msgstr ""

#: ../../releases/1.7.3.txt:65
msgid ""
"Given a form that uses ``ModelMultipleChoiceField`` and "
"``show_hidden_initial=True`` (not a documented API), it was possible for a "
"user to cause an unreasonable number of SQL queries by submitting duplicate "
"values for the field's data. The validation logic in "
"``ModelMultipleChoiceField`` now deduplicates submitted values to address "
"this issue."
msgstr ""

#: ../../releases/1.7.3.txt:72
msgid "Bugfixes"
msgstr ""

#: ../../releases/1.7.3.txt:74
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 25%. This part of the normal major release process was "
"inadvertently omitted in 1.7. This backwards compatible change will not "
"affect users who have subclassed ``django.contrib.auth.hashers."
"PBKDF2PasswordHasher`` to change the default value."
msgstr ""

#: ../../releases/1.7.3.txt:81
msgid ""
"Fixed a crash in the CSRF middleware when handling non-ASCII referer header "
"(:ticket:`23815`)."
msgstr ""

#: ../../releases/1.7.3.txt:84
msgid ""
"Fixed a crash in the ``django.contrib.auth.redirect_to_login`` view when "
"passing a ``reverse_lazy()`` result on Python 3 (:ticket:`24097`)."
msgstr ""

#: ../../releases/1.7.3.txt:87
msgid "Added correct formats for Greek (``el``) (:ticket:`23967`)."
msgstr ""

#: ../../releases/1.7.3.txt:89
msgid ""
"Fixed a migration crash when unapplying a migration where multiple "
"operations interact with the same model (:ticket:`24110`)."
msgstr ""
