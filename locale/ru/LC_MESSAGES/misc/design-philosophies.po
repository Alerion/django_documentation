# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-03-31 21:54+0300\n"
"PO-Revision-Date: 2015-06-17 18:17+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 677c4400a1a64617844d64f3dbe755e3
#: ../../misc/design-philosophies.txt:3
msgid "Design philosophies"
msgstr "Философия дизайна"

# 3cae699f120848c884ac3440d259cce7
#: ../../misc/design-philosophies.txt:5
msgid ""
"This document explains some of the fundamental philosophies Django's "
"developers have used in creating the framework. Its goal is to explain the "
"past and guide the future."
msgstr ""
"Этот документ объясняет некоторые из фундаментальных идей, которыми "
"руководствуются при работе с фреймворком Django. Его цель - объяснить уже "
"сделанное и направить в нужную сторону."

# ba7ccf016f0a4be1a8f926a35192a3d2
#: ../../misc/design-philosophies.txt:10
msgid "Overall"
msgstr "Основы"

# b958ade4288042b998754afd5514f337
# 4f52ecfc8e4b49318722e8b083b0be0d
# 25246eecef9b4d129cee0f72750c9c17
#: ../../misc/design-philosophies.txt:15
#: ../../misc/design-philosophies.txt:155
#: ../../misc/design-philosophies.txt:296
msgid "Loose coupling"
msgstr "Слабое связывание"

# 7b1a2fa7cfee4390819e069b2b7a42b3
#: ../../misc/design-philosophies.txt:19
msgid ""
"A fundamental goal of Django's stack is `loose coupling and tight "
"cohesion`_. The various layers of the framework shouldn't \"know\" about "
"each other unless absolutely necessary."
msgstr ""
"Фундаментальная основа стека Django - это слабая связанность и сильное "
"зацепление (`loose coupling and tight cohesion`_). Отдельным слоям "
"фреймворка не следует \"знать\" друг о друге, если в этом нет острой "
"необходимости."

# 9362388b74de47e19ece63c1362aaee0
#: ../../misc/design-philosophies.txt:23
msgid ""
"For example, the template system knows nothing about Web requests, the "
"database layer knows nothing about data display and the view system doesn't "
"care which template system a programmer uses."
msgstr ""
"Например, система шаблонов ничего не знает о Web запросах, а базу данных не "
"интересует, как эти данные представлены. В то же время представление не "
"зависит от того, какие шаблоны использует программист."

# 7aa3aace0637475bae9ed96b34dd19b7
#: ../../misc/design-philosophies.txt:27
msgid ""
"Although Django comes with a full stack for convenience, the pieces of the "
"stack are independent of another wherever possible."
msgstr ""
"Django поставляется с пакетом приложений, который представляет из себя "
"кусочки, для удобства независимые настолько, насколько это возможно."

# fc3f53fff3c1409e912dce7699e7a18f
#: ../../misc/design-philosophies.txt:35
#: ../../misc/design-philosophies.txt:315
msgid "Less code"
msgstr "Меньше кода"

# c8befed079914ba0bb0b4c53dbc69c48
#: ../../misc/design-philosophies.txt:37
msgid ""
"Django apps should use as little code as possible; they should lack "
"boilerplate. Django should take full advantage of Python's dynamic "
"capabilities, such as introspection."
msgstr ""
"Приложения Django должны использовать настолько мало кода, насколько "
"возможно; следует избегать шаблонных кусков. Django должен в полной мере "
"использовать все динамические возможности Python'а, например интроспекцию."

# 16f0d95622864abfab8372f602dbb1da
#: ../../misc/design-philosophies.txt:44
msgid "Quick development"
msgstr "Быстрая разработка"

# 99defaa0dce94843a8d4ec824c800247
#: ../../misc/design-philosophies.txt:46
msgid ""
"The point of a Web framework in the 21st century is to make the tedious "
"aspects of Web development fast. Django should allow for incredibly quick "
"Web development."
msgstr ""
"К Web фреймворку 21-го века ставятся жесткие требования. Одним из них "
"является время разработки. Django должен позволять разрабатывать Web "
"приложения невероятно быстро."

# c5bca2c357544dd08e2562d031aae060
#: ../../misc/design-philosophies.txt:53
msgid "Don't repeat yourself (DRY)"
msgstr "Не повторяйтесь (DRY)"

# 5ca728939e3f4cbdb30accb7b44c0fe2
#: ../../misc/design-philosophies.txt:59
msgid ""
"Every distinct concept and/or piece of data should live in one, and only "
"one, place. Redundancy is bad. Normalization is good."
msgstr ""
"Каждая отдельная концепция и/или кусок данных следует хранить в одном и лишь "
"одном месте. Избыточность - плохо. Нормализация - хорошо."

# 5f6552cea8b04fda8759eaca6e4421d2
#: ../../misc/design-philosophies.txt:62
msgid ""
"The framework, within reason, should deduce as much as possible from as "
"little as possible."
msgstr ""
"Фреймворк, в пределах разумного, должен использовать как можно больше из как "
"можно меньшего."

# 4bdc0fe3a85545499d26ee3931bbcbb2
#: ../../misc/design-philosophies.txt:67
msgid "The `discussion of DRY on the Portland Pattern Repository`__"
msgstr ""
"`Обсуждение DRY на Portland Pattern Repository <http://c2.com/cgi/wiki?"
"DontRepeatYourself>`__"

# b02b45d1e41f4d308a1856903273d599
# 25b566ecdb3e4b23b679f35d3ef7dea7
#: ../../misc/design-philosophies.txt:74 ../../misc/design-philosophies.txt:95
msgid "Explicit is better than implicit"
msgstr "Явное лучше чем неявное"

# 8dc1626b65664ffeac8d88bcbaa11437
#: ../../misc/design-philosophies.txt:76
msgid ""
"This is a core Python principle listed in :pep:`20`, and it means Django "
"shouldn't do too much \"magic.\" Magic shouldn't happen unless there's a "
"really good reason for it. Magic is worth using only if it creates a huge "
"convenience unattainable in other ways, and it isn't implemented in a way "
"that confuses developers who are trying to learn how to use the feature."
msgstr ""
"Этот принцип Python'а упоминается в :pep:`20`, и это значит, что Django не "
"должен творить слишком много \"магии.\" Она не должна происходить без явной "
"на то причины. Магию стоит использовать только в том случае, если она дает "
"значительные преимущества, недостижимые другими путями, и, кроме того, не "
"вводит в заблуждение разработчиков, пытающихся понять, как же она работает."

# 6bd0462dd14846fd94896f73f8afea00
#: ../../misc/design-philosophies.txt:85
#: ../../misc/design-philosophies.txt:322
msgid "Consistency"
msgstr "Логичность"

# 9b84c59e8ae74062bdf80c9aeb84a414
#: ../../misc/design-philosophies.txt:87
msgid ""
"The framework should be consistent at all levels. Consistency applies to "
"everything from low-level (the Python coding style used) to high-level (the "
"\"experience\" of using Django)."
msgstr ""
"Фреймворк должен быть логичным на всех уровнях: начиная от стиля "
"программирования на Python'е и заканчивая опытом использования Django"

# b3dfb801027141248c36d6b87c58d42b
#: ../../misc/design-philosophies.txt:92
msgid "Models"
msgstr "Модели"

# 093aee1595f0482ba66cef09dbf04887
#: ../../misc/design-philosophies.txt:97
msgid ""
"Fields shouldn't assume certain behaviors based solely on the name of the "
"field. This requires too much knowledge of the system and is prone to "
"errors. Instead, behaviors should be based on keyword arguments and, in some "
"cases, on the type of the field."
msgstr ""
"Поведение поля (fields) не должно основываться исключительно на его имени. "
"Это требует слишком много знаний о системе и ведет ко множеству ошибок. "
"Вместо этого используйте в качестве ключевых слов аргументы и, в некоторых "
"случаях, тип поля."

# c03f1eaa8566426f88173d8dd15f4cc7
#: ../../misc/design-philosophies.txt:103
msgid "Include all relevant domain logic"
msgstr "Включайте всю логику предметной области"

# 17b26e49ea3d4cab92fe79096b225807
#: ../../misc/design-philosophies.txt:105
msgid ""
"Models should encapsulate every aspect of an \"object,\" following Martin "
"Fowler's `Active Record`_ design pattern."
msgstr ""
"Модель должна инкапсулировать каждый аспект \"объекта\", поэтому "
"придерживайтесь патерна `Active Record`_ Мартина Фаулера"

# 1f8e61a9e06744649f9a0593a0d1e1e8
#: ../../misc/design-philosophies.txt:108
msgid ""
"This is why both the data represented by a model and information about it "
"(its human-readable name, options like default ordering, etc.) are defined "
"in the model class; all the information needed to understand a given model "
"should be stored *in* the model."
msgstr ""
"Вот почему информация, описывающая модель и логику ее работы (например, "
"хорошо читаемое имя, настройки по умолчанию и др.), определена в классе "
"модели; все данные, необходимые для понимания работы модели, следует хранить "
"*в* самой модели."

# 4f8fe0fc58b84c5fb945f86469ba415a
#: ../../misc/design-philosophies.txt:116
msgid "Database API"
msgstr "API баз данных"

# 451e53e2114c46bf88c7cb20b872bb0f
#: ../../misc/design-philosophies.txt:118
msgid "The core goals of the database API are:"
msgstr "Главные задачи ядра баз данных:"

# 55c29ae1b5f448a59996db6a694e9742
#: ../../misc/design-philosophies.txt:121
msgid "SQL efficiency"
msgstr "Эффективность SQL"

# a771a56a7b494923842ddc52a51dfc22
#: ../../misc/design-philosophies.txt:123
msgid ""
"It should execute SQL statements as few times as possible, and it should "
"optimize statements internally."
msgstr ""
"SQL запросы должны выполняться как можно реже, и должны быть оптимизированы."

# e57d73580c4e41699e5739d8e3d3b0cb
#: ../../misc/design-philosophies.txt:126
msgid ""
"This is why developers need to call ``save()`` explicitly, rather than the "
"framework saving things behind the scenes silently."
msgstr ""
"Поэтому разработчик должен делать вызов save() явным, а не ждать пока "
"фреймворк сохранит данные сам."

# 1bda57627ae641efa3a8180a2f573ba9
#: ../../misc/design-philosophies.txt:129
msgid ""
"This is also why the ``select_related()`` ``QuerySet`` method exists. It's "
"an optional performance booster for the common case of selecting \"every "
"related object.\""
msgstr ""
"Кроме того, это объясняет, для чего нужны метод ``select_related()`` класса "
"``QuerySet``. Это альтернативный способ оптимизации стандартной задачи "
"получения всех связанных объектов."

# 1e9451f0907c4b238512f03d19a9f5f5
#: ../../misc/design-philosophies.txt:134
msgid "Terse, powerful syntax"
msgstr "Немногословный, но мощный синтаксис"

# 8b7132b111264fccaee5414695b48018
#: ../../misc/design-philosophies.txt:136
msgid ""
"The database API should allow rich, expressive statements in as little "
"syntax as possible. It should not rely on importing other modules or helper "
"objects."
msgstr ""
"API базы данных должен поддерживать богатые выразительные средства, "
"используя при этом как можно меньше синтаксиса, кроме того не следует "
"полагаться на импорт других можулей и объектов"

# 19de1410cdce4988b9abce3944e3080b
#: ../../misc/design-philosophies.txt:139
msgid ""
"Joins should be performed automatically, behind the scenes, when necessary."
msgstr "Слияние выполняется автоматически, когда это необходимо."

# eb798344535945a09b4b7128d954e9d2
#: ../../misc/design-philosophies.txt:141
msgid ""
"Every object should be able to access every related object, systemwide. This "
"access should work both ways."
msgstr ""
"Каждый объект должен иметь возможность получить доступ ко всем связанным и "
"общесистемным объектам. Такой доступ должен работать в обоих направлениях."

# e1253575737142fdb2ab3de4f912269a
#: ../../misc/design-philosophies.txt:145
msgid "Option to drop into raw SQL easily, when needed"
msgstr "Возможность легко использовать SQL, если это необходимо"

# 433ff66c6e37479e8f6d779714a806ec
#: ../../misc/design-philosophies.txt:147
msgid ""
"The database API should realize it's a shortcut but not necessarily an end-"
"all-be-all. The framework should make it easy to write custom SQL -- entire "
"statements, or just custom ``WHERE`` clauses as custom parameters to API "
"calls."
msgstr ""
"API базы данных должен упрощать работу с базой данных, а не замыть её "
"полностью на себе. Фреймворк должен позволять легко использовать SQL -- "
"полностью написать запрос, или указать только ``WHERE`` при вызове API."

# fab769ae2b4d4a4083882bc2d62a0d01
#: ../../misc/design-philosophies.txt:152
msgid "URL design"
msgstr "Использование URL"

# 689ffac06c8f4d07b411bf8022c60baf
#: ../../misc/design-philosophies.txt:157
msgid ""
"URLs in a Django app should not be coupled to the underlying Python code. "
"Tying URLs to Python function names is a Bad And Ugly Thing."
msgstr ""
"ULR-адреса в приложениях Django не следует как-либо привязывать к коду "
"Python'а. URL-адреса в именах функций Python'а совершенно ненужны и уродливы."

# 072f25525b304171aef3b8ec29e77d55
#: ../../misc/design-philosophies.txt:160
msgid ""
"Along these lines, the Django URL system should allow URLs for the same app "
"to be different in different contexts. For example, one site may put stories "
"at ``/stories/``, while another may use ``/news/``."
msgstr ""
"URL-адреса Django должны позволять формировать разные URL для одного и того "
"же приложения в разных контекстах. Например, один сайт может поместить "
"истории в ``/stories/``, в то время как другой использует ``/news/``."

# 2942b4aba342468985cdc981236f3245
#: ../../misc/design-philosophies.txt:165
msgid "Infinite flexibility"
msgstr "Бесконечная гибкость"

# 11c7f764a34446e4be0477ee833c053b
#: ../../misc/design-philosophies.txt:167
msgid ""
"URLs should be as flexible as possible. Any conceivable URL design should be "
"allowed."
msgstr ""
"URL должны быть максимально гибкими и позволять абсолютно любую форму URL-"
"адреса."

# 9805879f66ca4d70a5fb6f27e280a38e
#: ../../misc/design-philosophies.txt:171
msgid "Encourage best practices"
msgstr "Поощряйте \"best practices\""

# e141fa409d47435d845df96066975e56
#: ../../misc/design-philosophies.txt:173
msgid ""
"The framework should make it just as easy (or even easier) for a developer "
"to design pretty URLs than ugly ones."
msgstr ""
"Фреймворк должен подталкивать разработчика к использованию красивых и "
"логичных URL-адресов."

# a2232f386a5d41a492cb19c3682dbfd6
#: ../../misc/design-philosophies.txt:176
msgid "File extensions in Web-page URLs should be avoided."
msgstr "Не используйте расширение файла в URL страниц."

# 3035b9cb029249c0823f7be2ad087901
#: ../../misc/design-philosophies.txt:178
msgid "Vignette-style commas in URLs deserve severe punishment."
msgstr "Использующие запятые в URL, заслуживают сурового наказания."

# b18049c00a1248e08350a39e63ea5d70
#: ../../misc/design-philosophies.txt:183
msgid "Definitive URLs"
msgstr "Дефинитивные URL-адреса"

# 567be75659ed4c3aa05eba1e2ef690e6
#: ../../misc/design-philosophies.txt:187
msgid ""
"Technically, ``foo.com/bar`` and ``foo.com/bar/`` are two different URLs, "
"and search-engine robots (and some Web traffic-analyzing tools) would treat "
"them as separate pages. Django should make an effort to \"normalize\" URLs "
"so that search-engine robots don't get confused."
msgstr ""
"Технически, ``foo.com/bar`` и ``foo.com/bar/`` -- это два разных URL-адреса, "
"и поисковые роботы (и некоторые утилиты анализа трафика) будут воспринимать "
"их как отдельные страницы, поэтому Django должен позаботиться о "
"\"нормализации\" адресов."

# 28b62924843440dfa410541bef364ef6
#: ../../misc/design-philosophies.txt:192
msgid "This is the reasoning behind the :setting:`APPEND_SLASH` setting."
msgstr "Вот для чего была создана настройка :setting:`APPEND_SLASH`."

# 2a6a3563a8ca4049b005375e863786ac
#: ../../misc/design-philosophies.txt:195
msgid "Template system"
msgstr "Шаблоны Django"

# d29b1d5245184f56b4d0fefd845979d3
#: ../../misc/design-philosophies.txt:200
msgid "Separate logic from presentation"
msgstr "Отделяйте логику от представления"

# 23c6e9d1fa4c46e0bbda4303065df4ae
#: ../../misc/design-philosophies.txt:202
msgid ""
"We see a template system as a tool that controls presentation and "
"presentation-related logic -- and that's it. The template system shouldn't "
"support functionality that goes beyond this basic goal."
msgstr ""
"Система шаблонов, как мы видим, являет собой контроллер представления и "
"связанную с этим логику, и ничего более. Шаблоны не поддерживают какую либо "
"функциональность, выходящую за рамки  отображения данных"

# 43f217467eb54fa5b2c51266282f46a8
#: ../../misc/design-philosophies.txt:207
msgid "Discourage redundancy"
msgstr "Откажитесь от избыточности"

# b57b87761d1948c4b5a72474cdc4416d
#: ../../misc/design-philosophies.txt:209
#, fuzzy
msgid ""
"The majority of dynamic websites use some sort of common sitewide design -- "
"a common header, footer, navigation bar, etc. The Django template system "
"should make it easy to store those elements in a single place, eliminating "
"duplicate code."
msgstr ""
"Главная особенность динамических Web сайтов -- использование небольшого "
"набора общих элементов дизайна, а именно общих header'ов, footer'ов, "
"навигации и др. Шаблоны Django позволяют легко описать все эти элементы в "
"одном месте, избегая дублирования кода."

# 724c43308cfc4347bdd928634f2ebeb7
#: ../../misc/design-philosophies.txt:214
msgid ""
"This is the philosophy behind :ref:`template inheritance <template-"
"inheritance>`."
msgstr ""
"Это основа философии :ref:`наследования шаблонов <template-inheritance>`."

# e5ce5536a9664646a7ddd9fdf934bfc9
#: ../../misc/design-philosophies.txt:218
msgid "Be decoupled from HTML"
msgstr "Не зацикливайтесь на HTML"

# 570176d5afb94222966cf97405556ad1
#: ../../misc/design-philosophies.txt:220
msgid ""
"The template system shouldn't be designed so that it only outputs HTML. It "
"should be equally good at generating other text-based formats, or just plain "
"text."
msgstr ""
"Шаблоны следует проектировать так, чтобы была возможность генерировать "
"представление данных в любых текстовых форматах, а не только в HTML"

# 33fb2817d07a4ac9a7c93f8b3b7db73c
#: ../../misc/design-philosophies.txt:225
msgid "XML should not be used for template languages"
msgstr "XML не лучший способ описания шаблонов"

# 9c6d54eadc2245bea0021387129b8fc5
#: ../../misc/design-philosophies.txt:229
msgid ""
"Using an XML engine to parse templates introduces a whole new world of human "
"error in editing templates -- and incurs an unacceptable level of overhead "
"in template processing."
msgstr ""
"Использование XML  в качестве основы для парсера шаблонов приведет Вас в "
"новый безграничный мир человеческих ошибок, и, кроме того, потребует больших "
"затрат при обработке шаблона"

# b4121a90e9f543d59978d4293b81d2f7
#: ../../misc/design-philosophies.txt:234
msgid "Assume designer competence"
msgstr "Предполагается, что верстальщики знают свое дело"

# 3342dc0ac217456db8bc5697159bf105
#: ../../misc/design-philosophies.txt:236
msgid ""
"The template system shouldn't be designed so that templates necessarily are "
"displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe "
"of a limitation and wouldn't allow the syntax to be as nice as it is. Django "
"expects template authors are comfortable editing HTML directly."
msgstr ""
"Проектируйте шаблон так, чтобы его редактирование не требовало обязательного "
"использования реакторов WYSIWYG, таких как Dreamweaver, для красивого "
"отображения. Код должен хорошо выглядеть и таким, какой он есть. Django "
"позволяет автору шаблона создавать его в обычном текстовом редакторе."

# d168a9d4c67c487f828dae44de6d1561
#: ../../misc/design-philosophies.txt:242
msgid "Treat whitespace obviously"
msgstr "Очевидная обработка пробелов"

# 73de53fd91bb4620bb6f8c5d5e74f0a1
#: ../../misc/design-philosophies.txt:244
msgid ""
"The template system shouldn't do magic things with whitespace. If a template "
"includes whitespace, the system should treat the whitespace as it treats "
"text -- just display it. Any whitespace that's not in a template tag should "
"be displayed."
msgstr ""
"Шаблоны не должны творить магию с пробелами. Если шаблон включает пробел, то "
"система обрабатывает пробелы также как и обычный текст - просто отображает "
"его. Любые пробелы, не включенные в тег, отображаются как есть."

# 1ba6791114bb4709864573d0506d9542
#: ../../misc/design-philosophies.txt:250
msgid "Don't invent a programming language"
msgstr "Не изобретайте язык программирования"

# bceff042f6d942f4afac25caf3795207
#: ../../misc/design-philosophies.txt:252
#, fuzzy
msgid ""
"The goal is not to invent a programming language. The goal is to offer just "
"enough programming-esque functionality, such as branching and looping, that "
"is essential for making presentation-related decisions. The :ref:`Django "
"Template Language (DTL) <template-language-intro>` aims to avoid advanced "
"logic."
msgstr ""
"Цель заключается не в том, чтобы изобрести новый язык программирования. Цель "
"в том, чтобы предложить достаточную функциональность, например циклы и "
"ветвления, играющие важную роль при  описании представления данных"

# 2397e48b60544d2d8663084cfd896e9f
#: ../../misc/design-philosophies.txt:257
msgid ""
"The Django template system recognizes that templates are most often written "
"by *designers*, not *programmers*, and therefore should not assume Python "
"knowledge."
msgstr ""
"Система шаблонов Django подразумевает, что шаблоны чаще всего создаются "
"*дизайнерами*, не *программистами*, поэтому написание шаблона не привязано к "
"знанию сиснаксиса Python'а"

# 50fc9abfddca4373838f591407045bce
#: ../../misc/design-philosophies.txt:262
msgid "Safety and security"
msgstr "Безопасность и защита"

# fe51b188dcf444d0857b99db2bf1d81d
#: ../../misc/design-philosophies.txt:264
msgid ""
"The template system, out of the box, should forbid the inclusion of "
"malicious code -- such as commands that delete database records."
msgstr ""
"Из коробки система шаблонов не позволяет выполнять код, так или иначе "
"причиняющий вред данным, например их удаление"

# 2243a17228114e7cb3c3fd5b16fe63e8
#: ../../misc/design-philosophies.txt:267
msgid ""
"This is another reason the template system doesn't allow arbitrary Python "
"code."
msgstr ""
"И это другая причина, почему шаблоны Django не позволяют напрямую работать с "
"кодом Python'а"

# 07311a8caa514b76ab737f0d71a54882
#: ../../misc/design-philosophies.txt:270
#: ../../misc/design-philosophies.txt:328
msgid "Extensibility"
msgstr "Расширяемость"

# b6a484f757a347b2954cab1ca2b078bc
#: ../../misc/design-philosophies.txt:272
msgid ""
"The template system should recognize that advanced template authors may want "
"to extend its technology."
msgstr ""
"Система шаблонов предполагает, что разработчику может понажобиться расширить "
"спектр используемых технологий"

# 2b1d92e82f714a7eb557ac1fe1eaef15
#: ../../misc/design-philosophies.txt:275
msgid "This is the philosophy behind custom template tags and filters."
msgstr "И эта философия основывается на кастомных тегах и фильтрах"

# b6f5bf871e44482a823e17d1d9a09134
#: ../../misc/design-philosophies.txt:278
msgid "Views"
msgstr "Представление"

# f86fa1a577e34a40802737cb42ae1a1b
#: ../../misc/design-philosophies.txt:281
msgid "Simplicity"
msgstr "Простота"

# 9e8150207a3b43a594db3e3aed43a6c3
#: ../../misc/design-philosophies.txt:283
msgid ""
"Writing a view should be as simple as writing a Python function. Developers "
"shouldn't have to instantiate a class when a function will do."
msgstr ""
"Создание представления следует делать таким же простым как и написание "
"функции Python'а. Разработчики "

# f0957fafce1b40d0bdacf6a7c23e82cd
#: ../../misc/design-philosophies.txt:287
msgid "Use request objects"
msgstr "Использование объектов запроса"

# 05ac948c0caa4a148f11aac55afdb41a
#: ../../misc/design-philosophies.txt:289
msgid ""
"Views should have access to a request object -- an object that stores "
"metadata about the current request. The object should be passed directly to "
"a view function, rather than the view function having to access the request "
"data from a global variable. This makes it light, clean and easy to test "
"views by passing in \"fake\" request objects."
msgstr ""
"Представление должно иметь доступ к объекту запроса -- объекту, хранящему "
"метаданные о текущем запросе. Объект следует передавать непосредствено в "
"функцию представления. Это лучше, чем если бы представление получало данные "
"от запроса через какую либо глобальную переменную. Все это делает простым и "
"прозрачным тестирование представления посредством передачи ему \"ложных\" "
"данных"

# 718bbda41d0e4c18a8e2fc112bc9cdf1
#: ../../misc/design-philosophies.txt:298
msgid ""
"A view shouldn't care about which template system the developer uses -- or "
"even whether a template system is used at all."
msgstr ""
"Представление не должно заботиться о том, какой шаблон использует "
"разработчик, или даже будут ли шаблоны вообще использоваться."

# edee837a0cb74a4ba022096076bac1e9
#: ../../misc/design-philosophies.txt:302
msgid "Differentiate between GET and POST"
msgstr "Разграничивайте GET и POST запросы"

# ab6362f9221542fca2400edcc2931c1b
#: ../../misc/design-philosophies.txt:304
msgid ""
"GET and POST are distinct; developers should explicitly use one or the "
"other. The framework should make it easy to distinguish between GET and POST "
"data."
msgstr ""
"GET и POST сильно отличаются, поэтому разработчику следует разделять их "
"использование. Фреймворк должен легко отличать данных GET и POST запросов."

# 4ff2550ebbc44f8bbc11586f5a7d7491
#: ../../misc/design-philosophies.txt:310
msgid "Cache Framework"
msgstr "Ядро кэша"

# 6dcd759ffe2949c6ad103abf5f34590e
#: ../../misc/design-philosophies.txt:312
msgid "The core goals of Django's :doc:`cache framework </topics/cache>` are:"
msgstr "Задачи ядра :doc:`кэша Django</topics/cache>`:"

# c47fa80cb1764fa28c411273b3578271
#: ../../misc/design-philosophies.txt:317
msgid ""
"A cache should be as fast as possible.  Hence, all framework code "
"surrounding the cache backend should be kept to the absolute minimum, "
"especially for ``get()`` operations."
msgstr ""
"Кэш создается настолько быстрым, насколько это возможно. Таким образом, весь "
"код фреймворка, затрагивающий работу с кэшем, следует сводить к абсолютному "
"минимуму, особенно касательно ``get()`` запросов"

# a051dea06d2e48ae8f1bd7b415b447da
#: ../../misc/design-philosophies.txt:324
msgid ""
"The cache API should provide a consistent interface across the different "
"cache backends."
msgstr ""
"API кэша проектируется так, чтобы обеспечить единый интерфейс, позволяющий "
"однообразно работать с различными реализациями кэша"

# f9cfbc7c1ce14cd9b5313078f383fe55
#: ../../misc/design-philosophies.txt:330
msgid ""
"The cache API should be extensible at the application level based on the "
"developer's needs (for example, see :ref:`cache_key_transformation`)."
msgstr ""
"Обычно оставляют возможность расширения API кэша в будущем для нужд "
"разработчика (например смотрите :ref:`cache_key_transformation`)"

# b958ade4288042b998754afd5514f337
# 4f52ecfc8e4b49318722e8b083b0be0d
# 25246eecef9b4d129cee0f72750c9c17
#: ../../misc/design-philosophies.txt:17
#, fuzzy
msgid "coupling"
msgstr "Слабое связывание"

# a5e936b404d64de9afaca3d820f9082b
#: ../../misc/design-philosophies.txt:17
msgid "loose"
msgstr ""

# f1c1ddd4cbe04dcfafde087045603612
#: ../../misc/design-philosophies.txt:55
msgid "DRY"
msgstr ""

# a0cb439c392a409cb15ada6f5b198a55
#: ../../misc/design-philosophies.txt:55
msgid "Don't repeat yourself"
msgstr "Не повторяйтесь"

# 731d3ec667814b459b1f58a884b7efa3
#: ../../misc/design-philosophies.txt:185
msgid "urls"
msgstr ""

# b18049c00a1248e08350a39e63ea5d70
#: ../../misc/design-philosophies.txt:185
#, fuzzy
msgid "definitive"
msgstr "Дефинитивные URL-адреса"

# 98747cad3b2545b799aea2161a319977
#: ../../misc/design-philosophies.txt:227
msgid "xml"
msgstr "xml"

# c4cfc48cca694cb0a88d440925ddd707
#: ../../misc/design-philosophies.txt:227
msgid "suckiness of"
msgstr ""

# b509a99ceb924a0980430c42b7ac2e81
#~ msgid "The template system intentionally doesn't allow the following:"
#~ msgstr "Система шаблонов умышленно не позволяет делать следующее:"

# 5213bd7a87e8454586df22d6150bd01d
#~ msgid "Assignment to variables"
#~ msgstr "Назначение переменных"

# f8ae5ae8a66c496d81e68f128ae4d5bf
#~ msgid "Advanced logic"
#~ msgstr "Расширение логики"
