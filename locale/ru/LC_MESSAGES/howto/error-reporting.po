# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# redvi <liberty195@gmail.com>, 2013, 2014, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2017-11-22 12:27+0200\n"
"Last-Translator: redvi <liberty195@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# ba724917237345d28a21870fcbb09dd9
#: ../../howto/error-reporting.txt:3
msgid "Error reporting"
msgstr "Отчёты об ошибках"

# a1f74f849b5340bcb3df83218c414d3e
#: ../../howto/error-reporting.txt:5
msgid ""
"When you're running a public site you should always turn off the :setting:"
"`DEBUG` setting. That will make your server run much faster, and will also "
"prevent malicious users from seeing details of your application that can be "
"revealed by the error pages."
msgstr ""
"Когда ваш сайт работает публично вы всегда должны отключать опцию отладки :"
"setting:`DEBUG`. Это сделает запуск вашего сервера намного быстрее и избавит "
"посетителей от созерцания детальной информации, отображаемой на странице в "
"случае ошибок."

# d6a04a4736ac4766aa8cd2514a8b3530
#: ../../howto/error-reporting.txt:10
#, fuzzy
msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will instead see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""
"Однако, отключив вывод отладочной информации, вы рискуете никогда не узнать "
"об имеющихся на сайте ошибках при обращении к публичным страницам. Но вам "
"нужно отслеживать появление ошибок на уже развёрнутых сайтах, и Django может "
"быть сконфигурирован таким образом, чтобы всегда предоставлять вам "
"необходимые отчёты."

# 545fde765f7b4d0285de3981aaaa2c05
#: ../../howto/error-reporting.txt:16
msgid "Email reports"
msgstr "Уведомления на email"

# e411b5fe86ef4c8a902a3423a80b6367
#: ../../howto/error-reporting.txt:19
msgid "Server errors"
msgstr "Ошибки сервера"

# 5791e50858254d818c68002b726c844f
#: ../../howto/error-reporting.txt:21
#, fuzzy
msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (strictly speaking, for "
"any response with an HTTP status code of 500 or greater). This gives the "
"administrators immediate notification of any errors. The :setting:`ADMINS` "
"will get a description of the error, a complete Python traceback, and "
"details about the HTTP request that caused the error."
msgstr ""
"Когда опция :setting:`DEBUG` установлена в ``False``, Django высылает отчёт "
"пользователям, указанным в секции :setting:`ADMINS`, в случае, если ваш код "
"вызывает исключения, которые не могут быть обработаны и приводят к "
"внутренней ошибке сервера (HTTP status code 500). Администраторам немедленно "
"поступит соответствующее уведомление. Администраторам (:setting:`ADMINS`) "
"будет доступно писание ошибки, вывод трассировочной информации и указание на "
"HTTP запрос, который вызвал ошибку."

# 07fc4f49acd54a99bae533575ab41105
#: ../../howto/error-reporting.txt:31
msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify :"
"setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:"
"`EMAIL_HOST_PASSWORD`, though other settings may be also required depending "
"on your mail server's configuration. Consult :doc:`the Django settings "
"documentation </ref/settings>` for a full list of email-related settings."
msgstr ""
"Для отправки электронного уведомления Django потребуется указать несколько "
"параметров для успешного подключения к почтовому серверу. По крайней мере, "
"нужно указать имя хоста (:setting:`EMAIL_HOST`) и, возможно, имя "
"пользователя (:setting:`EMAIL_HOST_USER`) и его пароль (:setting:"
"`EMAIL_HOST_PASSWORD`), хотя могут потребоваться и другие настройки , это "
"зависит от конфигурации почтового сервера. См. :doc:`документацию по "
"настройке проекта </ref/settings>`, где приведён полный список возможных "
"опций."

# fbf71103fc084104b5ad9ef109a9c4e6
#: ../../howto/error-reporting.txt:40
msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""
"По-умолчанию Django отправит отчёт на адрес root@localhost. Однако некоторые "
"провайдеры отбрасывают любые запросы на этот адрес. Для указания другого "
"адреса исправьте настройки параметра :setting:`SERVER_EMAIL`."

# 9a95c5673ca04c5594d72040d2f392f5
#: ../../howto/error-reporting.txt:44
msgid ""
"To activate this behavior, put the email addresses of the recipients in the :"
"setting:`ADMINS` setting."
msgstr ""
"Чтобы включить такое поведение укажите почтовые адреса в секции :setting:"
"`ADMINS`."

# 2c4915d9f899479d97caa89eb4e31e3d
#: ../../howto/error-reporting.txt:49
msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration </"
"topics/logging>`."
msgstr ""
"При отправке отчётов об ошибках задействуется логгирование, так что вы "
"можете управлять и его поведением с помощью :doc:`соответствующих настроек </"
"topics/logging>`."

# 2547fa47a3074ad7a1a91ff4a439f05d
#: ../../howto/error-reporting.txt:54
msgid "404 errors"
msgstr "404 ошибка"

# f50d368dcfac4bcf9105de12358885e2
#: ../../howto/error-reporting.txt:56
msgid ""
"Django can also be configured to email errors about broken links (404 \"page "
"not found\" errors). Django sends emails about 404 errors when:"
msgstr ""
"Django может уведомлять вас о неработающих ссылках (ошибка 404 \"страница не "
"найдена\"). Сообщения о 404 ошибках отправляются при условии, что:"

# a8412b7a0dbe4916ab08973e4ec73e10
#: ../../howto/error-reporting.txt:59
msgid ":setting:`DEBUG` is ``False``;"
msgstr "параметр :setting:`DEBUG` установлен в ``False``;"

# 4c10787d77314a849eb9e3c0039e0234
#: ../../howto/error-reporting.txt:61
msgid ""
"Your :setting:`MIDDLEWARE` setting includes :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware`."
msgstr ""
"В настройках :setting:`MIDDLEWARE` содержится :class:`django.middleware."
"common.BrokenLinkEmailsMiddleware`."

# daab7d2152034d878cbf8599f2bbf9cf
#: ../../howto/error-reporting.txt:64
#, fuzzy
msgid ""
"If those conditions are met, Django will email the users listed in the :"
"setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. It doesn't bother to email for 404s that don't have a referer "
"-- those are usually people typing in broken URLs or broken Web bots. It "
"also ignores 404s when the referer is equal to the requested URL, since this "
"behavior is from broken Web bots too."
msgstr ""
"Если оба условия выполнены, Django вышлет отчёт пользователям, указанным в "
"секции :setting:`MANAGERS`, когда при запросе к странице возникает ошибка "
"404 и заброс содержит \"referer\". Это не относится к ошибке 404 на запрос, "
"который содержит \"referer\" -- как правило, в этом случае ошибка связана с "
"тем, что пользователь вводит неверный адрес, или Web-боты запрашивают "
"неверный адрес. Также игнорируются 404, если запрос содержит \"referer\" "
"равный запрошенному URL, они обычно так же вызваны Web-ботами."

# d8bd9243d2e0492cb445930a0b03fb6d
#: ../../howto/error-reporting.txt:73
msgid ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear "
"before other middleware that intercepts 404 errors, such as :class:`~django."
"middleware.locale.LocaleMiddleware` or :class:`~django.contrib.flatpages."
"middleware.FlatpageFallbackMiddleware`. Put it towards the top of your :"
"setting:`MIDDLEWARE` setting."
msgstr ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` должен "
"выполняться перед другими мидлварами обрабатывающими 404 ошибки, такими как :"
"class:`~django.middleware.locale.LocaleMiddleware` или :class:`~django."
"contrib.flatpages.middleware.FlatpageFallbackMiddleware`. Поместите его выше "
"в настройках :setting:`MIDDLEWARE`."

# b06f65a887ba432e91107fcda4d3259e
#: ../../howto/error-reporting.txt:79
msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the :"
"setting:`IGNORABLE_404_URLS` setting. It should be a list of compiled "
"regular expression objects. For example::"
msgstr ""
"Вы можете отключить отчёты о 404 ошибке, настроив :setting:"
"`IGNORABLE_404_URLS`. Это должен быть список со скомпилированными объектами "
"регулярных выражений. Например::"

# 45965c160fd442e68d486d93e68dbe15
#: ../../howto/error-reporting.txt:89
msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""
"В этом примере уведомление об ошибке 404 *не будет* присылаться, если URL "
"страницы заканчивается на ``.php`` или ``.cgi``. Также в исключения "
"добавлена директория ``/phpmyadmin/``."

# a8653766d7934b228fc9a15940fd990d
#: ../../howto/error-reporting.txt:92
msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""
"В приведённом ниже примере показано как добавить в исключения некоторые URL, "
"которые часто запрашиваются браузером и поисковыми роботами::"

# 5600b0e31d614776979aaa0eaf157d5c
#: ../../howto/error-reporting.txt:102
msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""
"(Заметьте, что это регулярные выражения, и нужно ставить обратный слэш, "
"чтобы экранировать значения.)"

# c757690e01a147ffa470cc75838192a1
#: ../../howto/error-reporting.txt:105
msgid ""
"If you'd like to customize the behavior of :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware` further (for example to ignore requests coming "
"from web crawlers), you should subclass it and override its methods."
msgstr ""
"Если хочется изменить дальнейшее поведение :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware` (изначально игнорирует запросы от поисковых "
"роботов), необходимо переопределить методы в его подклассах."

# 9bacdf1feb0643b9b1dce0bc5315211a
#: ../../howto/error-reporting.txt:112
msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""
"При отправке 404 ошибки задействуется логгирование. Изначально записи "
"игнорируются, но могут быть использованы для отправки отчётов при записи с "
"помощью обработчика и :doc:`настройки логгирования </topics/logging>`."

# 86057fec20cc407b9c2fa87e677c8cbf
#: ../../howto/error-reporting.txt:119
msgid "Filtering error reports"
msgstr "Фильтрация сообщений об ошибках"

#: ../../howto/error-reporting.txt:123
msgid ""
"Filtering sensitive data is a hard problem, and it's nearly impossible to "
"guarantee that sensitive data won't leak into an error report. Therefore, "
"error reports should only be available to trusted team members and you "
"should avoid transmitting error reports unencrypted over the Internet (such "
"as through email)."
msgstr ""
"Фильтрация конфиденциальной информации -- это сложная задача, и нет никакой "
"гарантии, что она не появится в отчете об ошибке. По этому отчеты об ошибках "
"должны быть доступны только доверенным членам команды и не передаваться в "
"открытом виде через интернет(например по почте)."

# b1f3ca56719c4c6ab7a82d0e74ac7ccc
#: ../../howto/error-reporting.txt:130
msgid "Filtering sensitive information"
msgstr "Фильтрация конфиденциальной информации"

# 336ff2116e80428db0003fd8394d82eb
#: ../../howto/error-reporting.txt:134
msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_’s local variables, and the :"
"class:`~django.http.HttpRequest`’s :ref:`attributes<httprequest-attributes>`."
msgstr ""
"Отчёты об ошибках весьма полезны для отладки, поэтому лучше записывать как "
"можно больше соответствующей информации о различных инцидентах. Например, "
"изначально Django сохраняет `полную трассировочную информацию <http://en."
"wikipedia.org/wiki/Stack_trace>`_ о вызванных исключениях, каждую локальную "
"переменную `кадра трассировки <http://en.wikipedia.org/wiki/Stack_frame>`_ "
"и :ref:`атрибуты<httprequest-attributes>` класса :class:`~django.http."
"HttpRequest`."

# 6d4aecb7f36c4fd8af16a8965c9b430f
#: ../../howto/error-reporting.txt:140
msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So in addition to filtering out settings "
"that appear to be sensitive as described in the :setting:`DEBUG` "
"documentation, Django offers a set of function decorators to help you "
"control which information should be filtered out of error reports in a "
"production environment (that is, where :setting:`DEBUG` is set to "
"``False``): :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`."
msgstr ""
"Однако, некоторая информация может быть конфиденциальной и совершенно не "
"подходит для отслеживания, к таким моментам можно отнести пароль "
"пользователя или номер кредитной карты. Django предлагает несколько "
"декораторов для контроля информации, которая должна быть отфильтрована при "
"отправке отчётов на боевом сервере (то есть там, где :setting:`DEBUG` "
"установлен в ``False``): :func:`sensitive_variables` и :func:"
"`sensitive_post_parameters`."

# 229c2ebce2704f588cc2ef8a8aa8add4
#: ../../howto/error-reporting.txt:154
msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""
"Если функция (или представление регулярного выражения) в вашем коде "
"использует локальные переменные, содержащие конфиденциальную информацию, вы "
"можете предотвратить появление этих переменных при отправке отчётов при "
"помощи декоратора ``sensitive_variables``::"

# 7672250fafec414fb5c06e47f4eaeb20
#: ../../howto/error-reporting.txt:168
msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error "
"reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""
"В данном выше примере значения переменных ``user``, ``pw`` и ``cc`` будут "
"скрыты и заменены на символы звёздочки (`**********`) в отчёте, в то время "
"как значение переменной ``name`` будет открытым."

# 113eeb94f43d4cf686cb432c2d718e76
#: ../../howto/error-reporting.txt:173
msgid ""
"To systematically hide all local variables of a function from error logs, do "
"not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""
"Систематическое скрытие всех локальных переменных функции из журнала ошибок "
"(error logs) не требует никаких аргументов декоратора "
"``sensitive_variables``::"

# 369897c5bf914e078988b1bc5d2785b2
#: ../../howto/error-reporting.txt:180
msgid "When using multiple decorators"
msgstr "При использовании нескольких декораторов"

# 7b7c898909f14f69888947ef52985396
#: ../../howto/error-reporting.txt:182
msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``’ in the following example), and if the decorated function has "
"multiple decorators, then make sure to place ``@sensitive_variables`` at the "
"top of the decorator chain. This way it will also hide the function argument "
"as it gets passed through the other decorators::"
msgstr ""
"Если переменная, значение которой вы хотите скрыть, также является "
"аргументом функции (как '``user``' в приведённом примере), и декорируемая "
"функция имеет множество декораторов, убедитесь, что ``@sensitive_variables`` "
"находится на самом верху цепочки. Это позволит также скрыть аргументы "
"функции, взаимодействующие с другими декораторами::"

# 2851d6096c364e2a88b4a03a80aeb8c6
#: ../../howto/error-reporting.txt:196
msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""
"Если одно из представлений объекта :class:`~django.http.HttpRequest` с "
"атрибутом :attr:`POST parameters<django.http.HttpRequest.POST>` подтверждает "
"содержание конфиденциальной информации, вы можете предотвратить включение "
"этих данных в отчёт, используя декоратор ``sensitive_post_parameters`` ::"

# 059e938787344fb2bb51a93b3903b673
#: ../../howto/error-reporting.txt:214
msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""
"В данном выше примере значения ``pass_word`` и ``credit_card_number`` в POST "
"запросе будут скрыты и заменены звёздочками (`**********`) при представлении "
"запроса в отчёте об ошибках, в то время как параметр ``name`` будет открытым."

# dc264575576a4456a097cf08845ef677
#: ../../howto/error-reporting.txt:219
msgid ""
"To systematically hide all POST parameters of a request in error reports, do "
"not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""
"Систематическое скрытие всех POST параметров из журнала ошибок (error logs) "
"не требует никаких аргументов декоратора ``sensitive_post_parameters`` ::"

# 677adefb76514e2bb2d6a0b351eaac40
#: ../../howto/error-reporting.txt:226
msgid ""
"All POST parameters are systematically filtered out of error reports for "
"certain :mod:`django.contrib.auth.views` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""
"Все POST параметры систематически фильтруются в отчёте об ошибках в "
"представлении :mod:`django.contrib.auth.views` (``login``, "
"``password_reset_confirm``, ``password_change``, и ``add_view`` и "
"``user_change_password`` в системе аутентификации) для предотвращения утечки "
"конфиденциальной информации, такой как пароли пользователей."

# fd428ed12ba14310bfa63375ef2fcffc
#: ../../howto/error-reporting.txt:235
msgid "Custom error reports"
msgstr "Настройка отчета об ошибке"

# da015ab93eca4927a6560af09a4885df
#: ../../howto/error-reporting.txt:237
msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, "
"respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: :class:`django.views.debug."
"SafeExceptionReporterFilter`. This filter uses the decorators' annotations "
"to replace the corresponding values with stars (`**********`) when the error "
"reports are produced. If you wish to override or customize this default "
"behavior for your entire site, you need to define your own filter class and "
"tell Django to use it via the :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` "
"setting::"
msgstr ""
"Декораторы :func:`sensitive_variables` и :func:`sensitive_post_parameters` "
"отмечают небезопасные аргументы и POST аргументы объекта ``HttpRequest``, "
"которые передаются в функцию. При формировании отчета об ошибке эти данные "
"фильтруются. Фильтрация выполняется классом :class:`django.views.debug."
"SafeExceptionReporterFilter`. Этот класс заменит отмеченные декоратором "
"данные \"звездочками\" (`**********`) при формировании отчета. Вы можете "
"создать собственный класс фильтрации и указать его в настройке :setting:"
"`DEFAULT_EXCEPTION_REPORTER_FILTER`::"

# 4b422afd52714288a9d09991a69e901a
#: ../../howto/error-reporting.txt:252
msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``’s ``exception_reporter_filter`` "
"attribute::"
msgstr ""
"Также можно указать класс фильтрации для конкретного ``HttpRequest`` "
"определив атрибут ``exception_reporter_filter``::"

# 35989f9e057a4225a9f6456285a34427
#: ../../howto/error-reporting.txt:263
msgid ""
"Your custom filter class needs to inherit from :class:`django.views.debug."
"SafeExceptionReporterFilter` and may override the following methods:"
msgstr ""
"Ваш класс фильтрации должен наследоваться от :class:`django.views.debug."
"SafeExceptionReporterFilter` и может переопределить следующие методы:"

# bed6986a829a464f8d97b3978470428e
#: ../../howto/error-reporting.txt:271
msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By "
"default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""
"Возвращает ``True``, указывая фильтровать данные или нет. По умолчанию "
"фильтрация выполняется при :setting:`DEBUG` равном ``False``."

# a62d26d47915430b980f5f199056ecb3
#: ../../howto/error-reporting.txt:276
msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr ""
"Возвращает отфильтрованный словарь POST параметров. По умолчанию заменяет "
"небезопасные данные \"звездочками\" (`**********`)."

# f5fb4ede244e4145b58d70456c606824
#: ../../howto/error-reporting.txt:281
msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr ""
"Возвращает отфильтрованный словарь локальных переменных. По умолчанию "
"заменяет небезопасные данные \"звездочками\" (`**********`)."

# 37a48b46a71b436cb3cc12ab7fe1ba12
#: ../../howto/error-reporting.txt:287
msgid ""
"You can also set up custom error reporting by writing a custom piece of :ref:"
"`exception middleware <exception-middleware>`. If you do write custom error "
"handling, it's a good idea to emulate Django's built-in error handling and "
"only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""
"Вы также можете изменить формирование для отчета создав :ref:`собственный "
"мидлвар обработки ошибок <exception-middleware>`. Советуем сохранить "
"поведение Django и возвращать отчет об ошибке только при :setting:`DEBUG` "
"равном ``False``."

#~ msgid ""
#~ "In older versions, 404s were not ignored when the referer was equal to "
#~ "the requested URL."
#~ msgstr ""
#~ "В предыдущих версиях 404 ошибка не игонорировалась, если \"referer\" "
#~ "равен запрошенному URL"

# 6ecfd7fbcceb4a319fe4374eecd7f8bf
#~ msgid ""
#~ "Returns the representation string of the request object, that is, the "
#~ "value that would be returned by ``repr(request)``, except it uses the "
#~ "filtered dictionary of POST parameters as determined by :meth:"
#~ "`SafeExceptionReporterFilter.get_post_parameters`."
#~ msgstr ""
#~ "Возвращает строковое представление объекта запроса, то есть результат "
#~ "``repr(request)``, но использует отфильтрованные POST параметры из "
#~ "метода :meth:`SafeExceptionReporterFilter.get_post_parameters`."
