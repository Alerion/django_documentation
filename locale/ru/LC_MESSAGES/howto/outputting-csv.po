# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 2f0f92f433654dde8f6d8987d028757f
#: ../../howto/outputting-csv.txt:3
msgid "Outputting CSV with Django"
msgstr "Генерация CSV на Django"

# b5e960f6024d4fd7855bde32013e1899
#: ../../howto/outputting-csv.txt:5
msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""
"Здесь описывается как генерировать CSV (Comma Separated Values)"
"с помощью представлений Django. Для этого нам понадобится библиотека для "
"работы с CSV или шаблоны Django."

# fb1fa6ea1e7d4521bc6cd4ec00883c9a
#: ../../howto/outputting-csv.txt:10
msgid "Using the Python CSV library"
msgstr "Использование библиотеки для работы с CSV"

# 57d81c073a40403784f27cf56731a18a
#: ../../howto/outputting-csv.txt:12
msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django "
"is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""
"Python поставляется с библиотекой :mod:`csv`. Фишка в том, что этот модуль "
"работает с файловыми объектами, которым как раз и является :class:`~django.http.HttpResponse`."

# b8f7f440b0e74b4b9ffca179288bdcf0
#: ../../howto/outputting-csv.txt:16
msgid "Here's an example::"
msgstr "Пример::"

# 9439dc2449ad42b785bf9d05fe305c36
#: ../../howto/outputting-csv.txt:32
msgid ""
"The code and comments should be self-explanatory, but a few things deserve a "
"mention:"
msgstr ""
"Код и комментарии должны быть понятны, но на некоторые вещи стоит "
"обратить внимание:"

# 8f0909eeace5469e860b5b090f25d7b9
#: ../../howto/outputting-csv.txt:35
msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""
"Ответу устанавливается определённый тип :mimetype:`text/csv`, этим мы "
"говорим браузеру, что передаём файл в формате CSV, а не HTML. Если этого "
"не сделать, то браузер будет пытаться отобразить документ как HTML, "
"что может испугать пользователя."

# 50f00b3a03654d2ab4b79a4af7523a38
#: ../../howto/outputting-csv.txt:40
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, "
"etc."
msgstr ""
"Ответ также имеет дополнительный заголовок ``Content-Disposition``, "
"в котором содержится имя файла. Оно будет подставлено в окне сохранения файла."

# 0a5e6b4d7a2f45f1853ef149b8535838
#: ../../howto/outputting-csv.txt:45
msgid ""
"Hooking into the CSV-generation API is easy: Just pass ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a file-"
"like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""
"Для генерации CSV просто передайте ``response`` первым аргументом "
"в ``csv.writer``. Вообще, в ``csv.writer`` можно передавать любой файловый объект."

# e88a47c1437e4c8890eb7d8eaf851cee
#: ../../howto/outputting-csv.txt:50
msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an "
"iterable object such as a list or tuple."
msgstr ""
"Для каждой строки в CSV файле вызовите ``writer.writerow``, передав "
"итерируемый объект (список или тьюпл)."

# a35f1b8969fe47a8abea9ee5ae0fabc1
#: ../../howto/outputting-csv.txt:53
msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Just pass ``writerow()"
"`` your raw strings, and it'll do the right thing."
msgstr ""
"Модуль для работы с CSV сам умеет экранировать спецсимволы, так что "
"просто передавайте в ``writerow()`` свои данные."

# ecb2e6fc695440b09c7dad1e1cae57e0
#: ../../howto/outputting-csv.txt:58
msgid "Handling Unicode"
msgstr "Поддержка Unicode"

# 8d26173e7bcb47159b932b903bdc1bd4
#: ../../howto/outputting-csv.txt:60
msgid ""
"Python's :mod:`csv` module does not support Unicode input. Since Django uses "
"Unicode internally this means strings read from sources such as :class:"
"`~django.http.HttpRequest` are potentially problematic. There are a few "
"options for handling this:"
msgstr ""
"В Django работа ведётся со строками формата Unicode, однако :mod:`csv` "
"их не поддерживает. Вот несколько вариантов решения проблемы:"

# 75cdb5a2b16040d4bfaaffefebb3694b
#: ../../howto/outputting-csv.txt:65
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr "Ручная перекодировка всех Unicode объектов."

# db0932a05a964749abfbab90a25dcf71
#: ../../howto/outputting-csv.txt:67
msgid ""
"Use the ``UnicodeWriter`` class provided in the `csv module's examples "
"section`_."
msgstr "Использование ``UnicodeWriter``, который описан в `csv module's examples "
"section`_."

# 8f800ecec4ad4f8ebe259143417b46b3
#: ../../howto/outputting-csv.txt:70
msgid ""
"Use the `python-unicodecsv module`_, which aims to be a drop-in replacement "
"for :mod:`csv` that gracefully handles Unicode."
msgstr "Использование `python-unicodecsv module`_, который приходит на замену :mod:`csv`. "
"Там с Unicode всё отлично."

# c0696f035afb42699e1066e29a673bea
#: ../../howto/outputting-csv.txt:73
msgid ""
"For more information, see the Python documentation of the :mod:`csv` module."
msgstr "За подробной информацией можно обратиться к документации по модулю :mod:`csv`."

# ff49288465e248e5afc80979ddc1b2af
#: ../../howto/outputting-csv.txt:79
msgid "Using the template system"
msgstr "Использование шаблонов"

# 0283a0a53b1d4ab393d1e08f5903b11e
#: ../../howto/outputting-csv.txt:81
msgid ""
"Alternatively, you can use the :doc:`Django template system </topics/"
"templates>` to generate CSV. This is lower-level than using the convenient "
"Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""
"Однако, вы можете использовать :doc:`Django template system </topics/templates>` "
"для генерации CSV. Это низкоуровневое решение представлено здесь для "
"полноты картины."

# 31e9fa6c595d4ba3bdb97145532a45ba
#: ../../howto/outputting-csv.txt:85
msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""
"Суть в том, чтобы обработать список элементов вашим шаблоном и вывести в цикле с "
"помощью, например, :ttag:`for`."

# 60f3f5e688d746b3b31e1d8d1843aa2a
#: ../../howto/outputting-csv.txt:88
msgid "Here's an example, which generates the same CSV file as above::"
msgstr "Ниже пример реализации::"

# c4e26235d68b40a0a814c87b074224db
#: ../../howto/outputting-csv.txt:112
msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""
"Единственное отличие между этим примером и предыдущим состоит в том, что "
"используется шаблон Django, а не модуль :mod:`csv`. Всё остальное, например "
"``content_type='text/csv'``, совпадает."

# 04e0f010defd4820b112065cefeab3c7
#: ../../howto/outputting-csv.txt:116
msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr "Затем создайте шаблон ``my_template_name.txt`` со следующим кодом:"

# 7432d09285fd453b98a7e2b0d0a8d38f
#: ../../howto/outputting-csv.txt:123
msgid ""
"This template is quite basic. It just iterates over the given data and "
"displays a line of CSV for each row. It uses the :tfilter:`addslashes` "
"template filter to ensure there aren't any problems with quotes."
msgstr ""
"Довольно примитивный шаблон. Он переберает полученные данные и "
"формирует строку CSV для каждого элемента. В нём используется фильтр "
":tfilter:`addslashes`, так что проблем с экранированием символов быть не должно."

# e74ef383ea7d4bef88da41d932a40fcc
#: ../../howto/outputting-csv.txt:128
msgid "Other text-based formats"
msgstr "Остальные текстовые форматы"

# e876fa2754c54acf91f6b96921da0cd8
#: ../../howto/outputting-csv.txt:130
msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""
"Обратите внимание, что специфики именно CSV здесь нет. Подобным образом "
"можно работать с остальными форматами: как текстовыми, так и бинарными (например, "
":doc:`/howto/outputting-pdf`)."
