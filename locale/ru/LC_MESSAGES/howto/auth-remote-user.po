# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# redvi <liberty195@gmail.com>, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-05 11:28+0300\n"
"PO-Revision-Date: 2016-03-17 13:50+0200\n"
"Last-Translator: redvi <liberty195@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 11709d8df403495ba6ebc8aa2562ec8f
#: ../../howto/auth-remote-user.txt:3
msgid "Authentication using ``REMOTE_USER``"
msgstr "Аутентификация при помощи ``REMOTE_USER``"

# 64bb41ce69594461b0568cb1d314313c
#: ../../howto/auth-remote-user.txt:5
msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your "
"Django applications.  This type of authentication solution is typically seen "
"on intranet sites, with single sign-on solutions such as IIS and Integrated "
"Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, "
"`WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""
"Документ описывает использование внешних источников аутентификации (когда на "
"веб-сервере установлена переменная ``REMOTE_USER``) в приложениях Django.  "
"Этот тип аутентификации является типичным для интранет-сайтов, использующих "
"такие решения как  IIS и Integrated Windows Authentication или Apache и "
"`mod_authnz_ldap`_, `CAS`_, `Cosign`_, `WebAuth`_, `mod_auth_sspi`_."

# 5f7bf4bf1a254a29a43d54445581439b
#: ../../howto/auth-remote-user.txt:18
msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application.  "
"In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make "
"use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` or "
"``PersistentRemoteUserMiddleware``, and :class:`~django.contrib.auth."
"backends.RemoteUserBackend` classes found in :mod:`django.contrib.auth`."
msgstr ""
"Для обеспечения наибольшей безопасности Web-сервер устанавливает переменную "
"окружения ``REMOTE_USER`` и использует её в базовом приложении. В Django, "
"``REMOTE_USER`` доступна в атрибуте :attr:`request.META <django.http."
"HttpRequest.META>`. Настройте Django для того, чтобы задействовать "
"переменную ``REMOTE_USER``, используя ``RemoteUserMiddleware``, "
"``PersistentRemoteUserMiddleware`` и :class:`~django.contrib.auth.backends."
"RemoteUserBackend` из :mod:`django.contrib.auth`."

# 040a12c81e954f42842bea8391087f80
#: ../../howto/auth-remote-user.txt:28
msgid "Configuration"
msgstr "Конфигурирование"

# a021ae7982a54f26b768aeda7764281e
#: ../../howto/auth-remote-user.txt:30
#, fuzzy
msgid ""
"First, you must add the :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` to the :setting:`MIDDLEWARE` setting **after** the :"
"class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""
"Сначала нужно добавить :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` в настройки :setting:`MIDDLEWARE_CLASSES` **после** :"
"class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"

# 1c22f3d498494efd9f826b7b8d9dedb5
#: ../../howto/auth-remote-user.txt:42
msgid ""
"Next, you must replace the :class:`~django.contrib.auth.backends."
"ModelBackend` with :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""
"Затем заменить :class:`~django.contrib.auth.backends.ModelBackend` на :class:"
"`~django.contrib.auth.backends.RemoteUserBackend` в настройках :setting:"
"`AUTHENTICATION_BACKENDS`::"

# cf9c4f03623d4cb7b87233a2e9c77238
#: ../../howto/auth-remote-user.txt:50
msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the :class:`~django.contrib.auth.backends.RemoteUserBackend`."
msgstr ""
"С такими настройками ``RemoteUserMiddleware`` обнаружит имя пользователя в "
"запросе ``request.META['REMOTE_USER']``, аутентифицирует его и выполнит "
"вход, используя :class:`~django.contrib.auth.backends.RemoteUserBackend`."

#: ../../howto/auth-remote-user.txt:54
msgid ""
"Be aware that this particular setup disables authentication with the default "
"``ModelBackend``. This means that if the ``REMOTE_USER`` value is not set "
"then the user is unable to log in, even using Django's admin interface. "
"Adding ``'django.contrib.auth.backends.ModelBackend'`` to the "
"``AUTHENTICATION_BACKENDS`` list will use ``ModelBackend`` as a fallback if "
"``REMOTE_USER`` is absent, which will solve these issues."
msgstr ""
"Обратите внимание, что такие настройки отключат авторизацию через "
"``ModelBackend``. Это означает, что при пустом ``REMOTE_USER`` пользователь "
"не сможет авторизоваться, даже в интерфейсе администратора Django. "
"Добавление ``'django.contrib.auth.backends.ModelBackend'`` в список "
"``AUTHENTICATION_BACKENDS`` позволит использовать ``ModelBackend`` в случае "
"пустого ``REMOTE_USER``, что решит проблему."

#: ../../howto/auth-remote-user.txt:61
msgid ""
"Django's user management, such as the views in ``contrib.admin`` and the :"
"djadmin:`createsuperuser` management command, doesn't integrate with remote "
"users. These interfaces work with users stored in the database regardless of "
"``AUTHENTICATION_BACKENDS``."
msgstr ""
"Управление пользователями в Django -- представления из ``contrib.admin`` и "
"команда :djadmin:`createsuperuser`,не работают со сторонними пользователями, "
"только с пользователями в базе данных, независимо от значения настройки "
"``AUTHENTICATION_BACKENDS``."

# 3d84c4da77fb43048f645e03ee36c3cb
#: ../../howto/auth-remote-user.txt:68
msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""
"Поскольку ``RemoteUserBackend`` наследуется от ``ModelBackend``, вам всё "
"равно придётся проверять процедуру аутентификации, реализованную при помощи "
"``ModelBackend``."

#: ../../howto/auth-remote-user.txt:72
msgid ""
"Users with :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>` won't be allowed to authenticate. Use :class:`~django.contrib."
"auth.backends.AllowAllUsersRemoteUserBackend` if you want to allow them to."
msgstr ""

#: ../../howto/auth-remote-user.txt:80
msgid "In older versions, inactive users weren't rejected as described above."
msgstr ""

# 18d145f574c44ff696756021cd7ff272
#: ../../howto/auth-remote-user.txt:82
msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""
"Если механизм аутентификации использует обычные HTTP-заголовки и не содержит "
"``REMOTE_USER``, вы можете создать подкласс ``RemoteUserMiddleware`` и "
"установить атрибут ``header`` с ключом ``request.META``.  Например::"

#: ../../howto/auth-remote-user.txt:93
msgid ""
"Be very careful if using a ``RemoteUserMiddleware`` subclass with a custom "
"HTTP header. You must be sure that your front-end web server always sets or "
"strips that header based on the appropriate authentication checks, never "
"permitting an end-user to submit a fake (or \"spoofed\") header value. Since "
"the HTTP headers ``X-Auth-User`` and ``X-Auth_User`` (for example) both "
"normalize to the ``HTTP_X_AUTH_USER`` key in ``request.META``, you must also "
"check that your web server doesn't allow a spoofed header using underscores "
"in place of dashes."
msgstr ""
"Будьте осторожны при наследовании от ``RemoteUserMiddleware`` и "
"использовании собственного HTTP заголовка. Вы должны быть уверенны, что "
"внешний(front-end) веб-сервер всегда устанавливает или удаляет этот "
"заголовок при проверке авторизации, не позволяя пользователю явно передать "
"неверное или поддельное значение. Т.к. HTTP заголовки ``X-Auth-User`` и ``X-"
"Auth_User`` (например) приводятся к ``HTTP_X_AUTH_USER`` в ``request.META``, "
"веб сервер также должен предотвращать подделку этих заголовков, путем "
"использования подчеркивания вместо дефиса."

#: ../../howto/auth-remote-user.txt:102
msgid ""
"This warning doesn't apply to ``RemoteUserMiddleware`` in its default "
"configuration with ``header = 'REMOTE_USER'``, since a key that doesn't "
"start with ``HTTP_`` in ``request.META`` can only be set by your WSGI "
"server, not directly from an HTTP request header."
msgstr ""
"Это замечание не относится к параметрам по умолчанию для "
"``RemoteUserMiddleware``(``header = 'REMOTE_USER'``), т.к. ключ без "
"``HTTP_`` в ``request.META`` может быть установлен только WSGI сервером, а "
"не HTTP заголовком запроса."

# 93264720e6484ab18d09007e510b9f9b
#: ../../howto/auth-remote-user.txt:107
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"and override one or more of its attributes and methods."
msgstr ""
"При необходимости большего контроля допускается создание собственного "
"бэкенда(backend) аутентификации, который должен наследоваться от :class:"
"`~django.contrib.auth.backends.RemoteUserBackend` и отменять кое-что: "

#: ../../howto/auth-remote-user.txt:114
msgid "Using ``REMOTE_USER`` on login pages only"
msgstr "Использование ``REMOTE_USER`` только на странице авторизации"

#: ../../howto/auth-remote-user.txt:116
msgid ""
"The ``RemoteUserMiddleware`` authentication middleware assumes that the HTTP "
"request header ``REMOTE_USER`` is present with all authenticated requests. "
"That might be expected and practical when Basic HTTP Auth with ``htpasswd`` "
"or other simple mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or "
"other resource intensive authentication methods, the authentication in the "
"front-end HTTP server is usually only set up for one or a few login URLs, "
"and after successful authentication, the application is supposed to maintain "
"the authenticated session itself."
msgstr ""
"``RemoteUserMiddleware`` предполагает, что HTTP заголовок ``REMOTE_USER`` "
"присутствует для всех запросов. Это удобно для Basic HTTP Auth с помощью "
"``htpasswd``, или других простых механизмов, но для Negotiate (GSSAPI/"
"Kerberos), или других сложных механизмов авторизации, авторизация на \"front-"
"end\" HTTP сервере используется только для нескольких URL-ов страниц входа, "
"и после успешной авторизации предполагается, что приложения будет "
"самостоятельно работать с сессией."

#: ../../howto/auth-remote-user.txt:125
msgid ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"provides support for this use case. It will maintain the authenticated "
"session until explicit logout by the user. The class can be used as a drop-"
"in replacement of :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware` in the documentation above."
msgstr ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"предоставляет такую возможность. Сессия пользователя поддерживается, пока "
"пользователь явно не выполнит выход. Этот класс может использоваться вместо :"
"class:`~django.contrib.auth.middleware.RemoteUserMiddleware`."

# 878bfe56a60842bf9d17f1922c2a2bfa
#~ msgid "``RemoteUserBackend``"
#~ msgstr "``RemoteUserBackend``"

# 8b3144ca37114d3ba2c989a0e67e3e9c
#~ msgid "Attributes"
#~ msgstr "Атрибуты"

# feefec82946f4a8caf6f420af2fa2e65
#~ msgid ""
#~ "``True`` or ``False``.  Determines whether or not a :class:`~django."
#~ "contrib.auth.models.User` object is created if not already in the "
#~ "database.  Defaults to ``True``."
#~ msgstr ""
#~ "``True`` или ``False``. Определяет может ли быть создан объект класса :"
#~ "class:`~django.contrib.auth.models.User`, уже имеющийся в базе данных.  "
#~ "По-умолчанию ``True``."

# 1306e7d7727a4ae8bec0b795b66e356b
#~ msgid "Methods"
#~ msgstr "Методы"

# 6b9f6d67c7224806924abeb673f0e655
#~ msgid ""
#~ "The username passed as ``remote_user`` is considered trusted. This method "
#~ "simply returns the ``User`` object with the given username, creating a "
#~ "new ``User`` object if :attr:`~RemoteUserBackend.create_unknown_user` is "
#~ "``True``."
#~ msgstr ""
#~ "Имя пользователя передаётся как ``remote_user``, что считается надёжным. "
#~ "Этот метод просто возвращает объект ``User`` с данным именем пользователя "
#~ "и создаёт новый  пользовательский объект, если атрибут :attr:"
#~ "`~RemoteUserBackend.create_unknown_user` установлен в ``True``."

# afe6d9abbc7f4db5afbe54a922e4514b
#~ msgid ""
#~ "Returns ``None`` if :attr:`~RemoteUserBackend.create_unknown_user` is "
#~ "``False`` and a ``User`` object with the given username is not found in "
#~ "the database."
#~ msgstr ""
#~ "Возвращает ``None``, если атрибут :attr:`~RemoteUserBackend."
#~ "create_unknown_user` установлен в ``False`` и объект ``User`` с данным "
#~ "именем пользователя, если он не найден в базе данных."

# dc60de861f494b79b819a05c3aefe371
#~ msgid ""
#~ "Performs any cleaning on the ``username`` (e.g. stripping LDAP DN "
#~ "information) prior to using it to get or create a :class:`~django.contrib."
#~ "auth.models.User` object.  Returns the cleaned username."
#~ msgstr ""
#~ "Очищает ``username`` (например, информацию LDAP DN ) прежде, чем получить "
#~ "или создать объект :class:`~django.contrib.auth.models.User`.  Возвращает "
#~ "чистое имя пользователя."

# 4716c7ff4a3a40fbb2fa1b701994749a
#~ msgid ""
#~ "Configures a newly created user.  This method is called immediately after "
#~ "a new user is created, and can be used to perform custom setup actions, "
#~ "such as setting the user's groups based on attributes in an LDAP "
#~ "directory. Returns the user object."
#~ msgstr ""
#~ "Настройки для созданного пользователя. Этот метод вызывается сразу после "
#~ "создания пользователя и может быть использован для настройки "
#~ "пользовательских групп на основе атрибутов каталога LDAP. Возвращает "
#~ "пользовательский объект."
