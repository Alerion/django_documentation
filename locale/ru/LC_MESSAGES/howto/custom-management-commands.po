# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# Tyshchenko Viktor <tyvik8@gmail.com>, 2013, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2016-03-17 14:03+0200\n"
"Last-Translator: Tyshchenko Viktor <tyvik8@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 0983d440b1394a53bed93a885f7672e4
#: ../../howto/custom-management-commands.txt:3
#, fuzzy
msgid "Writing custom ``django-admin`` commands"
msgstr "Реализация собственных команд django-admin"

# 6791c955d05b4c7dbb62b957184f3762
#: ../../howto/custom-management-commands.txt:7
msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""
"Проект может быть расширен собственными командами для ``manage.py``. "
"Например, вы можете добавить действие для развёртывания. Здесь же мы будем "
"реализовывать действие ``closepoll`` для приложения ``polls`` из :doc:"
"`tutorial</intro/tutorial01>`."

# a59adcd440c84eeeb57639ac437eae8e
#: ../../howto/custom-management-commands.txt:13
#, fuzzy
msgid ""
"To do this, add a ``management/commands`` directory to the application. "
"Django will register a ``manage.py`` command for each Python module in that "
"directory whose name doesn't begin with an underscore. For example::"
msgstr ""
"Для этого добавим в приложение каталог ``management/commands``. Для каждого "
"модуля в этом каталоге, который не начинается с подчёркивания, Django "
"создаст соответствующую команду. Например::"

# 05138ea6ffed43c7a0d7eca5a62972c6
#: ../../howto/custom-management-commands.txt:27
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""
"В этом примере команда ``closepoll`` будет доступна для любого проекта, "
"который импортирует приложение ``polls`` в :setting:`INSTALED_APPS`."

# 4a7f62e2793d4670a9acd4a684ae8da9
#: ../../howto/custom-management-commands.txt:30
msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr "Модуль ``_private.py`` не доступен как команда для ``manage.py``."

# dbb69e335e47451daa231036b2adb579
#: ../../howto/custom-management-commands.txt:32
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Для модуля ``closepoll.py`` должно быть соблюдено лишь одно требование - "
"наличие в нём класса ``Command``, который унаследован от :class:"
"`BaseCommand` или его :ref:`потомков<ref-basecommand-subclasses>`."

# 7282b27a505e436886fc7b065c652c63
#: ../../howto/custom-management-commands.txt:36
msgid "Standalone scripts"
msgstr "Автономные скрипты"

# 64db5db63e424e8fbcb582fefbc8f16f
#: ../../howto/custom-management-commands.txt:38
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""
"Собственные команды могут быть полезны для реализации отдельных скриптов, "
"например, для планировщика Windows или crontab."

# eb6f384936ac4351a6cee5a10bd74f49
#: ../../howto/custom-management-commands.txt:42
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this::"
msgstr ""
"Для реализации команды отредактируйте ``polls/management/commands/closepoll."
"py`` следующим образом::"

# bdd0853ba59a4f39a8a5953c176baa72
#: ../../howto/custom-management-commands.txt:69
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""
"При реализации команды вы должны использовать ``self.stdout`` и ``self."
"stderr`` вместо ``stdout`` и ``stderr``. Использование такого "
"перенаправления может помочь при тестировании скрипта. Кстати, стоит "
"помнить, что символ перевода строки ставится по умолчанию, если вы не "
"указали другой в параметре ``ending``::"

# c1d36ecf73894ad6bd4af45349d3cdde
#: ../../howto/custom-management-commands.txt:79
#, fuzzy
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_ids>``."
msgstr ""
"Новая команда может быть запущена следующим образом: ``python manage.py "
"closepoll <poll_id>``."

# 54e9ff97f3bd4f06ac997e02185eaf8a
#: ../../howto/custom-management-commands.txt:82
#, fuzzy
msgid ""
"The ``handle()`` method takes one or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :exc:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial02>` and was added to ``polls."
"models.Question`` for this example."
msgstr ""
"Метод ``handle()`` принимает один или более ``poll_ids`` и устанавливает "
"каждому ``poll.opened`` в ``False``. Если пользователь запросит "
"несуществующий опрос, то будет выброшено исключение :class:`CommandError`. "
"Атрибут ``poll.opened`` не существует в :doc:`tutorial</intro/tutorial01>` и "
"добавлен в ``polls.models.Poll`` в этом примере."

#: ../../howto/custom-management-commands.txt:91
msgid "Accepting optional arguments"
msgstr "Получение необязательных аргументов"

# ba6ed58303b6476eb2a827224fbabd16
#: ../../howto/custom-management-commands.txt:93
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options can be added in the :meth:`~BaseCommand.add_arguments` method "
"like this::"
msgstr ""
"Аналогичный ``closepoll`` может быть легко изменён на удаление указанного "
"голосования вместо его закрытия, для этого надо указать дополнительные "
"аргументы при запуске команды. Такие дополнительные опции можно добавить в "
"метод :meth:`~BaseCommand.add_arguments` примерно так::"

# a5c526026f59484abbe436d695c712b3
#: ../../howto/custom-management-commands.txt:115
msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`argparse` Python "
"documentation for more about ``add_argument`` usage."
msgstr ""
"Параметр (``delete`` в нашем случае) доступен в словаре параметров метода "
"``handle()``. Подробнее можно посмотреть в документации по :py:mod:"
"`argparse`, где говорится про использование ``add_argument``."

# 6fc5e8f6a7ce418294fc60a479adba6a
#: ../../howto/custom-management-commands.txt:119
#, fuzzy
msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :option:`--verbosity` and :option:`--traceback`."
msgstr ""
"Помимо возможности принимать пользовательские опции, все :doc:`стандартные "
"команды</ref/django-admin>` принимают также опции по умолчанию, такие как :"
"djadminopt:`--verbosity` и :djadminopt:`--traceback`."

# 4c9e5ee77cea49dcb316ed78c97955d0
#: ../../howto/custom-management-commands.txt:126
msgid "Management commands and locales"
msgstr "Команды и локализация"

#: ../../howto/custom-management-commands.txt:128
msgid ""
"By default, management commands are executed with the current active locale."
msgstr ""

#: ../../howto/custom-management-commands.txt:130
msgid ""
"If, for some reason, your custom management command must run without an "
"active locale (for example, to prevent translated content from being "
"inserted into the database), deactivate translations using the "
"``@no_translations`` decorator on your :meth:`~BaseCommand.handle` method::"
msgstr ""

#: ../../howto/custom-management-commands.txt:144
msgid ""
"Since translation deactivation requires access to configured settings, the "
"decorator can't be used for commands that work without configured settings."
msgstr ""

#: ../../howto/custom-management-commands.txt:148
msgid "Testing"
msgstr "Тестирование"

#: ../../howto/custom-management-commands.txt:150
msgid ""
"Information on how to test custom management commands can be found in the :"
"ref:`testing docs <topics-testing-management-commands>`."
msgstr ""
"Информация, о том как тестировать команды управления, может быть найдена в :"
"ref:`соответствующей документации <topics-testing-management-commands>`."

#: ../../howto/custom-management-commands.txt:154
msgid "Overriding commands"
msgstr ""

#: ../../howto/custom-management-commands.txt:156
msgid ""
"Django registers the built-in commands and then searches for commands in :"
"setting:`INSTALLED_APPS` in reverse. During the search, if a command name "
"duplicates an already registered command, the newly discovered command "
"overrides the first."
msgstr ""

#: ../../howto/custom-management-commands.txt:161
msgid ""
"In other words, to override a command, the new command must have the same "
"name and its app must be before the overridden command's app in :setting:"
"`INSTALLED_APPS`."
msgstr ""

#: ../../howto/custom-management-commands.txt:165
msgid ""
"Management commands from third-party apps that have been unintentionally "
"overridden can be made available under a new name by creating a new command "
"in one of your project's apps (ordered before the third-party app in :"
"setting:`INSTALLED_APPS`) which imports the ``Command`` of the overridden "
"command."
msgstr ""

# e717915f10624e5b963245961def8e03
#: ../../howto/custom-management-commands.txt:172
msgid "Command objects"
msgstr "Объект команды"

# 7456685d67a84ffebec34c7d138d08e8
#: ../../howto/custom-management-commands.txt:176
msgid "The base class from which all management commands ultimately derive."
msgstr "Базовый класс для всех команд."

# 52328b6bd83049d193d764f2da4622c1
#: ../../howto/custom-management-commands.txt:178
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Используйте этот класс, если хотите добраться до всех механизмов, которые "
"занимаются разбором аргументов командной строки и возвратом значения. Если "
"вам не нужно вносить изменения в поведение, используйте один из его :ref:"
"`подклассов<ref-basecommand-subclasses>`."

# 6866c4ee26794dba9abfd62292159f6d
#: ../../howto/custom-management-commands.txt:183
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""
"Наследование от :class:`BaseCommand` подразумевает, что будет реализован "
"метод :meth:`~BaseCommand.handle`."

# 2c9814dc55e444ff8fd18b61b86554ba
#: ../../howto/custom-management-commands.txt:187
msgid "Attributes"
msgstr "Атрибуты"

# a5b46460850f43d8b1bc4be593d6835a
#: ../../howto/custom-management-commands.txt:189
msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Все перечисленные атрибуты могут использоваться в производных от :class:"
"`BaseCommand` :ref:`классах<ref-basecommand-subclasses>`."

# b0e01d6ea6df4519ad9410a73be1698c
#: ../../howto/custom-management-commands.txt:194
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""
"Краткое описание команды, которое будет выведено в справочном сообщении при "
"выполнении ``python manage.py help <command>``."

#: ../../howto/custom-management-commands.txt:200
msgid ""
"If your command defines mandatory positional arguments, you can customize "
"the message error returned in the case of missing arguments. The default is "
"output by :py:mod:`argparse` (\"too few arguments\")."
msgstr ""
"Если ваша команда определяет обязательные позиционные аргументы, вы можете "
"настроить возвращаемое сообщение об ошибке, возвращаемое в случае пропуска "
"аргументов. По умолчанию, возвращается ответ от :py:mod:`argparse` (\"too "
"few arguments\")."

# 1524fecbd47442a087678cea0c526b04
#: ../../howto/custom-management-commands.txt:206
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""
"Булево значение, которое определяет будет ли команда выводить SQL выражения. "
"Если установлено в ``True``, то весь вывод будет автоматически заключён "
"между ``BEGIN;`` и ``COMMIT;``. Значение по умолчанию - ``False``."

#: ../../howto/custom-management-commands.txt:212
msgid ""
"A boolean; if ``True``, the command prints a warning if the set of "
"migrations on disk don't match the migrations in the database. A warning "
"doesn't prevent the command from executing. Default value is ``False``."
msgstr ""

#: ../../howto/custom-management-commands.txt:218
msgid ""
"A boolean; if ``True``, the entire Django project will be checked for "
"potential problems prior to executing the command. Default value is ``True``."
msgstr ""
"При ``True``  Django выполнит проверку всего проекта на наличие проблем "
"перед выполнением команды. По умолчанию ``True``."

#: ../../howto/custom-management-commands.txt:223
msgid ""
"An instance attribute that helps create colored output when writing to "
"``stdout`` or ``stderr``. For example::"
msgstr ""
"Атрибут экземпляра команды, который помогает выделять цветом вывод в "
"``stdout`` или ``stderr``. Например::"

#: ../../howto/custom-management-commands.txt:228
msgid ""
"See :ref:`syntax-coloring` to learn how to modify the color palette and to "
"see the available styles (use uppercased versions of the \"roles\" described "
"in that section)."
msgstr ""
"Смотрите :ref:`syntax-coloring`, чтобы узнать доступные стили и как поменять "
"цвета (используйте названия \"ролей\", описанных в этом разделе, в верхнем "
"регистре)."

#: ../../howto/custom-management-commands.txt:232
#, fuzzy
msgid ""
"If you pass the :option:`--no-color` option when running your command, all "
"``self.style()`` calls will return the original string uncolored."
msgstr ""
"Если указать опцию :djadminopt:`--no-color` при запуске команды, все вызовы "
"``self.style()`` вернут оригинальную строку без выделения цветом."

# f2a5fafb4a2740bab802a84356a24551
#: ../../howto/custom-management-commands.txt:236
msgid "Methods"
msgstr "Методы"

# 39732a811fa24f768153bc95b742d339
#: ../../howto/custom-management-commands.txt:238
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""
":class:`BaseCommand` содержит несколько методов, которые могут быть "
"переопределены, однако для минимальной работы команды требуется только "
"реализация метода :meth:`~BaseCommand.handle`."

# e9073c78c1b74b8281af50533e2f3526
#: ../../howto/custom-management-commands.txt:241
msgid "Implementing a constructor in a subclass"
msgstr "Переопределение конструктора"

# a22e20e11359420caaa5b493e3ed6f57
#: ../../howto/custom-management-commands.txt:243
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``::"
msgstr ""
"Если вы переопределяете ``__init__``, убедитесь, что вызываете в нём "
"``__init__`` базового класса :class:`BaseCommand`::"

#: ../../howto/custom-management-commands.txt:253
msgid ""
"Returns a ``CommandParser`` instance, which is an :class:`~argparse."
"ArgumentParser` subclass with a few customizations for Django."
msgstr ""

#: ../../howto/custom-management-commands.txt:257
msgid ""
"You can customize the instance by overriding this method and calling "
"``super()`` with ``kwargs`` of :class:`~argparse.ArgumentParser` parameters."
msgstr ""

#: ../../howto/custom-management-commands.txt:262
msgid "``kwargs`` was added."
msgstr ""

#: ../../howto/custom-management-commands.txt:266
msgid ""
"Entry point to add parser arguments to handle command line arguments passed "
"to the command. Custom commands should override this method to add both "
"positional and optional arguments accepted by the command. Calling "
"``super()`` is not needed when directly subclassing ``BaseCommand``."
msgstr ""
"Точка входа для добавления аргументов парсера для обработки аргументов "
"командной строки. Команды должны переопределять этот метод для добавления "
"как позиционных, так и необязательных аргументов, принимаемых командой. "
"Вызов ``super()`` не требуется при прямом наследовании ``BaseCommand``."

# 1e477a47326f4b0ba5bcadee6d393390
#: ../../howto/custom-management-commands.txt:273
msgid ""
"Returns the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""
"Возвращает версию Django, которая необходима для работы всех встроенных "
"команд Django. Пользовательские команды могут переопределить этот метод и "
"вернуть свою версию."

# a0c1cb06252244e687554253bfcbad30
#: ../../howto/custom-management-commands.txt:279
#, fuzzy
msgid ""
"Tries to execute this command, performing system checks if needed (as "
"controlled by the :attr:`requires_system_checks` attribute). If the command "
"raises a :exc:`CommandError`, it's intercepted and printed to stderr."
msgstr ""
"Попытается выполнить команду, выполнив при необходимости проверку системы "
"(регулируется атрибутом :attr:`requires_system_checks`). Если команда "
"выбрасывает исключение :class:`CommandError`, будет разумно перехватить его "
"и распечатать в stderr."

# 4c9e5ee77cea49dcb316ed78c97955d0
#: ../../howto/custom-management-commands.txt:283
msgid "Calling a management command in your code"
msgstr "Вызов команды в коде"

# 9c52e526aaa64a6b91a45cf08ead992f
#: ../../howto/custom-management-commands.txt:285
#, fuzzy
msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :func:`~django.core.management.call_command` instead."
msgstr ""
"Не вызывайте ``execute()`` непосредственно из кода команды. Используйте "
"вместо этого :ref:`call_command <call-command>`."

# 6cafc720c3204ca2bdb0c74b69ed880c
#: ../../howto/custom-management-commands.txt:290
msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""
"Собственно, логика команды. Ваш подкласс обязательно должен реализовывать "
"этот метод."

#: ../../howto/custom-management-commands.txt:292
#, fuzzy
msgid ""
"It may return a string which will be printed to ``stdout`` (wrapped by "
"``BEGIN;`` and ``COMMIT;`` if :attr:`output_transaction` is ``True``)."
msgstr ""
"Может вернуть Unicode строку, которая будет выведена в ``stdout`` (обернута "
"в ``BEGIN;`` и ``COMMIT;``, если :attr:`output_transaction` равен ``True``)."

# 2aa0dfa9f85c4ccd993d772975da2754
#: ../../howto/custom-management-commands.txt:297
#, fuzzy
msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :exc:`CommandError`; "
"warnings are output to stderr; minor notifications are output to stdout."
msgstr ""
"Выполняет проверку проекта на предмет ошибок. Ошибки вызывают исключение :"
"class:`CommandError`, предупреждения просто выводятся в ``stderr``, все "
"остальные уведомления -- в ``stdout``."

# 529f82b40bd840c4be97559671242edc
#: ../../howto/custom-management-commands.txt:301
msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed. ``tags`` can be a list of check tags, like ``compatibility`` or "
"``models``."
msgstr ""
"Если ``app_configs`` и ``tags`` равны ``None``, выполняется полная проверка. "
"``tags`` может содержкать список тегов, указывающих что проверять, например, "
"``compatibility`` или ``models``."

# a5fcfdb5b825422d958d330623f9d06b
#: ../../howto/custom-management-commands.txt:308
#, fuzzy
msgid "``BaseCommand`` subclasses"
msgstr "Подклассы BaseCommand"

# a5a93970fe6645e38c6f903c50be6808
#: ../../howto/custom-management-commands.txt:312
msgid ""
"A management command which takes one or more installed application labels as "
"arguments, and does something with each of them."
msgstr ""
"Служебная команда, которая принимает в качестве аргументов имена "
"установленных приложений и выполняет с ними однотипные действия."

# cec3669bfd424bedab61a9cd1f072d78
#: ../../howto/custom-management-commands.txt:315
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr ""
"Вместо реализации :meth:`~BaseCommand.handle`, реализуйте метод :meth:"
"`~AppCommand.handle_app_config`, который будет вызываться для каждого "
"приложения."

# f1f968700b19432595df801d766d5a80
#: ../../howto/custom-management-commands.txt:321
msgid ""
"Perform the command's actions for ``app_config``, which will be an :class:"
"`~django.apps.AppConfig` instance corresponding to an application label "
"given on the command line."
msgstr ""
"Выполняет действия для ``app_config``, который является объектом :class:"
"`~django.apps.AppConfig` приложения, которое было указано при выполнении "
"команды."

# 6575381cb7284d87a99576fef840e84c
#: ../../howto/custom-management-commands.txt:327
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""
"Команда, которая принимает один или несколько аргументов в командной строке "
"(меток) и что-то делает с ними."

# 8ac4171cb96e4277a675d3a78ffd9425
#: ../../howto/custom-management-commands.txt:330
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""
"Вместо реализации :meth:`~BaseCommand.handle` нужно реализовать :meth:"
"`~LabelCommand.handle_label`, который будет вызываться для каждого аргумента."

#: ../../howto/custom-management-commands.txt:335
msgid ""
"A string describing the arbitrary arguments passed to the command. The "
"string is used in the usage text and error messages of the command. Defaults "
"to ``'label'``."
msgstr ""

# 21e5b5675c6e4dc4b7bfb9640b3f79f0
#: ../../howto/custom-management-commands.txt:341
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""
"Выполняет действие для ``label``, которая была передана через командную "
"строку."

# 8a5c315339c7440596701e7222293db9
#: ../../howto/custom-management-commands.txt:345
msgid "Command exceptions"
msgstr "Исключение команды"

# b8b53c2106c34ea08ab82e2d9f33f1e5
#: ../../howto/custom-management-commands.txt:349
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""
"Этот класс сигнализирует о неожиданных ситуациях при выполнении команды."

# 63da4884ceb34b0bb7df044bbd434b3f
#: ../../howto/custom-management-commands.txt:351
msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is "
"the preferred way to indicate that something has gone wrong in the execution "
"of a command."
msgstr ""
"Если это исключение произошло в ходе выполнения команды из консоли, то оно "
"будет преобразовано в понятное сообщение об ошибке и выведено в стандартный "
"поток ошибок (например, stderr). Генерация этого исключения (с подробным "
"описанием ошибки) - предпочтительный способ сообщения об исключительной "
"ситуации в ходе выполнения команды."

# ca92770932af4b098600b4fa9a2908e5
#: ../../howto/custom-management-commands.txt:357
#, fuzzy
msgid ""
"If a management command is called from code through :func:`~django.core."
"management.call_command`, it's up to you to catch the exception when needed."
msgstr ""
"Если команда будет вызвана из кода через :ref:`call_command <call-command>`, "
"то у вас будет шанс перехватить исключения."

# 8546e31f4db940879cc0e0d52127b9bf
#~ msgid ""
#~ "By default, the :meth:`BaseCommand.execute` method deactivates "
#~ "translations because some commands shipped with Django perform several "
#~ "tasks (for example, user-facing content rendering and database "
#~ "population) that require a project-neutral string language."
#~ msgstr ""
#~ "По умолчанию :meth:`BaseCommand.execute` отключает переводы, потому что "
#~ "встроенные команды, которые выполняют различные задачи (например, "
#~ "наполнение базы данных, генерация контента), требуют нейтральной "
#~ "кодировки."

# a9777c1463df46cab19a34b7f1904ac2
#~ msgid ""
#~ "If, for some reason, your custom management command needs to use a fixed "
#~ "locale, you should manually activate and deactivate it in your :meth:"
#~ "`~BaseCommand.handle` method using the functions provided by the I18N "
#~ "support code::"
#~ msgstr ""
#~ "Если пользовательская команда требует другой локали, то вы можете вручную "
#~ "активировать и деактивировать её в вашем :meth:`~BaseCommand.handle`, "
#~ "используя функции по работе с интернационализацией (I18N)::"

# c0be229f57c942cdb6761ac939d018da
#~ msgid ""
#~ "Another need might be that your command simply should use the locale set "
#~ "in settings and Django should be kept from deactivating it. You can "
#~ "achieve it by using the :data:`BaseCommand.leave_locale_alone` option."
#~ msgstr ""
#~ "Бывает, что команда должна просто использовать локаль, указанную в "
#~ "настройках проекта, и Django не должна отключать её. Это можно сделать, "
#~ "установив параметр :data:`BaseCommand.leave_locale_alone`."

# a4aad0f5b4324ccfa5bb482314154b9c
#~ msgid ""
#~ "When working on the scenarios described above though, take into account "
#~ "that system management commands typically have to be very careful about "
#~ "running in non-uniform locales, so you might need to:"
#~ msgstr "При использовании нестандартной локали будьте осторожны:"

# cf1213560947437f9fda192a6b10adde
#~ msgid ""
#~ "Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
#~ "the command (this is a good example of the potential problems stemming "
#~ "from a dynamic runtime environment that Django commands avoid offhand by "
#~ "deactivating translations)."
#~ msgstr ""
#~ "Убедитесь, что параметр :setting:`USE_I18N` установлен в ``True``, когда "
#~ "команда запускается (это очень хороший пример потенциальных ошибок при "
#~ "использовании динамического окружения, поэтому Django решает эту проблему "
#~ "отключением переводов)."

# 44681e7239f74b68b21103741b31534e
#~ msgid ""
#~ "Review the code of your command and the code it calls for behavioral "
#~ "differences when locales are changed and evaluate its impact on "
#~ "predictable behavior of your command."
#~ msgstr "Убедитесь в работоспособности команды при разных локалях."

# b9f584ab4f344e31810439d5f8647f31
#~ msgid ""
#~ "A boolean indicating whether the locale set in settings should be "
#~ "preserved during the execution of the command instead of being forcibly "
#~ "set to 'en-us'."
#~ msgstr ""
#~ "Булево значение; указывает использовать ли локаль с настроек проекта, или "
#~ "'en-us'."

# f71b28b5cc7143f2a04f1fb3f8a83b7d
#~ msgid "Default value is ``False``."
#~ msgstr "По умолчанию ``False``."

# 71dba1f585274ccca81c793280613762
#, fuzzy
#~ msgid ""
#~ "Make sure you know what you are doing if you decide to change the value "
#~ "of this option in your custom command if it creates database content that "
#~ "is locale-sensitive and such content shouldn't contain any translations "
#~ "(like it happens e.g. with :mod:`django.contrib.auth` permissions) as "
#~ "making the locale differ from the de facto default 'en-us' might cause "
#~ "unintended effects. See the `Management commands and locales`_ section "
#~ "above for further details."
#~ msgstr ""
#~ "Вы должны быть уверены в своих действиях при изменении этого параметра, "
#~ "если ваша команда меняет данные в базе данных, которые зависят от локали "
#~ "и не содержать переведенный текст (например, как это происходит в django."
#~ "contrib.auth permissions), изменение локали на отличную от стандартной "
#~ "\"en-us\" может вызвать неожиданные эффекты. Смотрите выше раздел :ref:"
#~ "`Команды и локализация <management-commands-and-locales>` для получения "
#~ "подробностей."

# 9f2c5cd8ea724f1da1bbc47edeacddd5
#~ msgid ""
#~ "On Python 2, be sure to include ``__init__.py`` files in both the "
#~ "``management`` and ``management/commands`` directories as done above or "
#~ "your command will not be detected."
#~ msgstr ""
#~ "В Python 2 не забудьте добавить файлы ``__init__.py`` в каталоги "
#~ "``management`` и ``management/commands``, иначе ваша команда не будет "
#~ "найдена."

# 3e81f138635a43f188cfb78afb6d2079
#~ msgid ""
#~ "A boolean indicating whether the command needs to be able to import "
#~ "Django settings; if ``True``, ``execute()`` will verify that this is "
#~ "possible before proceeding. Default value is ``True``."
#~ msgstr ""
#~ "Булево значение, которое определяет нужно ли команде импортировать "
#~ "настройки Django. Если установлено в ``True``, то метод ``execute()`` "
#~ "проверит возможность импорта. Значение по умолчанию - ``True``."

# d88fc6bc242e49c2ba995a0da381f1d0
#, fuzzy
#~ msgid ""
#~ "This option can't be ``False`` when the :data:`~BaseCommand."
#~ "can_import_settings` option is set to ``False`` too because attempting to "
#~ "set the locale needs access to settings. This condition will generate a :"
#~ "exc:`CommandError`."
#~ msgstr ""
#~ "Этот параметр не может быть ``False``, если :data:`~BaseCommand."
#~ "can_import_settings` равна ``False`` т.к. для установки локаль необходим "
#~ "доступ к настройкам. В таком случае будет вызвано исключение :class:"
#~ "`CommandError`."

#~ msgid ""
#~ "Before Django 1.8, management commands were based on the :py:mod:"
#~ "`optparse` module, and positional arguments were passed in ``*args`` "
#~ "while optional arguments were passed in ``**options``. Now that "
#~ "management commands use :py:mod:`argparse` for argument parsing, all "
#~ "arguments are passed in ``**options`` by default, unless you name your "
#~ "positional arguments to ``args`` (compatibility mode). You are encouraged "
#~ "to exclusively use ``**options`` for new commands."
#~ msgstr ""
#~ "До Django 1.8, команды управления использовали модуль :py:mod:`optparse` "
#~ "и позиционные аргументы передавались в ``*args``, а необязательные "
#~ "аргументы - в ``**options``. Теперь управляющие команды используют :py:"
#~ "mod:`argparse` для обработки аргументов, все аргументы по умолчанию "
#~ "передаются в``**options``, если вы явно не привязали позиционные "
#~ "аргументы к ``args`` (режим совместимости). Рекомендуется использование "
#~ "``**options`` для новых команд."

#~ msgid ""
#~ "Previously, only the standard :py:mod:`optparse` library was supported "
#~ "and you would have to extend the command ``option_list`` variable with "
#~ "``optparse.make_option()``."
#~ msgstr ""
#~ "РИанее, поддерживалась только стандартная библиотека :py:mod:`optparse` и "
#~ "вам требовалось расширять переменную ``option_list`` с помощью ``optparse."
#~ "make_option()``."

#~ msgid ""
#~ "In previous versions, Django forced the \"en-us\" locale instead of "
#~ "deactivating translations."
#~ msgstr ""
#~ "В предыдущих версиях, Django переключалас на локаль \"en-us\" вместо "
#~ "отключения системы переводов."

# 9d51e25419bd4535a0a1bc550f9323e4
#~ msgid ""
#~ "A string listing the arguments accepted by the command, suitable for use "
#~ "in help messages; e.g., a command which takes a list of application names "
#~ "might set this to '<app_label app_label ...>'."
#~ msgstr ""
#~ "Строка со списком аргументов, которые принимает команда. Может "
#~ "использоваться в справочных сообщениях, например, команда, которая "
#~ "принимает список имён приложений может установить значение '<app_label "
#~ "app_label ...>'."

#~ msgid ""
#~ "This should be done now in the :meth:`~BaseCommand.add_arguments()` "
#~ "method, by calling the ``parser.add_argument()`` method. See the "
#~ "``closepoll`` example above."
#~ msgstr ""
#~ "Это должно выполняться в методе :meth:`~BaseCommand.add_arguments()` с "
#~ "помощью вызова метода ``parser.add_argument()``. Посмотрите на пример с "
#~ "``closepoll`` выше."

# cc413fae8aa747d2b80bd4684789ff5c
#~ msgid ""
#~ "This is the list of ``optparse`` options which will be fed into the "
#~ "command's ``OptionParser`` for parsing arguments."
#~ msgstr ""
#~ "Список опций ``optparse``, которые будут обрабатываться в "
#~ "``OptionParser`` для получения аргументов."

#~ msgid ""
#~ "You should now override the :meth:`~BaseCommand.add_arguments` method to "
#~ "add custom arguments accepted by your command. See :ref:`the example "
#~ "above <custom-commands-options>`."
#~ msgstr ""
#~ "Теперь надо переопределить метод :meth:`~BaseCommand.add_arguments` для "
#~ "добавления дополнительных аргументов, принимаемых вашей командой. "
#~ "Смотрите :ref:`пример выше <custom-commands-options>`."

# 262b1421222347ee9662ac420fde0020
#~ msgid ""
#~ "Use :class:`BaseCommand` instead, which takes no arguments by default."
#~ msgstr ""
#~ "Используйте  :class:`BaseCommand`, который по умолчанию не требует "
#~ "аргументов."

# 262b1421222347ee9662ac420fde0020
#~ msgid "A command which takes no arguments on the command line."
#~ msgstr "Команда, которая не принимает аргументов."

# 0a1267268f164d3889e49be148669c21
#~ msgid ""
#~ "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
#~ "implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand."
#~ "handle` itself is overridden to ensure no arguments are passed to the "
#~ "command."
#~ msgstr ""
#~ "Вместо реализации :meth:`~BaseCommand.handle`, реализуйте :meth:"
#~ "`~NoArgsCommand.handle_noargs`; в методе :meth:`~BaseCommand.handle` "
#~ "можно проверить, что в команду не передаются аргументы."

# 9837631d66ab4ad2bcc0e84201816c2f
#~ msgid "Perform this command's actions"
#~ msgstr "Просто напишите код здесь."

# e6058c9b6a4d472198347a467da67bb3
#~ msgid ""
#~ "A boolean; if ``True``, the entire Django project will be checked for "
#~ "potential problems prior to executing the command. If "
#~ "``requires_system_checks`` is missing, the value of "
#~ "``requires_model_validation`` is used. If the latter flag is missing as "
#~ "well, the default value (``True``) is used. Defining both "
#~ "``requires_system_checks`` and ``requires_model_validation`` will result "
#~ "in an error."
#~ msgstr ""
#~ "Булево. При ``True``, перед запуском команды Django выполнит проверку "
#~ "проекта на предмет ошибок. Если ``requires_system_checks`` не указан, "
#~ "используется значение ``requires_model_validation``. Если этот атрибут "
#~ "так же не указан, используется значение по умолчанию (``True``). При "
#~ "указании ``requires_system_checks`` и ``requires_model_validation`` будет "
#~ "вызвана ошибка."

# 00ac9ee472564e1fbb46918aaf18e116
#~ msgid "Replaced by ``requires_system_checks``"
#~ msgstr "Заменен на ``requires_system_checks``"

# 73af6abaf0b4483bac40db144adcef78
#~ msgid ""
#~ "A boolean; if ``True``, validation of installed models will be performed "
#~ "prior to executing the command. Default value is ``True``. To validate an "
#~ "individual application's models rather than all applications' models, "
#~ "call :meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
#~ msgstr ""
#~ "Булево значение; если установлено в ``True``, то проверка установленных "
#~ "моделей будет выполнена до выполнения команды. Значение по умолчанию "
#~ "``True``. Для валидации определённой модели приложения вместо всех "
#~ "вызывайте :meth:`~BaseCommand.validate` из :meth:`BaseCommand.handle`."

# 61de98c4f14b4c5a98bd6f0c47f7da77
#~ msgid "Replaced with the :djadmin:`check` command"
#~ msgstr "Заменено на команду :djadmin:`check`"

# 1c3b06ede55a40ccaa80d045e812ce9d
#~ msgid "If ``app`` is None, then all installed apps are checked for errors."
#~ msgstr "Если ``app`` равно ``None``, то будут проверены все приложения."

# 0406ccc1372545659c3b86f18a6dc391
#~ msgid ""
#~ "Previously, :class:`AppCommand` subclasses had to implement "
#~ "``handle_app(app, **options)`` where ``app`` was a models module. The new "
#~ "API makes it possible to handle applications without a models module. The "
#~ "fastest way to migrate is as follows::"
#~ msgstr ""
#~ "В предыдущих версиях команда, унаследованная от:class:`AppCommand`, "
#~ "должна была реализовать метод ``handle_app(app, **options)``, где ``app`` "
#~ "был модуль с моделями. Новый API позволяет работать с приложениями без "
#~ "моделей. Самый простой способ обновить команды::"

# bd0e760076ba493bb3a9ae235b9612e4
#~ msgid ""
#~ "However, you may be able to simplify the implementation by using directly "
#~ "the attributes of ``app_config``."
#~ msgstr "Однако, лучше использовать атрибуты объекта ``app_config``."

# 75c70348b1bc43ceaebc223f3748d512
#~ msgid "The ``leave_locale_alone`` option was added in Django 1.6."
#~ msgstr "Опция ``leave_locale_alone`` была добавлена в Django 1.6."

# 1ca0570b45c54c148a9ed038b84dbc61
#~ msgid ""
#~ "Validates the given app, raising :class:`CommandError` for any errors."
#~ msgstr ""
#~ "Проверяет данные приложения, генерирует исключение :class:`CommandError` "
#~ "в случае ошибки."
