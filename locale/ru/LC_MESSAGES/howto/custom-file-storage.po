# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# cddb43b607284a159d1f6ebccc095f0b
#: ../../howto/custom-file-storage.txt:3
msgid "Writing a custom storage system"
msgstr ""

# 5f4e8398c15e4957b9c47500f3bc584e
#: ../../howto/custom-file-storage.txt:7
msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""

# 878471681de24b1e8e37e83abf96a01e
#: ../../howto/custom-file-storage.txt:11
msgid ""
"Your custom storage system must be a subclass of ``django.core.files.storage."
"Storage``::"
msgstr ""

# c6cb5581f095473eb9bd0c799b074c1d
#: ../../howto/custom-file-storage.txt:19
msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from ``django.conf."
"settings``::"
msgstr ""

# e311979952424d47ad143535ce636193
#: ../../howto/custom-file-storage.txt:31
msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See "
"below for more on these methods."
msgstr ""

# 57d9b33931cd4f7da9c974d2699f04ab
#: ../../howto/custom-file-storage.txt:35
msgid ""
"In addition, if your class provides local file storage, it must override the "
"``path()`` method."
msgstr ""

# e93115f8842c448a85485d8869fd2228
#: ../../howto/custom-file-storage.txt:38
msgid ""
"Your storage class must be :ref:`deconstructible <custom-deconstruct-"
"method>` so it can be serialized when it's used on a field in a migration. "
"As long as your field has arguments that are themselves :ref:`serializable "
"<migration-serializing>`, you can use the ``django.utils.deconstruct."
"deconstructible`` class decorator for this (that's what Django uses on "
"FileSystemStorage)."
msgstr ""

#: ../../howto/custom-file-storage.txt:45
msgid ""
"By default, the following methods raise `NotImplementedError` and will "
"typically have to be overridden:"
msgstr ""

# 882d83bba9584f3785d7dd9caf522632
#: ../../howto/custom-file-storage.txt:48
msgid ":meth:`Storage.delete`"
msgstr ""

# 6bd4aa145655496d8f212d92f085a08f
#: ../../howto/custom-file-storage.txt:49
msgid ":meth:`Storage.exists`"
msgstr ""

# 340edbc32f3d4dd387fcfeb7f46e3798
#: ../../howto/custom-file-storage.txt:50
msgid ":meth:`Storage.listdir`"
msgstr ""

# b53a36d5d65e405f8e4931d5845501d2
#: ../../howto/custom-file-storage.txt:51
msgid ":meth:`Storage.size`"
msgstr ""

# c6e4ae0b5be34d2196b22c1f2e74db7c
#: ../../howto/custom-file-storage.txt:52
msgid ":meth:`Storage.url`"
msgstr ""

#: ../../howto/custom-file-storage.txt:54
msgid ""
"Note however that not all these methods are required and may be deliberately "
"omitted. As it happens, it is possible to leave each method unimplemented "
"and still have a working Storage."
msgstr ""

#: ../../howto/custom-file-storage.txt:58
msgid ""
"By way of example, if listing the contents of certain storage backends turns "
"out to be expensive, you might decide not to implement `Storage.listdir`."
msgstr ""

#: ../../howto/custom-file-storage.txt:61
msgid ""
"Another example would be a backend that only handles writing to files. In "
"this case, you would not need to implement any of the above methods."
msgstr ""

#: ../../howto/custom-file-storage.txt:64
msgid ""
"Ultimately, which of these methods are implemented is up to you. Leaving "
"some methods unimplemented will result in a partial (possibly broken) "
"interface."
msgstr ""

# 1a0f1d4a02ff4efdac2f7f1c5bf44822
#: ../../howto/custom-file-storage.txt:67
msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""

# 50006620485e4434acd60d9d3915b1e9
#: ../../howto/custom-file-storage.txt:72
msgid "**Required**."
msgstr ""

# 37e946cb8d9048ea8845231547ee1eeb
#: ../../howto/custom-file-storage.txt:74
msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class "
"uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr ""

# 5835dbb20f8547238b186db03e779391
#: ../../howto/custom-file-storage.txt:81
msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""

# 32afc01f4e2e4a128ffac8c6cce41843
#: ../../howto/custom-file-storage.txt:85
msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr ""

#: ../../howto/custom-file-storage.txt:91
msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is either the original filename sent "
"to the server or, if ``upload_to`` is a callable, the filename returned by "
"that method after any path information is removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""

# 72e0e92233674bb0b544d37d2282b7e5
#: ../../howto/custom-file-storage.txt:97
msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything else."
msgstr ""

#: ../../howto/custom-file-storage.txt:104
msgid ""
"Returns an alternative filename based on the ``file_root`` and ``file_ext`` "
"parameters. By default, an underscore plus a random 7 character alphanumeric "
"string is appended to the filename before the extension."
msgstr ""

# f41826c98aaa430a9dde78a6664fa76e
#: ../../howto/custom-file-storage.txt:110
msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""

#: ../../howto/custom-file-storage.txt:115
msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a "
"free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception is raised."
msgstr ""

#: ../../howto/custom-file-storage.txt:119
msgid ""
"If a file with ``name`` already exists, ``get_alternative_name()`` is called "
"to obtain an alternative name."
msgstr ""
