# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../howto/writing-migrations.txt:3
msgid "Writing database migrations"
msgstr ""

#: ../../howto/writing-migrations.txt:5
msgid ""
"This document explains how to structure and write database migrations for "
"different scenarios you might encounter. For introductory material on "
"migrations, see :doc:`the topic guide </topics/migrations>`."
msgstr ""

#: ../../howto/writing-migrations.txt:12
msgid "Data migrations and multiple databases"
msgstr ""

#: ../../howto/writing-migrations.txt:14
msgid ""
"When using multiple databases, you may need to figure out whether or not to "
"run a migration against a particular database. For example, you may want to "
"**only** run a migration on a particular database."
msgstr ""

#: ../../howto/writing-migrations.txt:18
msgid ""
"In order to do that you can check the database connection's alias inside a "
"``RunPython`` operation by looking at the ``schema_editor.connection.alias`` "
"attribute::"
msgstr ""

#: ../../howto/writing-migrations.txt:39
msgid ""
"You can also provide hints that will be passed to the :meth:"
"`allow_migrate()` method of database routers as ``**hints``:"
msgstr ""

#: ../../howto/writing-migrations.txt:52
msgid "Then, to leverage this in your migrations, do the following::"
msgstr ""

#: ../../howto/writing-migrations.txt:70
msgid ""
"If your ``RunPython`` or ``RunSQL`` operation only affects one model, it's "
"good practice to pass ``model_name`` as a hint to make it as transparent as "
"possible to the router. This is especially important for reusable and third-"
"party apps."
msgstr ""

#: ../../howto/writing-migrations.txt:75
msgid "Migrations that add unique fields"
msgstr ""

#: ../../howto/writing-migrations.txt:77
msgid ""
"Applying a \"plain\" migration that adds a unique non-nullable field to a "
"table with existing rows will raise an error because the value used to "
"populate existing rows is generated only once, thus breaking the unique "
"constraint."
msgstr ""

#: ../../howto/writing-migrations.txt:81
msgid ""
"Therefore, the following steps should be taken. In this example, we'll add a "
"non-nullable :class:`~django.db.models.UUIDField` with a default value. "
"Modify the respective field according to your needs."
msgstr ""

#: ../../howto/writing-migrations.txt:85
msgid ""
"Add the field on your model with ``default=uuid.uuid4`` and ``unique=True`` "
"arguments (choose an appropriate default for the type of the field you're "
"adding)."
msgstr ""

#: ../../howto/writing-migrations.txt:89
msgid ""
"Run the :djadmin:`makemigrations` command. This should generate a migration "
"with an ``AddField`` operation."
msgstr ""

#: ../../howto/writing-migrations.txt:92
msgid ""
"Generate two empty migration files for the same app by running "
"``makemigrations myapp --empty`` twice. We've renamed the migration files to "
"give them meaningful names in the examples below."
msgstr ""

#: ../../howto/writing-migrations.txt:96
msgid ""
"Copy the ``AddField`` operation from the auto-generated migration (the first "
"of the three new files) to the last migration and change ``AddField`` to "
"``AlterField``. For example:"
msgstr ""

#: ../../howto/writing-migrations.txt:125
msgid ""
"Edit the first migration file. The generated migration class should look "
"similar to this:"
msgstr ""

#: ../../howto/writing-migrations.txt:145
msgid ""
"Change ``unique=True`` to ``null=True`` -- this will create the intermediary "
"null field and defer creating the unique constraint until we've populated "
"unique values on all the rows."
msgstr ""

#: ../../howto/writing-migrations.txt:149
msgid ""
"In the first empty migration file, add a :class:`~django.db.migrations."
"operations.RunPython` or :class:`~django.db.migrations.operations.RunSQL` "
"operation to generate a unique value (UUID in the example) for each existing "
"row. For example:"
msgstr ""

#: ../../howto/writing-migrations.txt:181
msgid ""
"Now you can apply the migrations as usual with the :djadmin:`migrate` "
"command."
msgstr ""

#: ../../howto/writing-migrations.txt:183
msgid ""
"Note there is a race condition if you allow objects to be created while this "
"migration is running. Objects created after the ``AddField`` and before "
"``RunPython`` will have their original ``uuid``â€™s overwritten."
msgstr ""

#: ../../howto/writing-migrations.txt:190
msgid "Non-atomic migrations"
msgstr ""

#: ../../howto/writing-migrations.txt:194
msgid ""
"On databases that support DDL transactions (SQLite and PostgreSQL), "
"migrations will run inside a transaction by default. For use cases such as "
"performing data migrations on large tables, you may want to prevent a "
"migration from running in a transaction by setting the ``atomic`` attribute "
"to ``False``::"
msgstr ""

#: ../../howto/writing-migrations.txt:204
msgid ""
"Within such a migration, all operations are run without a transaction. It's "
"possible to execute parts of the migration inside a transaction using :func:"
"`~django.db.transaction.atomic()` or by passing ``atomic=True`` to "
"``RunPython``."
msgstr ""

#: ../../howto/writing-migrations.txt:209
msgid ""
"Here's an example of a non-atomic data migration that updates a large table "
"in smaller batches::"
msgstr ""

#: ../../howto/writing-migrations.txt:231
msgid ""
"The ``atomic`` attribute doesn't have an effect on databases that don't "
"support DDL transactions (e.g. MySQL, Oracle)."
msgstr ""

#: ../../howto/writing-migrations.txt:235
msgid "Controlling the order of migrations"
msgstr ""

#: ../../howto/writing-migrations.txt:237
msgid ""
"Django determines the order in which migrations should be applied not by the "
"filename of each migration, but by building a graph using two properties on "
"the ``Migration`` class: ``dependencies`` and ``run_before``."
msgstr ""

#: ../../howto/writing-migrations.txt:241
msgid ""
"If you've used the :djadmin:`makemigrations` command you've probably already "
"seen ``dependencies`` in action because auto-created migrations have this "
"defined as part of their creation process."
msgstr ""

#: ../../howto/writing-migrations.txt:245
msgid "The ``dependencies`` property is declared like this::"
msgstr ""

#: ../../howto/writing-migrations.txt:255
msgid ""
"Usually this will be enough, but from time to time you may need to ensure "
"that your migration runs *before* other migrations. This is useful, for "
"example, to make third-party apps' migrations run *after* your :setting:"
"`AUTH_USER_MODEL` replacement."
msgstr ""

#: ../../howto/writing-migrations.txt:260
msgid ""
"To achieve this, place all migrations that should depend on yours in the "
"``run_before`` attribute on your ``Migration`` class::"
msgstr ""

#: ../../howto/writing-migrations.txt:270
msgid ""
"Prefer using ``dependencies`` over ``run_before`` when possible. You should "
"only use ``run_before`` if it is undesirable or impractical to specify "
"``dependencies`` in the migration which you want to run after the one you "
"are writing."
msgstr ""

#: ../../howto/writing-migrations.txt:276
msgid "Migrating data between third-party apps"
msgstr ""

#: ../../howto/writing-migrations.txt:278
msgid ""
"You can use a data migration to move data from one third-party application "
"to another."
msgstr ""

#: ../../howto/writing-migrations.txt:281
msgid ""
"If you plan to remove the old app later, you'll need to set the "
"``dependencies`` property based on whether or not the old app is installed. "
"Otherwise, you'll have missing dependencies once you uninstall the old app. "
"Similarly, you'll need to catch :exc:`LookupError` in the ``apps."
"get_model()`` call that retrieves models from the old app. This approach "
"allows you to deploy your project anywhere without first installing and then "
"uninstalling the old app."
msgstr ""

#: ../../howto/writing-migrations.txt:288
msgid "Here's a sample migration:"
msgstr ""

#: ../../howto/writing-migrations.txt:321
msgid ""
"Also consider what you want to happen when the migration is unapplied. You "
"could either do nothing (as in the example above) or remove some or all of "
"the data from the new application. Adjust the second argument of the :mod:"
"`~django.db.migrations.operations.RunPython` operation accordingly."
msgstr ""

#: ../../howto/writing-migrations.txt:327
msgid "Changing an unmanaged model to managed"
msgstr ""

#: ../../howto/writing-migrations.txt:329
msgid ""
"If you want to change an unmanaged model (:attr:`managed=False <django.db."
"models.Options.managed>`) to managed, you must remove ``managed=False`` and "
"generate a migration before making other schema-related changes to the "
"model, since schema changes that appear in the migration that contains the "
"operation to change ``Meta.managed`` may not be applied."
msgstr ""
