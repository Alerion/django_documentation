# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2021-11-22 12:18+0300\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Poedit 3.0\n"

# 4bd9a7400c83448eb9c33478afc3ec94
#: ../../intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr "Создаём своё первое приложение с Django, часть 3"

# a9399315a7434949b3d50a753bf625c8
#: ../../intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""
"Продолжаем начатое во :doc:`второй части </intro/tutorial02>` учебника. Мы "
"продолжим разрабатывать приложение для голосования и сосредоточимся на "
"создании страниц сайта -- \"представлений\"."

#: ../../intro/tutorial03.txt:9
msgid "Where to get help:"
msgstr ""

#: ../../intro/tutorial03.txt:11
msgid ""
"If you're having trouble going through this tutorial, please head over to "
"the :doc:`Getting Help</faq/help>` section of the FAQ."
msgstr ""

#: ../../intro/tutorial03.txt:15
msgid "Overview"
msgstr "Обзор"

# dd6d3d0ee2a34666acf16a140c77a4dc
#: ../../intro/tutorial03.txt:17
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""
"Представление -- это \"тип\" страниц вашего приложения, которое является "
"функцией для обработки запроса и использует шаблон для генерации страницы. "
"Например, блог может состоять из следующих представлений:"

# 811d465bc81a4df69d1ff5be78aa22fe
#: ../../intro/tutorial03.txt:21
msgid "Blog homepage -- displays the latest few entries."
msgstr "Главная страница -- показывает несколько последних записей блога."

# b27365c91ada45c69d2448d764f0a7e0
#: ../../intro/tutorial03.txt:23
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr "Страница записи -- страница отображения одной записи блога."

# 749b0796fd4941689cf0f88365e99d2d
#: ../../intro/tutorial03.txt:25
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr ""
"Страница-архив записей по годам -- показывает все месяца года и записи "
"блога, сгруппированные по этим месяцам."

# 6ad4b90c532449f698785f2938bf73b2
#: ../../intro/tutorial03.txt:28
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr ""
"Страница-архив записей по месяцам -- показывает все дни месяца и записи "
"блога, сгруппированные по этим дням."

# 712633e7beef49f89149cef07e2b09c1
#: ../../intro/tutorial03.txt:31
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""
"Страница-архив записей по дням -- показывает все записи за указанный день."

# a5d8e1fd0eb145f99a5bc52f8b9a6f03
#: ../../intro/tutorial03.txt:33
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""
"Форма комментариев -- предоставляет возможность добавить комментарий к "
"записи блога."

# 18b55b059a4449e09021d287997db3ce
#: ../../intro/tutorial03.txt:35
msgid "In our poll application, we'll have the following four views:"
msgstr ""
"В нашем приложении для голосования мы реализуем следующие представления:"

# 564e29ca0cf048ebb748b53837be5c76
#: ../../intro/tutorial03.txt:37
msgid "Question \"index\" page -- displays the latest few questions."
msgstr "Главная страница вопросов -- показывает несколько последних вопросов."

# ec13bfaa27fa4691b7361c3fe9d888e5
#: ../../intro/tutorial03.txt:39
msgid ""
"Question \"detail\" page -- displays a question text, with no results but "
"with a form to vote."
msgstr ""
"Страница вопроса -- показывает вопрос без результатов но с формой для ответа."

# 4bee0d0b52904ad6aeb2f7c6198d03b5
#: ../../intro/tutorial03.txt:42
msgid ""
"Question \"results\" page -- displays results for a particular question."
msgstr "Страница результата опроса -- показывает результаты опроса."

# 6c2d1ff6c0c04c2f8a6c0657df600585
#: ../../intro/tutorial03.txt:44
msgid ""
"Vote action -- handles voting for a particular choice in a particular "
"question."
msgstr "Обрабатывает процесс опроса -- обрабатывает ответ на вопрос."

# 47b05d2df39342aaa4aab266b598785a
#: ../../intro/tutorial03.txt:47
#, fuzzy
msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a Python function (or method, in the case of class-based "
"views). Django will choose a view by examining the URL that's requested (to "
"be precise, the part of the URL after the domain name)."
msgstr ""
"В Django страницы и остальной контент отдается представлениями. "
"Представление - это просто функция Python(или метод представления-класса). "
"Django выбирает представление, анализируя запрошенный URL(точнее часть URL-а "
"после домена)."

# 6cfb84f725484b19ac09be611e38cebf
#: ../../intro/tutorial03.txt:52
msgid ""
"Now in your time on the web you may have come across such beauties as \"ME2/"
"Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". "
"You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""
"В наше время в интернете можно наткнуться на такие прелести как \"ME2/Sites/"
"dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". Рады "
"вам сообщить, что Django позволяет использовать более элегантные *URL "
"шаблоны* чем этот."

# b77331309f204e78aa681c4563e18b9e
#: ../../intro/tutorial03.txt:57
#, fuzzy
msgid ""
"A URL pattern is the general form of a URL - for example: ``/newsarchive/"
"<year>/<month>/``."
msgstr ""
"URL-шаблон - это общая форма URL-а. Например: ``/newsarchive/<year>/<month>/"
"``."

# 257292ad961b4ad39e1b520c951174d6
#: ../../intro/tutorial03.txt:60
msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns to views."
msgstr ""
"Чтобы из URL-а получить представление, Django используется так называемый "
"'URLconf'. URLconf определяет соответствие URL-шаблонов и представлений."

# cb030e7a1ec242d98eda404f0934af41
#: ../../intro/tutorial03.txt:63
msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can "
"refer to :doc:`/topics/http/urls` for more information."
msgstr ""
"В этом разделе мы опишем основы использования настроек URL-ов, больше "
"информации вы можете найти в разделе :doc:`/topics/http/urls`."

# eb368fb3ef5c474396ff837e4967f966
#: ../../intro/tutorial03.txt:67
msgid "Writing more views"
msgstr "Добавь парочку представлений"

# 261399035a8b4cb8b8d4c2025955d4e6
#: ../../intro/tutorial03.txt:69
msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument:"
msgstr ""
"Теперь создадим еще парочку представлений в ``polls/views.py``. Эти "
"представления немного отличаются, так как принимают аргументы:"

#: ../../intro/tutorial03.txt:72 ../../intro/tutorial03.txt:155
#: ../../intro/tutorial03.txt:226 ../../intro/tutorial03.txt:259
#: ../../intro/tutorial03.txt:288 ../../intro/tutorial03.txt:324
msgid "polls/views.py"
msgstr ""

# 12b60b6f3c8e44f6824cdc342ef35f28
#: ../../intro/tutorial03.txt:85
msgid ""
"Wire these new views into the ``polls.urls`` module by adding the following :"
"func:`~django.urls.path` calls:"
msgstr ""
"Привяжем наше представление новостей в модуле ``polls.urls`` добавив вызов :"
"func:`~django.urls.path`:"

#: ../../intro/tutorial03.txt:88 ../../intro/tutorial03.txt:440
msgid "polls/urls.py"
msgstr ""

# 32d56cc326c84abf9d6ea38b3d5b1fda
#: ../../intro/tutorial03.txt:106
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try \"/polls/34/"
"results/\" and \"/polls/34/vote/\" too -- these will display the placeholder "
"results and voting pages."
msgstr ""
"Откройте страницу \"/polls/34/\". Будет выполнена функция `detail()` и "
"показан ID, который вы указали в URL. Откройте \"/polls/34/results/\" и \"/"
"polls/34/vote/\" -- вы увидите наши будущие страницы результатов и "
"голосования."

# f4c6fcd56a2d4d8d86cad8b74de45552
#: ../../intro/tutorial03.txt:111
msgid ""
"When somebody requests a page from your website -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the patterns in order. After finding the match "
"at ``'polls/'``, it strips off the matching text (``\"polls/\"``) and sends "
"the remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing. There it matches ``'<int:question_id>/'``, resulting in a call "
"to the ``detail()`` view like so::"
msgstr ""
"При запросе страницы -- например, \"/polls/34/\", Django загружает модуль "
"``mysite.urls`` т.к. он указан в :setting:`ROOT_URLCONF`. Находит переменную "
"``urlpatterns`` и перебирает все параметры переменных по порядку. Когда "
"находит ``'polls/'``, отрезает найденный текст (``\"polls/\"``) и отправляет "
"оставшийся -- ``\"34/\"`` -- в URLconf из 'polls.urls' для последующей "
"обработки. Там находит соответствие с ``'<int:question_id>/'``, в результате "
"чего вызывается представление ``detail()``::"

# e68fe2de50e143c087374c25c7fbc798
#: ../../intro/tutorial03.txt:122
msgid ""
"The ``question_id=34`` part comes from ``<int:question_id>``. Using angle "
"brackets \"captures\" part of the URL and sends it as a keyword argument to "
"the view function. The ``:question_id>`` part of the string defines the name "
"that will be used to identify the matched pattern, and the ``<int:`` part is "
"a converter that determines what patterns should match this part of the URL "
"path."
msgstr ""
"Аргумент ``question_id='34'`` получен из ``<int:question_id>`. Использование "
"скобок позволяет распознать часть URL и передать в представление. ``:"
"question_id>`` определяет название переменной при передаче, ``<int:`` "
"определяет какой шаблон должен использоваться при распознавании части URL."

# 7ff0aac158694f4d92c28727242b5ec4
#: ../../intro/tutorial03.txt:128
msgid ""
"There's no need to add URL cruft such as ``.html`` -- unless you want to, in "
"which case you can do something like this::"
msgstr ""
"Нет необходимости добавлять в URL всякий хлам, вроде ``.html``, пока это вам "
"не понадобится. В таком случае добавьте что-то вроде::"

# 13bbfbd28c63492caeb5f275f5977700
#: ../../intro/tutorial03.txt:133
msgid "But, don't do that. It's silly."
msgstr "Но не делайте так. Это глупо."

# 309a7ba6b31a438e9b6932f720d493ca
#: ../../intro/tutorial03.txt:136
msgid "Write views that actually do something"
msgstr "Добавим функционал в наши представления"

# b5cbead2e2ec4fbda6ac32120e2b16ec
#: ../../intro/tutorial03.txt:138
msgid ""
"Each view is responsible for doing one of two things: returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :exc:`~django.http.Http404`. The rest "
"is up to you."
msgstr ""
"Каждое представление должно выполнить одно из двух действий: вернуть "
"экземпляр :class:`~django.http.HttpResponse` с содержимым страницы, или "
"вызвать исключения такое как :exc:`~django.http.Http404`. Все остальное на "
"ваше усмотрение."

# af5b10f7d16141ed8173dda5dc743613
#: ../../intro/tutorial03.txt:143
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""
"Ваше представление может обращаться к базе данных или нет. Может "
"использовать систему шаблонов Django -- или любую другую -- или не "
"использовать. Может генерировать PDF файл, возвращать XML, создавать ZIP "
"архив \"на лету\", все что угодно, используя любые библиотеки Python."

# 848efaff283440c48a2f37e47a842067
#: ../../intro/tutorial03.txt:148
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""
"Все что нужно Django -- это :class:`~django.http.HttpResponse`. Или "
"исключение."

# 0ace0a50ebf74f1aa4c0c57c84f9e6a5
#: ../../intro/tutorial03.txt:150
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 2 </intro/tutorial02>`. Here's one stab at a new "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date:"
msgstr ""
"Мы будем использовать API Django для работы с базой данных, которое мы "
"рассматривали в :doc:`Части 1 </intro/tutorial02>`. Изменим ``index()`` так, "
"чтобы оно отображало последние 5 вопросов разделенные запятой от самого "
"нового к самому старому:"

# a644bb267bc74d52bef3ab7cf57e1541
#: ../../intro/tutorial03.txt:170
msgid ""
"There's a problem here, though: the page's design is hard-coded in the view. "
"If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""
"Есть небольшая проблема: внешний вид страницы определяется в представлении. "
"Если вы захотите изменить дизайн страницы, вам придется менять код. Давайте "
"воспользуемся системой шаблонов Django, чтобы отделить представление от кода."

# 1623748df8db4afbaf1e807e4c459c3e
#: ../../intro/tutorial03.txt:175
msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""
"Для начала создайте каталог ``templates`` в каталоге приложения ``polls``. "
"Django будет искать шаблоны в этом каталоге."

# 965d05237fb54ed797c2e74c80fa4f77
#: ../../intro/tutorial03.txt:178
msgid ""
"Your project's :setting:`TEMPLATES` setting describes how Django will load "
"and render templates. The default settings file configures a "
"``DjangoTemplates`` backend whose :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"option is set to ``True``. By convention ``DjangoTemplates`` looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS`."
msgstr ""
"Настройка :setting:`TEMPLATES` указывает Django как загружать и выполнять "
"шаблоны. По умолчанию используется бэкенд ``DjangoTemplates``, с опцией :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>` равной ``True``. В этом случае "
"``DjangoTemplates`` проверяет подкаталог \"templates\" в приложениях, "
"указанных в :setting:`INSTALLED_APPS`."

# 45c2c9c413854e30961f34195393c8c9
#: ../../intro/tutorial03.txt:184
#, fuzzy
msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called ``index."
"html``. In other words, your template should be at ``polls/templates/polls/"
"index.html``. Because of how the ``app_directories`` template loader works "
"as described above, you can refer to this template within Django as ``polls/"
"index.html``."
msgstr ""
"В только что созданном каталоге ``templates``, создайте каталог ``polls``, и "
"в нем создайте файл  ``index.html``. То есть создайте файл ``polls/templates/"
"polls/index.html``. Учитывая как работает загрузчик шаблонов "
"``app_directories`` , вы сможете обращаться к шаблону как ``polls/index."
"html``."

# 97001aa78bc147d28d5cb4be1481a545
#: ../../intro/tutorial03.txt:191
msgid "Template namespacing"
msgstr "Пространства имен для шаблонов"

# 77b1136270174814ae56498b86bdd4c0
#: ../../intro/tutorial03.txt:193
#, fuzzy
msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in "
"a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the best way "
"to ensure this is by *namespacing* them. That is, by putting those templates "
"inside *another* directory named for the application itself."
msgstr ""
"Мы бы *могли* создать наш шаблон непосредственно в ``polls/templates`` (а не "
"подкаталоге ``polls``), но это плохая идея. Django будет использовать первый "
"найденный шаблон, и если существует шаблон с аналогичным названием в "
"*другом* приложении, Django не сможет различить их. Чтобы этого избежать, мы "
"будем использовать *пространство имен*. Точнее, просто добавим их в *еще "
"один* подкаталог с названием, аналогичным названию приложения."

# 93a83f92747d44f2b7b49c7646f09cc9
#: ../../intro/tutorial03.txt:202
msgid "Put the following code in that template:"
msgstr "Добавьте следующий код в шаблон:"

#: ../../intro/tutorial03.txt:204 ../../intro/tutorial03.txt:457
#: ../../intro/tutorial03.txt:464
msgid "polls/templates/polls/index.html"
msgstr ""

#: ../../intro/tutorial03.txt:219
msgid ""
"To make the tutorial shorter, all template examples use incomplete HTML. In "
"your own projects you should use `complete HTML documents`__."
msgstr ""

# 8d0db311ebaa45f9b922ae4770fe46ae
#: ../../intro/tutorial03.txt:224
msgid ""
"Now let's update our ``index`` view in ``polls/views.py`` to use the "
"template:"
msgstr ""
"Теперь изменим наше представление ``index`` в ``polls/views.py``, чтобы "
"использовать шаблон:"

# b4fa1222550d417db6deebe8228bba84
#: ../../intro/tutorial03.txt:243
msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""
"Этот код загружает шаблон  ``polls/index.html`` и передает ему контекст. "
"Контекст - это словарь, содержащий название переменных шаблона и "
"соответствующие им значения."

# 24013aa672af4fd080dc6e43311d0562
#: ../../intro/tutorial03.txt:247
msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" question from :doc:`Tutorial 2 </"
"intro/tutorial02>`. The link points to the question's detail page."
msgstr ""
"Загрузите страницу в браузере по адресу \"/polls/\", вы должны увидеть "
"список с опросом \"What's up\" из :doc:`Части 2 </intro/tutorial02>`. Ссылка "
"ведет на страницу опроса."

# 5c7195c45508434bab3a585df8fb061b
#: ../../intro/tutorial03.txt:252
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr "Функция :func:`~django.shortcuts.render`"

# f94955e9e07946a58bf0476118a5943f
#: ../../intro/tutorial03.txt:254
msgid ""
"It's a very common idiom to load a template, fill a context and return an :"
"class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten:"
msgstr ""
"Процесс загрузки шаблона, добавления контекста и возврат объекта :class:"
"`~django.http.HttpResponse`, вполне тривиальный. Django предоставляет "
"функцию для всех этих операций. Вот как будет выглядеть наш ``index()``:"

# 0981bf469c3f4bffb0cc3b59c0be8399
#: ../../intro/tutorial03.txt:272
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader` and :class:`~django.http.HttpResponse` "
"(you'll want to keep ``HttpResponse`` if you still have the stub methods for "
"``detail``, ``results``, and ``vote``)."
msgstr ""
"Так как мы используем такой подход во всех наших представлениях, нет "
"необходимости импортировать :mod:`~django.template.loader` и :class:`~django."
"http.HttpResponse` (:class:`~django.http.HttpResponse` еще нужен, если "
"остались старые ``detail``, ``results`` и ``vote``)."

# 72318c4437f243c691dd0066338b16bc
#: ../../intro/tutorial03.txt:277
msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an :class:`~django.http."
"HttpResponse` object of the given template rendered with the given context."
msgstr ""
"Функция :func:`~django.shortcuts.render` первым аргументом принимает объект "
"запроса, также  название шаблона и необязательный словарь значений "
"контекста. Возвращает объект :class:`~django.http.HttpResponse` содержащий "
"выполненный шаблон с указанным контекстом."

# 44d8c973240645b19878ca5847db67b7
#: ../../intro/tutorial03.txt:283
msgid "Raising a 404 error"
msgstr "Вызов 404 исключения"

# ddf20155adc44a8ab8f3e8bf23b6001c
#: ../../intro/tutorial03.txt:285
msgid ""
"Now, let's tackle the question detail view -- the page that displays the "
"question text for a given poll. Here's the view:"
msgstr ""
"Теперь создадим страницу опроса, которая отображает вопрос и варианты "
"ответа. Вот так будет выглядеть наше представление:"

# 86d6ccfb0900405d9cafe67dcd132d0c
#: ../../intro/tutorial03.txt:303
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a question with the requested ID doesn't exist."
msgstr ""
"Представление вызывает исключение :exc:`~django.http.Http404`, если вопрос с "
"указанным ID не существует."

# 43d5f1c9531d4dc0a52406b5ad703ef4
#: ../../intro/tutorial03.txt:306
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just:"
msgstr ""
"Содержимое шаблона ``polls/detail.html`` обсудим позже, но если хотите прям "
"вот сразу, чтобы все заработало, вот его содержимое:"

#: ../../intro/tutorial03.txt:310 ../../intro/tutorial03.txt:366
msgid "polls/templates/polls/detail.html"
msgstr ""

# 0a6dea78a32f49e4b8534f1b07ef00b3
#: ../../intro/tutorial03.txt:315
msgid "will get you started for now."
msgstr "чтобы можно было загрузить страницу."

# aaa6010e3ced4b79af0d6f2f5417f070
#: ../../intro/tutorial03.txt:318
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr "Функция :func:`~django.shortcuts.get_object_or_404`"

# 4eee416028884fc79143afae2b8e17a5
#: ../../intro/tutorial03.txt:320
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` "
"and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten:"
msgstr ""
"Вызов :meth:`~django.db.models.query.QuerySet.get` и :exc:`~django.http."
"Http404` при отсутствии объекта -- обыденные операции. Django предоставляет "
"функцию, которая выполняет эти действия. Вот как будет выглядеть наше "
"представление ``detail()``:"

# 830169f09d92437e957745fe722aa7cf
#: ../../intro/tutorial03.txt:335
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function "
"of the model's manager. It raises :exc:`~django.http.Http404` if the object "
"doesn't exist."
msgstr ""
"Функция :func:`~django.shortcuts.get_object_or_404` первым аргументом "
"принимает Django модель и произвольное количество именованных аргументов, "
"которые передаются в метод :meth:`~django.db.models.query.QuerySet.get` "
"менеджера модели. Если объект не найден, вызывается исключение :exc:`~django."
"http.Http404`."

# 09b283e7f586442c81216ba8e5167325
#: ../../intro/tutorial03.txt:341
msgid "Philosophy"
msgstr "Философия"

# 674303397dbb4734a23b9aba4468346a
#: ../../intro/tutorial03.txt:343
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the :exc:`~django.core.exceptions."
"ObjectDoesNotExist` exceptions at a higher level, or having the model API "
"raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions."
"ObjectDoesNotExist`?"
msgstr ""
"Зачем мы используем функцию :func:`~django.shortcuts.get_object_or_404` "
"вместо того, чтобы автоматически перехватывать исключения :exc:`~django.core."
"exceptions.ObjectDoesNotExist` уровнем выше, или вызывать на уровне API "
"моделей исключение :exc:`~django.http.Http404` вместо :exc:`~django.core."
"exceptions.ObjectDoesNotExist`?"

# f253fde43f9a4d3690f56afdfa033884
#: ../../intro/tutorial03.txt:349
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""
"Потому что это связывает уровень моделей с уровнем представления. Один из "
"главных принципов проектирования Django -- слабая связанность. Некоторая "
"связанная функциональность находится в модуле :mod:`django.shortcuts`."

# 48fea9f564054bdea0d046bbb3ca06bc
#: ../../intro/tutorial03.txt:353
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using :"
"meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db."
"models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the "
"list is empty."
msgstr ""
"Существует также функция :func:`~django.shortcuts.get_list_or_404`, которая "
"работает аналогично :func:`~django.shortcuts.get_object_or_404`, но "
"использует :meth:`~django.db.models.query.QuerySet.filter` вместо :meth:"
"`~django.db.models.query.QuerySet.get`. Вызывает :exc:`~django.http."
"Http404`, если получен пустой список."

# 3adf70cf3b784f20849f76a011f17587
#: ../../intro/tutorial03.txt:360
msgid "Use the template system"
msgstr "Использование системы шаблонов"

# cc12bd0bfe544a2abcbfacb319c277ef
#: ../../intro/tutorial03.txt:362
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``question``, here's what the ``polls/detail.html`` template might "
"look like:"
msgstr ""
"Вернемся к представлению ``detail()``. Вот как может выглядеть наш шаблон "
"``polls/detail.html``, использующий контекстную переменную ``question``:"

# e476899cdc454041b8645fe14ca7e60f
#: ../../intro/tutorial03.txt:376
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In "
"the example of ``{{ question.question_text }}``, first Django does a "
"dictionary lookup on the object ``question``. Failing that, it tries an "
"attribute lookup -- which works, in this case. If attribute lookup had "
"failed, it would've tried a list-index lookup."
msgstr ""
"Система шаблонов использует точку для доступа к атрибутам переменной. "
"Например, для ``{{ question.question_text }}`` Django сначала пытается "
"обратиться к ``question`` как к словарю. При неудаче ищется атрибут "
"переменной, в данном случае он и используется. Если атрибут не найден, будет "
"искаться индекс в списке."

# 70e8e225c2f24fe1899de54f65e0b571
#: ../../intro/tutorial03.txt:382
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: ``question."
"choice_set.all`` is interpreted as the Python code ``question.choice_set."
"all()``, which returns an iterable of ``Choice`` objects and is suitable for "
"use in the :ttag:`{% for %}<for>` tag."
msgstr ""
"В теге :ttag:`{% for %}<for>` выполняется вызов метода: ``question."
"choice_set.all``, интерпретируется как код Python ``question.choice_set."
"all()``, который возвращает итератор по ``Choice`` для использования в теге :"
"ttag:`{% for %}<for>`."

# 090a8a0c54a448e0b8bffd1954854670
#: ../../intro/tutorial03.txt:387
msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""
"Подробности о шаблонах смотрите в разделе о :doc:`Языке шаблонов Django </"
"topics/templates>`."

# c4e4f621bde246daaccd0c9a37c70bbd
#: ../../intro/tutorial03.txt:390
msgid "Removing hardcoded URLs in templates"
msgstr "Избавляемся от \"хардкода\" URL-ов в шаблонах"

# e8721bb0f3d842049fc7a75f7e3da50b
#: ../../intro/tutorial03.txt:392
msgid ""
"Remember, when we wrote the link to a question in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""
"Помните, когда мы указывали ссылку в шаблоне ``polls/index.html``, она была "
"прописана прямо в коде:"

# aa1b07befe2949ee8fd03600a6d68077
#: ../../intro/tutorial03.txt:399
msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes "
"challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.urls.path` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""
"Проблема в том, что нам будет очень сложно поменять URL-ы в проекте с "
"большим количеством шаблонов. Однако, так как мы указали названия при "
"вызове :func:`~django.urls.path` в модуле ``polls.urls``, мы можем ссылаться "
"на шаблоны URL-ов используя шаблонный тег ``{% url %}``:"

# d9798f7887a34d8985c9830456a2357d
#: ../../intro/tutorial03.txt:409
msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is "
"defined below::"
msgstr ""
"Определение URL-а будет найдено в модуле ``polls.urls``. Вот где определен "
"наш URL с названием 'detail'::"

# 72fb2e5d200b4e39b1beb3dac1e01d42
#: ../../intro/tutorial03.txt:418
msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the "
"template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""
"Теперь, если вы захотите поменять URL, например на ``polls/specifics/12/``, "
"вам не придется менять все шаблоны, вы можете сделать это в ``polls/urls."
"py``::"

# af882d84bddb4eeeb01aa09b33fa7839
#: ../../intro/tutorial03.txt:428
msgid "Namespacing URL names"
msgstr "Пространства имен в названиях URL-ов"

# 1c088ae6aa5545a5b22cc4c80dbc6bb8
#: ../../intro/tutorial03.txt:430
msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate "
"the URL names between them? For example, the ``polls`` app has a ``detail`` "
"view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""
"Наш проект содержит только одно приложение ``polls``. В реальных проектах "
"может быть 5, 10, 20 и больше приложений. Как же Django понимает где чей URL "
"по его названию? Например, приложение ``polls`` содержит представление "
"``detail``, аналогичное представление может быть и в приложении для блогов. "
"Как же Django понимает для какого представления создается URL при "
"использовании тега ``{% url %}``?"

# 1e09f745dc4746978bbd36be509825cf
#: ../../intro/tutorial03.txt:437
msgid ""
"The answer is to add namespaces to your  URLconf. In the ``polls/urls.py`` "
"file, go ahead and add an ``app_name`` to set the application namespace:"
msgstr ""
"Для этого используются пространства имен в URLconf. Изменим ``polls/urls."
"py`` и добавим пространство имен в ``app_name``:"

# cfe6c24ecf7148ab9a750ee9f02feac2
#: ../../intro/tutorial03.txt:455
msgid "Now change your ``polls/index.html`` template from:"
msgstr "Теперь поменяем в шаблоне ``polls/index.html``:"

# 1f6222b18daf42bcb2beb8b391412088
#: ../../intro/tutorial03.txt:462
msgid "to point at the namespaced detail view:"
msgstr "чтобы использовать пространство имен URL-ов:"

# 02c4d147ec0b415faef98c71873e5b53
#: ../../intro/tutorial03.txt:469
#, fuzzy
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn the basics about form processing and "
"generic views."
msgstr ""
"Научившись создавать представления, перейдем к :doc:`четвёртой части "
"учебника </intro/tutorial04>`, чтобы научиться обрабатывать формы и "
"использовать встроенные представления."

# dcb12cdbdd8149838380307414d6bdbe
#~ msgid ""
#~ "The idea behind :func:`~django.conf.urls.include` is to make it easy to "
#~ "plug-and-play URLs. Since polls are in their own URLconf (``polls/urls."
#~ "py``), they can be placed under \"/polls/\", or under \"/fun_polls/\", or "
#~ "under \"/content/polls/\", or any other path root, and the app will still "
#~ "work."
#~ msgstr ""
#~ "Идея использования :func:`~django.conf.urls.include` и разделения URLconf "
#~ "состоит в том, чтобы легко подключать и изменять конфигурацию URL-ов. "
#~ "Теперь, когда приложение голосования содержит собственный URLconf(``polls/"
#~ "urls.py``), вы можете подключить его в \"/polls/\", или \"/fun_polls/\", "
#~ "или в \"/content/polls/\", или другой путь и приложение будет работать."

# 3eeac260c3fa44a5a7e5cbc2046c4a93
#~ msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
#~ msgstr "Вот что произойдет при запросе к \"/polls/34/\":"

# 5e30a94af6f6422091c8ea6f6ecae338
#~ msgid "Django will find the match at ``'^polls/'``"
#~ msgstr "Django найдет ``'^polls/'``"

# 59e53ede773341e68436f4b613e4c57e
#~ msgid ""
#~ "Then, Django will strip off the matching text (``\"polls/\"``) and send "
#~ "the remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for "
#~ "further processing which matches ``r'^(?P<question_id>[0-9]+)/$'`` "
#~ "resulting in a call to the ``detail()`` view like so::"
#~ msgstr ""
#~ "Затем Django обрежет распознанную часть (``\"polls/\"``) и передаст "
#~ "остаток -- ``\"34/\"`` -- в 'polls.urls' для дальнейшей обработки, "
#~ "который будет распознан ``r'^(?P<question_id>[0-9]+)/$'`` и будет вызвана "
#~ "функция ``detail()``::"

# eb368fb3ef5c474396ff837e4967f966
#~ msgid "Write your first view"
#~ msgstr "Создадим первое представление"

# 156291223b39468c9c3163b681e09628
#~ msgid ""
#~ "Let's write the first view. Open the file ``polls/views.py`` and put the "
#~ "following Python code in it:"
#~ msgstr ""
#~ "Настало время создать первое представление. Откройте файл ``polls/views."
#~ "py`` и добавьте следующий код:"

# 570b7fa84c8348b294a23511c6b2d4da
#~ msgid ""
#~ "This is the simplest view possible in Django. To call the view, we need "
#~ "to map it to a URL - and for this we need a URLconf."
#~ msgstr ""
#~ "Это самое простое из возможных представлений в Django. Необходимо "
#~ "прикрепить это представление к какому-то URL-у -для этого воспользуемся "
#~ "URLconf."

# 647dc7fbdf9d43a2bf545b3e5cc99a52
#~ msgid ""
#~ "To create a URLconf in the polls directory, create a file called ``urls."
#~ "py``. Your app directory should now look like::"
#~ msgstr ""
#~ "Создайте файл ``urls.py`` в каталоге приложения ``polls``. Теперь ваше "
#~ "приложение должно выглядеть следующим образом::"

# d4f33f976a884425a51da00e5c74becf
#~ msgid "In the ``polls/urls.py`` file include the following code:"
#~ msgstr "Добавим следующие строки в ``polls/urls.py``:"

# feaae62798624c49a9ba32d69ed6631c
#~ msgid ""
#~ "The next step is to point the root URLconf at the ``polls.urls`` module. "
#~ "In ``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, "
#~ "leaving you with:"
#~ msgstr ""
#~ "Теперь в главном URLconf подключим модуль ``polls.urls``. В ``mysite/urls."
#~ "py`` добавьте :func:`~django.conf.urls.include`:"

# 823e17484e83479681fa9714cff56d9d
#~ msgid "Doesn't match what you see?"
#~ msgstr "Не совпадает с тем, что вы видите?"

# 6664006b61504b0fbfad4b100fb0adf0
#~ msgid ""
#~ "If you're seeing ``admin.autodiscover()`` before the definition of "
#~ "``urlpatterns``, you're probably using a version of Django that doesn't "
#~ "match this tutorial version.  You'll want to either switch to the older "
#~ "tutorial or the newer Django version."
#~ msgstr ""
#~ "Если вы видите ``admin.autodiscover()`` перед ``urlpatterns``, значит вы "
#~ "используете неверную версию Django. Смотрите учебник для используемой "
#~ "версии или обновите Django."

# 34b1edfec0f048f3a1aa68665c2aa730
#~ msgid ""
#~ "You have now wired an ``index`` view into the URLconf. Go to http://"
#~ "localhost:8000/polls/ in your browser, and you should see the text "
#~ "\"*Hello, world. You're at the polls index.*\", which you defined in the "
#~ "``index`` view."
#~ msgstr ""
#~ "Вы привязали представление ``index`` к URL-у используя URLconf. Откройте "
#~ "http://localhost:8000/polls/ в браузере, вы должны увидеть текст "
#~ "\"*Hello, world. You're at the poll index.*\", который вы указали в "
#~ "представлении ``index``."

# d7a6748be6fb4c95843ae5dd5d4b1bd1
#~ msgid ""
#~ "The :func:`~django.conf.urls.url` function is passed four arguments, two "
#~ "required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
#~ "``name``. At this point, it's worth reviewing what these arguments are "
#~ "for."
#~ msgstr ""
#~ "Функция :func:`~django.conf.urls.url` принимает четыре аргумента, два "
#~ "обязательных: ``regex`` и ``view``, и два необязательных: ``kwargs`` и "
#~ "``name``. Давайте разберёмся, для чего они нужны."

# 04c1e78e61394cf7ba02de0c314a2c4c
#~ msgid ":func:`~django.conf.urls.url` argument: regex"
#~ msgstr ":func:`~django.conf.urls.url` argument: regex"

# 0004df64361c4fad8cb0b38617c16231
#~ msgid ""
#~ "The term \"regex\" is a commonly used short form meaning \"regular "
#~ "expression\", which is a syntax for matching patterns in strings, or in "
#~ "this case, url patterns. Django starts at the first regular expression "
#~ "and makes its way down the list,  comparing the requested URL against "
#~ "each regular expression until it finds one that matches."
#~ msgstr ""
#~ "Django проверяет соответствие запрошенного URL-а с регулярным "
#~ "выражением(первый элемент кортежа), начиная с первого и далее по списку, "
#~ "пока не будет найдено подходящее. "

# 008937c1e6d64729b842b716f4ffc465
#~ msgid ""
#~ "Note that these regular expressions do not search GET and POST "
#~ "parameters, or the domain name. For example, in a request to ``http://www."
#~ "example.com/myapp/``, the URLconf will look for ``myapp/``. In a request "
#~ "to ``http://www.example.com/myapp/?page=3``, the URLconf will also look "
#~ "for ``myapp/``."
#~ msgstr ""
#~ "Обратите внимание, что регулярные выражения не обрабатывают GET и POST "
#~ "параметры или название домена. Например, при запросе к ``http://www."
#~ "example.com/myapp/``, URLconf будет обрабатывать ``myapp/``. При запросе "
#~ "к ``http://www.example.com/myapp/?page=3``, URLconf также получит ``myapp/"
#~ "``."

# 00edffee15c6422993c1af8f417fcd2d
#~ msgid ""
#~ "If you need help with regular expressions, see `Wikipedia's entry`_ and "
#~ "the documentation of the :mod:`re` module. Also, the O'Reilly book "
#~ "\"Mastering Regular Expressions\" by Jeffrey Friedl is fantastic. In "
#~ "practice, however, you don't need to be an expert on regular expressions, "
#~ "as you really only need to know how to capture simple patterns. In fact, "
#~ "complex regexes can have poor lookup performance, so you probably "
#~ "shouldn't rely on the full power of regexes."
#~ msgstr ""
#~ "Информацию о регулярных выражениях вы можете найти в `Википедии <http://"
#~ "ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD"
#~ "%D1%8B%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F>`_ и "
#~ "документации модуля :mod:`re`. Также очень полезна книга издательства "
#~ "O'Reilly \"Mastering Regular Expressions\", автор Jeffrey Friedl. Вам не "
#~ "нужно быть специалистом в регулярных выражениях, так как обычно они будут "
#~ "простыми. На самом деле сложные регулярные выражения сложно понять и они "
#~ "медленнее работают, так что не увлекайтесь."

# 1c10a81d81634036b6d3b9097f73fcff
#~ msgid ""
#~ "Finally, a performance note: these regular expressions are compiled the "
#~ "first time the URLconf module is loaded. They're super fast (as long as "
#~ "the lookups aren't too complex as noted above)."
#~ msgstr ""
#~ "Немного о производительности: регулярные выражения компилируются при "
#~ "первой загрузке модуля URLconf. Они работают очень быстро(если не очень-"
#~ "очень сложные)."

# 54df8007e05c465a9c823661b2cb44c6
#~ msgid ":func:`~django.conf.urls.url` argument: view"
#~ msgstr ":func:`~django.conf.urls.url` argument: view"

# 7c0341c55de34f81a90348f6a88a89cc
#~ msgid ""
#~ "When Django finds a regular expression match, Django calls the specified "
#~ "view function, with an :class:`~django.http.HttpRequest` object as the "
#~ "first argument and any “captured” values from the regular expression as "
#~ "other arguments. If the regex uses simple captures, values are passed as "
#~ "positional arguments; if it uses named captures, values are passed as "
#~ "keyword arguments. We'll give an example of this in a bit."
#~ msgstr ""
#~ "При нахождении подходящего регулярного выражения, Django вызывает функцию "
#~ "Python передавая: первым аргументом объект :class:`~django.http."
#~ "HttpRequest`,  а потом все \"распознанные\" значения как позиционные или "
#~ "именованные аргументы. Пример такого поведения мы рассмотрим чуть ниже."

# 16a379f8676a464c8dd7c422ad29ba6c
#~ msgid ":func:`~django.conf.urls.url` argument: kwargs"
#~ msgstr ":func:`~django.conf.urls.url` argument: kwargs"

# 4bd7d981647f4b09aec496f0e29c218a
#~ msgid ""
#~ "Arbitrary keyword arguments can be passed in a dictionary to the target "
#~ "view. We aren't going to use this feature of Django in the tutorial."
#~ msgstr ""
#~ "Любое количество именованных аргументов может быть передано в "
#~ "представление через словарь. Этим мы и воспользуемся."

# 86af0526c67c4c9aa91b5b8d465b8b74
#~ msgid ":func:`~django.conf.urls.url` argument: name"
#~ msgstr ":func:`~django.conf.urls.url` argument: name"

# 5b16c073f581427bb3f2a0335c1d5f6b
#~ msgid ""
#~ "Naming your URL lets you refer to it unambiguously from elsewhere in "
#~ "Django especially templates. This powerful feature allows you to make  "
#~ "global changes to the url patterns of your project while only touching a "
#~ "single file."
#~ msgstr ""
#~ "Название URL-а позволяет однозначно указать на него в любом месте в "
#~ "Django, особенно полезно это в шаблонах. Это позволяет глобально изменять "
#~ "шаблоны URL-ов в одном месте."

# 8cc98c0ed75c495eb3a703791fc8d86d
#~ msgid "Organizing templates"
#~ msgstr "Организация шаблонов"

# 964f1a9fe42b407f9ff095239400cc81
#~ msgid ""
#~ "We *could* have all our templates together, in one big templates "
#~ "directory, and it would work perfectly well. However, this template "
#~ "belongs to the polls application, so unlike the admin template we created "
#~ "in the previous tutorial, we'll put this one in the application's "
#~ "template directory (``polls/templates``) rather than the project's "
#~ "(``templates``). We'll discuss in more detail in the :doc:`reusable apps "
#~ "tutorial </intro/reusable-apps>` *why* we do this."
#~ msgstr ""
#~ "Мы *можем* содержать все шаблоны в одном каталоге и это будет отлично "
#~ "работать. Однако, этот шаблон относится к приложению для голосования,  "
#~ "поэтому мы добавим его в каталог шаблонов приложения (``polls/"
#~ "templates``), а не проекта (``templates``). Мы рассмотрим подробнее в :"
#~ "doc:`разделе о независимых приложениях </intro/reusable-apps>` *почему* "
#~ "мы так сделали."

# 806a969d21cf4abca52cb3f320494aa2
#~ msgid ""
#~ "If ``{% url 'detail' poll.id %}`` (with quotes) doesn't work, but ``{% "
#~ "url detail poll.id %}`` (without quotes) does, that means you're using a "
#~ "version of Django < 1.5. In this case, add the following declaration at "
#~ "the top of your template:"
#~ msgstr ""
#~ "Если ``{% url 'detail' poll.id %}`` (с кавычками) не работает, а ``{% url "
#~ "detail poll.id %}`` (без кавычек) работает, значит вы используете версию "
#~ "Django < 1.5. В таком случае добавьте следующее в начале шаблона:"

# 3e368d96d54a40a4942760e016a0fda3
#~ msgid "Write a 404 (page not found) view"
#~ msgstr "Создадим 404 (страница не найдена) представление"

# 94e0e93e08d04dd8b865f62578013d18
#~ msgid ""
#~ "When you raise :exc:`~django.http.Http404` from within a view, Django "
#~ "will load a special view devoted to handling 404 errors. It finds it by "
#~ "looking for the variable ``handler404`` in your root URLconf (and only in "
#~ "your root URLconf; setting ``handler404`` anywhere else will have no "
#~ "effect), which is a string in Python dotted syntax -- the same format the "
#~ "normal URLconf callbacks use. A 404 view itself has nothing special: It's "
#~ "just a normal view."
#~ msgstr ""
#~ "При вызове исключения :exc:`~django.http.Http404` в представлении, Django "
#~ "загружает специальное представление, которое обрабатывает 404 ошибку. "
#~ "Django ищет его проверяя переменную ``handler404`` в модуле корневого "
#~ "URLconf (и только в корневом), которая должна содержать строку в формате "
#~ "импорта модуля Python(dotted syntax) -- аналогичный определению функции "
#~ "представления в URL-шаблоне. Это представление являет собой ничего "
#~ "особенного."

# 0dfd5e2b0a3f48caa0995d6143087702
#~ msgid ""
#~ "You normally won't have to bother with writing 404 views. If you don't "
#~ "set ``handler404``, the built-in view :func:`django.views.defaults."
#~ "page_not_found` is used by default. Optionally, you can create a ``404."
#~ "html`` template in the root of your template directory. The default 404 "
#~ "view will then use that template for all 404 errors when :setting:`DEBUG` "
#~ "is set to ``False`` (in your settings module). If you do create the "
#~ "template, add at least some dummy content like \"Page not found\"."
#~ msgstr ""
#~ "Вам не обязательно самостоятельно определять 404 представление. Если вы "
#~ "не определите ``handler404``, будет использовать встроенная функция :func:"
#~ "`django.views.defaults.page_not_found`. Вы можете создать шаблон ``404."
#~ "html`` в корне каталога шаблонов. 404 представление по умолчанию будет "
#~ "использовать его для всех 404 ошибок при :setting:`DEBUG` равном "
#~ "``False``. Если шаблон отсутствует, будет показана страница с сообщением "
#~ "\"Page not found\"."

# 2b221a524f5547dd9460379a60e02c85
#~ msgid ""
#~ "If :setting:`DEBUG` is set to ``False``, all responses will be \"Bad "
#~ "Request (400)\" unless you specify the proper :setting:`ALLOWED_HOSTS` as "
#~ "well (something like ``['localhost', '127.0.0.1']`` for local "
#~ "development)."
#~ msgstr ""
#~ "Если :setting:`DEBUG` равен ``False``, все ответы будут \"Bad Request "
#~ "(400)\", если вы не укажите правильный :setting:`ALLOWED_HOSTS` "
#~ "(например, ``['localhost', '127.0.0.1']`` при разработке)."

# f4a25977db5f41e6b61a3f0086d16bed
#~ msgid "A couple more things to note about 404 views:"
#~ msgstr "Так же:"

# 822c01aa5e5d441299a8b9f290477eb5
#~ msgid ""
#~ "If :setting:`DEBUG` is set to ``True`` (in your settings module) then "
#~ "your 404 view will never be used (and thus the ``404.html`` template will "
#~ "never be rendered) because the traceback will be displayed instead."
#~ msgstr ""
#~ "При :setting:`DEBUG` равном ``True`` 404 представление не используется "
#~ "(соответственно шаблон ``404.html`` так же не используется) и "
#~ "отображается отладочная информация."

# 925c939f58304292ac0589eea14ed8fc
#~ msgid ""
#~ "The 404 view is also called if Django doesn't find a match after checking "
#~ "every regular expression in the URLconf."
#~ msgstr ""
#~ "404 представление так же используется если Django не находит подходящего "
#~ "URL-шаблона."

# 0a4eaca6d1c7402fbd4d86ee1d555a35
#~ msgid "Write a 500 (server error) view"
#~ msgstr "Создадим 500 (ошибка сервера) представление"

# b48085218bfd43749079ff08d3d89c6f
#~ msgid ""
#~ "Similarly, your root URLconf may define a ``handler500``, which points to "
#~ "a view to call in case of server errors. Server errors happen when you "
#~ "have runtime errors in view code."
#~ msgstr ""
#~ "Так же ваш URLconf может определить переменную ``handler500``, которая "
#~ "указывает на представление вызываемое при ошибке."

# 98b0b025109842269827d02f33dbe180
#~ msgid ""
#~ "Likewise, you should create a ``500.html`` template at the root of your "
#~ "template directory and add some content like \"Something went wrong\"."
#~ msgstr ""
#~ "Также необходимо создать шаблон ``500.html`` в корне каталога шаблонов и "
#~ "добавить, например, \"Something went wrong\"."
