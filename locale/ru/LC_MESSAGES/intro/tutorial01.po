# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-13 22:13+0300\n"
"PO-Revision-Date: 2017-12-03 17:15+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 50b384343cf54ea9a98671d4fcff0339
#: ../../intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr "Создаём своё первое приложение с Django, часть 1"

# 266a849f419c4f5189e5019d03bf5a5e
#: ../../intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr "Давайте учиться на примере."

# c83c0708364f4a468701c262d3adb439
#: ../../intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr "Мы создадим проект, состоящий из простого приложения для голосования."

# 796d1f1d67bd45dfb1f365ac4b1b416f
#: ../../intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr "Проект будет состоять из двух частей:"

# 439334f2fc0f42a9ae37bdfccd31212f
#: ../../intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr ""
"Публичный сайт, который отображает пользователям голосования и позволяет им "
"голосовать."

# b1d0604a59db4edbabf283d23bdbb1ed
#: ../../intro/tutorial01.txt:13
msgid "An admin site that lets you add, change, and delete polls."
msgstr ""
"Интерфейс администратора, который позволяет вам добавлять, изменять и "
"удалять голосования."

# 25b6605f13614e35ba047c853a75e432
#: ../../intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command in a shell prompt (indicated by the $ prefix):"
msgstr ""
"Мы предполагаем, что вы уже :doc:`установили Django </intro/install>`. Вы "
"можете проверить это, проверив какая версия установлена, выполнив следующую "
"команду в консоли (обозначена префиксом $):"

# 6c79f38f95be421ba71fda386304392b
#: ../../intro/tutorial01.txt:23
msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""
"Если Django установлен, вы должны увидеть текущую версию. Иначе получите "
"ошибку \"No module named django\"."

# 09ad205036a14942b9cc3502db5e261a
#: ../../intro/tutorial01.txt:26
#, fuzzy
msgid ""
"This tutorial is written for Django |version|, which supports Python 3.6 and "
"later. If the Django version doesn't match, you can refer to the tutorial "
"for your version of Django by using the version switcher at the bottom right "
"corner of this page, or update Django to the newest version. If you're using "
"an older version of Python, check :ref:`faq-python-version-support` to find "
"a compatible version of Django."
msgstr ""
"Учебник написан для Django |version| и Python 3.4 и выше. Если версия Django "
"отличается, вы можете обратиться к документации, соответствующей версии "
"Django, или обновить Django до последней версии. Если вы все еще используете "
"Python 2.7, ваш код может отличаться от приведенного в этом учебнике, и вы "
"должны немного изменить, как это будет указано в комментариях."

# 5a97bb2a674e4244888a3b7fbbdab5e8
#: ../../intro/tutorial01.txt:33
msgid ""
"See :doc:`How to install Django </topics/install>` for advice on how to "
"remove older versions of Django and install a newer one."
msgstr ""
"Смотрите :doc:`Как установить Django </topics/install>`, чтобы узнать как "
"удалить старую версию Django и установить новую."

# a8b7e5a096ea4869bc1a9add900fbb0f
#: ../../intro/tutorial01.txt:36
msgid "Where to get help:"
msgstr "Где искать помощь:"

#: ../../intro/tutorial01.txt:38
msgid ""
"If you're having trouble going through this tutorial, please head over to "
"the :doc:`Getting Help</faq/help>` section of the FAQ."
msgstr ""

# 6378711992844a9a86e2b2d4da85bd02
#: ../../intro/tutorial01.txt:42
msgid "Creating a project"
msgstr "Создание проекта"

# 33d7a5c6f63748bd94ddff20213c118e
#: ../../intro/tutorial01.txt:44
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""
"Если вы используете Django первый раз, вам придется позаботиться о некоторых "
"первоначальных настройках. А именно, сгенерировать основу :term:`проекта "
"<project>` Django  -- настройки проекта, базы данных, приложений и др."

# 2c99f52615934a688f65d7513c9bceb3
#: ../../intro/tutorial01.txt:50
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""
"Используя командную строку, перейдите в каталог, где вы хотите хранить код, "
"и выполните следующую команду:"

# ad45ce7d4676468f8dae0c7635b5d596
#: ../../intro/tutorial01.txt:57
msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see :ref:`troubleshooting-django-admin`."
msgstr ""
"Это создаст каталог ``mysite`` в текущем каталоге. Если нет, смотрите :ref:"
"`troubleshooting-django-admin`."

# deaab6769bcf433d84e9968137ec86c5
#: ../../intro/tutorial01.txt:62
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""
"Вы не должны использовать в качестве названия проекта названия компонентов "
"Python или Django. Это означает, что проект не может называться ``django`` "
"(что конфликтует с Django) или ``test`` (конфликтует со стандартным пакетом "
"Python)."

# 8797bde7d50542e88827bbaa333ff5d2
#: ../../intro/tutorial01.txt:67
msgid "Where should this code live?"
msgstr "Где разместить этот код?"

# 74d9cde648b840b19c10aac44fe7f6d0
#: ../../intro/tutorial01.txt:69
msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document "
"root, because it risks the possibility that people may be able to view your "
"code over the Web. That's not good for security."
msgstr ""
"Если вы раньше использовали PHP, то, наверное, привыкли размещать код "
"проекта в корневом каталоге сайта на Web-сервере (например, ``/var/www``). C "
"Django вы не должны этого делать. Это плохая идея добавлять код проекта в "
"корень Web-сервера, так как есть риск, что он будет доступен для просмотра. "
"Не делайте этого в целях безопасности."

# 033c829ae3484e55bea44163ee6932dd
#: ../../intro/tutorial01.txt:76
msgid ""
"Put your code in some directory **outside** of the document root, such as :"
"file:`/home/mycode`."
msgstr ""
"Разместите код в каталоге **вне** корневой директории сайта, например :file:"
"`/home/mycode`."

# e9435b51e1244a8da447e93c466f4da9
#: ../../intro/tutorial01.txt:79
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""
"Давайте посмотрим, что было создано при помощи команды :djadmin:"
"`startproject`::"

# ebced515080b43dd8e1b7a6c4d880b98
#: ../../intro/tutorial01.txt:90
msgid "These files are:"
msgstr "Рассмотрим эти файлы:"

# f781953d50024e8184dd88462b89f58c
#: ../../intro/tutorial01.txt:92
#, fuzzy
msgid ""
"The outer :file:`mysite/` root directory is a container for your project. "
"Its name doesn't matter to Django; you can rename it to anything you like."
msgstr ""
"Внешний каталог :file:`mysite/` -- это просто контейнер для вашего проекта. "
"Его название никак не используется Django, и вы можете переименовать его во "
"что угодно."

# 1a28b3763a1f434abea8adc31fa5e5c0
#: ../../intro/tutorial01.txt:95
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""
":file:`manage.py`: Скрипт, который позволяет вам взаимодействовать с "
"проектом Django. Подробности о :file:`manage.py` читайте в разделе :doc:`/"
"ref/django-admin`."

# ae2402236b9a44679dd310f85c415f1d
#: ../../intro/tutorial01.txt:99
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``mysite.urls``)."
msgstr ""
"Внутренний каталог :file:`mysite/` - это пакет Python вашего проекта. Его "
"название -- это название пакета Python, которое вы будете использовать для "
"импорта чего-либо из проекта (например, ``mysite.urls``)."

# d751229841e74facac689cb4e512d202
#: ../../intro/tutorial01.txt:103
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. If you're a Python "
"beginner, read :ref:`more about packages <tut-packages>` in the official "
"Python docs."
msgstr ""
":file:`mysite/__init__.py`: Пустой файл, который указывает Python, что "
"текущий каталог является пакетом Python. (Если вы новичок в Python, читайте :"
"ref:`о покетах <tut-packages>` в официальной документации Python.)"

# 7d3ee65d07a14113ac0d4414f7904bdf
#: ../../intro/tutorial01.txt:107
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""
":file:`mysite/settings.py`: Настройки/конфигурация проекта. Раздел :doc:`/"
"topics/settings` расскажет вам все о настройках проекта."

# 2856c28d4d4644c1a57c754c5b2f2fdc
#: ../../intro/tutorial01.txt:111
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""
":file:`mysite/urls.py`: Конфигурация URL-ов для вашего проекта Django. Это "
"\"содержание\" всех Django-сайтов. Вы можете прочитать о конфигурации URL-ов "
"в разделе :doc:`/topics/http/urls`."

# e7498f79a5f049809c4aaeaf4c4efc1e
#: ../../intro/tutorial01.txt:115
#, fuzzy
msgid ""
":file:`mysite/asgi.py`: An entry-point for ASGI-compatible web servers to "
"serve your project. See :doc:`/howto/deployment/asgi/index` for more details."
msgstr ""
":file:`mysite/wsgi.py`: Точка входа вашего проекта для WSGI-совместимых веб-"
"серверов. Подробности читайте в разделе :doc:`/howto/deployment/wsgi/index`."

# e7498f79a5f049809c4aaeaf4c4efc1e
#: ../../intro/tutorial01.txt:118
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible web servers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""
":file:`mysite/wsgi.py`: Точка входа вашего проекта для WSGI-совместимых веб-"
"серверов. Подробности читайте в разделе :doc:`/howto/deployment/wsgi/index`."

# cc238aa9384d4e09a4656649942965d0
#: ../../intro/tutorial01.txt:122
msgid "The development server"
msgstr "Сервер для разработки"

# 19cff1742f2c40d89ed1771a6dde51cb
#: ../../intro/tutorial01.txt:124
msgid ""
"Let's verify your Django project works. Change into the outer :file:`mysite` "
"directory, if you haven't already, and run the following commands:"
msgstr ""
"Давайте проверим, что все заработало. Перейдите во внешний каталог :file:"
"`mysite`, если вы этого еще не сделали, и выполните команду::"

# 1d42d7562bdd4e599adc4e65641a6bd7
#: ../../intro/tutorial01.txt:131
msgid "You'll see the following output on the command line:"
msgstr "Вы увидите следующий вывод::"

#: ../../intro/tutorial01.txt:148
msgid ""
"Ignore the warning about unapplied database migrations for now; we'll deal "
"with the database shortly."
msgstr ""
"Игнорируйте предупреждения о невыполненных миграциях, мы разберемся с этим "
"позже"

# de711869a86e4a7f838e363fafe1b5fb
#: ../../intro/tutorial01.txt:151
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""
"Только что вы запустили сервер для разработки Django, простой Web-сервер "
"написанный на Python. Мы включили его в Django, чтобы вы сразу могли "
"приступить к разработке, без дополнительной настройки боевого веб-сервера -- "
"например, Apache -- пока вам это действительно не понадобится."

# a236ff7a82774f57a95bcf1480a54c79
#: ../../intro/tutorial01.txt:156
msgid ""
"Now's a good time to note: **don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""
"Следует заметить: НИКОГДА НЕ используйте этот сервер на \"живом\" сайте. Он "
"создан исключительно для разработки. (Мы умеем делать Web-фреймворки, не Web-"
"сервера.)"

# 1e79ded7718445a39ebafd9d62f04f21
#: ../../intro/tutorial01.txt:160
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Congratulations!\" page, with a rocket taking off. "
"It worked!"
msgstr ""
"Теперь, когда сервер запущен, перейдите на страницу http://127.0.0.1:8000/ в "
"браузере. Вы увидите страницу \"Congratulations!\" со взлетающей ракетой. "
"Работает!"

# 250c9f04d4004831bb261b807180ccff
#: ../../intro/tutorial01.txt:164
msgid "Changing the port"
msgstr "Поменять порт"

# bcb7acba732c4477879a230d812b38c5
#: ../../intro/tutorial01.txt:166
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""
"По умолчанию, команда :djadmin:`runserver` запускает сервер для разработки "
"на локальном IP используя порт 8000."

# 718dd9bebdc84eb894ecfd3f05773a9f
#: ../../intro/tutorial01.txt:169
msgid ""
"If you want to change the server's port, pass it as a command-line argument. "
"For instance, this command starts the server on port 8080:"
msgstr ""
"Если вы хотите изменить порт, укажите его как аргумент. Например, эта "
"команда запускает сервер используя порт 8080:"

# be509e5fc7954b51a9ad802c38408417
#: ../../intro/tutorial01.txt:177
msgid ""
"If you want to change the server's IP, pass it along with the port. For "
"example, to listen on all available public IPs (which is useful if you are "
"running Vagrant or want to show off your work on other computers on the "
"network), use:"
msgstr ""
"Если вы хотите изменить IP сервера, передайте его вместе со значением порта. "
"Чтобы слушать все публичные IP (полезно, если вы используете Vagrant, или "
"хотите показать свою работу на других компьютерах), используйте:"

# bb2a9230d35241db89b7d0c3457d923d
#: ../../intro/tutorial01.txt:186
msgid ""
"**0** is a shortcut for **0.0.0.0**. Full docs for the development server "
"can be found in the :djadmin:`runserver` reference."
msgstr ""
"**0** короткая версия **0.0.0.0**. Смотрите полное описание команды :djadmin:"
"`runserver`."

# 7e169fc7eab04bdfb9d17adce3a7fa2c
#: ../../intro/tutorial01.txt:189
msgid "Automatic reloading of :djadmin:`runserver`"
msgstr "Автоматическая перезагрузка :djadmin:`runserver`"

# ec812ea1b50d4a8196c7c31b5a169bbf
#: ../../intro/tutorial01.txt:191
msgid ""
"The development server automatically reloads Python code for each request as "
"needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""
"Dev-сервер самостоятельно перегружается при изменении Python файлов. Однако "
"некоторые действия не перегружают сервер, например, добавление новых файлов. "
"В таких случаях необходимо самостоятельно перегрузить сервер."

# 862f35fc20b14263a1af441d13d6e309
#: ../../intro/tutorial01.txt:197
msgid "Creating the Polls app"
msgstr "Создание приложения Polls"

# 5134c08397ff41709b336327a68d0aaa
#: ../../intro/tutorial01.txt:199
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""
"Теперь, после создания окружения (проекта), мы можем приступить к работе."

# dac29960b5424624ac3441e00a62336d
#: ../../intro/tutorial01.txt:202
msgid ""
"Each application you write in Django consists of a Python package that "
"follows a certain convention. Django comes with a utility that automatically "
"generates the basic directory structure of an app, so you can focus on "
"writing code rather than creating directories."
msgstr ""
"Каждое приложение Django состоит из пакета Python, который следует некоторым "
"соглашениям. Django содержит команду, которая создает структуру для нового "
"приложения, что позволяет вам сосредоточиться на написании кода, а не на "
"создании каталогов."

# 8fd73f6fdd7544a68c5a3a242cea7732
#: ../../intro/tutorial01.txt:207
msgid "Projects vs. apps"
msgstr "Проекты или приложения"

# e7c8c3175bfe4625951e0bf692aa44ee
#: ../../intro/tutorial01.txt:209
#, fuzzy
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a small poll app. A project is a collection of "
"configuration and apps for a particular website. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""
"Какая разница между приложением и проектом? Приложение -- это Web-"
"приложение, которое предоставляет определенный функционал -- например, Web-"
"блог, хранилище каких-то записей или простое приложение для голосования. "
"Проект -- это совокупность приложений и конфигурации сайта. Проект может "
"содержать несколько приложений. Приложение может использоваться несколькими "
"проектами."

# f05d3a0727834914b004764e32476369
#: ../../intro/tutorial01.txt:215
msgid ""
"Your apps can live anywhere on your :ref:`Python path <tut-searchpath>`. In "
"this tutorial, we'll create our poll app right next to your :file:`manage."
"py` file so that it can be imported as its own top-level module, rather than "
"a submodule of ``mysite``."
msgstr ""
"Ваше приложение может находиться где угодно в :ref:`путях Python <tut-"
"searchpath>`. В этом учебнике, мы будем создавать приложение голосования "
"возле файла :file:`manage.py`, и оно может быть импортировано как "
"независимый модуль, а не подмодуль ``mysite``."

# d4f7de9ba36d4546a01a084d38bcd322
#: ../../intro/tutorial01.txt:220
msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""
"Создавая приложение, убедитесь, что вы находитесь в том же каталоге, что и "
"файл :file:`manage.py`, и выполните команду:"

# 820a4451ea25412cb96441fdc7e3dbd4
#: ../../intro/tutorial01.txt:227
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr "Эта команда создаст каталог :file:`polls`::"

# eea2bfcfad014f12bf2df8266dd2c24f
#: ../../intro/tutorial01.txt:239
msgid "This directory structure will house the poll application."
msgstr "Эти файлы являются частью приложения голосования."

#: ../../intro/tutorial01.txt:242
msgid "Write your first view"
msgstr "Создадим свое первое представление"

#: ../../intro/tutorial01.txt:244
msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it:"
msgstr ""
"Давайте создадим свое первое представление. Откроем файл ``polls/views.py`` "
"и добавим следующий код:"

#: ../../intro/tutorial01.txt:247
msgid "polls/views.py"
msgstr ""

#: ../../intro/tutorial01.txt:256
msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr ""
"Это самое простое представление, которое можно создать на Django. Чтобы "
"вызвать представление, нам нужно назначить его на какой-то URL через "
"конфигурацию URL-ов"

#: ../../intro/tutorial01.txt:259
msgid ""
"To create a URLconf in the polls directory, create a file called ``urls."
"py``. Your app directory should now look like::"
msgstr ""
"Чтобы добавить настройки URL-ов в приложение для голосования, создадим файл "
"``urls.py``. Каталог приложения должен выглядеть следующим образом::"

#: ../../intro/tutorial01.txt:273
msgid "In the ``polls/urls.py`` file include the following code:"
msgstr "В файл ``polls/urls.py`` добавим следующий код:"

#: ../../intro/tutorial01.txt:275
msgid "polls/urls.py"
msgstr ""

#: ../../intro/tutorial01.txt:286
msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py``, add an import for ``django.urls.include`` and insert an :"
"func:`~django.urls.include` in the ``urlpatterns`` list, so you have:"
msgstr ""
"Следующий шаг -- добавить ссылку на ``polls.urls`` в главной конфигурации "
"URL-ов. В``mysite/urls.py`` добавим импорт ``django.urls.include``, затем :"
"func:`~django.urls.include` добавим в список ``urlpatterns``. Вы должны "
"получить следующий код:"

#: ../../intro/tutorial01.txt:290
msgid "mysite/urls.py"
msgstr ""

#: ../../intro/tutorial01.txt:301
msgid ""
"The :func:`~django.urls.include` function allows referencing other URLconfs. "
"Whenever Django encounters :func:`~django.urls.include`, it chops off "
"whatever part of the URL matched up to that point and sends the remaining "
"string to the included URLconf for further processing."
msgstr ""
"Функция :func:`~django.urls.include` позволяет ссылаться на другие "
"конфигурации URL-ов. Когда Django встречает :func:`~django.urls.include`, "
"обрезается часть URL, которая была распознана до этого момента, а оставшаяся "
"часть отправляется в указанную конфигурация URL-ов для последующей обработки."

#: ../../intro/tutorial01.txt:306
msgid ""
"The idea behind :func:`~django.urls.include` is to make it easy to plug-and-"
"play URLs. Since polls are in their own URLconf (``polls/urls.py``), they "
"can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/"
"content/polls/\", or any other path root, and the app will still work."
msgstr ""
"Идея :func:`~django.urls.include` в том, чтобы создать легко подключаемые "
"URL-ы. Т.к. приложение для голосования содержит собственную конфигурацию URL-"
"ов (``polls/urls.py``), они могут быть подключены в \"/polls/\", или \"/"
"fun_polls/\", или \"/content/polls/\", или любой другой путь, и приложение "
"будет работать."

#: ../../intro/tutorial01.txt:312
#, fuzzy
msgid "When to use :func:`~django.urls.include()`"
msgstr ":func:`~django.conf.urls.url` argument: view"

#: ../../intro/tutorial01.txt:314
msgid ""
"You should always use ``include()`` when you include other URL patterns. "
"``admin.site.urls`` is the only exception to this."
msgstr ""

#: ../../intro/tutorial01.txt:317
#, fuzzy
msgid ""
"You have now wired an ``index`` view into the URLconf. Verify it's working "
"with the following command:"
msgstr ""
"Вы добавили ``index`` в настройки URL-ов. Давайте проверим, что он работает, "
"запустив команду:"

#: ../../intro/tutorial01.txt:324
msgid ""
"Go to http://localhost:8000/polls/ in your browser, and you should see the "
"text \"*Hello, world. You're at the polls index.*\", which you defined in "
"the ``index`` view."
msgstr ""
"Откройте в браузере http://localhost:8000/polls/, вы должны увидеть текст "
"\"*Hello, world. You're at the polls index.*\", который вы указали в "
"представлении ``index``."

#: ../../intro/tutorial01.txt:328
msgid "Page not found?"
msgstr ""

#: ../../intro/tutorial01.txt:330
msgid ""
"If you get an error page here, check that you're going to http://"
"localhost:8000/polls/ and not http://localhost:8000/."
msgstr ""

#: ../../intro/tutorial01.txt:333
#, fuzzy
msgid ""
"The :func:`~django.urls.path` function is passed four arguments, two "
"required: ``route`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""
"Функция :func:`~django.conf.urls.url` принимает четыре аргумента, два "
"обязательных: ``regex`` и ``view``, и два необязательных: ``kwargs`` и "
"``name``. Давайте изучим эти аргументы."

#: ../../intro/tutorial01.txt:338
#, fuzzy
msgid ":func:`~django.urls.path` argument: ``route``"
msgstr ":func:`~django.conf.urls.url` argument: regex"

#: ../../intro/tutorial01.txt:340
#, fuzzy
msgid ""
"``route`` is a string that contains a URL pattern. When processing a "
"request, Django starts at the first pattern in ``urlpatterns`` and makes its "
"way down the list, comparing the requested URL against each pattern until it "
"finds one that matches."
msgstr ""
"Термин \"regex\" обычно используется как короткий вариант \"regular "
"expression\"(регулярное выражение), который являет шаблоном для "
"распознавания строк, или в нашем случае URL-ов. Django начинает с первого "
"регулярного выражение и идет дальше по списку, сравнивая запрошенный URL с "
"каждым регулярным выражением пока не будет найдено совпадение."

#: ../../intro/tutorial01.txt:345
#, fuzzy
msgid ""
"Patterns don't search GET and POST parameters, or the domain name. For "
"example, in a request to ``https://www.example.com/myapp/``, the URLconf "
"will look for ``myapp/``. In a request to ``https://www.example.com/myapp/?"
"page=3``, the URLconf will also look for ``myapp/``."
msgstr ""
"Обратите внимание, регулярные выражения не проверяют GET и POST аргументы, "
"или доменное имя. Например, при запросе на ``https://www.example.com/myapp/"
"``, будет проверяться ``myapp/``. При запросе на ``https://www.example.com/"
"myapp/?page=3``, так же будет проверяться ``myapp/``."

#: ../../intro/tutorial01.txt:351
#, fuzzy
msgid ":func:`~django.urls.path` argument: ``view``"
msgstr ":func:`~django.conf.urls.url` argument: view"

#: ../../intro/tutorial01.txt:353
#, fuzzy
msgid ""
"When Django finds a matching pattern, it calls the specified view function "
"with an :class:`~django.http.HttpRequest` object as the first argument and "
"any \"captured\" values from the route as keyword arguments. We'll give an "
"example of this in a bit."
msgstr ""
"когда Django находит подходящее регулярное выражение, Django вызывает "
"указанную функцию представления, передавая первым аргументом объект :class:"
"`~django.http.HttpRequest` и все распознанные регулярным выражением значения "
"как остальные аргументы. Если регулярное выражение использует простое "
"распознание значений, они передаются как позиционные аргументы, если "
"используются именованное распознание, значения передаются как именованные "
"аргументы. Позже мы рассмотрим несколько примеров."

#: ../../intro/tutorial01.txt:359
#, fuzzy
msgid ":func:`~django.urls.path` argument: ``kwargs``"
msgstr ":func:`~django.conf.urls.url` argument: kwargs"

#: ../../intro/tutorial01.txt:361
msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""
"В представление можно передать предопределенные именованные аргументы. Мы не "
"будет использовать эту возможность в учебнике."

#: ../../intro/tutorial01.txt:365
#, fuzzy
msgid ":func:`~django.urls.path` argument: ``name``"
msgstr ":func:`~django.conf.urls.url` argument: name"

#: ../../intro/tutorial01.txt:367
#, fuzzy
msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django, "
"especially from within templates. This powerful feature allows you to make "
"global changes to the URL patterns of your project while only touching a "
"single file."
msgstr ""
"Добавив имя вашему URL-у, вы можете обратиться к нему по имени из любой "
"точки проекта, особенно шаблонов. Такой подход позволяет делать глобальные "
"изменения в настройках URL-ов, меняя минимум файлов."

# 4d05b951b29d4849956e0a92345d5891
#: ../../intro/tutorial01.txt:372
msgid ""
"When you're comfortable with the basic request and response flow, read :doc:"
"`part 2 of this tutorial </intro/tutorial02>` to start working with the "
"database."
msgstr ""
"Изучив основы о запросах и ответах, приступим ко :doc:`второй части учебника "
"</intro/tutorial02>`, чтобы начать работать с базой данных."

# 1c438f00e12949509a34481c33c24987
#~ msgid ""
#~ "If you're having trouble going through this tutorial, please post a "
#~ "message to |django-users| or drop by `#django on irc.freenode.net <irc://"
#~ "irc.freenode.net/django>`_ to chat with other Django users who might be "
#~ "able to help."
#~ msgstr ""
#~ "Если у вас возникают затруденения во время прохождения этого учебника, "
#~ "пожалуйста, оставьте сообщение на |django-users| или попросите помощи в "
#~ "чате `#django on irc.freenode.net <irc://irc.freenode.net/django>`_. "
#~ "(Прим. пер. : также можете спросить совета на нашем `форуме <http://"
#~ "djbook.ru/forum/>`_)."

# 693a234da07d4cd595a04d98f6473a29
#~ msgid "Doesn't match what you see?"
#~ msgstr "Не совпадает с тем, что у вас получилось?"

# a9b71479224c42ec8b571d73a452c65b
#~ msgid ""
#~ "If you're seeing ``include(admin.site.urls)`` instead of just ``admin."
#~ "site.urls``, you're probably using a version of Django that doesn't match "
#~ "this tutorial version.  You'll want to either switch to the older "
#~ "tutorial or the newer Django version."
#~ msgstr ""
#~ "Если вы видите ``include(admin.site.urls)`` вместо ``admin.site.urls``, "
#~ "возможно вы используете версию Django, которая не соответствует этому "
#~ "учебнику. Вам следует читать старую версию учебника или обновить Django."

#~ msgid ""
#~ "If you need help with regular expressions, see `Wikipedia's entry`_ and "
#~ "the documentation of the :mod:`re` module. Also, the O'Reilly book "
#~ "\"Mastering Regular Expressions\" by Jeffrey Friedl is fantastic. In "
#~ "practice, however, you don't need to be an expert on regular expressions, "
#~ "as you really only need to know how to capture simple patterns. In fact, "
#~ "complex regexes can have poor lookup performance, so you probably "
#~ "shouldn't rely on the full power of regexes."
#~ msgstr ""
#~ "Если вам нужна помощь с регулярными выражениями, почитайте `статью в "
#~ "Википедии <https://en.wikipedia.org/wiki/Regular_expression>`_ и "
#~ "документацию модуля :mod:`re`. Также книга O'Reilly \"Mastering Regular "
#~ "Expressions\", написанная Jeffrey Friedl, просто фантастична. На "
#~ "практике, однако, вам не нужно быть экспертом в регулярных выражениях, т."
#~ "к. в основном вам нужно знать как составлять простые регулярные "
#~ "выражения. На практике сложные регулярные выражения могу влиять на "
#~ "производительность, по этому не следует полагаться на их широкие "
#~ "возможности."

#~ msgid ""
#~ "Finally, a performance note: these regular expressions are compiled the "
#~ "first time the URLconf module is loaded. They're super fast (as long as "
#~ "the lookups aren't too complex as noted above)."
#~ msgstr ""
#~ "Замечание о производительности: эти регулярные выражения компилируются "
#~ "при первом импорте модуля с конфигурацией URL-ов. Они работают очень "
#~ "быстро (до тех пор, пока они достаточно просты, как уже замечалось выше)."

# 9c974fea4f96418594a2283f8f79e933
#~ msgid "Database setup"
#~ msgstr "Настройка базы данных"

# bcfbf15dad854f389e159febbaab89df
#~ msgid ""
#~ "Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
#~ "module-level variables representing Django settings."
#~ msgstr ""
#~ "Теперь отредактируйте :file:`mysite/settings.py`. Это просто Python "
#~ "модуль с переменными, которые являются значениями настроек Django."

# 827fe3f131b54888905ce9cd3a609ec2
#~ msgid ""
#~ "By default, the configuration uses SQLite. If you're new to databases, or "
#~ "you're just interested in trying Django, this is the easiest choice. "
#~ "SQLite is included in Python, so you won't need to install anything else "
#~ "to support your database. When starting your first real project, however, "
#~ "you may want to use a more robust database like PostgreSQL, to avoid "
#~ "database-switching headaches down the road."
#~ msgstr ""
#~ "По умолчанию используется SQLite. Это хороший вариант, если вы новичок в "
#~ "базах данных, или хотите попробовать Django. SQLite включен в Python, так "
#~ "что вам не нужно устанавливать что либо еще. Однако, при создании своего "
#~ "первого настоящего проекта, лучше использовать более функциональную базу "
#~ "данных, например PostgreSQL, чтобы избежать проблем со сменой базы данных "
#~ "в процессе разработки."

# bcfbf15dad854f389e159febbaab89df
#~ msgid ""
#~ "If you wish to use another database, install the appropriate :ref:"
#~ "`database bindings <database-installation>`, and change the following "
#~ "keys in the :setting:`DATABASES` ``'default'`` item to match your "
#~ "database connection settings:"
#~ msgstr ""
#~ "Если вы хотите использовать другую базу данных, установите необходимые :"
#~ "ref:`библиотеки <database-installation>` и измените настройки подключения "
#~ "к базе данных в :setting:`DATABASES` ``'default'``:"

# c06ec471cd2f493b8d993bc18c772fdc
#~ msgid ""
#~ ":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
#~ "sqlite3'``, ``'django.db.backends.postgresql_psycopg2'``, ``'django.db."
#~ "backends.mysql'``, or ``'django.db.backends.oracle'``. Other backends "
#~ "are :ref:`also available <third-party-notes>`."
#~ msgstr ""
#~ ":setting:`ENGINE <DATABASE-ENGINE>` -- Доступные значения: ``'django.db."
#~ "backends.postgresql_psycopg2'``, ``'django.db.backends.mysql'``, "
#~ "``'django.db.backends.sqlite3'`` или ``'django.db.backends.oracle'``. "
#~ "Также доступны :ref:`другие бэкэнды <third-party-notes>`."

# 8747ab62c4bb4303aba298bb302738a3
#~ msgid ""
#~ ":setting:`NAME` -- The name of your database. If you're using SQLite, the "
#~ "database will be a file on your computer; in that case, :setting:`NAME` "
#~ "should be the full absolute path, including filename, of that file. The "
#~ "default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the "
#~ "file in your project directory."
#~ msgstr ""
#~ ":setting:`NAME` -- Название базы данных. Если вы используете SQLite, база "
#~ "данных будет файлом на вашем компьютере; в таком случае :setting:`NAME` "
#~ "должна содержать полный путь, включая название этого файла. Значение по "
#~ "умолчанию, ``os.path.join(BASE_DIR, 'db.sqlite3')``, сохранит файл в "
#~ "каталоге проекта."

# 18dbe1abf64d4f64b11ddd113c31ee31
#~ msgid ""
#~ "If you are not using SQLite as your database, additional settings such "
#~ "as :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST` must be added. "
#~ "For more details, see the reference documentation for :setting:"
#~ "`DATABASES`."
#~ msgstr ""
#~ "Если вы используете не SQLite, необходимо указать :setting:`USER`, :"
#~ "setting:`PASSWORD`, :setting:`HOST`. Подробности смотрите в описании "
#~ "настройки :setting:`DATABASES`."

# 789e28661f004aa5a3b2fb1855a78134
#~ msgid ""
#~ "If you're using PostgreSQL or MySQL, make sure you've created a database "
#~ "by this point. Do that with \"``CREATE DATABASE database_name;``\" within "
#~ "your database's interactive prompt."
#~ msgstr ""
#~ "Если вы используете PostgreSQL или MySQL, убедитесь, что вы создали базу "
#~ "данных. Вы можете сделать это, выполнив запрос \"``CREATE DATABASE "
#~ "database_name;``\" в консоли базы данных."

# 785948713a5a41ae94a96a97df2c17fc
#~ msgid ""
#~ "If you're using SQLite, you don't need to create anything beforehand - "
#~ "the database file will be created automatically when it is needed."
#~ msgstr ""
#~ "Если вы используете SQLite, вам ничего не нужно создавать самостоятельно "
#~ "- файл базы данных будет создан автоматически при необходимости."

# 7ba8c9035ad743149946ac59d5db451a
#~ msgid ""
#~ "While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` "
#~ "to your time zone."
#~ msgstr ""
#~ "При редактировании :file:`mysite/settings.py`, добавьте значение вашей "
#~ "временной зоны в :setting:`TIME_ZONE`."

# d437364a1261441fada7b1c98f8b23e9
#~ msgid ""
#~ "Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
#~ "That holds the names of all Django applications that are activated in "
#~ "this Django instance. Apps can be used in multiple projects, and you can "
#~ "package and distribute them for use by others in their projects."
#~ msgstr ""
#~ "Также обратите внимание на :setting:`INSTALLED_APPS` в начале файла "
#~ "настроек. Эта переменная содержит приложения Django, которые используются "
#~ "в проекте. Приложения могут использоваться в различных проектах, вы "
#~ "можете упаковать их и распространять для использования другими "
#~ "пользователями."

# c4c89fd268f9439986c87b7bfc9fce50
#~ msgid ""
#~ "By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
#~ "which come with Django:"
#~ msgstr ""
#~ "По умолчанию, :setting:`INSTALLED_APPS` содержит следующие приложения, "
#~ "все они включены в Django:"

# 25445c8411b648709c60182527177728
#~ msgid ""
#~ ":mod:`django.contrib.admin` -- The admin site. You'll use it in :doc:"
#~ "`part 2 of this tutorial </intro/tutorial02>`."
#~ msgstr ""
#~ ":mod:`django.contrib.admin` -- Интерфейс администратора. Вы будете "
#~ "использовать его в :doc:`части 2 учебника </intro/tutorial02>`."

# 9d253a85598b4c18b83e8f945ce680b6
#~ msgid ":mod:`django.contrib.auth` -- An authentication system."
#~ msgstr ":mod:`django.contrib.auth` -- Система аутентификации."

# f23caf92b38a47d9a2a186cb20e82970
#~ msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
#~ msgstr ":mod:`django.contrib.contenttypes` -- \"content types\" фреймворк."

# 5e841b6c2e7d47b6aecd2a9c68d40307
#~ msgid ":mod:`django.contrib.sessions` -- A session framework."
#~ msgstr ":mod:`django.contrib.sessions` -- Фреймворк сессии."

# db6572a652524f4c88f91fbcf2978981
#~ msgid ":mod:`django.contrib.messages` -- A messaging framework."
#~ msgstr ":mod:`django.contrib.messages` -- Фреймворк сообщений."

# f894f901b938457a873cd415e950c965
#~ msgid ""
#~ ":mod:`django.contrib.staticfiles` -- A framework for managing static "
#~ "files."
#~ msgstr ""
#~ ":mod:`django.contrib.staticfiles` -- Фреймворк для работы со статическими "
#~ "файлами."

# 6f09207957664499afa4cba98e834063
#~ msgid ""
#~ "These applications are included by default as a convenience for the "
#~ "common case."
#~ msgstr ""
#~ "Эти приложения включаются по умолчанию, так как они полезны для типовых "
#~ "проектов."

# 6a7128e049784a0fadee0255a12b2839
#~ msgid ""
#~ "Some of these applications makes use of at least one database table, "
#~ "though, so we need to create the tables in the database before we can use "
#~ "them. To do that, run the following command:"
#~ msgstr ""
#~ "Некоторые из этих приложений могут использовать хотя бы одну таблицу в "
#~ "базе данных,поэтому нам нужно создать таблицы прежде, чем мы сможем "
#~ "использовать их. Для этого выполните следующую команду:"

# f61b6a22903344a2b792ae6a342bcb25
#~ msgid ""
#~ "The :djadmin:`migrate` command looks at the :setting:`INSTALLED_APPS` "
#~ "setting and creates any necessary database tables according to the "
#~ "database settings in your :file:`mysite/settings.py` file and the "
#~ "database migrations shipped with the app (we'll cover those later). "
#~ "You'll see a message for each migration it applies. If you're interested, "
#~ "run the command-line client for your database and type ``\\dt`` "
#~ "(PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to "
#~ "display the tables Django created."
#~ msgstr ""
#~ "Команда :djadmin:`migrate` анализирует значение :setting:`INSTALLED_APPS` "
#~ "и создает все необходимые таблицы в базе данных, используя настройки базы "
#~ "данных из файла :file:`mysite/settings.py` и миграции из приложения (об "
#~ "этом еще расскажем). Вы увидите сообщение о каждой выполненной миграции. "
#~ "Если вам интересно, запустите в терминале клиент для вашей базы данных и "
#~ "выполните ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL) или ``.schema`` "
#~ "(SQLite) чтобы увидеть таблицы, созданные Django."

# 272a3e5984d94e079d1e8f794d56195d
#~ msgid "For the minimalists"
#~ msgstr "Для минималистов"

# 14b2ac5bb6c94f59bd4636497236d168
#~ msgid ""
#~ "Like we said above, the default applications are included for the common "
#~ "case, but not everybody needs them. If you don't need any or all of them, "
#~ "feel free to comment-out or delete the appropriate line(s) from :setting:"
#~ "`INSTALLED_APPS` before running :djadmin:`migrate`. The :djadmin:"
#~ "`migrate` command will only run migrations for apps in :setting:"
#~ "`INSTALLED_APPS`."
#~ msgstr ""
#~ "Как мы уже говорили ранее, приложения по умолчанию удобны для типовых "
#~ "проектов, но не для всех. Если вы не нуждаетесь в некоторых или во всех, "
#~ "закомментируйте или удалите соответствующие строки в :setting:"
#~ "`INSTALLED_APPS` перед запуском :djadmin:`migrate`. Команда :djadmin:"
#~ "`migrate` выполнит миграции только для приложений в :setting:"
#~ "`INSTALLED_APPS`."

# acb6c896f78e421385ff037c5f8a7997
#~ msgid ""
#~ "The first step in writing a database Web app in Django is to define your "
#~ "models -- essentially, your database layout, with additional metadata."
#~ msgstr ""
#~ "Первый шаг в создании Web-приложения с БД в Django -- это создание его "
#~ "моделей, которые являются, по сути, схемой базы данных с дополнительными "
#~ "метаданными."

# 320e7db5df5f43aba8e2612298e1e0a2
# 29e5d330169a4ac1a3c2d119ee768c0b
#~ msgid "Philosophy"
#~ msgstr "Философия"

# 446ffab2b52c40dc8e48db68798d7bd2
#~ msgid ""
#~ "A model is the single, definitive source of truth about your data. It "
#~ "contains the essential fields and behaviors of the data you're storing. "
#~ "Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
#~ "data model in one place and automatically derive things from it."
#~ msgstr ""
#~ "Модель - это основной источник данных. Он содержит набор полей и "
#~ "поведение данных, которые вы храните. Django следует :ref:`принципу DRY "
#~ "<dry>`. Смысл в том, чтобы определять модели в одном месте."

# 0c4d64f6a3a04c4080dbdf939b639b4c
#~ msgid ""
#~ "This includes the migrations - unlike in Ruby On Rails, for example, "
#~ "migrations are entirely derived from your models file, and are "
#~ "essentially just a history that Django can roll through to update your "
#~ "database schema to match your current models."
#~ msgstr ""
#~ "Частью работы с данными также являются миграции. В отличии от Ruby On "
#~ "Rails, например, миграции вынесены из файла моделей и являются просто "
#~ "историей, которую Django может использовать для изменения базы данных в "
#~ "соответствии с текущей структурой моделей."

# 60feb5dee6474a1ba151475ec2faa1f1
#~ msgid ""
#~ "In our simple poll app, we'll create two models: ``Question`` and "
#~ "``Choice``. A ``Question`` has a question and a publication date. A "
#~ "``Choice`` has two fields: the text of the choice and a vote tally. Each "
#~ "``Choice`` is associated with a ``Question``."
#~ msgstr ""
#~ "В нашем простом приложении голосования, мы создадим две модели: "
#~ "``Question`` и ``Choice``. ``Question`` содержит вопрос и дату "
#~ "публикации. ``Choice`` содержит: текст ответа и количество голосов. "
#~ "Каждый объект ``Choice`` связан с объектом ``Question``."

# 02261b121ff54b41b5533b7329fd56c0
#~ msgid ""
#~ "These concepts are represented by simple Python classes. Edit the :file:"
#~ "`polls/models.py` file so it looks like this:"
#~ msgstr ""
#~ "Эти понятия отображаются простыми классами Python. Отредактируйте файл :"
#~ "file:`polls/models.py`, чтобы он выглядел таким образом:"

# 3cc086f66054492b8cf67d2c69a1f8c0
#~ msgid ""
#~ "The code is straightforward. Each model is represented by a class that "
#~ "subclasses :class:`django.db.models.Model`. Each model has a number of "
#~ "class variables, each of which represents a database field in the model."
#~ msgstr ""
#~ "Код очень простой. Каждая модель представлена классом, унаследованным от :"
#~ "class:`django.db.models.Model`. Каждая модель содержит несколько "
#~ "атрибутов, каждый из которых отображает поле в таблице базы данных."

# 19f5dca3e9bf4098a37b48903158ab60
#~ msgid ""
#~ "Each field is represented by an instance of a :class:`~django.db.models."
#~ "Field` class -- e.g., :class:`~django.db.models.CharField` for character "
#~ "fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
#~ "tells Django what type of data each field holds."
#~ msgstr ""
#~ "Каждое поле представлено экземпляром класса :class:`~django.db.models."
#~ "Field` -- например, :class:`~django.db.models.CharField` для текстовых "
#~ "полей и :class:`~django.db.models.DateTimeField` для полей даты и "
#~ "времени. Это указывает Django какие типы данных хранят эти поля."

# 47f1c68a5d264ca2b37e69b02780aec4
#~ msgid ""
#~ "The name of each :class:`~django.db.models.Field` instance (e.g. "
#~ "``question_text`` or ``pub_date``) is the field's name, in machine-"
#~ "friendly format. You'll use this value in your Python code, and your "
#~ "database will use it as the column name."
#~ msgstr ""
#~ "Названия каждого экземпляра :class:`~django.db.models.Field` (например, "
#~ "``question_text`` или ``pub_date`` ) это название поля, в \"машинном"
#~ "\"(machine-friendly) формате. Вы будете использовать эти названия в коде, "
#~ "а база данных будет использовать их как названия колонок."

# 32113b11a5ba4f3897ba5e1839616ee8
#~ msgid ""
#~ "You can use an optional first positional argument to a :class:`~django.db."
#~ "models.Field` to designate a human-readable name. That's used in a couple "
#~ "of introspective parts of Django, and it doubles as documentation. If "
#~ "this field isn't provided, Django will use the machine-readable name. In "
#~ "this example, we've only defined a human-readable name for ``Question."
#~ "pub_date``. For all other fields in this model, the field's machine-"
#~ "readable name will suffice as its human-readable name."
#~ msgstr ""
#~ "Вы можете использовать первый необязательный аргумент конструктора "
#~ "класса :class:`~django.db.models.Field`, чтобы определить отображаемое, "
#~ "удобное для восприятия, название поля. Оно используется в некоторых "
#~ "компонентах Django, и полезно для документирования. Если это название не "
#~ "указано, Django будет использовать \"машинное\" название. В этом примере, "
#~ "мы указали отображаемое название только для поля ``Question.pub_date``. "
#~ "Для всех других полей будет использоваться \"машинное\" название."

# b49f8b94553a4a70b9baaf59bfa99100
#~ msgid ""
#~ "Some :class:`~django.db.models.Field` classes have required arguments. :"
#~ "class:`~django.db.models.CharField`, for example, requires that you give "
#~ "it a :attr:`~django.db.models.CharField.max_length`. That's used not only "
#~ "in the database schema, but in validation, as we'll soon see."
#~ msgstr ""
#~ "Некоторые классы, унаследованные от :class:`~django.db.models.Field`, "
#~ "имеют обязательные аргументы. Например, :class:`~django.db.models."
#~ "CharField` требует, чтобы вы передали ему :attr:`~django.db.models."
#~ "CharField.max_length`. Это используется не только в схеме базы данных, но "
#~ "и при валидации, как мы скоро увидим."

# 693e3dd0075b4515a1af7db5f21111db
#~ msgid ""
#~ "A :class:`~django.db.models.Field` can also have various optional "
#~ "arguments; in this case, we've set the :attr:`~django.db.models.Field."
#~ "default` value of ``votes`` to 0."
#~ msgstr ""
#~ ":class:`~django.db.models.Field` может принимать различные необязательные "
#~ "аргументы; в нашем примере мы указали :attr:`~django.db.models.Field."
#~ "default` значение для `votes`` равное 0."

# 0038fed178084a23bd941df91ad32021
#~ msgid ""
#~ "Finally, note a relationship is defined, using :class:`~django.db.models."
#~ "ForeignKey`. That tells Django each ``Choice`` is related to a single "
#~ "``Question``. Django supports all the common database relationships: many-"
#~ "to-one, many-to-many and one-to-one."
#~ msgstr ""
#~ "Заметим, что связь между моделями определяется с помощью :class:`~django."
#~ "db.models.ForeignKey`. Это указывает Django, что каждый ``Choice`` связан "
#~ "с одним объектом ``Question``. Django поддерживает все основные типы "
#~ "связей: многие-к-одному, многие-ко-многим и один-к-одному."

# 4e48ceb9e8f34431be8a98961ea9387c
#~ msgid "Activating models"
#~ msgstr "Активация моделей"

# a77d29a085f94604bde3ab6587c03412
#~ msgid ""
#~ "That small bit of model code gives Django a lot of information. With it, "
#~ "Django is able to:"
#~ msgstr ""
#~ "Эта небольшая часть кода моделей предоставляет Django большое количество "
#~ "информации, которая позволяет Django:"

# fdd53a9eeaf64b649b2ae46b8c8d6164
#~ msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
#~ msgstr "Создать структуру базы данных (``CREATE TABLE``) для приложения."

# 1e933951ed854ff7b86840100d82f89b
#~ msgid ""
#~ "Create a Python database-access API for accessing ``Question`` and "
#~ "``Choice`` objects."
#~ msgstr ""
#~ "Создать Python API для доступа к данным объектов ``Question`` и "
#~ "``Choice``."

# aaba558cb8824f9b9b1675a1e8266e78
#~ msgid ""
#~ "But first we need to tell our project that the ``polls`` app is installed."
#~ msgstr ""
#~ "Но первым делом мы должны указать нашему проекту, что приложение "
#~ "``polls`` установлено."

# e16604e600944fe38228ec59349888a4
#~ msgid ""
#~ "Django apps are \"pluggable\": You can use an app in multiple projects, "
#~ "and you can distribute apps, because they don't have to be tied to a "
#~ "given Django installation."
#~ msgstr ""
#~ "Приложения Django \"подключаемые\": вы можете использовать приложение в "
#~ "нескольких проектах и вы можете распространять приложение, так как они не "
#~ "связаны с конкретным проектом Django."

# d3c7ee78316e451eb596a2a2a45b1972
#~ msgid ""
#~ "Edit the :file:`mysite/settings.py` file again, and change the :setting:"
#~ "`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look "
#~ "like this:"
#~ msgstr ""
#~ "Отредактируйте файл :file:`mysite/settings.py` и измените настройку :"
#~ "setting:`INSTALLED_APPS` добавив строку ``'polls'``. В результате получим:"

# 9cb822a7c73b404c88477270c8c122de
#~ msgid ""
#~ "Now Django knows to include the ``polls`` app. Let's run another command:"
#~ msgstr ""
#~ "Теперь Django знает, что необходимо использовать приложение ``polls``. "
#~ "Давайте выполним следующую команду:"

# 28f9234bcaab4f9d9ee5dfba6bd54693
#~ msgid "You should see something similar to the following:"
#~ msgstr "Вы увидите приблизительно такое:"

# f8f674dba2e84dd8864df5aab2f19695
#~ msgid ""
#~ "By running ``makemigrations``, you're telling Django that you've made "
#~ "some changes to your models (in this case, you've made new ones) and that "
#~ "you'd like the changes to be stored as a *migration*."
#~ msgstr ""
#~ "Выполняя ``makemigrations``, вы говорите Django, что внесли некоторые "
#~ "изменения в ваши модели (в нашем случае мы создали несколько новых) и "
#~ "хотели бы сохранить их в *миграции*."

# ead79e4e2d064e2ca556517787b554b1
#~ msgid ""
#~ "Migrations are how Django stores changes to your models (and thus your "
#~ "database schema) - they're just files on disk. You can read the migration "
#~ "for your new model if you like; it's the file ``polls/"
#~ "migrations/0001_initial.py``. Don't worry, you're not expected to read "
#~ "them every time Django makes one, but they're designed to be human-"
#~ "editable in case you want to manually tweak how Django changes things."
#~ msgstr ""
#~ "Миграции используются Django для сохранения изменений ваших моделей (и "
#~ "структуры базы данных) - это просто файлы на диске. Вы можете изучить "
#~ "миграцию для создания ваших моделей, она находится в файле ``polls/"
#~ "migrations/0001_initial.py``. Не волнуйтесь, вам не нужно каждый раз их "
#~ "проверять. Но их формат удобен для чтения на случай, если вы захотите "
#~ "внести изменения."

# 02fa0fc40ff74676a995841bc6d72a93
#~ msgid ""
#~ "There's a command that will run the migrations for you and manage your "
#~ "database schema automatically - that's called :djadmin:`migrate`, and "
#~ "we'll come to it in a moment - but first, let's see what SQL that "
#~ "migration would run. The :djadmin:`sqlmigrate` command takes migration "
#~ "names and returns their SQL:"
#~ msgstr ""
#~ "В Django есть команда, которая выполняет миграции и автоматически "
#~ "обновляет базу данных - она называется :djadmin:`migrate`. Мы скоро к ней "
#~ "вернемся, но сначала давайте посмотрим какой SQL выполнит эта миграция. "
#~ "Команда :djadmin:`sqlmigrate` получает название миграции и возвращает SQL:"

# 28f9234bcaab4f9d9ee5dfba6bd54693
#~ msgid ""
#~ "You should see something similar to the following (we've reformatted it "
#~ "for readability):"
#~ msgstr ""
#~ "Вы увидите приблизительно такое (мы отформатировали результат для "
#~ "читабельности):"

# 4e5bebc172b743929d917c012da86181
#~ msgid "Note the following:"
#~ msgstr "Обратите внимание на следующее:"

# df2a3c0fa3a84eab9df905cbf8f4db38
#~ msgid ""
#~ "The exact output will vary depending on the database you are using. The "
#~ "example above is generated for PostgreSQL."
#~ msgstr ""
#~ "Полученные запросы зависят от базы данных, которую вы используете. Пример "
#~ "выше получен для PostgreSQL."

# e5c51114f03f4b968e48b267e7227977
#~ msgid ""
#~ "Table names are automatically generated by combining the name of the app "
#~ "(``polls``) and the lowercase name of the model -- ``question`` and "
#~ "``choice``. (You can override this behavior.)"
#~ msgstr ""
#~ "Названия таблиц созданы автоматически из названия приложения(``polls``) и "
#~ "названия модели в нижнем регистре -- ``question`` и ``choice``. (Вы "
#~ "можете переопределить это.)"

# be1c0dab08bd483bbfd9489d73d7f183
#~ msgid ""
#~ "Primary keys (IDs) are added automatically. (You can override this, too.)"
#~ msgstr ""
#~ "Первичные ключи (ID) добавлены автоматически. (Вы можете переопределить и "
#~ "это.)"

# ab6319c4274d469ca45057de90bdd649
#~ msgid ""
#~ "By convention, Django appends ``\"_id\"`` to the foreign key field name. "
#~ "(Yes, you can override this, as well.)"
#~ msgstr ""
#~ "Django добавляет ``\"_id\"`` к названию внешнего ключа. (Да, вы можете "
#~ "переопределить и это.)"

# a4cd1cd6cb674a17911ce2bd86a8b5b8
#~ msgid ""
#~ "The foreign key relationship is made explicit by a ``FOREIGN KEY`` "
#~ "constraint. Don't worry about the ``DEFERRABLE`` parts; that's just "
#~ "telling PostgreSQL to not enforce the foreign key until the end of the "
#~ "transaction."
#~ msgstr ""
#~ "Связь явно определена через ``FOREIGN KEY`` constraint. Не волнуйтесь о "
#~ "``DEFERRABLE``, это просто указание для PostgreSQL не применять "
#~ "ограничения ``FOREIGN KEY`` до окончания транзакции."

# 3ab40ecf6d12418e959395ac016c7c24
#~ msgid ""
#~ "It's tailored to the database you're using, so database-specific field "
#~ "types such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or "
#~ "``integer primary key autoincrement`` (SQLite) are handled for you "
#~ "automatically. Same goes for quoting of field names -- e.g., using double "
#~ "quotes or single quotes."
#~ msgstr ""
#~ "Учитываются особенности базы данных, которую вы используете. "
#~ "Специфические типы данных такие как ``auto_increment`` (MySQL), "
#~ "``serial`` (PostgreSQL), или ``integer primary key`` (SQLite) будут "
#~ "использоваться автоматически. Тоже касается и экранирование названий, что "
#~ "позволяет использовать в названии кавычки -- например, использование "
#~ "одинарных или двойных кавычек."

# dcdc9ad8924d444681e0ad4e9ec3c35d
#~ msgid ""
#~ "The :djadmin:`sqlmigrate` command doesn't actually run the migration on "
#~ "your database - it just prints it to the screen so that you can see what "
#~ "SQL Django thinks is required. It's useful for checking what Django is "
#~ "going to do or if you have database administrators who require SQL "
#~ "scripts for changes."
#~ msgstr ""
#~ "Команда :djadmin:`sqlmigrate` не применяет миграцию к базе данных - она "
#~ "просто выводит запросы на экран, чтобы вы могли увидеть какой SQL создает "
#~ "Django. Это полезно, если вы хотите проверить что выполнит Django, или "
#~ "чтобы предоставить вашему администратору базы данных SQL скрипт."

# 81503fb4108e4382982747e5db63e1d9
#~ msgid ""
#~ "If you're interested, you can also run :djadmin:`python manage.py check "
#~ "<check>`; this checks for any problems in your project without making "
#~ "migrations or touching the database."
#~ msgstr ""
#~ "Если необходимо, можете выполнить :djadmin:`python manage.py check "
#~ "<check>`. Эта команда ищет проблемы в вашем проекте не применяя миграции "
#~ "и не изменяя базу данных."

# 362e59cef22b4dd38097152f0b649c84
#~ msgid ""
#~ "Now, run :djadmin:`migrate` again to create those model tables in your "
#~ "database:"
#~ msgstr ""
#~ "Теперь, выполните команду :djadmin:`migrate` снова, чтобы создать таблицы "
#~ "для этих моделей в базе данных:"

# 239861e971ca461ca205430e969e55a9
#~ msgid ""
#~ "The :djadmin:`migrate` command takes all the migrations that haven't been "
#~ "applied (Django tracks which ones are applied using a special table in "
#~ "your database called ``django_migrations``) and runs them against your "
#~ "database - essentially, synchronizing the changes you made to your models "
#~ "with the schema in the database."
#~ msgstr ""
#~ "Команда :djadmin:`migrate` выполняет все миграции, которые ещё не "
#~ "выполнялись, (Django следит за всеми миграциями, используя таблицу в базе "
#~ "данных ``django_migrations``) и применяет изменения к базе данных, "
#~ "синхронизируя структуру базы данных со структурой ваших моделей."

# 869133aedf7d401b9a55e5cf44629653
#~ msgid ""
#~ "Migrations are very powerful and let you change your models over time, as "
#~ "you develop your project, without the need to delete your database or "
#~ "tables and make new ones - it specializes in upgrading your database "
#~ "live, without losing data. We'll cover them in more depth in a later part "
#~ "of the tutorial, but for now, remember the three-step guide to making "
#~ "model changes:"
#~ msgstr ""
#~ "Миграции - очень мощная штука. Они позволяют изменять ваши модели в "
#~ "процессе развития проекта без необходимости пересоздавать таблицы в базе "
#~ "данных. Их задача изменять базу данных без потери данных. Мы ещё вернемся "
#~ "к ним, а пока запомните эти инструкции по изменению моделей:"

# b171f216ce2e4a8cb4f316ff0c949498
#~ msgid "Change your models (in ``models.py``)."
#~ msgstr "Внесите изменения в модели (в ``models.py``)."

# 2f4b70581d0e4b9e9850c79682e93cfa
#~ msgid ""
#~ "Run :djadmin:`python manage.py makemigrations <makemigrations>` to create "
#~ "migrations for those changes"
#~ msgstr ""
#~ "Выполните :djadmin:`python manage.py makemigrations <makemigrations>` "
#~ "чтобы создать миграцию для ваших изменений"

# c1f2e714d3e84d61946d044e77af7f81
#~ msgid ""
#~ "Run :djadmin:`python manage.py migrate <migrate>` to apply those changes "
#~ "to the database."
#~ msgstr ""
#~ "Выполните :djadmin:`python manage.py migrate <migrate>` чтобы применить "
#~ "изменения к базе данных."

# 6a577d7483e2430f9b8d49f1baf830d1
#~ msgid ""
#~ "The reason there's separate commands to make and apply migrations is "
#~ "because you'll commit migrations to your version control system and ship "
#~ "them with your app; they not only make your development easier, they're "
#~ "also useable by other developers and in production."
#~ msgstr ""
#~ "Две команды необходимы для того, чтобы хранить миграции в системе "
#~ "контроля версий. Они не только помогают вам, но и могут использоваться "
#~ "другими программистами вашего проекта."

# a3b7efd736a749b49a25445cce4da753
#~ msgid ""
#~ "Read the :doc:`django-admin documentation </ref/django-admin>` for full "
#~ "information on what the ``manage.py`` utility can do."
#~ msgstr ""
#~ "О всех возможностях ``manage.py`` вы можете прочитать в :doc:`разделе о "
#~ "django-admin </ref/django-admin>`."

# 273db0186815492d895bbb399046b9c9
#~ msgid "Playing with the API"
#~ msgstr "Поиграемся с API"

# b7693ccc9eb645e1962cce3bf74d67d5
#~ msgid ""
#~ "Now, let's hop into the interactive Python shell and play around with the "
#~ "free API Django gives you. To invoke the Python shell, use this command:"
#~ msgstr ""
#~ "Теперь, давайте воспользуемся консолью Python и поиграем с API, которое "
#~ "предоставляет Django. Чтобы запустить консоль Python выполните:"

# 4f8d751598eb438e9a732d59ae27b842
#~ msgid ""
#~ "We're using this instead of simply typing \"python\", because :file:"
#~ "`manage.py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, "
#~ "which gives Django the Python import path to your :file:`mysite/settings."
#~ "py` file."
#~ msgstr ""
#~ "Мы используем эту команду вместо просто \"python\", потому что :file:"
#~ "`manage.py` устанавливает переменную окружения "
#~ "``DJANGO_SETTINGS_MODULE``, которая указывает Django путь импорта для "
#~ "файла :file:`mysite/settings.py`."

# b5bcaa7b92a14b889999d430f73af7dc
#~ msgid "Bypassing manage.py"
#~ msgstr "Запуск без manage.py"

# aed4ef9e7521437aaa5a12c4fd1c6037
#~ msgid ""
#~ "If you'd rather not use :file:`manage.py`, no problem. Just set the :"
#~ "envvar:`DJANGO_SETTINGS_MODULE` environment variable to ``mysite."
#~ "settings``, start a plain Python shell, and set up Django:"
#~ msgstr ""
#~ "Если вы не желаете использовать :file:`manage.py`, не проблема. Просто "
#~ "установите переменную окружения :envvar:`DJANGO_SETTINGS_MODULE` в "
#~ "``mysite.settings``, запустите интерпретатор Python и инициализируйте "
#~ "Django:"

# aed4ef9e7521437aaa5a12c4fd1c6037
#~ msgid ""
#~ "You must run ``python`` from the same directory :file:`manage.py` is in, "
#~ "or ensure that directory is on the Python path, so that ``import mysite`` "
#~ "works."
#~ msgstr ""
#~ "Запустить ``python`` необходимо в каталоге, в котором находится файл :"
#~ "file:`manage.py` (или убедитесь, что каталог находится в путях Python, и "
#~ "``import mysite`` работает)."

# 3af482bbc6c94cca98f9ab403d9fb9dd
#~ msgid ""
#~ "For more information on all of this, see the :doc:`django-admin "
#~ "documentation </ref/django-admin>`."
#~ msgstr ""
#~ "Полную информацию обо всем этом смотрите в :doc:`разделе о django-admin </"
#~ "ref/django-admin>`."

# 2032d7a6354b486882f6f9abbfa629eb
#~ msgid ""
#~ "Once you're in the shell, explore the :doc:`database API </topics/db/"
#~ "queries>`::"
#~ msgstr ""
#~ "Теперь, когда вы в консоли, исследуем :doc:`API базы данных </topics/db/"
#~ "queries>`::"

# fdf44a2ab073409ebcd404f9c21e4f7f
#~ msgid ""
#~ "Wait a minute. ``<Question: Question object>`` is, utterly, an unhelpful "
#~ "representation of this object. Let's fix that by editing the ``Question`` "
#~ "model (in the ``polls/models.py`` file) and adding a :meth:`~django.db."
#~ "models.Model.__str__` method to both ``Question`` and ``Choice``:"
#~ msgstr ""
#~ "Одну минуту. ``<Question: Question object>`` -- крайне непрактичное "
#~ "отображение объекта. Давайте исправим это, отредактировав модель "
#~ "``Question`` (в файле ``polls/models.py``) и добавив метод :meth:`~django."
#~ "db.models.Model.__str__` для моделей ``Question`` и ``Choice``:"

# 72beb23d3eeb467cafdacc71e4a79d1f
#~ msgid ""
#~ "It's important to add :meth:`~django.db.models.Model.__str__` methods to "
#~ "your models, not only for your own convenience when dealing with the "
#~ "interactive prompt, but also because objects' representations are used "
#~ "throughout Django's automatically-generated admin."
#~ msgstr ""
#~ "Важно добавить метод :meth:`~django.db.models.Model.__str__` не только "
#~ "для красивого отображения в консоли, но так же и потому, что Django "
#~ "использует строковое представление объекта в интерфейсе администратора."

# b348c16a4ed54819b9bd70720b458de8
#~ msgid "``__str__`` or ``__unicode__``?"
#~ msgstr "``__str__`` или ``__unicode__``?"

# d00edbd3518d4ceb83731a605fc77a45
#~ msgid ""
#~ "On Python 3, it's easy, just use :meth:`~django.db.models.Model.__str__`."
#~ msgstr ""
#~ "В Python 3 все проще, просто используйте :meth:`~django.db.models.Model."
#~ "__str__`."

# cd47d9db719a441f8e3736287716adb4
#~ msgid ""
#~ "On Python 2, you should define :meth:`~django.db.models.Model."
#~ "__unicode__` methods returning ``unicode`` values instead. Django models "
#~ "have a default :meth:`~django.db.models.Model.__str__` method that calls :"
#~ "meth:`~django.db.models.Model.__unicode__` and converts the result to a "
#~ "UTF-8 bytestring. This means that ``unicode(p)`` will return a Unicode "
#~ "string, and ``str(p)`` will return a bytestring, with characters encoded "
#~ "as UTF-8. Python does the opposite: ``object`` has a ``__unicode__`` "
#~ "method that calls ``__str__`` and interprets the result as an ASCII "
#~ "bytestring. This difference can create confusion."
#~ msgstr ""
#~ "В Python 2 необходимо определить метод :meth:`~django.db.models.Model."
#~ "__unicode__`, который возвращает ``unicode``. Модели Django содержат "
#~ "метод :meth:`~django.db.models.Model.__str__`, который вызывает метод :"
#~ "meth:`~django.db.models.Model.__unicode__` и конвертирует результат в "
#~ "UTF-8 байтовую строку. Это означает, что ``unicode(p)`` вернет строку "
#~ "Unicode, и ``str(p)`` вернет обычную строку, символы которой закодированы "
#~ "в UTF-8. Python делает наоброт: ``object`` содержит метод "
#~ "``__unicode__``, который вызывает ``__str__`` и конвертирует результат "
#~ "ASCII байтовую строку. Это отличие может вводить в заблуждение."

# 737a0bc224cc4589ac009cb2cb95f439
#~ msgid "If all of this is gibberish to you, just use Python 3."
#~ msgstr "Если все это звучит как бред для вас, используйте Python 3."

# 38fcba052aa448aca785c83560ec9498
#~ msgid ""
#~ "Note these are normal Python methods. Let's add a custom method, just for "
#~ "demonstration:"
#~ msgstr ""
#~ "Заметим, это стандартные методы Python. Давайте добавим свой метод, "
#~ "просто для демонстрации:"

# dd897d9c7817479fbd1426a33c2a91a9
#~ msgid ""
#~ "Note the addition of ``import datetime`` and ``from django.utils import "
#~ "timezone``, to reference Python's standard :mod:`datetime` module and "
#~ "Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
#~ "respectively. If you aren't familiar with time zone handling in Python, "
#~ "you can learn more in the :doc:`time zone support docs </topics/i18n/"
#~ "timezones>`."
#~ msgstr ""
#~ "Мы добавили ``import datetime`` и ``from django.utils import timezone`` "
#~ "для использования стандартной библиотеки Python :mod:`datetime` и модуля "
#~ "Django для работы с временными зонами :mod:`django.utils.timezone` "
#~ "соответственно. Если вы не знакомы, как Python работает с временными "
#~ "зонами, вы можете прочитать об этом в :doc:`разделе о поддержке временных "
#~ "зон </topics/i18n/timezones>`."

# 5c37d6a0253642eaa73020ee3423ab9b
#~ msgid ""
#~ "Save these changes and start a new Python interactive shell by running "
#~ "``python manage.py shell`` again::"
#~ msgstr ""
#~ "Сохраните эти изменения и запустите консоль Python снова, выполнив "
#~ "``python manage.py shell``::"

# 8afd6f9073bb46ec9371a3975b205994
#~ msgid ""
#~ "For more information on model relations, see :doc:`Accessing related "
#~ "objects </ref/models/relations>`. For more on how to use double "
#~ "underscores to perform field lookups via the API, see :ref:`Field lookups "
#~ "<field-lookups-intro>`. For full details on the database API, see our :"
#~ "doc:`Database API reference </topics/db/queries>`."
#~ msgstr ""
#~ "Подробности о работе со связанными объектами смотрите в :doc:"
#~ "`соответствующем разделе </ref/models/relations>`. Подробности об "
#~ "использовании синтаксиса двойного нижнего подчеркивания читайте в разделе "
#~ "о :ref:`фильтрах полей <field-lookups-intro>`. Полная информация об API "
#~ "для работы с базой данных содержится в :doc:`соответствующем разделе </"
#~ "topics/db/queries>`."

# a9b71479224c42ec8b571d73a452c65b
#~ msgid ""
#~ "The default project layout recently changed. If you're seeing a \"flat\" "
#~ "layout (with no inner :file:`mysite/` directory), you're probably using a "
#~ "version of Django that doesn't match this tutorial version.  You'll want "
#~ "to either switch to the older tutorial or the newer Django version."
#~ msgstr ""
#~ "Структура проекта по умолчанию была недавно изменена. Если вы видите "
#~ "\"простую\" структуру (без внутреннего каталога :file:`mysite/`), "
#~ "возможно вы используете версию Django, которая не соответствует этому "
#~ "учебнику. Вам следует читать старую версию учебника или обновить Django."

# 977bac3fe6f3462e8ea3e632c3677a2a
#~ msgid ""
#~ "If you're interested, run the command-line client for your database and "
#~ "type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` "
#~ "(SQLite) to display the tables Django created."
#~ msgstr ""
#~ "Если вам интересно, запустите консольный клиент для вашей базы данных и "
#~ "выполните ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), или ``."
#~ "schema`` (SQLite) чтобы увидеть какие таблицы создал Django."

# 8a5e12d360c24361856694044848b78e
#~ msgid ""
#~ "The foreign key relationship is made explicit by a ``REFERENCES`` "
#~ "statement."
#~ msgstr "Внешний ключ определяется явно через ``REFERENCES``."

# 404a026aa77c4e31ab71a19f7e610547
#~ msgid "If you're interested, also run the following commands:"
#~ msgstr "Если вам интересно, запустите следующие команды:"

# 380b2baf88b14d139423f56e69205591
#~ msgid ""
#~ ":djadmin:`python manage.py validate <validate>` -- Checks for any errors "
#~ "in the construction of your models."
#~ msgstr ""
#~ ":djadmin:`python manage.py validate <validate>` -- Проверяет на ошибки "
#~ "структуру ваших моделей."

# 10ad92a88c4a4e879c8698271b7ec205
#~ msgid ""
#~ ":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any :"
#~ "ref:`custom SQL statements <initial-sql>` (such as table modifications or "
#~ "constraints) that are defined for the application."
#~ msgstr ""
#~ ":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Выводит :ref:"
#~ "`дополнительные SQL запросы <initial-sql>` (такие как изменения в таблице "
#~ "или дополнительные правила), определенные для приложения."

# 8ab753ca0a9a4376958c36745090aef7
#~ msgid ""
#~ ":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the "
#~ "necessary ``DROP TABLE`` statements for this app, according to which "
#~ "tables already exist in your database (if any)."
#~ msgstr ""
#~ ":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Выводит "
#~ "необходимые ``DROP TABLE`` запросы для этого приложения, учитывая "
#~ "таблицы, которые уже существуют в базе данных (если такие есть)."

# d8021f3eb219454fa67a03edbf4ee75a
#~ msgid ""
#~ ":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the "
#~ "``CREATE INDEX`` statements for this app."
#~ msgstr ""
#~ ":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Выводит "
#~ "``CREATE INDEX`` запросы для приложения."

# 8767151868274ac4bc89d6d39032fc00
#~ msgid ""
#~ ":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all "
#~ "the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and :djadmin:"
#~ "`sqlindexes` commands."
#~ msgstr ""
#~ ":djadmin:`python manage.py sqlall polls <sqlall>` -- Выводит комбинацию "
#~ "SQL запросов команд :djadmin:`sql`, :djadmin:`sqlcustom`, из :djadmin:"
#~ "`sqlindexes`."

# ac13a281127b4e60abccccb63e931a8f
#~ msgid ""
#~ "Looking at the output of those commands can help you understand what's "
#~ "actually happening under the hood."
#~ msgstr ""
#~ "Изучение вывода этих команд может помочь вам понять что на самом деле "
#~ "происходит."

# ad1fc73ad5154661aace060a0b7c6b35
#~ msgid ""
#~ "The :djadmin:`syncdb` command runs the SQL from :djadmin:`sqlall` on your "
#~ "database for all apps in :setting:`INSTALLED_APPS` that don't already "
#~ "exist in your database. This creates all the tables, initial data and "
#~ "indexes for any apps you've added to your project since the last time you "
#~ "ran syncdb. :djadmin:`syncdb` can be called as often as you like, and it "
#~ "will only ever create the tables that don't exist."
#~ msgstr ""
#~ "Команда :djadmin:`syncdb` выполняет все запросы из команды :djadmin:"
#~ "`sqlall` в вашей базе данных для всех приложений, которые находятся :"
#~ "setting:`INSTALLED_APPS`. Она создает все таблицы, загружает начальные "
#~ "данные и создает индексы для всех моделей всех приложений. Команда :"
#~ "djadmin:`syncdb` может выполняться любое количество раз и будут созданы "
#~ "только таблицы, которые еще не существуют."

# 7e9fd39268f54fb1b85345afebeea3dc
#~ msgid ""
#~ "If you're familiar with Python 2, you might be in the habit of adding :"
#~ "meth:`~django.db.models.Model.__str__` methods to your classes, not :meth:"
#~ "`~django.db.models.Model.__unicode__` methods. We use :meth:`~django.db."
#~ "models.Model.__unicode__` here because Django models deal with Unicode by "
#~ "default. All data stored in your database is converted to Unicode when "
#~ "it's returned."
#~ msgstr ""
#~ "Если у вас есть опыт работы с Python 2, вы, наверное, уже привыкли "
#~ "добавлять метод :meth:`~django.db.models.Model.__str__` в ваши классы, "
#~ "не :meth:`~django.db.models.Model.__unicode__`. Мы используем метод :meth:"
#~ "`~django.db.models.Model.__unicode__` потому что модели Django работают с "
#~ "Unicode по умолчанию. Все данные из базы данных конвертируются в Unicode "
#~ "при получении."

# c61b5d80bce34f2f99ba36755dd0fb7a
#~ msgid ""
#~ "If all of this is gibberish to you, just remember to add :meth:`~django."
#~ "db.models.Model.__unicode__` methods to your models. With any luck, "
#~ "things should Just Work for you."
#~ msgstr ""
#~ "Если все это звучит бессмысленно для вас, просто не забывайте добавлять "
#~ "метод :meth:`~django.db.models.Model.__unicode__` в ваши модели. Если "
#~ "повезет, все должно работать без проблем."

# 3f39636f770c4a37af72eaecc775c7b7
#~ msgid ""
#~ "When specifying the path, always use forward slashes, even on Windows (e."
#~ "g. ``C:/homes/user/mysite/sqlite3.db``)."
#~ msgstr ""
#~ "Когда указываете путь, используйте обратный слэш, даже на Windows "
#~ "(например, ``C:/homes/user/mysite/sqlite3.db``)."

# 6b2e7b9334f44e6eaa2e3da9b32c0a5b
#~ msgid ":setting:`USER` -- Your database username (not used for SQLite)."
#~ msgstr ""
#~ ":setting:`USER` -- Имя пользователя базы данных (не используйтеся для "
#~ "SQLite)."

# 56f275dc479d43639fdcb5d35a69b05c
#~ msgid ":setting:`PASSWORD` -- Your database password (not used for SQLite)."
#~ msgstr ""
#~ ":setting:`PASSWORD` -- Пароль к базе данных (не используется для SQLite)."

# 5b7e045d51224ea5a373580780a99345
#~ msgid ""
#~ ":setting:`HOST` -- The host your database is on. Leave this as an empty "
#~ "string (or possibly ``127.0.0.1``) if your database server is on the same "
#~ "physical machine (not used for SQLite). See :setting:`HOST` for details."
#~ msgstr ""
#~ ":setting:`HOST` -- Имя хоста, на котором находится база данных. Оставьте "
#~ "пустую строку (или возможно ``127.0.0.1``), если сервер базы данных "
#~ "находится на том же хосте (не используется для SQLite). Смотрите "
#~ "детальное описание :setting:`HOST`."

# 153f37c7068e4009a03fe5e01fda4ecc
#~ msgid ""
#~ ":mod:`django.contrib.sites` -- A framework for managing multiple sites "
#~ "with one Django installation."
#~ msgstr ""
#~ ":mod:`django.contrib.sites` -- Фреймверк для управления несколькими "
#~ "сайтами с одной инсталяцией Django."
