# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2017-04-05 19:02+0300\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.7\n"

# aac3795525a04e17905a20798438e2d8
#: ../../intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr "Создаём своё первое приложение с Django, часть 4"

# d10cf731b67e4e509095080266074bb7
#: ../../intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""
"Продолжаем начатое в :doc:`третьей части </intro/tutorial03>` учебника. Мы "
"продолжим разрабатывать приложение для голосования и сосредоточимся на "
"обработке форм и упрощении нашего кода."

# 203de5f6aa49498d849e6cc51f741089
#: ../../intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr "Создадим простую форму"

# caf52852ac54442ca31aa27c1f7e86a4
#: ../../intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""
"Отредактируем шаблон страницы опроса (\"polls/detail.html\") из предыдущего "
"раздела учебника, и добавим HTML элемент ``<form>``:"

# 3faf394bfda149d19ca4b5f2cd9b01fa
#: ../../intro/tutorial04.txt:31
msgid "A quick rundown:"
msgstr "Краткий обзор:"

# 09fe4aff0c904c9498a8914ac209f7d7
#: ../../intro/tutorial04.txt:33
msgid ""
"The above template displays a radio button for each question choice. The "
"``value`` of each radio button is the associated question choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=#`` where # is the ID of the selected choice. This is the "
"basic concept of HTML forms."
msgstr ""
"Данный шаблон отображает radio-поле для каждого варианта ответа вопроса. "
"``value`` поля содержит ID ответа. ``name`` каждого поля равно ``\"choice"
"\"``. Это означает, что при выборе поля и отправке формы, будет отправлены "
"POST данные ``choice=#``, где # равно ID выбранного ответа. Это основной "
"принцип работы HTML форм."

# 878e916b45d0417c99377d6c594b9216
#: ../../intro/tutorial04.txt:40
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' question.id %}``, and "
"we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to "
"``method=\"get\"``) is very important, because the act of submitting this "
"form will alter data server-side. Whenever you create a form that alters "
"data server-side, use ``method=\"post\"``. This tip isn't specific to "
"Django; it's just good Web development practice."
msgstr ""
"Значение ``action`` формы равно ``{% url 'polls:vote' question.id %}``, еще "
"добавлено ``method=\"post\"``. Использование ``method=\"post\"`` (вместо "
"``method=\"get\"``) очень важно, так как отправка формы изменяет данные. Для "
"форм изменяющих данные используйте ``method=\"post\"``. Этот совет не "
"относится к Django, это хорошая практика для Web-приложений."

# 498dce7373824fcab37ee747af7fa2c7
#: ../../intro/tutorial04.txt:47
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr "``forloop.counter`` содержит номер итерации цикла тега :ttag:`for`"

# abcc48c746b4490eb09a003eaf66856c
#: ../../intro/tutorial04.txt:50
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""
"Так как мы создаем POST форму (которая может привести к изменениям данных), "
"нам следует побеспокоится о Cross Site Request Forgeries. Благодаря Django "
"это очень просто. В общем, все POST формы, которые отправляются на "
"внутренний URL, должны использовать тег :ttag:`{% csrf_token %}<csrf_token>`."

# 3f4c94b3ab5f4988841f6396d16fa524
#: ../../intro/tutorial04.txt:57
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line:"
msgstr ""
"Теперь создадим представление Django, которое принимает данные отправленные "
"формой и обрабатывает их. Вспомним, в :doc:`Части 3 </intro/tutorial03>` мы "
"создали URLconf который содержит следующую строку:"

# 363438c66cb740daaec01da9666eba04
#: ../../intro/tutorial04.txt:66
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``:"
msgstr ""
"Мы также создали функцию-\"заглушку\" ``vote()``. Давайте создадим настоящую "
"функцию представления. Добавьте следующее в ``polls/views.py``:"

# a827f3bcd0f94c00b8490ebef44e3d60
#: ../../intro/tutorial04.txt:96
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr "Этот код содержит вещи, которые еще не объяснялись в учебнике:"

# dc74606852204f788d27b508d177b95e
#: ../../intro/tutorial04.txt:98
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""
":attr:`request.POST <django.http.HttpRequest.POST>` -- это объект с "
"интерфейсом словаря, который позволяет получить отправленные данные через "
"название ключа. В нашем случае ``request.POST['choice']`` вернет ID "
"выбранного варианта ответа в виде строки. :attr:`request.POST <django.http."
"HttpRequest.POST>` всегда содержит строки."

# a6fbf0e60c5844309e8594d835e7464d
#: ../../intro/tutorial04.txt:104
msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""
"Заметим что Django также предоставляет :attr:`request.GET <django.http."
"HttpRequest.GET>` для аналогичного доступа к GET данным -- но мы используем :"
"attr:`request.POST <django.http.HttpRequest.POST>`, чтобы быть уверенным, "
"что данные передаются только при POST запросе."

# c9968424f2d349aabcdb7de469ceb363
#: ../../intro/tutorial04.txt:110
msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the question form with an error message if ``choice`` isn't given."
msgstr ""
"``request.POST['choice']`` вызовет исключение :exc:`KeyError`, если "
"``choice`` не находится в POST. Код обрабатывает исключение :exc:`KeyError` "
"и показывает страницу опроса с ошибкой, если не был выбран вариант ответа."

# 38c7dcc4ea184c16816db8df60b2d1b0
#: ../../intro/tutorial04.txt:115
msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""
"После увеличения счетчика ответов представление возвращает :class:`~django."
"http.HttpResponseRedirect` вместо :class:`~django.http.HttpResponse`. :class:"
"`~django.http.HttpResponseRedirect` принимает один аргумент: URL, на который "
"необходимо перенаправить пользователя (обратите внимание, как мы создаем "
"URL)."

# cf64a778f4c442b19088927a02445679
#: ../../intro/tutorial04.txt:122
msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's just good Web development "
"practice."
msgstr ""
"После успешной обработки POST запроса, вы должны возвращать :class:`~django."
"http.HttpResponseRedirect`. Это не относится конкретно к Django, это просто "
"хорошая практика при разработке Web-приложений."

# aaa758eea18440b4bbb94055be4e1c57
#: ../../intro/tutorial04.txt:127
msgid ""
"We are using the :func:`~django.urls.reverse` function in the :class:"
"`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in :doc:`Tutorial 3 </intro/tutorial03>`, this :func:"
"`~django.urls.reverse` call will return a string like ::"
msgstr ""
"Мы используем функцию :func:`~django.urls.reverse` при создании :class:"
"`~django.http.HttpResponseRedirect`. Это функция помогает избегать "
"\"хардкодинга\" URL-ов в коде. Она принимает название URL-шаблона и "
"необходимые аргументы для создания URL-а. В этом примере используется "
"конфигурация URL-ов из :doc:`Части 3 </intro/tutorial03>` и :func:`~django."
"urls.reverse` вернет::"

# 0ca0f322652349d6abcf1f9313246c1c
#: ../../intro/tutorial04.txt:138
msgid ""
"where the ``3`` is the value of ``question.id``. This redirected URL will "
"then call the ``'results'`` view to display the final page."
msgstr ""
"... где ``3`` значение ``question.id``. При запросе к этому URL-у вызовется "
"представление ``'results'`` для отображения результатов опроса."

# afb83a6905f541e187d4c965e740ee14
#: ../../intro/tutorial04.txt:141
msgid ""
"As mentioned in :doc:`Tutorial 3 </intro/tutorial03>`, ``request`` is an :"
"class:`~django.http.HttpRequest` object. For more on :class:`~django.http."
"HttpRequest` objects, see the :doc:`request and response documentation </ref/"
"request-response>`."
msgstr ""
"Как упоминалось в :doc:`Части 3 </intro/tutorial03>`, ``request`` является "
"экземпляром :class:`~django.http.HttpRequest`. Подробности о классе :class:"
"`~django.http.HttpRequest` смотрите в разделе об :doc:`объектах запроса и "
"ответа </ref/request-response>`."

# c3c0e9df20f04353ac6aa1067a81fa78
#: ../../intro/tutorial04.txt:146
msgid ""
"After somebody votes in a question, the ``vote()`` view redirects to the "
"results page for the question. Let's write that view:"
msgstr ""
"После ответа на опрос, представление ``vote()`` перенаправит пользователя на "
"страницу с результатами. Давайте создадим представление для этой страницы:"

# e060e4c524144a219ecb0782d586eca7
#: ../../intro/tutorial04.txt:159
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""
"Это представление аналогично представлению ``detail()`` из :doc:`Части 3 </"
"intro/tutorial03>`. Единственная разница - используемый шаблон. Повторение "
"кода мы исправим позже."

# 93570294d152458ca17d6b06ea75e08b
#: ../../intro/tutorial04.txt:163
msgid "Now, create a ``polls/results.html`` template:"
msgstr "Теперь создадим шаблон ``polls/results.html``:"

# 5f71be59e19a43129801126fd9251513
#: ../../intro/tutorial04.txt:178
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the question. You "
"should see a results page that gets updated each time you vote. If you "
"submit the form without having chosen a choice, you should see the error "
"message."
msgstr ""
"Теперь откройте страницу ``/polls/1/`` в браузере и ответьте на опрос. Вы "
"должны увидеть страницу с результатами, которые обновляются после каждого "
"ответа на опрос. Если вы отправите форму, не ответив на вопрос, вы должны "
"увидеть сообщение об ошибке."

#: ../../intro/tutorial04.txt:183
msgid ""
"The code for our ``vote()`` view does have a small problem. It first gets "
"the ``selected_choice`` object from the database, then computes the new "
"value of ``votes``, and then saves it back to the database. If two users of "
"your website try to vote at *exactly the same time*, this might go wrong: "
"The same value, let's say 42, will be retrieved for ``votes``. Then, for "
"both users the new value of 43 is computed and saved, but 44 would be the "
"expected value."
msgstr ""
"У кода представления ``vote()`` есть небольшие проблемы. Он сначала получает "
"объект ``selected_choice`` из базы данных, затем рассчитывает новое значение "
"``votes``, и сохраняет обратно в базу данных. Если два пользователя "
"проголосуют *в один момент*, код может сработать неправильно: одно и то же "
"значение, скажем 42, будет получено для ``votes``. Затем для обоих "
"пользователей получится и сохранится значение 43, хотя должно быть 44."

#: ../../intro/tutorial04.txt:191
msgid ""
"This is called a *race condition*. If you are interested, you can read :ref:"
"`avoiding-race-conditions-using-f` to learn how you can solve this issue."
msgstr ""
"Это называется *состояние гонки*. Подробнее можете прочитать в разделе о :"
"ref:`как предотвратить состояние гоник, используя F() <avoiding-race-"
"conditions-using-f>`."

# c2ad364fa360473d87aa1e2091cbb8c7
#: ../../intro/tutorial04.txt:196
msgid "Use generic views: Less code is better"
msgstr "Общие представления: меньше кода - меньше проблем"

# ea77830ee87f4481882507ba01454658
#: ../../intro/tutorial04.txt:198
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are very simple -- and, as mentioned above, redundant. "
"The ``index()`` view, which displays a list of polls, is similar."
msgstr ""
"Представления ``detail()`` (из :doc:`Части 3 </intro/tutorial03>`) и "
"``results()`` до глупости просты -- и, как упоминалось выше, избыточны. "
"Представление ``index()``, которое показывает список опросов, также довольно "
"стандартное."

# 91518ac31d29456fa1b209cf46861080
#: ../../intro/tutorial04.txt:202
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""
"Эти представления выполняют стандартные операции Веб-приложений: получение "
"данных из базы данных в соответствии с параметрами из URL, загрузка шаблона "
"и возвращение результата выполнения шаблона. Для таких стандартных операций "
"Django предоставляет набор \"общих представлений(generic views)\"."

# 1ee21f042b6f4438a4466fa65545fa48
#: ../../intro/tutorial04.txt:207
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""
"Общие представления позволяют создавать приложения практически не написав ни "
"строчки кода Python."

# 5ce0a732500a4e0e8985d50a056720c6
#: ../../intro/tutorial04.txt:210
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""
"Давайте используем их в нашем приложении. Необходимо выполнить следующие "
"действия:"

# 1d4eb4a80f924273b26080f373349584
#: ../../intro/tutorial04.txt:214
msgid "Convert the URLconf."
msgstr "Изменить URLconf."

# dbe0bc41513e4e8eb3f7a0dcb899e801
#: ../../intro/tutorial04.txt:216
msgid "Delete some of the old, unneeded views."
msgstr "Удалить старые и ненужные представления."

# a8fa3c528de441689f32c4431c7a4d07
#: ../../intro/tutorial04.txt:218
msgid "Introduce new views based on Django's generic views."
msgstr ""
"Создать новые представления из встроенных в Django общих представлений."

# ec8daf216aa44543a7b0b3893ea634ff
#: ../../intro/tutorial04.txt:220
msgid "Read on for details."
msgstr "Подробности читайте далее."

# d3b423b3d0df42cbadf2e2ef94e25f66
#: ../../intro/tutorial04.txt:222
msgid "Why the code-shuffle?"
msgstr "Зачем мы переписываем код?"

# be8d00b818f64c278ad04b3adb37dcbd
#: ../../intro/tutorial04.txt:224
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""
"Скорее всего, вы будете использовать общие представления с самого начала без "
"необходимости рефакторить проект. Этот учебник специально описывает создание "
"представлений, чтобы описать основные концепции."

# 4dce644a4ca54873a833a53c75dc2a05
#: ../../intro/tutorial04.txt:230
msgid "You should know basic math before you start using a calculator."
msgstr "Вы должны знать основы математики для использования калькулятора."

# 8f318f74f93043c89e3ff07604b45988
#: ../../intro/tutorial04.txt:233
msgid "Amend URLconf"
msgstr "Изменим URLconf"

# 1b52698f2b064fbea2072dd17ad3d00a
#: ../../intro/tutorial04.txt:235
msgid "First, open the ``polls/urls.py`` URLconf and change it like so:"
msgstr ""
"Первым делом откройте ``polls/urls.py`` и измените его следующим образом:"

# 2fa046506a3c4d87a417bdd3d7edb92c
#: ../../intro/tutorial04.txt:252
msgid ""
"Note that the name of the matched pattern in the regexes of the second and "
"third patterns has changed from ``<question_id>`` to ``<pk>``."
msgstr ""
"Обратите внимание, мы поменяли ``<question_id>`` на ``<pk>`` во втором и "
"третьем URL-ах."

# 818f439e3f0c4fc3b23e19088db0e799
#: ../../intro/tutorial04.txt:256
msgid "Amend views"
msgstr "Изменим представления"

# c75172d07dde4137a88dbb7ea926b6c6
#: ../../intro/tutorial04.txt:258
msgid ""
"Next, we're going to remove our old ``index``, ``detail``, and ``results`` "
"views and use Django's generic views instead. To do so, open the ``polls/"
"views.py`` file and change it like so:"
msgstr ""
"Теперь мы собираемся удалить старые представления ``index``, ``detail`` и "
"``results`` и воспользуемся встроенными в Django общими представлениями. Для "
"этого измените файл ``polls/views.py``:"

# 196ba0a78ced49a9aca8f75521f307b3
#: ../../intro/tutorial04.txt:295
msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""
"Мы используем здесь два общих представления: :class:`~django.views.generic."
"list.ListView` и :class:`~django.views.generic.detail.DetailView`. Эти два "
"типа представлений отображают две концепции: \"отображение списка объектов\" "
"и \"отображение подробностей о конкретном объекте\"."

# edf329d39eb643aab24425b3c86b7062
#: ../../intro/tutorial04.txt:301
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` attribute."
msgstr ""
"Каждое общее представление должно знать с какой моделью работать. Ее можно "
"указать с помощью атрибута ``model``."

# d58b50396e614b5aab573f9b26780784
#: ../../intro/tutorial04.txt:304
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``question_id`` to ``pk`` for the generic views."
msgstr ""
"Представление :class:`~django.views.generic.detail.DetailView` принимает "
"значение первичного ключа из URL с названием ``\"pk\"``, поэтому мы изменили "
"название параметра с ``question_id`` на ``pk``."

# 0bc163e3dfc04196a99d7f939aef68d9
#: ../../intro/tutorial04.txt:309
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it would use the template ``\"polls/question_detail.html\"``. The "
"``template_name`` attribute is used to tell Django to use a specific "
"template name instead of the autogenerated default template name. We also "
"specify the ``template_name`` for the ``results`` list view -- this ensures "
"that the results view and the detail view have a different appearance when "
"rendered, even though they're both a :class:`~django.views.generic.detail."
"DetailView` behind the scenes."
msgstr ""
"По умолчанию представление :class:`~django.views.generic.detail.DetailView` "
"использует шаблон ``<app name>/<model name>_detail.html``. В нашем случае "
"будет использоваться ``\"polls/question_detail.html\"``. Атрибут "
"``template_name`` позволяет указать Django какой шаблон использовать. Мы "
"указали ``template_name`` также для представления ``results``, чтобы "
"страница результата и подробностей использовали разные шаблоны, несмотря на "
"то, что они используют представление :class:`~django.views.generic.detail."
"DetailView`."

# e1ad09d67b2f40299d4d017a0be6d05f
#: ../../intro/tutorial04.txt:319
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""
"Аналогично :class:`~django.views.generic.list.ListView` использует шаблон "
"``<app name>/<model name>_list.html``, мы использовали ``template_name``, "
"чтобы определить другой шаблон - ``\"polls/index.html\"``."

# eee64f5cfbf247aeb1ba84e440bd4d24
#: ../../intro/tutorial04.txt:325
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``question`` and ``latest_question_list`` context "
"variables. For ``DetailView`` the ``question`` variable is provided "
"automatically -- since we're using a Django model (``Question``), Django is "
"able to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``question_list``. "
"To override this we provide the ``context_object_name`` attribute, "
"specifying that we want to use ``latest_question_list`` instead. As an "
"alternative approach, you could change your templates to match the new "
"default context variables -- but it's a lot easier to just tell Django to "
"use the variable you want."
msgstr ""
"В предыдущей части учебника в шаблоне использовался контекст с переменными "
"``question`` и ``latest_question_list``. Для DetailView переменная "
"``question`` добавляется автоматически -- так как мы используем модель "
"``Question``, Django автоматически генерирует подходящее название для "
"переменной контекста. Для ListView переменная будет называться "
"``question_list``. Чтобы переопределить это название, мы использовали "
"атрибут ``context_object_name`` указав ``latest_question_list``. Как "
"вариант, вы можете изменить шаблон и использовать ``question_list``, но "
"проще указать Django какое название переменной контекста использовать."

# a8fa3c528de441689f32c4431c7a4d07
#: ../../intro/tutorial04.txt:337
msgid "Run the server, and use your new polling app based on generic views."
msgstr "Запустите сервер и протестируйте наше приложение."

# 029b43ae7f1245e683b8730554c65fba
#: ../../intro/tutorial04.txt:339
msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/class-based-views/index>`."
msgstr ""
"Подробности об общих представлениях смотрите в :doc:`соответствующем разделе "
"</topics/class-based-views/index>`."

# 8e90777c796243da9fa7ee333f5062c9
#: ../../intro/tutorial04.txt:342
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""
"Когда вы освоите формы и общие представления, переходите к :doc:`пятой части "
"учебника</intro/tutorial05>`, чтобы узнать о тестировании нашего приложения."
