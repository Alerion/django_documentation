# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# redvi <liberty195@gmail.com>, 2013, 2014, 2015, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2017-11-17 17:38+0200\n"
"Last-Translator: redvi <liberty195@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 50f1fa97b3744908a733ce33f3c5ec81
#: ../../intro/overview.txt:3
msgid "Django at a glance"
msgstr "Знакомство с Django"

# 33dda732ee094e9bb75e96977f7aac86
#: ../../intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""
"Поскольку Django был разработан в бурлящей среде новостного агентства, он "
"призван сделать веб-разработку простой и быстрой. Далее представлен вводный "
"обзор того, как можно писать веб-приложения при помощи Django."

# 0c511f1be7d94fb996fde8716beeb017
#: ../../intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr ""
"Цель данного документа: предоставить вам достаточное количество технической "
"информации для понимания основ работы Django, но следует иметь ввиду, что "
"этот обзор не является учебником или справочником -- хотя у нас всё это "
"есть! Когда вы будете готовы к созданию своего первого проекта, вы можете :"
"doc:`начать с учебного руководства </intro/tutorial01>` или окунуться :doc:"
"`в море подробнейшей информации </topics/index>`."

# 6a548e64d4e345c096913e90258490c4
#: ../../intro/overview.txt:16
msgid "Design your model"
msgstr "Проектирование модели"

# aaf4e7c0f69d40a8b41401026548d77f
#: ../../intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an `object-"
"relational mapper`_ in which you describe your database layout in Python "
"code."
msgstr ""
"Хотя вы вполне можете обойтись без использования базы данных, Django "
"предоставляет `object-relational mapper`_ для описания формата БД в виде "
"кода на языке Python."

# 7471e17b193e4c78b12fda8e57668ebe
#: ../../intro/overview.txt:24
msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving many years' worth of "
"database-schema problems. Here's a quick example:"
msgstr ""
":doc:`Синтаксис моделей данных </topics/db/models>` предлагает множество "
"различных способов представления ваших данных, что помогает решать "
"стандартные задачи по использованию БД. Вот небольшой пример:"

# ab5d490c954f446e9bcda1471279d626
#: ../../intro/overview.txt:49
msgid "Install it"
msgstr "Настройка базы данных"

# 61c4effdb2e64b2db43a19ab4657c71b
#: ../../intro/overview.txt:51
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""
"Теперь выполните команду для автоматического создания таблиц базы данных:"

# 627160d211884f3b84eb115402defa93
#: ../../intro/overview.txt:58
msgid ""
"The :djadmin:`migrate` command looks at all your available models and "
"creates tables in your database for whichever tables don't already exist, as "
"well as optionally providing :doc:`much richer schema control </topics/"
"migrations>`."
msgstr ""
"Команда :djadmin:`migrate` ищет все имеющиеся у вас модели и создает на их "
"основе недостающие таблицы в БД. Также при необходимости предоставляет :doc:"
"`более продвинутый контроль над изменениями в структуре данных </topics/"
"migrations>`."

# 69d8419199a54bdc8f9c3be7ebcc1035
#: ../../intro/overview.txt:63
msgid "Enjoy the free API"
msgstr "Наслаждайтесь свободным API"

# 6bd77e24d64b4564813e896daf706add
#: ../../intro/overview.txt:65
msgid ""
"With that, you've got a free, and rich, :doc:`Python API </topics/db/"
"queries>` to access your data. The API is created on the fly, no code "
"generation necessary:"
msgstr ""
"Дело в том, что вам доступен развитый и бесплатный :doc:`Python API </topics/"
"db/queries>` для доступа к вашим данным. API создаётся на лету, без "
"предварительной генерации кода:"

# 5ce5df4273a74ec1aa65a0a5690b0da4
#: ../../intro/overview.txt:141
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""
"Динамический административный интерфейс: это не просто строительный материал "
"-- это готовый дом"

# b81cb091c8c648bd90da54edd7912509
#: ../../intro/overview.txt:143
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface </ref/contrib/"
"admin/index>` -- a website that lets authenticated users add, change and "
"delete objects. It's as easy as registering your model in the admin site:"
msgstr ""
"Как только вы определите свои модели, Django может автоматически создать "
"удобный :doc:`интерфейс администратора </ref/contrib/admin/index>`, "
"позволяющий авторизованным пользователям добавлять, удалять и изменять "
"объекты. Для этого следует зарегистрировать свою модель:"

# a9be886fad5b40348e7c5eb020322ba6
#: ../../intro/overview.txt:168
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""
"Задумка заключается в том, что редактировать разделы могут служащие или "
"клиенты, или, может быть, только вы -- и при этом вам не хотелось бы иметь "
"дело с созданием бэкенд интерфейсов (backend interfaces) только лишь для "
"управления контентом."

# 381d45386e3f4972aab543ce17de7231
#: ../../intro/overview.txt:172
msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""
"Обычным рабочим моментом при создании сайта на Django, является написание "
"моделей и получение прав администратора для того, чтобы как можно скорее "
"приступить к работе. Так ваши сотрудники (или клиенты) могут сразу же начать "
"наполнение сайта данными, а вы параллельно продолжите подготавливать сайт "
"для публикации."

# 0bce14d76fc94be2a2aee4587571c83d
#: ../../intro/overview.txt:177
msgid "Design your URLs"
msgstr "Проектирование схемы URL"

# 58e63b9d1b564f58a25484295c0c02cf
#: ../../intro/overview.txt:179
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""
"Красивая, элегантная схема URL является важной составляющей "
"высококачественного веб-приложения. Django поощряет создание красивых схем "
"URL и не захламляет их мусором, подобным ``.php`` или же ``.asp.``"

# 98f1453d402146778f9b307dd6780a8d
#: ../../intro/overview.txt:183
msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf "
"</topics/http/urls>`. A table of contents for your app, it contains a simple "
"mapping between URL patterns and Python callback functions. URLconfs also "
"serve to decouple URLs from Python code."
msgstr ""
"Проектируя модель URL для своего приложения, вы создаёте модуль Python, "
"называемый :doc:`менеджером URL-ов </topics/http/urls>`. Оглавление вашего "
"приложения представляет из себя простое соответствие между URL-адресом и "
"вызываемой функцией на Python. URLconfs служит для выделения URL адресов из "
"кода на Python."

# fa7e1f443c714658946bfb660567d5a4
#: ../../intro/overview.txt:188
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above:"
msgstr ""
"Вот таким образом может выглядеть схема URL для классов ``Reporter``/"
"``Article``, представленных выше:"

# 6da599e2ab0f4cb9b9f829852a399d7c
#: ../../intro/overview.txt:204
msgid ""
"The code above maps URL paths to Python callback functions (\"views\"). The "
"path strings use parameter tags to \"capture\" values from the URLs. When a "
"user requests a page, Django runs through each path, in order, and stops at "
"the first one that matches the requested URL. (If none of them matches, "
"Django calls a special-case 404 view.) This is blazingly fast, because the "
"paths are compiled into regular expressions at load time."
msgstr ""
"Код выше описывает URL-ы для вызова соответствующих функций Python "
"(соответствующего представления, \"views\"). Теги с параметрами используются "
"для \"захвата\" значения из URL-адреса. Когда пользователь запрашивает "
"страницу, Django проходит по всем шаблонам по порядку и останавливается на "
"первом подходящем (если ни один из шаблонов не подошёл, Django вызовет "
"исключение 404.) Это происходит мгновенно, поскольку регулярные выражения "
"компилируются ещё во время загрузки."

# 37b8ee56d0934384a2b47fe3ee6e8747
#: ../../intro/overview.txt:211
msgid ""
"Once one of the URL patterns matches, Django calls the given view, which is "
"a Python function. Each view gets passed a request object -- which contains "
"request metadata -- and the values captured in the pattern."
msgstr ""
"После того, как соответствующий шаблон найден, Django импортирует и вызывает "
"представление, которое является по сути простой функцией на Python. Каждое "
"представление передаёт объект запроса -- он содержит возвращаемые метаданные "
"-- и значения, захваченные шаблонами."

# d98c6574cbe8453e94e4a3a615e42740
#: ../../intro/overview.txt:215
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, "
"year=2005, month=5, pk=39323)``."
msgstr ""
"К примеру, если пользователь запросил URL \"/articles/2005/05/39323/\", "
"Django должен вернуть функцию ``news.views.article_detail(request, "
"year=2005, month=5, pk=39323)``."

# e9feeb4f63104cae93e74d64eb9fc657
#: ../../intro/overview.txt:220
msgid "Write your views"
msgstr "Написание представлений"

# 61cd63ce954b45dd9455ceea3dac89a6
#: ../../intro/overview.txt:222
msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""
"Каждое представление отвечает за выполнение одной из двух вещей: возвращение "
"объекта :class:`~django.http.HttpResponse`, представляющего содержимое "
"запрашиваемой страницы, или вызов исключения такого как :class:`~django.http."
"Http404`. Остальное зависит от вас."

# 79a89f4c14ed41fb9cc9799b6ed3e3d4
#: ../../intro/overview.txt:227
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above:"
msgstr ""
"Как правило, представление извлекает данные в соответствии с заданными "
"параметрами, загружает шаблон и отображает этот шаблон вместе с полученными "
"данными. Это пример представления ``year_archive``, представленного выше:"

# 236a9d534316495db9333c080ec1c3ca
#: ../../intro/overview.txt:243
msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which "
"has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""
"В примере используется :doc:`язык шаблонов </topics/templates>` Django, "
"который имеет несколько сильных особенностей, но вместе с тем остаётся "
"простым в использовании даже для не-программистов."

# 8b85f39da2084a519cd2b0c1255a0a9f
#: ../../intro/overview.txt:248
msgid "Design your templates"
msgstr "Проектирование шаблонов"

# 2b090855e9d747aaa7f39e174138b750
#: ../../intro/overview.txt:250
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""
"Код, представленный выше, возвращает шаблон ``news/year_archive.html``."

# 243737840ef14b7aaac87688e4fc23c0
#: ../../intro/overview.txt:252
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates with :setting:`DIRS <TEMPLATES-DIRS>`. If a template "
"doesn't exist in the first directory, it checks the second, and so on."
msgstr ""
"Django включает пути поиска по шаблонам, что позволяет свести к минимуму "
"избыточность html-кода. В настройках Django нужно указать список каталогов, "
"откуда Django сможет загружать шаблоны. Это делается с помощью настройки :"
"setting:`DIRS <TEMPLATES-DIRS>`. Если шаблон не будет найден в первом "
"каталоге, Django проверит второй и все последующие."

# 2e7b447b28af42508df6ff579a76bb2a
#: ../../intro/overview.txt:257
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""
"Скажем, шаблон ``news/year_archive.html`` был найден. Вот как он может "
"выглядеть:"

# 0a30b5963c51424a897afd4abcd3e693
#: ../../intro/overview.txt:277
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup. They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""
"Переменные всегда окружены двумя фигурными скобками. ``{{ article.headline }}"
"`` означает \"вывести переменную, хранящую заголовок статьи.\" Хотя точка "
"используется не только для доступа к атрибутам: с её помощью можно провести "
"поиск в словаре, поиск индекса и вызов функции."

# 2d373d7cf2684b03a738808fb84dcf8b
#: ../../intro/overview.txt:282
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe"
"\" (the \"|\" character). This is called a template filter, and it's a way "
"to filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date function)."
msgstr ""
"Примечательно, что ``{{ article.pub_date|date:\"F j, Y\" }}`` использует "
"Unix-стиль \"pipe\" (символ вертикальной черты \"|\"). Это называется "
"шаблонным фильтром и это хороший способ для фильтрации значений переменной. "
"В примере фильтр даты приводит объект datetime к нужному виду (как "
"нахождение функции даты в PHP)."

# bc5191f2cfc94d2e82b8c6f0137adccb
#: ../../intro/overview.txt:287
msgid ""
"You can chain together as many filters as you'd like. You can write :ref:"
"`custom template filters <howto-writing-custom-template-filters>`. You can "
"write :doc:`custom template tags </howto/custom-template-tags>`, which run "
"custom Python code behind the scenes."
msgstr ""
"Вы можете последовательно применить столько фильтров, сколько вам будет "
"нужно. Вы можете писать :ref:`собственные шаблонные фильтры <howto-writing-"
"custom-template-filters>`. Вы можете писать :doc:`собственные шаблонные теги "
"</howto/custom-template-tags>`, которые будут неявно выполнять ваш код."

# 474a565b28e3406a800a635e4af7542a
#: ../../intro/overview.txt:292
msgid ""
"Finally, Django uses the concept of \"template inheritance\". That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""
"Наконец, Django использует концепцию \"наследования шаблонов\": это "
"достигается путём включения базового шаблона ``{% extends \"base.html\" %}"
"``. И это значит, что первым будет загружен шаблон 'base', в котором "
"определено множество различных блоков, которые в свою очередь также могут "
"содержать в себе какие-то блоки. Короче говоря, это позволяет намного "
"сократить количество html-шаблонов страниц: каждый новый шаблон должен "
"включать уникальные элементы, присущие только ему."

# e7cfde11b812472f8786c1da8a381c0b
#: ../../intro/overview.txt:298
msgid ""
"Here's what the \"base.html\" template, including the use of :doc:`static "
"files </howto/static-files/index>`, might look like:"
msgstr ""
"Базовый шаблон \"base.html\", включающий использование :doc:`статических "
"файлов </howto/static-files/index>`, может выглядеть следующим образом:"

# 322150eb0b01464885757f53853c0325
#: ../../intro/overview.txt:315
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site "
"redesign as easy as changing a single file -- the base template."
msgstr ""
"Проще говоря, он определяет внешний вид сайта (подгружает логотип), а также "
"оставляет место для заполнения блоков в дочерних шаблонах. Это позволяет "
"свести редизайн всего сайта к изменению единственного файла -- базового "
"шаблона."

# 72b1a75f0eb54f94a2745c4690c3567c
#: ../../intro/overview.txt:319
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different mobile versions of sites -- simply "
"by creating a new base template."
msgstr ""
"Также этот подход позволит вам создавать несколько версий сайта, "
"использующих различные базовые шаблоны, в то время как дочерние шаблоны "
"останутся неизменными. Создатели Django использовали этот подход для "
"написания отдельного шаблона для мобильных устройств -- просто создав новый "
"базовый шаблон."

# 62582a45cf594a69968bcdd260768d62
#: ../../intro/overview.txt:324
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""
"Обратите внимание на то, что вы можете не использовать язык шаблонов Django, "
"если отдаёте предпочтение какому-то иному. Хотя язык шаблонов Django как "
"нельзя лучше подходит при создании моделей Django, никто не заставляет вас "
"использовать его. Если уж на то пошло, знайте, что вы даже вправе не "
"пользоваться API баз данных Django. Вы можете использовать другой уровень "
"абстракции базы данных, вы можете читать XML-файлы, вы можете читать файлы с "
"диска, да и вообще делать всё, что угодно. Каждая часть Django -- модели, "
"представления, шаблоны -- отделены друг от друга."

# 5eba2d1475f3456381031482e16cf15d
#: ../../intro/overview.txt:333
msgid "This is just the surface"
msgstr "Это просто вершина айсберга"

# 60936167281f4005b616968805dbcf5e
#: ../../intro/overview.txt:335
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""
"Это был только краткий обзор возможностей Django. Вот ещё несколько полезных "
"особенностей, о которых следовало бы знать:"

# 343601aef1954fa3991bc09c0331fec1
#: ../../intro/overview.txt:338
msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or "
"other backends."
msgstr ""
":doc:`Система кэширования </topics/cache>`, интегрированная с memcached или "
"другими бэкэндами кэширования."

# 26063e5a47404a35a489e60d54ef18e7
#: ../../intro/overview.txt:341
msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""
":doc:`Фреймворк syndication </ref/contrib/syndication>`, позволяющий сделать "
"создание RSS и Atom фидов таким же простым делом, как написание небольшого "
"класса на Python."

# dc0994f4669a4e078ebf44f34a82ddec
#: ../../intro/overview.txt:344
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""
"Более изящный, генерируемый автоматически, административный интерфейс -- "
"этот обзор лишь едва коснулся его описания."

# a718f2c75f7a429b8cae699faf88d2f3
#: ../../intro/overview.txt:347
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""
"Следующими вашими шагами будут `установка Django <https://www.djangoproject."
"com/download/>`_, чтение :doc:`руководства </intro/tutorial01>` и "
"присоединение `к англоязычному <https://www.djangoproject.com/community/>`_ "
"или `к русскоязычному <http://djbook.ru/forum/>`_ сообществам. Благодарим "
"вас за проявленный интерес!"
