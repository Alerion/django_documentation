# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013, 2014, 2015, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 11:07+0200\n"
"PO-Revision-Date: 2016-02-03 12:42+0200\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 279f46a61e7b41b98d8a0a80f476b7cd
#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr "Создаём своё первое приложение с Django, часть 2"

# ee2059b16d0a4cceb86213baf936f0c4
#: ../../intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We'll setup the database, create your first model, and get a quick "
"introduction to Django's automatically-generated admin site."
msgstr ""
"Продолжаем начатое в :doc:`первой части </intro/tutorial01>` учебника. Мы "
"настроим базу данных, создадим свою первую модель и посмотрим на "
"автоматически созданный интерфейс администратора."

#: ../../intro/tutorial02.txt:10
msgid "Database setup"
msgstr "Настройка базы данных"

#: ../../intro/tutorial02.txt:12
msgid ""
"Now, open up :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings."
msgstr ""
"Теперь откроем файл :file:`mysite/settings.py`. Это обычный модуль Python с "
"набором переменных, которые представляют настройки Django."

#: ../../intro/tutorial02.txt:15
msgid ""
"By default, the configuration uses SQLite. If you're new to databases, or "
"you're just interested in trying Django, this is the easiest choice. SQLite "
"is included in Python, so you won't need to install anything else to support "
"your database. When starting your first real project, however, you may want "
"to use a more robust database like PostgreSQL, to avoid database-switching "
"headaches down the road."
msgstr ""
"По умолчанию в настройках указано использование SQLite. Если вы новичок в "
"базах данных, или просто хотите попробовать Django, это самый простой выбор. "
"SQLite уже включен в Python, и вам не нужно дополнительно что-то "
"устанавливать. Однако, создавая свой первый настоящий проект, вам "
"понадобиться более серьезная база данных, например PostgreSQL."

#: ../../intro/tutorial02.txt:22
msgid ""
"If you wish to use another database, install the appropriate :ref:`database "
"bindings <database-installation>` and change the following keys in the :"
"setting:`DATABASES` ``'default'`` item to match your database connection "
"settings:"
msgstr ""
"Если вы хотите использовать другую базу данных, установите :ref:`необходимые "
"библиотеки <database-installation>` и поменяйте следующие ключи в элементе "
"``'default'`` настройки :setting:`DATABASES`, чтобы они соответсвовали "
"настройкам подключения к вашей базе данных:"

#: ../../intro/tutorial02.txt:27
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"sqlite3'``, ``'django.db.backends.postgresql'``, ``'django.db.backends."
"mysql'``, or ``'django.db.backends.oracle'``. Other backends are :ref:`also "
"available <third-party-notes>`."
msgstr ""
":setting:`ENGINE <DATABASE-ENGINE>` -- один из ``'django.db.backends."
"sqlite3'``, ``'django.db.backends.postgresql'``, ``'django.db.backends."
"mysql'`` или ``'django.db.backends.oracle'``. Также доступны :ref:"
"`дополнительные бэкенды <third-party-notes>`."

#: ../../intro/tutorial02.txt:34
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. The "
"default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the file "
"in your project directory."
msgstr ""
":setting:`NAME` -- название вашей базы данных. Если вы используете SQLite, "
"база данных будет файлов на вашем компьютере, в этом случае :setting:`NAME` "
"содержит абсолютный путь, включая имя, к этому файлу. Значение по умолчанию, "
"``os.path.join(BASE_DIR, 'db.sqlite3')``, создаст файл в каталоге вашего "
"проекта."

#: ../../intro/tutorial02.txt:40
msgid ""
"If you are not using SQLite as your database, additional settings such as :"
"setting:`USER`, :setting:`PASSWORD`, and :setting:`HOST` must be added. For "
"more details, see the reference documentation for :setting:`DATABASES`."
msgstr ""
"Если вы используете не SQLite,вам необходимо указать дополнительно :setting:"
"`USER`, :setting:`PASSWORD` и :setting:`HOST`. Подробности смотрите в "
"описании :setting:`DATABASES`."

#: ../../intro/tutorial02.txt:44
msgid "For databases other than SQLite"
msgstr ""

#: ../../intro/tutorial02.txt:46
#, fuzzy
msgid ""
"If you're using a database besides SQLite, make sure you've created a "
"database by this point. Do that with \"``CREATE DATABASE database_name;``\" "
"within your database's interactive prompt."
msgstr ""
"Если вы используете PostgreSQL или MySQL, убедитесь, что вы создали базу "
"данных. Вы можете сделать это, выполнив \"``CREATE DATABASE database_name;``"
"\" в консоли вашей базы данных."

#: ../../intro/tutorial02.txt:50
msgid ""
"Also make sure that the database user provided in :file:`mysite/settings.py` "
"has \"create database\" privileges. This allows automatic creation of a :ref:"
"`test database <the-test-database>` which will be needed in a later tutorial."
msgstr ""

#: ../../intro/tutorial02.txt:55
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""
"Если вы используете SQLite, вам ничего не нужно создавать заранее - файл "
"базы данных будет создан автоматически при необходимости."

#: ../../intro/tutorial02.txt:58
msgid ""
"While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to "
"your time zone."
msgstr ""
"Отредактируйте :file:`mysite/settings.py` и укажите в :setting:`TIME_ZONE` "
"ваш часовой пояс."

#: ../../intro/tutorial02.txt:61
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
"That holds the names of all Django applications that are activated in this "
"Django instance. Apps can be used in multiple projects, and you can package "
"and distribute them for use by others in their projects."
msgstr ""
"Также обратите  внимание на настройку :setting:`INSTALLED_APPS` в начале "
"файла. Она содержит названия всех приложений Django, которые активированы в "
"вашем проекте. Приложения могут использоваться на разных проектах, вы можете "
"создать пакет, распространить его и позволить другим использовать его на "
"своих проектах."

#: ../../intro/tutorial02.txt:66
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""
"По умолчанию, :setting:`INSTALLED_APPS` содержит следующие приложение, "
"которые предоставляются Django:"

#: ../../intro/tutorial02.txt:69
msgid ":mod:`django.contrib.admin` -- The admin site. You'll use it shortly."
msgstr ""
":mod:`django.contrib.admin` -- интерфейс администратора. Скоро мы его будем "
"использовать."

#: ../../intro/tutorial02.txt:71
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ":mod:`django.contrib.auth` -- система авторизации."

#: ../../intro/tutorial02.txt:73
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ":mod:`django.contrib.contenttypes` -- фреймверк типов даных."

#: ../../intro/tutorial02.txt:75
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ":mod:`django.contrib.sessions` -- фреймверк сессии."

#: ../../intro/tutorial02.txt:77
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ":mod:`django.contrib.messages` -- фреймверк сообщений."

#: ../../intro/tutorial02.txt:79
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""
":mod:`django.contrib.staticfiles` -- фреймверк для работы со статическими "
"файлами."

#: ../../intro/tutorial02.txt:82
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr "Эти приложения включены по умолчанию для покрытия основных задач."

#: ../../intro/tutorial02.txt:84
msgid ""
"Some of these applications make use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""
"Некоторые приложения используют минимум одну таблицу в базе данных, поэтому "
"нам необходимо их создать перед тем, как мы будем их использовать. Для этого "
"выполним следующую команду:"

#: ../../intro/tutorial02.txt:92
msgid ""
"The :djadmin:`migrate` command looks at the :setting:`INSTALLED_APPS` "
"setting and creates any necessary database tables according to the database "
"settings in your :file:`mysite/settings.py` file and the database migrations "
"shipped with the app (we'll cover those later). You'll see a message for "
"each migration it applies. If you're interested, run the command-line client "
"for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), "
"``.schema`` (SQLite), or ``SELECT TABLE_NAME FROM USER_TABLES;`` (Oracle) to "
"display the tables Django created."
msgstr ""
"Команда :djadmin:`migrate` проверяет настройку :setting:`INSTALLED_APPS` и "
"создает все необходимые таблицы в базе данных, указанной в :file:`mysite/"
"settings.py`, применяя миграции, которые находятся в приложении (мы "
"расскажем об это ниже). Вы увидите сообщение для кажой примененной миграции. "
"Если вам интересно, запустите консоль базы данных и введите ``\\dt`` "
"(PostgreSQL), ``SHOW TABLES;`` (MySQL), ``.schema`` (SQLite), или ``SELECT "
"TABLE_NAME FROM USER_TABLES;`` (Oracle), чтобы посмотреть таблицы, которые "
"создал Django."

#: ../../intro/tutorial02.txt:101
msgid "For the minimalists"
msgstr "Для минималистов"

#: ../../intro/tutorial02.txt:103
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`migrate`. The :djadmin:`migrate` "
"command will only run migrations for apps in :setting:`INSTALLED_APPS`."
msgstr ""
"Как мы сказали выше, приложения по умолчанию включены для большинства "
"случаев, но не все они могут быть необходимы. Если какое-то приложение вам "
"не нужно, закомментируйте или удалите соответствующие строки из :setting:"
"`INSTALLED_APPS` перед запуском :djadmin:`migrate`. Команда :djadmin:"
"`migrate` выполнит миграции только для приложений из :setting:"
"`INSTALLED_APPS`."

#: ../../intro/tutorial02.txt:113
msgid "Creating models"
msgstr "Создание моделей"

#: ../../intro/tutorial02.txt:115
msgid ""
"Now we'll define your models -- essentially, your database layout, with "
"additional metadata."
msgstr ""
"Теперь создадим ваши модели -- по сути структуру вашей базы данных с "
"дополнительными мета-данными."

# 36bdeba62af8428d8fcd635b28080247
#: ../../intro/tutorial02.txt:118 ../../intro/tutorial02.txt:201
#: ../../intro/tutorial02.txt:585
msgid "Philosophy"
msgstr "Философия"

#: ../../intro/tutorial02.txt:120
msgid ""
"A model is the single, definitive source of truth about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""
"Модель - это основной источник данных. Он содержит набор полей и поведение "
"данных, которые вы храните. Django следует :ref:`принципу DRY<dry>`.. Смысл "
"в том, чтобы определять модели в одном месте."

#: ../../intro/tutorial02.txt:125
msgid ""
"This includes the migrations - unlike in Ruby On Rails, for example, "
"migrations are entirely derived from your models file, and are essentially "
"just a history that Django can roll through to update your database schema "
"to match your current models."
msgstr ""
"Частью работы с данными также являются миграции. В отличии от Ruby On Rails, "
"например, миграции вынесены из файла моделей и являются просто историей, "
"которую Django может использовать для изменения базы данных в соответствии с "
"текущей структурой моделей."

#: ../../intro/tutorial02.txt:130
msgid ""
"In our simple poll app, we'll create two models: ``Question`` and "
"``Choice``. A ``Question`` has a question and a publication date. A "
"``Choice`` has two fields: the text of the choice and a vote tally. Each "
"``Choice`` is associated with a ``Question``."
msgstr ""
"В нашем простом приложении голосования, мы создадим две модели: ``Question`` "
"и ``Choice``. ``Question`` содержит вопрос и дату публикации. ``Choice`` "
"содержит: текст ответа и количество голосов. Каждый объект ``Choice`` связан "
"с объектом ``Question``."

#: ../../intro/tutorial02.txt:135
msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this:"
msgstr ""
"Эти понятия отображаются простыми классами Python. Отредактируйте файл :file:"
"`polls/models.py`, чтобы он выглядел таким образом:"

#: ../../intro/tutorial02.txt:154
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""
"Код очень простой. Каждая модель представлена классом, унаследованным от :"
"class:`django.db.models.Model`. Каждая модель содержит несколько атрибутов, "
"каждый из которых отображает поле в таблице базы данных."

#: ../../intro/tutorial02.txt:158
msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""
"Каждое поле представлено экземпляром класса :class:`~django.db.models.Field` "
"-- например, :class:`~django.db.models.CharField` для текстовых полей и :"
"class:`~django.db.models.DateTimeField` для полей даты и времени. Это "
"указывает Django какие типы данных хранят эти поля."

#: ../../intro/tutorial02.txt:163
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question_text`` or ``pub_date``) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""
"Названия каждого экземпляра :class:`~django.db.models.Field` (например, "
"``question_text`` или ``pub_date`` ) это название поля, в \"машинном"
"\"(machine-friendly) формате. Вы будете использовать эти названия в коде, а "
"база данных будет использовать их как названия колонок."

#: ../../intro/tutorial02.txt:168
msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Question.pub_date``. "
"For all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""
"Вы можете использовать первый необязательный аргумент конструктора класса :"
"class:`~django.db.models.Field`, чтобы определить отображаемое, удобное для "
"восприятия, название поля. Оно используется в некоторых компонентах Django, "
"и полезно для документирования. Если это название не указано, Django будет "
"использовать \"машинное\" название. В этом примере, мы указали отображаемое "
"название только для поля ``Question.pub_date``. Для всех других полей будет "
"использоваться \"машинное\" название."

#: ../../intro/tutorial02.txt:176
msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. :"
"class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""
"Некоторые классы, унаследованные от :class:`~django.db.models.Field`, имеют "
"обязательные аргументы. Например, :class:`~django.db.models.CharField` "
"требует, чтобы вы передали ему :attr:`~django.db.models.CharField."
"max_length`. Это используется не только в схеме базы данных, но и при "
"валидации, как мы скоро увидим."

#: ../../intro/tutorial02.txt:181
msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments; "
"in this case, we've set the :attr:`~django.db.models.Field.default` value of "
"``votes`` to 0."
msgstr ""
":class:`~django.db.models.Field` может принимать различные необязательные "
"аргументы; в нашем примере мы указали :attr:`~django.db.models.Field."
"default` значение для `votes`` равное 0."

#: ../../intro/tutorial02.txt:185
msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each ``Choice`` is related to a single "
"``Question``. Django supports all the common database relationships: many-to-"
"one, many-to-many, and one-to-one."
msgstr ""
"Заметим, что связь между моделями определяется с помощью :class:`~django.db."
"models.ForeignKey`. Это указывает Django, что каждый ``Choice`` связан с "
"одним объектом ``Question``. Django поддерживает все основные типы связей: "
"многие-к-одному, многие-ко-многим и один-к-одному."

#: ../../intro/tutorial02.txt:191
msgid "Activating models"
msgstr "Активация моделей"

#: ../../intro/tutorial02.txt:193
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""
"Эта небольшая часть кода моделей предоставляет Django большое количество "
"информации, которая позволяет Django:"

#: ../../intro/tutorial02.txt:196
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr "Создать структуру базы данных (``CREATE TABLE``) для приложения."

#: ../../intro/tutorial02.txt:197
msgid ""
"Create a Python database-access API for accessing ``Question`` and "
"``Choice`` objects."
msgstr ""
"Создать Python API для доступа к данным объектов ``Question`` и ``Choice``."

#: ../../intro/tutorial02.txt:199
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""
"Но первым делом мы должны указать нашему проекту, что приложение ``polls`` "
"установлено."

#: ../../intro/tutorial02.txt:203
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""
"Приложения Django \"подключаемые\": вы можете использовать приложение в "
"нескольких проектах и вы можете распространять приложение, так как они не "
"связаны с конкретным проектом Django."

#: ../../intro/tutorial02.txt:207
msgid ""
"To include the app in our project, we need to add a reference to its "
"configuration class in the :setting:`INSTALLED_APPS` setting. The "
"``PollsConfig`` class is in the :file:`polls/apps.py` file, so its dotted "
"path is ``'polls.apps.PollsConfig'``. Edit the :file:`mysite/settings.py` "
"file and add that dotted path to the :setting:`INSTALLED_APPS` setting. "
"It'll look like this:"
msgstr ""

#: ../../intro/tutorial02.txt:227
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""
"Теперь Django знает, что необходимо использовать приложение ``polls``. "
"Давайте выполним следующую команду:"

#: ../../intro/tutorial02.txt:233
msgid "You should see something similar to the following:"
msgstr "Вы увидите приблизительно такое:"

#: ../../intro/tutorial02.txt:243
msgid ""
"By running ``makemigrations``, you're telling Django that you've made some "
"changes to your models (in this case, you've made new ones) and that you'd "
"like the changes to be stored as a *migration*."
msgstr ""
"Выполняя ``makemigrations``, вы говорите Django, что внесли некоторые "
"изменения в ваши модели (в нашем случае мы создали несколько новых) и хотели "
"бы сохранить их в *миграции*."

#: ../../intro/tutorial02.txt:247
msgid ""
"Migrations are how Django stores changes to your models (and thus your "
"database schema) - they're just files on disk. You can read the migration "
"for your new model if you like; it's the file ``polls/"
"migrations/0001_initial.py``. Don't worry, you're not expected to read them "
"every time Django makes one, but they're designed to be human-editable in "
"case you want to manually tweak how Django changes things."
msgstr ""
"Миграции используются Django для сохранения изменений ваших моделей (и "
"структуры базы данных) - это просто файлы на диске. Вы можете изучить "
"миграцию для создания ваших моделей, она находится в файле ``polls/"
"migrations/0001_initial.py``. Не волнуйтесь, вам не нужно каждый раз их "
"проверять. Но их формат удобен для чтения на случай, если вы захотите внести "
"изменения."

#: ../../intro/tutorial02.txt:254
msgid ""
"There's a command that will run the migrations for you and manage your "
"database schema automatically - that's called :djadmin:`migrate`, and we'll "
"come to it in a moment - but first, let's see what SQL that migration would "
"run. The :djadmin:`sqlmigrate` command takes migration names and returns "
"their SQL:"
msgstr ""
"В Django есть команда, которая выполняет миграции и автоматически обновляет "
"базу данных - она называется :djadmin:`migrate`. Мы скоро к ней вернемся, но "
"сначала давайте посмотрим какой SQL выполнит эта миграция. Команда :djadmin:"
"`sqlmigrate` получает название миграции и возвращает SQL:"

#: ../../intro/tutorial02.txt:263
msgid ""
"You should see something similar to the following (we've reformatted it for "
"readability):"
msgstr ""
"Вы увидите приблизительно такое (мы отформатировали результат для "
"читабельности):"

#: ../../intro/tutorial02.txt:299
msgid "Note the following:"
msgstr "Обратите внимание на следующее:"

#: ../../intro/tutorial02.txt:301
msgid ""
"The exact output will vary depending on the database you are using. The "
"example above is generated for PostgreSQL."
msgstr ""
"Полученные запросы зависят от базы данных, которую вы используете. Пример "
"выше получен для PostgreSQL."

#: ../../intro/tutorial02.txt:304
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``question`` and "
"``choice``. (You can override this behavior.)"
msgstr ""
"Названия таблиц созданы автоматически из названия приложения(``polls``) и "
"названия модели в нижнем регистре -- ``question`` и ``choice``. (Вы можете "
"переопределить это.)"

#: ../../intro/tutorial02.txt:308
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""
"Первичные ключи (ID) добавлены автоматически. (Вы можете переопределить и "
"это.)"

#: ../../intro/tutorial02.txt:310
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""
"Django добавляет ``\"_id\"`` к названию внешнего ключа. (Да, вы можете "
"переопределить и это.)"

#: ../../intro/tutorial02.txt:313
msgid ""
"The foreign key relationship is made explicit by a ``FOREIGN KEY`` "
"constraint. Don't worry about the ``DEFERRABLE`` parts; that's just telling "
"PostgreSQL to not enforce the foreign key until the end of the transaction."
msgstr ""
"Связь явно определена через ``FOREIGN KEY`` constraint. Не волнуйтесь о "
"``DEFERRABLE``, это просто указание для PostgreSQL не применять ограничения "
"``FOREIGN KEY`` до окончания транзакции."

#: ../../intro/tutorial02.txt:317
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key autoincrement`` (SQLite) are handled for you automatically. Same "
"goes for the quoting of field names -- e.g., using double quotes or single "
"quotes."
msgstr ""
"Учитываются особенности базы данных, которую вы используете. Специфические "
"типы данных такие как ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), "
"или ``integer primary key`` (SQLite) будут использоваться автоматически. "
"Тоже касается и экранирование названий, что позволяет использовать в "
"названии кавычки -- например, использование одинарных или двойных кавычек."

#: ../../intro/tutorial02.txt:323
msgid ""
"The :djadmin:`sqlmigrate` command doesn't actually run the migration on your "
"database - it just prints it to the screen so that you can see what SQL "
"Django thinks is required. It's useful for checking what Django is going to "
"do or if you have database administrators who require SQL scripts for "
"changes."
msgstr ""
"Команда :djadmin:`sqlmigrate` не применяет миграцию к базе данных - она "
"просто выводит запросы на экран, чтобы вы могли увидеть какой SQL создает "
"Django. Это полезно, если вы хотите проверить что выполнит Django, или чтобы "
"предоставить вашему администратору базы данных SQL скрипт."

#: ../../intro/tutorial02.txt:329
msgid ""
"If you're interested, you can also run :djadmin:`python manage.py check "
"<check>`; this checks for any problems in your project without making "
"migrations or touching the database."
msgstr ""
"Если необходимо, можете выполнить :djadmin:`python manage.py check <check>`. "
"Эта команда ищет проблемы в вашем проекте не применяя миграции и не изменяя "
"базу данных."

#: ../../intro/tutorial02.txt:333
msgid ""
"Now, run :djadmin:`migrate` again to create those model tables in your "
"database:"
msgstr ""
"Теперь, выполните команду :djadmin:`migrate` снова, чтобы создать таблицы "
"для этих моделей в базе данных:"

#: ../../intro/tutorial02.txt:344
msgid ""
"The :djadmin:`migrate` command takes all the migrations that haven't been "
"applied (Django tracks which ones are applied using a special table in your "
"database called ``django_migrations``) and runs them against your database - "
"essentially, synchronizing the changes you made to your models with the "
"schema in the database."
msgstr ""
"Команда :djadmin:`migrate` выполняет все миграции, которые ещё не "
"выполнялись, (Django следит за всеми миграциями, используя таблицу в базе "
"данных ``django_migrations``) и применяет изменения к базе данных, "
"синхронизируя структуру базы данных со структурой ваших моделей."

#: ../../intro/tutorial02.txt:350
msgid ""
"Migrations are very powerful and let you change your models over time, as "
"you develop your project, without the need to delete your database or tables "
"and make new ones - it specializes in upgrading your database live, without "
"losing data. We'll cover them in more depth in a later part of the tutorial, "
"but for now, remember the three-step guide to making model changes:"
msgstr ""
"Миграции - очень мощная штука. Они позволяют изменять ваши модели в процессе "
"развития проекта без необходимости пересоздавать таблицы в базе данных. Их "
"задача изменять базу данных без потери данных. Мы ещё вернемся к ним, а пока "
"запомните эти инструкции по изменению моделей:"

#: ../../intro/tutorial02.txt:356
msgid "Change your models (in ``models.py``)."
msgstr "Внесите изменения в модели (в ``models.py``)."

#: ../../intro/tutorial02.txt:357
msgid ""
"Run :djadmin:`python manage.py makemigrations <makemigrations>` to create "
"migrations for those changes"
msgstr ""
"Выполните :djadmin:`python manage.py makemigrations <makemigrations>` чтобы "
"создать миграцию для ваших изменений"

#: ../../intro/tutorial02.txt:359
msgid ""
"Run :djadmin:`python manage.py migrate <migrate>` to apply those changes to "
"the database."
msgstr ""
"Выполните :djadmin:`python manage.py migrate <migrate>` чтобы применить "
"изменения к базе данных."

#: ../../intro/tutorial02.txt:362
msgid ""
"The reason that there are separate commands to make and apply migrations is "
"because you'll commit migrations to your version control system and ship "
"them with your app; they not only make your development easier, they're also "
"useable by other developers and in production."
msgstr ""
"Две команды необходимы для того, чтобы хранить миграции в системе контроля "
"версий. Они не только помогают вам, но и могут использоваться другими "
"программистами вашего проекта."

#: ../../intro/tutorial02.txt:367
msgid ""
"Read the :doc:`django-admin documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""
"О всех возможностях ``manage.py`` вы можете прочитать в :doc:`разделе о "
"django-admin </ref/django-admin>`."

#: ../../intro/tutorial02.txt:371
msgid "Playing with the API"
msgstr "Поиграемся с API"

#: ../../intro/tutorial02.txt:373
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""
"Теперь, давайте воспользуемся консолью Python и поиграем с API, которое "
"предоставляет Django. Чтобы запустить консоль Python выполните:"

#: ../../intro/tutorial02.txt:380
msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`mysite/settings.py` file."
msgstr ""
"Мы используем эту команду вместо просто \"python\", потому что :file:`manage."
"py` устанавливает переменную окружения ``DJANGO_SETTINGS_MODULE``, которая "
"указывает Django путь импорта для файла :file:`mysite/settings.py`."

#: ../../intro/tutorial02.txt:384
msgid "Bypassing manage.py"
msgstr "Запуск без manage.py"

#: ../../intro/tutorial02.txt:386
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable to ``mysite.settings``, start "
"a plain Python shell, and set up Django:"
msgstr ""
"Если вы не желаете использовать :file:`manage.py`, не проблема. Просто "
"установите переменную окружения :envvar:`DJANGO_SETTINGS_MODULE` в ``mysite."
"settings``, запустите интерпретатор Python и инициализируйте Django:"

# 27cd4e40f9d6483e97863db19f55a820
#: ../../intro/tutorial02.txt:395
msgid ""
"If this raises an :exc:`AttributeError`, you're probably using a version of "
"Django that doesn't match this tutorial version. You'll want to either "
"switch to the older tutorial or the newer Django version."
msgstr ""
"Если вы получили исключение :exc:`AttributeError`, возможно вы используете "
"версию Django, которая не соответствует этому учебнику. Вам следует читать "
"старую версию учебника или обновить Django."

#: ../../intro/tutorial02.txt:399
msgid ""
"You must run ``python`` from the same directory :file:`manage.py` is in, or "
"ensure that directory is on the Python path, so that ``import mysite`` works."
msgstr ""
"Запустить ``python`` необходимо в каталоге, в котором находится файл :file:"
"`manage.py` (или убедитесь, что каталог находится в путях Python, и ``import "
"mysite`` работает)."

#: ../../intro/tutorial02.txt:403
msgid ""
"For more information on all of this, see the :doc:`django-admin "
"documentation </ref/django-admin>`."
msgstr ""
"Полную информацию обо всем этом смотрите в :doc:`разделе о django-admin </"
"ref/django-admin>`."

#: ../../intro/tutorial02.txt:406
msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`::"
msgstr ""
"Теперь, когда вы в консоли, исследуем :doc:`API базы данных </topics/db/"
"queries>`::"

#: ../../intro/tutorial02.txt:445
msgid ""
"Wait a minute. ``<Question: Question object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the ``Question`` "
"model (in the ``polls/models.py`` file) and adding a :meth:`~django.db."
"models.Model.__str__` method to both ``Question`` and ``Choice``:"
msgstr ""
"Одну минуту. ``<Question: Question object>`` -- крайне непрактичное "
"отображение объекта. Давайте исправим это, отредактировав модель "
"``Question`` (в файле ``polls/models.py``) и добавив метод :meth:`~django.db."
"models.Model.__str__` для моделей ``Question`` и ``Choice``:"

#: ../../intro/tutorial02.txt:469
msgid ""
"It's important to add :meth:`~django.db.models.Model.__str__` methods to "
"your models, not only for your own convenience when dealing with the "
"interactive prompt, but also because objects' representations are used "
"throughout Django's automatically-generated admin."
msgstr ""
"Важно добавить метод :meth:`~django.db.models.Model.__str__` не только для "
"красивого отображения в консоли, но так же и потому, что Django использует "
"строковое представление объекта в интерфейсе администратора."

#: ../../intro/tutorial02.txt:474
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration:"
msgstr ""
"Заметим, это стандартные методы Python. Давайте добавим свой метод, просто "
"для демонстрации:"

#: ../../intro/tutorial02.txt:491
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""
"Мы добавили ``import datetime`` и ``from django.utils import timezone`` для "
"использования стандартной библиотеки Python :mod:`datetime` и модуля Django "
"для работы с временными зонами :mod:`django.utils.timezone` соответственно. "
"Если вы не знакомы, как Python работает с временными зонами, вы можете "
"прочитать об этом в :doc:`разделе о поддержке временных зон </topics/i18n/"
"timezones>`."

#: ../../intro/tutorial02.txt:497
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""
"Сохраните эти изменения и запустите консоль Python снова, выполнив ``python "
"manage.py shell``::"

#: ../../intro/tutorial02.txt:576
msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""
"Подробности о работе со связанными объектами смотрите в :doc:"
"`соответствующем разделе </ref/models/relations>`. Подробности об "
"использовании синтаксиса двойного нижнего подчеркивания читайте в разделе о :"
"ref:`фильтрах полей <field-lookups-intro>`. Полная информация об API для "
"работы с базой данных содержится в :doc:`соответствующем разделе </topics/db/"
"queries>`."

#: ../../intro/tutorial02.txt:583
msgid "Introducing the Django Admin"
msgstr "Введение в интерфейс администратор Django"

# 8efae26bb46545f3a0a1e0ba7c1714de
#: ../../intro/tutorial02.txt:587
msgid ""
"Generating admin sites for your staff or clients to add, change, and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""
"Создание интерфейса администратора для добавления, изменения и удаления "
"содержимого сайта -- в основном скучная не креативная задача. Django "
"значительно автоматизирует и упрощает эту задачу."

# 338d2e3fd63b4011b073d9e86ca5f478
#: ../../intro/tutorial02.txt:591
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""
"Django создавался для новостных сайтов, у которых есть разделение между "
"публичными страницами и интерфейсом администратора. Менеджеры используют "
"последний для добавления новостей и другого содержимого сайта, это "
"содержимое отображается на сайте. Django позволяет легко создать "
"универсальный интерфейс для редактирования содержимого сайта."

# 0989045c478d4d5f9cce083c93f73d4b
#: ../../intro/tutorial02.txt:597
msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""
"Интерфейс администратора не предназначен для использования пользователями. "
"Он создан для менеджеров и администраторов сайта."

# ec03aaced91b469c8a2e58890e00b6f5
#: ../../intro/tutorial02.txt:601
msgid "Creating an admin user"
msgstr "Создание суперпользователя"

# b691e600f00746328a2dde615e86903a
#: ../../intro/tutorial02.txt:603
msgid ""
"First we'll need to create a user who can login to the admin site. Run the "
"following command:"
msgstr ""
"Первым делом необходимо создать пользователя, который может заходить на "
"интерфейс администратора. Выполните следующую команду:"

# cf798f4ca95649e290857cb6970a2a28
#: ../../intro/tutorial02.txt:610
msgid "Enter your desired username and press enter."
msgstr "Введите имя пользователя и нажмите Enter."

# 2c8496668c6d4ca48fb761d4cc72e533
#: ../../intro/tutorial02.txt:616
msgid "You will then be prompted for your desired email address:"
msgstr "Теперь введите email:"

# 996196207fe74960aee2e9ff586a5329
#: ../../intro/tutorial02.txt:622
msgid ""
"The final step is to enter your password. You will be asked to enter your "
"password twice, the second time as a confirmation of the first."
msgstr "И наконец введите пароль."

# 8002fe91c6f14bf586c7afa2d676b9a2
#: ../../intro/tutorial02.txt:632
msgid "Start the development server"
msgstr "Запускаем сервер для разработки"

# ddbfb4efb6fe42298c6ff98e289afb4e
#: ../../intro/tutorial02.txt:634
msgid ""
"The Django admin site is activated by default. Let's start the development "
"server and explore it."
msgstr ""
"Интерфейс администратора включен по умолчанию. Давайте запустим встроенный "
"сервер для разработки и посмотрим на него."

#: ../../intro/tutorial02.txt:637
msgid "If the server is not running start it like so:"
msgstr "Если сервер не запущен, выполните:"

# 809c2233a2e04344b3329183e6fa350a
#: ../../intro/tutorial02.txt:643
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""
"Откроем \"/admin/\" локального домена в браузере -- например, "
"http://127.0.0.1:8000/admin/. Вы должны увидеть страницу авторизации "
"интерфейса администратора:"

# 3acdde7f84f543499513b637c55dec31
#: ../../intro/tutorial02.txt:649
msgid ""
"Since :doc:`translation </topics/i18n/translation>` is turned on by default, "
"the login screen may be displayed in your own language, depending on your "
"browser's settings and if Django has a translation for this language."
msgstr ""
"Т.к. :doc:`translation </topics/i18n/translation>` включен по умолчанию, "
"страница авторизации может быть на вашем родном языке, зависит от настроек "
"браузера и наличия перевода для вашего языка."

# 2f91c1b5464d44d0ad4a31cb5e61f586
#: ../../intro/tutorial02.txt:654
msgid "Enter the admin site"
msgstr "Заходим в интерфейс администратора"

# b4a220edac074b909e6af7fcec41c599
#: ../../intro/tutorial02.txt:656
msgid ""
"Now, try logging in with the superuser account you created in the previous "
"step. You should see the Django admin index page:"
msgstr ""
"Теперь попробуйте войти в админку. Вы должны видеть следующую страницу "
"Django:"

# 4c7f7818de634195801bccf118033f85
#: ../../intro/tutorial02.txt:662
msgid ""
"You should see a few types of editable content: groups and users. They are "
"provided by :mod:`django.contrib.auth`, the authentication framework shipped "
"by Django."
msgstr ""
"Вы должны увидеть несколько разделов: группы и пользователи. Они "
"предоставлены приложением авторизации Django :mod:`django.contrib.auth`."

# 31bd7e2f1b8d4ea6bb1bbfd74a7c3705
#: ../../intro/tutorial02.txt:667
msgid "Make the poll app modifiable in the admin"
msgstr "Добавим приложение голосования в интерфейс администратора"

# 7170101a17544257b29adcb39f764fe6
#: ../../intro/tutorial02.txt:669
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""
"А где же наше приложение голосования? Оно не отображается в интерфейсе "
"администратора."

# 5a732d871e864d91a02317088657ffdf
#: ../../intro/tutorial02.txt:671
msgid ""
"Just one thing to do: we need to tell the admin that ``Question`` objects "
"have an admin interface. To do this, open the :file:`polls/admin.py` file, "
"and edit it to look like this:"
msgstr ""
"Нам нужно указать, что объекты модели ``Question`` могли редактироваться в "
"интерфейсе администратора. Для этого создадим файл :file:`polls/admin.py`, и "
"отредактируем следующим образом::"

# 1db75ea0b6744a888fa0c47b243bfd38
#: ../../intro/tutorial02.txt:685
msgid "Explore the free admin functionality"
msgstr "Изучим возможности интерфейса администратора"

# cbc4ff6cbb35489aa8a778d1f5414c79
#: ../../intro/tutorial02.txt:687
msgid ""
"Now that we've registered ``Question``, Django knows that it should be "
"displayed on the admin index page:"
msgstr ""
"После регистрации модели ``Question`` Django отобразит ее на главной "
"странице:"

# 2e7aa9a9cf6d45e897d61ed00bdadd01
#: ../../intro/tutorial02.txt:693
msgid ""
"Click \"Questions\". Now you're at the \"change list\" page for questions. "
"This page displays all the questions in the database and lets you choose one "
"to change it. There's the \"What's up?\" question we created earlier:"
msgstr ""
"Нажмите \"Questions\". Вы попали на страницу  \"списка объектов\" для "
"голосований. Эта страница содержит все объекты из базы данных и позволяет "
"выбрать один из них для редактирования. Мы видим голосование \"What's up?\", "
"которое создали в первой части учебника:"

# 1237861888334bbaa243a6fdd85c24d1
#: ../../intro/tutorial02.txt:700
msgid "Click the \"What's up?\" question to edit it:"
msgstr "Нажмите \"What's up?\" чтобы отредактировать его:"

# 0b66c36417aa4878bc7f2f0370189692
#: ../../intro/tutorial02.txt:705
msgid "Things to note here:"
msgstr "Заметим:"

# ee3f114817964980832c274e87c1794c
#: ../../intro/tutorial02.txt:707
msgid "The form is automatically generated from the ``Question`` model."
msgstr "Поля формы формируются на основе описания модели ``Question``."

# 77f3a0b29f0a46019a4895e30ce3f162
#: ../../intro/tutorial02.txt:709
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""
"Для различных типов полей модели (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) используются соответствующие HTML поля. "
"Каждое поле знает как отобразить себя в интерфейсе администратора."

# ab12635e022949448fed52da8934d3d0
#: ../../intro/tutorial02.txt:714
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""
"К полям :class:`~django.db.models.DateTimeField` добавлен JavaScript виджет. "
"Для даты добавлена кнопка \"Сегодня\" и календарь, для времени добавлена "
"кнопка \"Сейчас\" и список распространенных значений."

# 5a4190ed5b4c48dcb14e241158719b23
#: ../../intro/tutorial02.txt:718
msgid "The bottom part of the page gives you a couple of options:"
msgstr "В нижней части страницы мы видим несколько кнопок:"

# a23eacdf08f64f46bedc1cf71c2fb9eb
#: ../../intro/tutorial02.txt:720
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr "Save -- сохранить изменения и вернуться на страницу списка объектов."

# d88f04ac66ad471ea9d361c433c003c8
#: ../../intro/tutorial02.txt:723
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""
"Save and continue editing -- сохранить изменения и снова загрузить страницу "
"редактирования текущего объекта."

# b4a26f892b82447da11d5595f0323a72
#: ../../intro/tutorial02.txt:726
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""
"Save and add another -- Сохранить изменения и перейти на страницу создания "
"нового объекта."

# 447c0e08683a4fdabb7a7c218325fe4a
#: ../../intro/tutorial02.txt:729
msgid "Delete -- Displays a delete confirmation page."
msgstr "Delete -- Показывает страницу подтверждения удаления."

# 1eb3551510194bba894050b509161e2d
#: ../../intro/tutorial02.txt:731
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the question in :doc:`Tutorial 1</intro/tutorial01>`, it probably means you "
"forgot to set the correct value for the :setting:`TIME_ZONE` setting. Change "
"it, reload the page and check that the correct value appears."
msgstr ""
"Если значение \"Date published\" не совпадает с временем создания объекта в :"
"doc:`Части 1</intro/tutorial01>` учебника, возможно, вы неверно определили "
"настройку :setting:`TIME_ZONE`. Измените ее и перезагрузите страницу."

# 7ca3dd6d8d0642bd89afce116e7b6439
#: ../../intro/tutorial02.txt:736
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""
"Измените \"Date published\", нажав \"Today\" и \"Now\". Затем нажмите \"Save "
"and continue editing.\" Теперь нажмите \"History\" в правом верхнем углу "
"страницы. Вы увидите все изменения объекта, сделанные через интерфейс "
"администратора, время изменений и пользователя, который их сделал:"

# 0aadffb0c497461987ef2b8789d9e918
#: ../../intro/tutorial02.txt:744
msgid ""
"When you're comfortable with the models API and have familiarized yourself "
"with the admin site, read :doc:`part 3 of this tutorial</intro/tutorial03>` "
"to learn about how to add more views to our polls app."
msgstr ""
"Если вы освоили интерфейс администратора, переходите к :doc:`третьей части "
"этого учебника </intro/tutorial03>`."

#~ msgid ""
#~ "Edit the :file:`mysite/settings.py` file again, and change the :setting:"
#~ "`INSTALLED_APPS` setting to include the string ``'polls.apps."
#~ "PollsConfig'``. It'll look like this:"
#~ msgstr ""
#~ "Отредактируйте файл :file:`mysite/settings.py` и измените настройку :"
#~ "setting:`INSTALLED_APPS` добавив строку ``'polls'``. В результате получим:"

# 48348df92a314b7db7eb4c19fabdbf9d
#~ msgid ""
#~ "Recall from Tutorial 1 that you start the development server like so:"
#~ msgstr "Напомним, что сервер для разработки запускается следующим образом:"

# f99fb87ee73e493ea070110db0f2dce3
#~ msgid "Doesn't match what you see?"
#~ msgstr "Не совпадает с тем, что вы видите?"

# 7863b0d61722464f9808c40a98e7e18a
#~ msgid ""
#~ "If at this point, instead of the above login page, you get an error page "
#~ "reporting something like::"
#~ msgstr "Если вместо страницы авторизации вы получили ошибку::"

# 80752a202cae40e4871223212bac4808
#~ msgid "Customize the admin form"
#~ msgstr "Настройка формы"

# e0ece02837fb4fa0ad06061dd1c689ed
#~ msgid ""
#~ "Take a few minutes to marvel at all the code you didn't have to write. By "
#~ "registering the ``Question`` model with ``admin.site."
#~ "register(Question)``, Django was able to construct a default form "
#~ "representation. Often, you'll want to customize how the admin form looks "
#~ "and works. You'll do this by telling Django the options you want when you "
#~ "register the object."
#~ msgstr ""
#~ "Потратим несколько минут, чтобы полюбоваться кодом, который нам не "
#~ "пришлось писать самостоятельно. После регистрации модели ``Question``, "
#~ "используя ``admin.site.register(Question)``, Django создал форму для "
#~ "модели. Скорее всего, вам захочется изменить ее. Вы можете это сделать, "
#~ "используя параметры при регистрации модели."

# 5b96f89a51224899bee68ac28f5b1935
#~ msgid ""
#~ "Let's see how this works by re-ordering the fields on the edit form. "
#~ "Replace the ``admin.site.register(Question)`` line with:"
#~ msgstr ""
#~ "Вот как это работает. Давайте поменяем порядок полей в форме. Замените "
#~ "``admin.site.register(Question)`` на:"

# bb6affb2248940a8b73192daa18b4d9a
#~ msgid ""
#~ "You'll follow this pattern -- create a model admin object, then pass it "
#~ "as the second argument to ``admin.site.register()`` -- any time you need "
#~ "to change the admin options for an object."
#~ msgstr ""
#~ "Создаем объект ``ModelAdmin`` и предаем его в ``admin.site.register()``."

# 0e5e8e342bfc4209b749648179533885
#~ msgid ""
#~ "This particular change above makes the \"Publication date\" come before "
#~ "the \"Question\" field:"
#~ msgstr ""
#~ "Теперь поле \"Publication date\" отображается перед полем \"Question\":"

# b418517b1dd44c5faaae97ec946010d1
#~ msgid ""
#~ "This isn't impressive with only two fields, but for admin forms with "
#~ "dozens of fields, choosing an intuitive order is an important usability "
#~ "detail."
#~ msgstr ""
#~ "Для нескольких полей это выглядит не очень внушительно, но при большом "
#~ "количестве полей порядок может значительно повысить удобство."

# 981db281c0f043e48268c5a8e2fa3137
#~ msgid ""
#~ "And speaking of forms with dozens of fields, you might want to split the "
#~ "form up into fieldsets:"
#~ msgstr ""
#~ "Для форм с большим количеством полей можно разбить форму на группу полей:"

# c6cae3b5c1364cf3ae0503f15b4ef3dc
#~ msgid ""
#~ "The first element of each tuple in :attr:`~django.contrib.admin."
#~ "ModelAdmin.fieldsets` is the title of the fieldset. Here's what our form "
#~ "looks like now:"
#~ msgstr ""
#~ "Первый элемент кортежа в :attr:`~django.contrib.admin.ModelAdmin."
#~ "fieldsets` -- название группы полей. Вот как будет выглядеть наша форма:"

# 76405a45393746698a1c9c84995d62d2
#~ msgid ""
#~ "You can assign arbitrary HTML classes to each fieldset. Django provides a "
#~ "``\"collapse\"`` class that displays a particular fieldset initially "
#~ "collapsed. This is useful when you have a long form that contains a "
#~ "number of fields that aren't commonly used:"
#~ msgstr ""
#~ "Вы можете добавить HTML классы для каждой группы полей. Django "
#~ "предоставляет класс ``\"collapse\"``, который отображает группу полей "
#~ "изначально скрытой. Это полезно, если форма содержит поля, которые редко "
#~ "редактируются:"

# 54a9ebac1153441a8513d601e4d0543a
#~ msgid "Adding related objects"
#~ msgstr "Добавление связанных объектов"

# 3fd43d45e7704d7eac21d37b5989c548
#~ msgid ""
#~ "OK, we have our Question admin page. But a ``Question`` has multiple "
#~ "``Choices``, and the admin page doesn't display choices."
#~ msgstr ""
#~ "Отлично, теперь модель ``Question`` имеет свою собственную страницу в "
#~ "интерфейсе администратора. Но ``Question`` содержит несколько "
#~ "``Choices``, которые интерфейс администратора не отображает."

# 2f10a55c8dda45cba443b03bec56a955
#~ msgid "Yet."
#~ msgstr "Пока что."

# d74c025bacdc49c6a3a2f17cab22cfa8
#~ msgid ""
#~ "There are two ways to solve this problem. The first is to register "
#~ "``Choice`` with the admin just as we did with ``Question``. That's easy:"
#~ msgstr ""
#~ "Есть два способа это сделать. Первый - зарегистрировать модель ``Choice`` "
#~ "в интерфейсе администратора, так же как и ``Question``. Это просто:"

# b41860db54b145d9b59f6baa3040dcd3
#~ msgid ""
#~ "Now \"Choices\" is an available option in the Django admin. The \"Add "
#~ "choice\" form looks like this:"
#~ msgstr ""
#~ "Теперь \"Choices\" отображается в интерфейсе администратора. Форма "
#~ "добавления варианта ответа выглядит следующим образом:"

# 132f040a78464f61bbad333bf3664bad
#~ msgid ""
#~ "In that form, the \"Question\" field is a select box containing every "
#~ "question in the database. Django knows that a :class:`~django.db.models."
#~ "ForeignKey` should be represented in the admin as a ``<select>`` box. In "
#~ "our case, only one question exists at this point."
#~ msgstr ""
#~ "В этой форме поле \"Question\" представлено ``<select>`` с объектами "
#~ "``Question`` из базы данных. Django знает, что поле :class:`~django.db."
#~ "models.ForeignKey` должно быть представлено как ``<select>``. В нашем "
#~ "случае можно выбрать только один вопрос."

# d7dee04e8e464d9193d3093348a94076
#~ msgid ""
#~ "Also note the \"Add Another\" link next to \"Question.\" Every object "
#~ "with a ``ForeignKey`` relationship to another gets this for free. When "
#~ "you click \"Add Another,\" you'll get a popup window with the \"Add "
#~ "question\" form. If you add a question in that window and click \"Save,\" "
#~ "Django will save the question to the database and dynamically add it as "
#~ "the selected choice on the \"Add choice\" form you're looking at."
#~ msgstr ""
#~ "Обратите внимание на ссылку \"Add Another\" возле поля \"Question.\" Он "
#~ "будет добавлен для каждого поля ``ForeignKey``. При нажатии на \"Add "
#~ "Another,\" будет показано всплывающее окно с формой добавления вопроса. "
#~ "Если вы добавите вопрос и нажмете \"Save,\" Django сохранит объект в базу "
#~ "данных и выберет его в поле."

# 7a04001c896146cf909daa925f508d1f
#~ msgid ""
#~ "But, really, this is an inefficient way of adding ``Choice`` objects to "
#~ "the system. It'd be better if you could add a bunch of Choices directly "
#~ "when you create the ``Question`` object. Let's make that happen."
#~ msgstr ""
#~ "Но, на самом деле, это совсем не удобный способ добавлять варианты "
#~ "ответов для вопроса. Было бы удобнее добавлять варианты ответов пачками "
#~ "при создании объекта ``Question``. Давайте сделаем это."

# 5f222f52c64e4686884bbba892353bd3
#~ msgid ""
#~ "Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
#~ "``Question`` registration code to read:"
#~ msgstr ""
#~ "Уберите вызов ``register()`` для модели ``Choice``. И отредактируйте код "
#~ "для регистрации ``Question`` в интерфейсе администратора:"

# d78417ffc83b4ab49711e88415fe8643
#~ msgid ""
#~ "This tells Django: \"``Choice`` objects are edited on the ``Question`` "
#~ "admin page. By default, provide enough fields for 3 choices.\""
#~ msgstr ""
#~ "Это говорит Django: \"Варианты ответов редактируются на странице вопроса. "
#~ "По умолчанию, покажите 3 формы для добавления вариантов ответа.\""

# 13060f9dd52840f980e2eab933b6ae3a
#~ msgid "Load the \"Add question\" page to see how that looks:"
#~ msgstr "Загрузите страницу  \"Add question\" и посмотрите как она выглядит:"

# 2b8d1eb40e304d96907d02aebfca6fa1
#~ msgid ""
#~ "It works like this: There are three slots for related Choices -- as "
#~ "specified by ``extra`` -- and each time you come back to the \"Change\" "
#~ "page for an already-created object, you get another three extra slots."
#~ msgstr ""
#~ "Это работает следующим образом: Есть три формы для добавления вариантов "
#~ "ответа -- как определяет параметр ``extra`` -- и при каждой загрузке этой "
#~ "страницы будет три формы для добавления новых вариантов ответа."

# 31ddd2df10f54822afc052015cd9f9b6
#~ msgid ""
#~ "At the end of the three current slots you will find an \"Add another "
#~ "Choice\" link.  If you click on it, a new slot will be added. If you want "
#~ "to remove the added slot, you can click on the X to the top right of the "
#~ "added slot. Note that you can't remove the original three slots. This "
#~ "image shows an added slot:"
#~ msgstr ""
#~ "В конце формы вы увидите  ссылку \"Add another Choice\".  Кликните и "
#~ "добавится новая форма. Чтобы удалить форму, нажмите на X. Заметим, что вы "
#~ "не можете удалить формы для существующих записей. Следующий рисунок "
#~ "показывает добавленные формы:"

# 11a1718511a243df9a9e187a392fa142
#~ msgid ""
#~ "One small problem, though. It takes a lot of screen space to display all "
#~ "the fields for entering related ``Choice`` objects. For that reason, "
#~ "Django offers a tabular way of displaying inline related objects; you "
#~ "just need to change the ``ChoiceInline`` declaration to read:"
#~ msgstr ""
#~ "Однако есть одна проблема. Эти формы занимают много места. Для таких "
#~ "случаев, Django предлагает вариант отображения табами, переопределите "
#~ "``ChoiceInline`` следующим образом:"

# ff31e79ce1cc4ae98aeac40371e13bd8
#~ msgid ""
#~ "With that ``TabularInline`` (instead of ``StackedInline``), the related "
#~ "objects are displayed in a more compact, table-based format:"
#~ msgstr ""
#~ "С ``TabularInline`` (вместо ``StackedInline``), формы для связанных "
#~ "объектов отображаются в более компактном табличном виде:"

# a5043804180946599fbac0845623c096
#~ msgid ""
#~ "Note that there is an extra \"Delete?\" column that allows removing rows "
#~ "added using the \"Add Another Choice\" button and rows that have already "
#~ "been saved."
#~ msgstr ""
#~ "Обратите внимание на дополнительную колонку  \"Delete?\", которая "
#~ "позволяет удалить только что добавленные и существующие записи."

# fe0840dfd6974b8398bf9d41d3b07349
#~ msgid "Customize the admin change list"
#~ msgstr "Настройка страницы списка объектов"

# bbd13b3a8ebc4872ab251693ca4f39cf
#~ msgid ""
#~ "Now that the Question admin page is looking good, let's make some tweaks "
#~ "to the \"change list\" page -- the one that displays all the questions in "
#~ "the system."
#~ msgstr ""
#~ "Теперь, когда страница добавления/редактирования вопроса выглядит хорошо, "
#~ "давай улучшим страницу отображения списка вопросов."

# 3cb2967475ca44669088584fd34362bf
#~ msgid "Here's what it looks like at this point:"
#~ msgstr "Вот как она выглядит сейчас:"

# c6b6b8d7536f455b9700483586dd7564
#~ msgid ""
#~ "By default, Django displays the ``str()`` of each object. But sometimes "
#~ "it'd be more helpful if we could display individual fields. To do that, "
#~ "use the :attr:`~django.contrib.admin.ModelAdmin.list_display` admin "
#~ "option, which is a tuple of field names to display, as columns, on the "
#~ "change list page for the object:"
#~ msgstr ""
#~ "По умолчанию Django отображает результат выполнения ``str()`` для каждого "
#~ "объекта. Но чаще всего хочется показывать список полей. Для этого "
#~ "используйте параметр :attr:`~django.contrib.admin.ModelAdmin."
#~ "list_display`, который является кортежем состоящим из названий полей "
#~ "модели:"

# 2bc360aa5a864912a986974c7d7aec7e
#~ msgid ""
#~ "Just for good measure, let's also include the ``was_published_recently`` "
#~ "custom method from Tutorial 1:"
#~ msgstr ""
#~ "Для примера давайте еще и добавим метод ``was_published_recently`` из "
#~ "Части 1 учебника:"

# cf8a680befd14405a87ea4a829c29300
#~ msgid "Now the question change list page looks like this:"
#~ msgstr "Теперь страница списка вопросов выглядит следующим образом:"

# 01a04c5ac2c7400281f4b1f0e3daa57d
#~ msgid ""
#~ "You can click on the column headers to sort by those values -- except in "
#~ "the case of the ``was_published_recently`` header, because sorting by the "
#~ "output of an arbitrary method is not supported. Also note that the column "
#~ "header for ``was_published_recently`` is, by default, the name of the "
#~ "method (with underscores replaced with spaces), and that each line "
#~ "contains the string representation of the output."
#~ msgstr ""
#~ "Вы можете нажать на заголовок колонки чтобы отсортировать записи по полю "
#~ "-- но не для ``was_published_recently``, так как сортировка по методу не "
#~ "поддерживается. Название колонки для ``was_published_recently`` по "
#~ "умолчанию равно названию метода (нижние подчеркивание заменяется на "
#~ "пробелы), а значение равно строковому представлению результата выполнения "
#~ "метода."

# fed44405ef294b16b5dd0a0b4ac793f6
#~ msgid ""
#~ "You can improve that by giving that method (in :file:`polls/models.py`) a "
#~ "few attributes, as follows:"
#~ msgstr ""
#~ "Вы можете исправить это, добавив несколько атрибутов (в :file:`polls/"
#~ "models.py`) этому методу:"

#~ msgid ""
#~ "For more information on these method properties, see :attr:`~django."
#~ "contrib.admin.ModelAdmin.list_display`."
#~ msgstr ""
#~ "Список всех доступных атрибутов можно найти в описании :attr:`~django."
#~ "contrib.admin.ModelAdmin.list_display`."

# 267b45b9cd084cec80a9cce9f3473d13
#~ msgid ""
#~ "Edit your :file:`polls/admin.py` file again and add an improvement to the "
#~ "``Question`` change list page: filters using the :attr:`~django.contrib."
#~ "admin.ModelAdmin.list_filter`. Add the following line to "
#~ "``QuestionAdmin``::"
#~ msgstr ""
#~ "Отредактируем файл :file:`polls/admin.py` снова и добавим на страницу "
#~ "списка вопросов Фильтры, используя :attr:`~django.contrib.admin."
#~ "ModelAdmin.list_filter`. Добавьте следующую строку в ``QuestionAdmin``::"

# b9401dc5188249739f27766ccf180e7d
#~ msgid ""
#~ "That adds a \"Filter\" sidebar that lets people filter the change list by "
#~ "the ``pub_date`` field:"
#~ msgstr "Это добавляет \"Фильтр\" по полю ``pub_date`` в боковой панели:"

# 8892439b8c734ab6b007f985adc58717
#~ msgid ""
#~ "The type of filter displayed depends on the type of field you're "
#~ "filtering on. Because ``pub_date`` is a :class:`~django.db.models."
#~ "DateTimeField`, Django knows to give appropriate filter options: \"Any "
#~ "date,\" \"Today,\" \"Past 7 days,\" \"This month,\" \"This year.\""
#~ msgstr ""
#~ "Тип фильтра зависит от типа поля. Так как ``pub_date`` является :class:"
#~ "`~django.db.models.DateTimeField`, Django отображает соответствующие "
#~ "варианты для фильтрации: \"Any date,\" \"Today,\" \"Past 7 days,\" \"This "
#~ "month,\" \"This year.\""

# dc585c8402e24679bf5dbfaabe588891
#~ msgid "This is shaping up well. Let's add some search capability::"
#~ msgstr "Теперь добавим поиск::"

# 2d8508e7c9654ee7bbe2e1b1714f6051
#~ msgid ""
#~ "That adds a search box at the top of the change list. When somebody "
#~ "enters search terms, Django will search the ``question_text`` field. You "
#~ "can use as many fields as you'd like -- although because it uses a "
#~ "``LIKE`` query behind the scenes, limiting the number of search fields to "
#~ "a reasonable number will make it easier for your database to do the "
#~ "search."
#~ msgstr ""
#~ "Это добавляет поле для поиска в верхней части страницы. При вводе "
#~ "запроса, Django будет искать по полю ``question_text``. Вы можете "
#~ "использовать любое количество полей -- учтите что используется запрос "
#~ "``LIKE``, так что постарайтесь не перегрузить вашу базу данных."

# 201153f402024039a5ca6c6243217882
#~ msgid ""
#~ "Now's also a good time to note that change lists give you free "
#~ "pagination. The default is to display 100 items per page. :attr:`Change "
#~ "list pagination <django.contrib.admin.ModelAdmin.list_per_page>`, :attr:"
#~ "`search boxes <django.contrib.admin.ModelAdmin.search_fields>`, :attr:"
#~ "`filters <django.contrib.admin.ModelAdmin.list_filter>`, :attr:`date-"
#~ "hierarchies <django.contrib.admin.ModelAdmin.date_hierarchy>`, and :attr:"
#~ "`column-header-ordering <django.contrib.admin.ModelAdmin.list_display>` "
#~ "all work together like you think they should."
#~ msgstr ""
#~ "Страница списка объектов также содержит постраничное отображение. По "
#~ "умолчанию отображается 100 объектов на страницу. :attr:`Поменять "
#~ "количество объектов на одной странице <django.contrib.admin.ModelAdmin."
#~ "list_per_page>`, :attr:`поля для поиска <django.contrib.admin.ModelAdmin."
#~ "search_fields>`, :attr:`фильтры <django.contrib.admin.ModelAdmin."
#~ "list_filter>`, :attr:`добавить иерархию по дате <django.contrib.admin."
#~ "ModelAdmin.date_hierarchy>` и :attr:`отображаемые поля <django.contrib."
#~ "admin.ModelAdmin.list_display>` - все это возможно."

# 7363520b04114fd390f274dfbbbdebf6
#~ msgid "Customize the admin look and feel"
#~ msgstr "Настраиваем внешний вид"

# efb5d17f97174e3aaf97afc8db9e58dd
#~ msgid ""
#~ "Clearly, having \"Django administration\" at the top of each admin page "
#~ "is ridiculous. It's just placeholder text."
#~ msgstr ""
#~ "\"Django administration\" в \"шапке\" страницы выглядит нелепо. Это "
#~ "просто замещающий текст."

# 352de987ce924829ae446bf5454405bf
#~ msgid ""
#~ "That's easy to change, though, using Django's template system. The Django "
#~ "admin is powered by Django itself, and its interfaces use Django's own "
#~ "template system."
#~ msgstr ""
#~ "Его очень легко заменить, используя систему шаблонов Django. Интерфейс "
#~ "администратора работает благодаря Django и использует систему шаблонов "
#~ "Django."

# b3a78c2d51634e9ab36341c8697511ce
#~ msgid "Customizing your *project's* templates"
#~ msgstr "Переопределение шаблонов *проекта*"

# ffd0fc7e1d514d44860f4fc559c70cb3
#~ msgid ""
#~ "Create a ``templates`` directory in your project directory (the one that "
#~ "contains ``manage.py``). Templates can live anywhere on your filesystem "
#~ "that Django can access. (Django runs as whatever user your server runs.) "
#~ "However, keeping your templates within the project is a good convention "
#~ "to follow."
#~ msgstr ""
#~ "Создайте каталог ``templates`` в каталоге проекта (который содержит "
#~ "``manage.py``). Шаблоны могут располагаться где угодно, главное чтобы "
#~ "Django имел доступ к ним. (Django запускается под пользователем, под "
#~ "которым запущен сервер.) Но мы советуем располагать шаблоны внутри "
#~ "проекта."

# 1a36d4c948874715b88ef74c180758aa
#~ msgid ""
#~ "Open your settings file (:file:`mysite/settings.py`, remember) and add a :"
#~ "setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` "
#~ "setting:"
#~ msgstr ""
#~ "Откройте файл настроек (напомним это :file:`mysite/settings.py`) и "
#~ "найдите опцию :setting:`DIRS <TEMPLATES-DIRS>` в настройке :setting:"
#~ "`TEMPLATES`:"

# 1a36d4c948874715b88ef74c180758aa
#~ msgid ""
#~ ":setting:`DIRS <TEMPLATES-DIRS>` is a list of filesystem directories to "
#~ "check when loading Django templates; it's a search path."
#~ msgstr ""
#~ ":setting:`DIRS <TEMPLATES-DIRS>` -- это список путей к каталогам, который "
#~ "указывает, где Django будет искать шаблоны."

# f78d9c4e64c44d7dbe87c6566c2a0dc3
#~ msgid ""
#~ "Now create a directory called ``admin`` inside ``templates``, and copy "
#~ "the template ``admin/base_site.html`` from within the default Django "
#~ "admin template directory in the source code of Django itself (``django/"
#~ "contrib/admin/templates``) into that directory."
#~ msgstr ""
#~ "Теперь создайте каталог ``admin`` в каталоге ``templates``, и скопируйте "
#~ "шаблон ``admin/base_site.html`` из встроенных шаблонов в исходниках "
#~ "Django (``django/contrib/admin/templates``) в этот каталог."

# d887e1db080f45639ba1d138025af7a0
#~ msgid "Where are the Django source files?"
#~ msgstr "Где лежит исходный код Django?"

# 84b172ca9fb7485db963b175b5980968
#~ msgid ""
#~ "If you have difficulty finding where the Django source files are located "
#~ "on your system, run the following command:"
#~ msgstr ""
#~ "Если вы не знаете где лежат исходники Django, выполните следующую команду:"

#~ msgid ""
#~ "Then, just edit the file and replace ``{{ site_header|default:_('Django "
#~ "administration') }}`` (including the curly braces) with your own site's "
#~ "name as you see fit. You should end up with a section of code like:"
#~ msgstr ""
#~ "Затем просто отредактируйте файл и замените ``{{ site_header|default:"
#~ "_('Django administration') }}`` (включая фигурные скобки) на название "
#~ "вашего сайта. Должно получиться наподобие:"

# af610c99dee742dfb482d8d08801177d
#~ msgid ""
#~ "We use this approach to teach you how to override templates. In an actual "
#~ "project, you would probably use the :attr:`django.contrib.admin.AdminSite."
#~ "site_header` attribute to more easily make this particular customization."
#~ msgstr ""
#~ "Мы использовали такой подход, чтобы научить переопределять шаблоны. При "
#~ "разработке проекта для этого обычно используют атрибут :attr:`django."
#~ "contrib.admin.AdminSite.site_header`."

# 5feb2de7940e41a7b83a9cd9f05da5f5
#~ msgid ""
#~ "This template file contains lots of text like ``{% block branding %}`` "
#~ "and ``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's "
#~ "template language. When Django renders ``admin/base_site.html``, this "
#~ "template language will be evaluated to produce the final HTML page. Don't "
#~ "worry if you can't make any sense of the template right now -- we'll "
#~ "delve into Django's templating language in Tutorial 3."
#~ msgstr ""
#~ "Этот шаблон содержит текст подобный ``{% block branding %}`` и "
#~ "``{{ title }}``. Теги ``{%`` и ``{{`` -- это части синтаксиса системы "
#~ "шаблонов Django. При выполнении шаблона ``admin/base_site.html`` Django "
#~ "создаст HTML страницу. Не волнуйтесь если ничего не понимаете в этом -- в "
#~ "шаблонах Django мы разберемся в Части 3."

# 72cf7a56b85e4f08a18a8e39a3b50e9a
#~ msgid ""
#~ "Note that any of Django's default admin templates can be overridden. To "
#~ "override a template, just do the same thing you did with ``base_site."
#~ "html`` -- copy it from the default directory into your custom directory, "
#~ "and make changes."
#~ msgstr ""
#~ "Любой шаблон интерфейса администратора можно переопределить. Чтобы "
#~ "переопределить шаблон, сделайте тоже что и с ``base_site.html`` -- "
#~ "скопируйте его в каталог с шаблонами проекта и внесите изменения."

# 9e8e98d01c8f40d2ab3b248bd243f734
#~ msgid "Customizing your *application's* templates"
#~ msgstr "Настройка шаблонов *приложения*"

# 5af4c4f427c140218405e8069e51c558
#~ msgid ""
#~ "Astute readers will ask: But if :setting:`DIRS <TEMPLATES-DIRS>` was "
#~ "empty by default, how was Django finding the default admin templates? The "
#~ "answer is that, since :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is set to "
#~ "``True``, Django automatically looks for a ``templates/`` subdirectory "
#~ "within each application package, for use as a fallback (don't forget that "
#~ "``django.contrib.admin`` is an application)."
#~ msgstr ""
#~ "Внимательные читатели спросят: если :setting:`DIRS <TEMPLATES-DIRS>` "
#~ "пустая по умолчанию, как Django находит шаблоны интерфейса администратора "
#~ "по умолчанию? Т.к. :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` по умолчанию "
#~ "``True``, Django пытается найти шаблон в подкаталоге ``templates/`` "
#~ "каждого приложении, если шаблон не найден другим способом (не забываем, "
#~ "что ``django.contrib.admin`` -- это приложение)."

# 7430c2aa6649410388a23d93a55daaeb
#~ msgid ""
#~ "Our poll application is not very complex and doesn't need custom admin "
#~ "templates. But if it grew more sophisticated and required modification of "
#~ "Django's standard admin templates for some of its functionality, it would "
#~ "be more sensible to modify the *application's* templates, rather than "
#~ "those in the *project*. That way, you could include the polls application "
#~ "in any new project and be assured that it would find the custom templates "
#~ "it needed."
#~ msgstr ""
#~ "Наше приложение простое и не требует переопределения шаблонов. Но если "
#~ "оно станет большим и сложным, и нам понадобится изменить его шаблоны, "
#~ "логичнее изменить шаблоны для *приложения*, а не для *проекта*. В таком "
#~ "случае вы сможете добавить приложения для голосования в любой проект и "
#~ "переопределенные шаблоны будут работать."

# c421363e1155430f86e8777139495a85
#~ msgid ""
#~ "See the :ref:`template loading documentation <template-loading>` for more "
#~ "information about how Django finds its templates."
#~ msgstr ""
#~ "Смотрите :ref:`раздел о загрузке шаблонов <template-loading>`, чтобы "
#~ "узнать, как Django ищет шаблоны."

# e56cb4a95bf840b6b695449ea3588fcb
#~ msgid "Customize the admin index page"
#~ msgstr "Настроим главную страницу"

# 2bc787d295f0415a905b8a543d175fe5
#~ msgid ""
#~ "On a similar note, you might want to customize the look and feel of the "
#~ "Django admin index page."
#~ msgstr ""
#~ "Возможно, вам понадобится настроить главную страницу интерфейса "
#~ "администратора."

# 0ea5203c05ce4ed69c16e6a5baba7a80
#~ msgid ""
#~ "By default, it displays all the apps in :setting:`INSTALLED_APPS` that "
#~ "have been registered with the admin application, in alphabetical order. "
#~ "You may want to make significant changes to the layout. After all, the "
#~ "index is probably the most important page of the admin, and it should be "
#~ "easy to use."
#~ msgstr ""
#~ "По умолчанию она показывает все приложения в алфавитном порядке из "
#~ "настройки :setting:`INSTALLED_APPS`, которые зарегистрированы в "
#~ "интерфейсе администратора. Главная страница очень важна и должна быть "
#~ "удобной."

# b2ccca41b28648b7a5d1d21e465a33ab
#~ msgid ""
#~ "The template to customize is ``admin/index.html``. (Do the same as with "
#~ "``admin/base_site.html`` in the previous section -- copy it from the "
#~ "default directory to your custom template directory.) Edit the file, and "
#~ "you'll see it uses a template variable called ``app_list``. That variable "
#~ "contains every installed Django app. Instead of using that, you can hard-"
#~ "code links to object-specific admin pages in whatever way you think is "
#~ "best. Again, don't worry if you can't understand the template language -- "
#~ "we'll cover that in more detail in Tutorial 3."
#~ msgstr ""
#~ "Для главной страницы используется шаблон ``admin/index.html``. (Сделайте "
#~ "тоже что и с шаблоном ``admin/base_site.html`` из раздела выше -- "
#~ "скопируйте его из приложения Django в каталог шаблонов проекта.) Откройте "
#~ "файл и вы увидите использование переменной ``app_list``. Эта переменная "
#~ "содержит все отображаемые приложения. Вместо нее вы можете явно указать "
#~ "ссылки на нужные страницы. Опять же, не волнуйтесь что вы ничего не "
#~ "понимаете, шаблоны будут обсуждаться в Части 3."

# 7f94c607c39c4c2ab1a41fbf3f711f43
#~ msgid ""
#~ "Now, try logging in. You created a superuser account in the first part of "
#~ "this tutorial, remember?  If you didn't create one or forgot the password "
#~ "you can :ref:`create another one <topics-auth-creating-superusers>`."
#~ msgstr ""
#~ "Теперь авторизируемся. Вы создали суперпользователя в первой части "
#~ "учебника, помните?  Если вы этого не сделали или забыли пароль, :ref:"
#~ "`создайте еще одного <topics-auth-creating-superusers>`."

# e56cb4a95bf840b6b695449ea3588fcb
#~ msgid "You should see the Django admin index page:"
#~ msgstr "Настроим главную страницу интерфейса администратора:"

# 0e8ec75d343140ae87a7ea9062450e72
#~ msgid ""
#~ "Then, just edit the file and replace the generic Django text with your "
#~ "own site's name as you see fit."
#~ msgstr ""
#~ "Отредактируйте файл и замените текст по умолчанию на название вашего "
#~ "сайта."

# 2f91c1b5464d44d0ad4a31cb5e61f586
#~ msgid "Activate the admin site"
#~ msgstr "Активируем интерфейс администратора"

# ddbfb4efb6fe42298c6ff98e289afb4e
#~ msgid ""
#~ "The Django admin site is not activated by default -- it's an opt-in "
#~ "thing. To activate the admin site for your installation, do these three "
#~ "things:"
#~ msgstr ""
#~ "Интерфейс администратора  не активирован по умолчанию. Что бы "
#~ "активировать его, выполните следующее:"

# acf7acb99bde4d7a91f0bb29bad39706
#~ msgid ""
#~ "Uncomment ``\"django.contrib.admin\"`` in the :setting:`INSTALLED_APPS` "
#~ "setting."
#~ msgstr ""
#~ "Раскомментируйте ``\"django.contrib.admin\"`` в настройке :setting:"
#~ "`INSTALLED_APPS`."

# 8917cd8c12cc4c44b9bd5d8349745f13
#~ msgid ""
#~ "Run ``python manage.py syncdb``. Since you have added a new application "
#~ "to :setting:`INSTALLED_APPS`, the database tables need to be updated."
#~ msgstr ""
#~ "Запустите ``python manage.py syncdb``. Так как вы добавили новое "
#~ "приложение в :setting:`INSTALLED_APPS`, необходимо обновить базу данных."

# 118b943585e647f4871d69ca92db7931
#~ msgid ""
#~ "Edit your ``mysite/urls.py`` file and uncomment the lines that reference "
#~ "the admin -- there are three lines in total to uncomment. This file is a "
#~ "URLconf; we'll dig into URLconfs in the next tutorial. For now, all you "
#~ "need to know is that it maps URL roots to applications. In the end, you "
#~ "should have a ``urls.py`` file that looks like this:"
#~ msgstr ""
#~ "Отредактируйте ``mysite/urls.py`` и раскомментируйте строки, которые "
#~ "относятся к интерфейсу администратора -- должно быть всего три строки. "
#~ "Этот файл является  конфигурацией URL-ов, о которой мы узнаем в следующем "
#~ "разделе. Сейчас же знайте что в нем определяется соответствие URL-ов с "
#~ "приложениями. Вы должны получить следующий ``urls.py``:"

# a51c893a8a7c4a2ebece29fd2785933e
#~ msgid "(The bold lines are the ones that needed to be uncommented.)"
#~ msgstr "(Вам необходимо раскомментировать строки выделенные жирным.)"

# 33a9c124168841859cce5730dfc3e2bf
#~ msgid ""
#~ "You'll need to restart the development server to see your changes. "
#~ "Normally, the server auto-reloads code every time you modify a file, but "
#~ "the action of creating a new file doesn't trigger the auto-reloading "
#~ "logic."
#~ msgstr ""
#~ "Вам необходимо перезапустить сервер, чтобы увидеть изменения Обычно "
#~ "сервер автоматом перегружается при изменении кода, но это не работает при "
#~ "создании нового файла."

# 9979a325b46a465abd47771ee9e48fff
#~ msgid ""
#~ "Finally, because ``Poll`` objects have dates, it'd be convenient to be "
#~ "able to drill down by date. Add this line::"
#~ msgstr ""
#~ "И наконец, так как объекты ``Poll`` содержат поле даты, было бы удобно "
#~ "просматривать записи по дням, месяцам и тд. Добавьте следующую строку::"

# c7df833c80844f4d8dbaddd659609202
#~ msgid ""
#~ "That adds hierarchical navigation, by date, to the top of the change list "
#~ "page. At top level, it displays all available years. Then it drills down "
#~ "to months and, ultimately, days."
#~ msgstr ""
#~ "Это добавит иерархическую навигацию по дате в верхнюю часть страницы. Она "
#~ "содержит доступные года, месяца и дни."

# 83977485e63942bc9d0a4b964365a56f
#~ msgid ""
#~ "Now copy the template ``admin/base_site.html`` from within the default "
#~ "Django admin template directory in the source code of Django itself "
#~ "(``django/contrib/admin/templates``) into an ``admin`` subdirectory of "
#~ "whichever directory you're using in :setting:`TEMPLATE_DIRS`. For "
#~ "example, if your :setting:`TEMPLATE_DIRS` includes ``'/path/to/mysite/"
#~ "templates'``, as above, then copy ``django/contrib/admin/templates/admin/"
#~ "base_site.html`` to ``/path/to/mysite/templates/admin/base_site.html``. "
#~ "Don't forget that ``admin`` subdirectory."
#~ msgstr ""
#~ "Теперь скопируем шаблон ``admin/base_site.html`` из каталога с шаблонами "
#~ "интерфейса администратора в исходниках Django (``django/contrib/admin/"
#~ "templates``) в подкаталог ``admin`` в любой из каталогов из :setting:"
#~ "`TEMPLATE_DIRS`. Например, если :setting:`TEMPLATE_DIRS` содержит ``'/"
#~ "path/to/mysite/templates'``, тогда скопируйте ``django/contrib/admin/"
#~ "templates/admin/base_site.html`` в ``/path/to/mysite/templates/admin/"
#~ "base_site.html``. Обратите внимание на подкаталог ``admin``."

# 1060b904d19c4553b7c0066de66000f2
#~ msgid ""
#~ "By default, :setting:`TEMPLATE_DIRS` is empty. So, let's add a line to "
#~ "it, to tell Django where our templates live::"
#~ msgstr ""
#~ "По умолчанию :setting:`TEMPLATE_DIRS` ничего не содержит. Укажем "
#~ "расположение наших шаблонов::"
