# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2015, 2016, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-16 11:56+0200\n"
"PO-Revision-Date: 2017-11-17 17:42+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

#: ../../intro/tutorial07.txt:3
msgid "Writing your first Django app, part 7"
msgstr "Создаем первое приложение на Django, часть 7"

#: ../../intro/tutorial07.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` left off. "
"We're continuing the Web-poll application and will focus on customizing "
"Django's automatically-generated admin site that we first explored in :doc:"
"`Tutorial 2 </intro/tutorial02>`."
msgstr ""
"Продолжаем начатое в :doc:`шестой части </intro/tutorial06>`. Мы создали "
"протестированное веб приложение для опросов и теперь нам необходимо добавить "
"интерфейс администратора, который мы изучали во :doc:`второй части </intro/"
"tutorial02>`."

#: ../../intro/tutorial07.txt:11
msgid "Customize the admin form"
msgstr "Настройка форм в админке"

#: ../../intro/tutorial07.txt:13
msgid ""
"By registering the ``Question`` model with ``admin.site."
"register(Question)``, Django was able to construct a default form "
"representation. Often, you'll want to customize how the admin form looks and "
"works. You'll do this by telling Django the options you want when you "
"register the object."
msgstr ""
"После регистрации модели ``Question`` с помощью ``admin.site."
"register(Question)`` Django автоматически построил форму, которая отображает "
"модель. Скорее всего вам понадобится настроить вид и работу этой формы. Это "
"можно сделать, указав различные опции при регистрации модели."

#: ../../intro/tutorial07.txt:18
msgid ""
"Let's see how this works by reordering the fields on the edit form. Replace "
"the ``admin.site.register(Question)`` line with:"
msgstr ""
"Давайте посмотрим как это работает, поменяв порядок полей в форме. Замените "
"``admin.site.register(Question)`` на:"

#: ../../intro/tutorial07.txt:34
msgid ""
"You'll follow this pattern -- create a model admin class, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for a model."
msgstr ""
"Если вам необходимо настроить интерфейс администратора для модели, создайте "
"``ModelAdmin``, затем передайте его в ``admin.site.register()``."

#: ../../intro/tutorial07.txt:38
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr "Пример выше переместит поле \"Publication date\" перед \"Question\":"

#: ../../intro/tutorial07.txt:44
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""
"Для простой формы это не так важно, но если форма содержит большое "
"количество полей, важно разместить их в удобном для пользователя порядке."

#: ../../intro/tutorial07.txt:47
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets:"
msgstr "Также удобно разбить большую форму на несколько наборов полей:"

#: ../../intro/tutorial07.txt:66
msgid ""
"The first element of each tuple in :attr:`~django.contrib.admin.ModelAdmin."
"fieldsets` is the title of the fieldset. Here's what our form looks like now:"
msgstr ""
"Первый элемент кортежа в :attr:`~django.contrib.admin.ModelAdmin.fieldsets` "
"-- это название набора полей. Вот как выглядит наша форма сейчас:"

#: ../../intro/tutorial07.txt:74
msgid "Adding related objects"
msgstr "Добавляем связанные объекты"

#: ../../intro/tutorial07.txt:76
msgid ""
"OK, we have our Question admin page, but a ``Question`` has multiple "
"``Choice``\\s, and the admin page doesn't display choices."
msgstr ""
"Теперь у нас есть страница вопросов в админке, но ``Question`` содержит "
"несколько ``Choice``, которые не показываются в админке."

#: ../../intro/tutorial07.txt:79
msgid "Yet."
msgstr "Пока что."

#: ../../intro/tutorial07.txt:81
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Question``. That's easy:"
msgstr ""
"Есть два способа решить эту проблему. Первый -- зарегистрировать ``Choice`` "
"в админке, как мы сделали это для ``Question``. Это просто:"

#: ../../intro/tutorial07.txt:93
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""
"Теперь \"Choices\" доступны в админке. Форма добавления выглядит следующим "
"образом:"

#: ../../intro/tutorial07.txt:99
msgid ""
"In that form, the \"Question\" field is a select box containing every "
"question in the database. Django knows that a :class:`~django.db.models."
"ForeignKey` should be represented in the admin as a ``<select>`` box. In our "
"case, only one question exists at this point."
msgstr ""
"В это форме поле \"Question\" представлено \"select\", который содержит все "
"вопросы в базе данных. Django знает, что полей :class:`~django.db.models."
"ForeignKey` должно быть представлено как ``<select>``. В нашем примере "
"присутствует только один вопрос в базе данных."

#: ../../intro/tutorial07.txt:104
msgid ""
"Also note the \"Add Another\" link next to \"Question.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another\", you'll get a popup window with the \"Add question\" form. "
"If you add a question in that window and click \"Save\", Django will save "
"the question to the database and dynamically add it as the selected choice "
"on the \"Add choice\" form you're looking at."
msgstr ""
"Также обратите внимание на кнопку \"Add Another\" возле \"Question.\" Для "
"каждой связи ``ForeignKey`` будет показана такая кнопка. После нажатия \"Add "
"Another\" будет показана форма добавления вопроса в новом окне. Если вы "
"добавите вопрос в этой форме и нажмете \"Save\", Django сохранит вопрос и "
"динамически добавит его в поле выбора вопроса."

#: ../../intro/tutorial07.txt:111
msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the ``Question`` object. Let's make that happen."
msgstr ""
"Но это не эффективный способ добавлять объекты ``Choice``. Было бы удобно "
"добавить варианты ответов при создании объекта ``Question``. Давайте сделаем "
"это."

#: ../../intro/tutorial07.txt:115
msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Question`` registration code to read:"
msgstr ""
"Удалите ``register()`` для модели ``Choice``. Теперь поменяйте код для "
"модели ``Question``:"

#: ../../intro/tutorial07.txt:140
msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Question`` admin "
"page. By default, provide enough fields for 3 choices.\""
msgstr ""
"Этот код говорит Django: \"Объекты ``Choice`` редактируются на странице "
"``Question``. По умолчанию показывай формы для трех ответов.\""

#: ../../intro/tutorial07.txt:143
msgid "Load the \"Add question\" page to see how that looks:"
msgstr "Давайте посмотрим на форму добавления вопроса:"

#: ../../intro/tutorial07.txt:148
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""
"Она работает следующим образом: есть три формы для добавления ответов -- как "
"это указано ``extra``. И на странице редактирования вопросов каждый раз "
"будет доступно три формы для добавления."

#: ../../intro/tutorial07.txt:152
msgid ""
"At the end of the three current slots you will find an \"Add another Choice"
"\" link.  If you click on it, a new slot will be added. If you want to "
"remove the added slot, you can click on the X to the top right of the added "
"slot. Note that you can't remove the original three slots. This image shows "
"an added slot:"
msgstr ""
"В конце вы можете увидеть кнопку \"Add another Choice\". Если вы нажмете на "
"неё, будет добавлена еще одна форма. Если вы хотите удалить форму, нажмите "
"\"X\" в правом верхнем углу появившейся формы. Обратите внимание, вы не "
"можете удалить начальные три формы. Это изображение показывает как выглядит "
"добавленная форма:"

#: ../../intro/tutorial07.txt:160
msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read:"
msgstr ""
"Одна маленькая проблема. Формы добавления ``Choice`` занимают очень много "
"места на экране. Но Django предоставляет возможность отображать их во "
"вкладках. Поменяйте определение ``ChoiceInline``:"

#: ../../intro/tutorial07.txt:171
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""
"С ``TabularInline`` (вместо ``StackedInline``) связанные объекты "
"отображаются в более компактом виде:"

#: ../../intro/tutorial07.txt:177
msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""
"Обратите внимание на колонку \"Delete?\", которая позволяет удалить как "
"только что добавленные формы, так и существующие объекты."

#: ../../intro/tutorial07.txt:181
msgid "Customize the admin change list"
msgstr "Настройка списка объектов"

#: ../../intro/tutorial07.txt:183
msgid ""
"Now that the Question admin page is looking good, let's make some tweaks to "
"the \"change list\" page -- the one that displays all the questions in the "
"system."
msgstr ""
"Теперь, когда страница добавления и редактирования вопроса выглядит хорошо, "
"мы может улучшить страницу списка вопросов."

#: ../../intro/tutorial07.txt:186
msgid "Here's what it looks like at this point:"
msgstr "Сейчас она выглядит следующим образом:"

#: ../../intro/tutorial07.txt:191
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the :"
"attr:`~django.contrib.admin.ModelAdmin.list_display` admin option, which is "
"a tuple of field names to display, as columns, on the change list page for "
"the object:"
msgstr ""
"По умолчанию Django показывает результат ``str()`` для каждого объекта. Но "
"было бы на много удобнее видеть отдельные поля. Для этого используйте "
"настройку :attr:`~django.contrib.admin.ModelAdmin.list_display`, которая "
"содержит кортеж полей, которые будут представлены отдельными колонками:"

#: ../../intro/tutorial07.txt:204
msgid ""
"Just for good measure, let's also include the ``was_published_recently()`` "
"method from :doc:`Tutorial 2 </intro/tutorial02>`:"
msgstr ""
"Также для удобства добавим метод ``was_published_recently()`` из :doc:"
"`второй части учебника </intro/tutorial02>`:"

#: ../../intro/tutorial07.txt:214
msgid "Now the question change list page looks like this:"
msgstr "Теперь страница списка вопросов выглядит следующим образом:"

#: ../../intro/tutorial07.txt:219
msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""
"Вы можете нажать на заголовок колонки, чтобы отсортировать записи, кроме "
"колонки ``was_published_recently``, т.к. сортировка по методу не "
"поддерживается. Также обратите внимание, что название колонки для "
"``was_published_recently`` по умолчанию содержит название метода (где "
"подчеркивание заменено на пробелы), а значения являются результатами "
"выполнения метода."

#: ../../intro/tutorial07.txt:226
msgid ""
"You can improve that by giving that method (in :file:`polls/models.py`) a "
"few attributes, as follows:"
msgstr ""
"Вы можете исправить это, указав несколько атрибутов для метода (в файле :"
"file:`polls/models.py`):"

#: ../../intro/tutorial07.txt:241
msgid ""
"For more information on these method properties, see :attr:`~django.contrib."
"admin.ModelAdmin.list_display`."
msgstr ""
"Подробнее об этих атрибутах можно узнать в описании :attr:`~django.contrib."
"admin.ModelAdmin.list_display`."

#: ../../intro/tutorial07.txt:244
msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"``Question`` change list page: filters using the :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`. Add the following line to ``QuestionAdmin``::"
msgstr ""
"Давайте снова отредактируем файл :file:`polls/admin.py` и улучшим страницу "
"списка объектов ``Question`: добавим фильтрацию, используя :attr:`~django."
"contrib.admin.ModelAdmin.list_filter`. Добавьте следующие строки в "
"``QuestionAdmin``::"

#: ../../intro/tutorial07.txt:251
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""
"Это добавило справа панель фильтрации, которая позволит фильтровать записи "
"по полю ``pub_date``:"

#: ../../intro/tutorial07.txt:257
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date\", \"Today\", "
"\"Past 7 days\", \"This month\", \"This year\"."
msgstr ""
"Вид фильтра зависит от типа поля, к которому он применяется. Так как "
"``pub_date`` представлено :class:`~django.db.models.DateTimeField`, Django "
"отображает подходящие опции для фильтрации: \"Any date\", \"Today\", \"Past "
"7 days\", \"This month\", \"This year\"."

#: ../../intro/tutorial07.txt:262
msgid "This is shaping up well. Let's add some search capability::"
msgstr "Теперь добавим возможность поиска по записям::"

#: ../../intro/tutorial07.txt:266
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question_text`` field. You can use as "
"many fields as you'd like -- although because it uses a ``LIKE`` query "
"behind the scenes, limiting the number of search fields to a reasonable "
"number will make it easier for your database to do the search."
msgstr ""
"Теперь в верхней части страницы появилось поле для поиска. При вводе запроса "
"в это поле Django выполнит поиск по полю ``question_text``. Вы можете "
"указать сколько угодно полей, но, учитывая что используется запрос ``LIKE``, "
"их количество должно быть разумным, чтобы запрос не выполнялся слишком долго."

#: ../../intro/tutorial07.txt:272
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. :attr:`Change list pagination "
"<django.contrib.admin.ModelAdmin.list_per_page>`, :attr:`search boxes "
"<django.contrib.admin.ModelAdmin.search_fields>`, :attr:`filters <django."
"contrib.admin.ModelAdmin.list_filter>`, :attr:`date-hierarchies <django."
"contrib.admin.ModelAdmin.date_hierarchy>`, and :attr:`column-header-ordering "
"<django.contrib.admin.ModelAdmin.list_display>` all work together like you "
"think they should."
msgstr ""
"Также страница списка объектов содержит постраничное отображение. По "
"умолчанию показывается 100 записей на страницу. Изменение :attr:"
"`постраничного отображения <django.contrib.admin.ModelAdmin."
"list_per_page>`, :attr:`поиска <django.contrib.admin.ModelAdmin."
"search_fields>`, :attr:`фильтров <django.contrib.admin.ModelAdmin."
"list_filter>`, :attr:`иерархия по дате <django.contrib.admin.ModelAdmin."
"date_hierarchy>` и :attr:`сортировка <django.contrib.admin.ModelAdmin."
"list_display>` отлично работают вместе."

#: ../../intro/tutorial07.txt:282
msgid "Customize the admin look and feel"
msgstr "Настройка внешнего вида интерфейса администратора"

#: ../../intro/tutorial07.txt:284
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""
"\"Django administration\" на каждой странице выглядит не очень "
"привлекательно. Это просто текст по умолчанию."

#: ../../intro/tutorial07.txt:287
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""
"Его легко поменять, используя систему шаблонов Django. Админка использует "
"стандартную систему шаблонов Django."

#: ../../intro/tutorial07.txt:294
msgid "Customizing your *project's* templates"
msgstr "Настройка шаблонов *проекта*"

#: ../../intro/tutorial07.txt:296
msgid ""
"Create a ``templates`` directory in your project directory (the one that "
"contains ``manage.py``). Templates can live anywhere on your filesystem that "
"Django can access. (Django runs as whatever user your server runs.) However, "
"keeping your templates within the project is a good convention to follow."
msgstr ""
"Создайте каталог ``templates`` в каталоге вашего проекта (это тот, который "
"содержит файл ``manage.py``). Шаблоны могут находиться где угодно в файловой "
"системе, пока у Django есть доступ к ним. (Django запускается от "
"пользователя, от которого запущен веб-сервер.) Одна, хранить шаблоны в "
"проекте удобно и является хорошей практикой."

#: ../../intro/tutorial07.txt:301
msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a :"
"setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:"
msgstr ""
"Откройте файл настроек (:file:`mysite/settings.py`) и добавьте опцию :"
"setting:`DIRS <TEMPLATES-DIRS>` в настройку :setting:`TEMPLATES`:"

#: ../../intro/tutorial07.txt:323
msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` is a list of filesystem directories to "
"check when loading Django templates; it's a search path."
msgstr ""
":setting:`DIRS <TEMPLATES-DIRS>` содержит список каталогов с шаблонами."

#: ../../intro/tutorial07.txt:326
msgid "Organizing templates"
msgstr "Организация шаблонов"

#: ../../intro/tutorial07.txt:328
msgid ""
"Just like the static files, we *could* have all our templates together, in "
"one big templates directory, and it would work perfectly well. However, "
"templates that belong to a particular application should be placed in that "
"application's template directory (e.g. ``polls/templates``) rather than the "
"project's (``templates``). We'll discuss in more detail in the :doc:"
"`reusable apps tutorial </intro/reusable-apps>` *why* we do this."
msgstr ""
"Как и в случае со статическими файлами, мы *можем* хранить все шаблоны "
"вместе в одном большом каталоге, и это может отлично работать. Однако, "
"шаблоны, которые относятся к определенному приложению, необходимо хранить в "
"каталоге шаблонов приложения (например ``polls/templates``), а не каталоге "
"шаблонов проекта (``templates``). Мы подробнее расскажем *зачем* это делать "
"в разделе о :doc:`о повторно применяемых приложениях </intro/reusable-apps>`."

#: ../../intro/tutorial07.txt:335
msgid ""
"Now create a directory called ``admin`` inside ``templates``, and copy the "
"template ``admin/base_site.html`` from within the default Django admin "
"template directory in the source code of Django itself (``django/contrib/"
"admin/templates``) into that directory."
msgstr ""
"Теперь создайте каталог ``admin`` внутри ``templates``, и скопируйте в этот "
"каталог шаблон ``admin/base_site.html`` из каталога шаблонов админки "
"непосредственно из исходного кода Django (``django/contrib/admin/"
"templates``)."

#: ../../intro/tutorial07.txt:340
msgid "Where are the Django source files?"
msgstr "Где найти исходный код Django?"

#: ../../intro/tutorial07.txt:342
msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""
"Если вы не можете найти исходный код Django, выполните следующую команду:"

#: ../../intro/tutorial07.txt:349
msgid ""
"Then, just edit the file and replace ``{{ site_header|default:_('Django "
"administration') }}`` (including the curly braces) with your own site's name "
"as you see fit. You should end up with a section of code like:"
msgstr ""
"Теперь отредактируйте файл и замените ``{{ site_header|default:_('Django "
"administration') }}`` (включая скобки) на название вашего сайта. Должно "
"получиться приблизительно следующее:"

#: ../../intro/tutorial07.txt:360
msgid ""
"We use this approach to teach you how to override templates. In an actual "
"project, you would probably use the :attr:`django.contrib.admin.AdminSite."
"site_header` attribute to more easily make this particular customization."
msgstr ""
"Мы использовали такой подход, чтобы показать как переопределять шаблоны. На "
"самом деле вы можете использовать атрибут :attr:`django.contrib.admin."
"AdminSite.site_header` для этого."

#: ../../intro/tutorial07.txt:365
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page, just like we saw "
"in :doc:`Tutorial 3 </intro/tutorial03>`."
msgstr ""
"Этот файл шаблонов содержит много текста вида ``{% block branding %}`` и "
"``{{ title }}``. ``{%`` и ``{{`` являются частью языка шаблонов Django. "
"Когда Django рэндерит ``admin/base_site.html``, язык шаблонов выполнится, "
"чтобы получить HTML страницы, как это было показано в :doc:`третьем разделе "
"</intro/tutorial03>`."

#: ../../intro/tutorial07.txt:371
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""
"Вы можете переопределить любой шаблон админки Django. Чтобы переопределить "
"шаблон, сделайте все то же, что и с шаблоном ``base_site.html`` -- "
"скопируйте шаблон в ваш каталог шаблонов и измените его."

#: ../../intro/tutorial07.txt:377
msgid "Customizing your *application's* templates"
msgstr "Настройка шаблонов вашего *приложения*"

#: ../../intro/tutorial07.txt:379
msgid ""
"Astute readers will ask: But if :setting:`DIRS <TEMPLATES-DIRS>` was empty "
"by default, how was Django finding the default admin templates? The answer "
"is that, since :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is set to ``True``, "
"Django automatically looks for a ``templates/`` subdirectory within each "
"application package, for use as a fallback (don't forget that ``django."
"contrib.admin`` is an application)."
msgstr ""
"Внимательные читатели спросят: если :setting:`DIRS <TEMPLATES-DIRS>` по "
"умолчанию ничего не содержит, как Django находит стандартные шаблоны "
"админки? Ответ следующий: так как :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"равен ``True``, Django автоматически ищет каталог ``templates/`` в каждом "
"приложении (не забываем, что ``django.contrib.admin`` является приложением)."

#: ../../intro/tutorial07.txt:386
msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be "
"more sensible to modify the *application's* templates, rather than those in "
"the *project*. That way, you could include the polls application in any new "
"project and be assured that it would find the custom templates it needed."
msgstr ""
"Наше приложение для опросов не сложное и не требует переопределения "
"шаблонов. Но если оно станет сложнее и потребует переопределения шаблонов "
"админки, лучше переопределять их для *приложения*, а не всего *проекта*. В "
"таком случае вы можете добавить приложение к любому проекту, и быть "
"уверенным, что будут использоваться модифицированные шаблоны."

#: ../../intro/tutorial07.txt:393
msgid ""
"See the :ref:`template loading documentation <template-loading>` for more "
"information about how Django finds its templates."
msgstr ""
"Смотрите раздел о :ref:`загрузке шаблонов <template-loading>`, чтобы узнать "
"как Django ищет шаблоны."

#: ../../intro/tutorial07.txt:397
msgid "Customize the admin index page"
msgstr "Настройка главной страницы интерфейса администратора"

#: ../../intro/tutorial07.txt:399
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr "Вам может понадобиться настроить главную страницу админки Django."

#: ../../intro/tutorial07.txt:402
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""
"По умолчанию она показывает в алфавитном порядке все приложения из :setting:"
"`INSTALLED_APPS`, которые были зарегистрированы в админке. Возможно вы "
"захотите поменять структуру страницы. В конце концов главная страница "
"является самой важной, и она должна быть удобна для использования."

#: ../../intro/tutorial07.txt:407
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory). Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best."
msgstr ""
"Необходимо переопределить шаблон ``admin/index.html``. (Как и для ``admin/"
"base_site.html``, скопируйте этот шаблон в свой проект). Откройте файл и вы "
"увидите, что там используется переменная ``app_list``. Она содержим все "
"установленные приложения. Вместо использования этой переменной, вы можете "
"\"захардкодить\" ссылки к страницам, если считаете, что так будет лучше."

#: ../../intro/tutorial07.txt:415
msgid "What's next?"
msgstr "Что дальше?"

#: ../../intro/tutorial07.txt:417
msgid ""
"The beginner tutorial ends here. In the meantime, you might want to check "
"out some pointers on :doc:`where to go from here </intro/whatsnext>`."
msgstr ""
"На этом учебник для новичков окончен. Вам следует обратить внимание на "
"раздел :doc:`Куда двигаться далее </intro/whatsnext>`."

#: ../../intro/tutorial07.txt:420
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""
"Если вы знакомы с пакетами Python и хотите сделать \"независимое приложение"
"\", изучите раздел :doc:`Углублённый материал: Как создать повторно "
"применяемое приложение</intro/reusable-apps>`."
